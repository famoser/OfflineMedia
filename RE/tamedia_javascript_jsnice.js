window.defaultCustomer = "tagesanzeiger", window.api = "local", function(global) {
    var __define_;
    var __require_;
    !function() {
        var registry = {};
        var seen = {};
        /**
         * @param {string} name
         * @param {Array} opt_attributes
         * @param {Function} callback
         * @return {undefined}
         */
        __define_ = function(name, opt_attributes, callback) {
            registry[name] = {
                deps : opt_attributes,
                /** @type {Function} */
                callback : callback
            };
        };
        /**
         * @param {string} name
         * @return {?}
         */
        __require_ = function(name) {
            /**
             * @param {string} child
             * @return {?}
             */
            function resolve(child) {
                if ("." !== child.charAt(0)) {
                    return child;
                }
                var values = child.split("/");
                var pieces = name.split("/").slice(0, -1);
                /** @type {number} */
                var i = 0;
                var valuesLen = values.length;
                for (;i < valuesLen;i++) {
                    var value = values[i];
                    if (".." === value) {
                        pieces.pop();
                    } else {
                        if ("." === value) {
                            continue;
                        }
                        pieces.push(value);
                    }
                }
                return pieces.join("/");
            }
            if (seen[name]) {
                return seen[name];
            }
            if (seen[name] = {}, !registry[name]) {
                throw new Error("Could not find module " + name);
            }
            var exports;
            var mod = registry[name];
            var deps = mod.deps;
            var callback = mod.callback;
            /** @type {Array} */
            var args = [];
            /** @type {number} */
            var i = 0;
            var valuesLen = deps.length;
            for (;i < valuesLen;i++) {
                if ("exports" === deps[i]) {
                    args.push(exports = {});
                } else {
                    args.push(__require_(resolve(deps[i])));
                }
            }
            var value = callback.apply(this, args);
            return seen[name] = exports || value;
        };
        __require_.entries = registry;
    }();
    __define_("rsvp/all-settled", ["./promise", "./utils", "exports"], function(opts, __dependency1__, obj) {
        /**
         * @param {?} name
         * @return {?}
         */
        function fulfilled(name) {
            return{
                state : "fulfilled",
                value : name
            };
        }
        /**
         * @param {?} reason
         * @return {?}
         */
        function rejected(reason) {
            return{
                state : "rejected",
                reason : reason
            };
        }
        var def = opts.default;
        var isArray = __dependency1__.isArray;
        var isNonThenable = __dependency1__.isNonThenable;
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {?}
         */
        obj.default = function(name, recurring) {
            return new def(function(done, dataAndEvents) {
                /**
                 * @param {number} index
                 * @return {?}
                 */
                function fulfilledResolver(index) {
                    return function(entry) {
                        resolveAll(index, fulfilled(entry));
                    };
                }
                /**
                 * @param {number} index
                 * @return {?}
                 */
                function rejectedResolver(index) {
                    return function(reason) {
                        resolveAll(index, rejected(reason));
                    };
                }
                /**
                 * @param {number} index
                 * @param {?} value
                 * @return {undefined}
                 */
                function resolveAll(index, value) {
                    results[index] = value;
                    if (0 === --length) {
                        done(results);
                    }
                }
                if (!isArray(name)) {
                    throw new TypeError("You must pass an array to allSettled.");
                }
                var optgroup;
                var length = name.length;
                if (0 === length) {
                    return void done([]);
                }
                /** @type {Array} */
                var results = new Array(length);
                /** @type {number} */
                var i = 0;
                for (;i < name.length;i++) {
                    optgroup = name[i];
                    if (isNonThenable(optgroup)) {
                        resolveAll(i, fulfilled(optgroup));
                    } else {
                        def.resolve(optgroup).then(fulfilledResolver(i), rejectedResolver(i));
                    }
                }
            }, recurring);
        };
    });
    __define_("rsvp/all", ["./promise", "exports"], function(desc, obj) {
        var elem = desc.default;
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {?}
         */
        obj.default = function(name, recurring) {
            return elem.all(name, recurring);
        };
    });
    __define_("rsvp/asap", ["exports"], function(obj) {
        /**
         * @return {?}
         */
        function accountGeneric() {
            return function() {
                process.nextTick(next);
            };
        }
        /**
         * @return {?}
         */
        function useMutationObserver() {
            /** @type {number} */
            var data = 0;
            /** @type {MutationObserver} */
            var s = new Some(next);
            /** @type {Text} */
            var link = document.createTextNode("");
            return s.observe(link, {
                characterData : true
            }), function() {
                /** @type {number} */
                link.data = data = ++data % 2;
            };
        }
        /**
         * @return {?}
         */
        function wrapListener() {
            return function() {
                setTimeout(next, 1);
            };
        }
        /**
         * @return {undefined}
         */
        function next() {
            /** @type {number} */
            var i = 0;
            for (;i < ca.length;i++) {
                var c = ca[i];
                var isUndefined = c[0];
                var suiteView = c[1];
                isUndefined(suiteView);
            }
            /** @type {number} */
            ca.length = 0;
        }
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {undefined}
         */
        obj.default = function(name, recurring) {
            /** @type {number} */
            var c = ca.push([name, recurring]);
            if (1 === c) {
                rnd();
            }
        };
        var rnd;
        /** @type {(Window|{})} */
        var browserGlobal = "undefined" != typeof window ? window : {};
        var Some = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
        /** @type {Array} */
        var ca = [];
        rnd = "undefined" != typeof process && "[object process]" === {}.toString.call(process) ? accountGeneric() : Some ? useMutationObserver() : wrapListener();
    });
    __define_("rsvp/config", ["./events", "exports"], function(obj, exports) {
        /**
         * @param {?} opt_attributes
         * @param {?} selector
         * @return {?}
         */
        function setup(opt_attributes, selector) {
            return "onerror" === opt_attributes ? void self.on("error", selector) : 2 !== arguments.length ? self[opt_attributes] : void(self[opt_attributes] = selector);
        }
        var fn = obj.default;
        var self = {
            instrument : false
        };
        fn.mixin(self);
        exports.config = self;
        /** @type {function (?, ?): ?} */
        exports.configure = setup;
    });
    __define_("rsvp/defer", ["./promise", "exports"], function(obj, join) {
        var fn = obj.default;
        /**
         * @param {string} name
         * @return {?}
         */
        join.default = function(name) {
            var deferred = {};
            return deferred.promise = new fn(function(resolve, reject) {
                deferred.resolve = resolve;
                deferred.reject = reject;
            }, name), deferred;
        };
    });
    __define_("rsvp/events", ["exports"], function(EventEmitter) {
        /**
         * @param {(Array|NodeList)} arr
         * @param {Function} obj
         * @return {?}
         */
        function indexOf(arr, obj) {
            /** @type {number} */
            var i = 0;
            var e = arr.length;
            for (;i < e;i++) {
                if (arr[i] === obj) {
                    return i;
                }
            }
            return-1;
        }
        /**
         * @param {Object} object
         * @return {?}
         */
        function callbacksFor(object) {
            var events = object._promiseCallbacks;
            return events || (events = object._promiseCallbacks = {}), events;
        }
        EventEmitter.default = {
            /**
             * @param {Object} object
             * @return {?}
             */
            mixin : function(object) {
                return object.on = this.on, object.off = this.off, object.trigger = this.trigger, object._promiseCallbacks = void 0, object;
            },
            /**
             * @param {string} type
             * @param {Function} value
             * @return {undefined}
             */
            on : function(type, value) {
                var seen;
                var special = callbacksFor(this);
                seen = special[type];
                if (!seen) {
                    /** @type {Array} */
                    seen = special[type] = [];
                }
                if (indexOf(seen, value) === -1) {
                    seen.push(value);
                }
            },
            /**
             * @param {string} type
             * @param {Function} target
             * @return {?}
             */
            off : function(type, target) {
                var listeners;
                var index;
                var data = callbacksFor(this);
                return target ? (listeners = data[type], index = indexOf(listeners, target), void(index !== -1 && listeners.splice(index, 1))) : void(data[type] = []);
            },
            /**
             * @param {string} type
             * @param {?} name
             * @return {undefined}
             */
            trigger : function(type, name) {
                var codeSegments;
                var part;
                var special = callbacksFor(this);
                if (codeSegments = special[type]) {
                    /** @type {number} */
                    var i = 0;
                    for (;i < codeSegments.length;i++) {
                        (part = codeSegments[i])(name);
                    }
                }
            }
        };
    });
    __define_("rsvp/filter", ["./promise", "./utils", "exports"], function(desc, __dependency3__, obj) {
        var elem = desc.default;
        var isFunction = __dependency3__.isFunction;
        /**
         * @param {string} name
         * @param {Function} recurring
         * @param {Function} deepDataAndEvents
         * @return {?}
         */
        obj.default = function(name, recurring, deepDataAndEvents) {
            return elem.all(name, deepDataAndEvents).then(function(second) {
                if (!isFunction(recurring)) {
                    throw new TypeError("You must pass a function as filter's second argument.");
                }
                var l = second.length;
                /** @type {Array} */
                var optgroup = new Array(l);
                /** @type {number} */
                var j = 0;
                for (;j < l;j++) {
                    optgroup[j] = recurring(second[j]);
                }
                return elem.all(optgroup, deepDataAndEvents).then(function(duplicates) {
                    /** @type {Array} */
                    var first = new Array(l);
                    /** @type {number} */
                    var i = 0;
                    /** @type {number} */
                    var j = 0;
                    for (;j < l;j++) {
                        if (duplicates[j] === true) {
                            first[i] = second[j];
                            i++;
                        }
                    }
                    return first.length = i, first;
                });
            });
        };
    });
    __define_("rsvp/hash-settled", ["./promise", "./utils", "exports"], function(opts, __dependency2__, obj) {
        /**
         * @param {?} name
         * @return {?}
         */
        function fulfilled(name) {
            return{
                state : "fulfilled",
                value : name
            };
        }
        /**
         * @param {?} reason
         * @return {?}
         */
        function rejected(reason) {
            return{
                state : "rejected",
                reason : reason
            };
        }
        var def = opts.default;
        var isNonThenable = __dependency2__.isNonThenable;
        var func = __dependency2__.keysOf;
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {?}
         */
        obj.default = function(name, recurring) {
            return new def(function(done, dataAndEvents) {
                /**
                 * @param {?} index
                 * @return {?}
                 */
                function fulfilledResolver(index) {
                    return function(entry) {
                        resolveAll(index, fulfilled(entry));
                    };
                }
                /**
                 * @param {?} index
                 * @return {?}
                 */
                function rejectedResolver(index) {
                    return function(reason) {
                        resolveAll(index, rejected(reason));
                    };
                }
                /**
                 * @param {?} property
                 * @param {?} value
                 * @return {undefined}
                 */
                function resolveAll(property, value) {
                    results[property] = value;
                    if (0 === --al) {
                        done(results);
                    }
                }
                var optgroup;
                var index;
                var results = {};
                var a = func(name);
                var al = a.length;
                if (0 === al) {
                    return void done(results);
                }
                /** @type {number} */
                var i = 0;
                for (;i < a.length;i++) {
                    index = a[i];
                    optgroup = name[index];
                    if (isNonThenable(optgroup)) {
                        resolveAll(index, fulfilled(optgroup));
                    } else {
                        def.resolve(optgroup).then(fulfilledResolver(index), rejectedResolver(index));
                    }
                }
            });
        };
    });
    __define_("rsvp/hash", ["./promise", "./utils", "exports"], function(opts, __dependency2__, obj) {
        var def = opts.default;
        var isNonThenable = __dependency2__.isNonThenable;
        var keysOf = __dependency2__.keysOf;
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {?}
         */
        obj.default = function(name, recurring) {
            return new def(function(done, reject) {
                /**
                 * @param {?} i
                 * @return {?}
                 */
                function action(i) {
                    return function(val) {
                        qs[i] = val;
                        if (0 === --array_length) {
                            done(qs);
                        }
                    };
                }
                /**
                 * @param {?} reason
                 * @return {undefined}
                 */
                function rejected(reason) {
                    /** @type {number} */
                    array_length = 0;
                    reject(reason);
                }
                var optgroup;
                var i;
                var qs = {};
                var array = keysOf(name);
                var array_length = array.length;
                if (0 === array_length) {
                    return void done(qs);
                }
                /** @type {number} */
                var idx = 0;
                for (;idx < array.length;idx++) {
                    i = array[idx];
                    optgroup = name[i];
                    if (isNonThenable(optgroup)) {
                        qs[i] = optgroup;
                        if (0 === --array_length) {
                            done(qs);
                        }
                    } else {
                        def.resolve(optgroup).then(action(i), rejected);
                    }
                }
            });
        };
    });
    __define_("rsvp/instrument", ["./config", "./utils", "exports"], function(__dependency1__, Time, obj) {
        var config = __dependency1__.config;
        var now = Time.now;
        /**
         * @param {string} name
         * @param {Function} recurring
         * @param {Object} deepDataAndEvents
         * @return {undefined}
         */
        obj.default = function(name, recurring, deepDataAndEvents) {
            try {
                config.trigger(name, {
                    guid : recurring._guidKey + recurring._id,
                    eventName : name,
                    detail : recurring._detail,
                    childGuid : deepDataAndEvents && recurring._guidKey + deepDataAndEvents._id,
                    label : recurring._label,
                    timeStamp : now(),
                    stack : (new Error(recurring._label)).stack
                });
            } catch (f) {
                setTimeout(function() {
                    throw f;
                }, 0);
            }
        };
    });
    __define_("rsvp/map", ["./promise", "./utils", "exports"], function(desc, __dependency3__, obj) {
        var elem = desc.default;
        var throttledUpdate = (__dependency3__.isArray, __dependency3__.isFunction);
        /**
         * @param {string} name
         * @param {Function} recurring
         * @param {Function} deepDataAndEvents
         * @return {?}
         */
        obj.default = function(name, recurring, deepDataAndEvents) {
            return elem.all(name, deepDataAndEvents).then(function(a) {
                if (!throttledUpdate(recurring)) {
                    throw new TypeError("You must pass a function as map's second argument.");
                }
                var al = a.length;
                /** @type {Array} */
                var optgroup = new Array(al);
                /** @type {number} */
                var ai = 0;
                for (;ai < al;ai++) {
                    optgroup[ai] = recurring(a[ai]);
                }
                return elem.all(optgroup, deepDataAndEvents);
            });
        };
    });
    __define_("rsvp/node", ["./promise", "./utils", "exports"], function(opts, __dependency3__, obj) {
        var select = opts.default;
        var isArray = __dependency3__.isArray;
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {?}
         */
        obj.default = function(name, recurring) {
            /**
             * @return {?}
             */
            function initialize() {
                /** @type {number} */
                var ln = arguments.length;
                /** @type {Array} */
                var optgroup = new Array(ln);
                /** @type {number} */
                var i = 0;
                for (;i < ln;i++) {
                    optgroup[i] = arguments[i];
                }
                var dontCloseTags;
                return doubleQuotedValue || (singleQoutedValue || !recurring) ? dontCloseTags = this : (console.warn('Deprecation: RSVP.denodeify() doesn\'t allow setting the "this" binding anymore. Use yourFunction.bind(yourThis) instead.'), dontCloseTags = recurring), select.all(optgroup).then(function(args) {
                    /**
                     * @param {?} callback
                     * @param {?} each
                     * @return {undefined}
                     */
                    function map(callback, each) {
                        /**
                         * @return {undefined}
                         */
                        function options() {
                            /** @type {number} */
                            var $_len = arguments.length;
                            /** @type {Array} */
                            var args = new Array($_len);
                            /** @type {number} */
                            var $_i = 0;
                            for (;$_i < $_len;$_i++) {
                                args[$_i] = arguments[$_i];
                            }
                            var funcs = args[0];
                            var err = args[1];
                            if (funcs) {
                                each(funcs);
                            } else {
                                if (doubleQuotedValue) {
                                    callback(args.slice(1));
                                } else {
                                    if (singleQoutedValue) {
                                        var k;
                                        var i;
                                        var a = {};
                                        /** @type {Array.<?>} */
                                        var b = args.slice(1);
                                        /** @type {number} */
                                        i = 0;
                                        for (;i < recurring.length;i++) {
                                            k = recurring[i];
                                            a[k] = b[i];
                                        }
                                        callback(a);
                                    } else {
                                        callback(err);
                                    }
                                }
                            }
                        }
                        args.push(options);
                        name.apply(dontCloseTags, args);
                    }
                    return new select(map);
                });
            }
            /** @type {boolean} */
            var doubleQuotedValue = recurring === true;
            var singleQoutedValue = isArray(recurring);
            return initialize.__proto__ = name, initialize;
        };
    });
    __define_("rsvp/promise", ["./config", "./events", "./instrument", "./utils", "./promise/cast", "./promise/all", "./promise/race", "./promise/resolve", "./promise/reject", "exports"], function(service, obj, join, __dependency4__, __dependency3__, opts, value, opt, lang, __exports__) {
        /**
         * @return {undefined}
         */
        function noop() {
        }
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {undefined}
         */
        function Promise(name, recurring) {
            if (!isFunction(name)) {
                throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
            }
            if (!(this instanceof Promise)) {
                throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
            }
            /** @type {number} */
            this._id = counter++;
            /** @type {Function} */
            this._label = recurring;
            /** @type {Array} */
            this._subscribers = [];
            if (options.instrument) {
                instrument("created", this);
            }
            if (noop !== name) {
                define(name, this);
            }
        }
        /**
         * @param {string} callback
         * @param {?} recurring
         * @return {undefined}
         */
        function define(callback, recurring) {
            /**
             * @param {?} value
             * @return {undefined}
             */
            function cb(value) {
                resolve(recurring, value);
            }
            /**
             * @param {string} value
             * @return {undefined}
             */
            function resolve(value) {
                reject(recurring, value);
            }
            try {
                callback(cb, resolve);
            } catch (udataCur) {
                resolve(udataCur);
            }
        }
        /**
         * @param {?} parent
         * @param {?} child
         * @param {Function} onFulfillment
         * @param {Function} fn
         * @return {undefined}
         */
        function subscribe(parent, child, onFulfillment, fn) {
            var subscribers = parent._subscribers;
            var length = subscribers.length;
            subscribers[length] = child;
            /** @type {Function} */
            subscribers[length + FULFILLED] = onFulfillment;
            /** @type {Function} */
            subscribers[length + REJECTED] = fn;
        }
        /**
         * @param {Object} promise
         * @param {number} settled
         * @return {undefined}
         */
        function publish(promise, settled) {
            var child;
            var restoreScript;
            var subscribers = promise._subscribers;
            var detail = promise._detail;
            if (options.instrument) {
                instrument(settled === FULFILLED ? "fulfilled" : "rejected", promise);
            }
            /** @type {number} */
            var i = 0;
            for (;i < subscribers.length;i += 3) {
                child = subscribers[i];
                restoreScript = subscribers[i + settled];
                invokeCallback(settled, child, restoreScript, detail);
            }
            /** @type {null} */
            promise._subscribers = null;
        }
        /**
         * @param {number} settled
         * @param {?} recurring
         * @param {string} callback
         * @param {number} detail
         * @return {undefined}
         */
        function invokeCallback(settled, recurring, callback, detail) {
            var value;
            var error;
            var b;
            var h;
            var a = isFunction(callback);
            if (a) {
                try {
                    value = callback(detail);
                    /** @type {boolean} */
                    b = true;
                } catch (err) {
                    /** @type {boolean} */
                    h = true;
                    error = err;
                }
            } else {
                /** @type {number} */
                value = detail;
                /** @type {boolean} */
                b = true;
            }
            if (!handleThenable(recurring, value)) {
                if (a && b) {
                    resolve(recurring, value);
                } else {
                    if (h) {
                        reject(recurring, error);
                    } else {
                        if (settled === FULFILLED) {
                            resolve(recurring, value);
                        } else {
                            if (settled === REJECTED) {
                                reject(recurring, value);
                            }
                        }
                    }
                }
            }
        }
        /**
         * @param {?} recurring
         * @param {?} value
         * @return {?}
         */
        function handleThenable(recurring, value) {
            var c;
            /** @type {null} */
            var optgroup = null;
            try {
                if (recurring === value) {
                    throw new TypeError("A promises callback cannot return that same promise.");
                }
                if (objectOrFunction(value) && (optgroup = value.then, isFunction(optgroup))) {
                    return optgroup.call(value, function(val) {
                        return!!c || (c = true, void(value !== val ? resolve(recurring, val) : fulfill(recurring, val)));
                    }, function(isXML) {
                        return!!c || (c = true, void reject(recurring, isXML));
                    }, "Settle: " + (recurring._label || " unknown promise")), true;
                }
            } catch (udataCur) {
                return!!c || (reject(recurring, udataCur), true);
            }
            return false;
        }
        /**
         * @param {?} recurring
         * @param {?} value
         * @return {undefined}
         */
        function resolve(recurring, value) {
            if (recurring === value) {
                fulfill(recurring, value);
            } else {
                if (!handleThenable(recurring, value)) {
                    fulfill(recurring, value);
                }
            }
        }
        /**
         * @param {Function} recurring
         * @param {Function} value
         * @return {undefined}
         */
        function fulfill(recurring, value) {
            if (recurring._state === FILTER) {
                /** @type {number} */
                recurring._state = SEALED;
                /** @type {Function} */
                recurring._detail = value;
                options.async(rvar, recurring);
            }
        }
        /**
         * @param {Function} recurring
         * @param {string} value
         * @return {undefined}
         */
        function reject(recurring, value) {
            if (recurring._state === FILTER) {
                /** @type {number} */
                recurring._state = SEALED;
                /** @type {string} */
                recurring._detail = value;
                options.async(optgroup, recurring);
            }
        }
        /**
         * @param {Object} promise
         * @return {undefined}
         */
        function rvar(promise) {
            publish(promise, promise._state = FULFILLED);
        }
        /**
         * @param {Object} promise
         * @return {undefined}
         */
        function optgroup(promise) {
            if (promise._onerror) {
                promise._onerror(promise._detail);
            }
            publish(promise, promise._state = REJECTED);
        }
        var options = service.config;
        var instrument = (obj.default, join.default);
        var objectOrFunction = __dependency4__.objectOrFunction;
        var isFunction = __dependency4__.isFunction;
        var now = __dependency4__.now;
        var cast = __dependency3__.default;
        var fn = opts.default;
        var race = value.default;
        var Resolve = opt.default;
        var Reject = lang.default;
        /** @type {string} */
        var guidKey = "rsvp_" + now() + "-";
        /** @type {number} */
        var counter = 0;
        /** @type {function (string, Function): undefined} */
        __exports__.default = Promise;
        Promise.cast = cast;
        Promise.all = fn;
        Promise.race = race;
        Promise.resolve = Resolve;
        Promise.reject = Reject;
        var FILTER = void 0;
        /** @type {number} */
        var SEALED = 0;
        /** @type {number} */
        var FULFILLED = 1;
        /** @type {number} */
        var REJECTED = 2;
        Promise.prototype = {
            /** @type {function (string, Function): undefined} */
            constructor : Promise,
            _id : void 0,
            _guidKey : guidKey,
            _label : void 0,
            _state : void 0,
            _detail : void 0,
            _subscribers : void 0,
            /**
             * @param {?} data
             * @return {undefined}
             */
            _onerror : function(data) {
                options.trigger("error", data);
            },
            /**
             * @param {Function} onFulfillment
             * @param {Function} rejected
             * @param {Object} label
             * @return {?}
             */
            then : function(onFulfillment, rejected, label) {
                var promise = this;
                /** @type {null} */
                this._onerror = null;
                var thenPromise = new this.constructor(noop, label);
                if (this._state) {
                    /** @type {Arguments} */
                    var callbacks = arguments;
                    options.async(function() {
                        invokeCallback(promise._state, thenPromise, callbacks[promise._state - 1], promise._detail);
                    });
                } else {
                    subscribe(this, thenPromise, onFulfillment, rejected);
                }
                return options.instrument && instrument("chained", promise, thenPromise), thenPromise;
            },
            /**
             * @param {Function} rejected
             * @param {Object} label
             * @return {?}
             */
            catch : function(rejected, label) {
                return this.then(null, rejected, label);
            },
            /**
             * @param {?} callback
             * @param {Object} label
             * @return {?}
             */
            finally : function(callback, label) {
                var constructor = this.constructor;
                return this.then(function(dataAndEvents) {
                    return constructor.resolve(callback()).then(function() {
                        return dataAndEvents;
                    });
                }, function(dataAndEvents) {
                    return constructor.resolve(callback()).then(function() {
                        throw dataAndEvents;
                    });
                }, label);
            }
        };
    });
    __define_("rsvp/promise/all", ["../utils", "exports"], function(__dependency1__, obj) {
        var isArray = __dependency1__.isArray;
        var isNonThenable = __dependency1__.isNonThenable;
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {?}
         */
        obj.default = function(name, recurring) {
            var parent = this;
            return new parent(function($, done) {
                /**
                 * @param {number} token
                 * @return {?}
                 */
                function onSuccess(token) {
                    return function(style) {
                        result[token] = style;
                        if (0 === --size) {
                            $(result);
                        }
                    };
                }
                /**
                 * @param {?} error
                 * @return {undefined}
                 */
                function rejected(error) {
                    /** @type {number} */
                    size = 0;
                    done(error);
                }
                if (!isArray(name)) {
                    throw new TypeError("You must pass an array to all.");
                }
                var optgroup;
                var size = name.length;
                /** @type {Array} */
                var result = new Array(size);
                if (0 === size) {
                    return void $(result);
                }
                /** @type {number} */
                var i = 0;
                for (;i < name.length;i++) {
                    optgroup = name[i];
                    if (isNonThenable(optgroup)) {
                        result[i] = optgroup;
                        if (0 === --size) {
                            $(result);
                        }
                    } else {
                        parent.resolve(optgroup).then(onSuccess(i), rejected);
                    }
                }
            }, recurring);
        };
    });
    __define_("rsvp/promise/cast", ["exports"], function(obj) {
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {?}
         */
        obj.default = function(name, recurring) {
            var scClass = this;
            return name && ("object" == typeof name && name.constructor === scClass) ? name : new scClass(function(func) {
                func(name);
            }, recurring);
        };
    });
    __define_("rsvp/promise/race", ["../utils", "exports"], function(__dependency1__, obj) {
        var isArray = __dependency1__.isArray;
        var $ = (__dependency1__.isFunction, __dependency1__.isNonThenable);
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {?}
         */
        obj.default = function(name, recurring) {
            var optgroup;
            var parent = this;
            return new parent(function(done, reject) {
                /**
                 * @param {?} err
                 * @return {undefined}
                 */
                function complete(err) {
                    if (j) {
                        /** @type {boolean} */
                        j = false;
                        done(err);
                    }
                }
                /**
                 * @param {?} reason
                 * @return {undefined}
                 */
                function rejected(reason) {
                    if (j) {
                        /** @type {boolean} */
                        j = false;
                        reject(reason);
                    }
                }
                if (!isArray(name)) {
                    throw new TypeError("You must pass an array to race.");
                }
                /** @type {boolean} */
                var j = true;
                /** @type {number} */
                var i = 0;
                for (;i < name.length;i++) {
                    if (optgroup = name[i], $(optgroup)) {
                        return j = false, void done(optgroup);
                    }
                    parent.resolve(optgroup).then(complete, rejected);
                }
            }, recurring);
        };
    });
    __define_("rsvp/promise/reject", ["exports"], function(obj) {
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {?}
         */
        obj.default = function(name, recurring) {
            var type = this;
            return new type(function(dataAndEvents, func) {
                func(name);
            }, recurring);
        };
    });
    __define_("rsvp/promise/resolve", ["exports"], function(obj) {
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {?}
         */
        obj.default = function(name, recurring) {
            var scClass = this;
            return name && ("object" == typeof name && name.constructor === scClass) ? name : new scClass(function(func) {
                func(name);
            }, recurring);
        };
    });
    __define_("rsvp/race", ["./promise", "exports"], function(obj, join) {
        var classes = obj.default;
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {?}
         */
        join.default = function(name, recurring) {
            return classes.race(name, recurring);
        };
    });
    __define_("rsvp/reject", ["./promise", "exports"], function(self, obj) {
        var frame = self.default;
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {?}
         */
        obj.default = function(name, recurring) {
            return frame.reject(name, recurring);
        };
    });
    __define_("rsvp/resolve", ["./promise", "exports"], function(self, obj) {
        var frame = self.default;
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {?}
         */
        obj.default = function(name, recurring) {
            return frame.resolve(name, recurring);
        };
    });
    __define_("rsvp/rethrow", ["exports"], function(obj) {
        /**
         * @param {string} name
         * @return {?}
         */
        obj.default = function(name) {
            throw setTimeout(function() {
                throw name;
            }), name;
        };
    });
    __define_("rsvp/utils", ["exports"], function(__exports__) {
        /**
         * @param {Object} arg
         * @return {?}
         */
        function objectOrFunction(arg) {
            return "function" == typeof arg || "object" == typeof arg && null !== arg;
        }
        /**
         * @param {string} name
         * @return {?}
         */
        function isFunction(name) {
            return "function" == typeof name;
        }
        /**
         * @param {Error} name
         * @return {?}
         */
        function isNonThenable(name) {
            return!objectOrFunction(name);
        }
        /** @type {function (Object): ?} */
        __exports__.objectOrFunction = objectOrFunction;
        /** @type {function (string): ?} */
        __exports__.isFunction = isFunction;
        /** @type {function (Error): ?} */
        __exports__.isNonThenable = isNonThenable;
        var e;
        /** @type {Function} */
        e = Array.isArray ? Array.isArray : function(name) {
            return "[object Array]" === Object.prototype.toString.call(name);
        };
        /** @type {Function} */
        var isArray = e;
        /** @type {Function} */
        __exports__.isArray = isArray;
        /** @type {function (): number} */
        var now = Date.now || function() {
            return(new Date).getTime();
        };
        /** @type {function (): number} */
        __exports__.now = now;
        /** @type {function (Object): Array.<string>} */
        var keysOf = Object.keys || function(name) {
            /** @type {Array} */
            var bucket = [];
            var value;
            for (value in name) {
                bucket.push(value);
            }
            return bucket;
        };
        /** @type {function (Object): Array.<string>} */
        __exports__.keysOf = keysOf;
    });
    __define_("rsvp", ["./rsvp/promise", "./rsvp/events", "./rsvp/node", "./rsvp/all", "./rsvp/all-settled", "./rsvp/race", "./rsvp/hash", "./rsvp/hash-settled", "./rsvp/rethrow", "./rsvp/defer", "./rsvp/config", "./rsvp/map", "./rsvp/resolve", "./rsvp/reject", "./rsvp/filter", "./rsvp/asap", "exports"], function(__dependency1__, __dependency2__, obj, self, join, opts, opt, c, __dependency6__, __dependency7__, __dependency9__, prop, value, __dependency10__, options, lang, __exports__) {
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {undefined}
         */
        function resolve(name, recurring) {
            config.async(name, recurring);
        }
        /**
         * @return {undefined}
         */
        function on() {
            config.on.apply(config, arguments);
        }
        /**
         * @return {undefined}
         */
        function off() {
            config.off.apply(config, arguments);
        }
        var Promise = __dependency1__.default;
        var EventTarget = __dependency2__.default;
        var denodeify = obj.default;
        var all = self.default;
        var allSettled = join.default;
        var race = opts.default;
        var hash = opt.default;
        var async = c.default;
        var rethrow = __dependency6__.default;
        var defer = __dependency7__.default;
        var config = __dependency9__.config;
        var configure = __dependency9__.configure;
        var map = prop.default;
        var noop = value.default;
        var reject = __dependency10__.default;
        var filter = options.default;
        var asap = lang.default;
        if (config.async = asap, "undefined" != typeof window && "object" == typeof window.__PROMISE_INSTRUMENTATION__) {
            var callbacks = window.__PROMISE_INSTRUMENTATION__;
            configure("instrument", true);
            var fix;
            for (fix in callbacks) {
                if (callbacks.hasOwnProperty(fix)) {
                    on(fix, callbacks[fix]);
                }
            }
        }
        __exports__.Promise = Promise;
        __exports__.EventTarget = EventTarget;
        __exports__.all = all;
        __exports__.allSettled = allSettled;
        __exports__.race = race;
        __exports__.hash = hash;
        __exports__.hashSettled = async;
        __exports__.rethrow = rethrow;
        __exports__.defer = defer;
        __exports__.denodeify = denodeify;
        __exports__.configure = configure;
        /** @type {function (): undefined} */
        __exports__.on = on;
        /** @type {function (): undefined} */
        __exports__.off = off;
        __exports__.resolve = noop;
        __exports__.reject = reject;
        /** @type {function (string, Function): undefined} */
        __exports__.async = resolve;
        __exports__.map = map;
        __exports__.filter = filter;
    });
    global.RSVP = __require_("rsvp");
}(window), function() {
    /**
     * @param {Object} layer
     * @param {Object} handler
     * @return {undefined}
     */
    function FastClick(layer, handler) {
        /**
         * @param {Function} method
         * @param {?} object
         * @return {?}
         */
        function bind(method, object) {
            return function() {
                return method.apply(object, arguments);
            };
        }
        var oldOnClick;
        if (handler = handler || {}, this.trackingClick = false, this.trackingClickStart = 0, this.targetElement = null, this.touchStartX = 0, this.touchStartY = 0, this.lastTouchIdentifier = 0, this.touchBoundary = handler.touchBoundary || 10, this.layer = layer, this.tapDelay = handler.tapDelay || 200, this.tapTimeout = handler.tapTimeout || 700, !FastClick.notNeeded(layer)) {
            /** @type {Array} */
            var codeSegments = ["onMouse", "onClick", "onTouchStart", "onTouchMove", "onTouchEnd", "onTouchCancel"];
            var object = this;
            /** @type {number} */
            var i = 0;
            /** @type {number} */
            var valuesLen = codeSegments.length;
            for (;i < valuesLen;i++) {
                object[codeSegments[i]] = bind(object[codeSegments[i]], object);
            }
            if (mousedown) {
                layer.addEventListener("mouseover", this.onMouse, true);
                layer.addEventListener("mousedown", this.onMouse, true);
                layer.addEventListener("mouseup", this.onMouse, true);
            }
            layer.addEventListener("click", this.onClick, true);
            layer.addEventListener("touchstart", this.onTouchStart, false);
            layer.addEventListener("touchmove", this.onTouchMove, false);
            layer.addEventListener("touchend", this.onTouchEnd, false);
            layer.addEventListener("touchcancel", this.onTouchCancel, false);
            if (!Event.prototype.stopImmediatePropagation) {
                /**
                 * @param {string} event
                 * @param {string} type
                 * @param {boolean} recurring
                 * @return {undefined}
                 */
                layer.removeEventListener = function(event, type, recurring) {
                    /** @type {function (this:Node, string, (EventListener|function ((Event|null)): (boolean|undefined)|null), boolean): undefined} */
                    var callback = Node.prototype.removeEventListener;
                    if ("click" === event) {
                        callback.call(layer, event, type.hijacked || type, recurring);
                    } else {
                        callback.call(layer, event, type, recurring);
                    }
                };
                /**
                 * @param {string} type
                 * @param {string} callback
                 * @param {boolean} recurring
                 * @return {undefined}
                 */
                layer.addEventListener = function(type, callback, recurring) {
                    /** @type {function (this:Node, string, (EventListener|function ((Event|null)): (boolean|undefined)|null), boolean): undefined} */
                    var adv = Node.prototype.addEventListener;
                    if ("click" === type) {
                        adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
                            if (!event.propagationStopped) {
                                callback(event);
                            }
                        }), recurring);
                    } else {
                        adv.call(layer, type, callback, recurring);
                    }
                };
            }
            if ("function" == typeof layer.onclick) {
                /** @type {Function} */
                oldOnClick = layer.onclick;
                layer.addEventListener("click", function(event) {
                    oldOnClick(event);
                }, false);
                /** @type {null} */
                layer.onclick = null;
            }
        }
    }
    /** @type {boolean} */
    var b = navigator.userAgent.indexOf("Windows Phone") >= 0;
    /** @type {boolean} */
    var mousedown = navigator.userAgent.indexOf("Android") > 0 && !b;
    /** @type {boolean} */
    var value = /iP(ad|hone|od)/.test(navigator.userAgent) && !b;
    /** @type {boolean} */
    var parsedValue = value && /OS 4_\d(_\d)?/.test(navigator.userAgent);
    /** @type {boolean} */
    var attrNames = value && /OS [6-7]_\d/.test(navigator.userAgent);
    /** @type {boolean} */
    var g = navigator.userAgent.indexOf("BB10") > 0;
    /**
     * @param {Element} elem
     * @return {?}
     */
    FastClick.prototype.needsClick = function(elem) {
        switch(elem.nodeName.toLowerCase()) {
            case "button":
                ;
            case "select":
                ;
            case "textarea":
                if (elem.disabled) {
                    return true;
                }
                break;
            case "input":
                if (value && "file" === elem.type || elem.disabled) {
                    return true;
                }
                break;
            case "label":
                ;
            case "iframe":
                ;
            case "video":
                return true;
        }
        return/\bneedsclick\b/.test(elem.className);
    };
    /**
     * @param {Object} target
     * @return {?}
     */
    FastClick.prototype.needsFocus = function(target) {
        switch(target.nodeName.toLowerCase()) {
            case "textarea":
                return true;
            case "select":
                return!mousedown;
            case "input":
                switch(target.type) {
                    case "button":
                        ;
                    case "checkbox":
                        ;
                    case "file":
                        ;
                    case "image":
                        ;
                    case "radio":
                        ;
                    case "submit":
                        return false;
                }
                return!target.disabled && !target.readOnly;
            default:
                return/\bneedsfocus\b/.test(target.className);
        }
    };
    /**
     * @param {Object} targetElement
     * @param {Event} event
     * @return {undefined}
     */
    FastClick.prototype.sendClick = function(targetElement, event) {
        var clickEvent;
        var touch;
        if (document.activeElement) {
            if (document.activeElement !== targetElement) {
                document.activeElement.blur();
            }
        }
        touch = event.changedTouches[0];
        /** @type {(Event|null)} */
        clickEvent = document.createEvent("MouseEvents");
        clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
        /** @type {boolean} */
        clickEvent.forwardedTouchEvent = true;
        targetElement.dispatchEvent(clickEvent);
    };
    /**
     * @param {Node} targetElement
     * @return {?}
     */
    FastClick.prototype.determineEventType = function(targetElement) {
        return mousedown && "select" === targetElement.tagName.toLowerCase() ? "mousedown" : "click";
    };
    /**
     * @param {string} name
     * @return {undefined}
     */
    FastClick.prototype.focus = function(name) {
        var ol;
        if (value && (name.setSelectionRange && (0 !== name.type.indexOf("date") && ("time" !== name.type && "month" !== name.type)))) {
            ol = name.value.length;
            name.setSelectionRange(ol, ol);
        } else {
            name.focus();
        }
    };
    /**
     * @param {EventTarget} targetElement
     * @return {undefined}
     */
    FastClick.prototype.updateScrollParent = function(targetElement) {
        var scrollParent;
        var parentElement;
        if (scrollParent = targetElement.fastClickScrollParent, !scrollParent || !scrollParent.contains(targetElement)) {
            /** @type {EventTarget} */
            parentElement = targetElement;
            do {
                if (parentElement.scrollHeight > parentElement.offsetHeight) {
                    scrollParent = parentElement;
                    targetElement.fastClickScrollParent = parentElement;
                    break;
                }
                parentElement = parentElement.parentElement;
            } while (parentElement);
        }
        if (scrollParent) {
            scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
        }
    };
    /**
     * @param {Object} eventTarget
     * @return {?}
     */
    FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {
        return eventTarget.nodeType === Node.TEXT_NODE ? eventTarget.parentNode : eventTarget;
    };
    /**
     * @param {Event} event
     * @return {?}
     */
    FastClick.prototype.onTouchStart = function(event) {
        var targetElement;
        var touch;
        var selection;
        if (event.targetTouches.length > 1) {
            return true;
        }
        if (targetElement = this.getTargetElementFromEventTarget(event.target), touch = event.targetTouches[0], value) {
            if (selection = window.getSelection(), selection.rangeCount && !selection.isCollapsed) {
                return true;
            }
            if (!parsedValue) {
                if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
                    return event.preventDefault(), false;
                }
                this.lastTouchIdentifier = touch.identifier;
                this.updateScrollParent(targetElement);
            }
        }
        return this.trackingClick = true, this.trackingClickStart = event.timeStamp, this.targetElement = targetElement, this.touchStartX = touch.pageX, this.touchStartY = touch.pageY, event.timeStamp - this.lastClickTime < this.tapDelay && event.preventDefault(), true;
    };
    /**
     * @param {Event} event
     * @return {?}
     */
    FastClick.prototype.touchHasMoved = function(event) {
        var touch = event.changedTouches[0];
        var boundary = this.touchBoundary;
        return Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary;
    };
    /**
     * @param {Event} event
     * @return {?}
     */
    FastClick.prototype.onTouchMove = function(event) {
        return!this.trackingClick || ((this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) && (this.trackingClick = false, this.targetElement = null), true);
    };
    /**
     * @param {HTMLLabelElement} labelElement
     * @return {?}
     */
    FastClick.prototype.findControl = function(labelElement) {
        return void 0 !== labelElement.control ? labelElement.control : labelElement.htmlFor ? document.getElementById(labelElement.htmlFor) : labelElement.querySelector("button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea");
    };
    /**
     * @param {Event} event
     * @return {?}
     */
    FastClick.prototype.onTouchEnd = function(event) {
        var forElement;
        var trackingClickStart;
        var C;
        var scrollParent;
        var touch;
        var optgroup = this.targetElement;
        if (!this.trackingClick) {
            return true;
        }
        if (event.timeStamp - this.lastClickTime < this.tapDelay) {
            return this.cancelNextClick = true, true;
        }
        if (event.timeStamp - this.trackingClickStart > this.tapTimeout) {
            return true;
        }
        if (this.cancelNextClick = false, this.lastClickTime = event.timeStamp, trackingClickStart = this.trackingClickStart, this.trackingClick = false, this.trackingClickStart = 0, attrNames && (touch = event.changedTouches[0], optgroup = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || optgroup, optgroup.fastClickScrollParent = this.targetElement.fastClickScrollParent), C = optgroup.tagName.toLowerCase(), "label" === C) {
            if (forElement = this.findControl(optgroup)) {
                if (this.focus(optgroup), mousedown) {
                    return false;
                }
                optgroup = forElement;
            }
        } else {
            if (this.needsFocus(optgroup)) {
                return event.timeStamp - trackingClickStart > 100 || value && (window.top !== window && "input" === C) ? (this.targetElement = null, false) : (this.focus(optgroup), this.sendClick(optgroup, event), value && "select" === C || (this.targetElement = null, event.preventDefault()), false);
            }
        }
        return!(!value || (parsedValue || (scrollParent = optgroup.fastClickScrollParent, !scrollParent || scrollParent.fastClickLastScrollTop === scrollParent.scrollTop))) || (this.needsClick(optgroup) || (event.preventDefault(), this.sendClick(optgroup, event)), false);
    };
    /**
     * @return {undefined}
     */
    FastClick.prototype.onTouchCancel = function() {
        /** @type {boolean} */
        this.trackingClick = false;
        /** @type {null} */
        this.targetElement = null;
    };
    /**
     * @param {Event} event
     * @return {?}
     */
    FastClick.prototype.onMouse = function(event) {
        return!this.targetElement || (!!event.forwardedTouchEvent || (!event.cancelable || (!(!this.needsClick(this.targetElement) || this.cancelNextClick) || (event.stopImmediatePropagation ? event.stopImmediatePropagation() : event.propagationStopped = true, event.stopPropagation(), event.preventDefault(), false))));
    };
    /**
     * @param {Event} event
     * @return {?}
     */
    FastClick.prototype.onClick = function(event) {
        var permitted;
        return this.trackingClick ? (this.targetElement = null, this.trackingClick = false, true) : "submit" === event.target.type && 0 === event.detail || (permitted = this.onMouse(event), permitted || (this.targetElement = null), permitted);
    };
    /**
     * @return {undefined}
     */
    FastClick.prototype.destroy = function() {
        var layer = this.layer;
        if (mousedown) {
            layer.removeEventListener("mouseover", this.onMouse, true);
            layer.removeEventListener("mousedown", this.onMouse, true);
            layer.removeEventListener("mouseup", this.onMouse, true);
        }
        layer.removeEventListener("click", this.onClick, true);
        layer.removeEventListener("touchstart", this.onTouchStart, false);
        layer.removeEventListener("touchmove", this.onTouchMove, false);
        layer.removeEventListener("touchend", this.onTouchEnd, false);
        layer.removeEventListener("touchcancel", this.onTouchCancel, false);
    };
    /**
     * @param {Node} layer
     * @return {?}
     */
    FastClick.notNeeded = function(layer) {
        var a;
        var d;
        var e;
        var f;
        if ("undefined" == typeof window.ontouchstart) {
            return true;
        }
        if (d = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [, 0])[1]) {
            if (!mousedown) {
                return true;
            }
            if (a = document.querySelector("meta[name=viewport]")) {
                if (a.content.indexOf("user-scalable=no") !== -1) {
                    return true;
                }
                if (d > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
                    return true;
                }
            }
        }
        if (g && (e = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/), e[1] >= 10 && (e[2] >= 3 && (a = document.querySelector("meta[name=viewport]"))))) {
            if (a.content.indexOf("user-scalable=no") !== -1) {
                return true;
            }
            if (document.documentElement.scrollWidth <= window.outerWidth) {
                return true;
            }
        }
        return "none" === layer.style.msTouchAction || ("manipulation" === layer.style.touchAction || (f = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [, 0])[1], !!(f >= 27 && (a = document.querySelector("meta[name=viewport]"), a && (a.content.indexOf("user-scalable=no") !== -1 || document.documentElement.scrollWidth <= window.outerWidth))) || ("none" === layer.style.touchAction || "manipulation" === layer.style.touchAction)));
    };
    /**
     * @param {string} name
     * @param {Function} recurring
     * @return {?}
     */
    FastClick.attach = function(name, recurring) {
        return new FastClick(name, recurring);
    };
    if ("function" == typeof define && ("object" == typeof define.amd && define.amd)) {
        define(function() {
            return FastClick;
        });
    } else {
        if ("undefined" != typeof module && module.exports) {
            /** @type {function (string, Function): ?} */
            module.exports = FastClick.attach;
            /** @type {function (Object, Object): undefined} */
            module.exports.FastClick = FastClick;
        } else {
            /** @type {function (Object, Object): undefined} */
            window.FastClick = FastClick;
        }
    }
}(), function(dataAndEvents, factory) {
    if ("function" == typeof define && define.amd) {
        define([], factory);
    } else {
        if ("object" == typeof exports) {
            module.exports = factory();
        } else {
            dataAndEvents.Handlebars = dataAndEvents.Handlebars || factory();
        }
    }
}(this, function() {
    var pdataOld = function() {
        /**
         * @param {string} string
         * @return {undefined}
         */
        function SafeString(string) {
            /** @type {string} */
            this.string = string;
        }
        var __exports__;
        return SafeString.prototype.toString = function() {
            return "" + this.string;
        }, __exports__ = SafeString;
    }();
    var __module2__ = function(value) {
        /**
         * @param {?} off
         * @return {?}
         */
        function t(off) {
            return buf[off];
        }
        /**
         * @param {?} opt_attributes
         * @return {?}
         */
        function extend(opt_attributes) {
            /** @type {number} */
            var i = 1;
            for (;i < arguments.length;i++) {
                var j;
                for (j in arguments[i]) {
                    if (Object.prototype.hasOwnProperty.call(arguments[i], j)) {
                        opt_attributes[j] = arguments[i][j];
                    }
                }
            }
            return opt_attributes;
        }
        /**
         * @param {string} n
         * @return {?}
         */
        function template(n) {
            return n instanceof color ? n.toString() : null == n ? "" : n ? (n = "" + n, numbers.test(n) ? n.replace(r20, t) : n) : n + "";
        }
        /**
         * @param {string} name
         * @return {?}
         */
        function isEmpty(name) {
            return!name && 0 !== name || !(!isArray(name) || 0 !== name.length);
        }
        /**
         * @param {boolean} parent
         * @param {string} item
         * @return {?}
         */
        function parse(parent, item) {
            return(parent ? parent + "." : "") + item;
        }
        var __exports__ = {};
        /** @type {string} */
        var color = value;
        var buf = {
            "&" : "&amp;",
            "<" : "&lt;",
            ">" : "&gt;",
            '"' : "&quot;",
            "'" : "&#x27;",
            "`" : "&#x60;"
        };
        /** @type {RegExp} */
        var r20 = /[&<>"'`]/g;
        /** @type {RegExp} */
        var numbers = /[&<>"'`]/;
        /** @type {function (?): ?} */
        __exports__.extend = extend;
        /** @type {function (this:*): string} */
        var toString = Object.prototype.toString;
        /** @type {function (this:*): string} */
        __exports__.toString = toString;
        /**
         * @param {string} name
         * @return {?}
         */
        var isFunction = function(name) {
            return "function" == typeof name;
        };
        if (isFunction(/x/)) {
            /**
             * @param {string} name
             * @return {?}
             */
            isFunction = function(name) {
                return "function" == typeof name && "[object Function]" === toString.call(name);
            };
        }
        /** @type {function (string): ?} */
        __exports__.isFunction = isFunction;
        /** @type {function (*): boolean} */
        var isArray = Array.isArray || function(name) {
            return!(!name || "object" != typeof name) && "[object Array]" === toString.call(name);
        };
        return __exports__.isArray = isArray, __exports__.escapeExpression = template, __exports__.isEmpty = isEmpty, __exports__.appendContextPath = parse, __exports__;
    }(pdataOld);
    var pdataCur = function() {
        /**
         * @param {string} message
         * @param {Object} node
         * @return {undefined}
         */
        function Exception(message, node) {
            var line;
            if (node) {
                if (node.firstLine) {
                    line = node.firstLine;
                    message += " - " + line + ":" + node.firstColumn;
                }
            }
            var tmp = Error.prototype.constructor.call(this, message);
            /** @type {number} */
            var idx = 0;
            for (;idx < errorProps.length;idx++) {
                this[errorProps[idx]] = tmp[errorProps[idx]];
            }
            if (line) {
                this.lineNumber = line;
                this.column = node.firstColumn;
            }
        }
        var __exports__;
        /** @type {Array} */
        var errorProps = ["description", "fileName", "lineNumber", "message", "name", "number", "stack"];
        return Exception.prototype = new Error, __exports__ = Exception;
    }();
    var __module1__ = function(__dependency1__, value) {
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {undefined}
         */
        function HandlebarsEnvironment(name, recurring) {
            this.helpers = name || {};
            this.partials = recurring || {};
            registerDefaultHelpers(this);
        }
        /**
         * @param {Object} instance
         * @return {undefined}
         */
        function registerDefaultHelpers(instance) {
            instance.registerHelper("helperMissing", function() {
                if (1 !== arguments.length) {
                    throw new Exception("Missing helper: '" + arguments[arguments.length - 1].name + "'");
                }
            });
            instance.registerHelper("blockHelperMissing", function(attributes, options) {
                var inverse = options.inverse;
                var fn = options.fn;
                if (attributes === true) {
                    return fn(this);
                }
                if (attributes === false || null == attributes) {
                    return inverse(this);
                }
                if (isArray(attributes)) {
                    return attributes.length > 0 ? (options.ids && (options.ids = [options.name]), instance.helpers.each(attributes, options)) : inverse(this);
                }
                if (options.data && options.ids) {
                    var frame = createFrame(options.data);
                    frame.contextPath = Utils.appendContextPath(options.data.contextPath, options.name);
                    options = {
                        data : frame
                    };
                }
                return fn(attributes, options);
            });
            instance.registerHelper("each", function(names, options) {
                if (!options) {
                    throw new Exception("Must pass iterator to #each");
                }
                var data;
                var offset;
                var fn = options.fn;
                var inverse = options.inverse;
                /** @type {number} */
                var i = 0;
                /** @type {string} */
                var ret = "";
                if (options.data && (options.ids && (offset = Utils.appendContextPath(options.data.contextPath, options.ids[0]) + ".")), isFunction(names) && (names = names.call(this)), options.data && (data = createFrame(options.data)), names && "object" == typeof names) {
                    if (isArray(names)) {
                        var len = names.length;
                        for (;i < len;i++) {
                            if (data) {
                                /** @type {number} */
                                data.index = i;
                                /** @type {boolean} */
                                data.first = 0 === i;
                                /** @type {boolean} */
                                data.last = i === names.length - 1;
                                if (offset) {
                                    data.contextPath = offset + i;
                                }
                            }
                            ret += fn(names[i], {
                                data : data
                            });
                        }
                    } else {
                        var key;
                        for (key in names) {
                            if (names.hasOwnProperty(key)) {
                                if (data) {
                                    /** @type {string} */
                                    data.key = key;
                                    /** @type {number} */
                                    data.index = i;
                                    /** @type {boolean} */
                                    data.first = 0 === i;
                                    if (offset) {
                                        /** @type {string} */
                                        data.contextPath = offset + key;
                                    }
                                }
                                ret += fn(names[key], {
                                    data : data
                                });
                                i++;
                            }
                        }
                    }
                }
                return 0 === i && (ret = inverse(this)), ret;
            });
            instance.registerHelper("if", function(optgroup, options) {
                return isFunction(optgroup) && (optgroup = optgroup.call(this)), !options.hash.includeZero && !optgroup || Utils.isEmpty(optgroup) ? options.inverse(this) : options.fn(this);
            });
            instance.registerHelper("unless", function(mapper, options) {
                return instance.helpers.if.call(this, mapper, {
                    fn : options.inverse,
                    inverse : options.fn,
                    hash : options.hash
                });
            });
            instance.registerHelper("with", function(name, options) {
                if (isFunction(name)) {
                    name = name.call(this);
                }
                var fn = options.fn;
                if (Utils.isEmpty(name)) {
                    return options.inverse(this);
                }
                if (options.data && options.ids) {
                    var frame = createFrame(options.data);
                    frame.contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]);
                    options = {
                        data : frame
                    };
                }
                return fn(name, options);
            });
            instance.registerHelper("log", function(error, options) {
                /** @type {number} */
                var level = options.data && null != options.data.level ? parseInt(options.data.level, 10) : 1;
                instance.log(level, error);
            });
            instance.registerHelper("lookup", function(escaped, key) {
                return escaped && escaped[key];
            });
        }
        var __exports__ = {};
        /** @type {Object} */
        var Utils = __dependency1__;
        var Exception = value;
        /** @type {string} */
        var VERSION = "2.0.0";
        /** @type {string} */
        __exports__.VERSION = VERSION;
        /** @type {number} */
        var COMPILER_REVISION = 6;
        /** @type {number} */
        __exports__.COMPILER_REVISION = COMPILER_REVISION;
        var REVISION_CHANGES = {
            1 : "<= 1.0.rc.2",
            2 : "== 1.0.0-rc.3",
            3 : "== 1.0.0-rc.4",
            4 : "== 1.x.x",
            5 : "== 2.0.0-alpha.x",
            6 : ">= 2.0.0-beta.1"
        };
        __exports__.REVISION_CHANGES = REVISION_CHANGES;
        var isArray = Utils.isArray;
        var isFunction = Utils.isFunction;
        var toString = Utils.toString;
        /** @type {string} */
        var objectType = "[object Object]";
        /** @type {function (string, Function): undefined} */
        __exports__.HandlebarsEnvironment = HandlebarsEnvironment;
        HandlebarsEnvironment.prototype = {
            /** @type {function (string, Function): undefined} */
            constructor : HandlebarsEnvironment,
            logger : logger,
            log : log,
            /**
             * @param {string} name
             * @param {Function} helper
             * @return {undefined}
             */
            registerHelper : function(name, helper) {
                if (toString.call(name) === objectType) {
                    if (helper) {
                        throw new Exception("Arg not supported with multiple helpers");
                    }
                    Utils.extend(this.helpers, name);
                } else {
                    /** @type {Function} */
                    this.helpers[name] = helper;
                }
            },
            /**
             * @param {?} name
             * @return {undefined}
             */
            unregisterHelper : function(name) {
                delete this.helpers[name];
            },
            /**
             * @param {string} name
             * @param {Function} str
             * @return {undefined}
             */
            registerPartial : function(name, str) {
                if (toString.call(name) === objectType) {
                    Utils.extend(this.partials, name);
                } else {
                    /** @type {Function} */
                    this.partials[name] = str;
                }
            },
            /**
             * @param {?} name
             * @return {undefined}
             */
            unregisterPartial : function(name) {
                delete this.partials[name];
            }
        };
        var logger = {
            methodMap : {
                0 : "debug",
                1 : "info",
                2 : "warn",
                3 : "error"
            },
            DEBUG : 0,
            INFO : 1,
            WARN : 2,
            ERROR : 3,
            level : 3,
            /**
             * @param {number} level
             * @param {?} msg
             * @return {undefined}
             */
            log : function(level, msg) {
                if (logger.level <= level) {
                    var method = logger.methodMap[level];
                    if ("undefined" != typeof console) {
                        if (console[method]) {
                            console[method].call(console, msg);
                        }
                    }
                }
            }
        };
        __exports__.logger = logger;
        /** @type {function (number, ?): undefined} */
        var log = logger.log;
        /** @type {function (number, ?): undefined} */
        __exports__.log = log;
        /**
         * @param {Object} object
         * @return {?}
         */
        var createFrame = function(object) {
            var item = Utils.extend({}, object);
            return item._parent = object, item;
        };
        return __exports__.createFrame = createFrame, __exports__;
    }(__module2__, pdataCur);
    var restoreScript = function(__dependency1__, value, __dependency3__) {
        /**
         * @param {Object} compilerInfo
         * @return {undefined}
         */
        function checkRevision(compilerInfo) {
            var unlock = compilerInfo && compilerInfo[0] || 1;
            var revision = COMPILER_REVISION;
            if (unlock !== revision) {
                if (unlock < revision) {
                    var versions = REVISION_CHANGES[revision];
                    var cache = REVISION_CHANGES[unlock];
                    throw new Exception("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version (" + versions + ") or downgrade your runtime to an older version (" + cache + ").");
                }
                throw new Exception("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version (" + compilerInfo[1] + ").");
            }
        }
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {?}
         */
        function template(name, recurring) {
            if (!recurring) {
                throw new Exception("No environment passed to template");
            }
            if (!name || !name.main) {
                throw new Exception("Unknown template object: " + typeof name);
            }
            recurring.VM.checkRevision(name.compiler);
            /**
             * @param {string} ast
             * @param {?} text
             * @param {string} data
             * @param {?} options
             * @param {string} method
             * @param {Object} d
             * @param {Object} obj
             * @param {Object} f
             * @param {Array} r
             * @return {?}
             */
            var template = function(ast, text, data, options, method, d, obj, f, r) {
                if (method) {
                    options = Utils.extend({}, options, method);
                }
                var result = recurring.VM.invokePartial.call(this, ast, data, options, d, obj, f, r);
                if (null == result && recurring.compile) {
                    var args = {
                        helpers : d,
                        partials : obj,
                        data : f,
                        depths : r
                    };
                    obj[data] = recurring.compile(ast, {
                        data : void 0 !== f,
                        compat : name.compat
                    }, recurring);
                    result = obj[data](options, args);
                }
                if (null != result) {
                    if (text) {
                        var childLines = result.split("\n");
                        /** @type {number} */
                        var j = 0;
                        var jl = childLines.length;
                        for (;j < jl && (childLines[j] || j + 1 !== jl);j++) {
                            childLines[j] = text + childLines[j];
                        }
                        result = childLines.join("\n");
                    }
                    return result;
                }
                throw new Exception("The partial " + data + " could not be compiled when running in runtime-only mode");
            };
            var self = {
                /**
                 * @param {Array} params
                 * @param {?} x
                 * @return {?}
                 */
                lookup : function(params, x) {
                    var len = params.length;
                    /** @type {number} */
                    var y = 0;
                    for (;y < len;y++) {
                        if (params[y] && null != params[y][x]) {
                            return params[y][x];
                        }
                    }
                },
                /**
                 * @param {(Function|string)} next_callback
                 * @param {?} next_scope
                 * @return {?}
                 */
                lambda : function(next_callback, next_scope) {
                    return "function" == typeof next_callback ? next_callback.call(next_scope) : next_callback;
                },
                escapeExpression : Utils.escapeExpression,
                /** @type {function (string, ?, string, ?, string, Object, Object, Object, Array): ?} */
                invokePartial : template,
                /**
                 * @param {Object} key
                 * @return {?}
                 */
                fn : function(key) {
                    return name[key];
                },
                programs : [],
                /**
                 * @param {Object} name
                 * @param {boolean} data
                 * @param {boolean} fn
                 * @return {?}
                 */
                program : function(name, data, fn) {
                    var result = this.programs[name];
                    var value = this.fn(name);
                    return data || fn ? result = setter(this, name, value, data, fn) : result || (result = this.programs[name] = setter(this, name, value)), result;
                },
                /**
                 * @param {string} name
                 * @param {Function} recurring
                 * @return {?}
                 */
                data : function(name, recurring) {
                    for (;name && recurring--;) {
                        name = name._parent;
                    }
                    return name;
                },
                /**
                 * @param {Object} param
                 * @param {Object} common
                 * @return {?}
                 */
                merge : function(param, common) {
                    var ret = param || common;
                    return param && (common && (param !== common && (ret = Utils.extend({}, common, param)))), ret;
                },
                noop : recurring.VM.noop,
                compilerInfo : name.compiler
            };
            /**
             * @param {string} context
             * @param {Object} options
             * @return {?}
             */
            var add = function(context, options) {
                options = options || {};
                var params = options.data;
                add._setup(options);
                if (!options.partial) {
                    if (name.useData) {
                        params = extend(context, params);
                    }
                }
                var t;
                return name.useDepths && (t = options.depths ? [context].concat(options.depths) : [context]), name.main.call(self, context, self.helpers, self.partials, params, t);
            };
            return add.isTop = true, add._setup = function(options) {
                if (options.partial) {
                    self.helpers = options.helpers;
                    self.partials = options.partials;
                } else {
                    self.helpers = self.merge(options.helpers, recurring.helpers);
                    if (name.usePartial) {
                        self.partials = self.merge(options.partials, recurring.partials);
                    }
                }
            }, add._child = function(value, endpoint, deepDataAndEvents) {
                if (name.useDepths && !deepDataAndEvents) {
                    throw new Exception("must pass parent depths");
                }
                return setter(self, value, name[value], endpoint, deepDataAndEvents);
            }, add;
        }
        /**
         * @param {Object} obj
         * @param {Object} value
         * @param {Function} callback
         * @param {?} data
         * @param {boolean} val
         * @return {?}
         */
        function setter(obj, value, callback, data, val) {
            /**
             * @param {?} err
             * @param {Object} options
             * @return {?}
             */
            var result = function(err, options) {
                return options = options || {}, callback.call(obj, err, obj.helpers, obj.partials, options.data || data, val && [err].concat(val));
            };
            return result.program = value, result.depth = val ? val.length : 0, result;
        }
        /**
         * @param {number} partial
         * @param {string} context
         * @param {?} helpers
         * @param {Object} data
         * @param {?} partials
         * @param {Object} task
         * @param {Array} name
         * @return {?}
         */
        function invokePartial(partial, context, helpers, data, partials, task, name) {
            var options = {
                partial : true,
                helpers : data,
                partials : partials,
                data : task,
                depths : name
            };
            if (void 0 === partial) {
                throw new Exception("The partial " + context + " could not be found");
            }
            if (partial instanceof Function) {
                return partial(helpers, options);
            }
        }
        /**
         * @return {?}
         */
        function noop() {
            return "";
        }
        /**
         * @param {string} root
         * @param {Object} config
         * @return {?}
         */
        function extend(root, config) {
            return config && "root" in config || (config = config ? isArray(config) : {}, config.root = root), config;
        }
        var __exports__ = {};
        /** @type {string} */
        var Utils = __dependency1__;
        var Exception = value;
        var COMPILER_REVISION = __dependency3__.COMPILER_REVISION;
        var REVISION_CHANGES = __dependency3__.REVISION_CHANGES;
        var isArray = __dependency3__.createFrame;
        return __exports__.checkRevision = checkRevision, __exports__.template = template, __exports__.program = setter, __exports__.invokePartial = invokePartial, __exports__.noop = noop, __exports__;
    }(__module2__, pdataCur, __module1__);
    var typePattern = function(actualObject, value, data, __dependency1__, callback) {
        var fn;
        var object = actualObject;
        var color = value;
        var toConvert = data;
        /** @type {string} */
        var Utils = __dependency1__;
        /** @type {Object} */
        var prop = callback;
        /**
         * @return {?}
         */
        var create = function() {
            var recurring = new object.HandlebarsEnvironment;
            return Utils.extend(recurring, object), recurring.SafeString = color, recurring.Exception = toConvert, recurring.Utils = Utils, recurring.escapeExpression = Utils.escapeExpression, recurring.VM = prop, recurring.template = function(name) {
                return prop.template(name, recurring);
            }, recurring;
        };
        var params = create();
        return params.create = create, params.default = params, fn = params;
    }(__module1__, pdataOld, pdataCur, __module2__, restoreScript);
    var __module7__ = function(value) {
        /**
         * @param {Object} locInfo
         * @return {undefined}
         */
        function LocationInfo(locInfo) {
            locInfo = locInfo || {};
            this.firstLine = locInfo.first_line;
            this.firstColumn = locInfo.first_column;
            this.lastColumn = locInfo.last_column;
            this.lastLine = locInfo.last_line;
        }
        var __exports__;
        var Exception = value;
        var AST = {
            /**
             * @param {Array} statements
             * @param {?} strip
             * @param {?} locInfo
             * @return {undefined}
             */
            ProgramNode : function(statements, strip, locInfo) {
                LocationInfo.call(this, locInfo);
                /** @type {string} */
                this.type = "program";
                /** @type {Array} */
                this.statements = statements;
                this.strip = strip;
            },
            /**
             * @param {Object} rawParams
             * @param {Array} hash
             * @param {string} open
             * @param {?} strip
             * @param {?} locInfo
             * @return {undefined}
             */
            MustacheNode : function(rawParams, hash, open, strip, locInfo) {
                if (LocationInfo.call(this, locInfo), this.type = "mustache", this.strip = strip, null != open && open.charAt) {
                    var code = open.charAt(3) || open.charAt(2);
                    /** @type {boolean} */
                    this.escaped = "{" !== code && "&" !== code;
                } else {
                    /** @type {boolean} */
                    this.escaped = !!open;
                }
                if (rawParams instanceof AST.SexprNode) {
                    /** @type {Object} */
                    this.sexpr = rawParams;
                } else {
                    this.sexpr = new AST.SexprNode(rawParams, hash);
                }
                this.id = this.sexpr.id;
                this.params = this.sexpr.params;
                this.hash = this.sexpr.hash;
                this.eligibleHelper = this.sexpr.eligibleHelper;
                this.isHelper = this.sexpr.isHelper;
            },
            /**
             * @param {string} rawParams
             * @param {?} hash
             * @param {?} locInfo
             * @return {undefined}
             */
            SexprNode : function(rawParams, hash, locInfo) {
                LocationInfo.call(this, locInfo);
                /** @type {string} */
                this.type = "sexpr";
                this.hash = hash;
                var id = this.id = rawParams[0];
                var params = this.params = rawParams.slice(1);
                /** @type {boolean} */
                this.isHelper = !(!params.length && !hash);
                this.eligibleHelper = this.isHelper || id.isSimple;
            },
            /**
             * @param {?} partialName
             * @param {?} context
             * @param {?} h
             * @param {?} strip
             * @param {?} locInfo
             * @return {undefined}
             */
            PartialNode : function(partialName, context, h, strip, locInfo) {
                LocationInfo.call(this, locInfo);
                /** @type {string} */
                this.type = "partial";
                this.partialName = partialName;
                this.context = context;
                this.hash = h;
                this.strip = strip;
                /** @type {boolean} */
                this.strip.inlineStandalone = true;
            },
            /**
             * @param {?} mustache
             * @param {?} program
             * @param {Object} inverse
             * @param {?} strip
             * @param {?} locInfo
             * @return {undefined}
             */
            BlockNode : function(mustache, program, inverse, strip, locInfo) {
                LocationInfo.call(this, locInfo);
                /** @type {string} */
                this.type = "block";
                this.mustache = mustache;
                this.program = program;
                /** @type {Object} */
                this.inverse = inverse;
                this.strip = strip;
                if (inverse) {
                    if (!program) {
                        /** @type {boolean} */
                        this.isInverse = true;
                    }
                }
            },
            /**
             * @param {?} mustache
             * @param {Element} child
             * @param {string} input
             * @param {number} name
             * @return {undefined}
             */
            RawBlockNode : function(mustache, child, input, name) {
                if (LocationInfo.call(this, name), mustache.sexpr.id.original !== input) {
                    throw new Exception(mustache.sexpr.id.original + " doesn't match " + input, this);
                }
                child = new AST.ContentNode(child, name);
                /** @type {string} */
                this.type = "block";
                this.mustache = mustache;
                this.program = new AST.ProgramNode([child], {}, name);
            },
            /**
             * @param {string} string
             * @param {?} locInfo
             * @return {undefined}
             */
            ContentNode : function(string, locInfo) {
                LocationInfo.call(this, locInfo);
                /** @type {string} */
                this.type = "content";
                this.original = this.string = string;
            },
            /**
             * @param {string} pairs
             * @param {?} locInfo
             * @return {undefined}
             */
            HashNode : function(pairs, locInfo) {
                LocationInfo.call(this, locInfo);
                /** @type {string} */
                this.type = "hash";
                /** @type {string} */
                this.pairs = pairs;
            },
            /**
             * @param {Array} parts
             * @param {?} locInfo
             * @return {undefined}
             */
            IdNode : function(parts, locInfo) {
                LocationInfo.call(this, locInfo);
                /** @type {string} */
                this.type = "ID";
                /** @type {string} */
                var original = "";
                /** @type {Array} */
                var dig = [];
                /** @type {number} */
                var depth = 0;
                /** @type {string} */
                var optsData = "";
                /** @type {number} */
                var i = 0;
                var l = parts.length;
                for (;i < l;i++) {
                    var part = parts[i].part;
                    if (original += (parts[i].separator || "") + part, ".." === part || ("." === part || "this" === part)) {
                        if (dig.length > 0) {
                            throw new Exception("Invalid path: " + original, this);
                        }
                        if (".." === part) {
                            depth++;
                            optsData += "../";
                        } else {
                            /** @type {boolean} */
                            this.isScoped = true;
                        }
                    } else {
                        dig.push(part);
                    }
                }
                /** @type {string} */
                this.original = original;
                /** @type {Array} */
                this.parts = dig;
                /** @type {string} */
                this.string = dig.join(".");
                /** @type {number} */
                this.depth = depth;
                /** @type {string} */
                this.idName = optsData + this.string;
                /** @type {boolean} */
                this.isSimple = 1 === parts.length && (!this.isScoped && 0 === depth);
                /** @type {string} */
                this.stringModeValue = this.string;
            },
            /**
             * @param {string} name
             * @param {?} locInfo
             * @return {undefined}
             */
            PartialNameNode : function(name, locInfo) {
                LocationInfo.call(this, locInfo);
                /** @type {string} */
                this.type = "PARTIAL_NAME";
                this.name = name.original;
            },
            /**
             * @param {?} id
             * @param {?} locInfo
             * @return {undefined}
             */
            DataNode : function(id, locInfo) {
                LocationInfo.call(this, locInfo);
                /** @type {string} */
                this.type = "DATA";
                this.id = id;
                this.stringModeValue = id.stringModeValue;
                /** @type {string} */
                this.idName = "@" + id.stringModeValue;
            },
            /**
             * @param {string} string
             * @param {?} locInfo
             * @return {undefined}
             */
            StringNode : function(string, locInfo) {
                LocationInfo.call(this, locInfo);
                /** @type {string} */
                this.type = "STRING";
                this.original = this.string = this.stringModeValue = string;
            },
            /**
             * @param {number} integer
             * @param {?} mapper
             * @return {undefined}
             */
            NumberNode : function(integer, mapper) {
                LocationInfo.call(this, mapper);
                /** @type {string} */
                this.type = "NUMBER";
                this.original = this.number = integer;
                /** @type {number} */
                this.stringModeValue = Number(integer);
            },
            /**
             * @param {string} bool
             * @param {?} locInfo
             * @return {undefined}
             */
            BooleanNode : function(bool, locInfo) {
                LocationInfo.call(this, locInfo);
                /** @type {string} */
                this.type = "BOOLEAN";
                /** @type {string} */
                this.bool = bool;
                /** @type {boolean} */
                this.stringModeValue = "true" === bool;
            },
            /**
             * @param {Object} comment
             * @param {?} locInfo
             * @return {undefined}
             */
            CommentNode : function(comment, locInfo) {
                LocationInfo.call(this, locInfo);
                /** @type {string} */
                this.type = "comment";
                /** @type {Object} */
                this.comment = comment;
                this.strip = {
                    inlineStandalone : true
                };
            }
        };
        return __exports__ = AST;
    }(pdataCur);
    var udataCur = function() {
        var bulk;
        var fn = function() {
            /**
             * @return {undefined}
             */
            function Parser() {
                this.yy = {};
            }
            var parser = {
                /**
                 * @return {undefined}
                 */
                trace : function() {
                },
                yy : {},
                symbols_ : {
                    error : 2,
                    root : 3,
                    program : 4,
                    EOF : 5,
                    program_repetition0 : 6,
                    statement : 7,
                    mustache : 8,
                    block : 9,
                    rawBlock : 10,
                    partial : 11,
                    CONTENT : 12,
                    COMMENT : 13,
                    openRawBlock : 14,
                    END_RAW_BLOCK : 15,
                    OPEN_RAW_BLOCK : 16,
                    sexpr : 17,
                    CLOSE_RAW_BLOCK : 18,
                    openBlock : 19,
                    block_option0 : 20,
                    closeBlock : 21,
                    openInverse : 22,
                    block_option1 : 23,
                    OPEN_BLOCK : 24,
                    CLOSE : 25,
                    OPEN_INVERSE : 26,
                    inverseAndProgram : 27,
                    INVERSE : 28,
                    OPEN_ENDBLOCK : 29,
                    path : 30,
                    OPEN : 31,
                    OPEN_UNESCAPED : 32,
                    CLOSE_UNESCAPED : 33,
                    OPEN_PARTIAL : 34,
                    partialName : 35,
                    param : 36,
                    partial_option0 : 37,
                    partial_option1 : 38,
                    sexpr_repetition0 : 39,
                    sexpr_option0 : 40,
                    dataName : 41,
                    STRING : 42,
                    NUMBER : 43,
                    BOOLEAN : 44,
                    OPEN_SEXPR : 45,
                    CLOSE_SEXPR : 46,
                    hash : 47,
                    hash_repetition_plus0 : 48,
                    hashSegment : 49,
                    ID : 50,
                    EQUALS : 51,
                    DATA : 52,
                    pathSegments : 53,
                    SEP : 54,
                    $accept : 0,
                    $end : 1
                },
                terminals_ : {
                    2 : "error",
                    5 : "EOF",
                    12 : "CONTENT",
                    13 : "COMMENT",
                    15 : "END_RAW_BLOCK",
                    16 : "OPEN_RAW_BLOCK",
                    18 : "CLOSE_RAW_BLOCK",
                    24 : "OPEN_BLOCK",
                    25 : "CLOSE",
                    26 : "OPEN_INVERSE",
                    28 : "INVERSE",
                    29 : "OPEN_ENDBLOCK",
                    31 : "OPEN",
                    32 : "OPEN_UNESCAPED",
                    33 : "CLOSE_UNESCAPED",
                    34 : "OPEN_PARTIAL",
                    42 : "STRING",
                    43 : "NUMBER",
                    44 : "BOOLEAN",
                    45 : "OPEN_SEXPR",
                    46 : "CLOSE_SEXPR",
                    50 : "ID",
                    51 : "EQUALS",
                    52 : "DATA",
                    54 : "SEP"
                },
                productions_ : [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [10, 3], [14, 3], [9, 4], [9, 4], [19, 3], [22, 3], [27, 2], [21, 3], [8, 3], [8, 3], [11, 5], [11, 4], [17, 3], [17, 1], [36, 1], [36, 1], [36, 1], [36, 1], [36, 1], [36, 3], [47, 1], [49, 3], [35, 1], [35, 1], [35, 1], [41, 2], [30, 1], [53, 3], [53, 1], [6, 0], [6, 2], [20, 0], [20, 1], [23, 0], [23, 1], [37, 0], [37, 1], [38, 0], [38, 1], [39, 0], [39, 2], [40, 0], [40, 1], [48, 1], [48, 2]],
                /**
                 * @param {?} deltaTime
                 * @param {?} stat
                 * @param {?} file
                 * @param {?} yy
                 * @param {?} frameActionId
                 * @param {(Array|Int8Array|Uint8Array)} $$
                 * @param {?} dataAndEvents
                 * @return {?}
                 */
                performAction : function(deltaTime, stat, file, yy, frameActionId, $$, dataAndEvents) {
                    /** @type {number} */
                    var $0 = $$.length - 1;
                    switch(frameActionId) {
                        case 1:
                            return yy.prepareProgram($$[$0 - 1].statements, true), $$[$0 - 1];
                        case 2:
                            this.$ = new yy.ProgramNode(yy.prepareProgram($$[$0]), {}, this._$);
                            break;
                        case 3:
                            this.$ = $$[$0];
                            break;
                        case 4:
                            this.$ = $$[$0];
                            break;
                        case 5:
                            this.$ = $$[$0];
                            break;
                        case 6:
                            this.$ = $$[$0];
                            break;
                        case 7:
                            this.$ = new yy.ContentNode($$[$0], this._$);
                            break;
                        case 8:
                            this.$ = new yy.CommentNode($$[$0], this._$);
                            break;
                        case 9:
                            this.$ = new yy.RawBlockNode($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                            break;
                        case 10:
                            this.$ = new yy.MustacheNode($$[$0 - 1], null, "", "", this._$);
                            break;
                        case 11:
                            this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
                            break;
                        case 12:
                            this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
                            break;
                        case 13:
                            this.$ = new yy.MustacheNode($$[$0 - 1], null, $$[$0 - 2], yy.stripFlags($$[$0 - 2], $$[$0]), this._$);
                            break;
                        case 14:
                            this.$ = new yy.MustacheNode($$[$0 - 1], null, $$[$0 - 2], yy.stripFlags($$[$0 - 2], $$[$0]), this._$);
                            break;
                        case 15:
                            this.$ = {
                                strip : yy.stripFlags($$[$0 - 1], $$[$0 - 1]),
                                program : $$[$0]
                            };
                            break;
                        case 16:
                            this.$ = {
                                path : $$[$0 - 1],
                                strip : yy.stripFlags($$[$0 - 2], $$[$0])
                            };
                            break;
                        case 17:
                            this.$ = new yy.MustacheNode($$[$0 - 1], null, $$[$0 - 2], yy.stripFlags($$[$0 - 2], $$[$0]), this._$);
                            break;
                        case 18:
                            this.$ = new yy.MustacheNode($$[$0 - 1], null, $$[$0 - 2], yy.stripFlags($$[$0 - 2], $$[$0]), this._$);
                            break;
                        case 19:
                            this.$ = new yy.PartialNode($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
                            break;
                        case 20:
                            this.$ = new yy.PartialNode($$[$0 - 2], void 0, $$[$0 - 1], yy.stripFlags($$[$0 - 3], $$[$0]), this._$);
                            break;
                        case 21:
                            this.$ = new yy.SexprNode([$$[$0 - 2]].concat($$[$0 - 1]), $$[$0], this._$);
                            break;
                        case 22:
                            this.$ = new yy.SexprNode([$$[$0]], null, this._$);
                            break;
                        case 23:
                            this.$ = $$[$0];
                            break;
                        case 24:
                            this.$ = new yy.StringNode($$[$0], this._$);
                            break;
                        case 25:
                            this.$ = new yy.NumberNode($$[$0], this._$);
                            break;
                        case 26:
                            this.$ = new yy.BooleanNode($$[$0], this._$);
                            break;
                        case 27:
                            this.$ = $$[$0];
                            break;
                        case 28:
                            /** @type {boolean} */
                            $$[$0 - 1].isHelper = true;
                            this.$ = $$[$0 - 1];
                            break;
                        case 29:
                            this.$ = new yy.HashNode($$[$0], this._$);
                            break;
                        case 30:
                            /** @type {Array} */
                            this.$ = [$$[$0 - 2], $$[$0]];
                            break;
                        case 31:
                            this.$ = new yy.PartialNameNode($$[$0], this._$);
                            break;
                        case 32:
                            this.$ = new yy.PartialNameNode(new yy.StringNode($$[$0], this._$), this._$);
                            break;
                        case 33:
                            this.$ = new yy.PartialNameNode(new yy.NumberNode($$[$0], this._$));
                            break;
                        case 34:
                            this.$ = new yy.DataNode($$[$0], this._$);
                            break;
                        case 35:
                            this.$ = new yy.IdNode($$[$0], this._$);
                            break;
                        case 36:
                            $$[$0 - 2].push({
                                part : $$[$0],
                                separator : $$[$0 - 1]
                            });
                            this.$ = $$[$0 - 2];
                            break;
                        case 37:
                            /** @type {Array} */
                            this.$ = [{
                                part : $$[$0]
                            }];
                            break;
                        case 38:
                            /** @type {Array} */
                            this.$ = [];
                            break;
                        case 39:
                            $$[$0 - 1].push($$[$0]);
                            break;
                        case 48:
                            /** @type {Array} */
                            this.$ = [];
                            break;
                        case 49:
                            $$[$0 - 1].push($$[$0]);
                            break;
                        case 52:
                            /** @type {Array} */
                            this.$ = [$$[$0]];
                            break;
                        case 53:
                            $$[$0 - 1].push($$[$0]);
                    }
                },
                table : [{
                    3 : 1,
                    4 : 2,
                    5 : [2, 38],
                    6 : 3,
                    12 : [2, 38],
                    13 : [2, 38],
                    16 : [2, 38],
                    24 : [2, 38],
                    26 : [2, 38],
                    31 : [2, 38],
                    32 : [2, 38],
                    34 : [2, 38]
                }, {
                    1 : [3]
                }, {
                    5 : [1, 4]
                }, {
                    5 : [2, 2],
                    7 : 5,
                    8 : 6,
                    9 : 7,
                    10 : 8,
                    11 : 9,
                    12 : [1, 10],
                    13 : [1, 11],
                    14 : 16,
                    16 : [1, 20],
                    19 : 14,
                    22 : 15,
                    24 : [1, 18],
                    26 : [1, 19],
                    28 : [2, 2],
                    29 : [2, 2],
                    31 : [1, 12],
                    32 : [1, 13],
                    34 : [1, 17]
                }, {
                    1 : [2, 1]
                }, {
                    5 : [2, 39],
                    12 : [2, 39],
                    13 : [2, 39],
                    16 : [2, 39],
                    24 : [2, 39],
                    26 : [2, 39],
                    28 : [2, 39],
                    29 : [2, 39],
                    31 : [2, 39],
                    32 : [2, 39],
                    34 : [2, 39]
                }, {
                    5 : [2, 3],
                    12 : [2, 3],
                    13 : [2, 3],
                    16 : [2, 3],
                    24 : [2, 3],
                    26 : [2, 3],
                    28 : [2, 3],
                    29 : [2, 3],
                    31 : [2, 3],
                    32 : [2, 3],
                    34 : [2, 3]
                }, {
                    5 : [2, 4],
                    12 : [2, 4],
                    13 : [2, 4],
                    16 : [2, 4],
                    24 : [2, 4],
                    26 : [2, 4],
                    28 : [2, 4],
                    29 : [2, 4],
                    31 : [2, 4],
                    32 : [2, 4],
                    34 : [2, 4]
                }, {
                    5 : [2, 5],
                    12 : [2, 5],
                    13 : [2, 5],
                    16 : [2, 5],
                    24 : [2, 5],
                    26 : [2, 5],
                    28 : [2, 5],
                    29 : [2, 5],
                    31 : [2, 5],
                    32 : [2, 5],
                    34 : [2, 5]
                }, {
                    5 : [2, 6],
                    12 : [2, 6],
                    13 : [2, 6],
                    16 : [2, 6],
                    24 : [2, 6],
                    26 : [2, 6],
                    28 : [2, 6],
                    29 : [2, 6],
                    31 : [2, 6],
                    32 : [2, 6],
                    34 : [2, 6]
                }, {
                    5 : [2, 7],
                    12 : [2, 7],
                    13 : [2, 7],
                    16 : [2, 7],
                    24 : [2, 7],
                    26 : [2, 7],
                    28 : [2, 7],
                    29 : [2, 7],
                    31 : [2, 7],
                    32 : [2, 7],
                    34 : [2, 7]
                }, {
                    5 : [2, 8],
                    12 : [2, 8],
                    13 : [2, 8],
                    16 : [2, 8],
                    24 : [2, 8],
                    26 : [2, 8],
                    28 : [2, 8],
                    29 : [2, 8],
                    31 : [2, 8],
                    32 : [2, 8],
                    34 : [2, 8]
                }, {
                    17 : 21,
                    30 : 22,
                    41 : 23,
                    50 : [1, 26],
                    52 : [1, 25],
                    53 : 24
                }, {
                    17 : 27,
                    30 : 22,
                    41 : 23,
                    50 : [1, 26],
                    52 : [1, 25],
                    53 : 24
                }, {
                    4 : 28,
                    6 : 3,
                    12 : [2, 38],
                    13 : [2, 38],
                    16 : [2, 38],
                    24 : [2, 38],
                    26 : [2, 38],
                    28 : [2, 38],
                    29 : [2, 38],
                    31 : [2, 38],
                    32 : [2, 38],
                    34 : [2, 38]
                }, {
                    4 : 29,
                    6 : 3,
                    12 : [2, 38],
                    13 : [2, 38],
                    16 : [2, 38],
                    24 : [2, 38],
                    26 : [2, 38],
                    28 : [2, 38],
                    29 : [2, 38],
                    31 : [2, 38],
                    32 : [2, 38],
                    34 : [2, 38]
                }, {
                    12 : [1, 30]
                }, {
                    30 : 32,
                    35 : 31,
                    42 : [1, 33],
                    43 : [1, 34],
                    50 : [1, 26],
                    53 : 24
                }, {
                    17 : 35,
                    30 : 22,
                    41 : 23,
                    50 : [1, 26],
                    52 : [1, 25],
                    53 : 24
                }, {
                    17 : 36,
                    30 : 22,
                    41 : 23,
                    50 : [1, 26],
                    52 : [1, 25],
                    53 : 24
                }, {
                    17 : 37,
                    30 : 22,
                    41 : 23,
                    50 : [1, 26],
                    52 : [1, 25],
                    53 : 24
                }, {
                    25 : [1, 38]
                }, {
                    18 : [2, 48],
                    25 : [2, 48],
                    33 : [2, 48],
                    39 : 39,
                    42 : [2, 48],
                    43 : [2, 48],
                    44 : [2, 48],
                    45 : [2, 48],
                    46 : [2, 48],
                    50 : [2, 48],
                    52 : [2, 48]
                }, {
                    18 : [2, 22],
                    25 : [2, 22],
                    33 : [2, 22],
                    46 : [2, 22]
                }, {
                    18 : [2, 35],
                    25 : [2, 35],
                    33 : [2, 35],
                    42 : [2, 35],
                    43 : [2, 35],
                    44 : [2, 35],
                    45 : [2, 35],
                    46 : [2, 35],
                    50 : [2, 35],
                    52 : [2, 35],
                    54 : [1, 40]
                }, {
                    30 : 41,
                    50 : [1, 26],
                    53 : 24
                }, {
                    18 : [2, 37],
                    25 : [2, 37],
                    33 : [2, 37],
                    42 : [2, 37],
                    43 : [2, 37],
                    44 : [2, 37],
                    45 : [2, 37],
                    46 : [2, 37],
                    50 : [2, 37],
                    52 : [2, 37],
                    54 : [2, 37]
                }, {
                    33 : [1, 42]
                }, {
                    20 : 43,
                    27 : 44,
                    28 : [1, 45],
                    29 : [2, 40]
                }, {
                    23 : 46,
                    27 : 47,
                    28 : [1, 45],
                    29 : [2, 42]
                }, {
                    15 : [1, 48]
                }, {
                    25 : [2, 46],
                    30 : 51,
                    36 : 49,
                    38 : 50,
                    41 : 55,
                    42 : [1, 52],
                    43 : [1, 53],
                    44 : [1, 54],
                    45 : [1, 56],
                    47 : 57,
                    48 : 58,
                    49 : 60,
                    50 : [1, 59],
                    52 : [1, 25],
                    53 : 24
                }, {
                    25 : [2, 31],
                    42 : [2, 31],
                    43 : [2, 31],
                    44 : [2, 31],
                    45 : [2, 31],
                    50 : [2, 31],
                    52 : [2, 31]
                }, {
                    25 : [2, 32],
                    42 : [2, 32],
                    43 : [2, 32],
                    44 : [2, 32],
                    45 : [2, 32],
                    50 : [2, 32],
                    52 : [2, 32]
                }, {
                    25 : [2, 33],
                    42 : [2, 33],
                    43 : [2, 33],
                    44 : [2, 33],
                    45 : [2, 33],
                    50 : [2, 33],
                    52 : [2, 33]
                }, {
                    25 : [1, 61]
                }, {
                    25 : [1, 62]
                }, {
                    18 : [1, 63]
                }, {
                    5 : [2, 17],
                    12 : [2, 17],
                    13 : [2, 17],
                    16 : [2, 17],
                    24 : [2, 17],
                    26 : [2, 17],
                    28 : [2, 17],
                    29 : [2, 17],
                    31 : [2, 17],
                    32 : [2, 17],
                    34 : [2, 17]
                }, {
                    18 : [2, 50],
                    25 : [2, 50],
                    30 : 51,
                    33 : [2, 50],
                    36 : 65,
                    40 : 64,
                    41 : 55,
                    42 : [1, 52],
                    43 : [1, 53],
                    44 : [1, 54],
                    45 : [1, 56],
                    46 : [2, 50],
                    47 : 66,
                    48 : 58,
                    49 : 60,
                    50 : [1, 59],
                    52 : [1, 25],
                    53 : 24
                }, {
                    50 : [1, 67]
                }, {
                    18 : [2, 34],
                    25 : [2, 34],
                    33 : [2, 34],
                    42 : [2, 34],
                    43 : [2, 34],
                    44 : [2, 34],
                    45 : [2, 34],
                    46 : [2, 34],
                    50 : [2, 34],
                    52 : [2, 34]
                }, {
                    5 : [2, 18],
                    12 : [2, 18],
                    13 : [2, 18],
                    16 : [2, 18],
                    24 : [2, 18],
                    26 : [2, 18],
                    28 : [2, 18],
                    29 : [2, 18],
                    31 : [2, 18],
                    32 : [2, 18],
                    34 : [2, 18]
                }, {
                    21 : 68,
                    29 : [1, 69]
                }, {
                    29 : [2, 41]
                }, {
                    4 : 70,
                    6 : 3,
                    12 : [2, 38],
                    13 : [2, 38],
                    16 : [2, 38],
                    24 : [2, 38],
                    26 : [2, 38],
                    29 : [2, 38],
                    31 : [2, 38],
                    32 : [2, 38],
                    34 : [2, 38]
                }, {
                    21 : 71,
                    29 : [1, 69]
                }, {
                    29 : [2, 43]
                }, {
                    5 : [2, 9],
                    12 : [2, 9],
                    13 : [2, 9],
                    16 : [2, 9],
                    24 : [2, 9],
                    26 : [2, 9],
                    28 : [2, 9],
                    29 : [2, 9],
                    31 : [2, 9],
                    32 : [2, 9],
                    34 : [2, 9]
                }, {
                    25 : [2, 44],
                    37 : 72,
                    47 : 73,
                    48 : 58,
                    49 : 60,
                    50 : [1, 74]
                }, {
                    25 : [1, 75]
                }, {
                    18 : [2, 23],
                    25 : [2, 23],
                    33 : [2, 23],
                    42 : [2, 23],
                    43 : [2, 23],
                    44 : [2, 23],
                    45 : [2, 23],
                    46 : [2, 23],
                    50 : [2, 23],
                    52 : [2, 23]
                }, {
                    18 : [2, 24],
                    25 : [2, 24],
                    33 : [2, 24],
                    42 : [2, 24],
                    43 : [2, 24],
                    44 : [2, 24],
                    45 : [2, 24],
                    46 : [2, 24],
                    50 : [2, 24],
                    52 : [2, 24]
                }, {
                    18 : [2, 25],
                    25 : [2, 25],
                    33 : [2, 25],
                    42 : [2, 25],
                    43 : [2, 25],
                    44 : [2, 25],
                    45 : [2, 25],
                    46 : [2, 25],
                    50 : [2, 25],
                    52 : [2, 25]
                }, {
                    18 : [2, 26],
                    25 : [2, 26],
                    33 : [2, 26],
                    42 : [2, 26],
                    43 : [2, 26],
                    44 : [2, 26],
                    45 : [2, 26],
                    46 : [2, 26],
                    50 : [2, 26],
                    52 : [2, 26]
                }, {
                    18 : [2, 27],
                    25 : [2, 27],
                    33 : [2, 27],
                    42 : [2, 27],
                    43 : [2, 27],
                    44 : [2, 27],
                    45 : [2, 27],
                    46 : [2, 27],
                    50 : [2, 27],
                    52 : [2, 27]
                }, {
                    17 : 76,
                    30 : 22,
                    41 : 23,
                    50 : [1, 26],
                    52 : [1, 25],
                    53 : 24
                }, {
                    25 : [2, 47]
                }, {
                    18 : [2, 29],
                    25 : [2, 29],
                    33 : [2, 29],
                    46 : [2, 29],
                    49 : 77,
                    50 : [1, 74]
                }, {
                    18 : [2, 37],
                    25 : [2, 37],
                    33 : [2, 37],
                    42 : [2, 37],
                    43 : [2, 37],
                    44 : [2, 37],
                    45 : [2, 37],
                    46 : [2, 37],
                    50 : [2, 37],
                    51 : [1, 78],
                    52 : [2, 37],
                    54 : [2, 37]
                }, {
                    18 : [2, 52],
                    25 : [2, 52],
                    33 : [2, 52],
                    46 : [2, 52],
                    50 : [2, 52]
                }, {
                    12 : [2, 13],
                    13 : [2, 13],
                    16 : [2, 13],
                    24 : [2, 13],
                    26 : [2, 13],
                    28 : [2, 13],
                    29 : [2, 13],
                    31 : [2, 13],
                    32 : [2, 13],
                    34 : [2, 13]
                }, {
                    12 : [2, 14],
                    13 : [2, 14],
                    16 : [2, 14],
                    24 : [2, 14],
                    26 : [2, 14],
                    28 : [2, 14],
                    29 : [2, 14],
                    31 : [2, 14],
                    32 : [2, 14],
                    34 : [2, 14]
                }, {
                    12 : [2, 10]
                }, {
                    18 : [2, 21],
                    25 : [2, 21],
                    33 : [2, 21],
                    46 : [2, 21]
                }, {
                    18 : [2, 49],
                    25 : [2, 49],
                    33 : [2, 49],
                    42 : [2, 49],
                    43 : [2, 49],
                    44 : [2, 49],
                    45 : [2, 49],
                    46 : [2, 49],
                    50 : [2, 49],
                    52 : [2, 49]
                }, {
                    18 : [2, 51],
                    25 : [2, 51],
                    33 : [2, 51],
                    46 : [2, 51]
                }, {
                    18 : [2, 36],
                    25 : [2, 36],
                    33 : [2, 36],
                    42 : [2, 36],
                    43 : [2, 36],
                    44 : [2, 36],
                    45 : [2, 36],
                    46 : [2, 36],
                    50 : [2, 36],
                    52 : [2, 36],
                    54 : [2, 36]
                }, {
                    5 : [2, 11],
                    12 : [2, 11],
                    13 : [2, 11],
                    16 : [2, 11],
                    24 : [2, 11],
                    26 : [2, 11],
                    28 : [2, 11],
                    29 : [2, 11],
                    31 : [2, 11],
                    32 : [2, 11],
                    34 : [2, 11]
                }, {
                    30 : 79,
                    50 : [1, 26],
                    53 : 24
                }, {
                    29 : [2, 15]
                }, {
                    5 : [2, 12],
                    12 : [2, 12],
                    13 : [2, 12],
                    16 : [2, 12],
                    24 : [2, 12],
                    26 : [2, 12],
                    28 : [2, 12],
                    29 : [2, 12],
                    31 : [2, 12],
                    32 : [2, 12],
                    34 : [2, 12]
                }, {
                    25 : [1, 80]
                }, {
                    25 : [2, 45]
                }, {
                    51 : [1, 78]
                }, {
                    5 : [2, 20],
                    12 : [2, 20],
                    13 : [2, 20],
                    16 : [2, 20],
                    24 : [2, 20],
                    26 : [2, 20],
                    28 : [2, 20],
                    29 : [2, 20],
                    31 : [2, 20],
                    32 : [2, 20],
                    34 : [2, 20]
                }, {
                    46 : [1, 81]
                }, {
                    18 : [2, 53],
                    25 : [2, 53],
                    33 : [2, 53],
                    46 : [2, 53],
                    50 : [2, 53]
                }, {
                    30 : 51,
                    36 : 82,
                    41 : 55,
                    42 : [1, 52],
                    43 : [1, 53],
                    44 : [1, 54],
                    45 : [1, 56],
                    50 : [1, 26],
                    52 : [1, 25],
                    53 : 24
                }, {
                    25 : [1, 83]
                }, {
                    5 : [2, 19],
                    12 : [2, 19],
                    13 : [2, 19],
                    16 : [2, 19],
                    24 : [2, 19],
                    26 : [2, 19],
                    28 : [2, 19],
                    29 : [2, 19],
                    31 : [2, 19],
                    32 : [2, 19],
                    34 : [2, 19]
                }, {
                    18 : [2, 28],
                    25 : [2, 28],
                    33 : [2, 28],
                    42 : [2, 28],
                    43 : [2, 28],
                    44 : [2, 28],
                    45 : [2, 28],
                    46 : [2, 28],
                    50 : [2, 28],
                    52 : [2, 28]
                }, {
                    18 : [2, 30],
                    25 : [2, 30],
                    33 : [2, 30],
                    46 : [2, 30],
                    50 : [2, 30]
                }, {
                    5 : [2, 16],
                    12 : [2, 16],
                    13 : [2, 16],
                    16 : [2, 16],
                    24 : [2, 16],
                    26 : [2, 16],
                    28 : [2, 16],
                    29 : [2, 16],
                    31 : [2, 16],
                    32 : [2, 16],
                    34 : [2, 16]
                }],
                defaultActions : {
                    4 : [2, 1],
                    44 : [2, 41],
                    47 : [2, 43],
                    57 : [2, 47],
                    63 : [2, 10],
                    70 : [2, 15],
                    73 : [2, 45]
                },
                /**
                 * @param {string} str
                 * @param {?} hash
                 * @return {?}
                 */
                parseError : function(str, hash) {
                    throw new Error(str);
                },
                /**
                 * @param {?} input
                 * @return {?}
                 */
                parse : function(input) {
                    /**
                     * @return {?}
                     */
                    function lex() {
                        var token;
                        return token = self.lexer.lex() || 1, "number" != typeof token && (token = self.symbols_[token] || token), token;
                    }
                    var self = this;
                    /** @type {Array} */
                    var stack = [0];
                    /** @type {Array} */
                    var vstack = [null];
                    /** @type {Array} */
                    var lstack = [];
                    var table = this.table;
                    /** @type {string} */
                    var yytext = "";
                    /** @type {number} */
                    var yylineno = 0;
                    /** @type {number} */
                    var yyleng = 0;
                    /** @type {number} */
                    var k = 0;
                    this.lexer.setInput(input);
                    this.lexer.yy = this.yy;
                    this.yy.lexer = this.lexer;
                    this.yy.parser = this;
                    if ("undefined" == typeof this.lexer.yylloc) {
                        this.lexer.yylloc = {};
                    }
                    var yyloc = this.lexer.yylloc;
                    lstack.push(yyloc);
                    var m = this.lexer.options && this.lexer.options.ranges;
                    if ("function" == typeof this.yy.parseError) {
                        /** @type {Function} */
                        this.parseError = this.yy.parseError;
                    }
                    var symbol;
                    var preErrorSymbol;
                    var state;
                    var action;
                    var r;
                    var p;
                    var len;
                    var value;
                    var expected;
                    var yyval = {};
                    for (;;) {
                        if (state = stack[stack.length - 1], this.defaultActions[state] ? action = this.defaultActions[state] : (null !== symbol && "undefined" != typeof symbol || (symbol = lex()), action = table[state] && table[state][symbol]), "undefined" == typeof action || (!action.length || !action[0])) {
                            /** @type {string} */
                            var errStr = "";
                            if (!k) {
                                /** @type {Array} */
                                expected = [];
                                for (p in table[state]) {
                                    if (this.terminals_[p]) {
                                        if (p > 2) {
                                            expected.push("'" + this.terminals_[p] + "'");
                                        }
                                    }
                                }
                                /** @type {string} */
                                errStr = this.lexer.showPosition ? "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'" : "Parse error on line " + (yylineno + 1) + ": Unexpected " + (1 == symbol ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
                                this.parseError(errStr, {
                                    text : this.lexer.match,
                                    token : this.terminals_[symbol] || symbol,
                                    line : this.lexer.yylineno,
                                    loc : yyloc,
                                    expected : expected
                                });
                            }
                        }
                        if (action[0] instanceof Array && action.length > 1) {
                            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
                        }
                        switch(action[0]) {
                            case 1:
                                stack.push(symbol);
                                vstack.push(this.lexer.yytext);
                                lstack.push(this.lexer.yylloc);
                                stack.push(action[1]);
                                /** @type {null} */
                                symbol = null;
                                if (preErrorSymbol) {
                                    symbol = preErrorSymbol;
                                    /** @type {null} */
                                    preErrorSymbol = null;
                                } else {
                                    yyleng = this.lexer.yyleng;
                                    yytext = this.lexer.yytext;
                                    yylineno = this.lexer.yylineno;
                                    yyloc = this.lexer.yylloc;
                                    if (k > 0) {
                                        k--;
                                    }
                                }
                                break;
                            case 2:
                                if (len = this.productions_[action[1]][1], yyval.$ = vstack[vstack.length - len], yyval._$ = {
                                        first_line : lstack[lstack.length - (len || 1)].first_line,
                                        last_line : lstack[lstack.length - 1].last_line,
                                        first_column : lstack[lstack.length - (len || 1)].first_column,
                                        last_column : lstack[lstack.length - 1].last_column
                                    }, m && (yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]]), r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack), "undefined" != typeof r) {
                                    return r;
                                }
                                if (len) {
                                    /** @type {Array.<?>} */
                                    stack = stack.slice(0, -1 * len * 2);
                                    /** @type {Array.<?>} */
                                    vstack = vstack.slice(0, -1 * len);
                                    /** @type {Array.<?>} */
                                    lstack = lstack.slice(0, -1 * len);
                                }
                                stack.push(this.productions_[action[1]][0]);
                                vstack.push(yyval.$);
                                lstack.push(yyval._$);
                                value = table[stack[stack.length - 2]][stack[stack.length - 1]];
                                stack.push(value);
                                break;
                            case 3:
                                return true;
                        }
                    }
                    return true;
                }
            };
            var lexer = function() {
                var lexer = {
                    EOF : 1,
                    /**
                     * @param {string} str
                     * @param {?} hash
                     * @return {undefined}
                     */
                    parseError : function(str, hash) {
                        if (!this.yy.parser) {
                            throw new Error(str);
                        }
                        this.yy.parser.parseError(str, hash);
                    },
                    /**
                     * @param {string} input
                     * @return {?}
                     */
                    setInput : function(input) {
                        return this._input = input, this._more = this._less = this.done = false, this.yylineno = this.yyleng = 0, this.yytext = this.matched = this.match = "", this.conditionStack = ["INITIAL"], this.yylloc = {
                            first_line : 1,
                            first_column : 0,
                            last_line : 1,
                            last_column : 0
                        }, this.options.ranges && (this.yylloc.range = [0, 0]), this.offset = 0, this;
                    },
                    /**
                     * @return {?}
                     */
                    input : function() {
                        var ch = this._input[0];
                        this.yytext += ch;
                        this.yyleng++;
                        this.offset++;
                        this.match += ch;
                        this.matched += ch;
                        var b = ch.match(/(?:\r\n?|\n).*/g);
                        return b ? (this.yylineno++, this.yylloc.last_line++) : this.yylloc.last_column++, this.options.ranges && this.yylloc.range[1]++, this._input = this._input.slice(1), ch;
                    },
                    /**
                     * @param {string} ch
                     * @return {?}
                     */
                    unput : function(ch) {
                        var len = ch.length;
                        var lines = ch.split(/(?:\r\n?|\n)/g);
                        this._input = ch + this._input;
                        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
                        this.offset -= len;
                        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                        this.match = this.match.substr(0, this.match.length - 1);
                        this.matched = this.matched.substr(0, this.matched.length - 1);
                        if (lines.length - 1) {
                            this.yylineno -= lines.length - 1;
                        }
                        var r = this.yylloc.range;
                        return this.yylloc = {
                            first_line : this.yylloc.first_line,
                            last_line : this.yylineno + 1,
                            first_column : this.yylloc.first_column,
                            last_column : lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                        }, this.options.ranges && (this.yylloc.range = [r[0], r[0] + this.yyleng - len]), this;
                    },
                    /**
                     * @return {?}
                     */
                    more : function() {
                        return this._more = true, this;
                    },
                    /**
                     * @param {number} recurring
                     * @return {undefined}
                     */
                    less : function(recurring) {
                        this.unput(this.match.slice(recurring));
                    },
                    /**
                     * @return {?}
                     */
                    pastInput : function() {
                        var headBuffer = this.matched.substr(0, this.matched.length - this.match.length);
                        return(headBuffer.length > 20 ? "..." : "") + headBuffer.substr(-20).replace(/\n/g, "");
                    },
                    /**
                     * @return {?}
                     */
                    upcomingInput : function() {
                        var next = this.match;
                        return next.length < 20 && (next += this._input.substr(0, 20 - next.length)), (next.substr(0, 20) + (next.length > 20 ? "..." : "")).replace(/\n/g, "");
                    },
                    /**
                     * @return {?}
                     */
                    showPosition : function() {
                        var pre = this.pastInput();
                        /** @type {string} */
                        var buf = (new Array(pre.length + 1)).join("-");
                        return pre + this.upcomingInput() + "\n" + buf + "^";
                    },
                    /**
                     * @return {?}
                     */
                    next : function() {
                        if (this.done) {
                            return this.EOF;
                        }
                        if (!this._input) {
                            /** @type {boolean} */
                            this.done = true;
                        }
                        var token;
                        var match;
                        var parent;
                        var index;
                        var lines;
                        if (!this._more) {
                            /** @type {string} */
                            this.yytext = "";
                            /** @type {string} */
                            this.match = "";
                        }
                        var rules = this._currentRules();
                        /** @type {number} */
                        var i = 0;
                        for (;i < rules.length && (parent = this._input.match(this.rules[rules[i]]), !parent || (match && !(parent[0].length > match[0].length) || (match = parent, index = i, this.options.flex)));i++) {
                        }
                        return match ? (lines = match[0].match(/(?:\r\n?|\n).*/g), lines && (this.yylineno += lines.length), this.yylloc = {
                                first_line : this.yylloc.last_line,
                                last_line : this.yylineno + 1,
                                first_column : this.yylloc.last_column,
                                last_column : lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                            }, this.yytext += match[0], this.match += match[0], this.matches = match, this.yyleng = this.yytext.length, this.options.ranges && (this.yylloc.range = [this.offset, this.offset += this.yyleng]), this._more = false, this._input = this._input.slice(match[0].length), this.matched += match[0], token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]), this.done && (this._input && (this.done = false)), token ? token : void 0) :
                            "" === this._input ? this.EOF : this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), {
                                text : "",
                                token : null,
                                line : this.yylineno
                            });
                    },
                    /**
                     * @return {?}
                     */
                    lex : function() {
                        var io = this.next();
                        return "undefined" != typeof io ? io : this.lex();
                    },
                    /**
                     * @param {string} condition
                     * @return {undefined}
                     */
                    begin : function(condition) {
                        this.conditionStack.push(condition);
                    },
                    /**
                     * @return {?}
                     */
                    popState : function() {
                        return this.conditionStack.pop();
                    },
                    /**
                     * @return {?}
                     */
                    _currentRules : function() {
                        return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                    },
                    /**
                     * @return {?}
                     */
                    topState : function() {
                        return this.conditionStack[this.conditionStack.length - 2];
                    },
                    /**
                     * @param {string} condition
                     * @return {undefined}
                     */
                    pushState : function(condition) {
                        this.begin(condition);
                    }
                };
                return lexer.options = {}, lexer.performAction = function(deltaTime, yy_, stat, file) {
                    /**
                     * @param {number} recurring
                     * @param {number} expectedNumberOfNonCommentArgs
                     * @return {?}
                     */
                    function strip(recurring, expectedNumberOfNonCommentArgs) {
                        return yy_.yytext = yy_.yytext.substr(recurring, yy_.yyleng - expectedNumberOfNonCommentArgs);
                    }
                    switch(stat) {
                        case 0:
                            if ("\\\\" === yy_.yytext.slice(-2) ? (strip(0, 1), this.begin("mu")) : "\\" === yy_.yytext.slice(-1) ? (strip(0, 1), this.begin("emu")) : this.begin("mu"), yy_.yytext) {
                                return 12;
                            }
                            break;
                        case 1:
                            return 12;
                        case 2:
                            return this.popState(), 12;
                        case 3:
                            return yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9), this.popState(), 15;
                        case 4:
                            return 12;
                        case 5:
                            return strip(0, 4), this.popState(), 13;
                        case 6:
                            return 45;
                        case 7:
                            return 46;
                        case 8:
                            return 16;
                        case 9:
                            return this.popState(), this.begin("raw"), 18;
                        case 10:
                            return 34;
                        case 11:
                            return 24;
                        case 12:
                            return 29;
                        case 13:
                            return this.popState(), 28;
                        case 14:
                            return this.popState(), 28;
                        case 15:
                            return 26;
                        case 16:
                            return 26;
                        case 17:
                            return 32;
                        case 18:
                            return 31;
                        case 19:
                            this.popState();
                            this.begin("com");
                            break;
                        case 20:
                            return strip(3, 5), this.popState(), 13;
                        case 21:
                            return 31;
                        case 22:
                            return 51;
                        case 23:
                            return 50;
                        case 24:
                            return 50;
                        case 25:
                            return 54;
                        case 26:
                            break;
                        case 27:
                            return this.popState(), 33;
                        case 28:
                            return this.popState(), 25;
                        case 29:
                            return yy_.yytext = strip(1, 2).replace(/\\"/g, '"'), 42;
                        case 30:
                            return yy_.yytext = strip(1, 2).replace(/\\'/g, "'"), 42;
                        case 31:
                            return 52;
                        case 32:
                            return 44;
                        case 33:
                            return 44;
                        case 34:
                            return 43;
                        case 35:
                            return 50;
                        case 36:
                            return yy_.yytext = strip(1, 2), 50;
                        case 37:
                            return "INVALID";
                        case 38:
                            return 5;
                    }
                }, lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]*?(?=(\{\{\{\{\/)))/, /^(?:[\s\S]*?--\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/,
                    /^(?:\{\{!--)/, /^(?:\{\{![\s\S]*?\}\})/, /^(?:\{\{(~)?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)]))))/, /^(?:\[[^\]]*\])/, /^(?:.)/, /^(?:$)/], lexer.conditions = {
                    mu : {
                        rules : [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38],
                        inclusive : false
                    },
                    emu : {
                        rules : [2],
                        inclusive : false
                    },
                    com : {
                        rules : [5],
                        inclusive : false
                    },
                    raw : {
                        rules : [3, 4],
                        inclusive : false
                    },
                    INITIAL : {
                        rules : [0, 1, 38],
                        inclusive : true
                    }
                }, lexer;
            }();
            return parser.lexer = lexer, Parser.prototype = parser, parser.Parser = Parser, new Parser;
        }();
        return bulk = fn;
    }();
    var camelKey = function(value) {
        /**
         * @param {string} str
         * @param {string} txt
         * @return {?}
         */
        function log(str, txt) {
            return{
                left : "~" === str.charAt(2),
                right : "~" === txt.charAt(txt.length - 3)
            };
        }
        /**
         * @param {string} mustache
         * @param {Object} data
         * @param {Object} statement
         * @param {string} close
         * @param {boolean} recurring
         * @param {?} inverse
         * @return {?}
         */
        function BlockNode(mustache, data, statement, close, recurring, inverse) {
            if (mustache.sexpr.id.original !== close.path.original) {
                throw new color(mustache.sexpr.id.original + " doesn't match " + close.path.original, mustache);
            }
            var self = statement && statement.program;
            var button = {
                left : mustache.strip.left,
                right : close.strip.right,
                openStandalone : fn(data.statements),
                closeStandalone : callback((self || data).statements)
            };
            if (mustache.strip.right && init(data.statements, null, true), self) {
                var strip = statement.strip;
                if (strip.left) {
                    _(data.statements, null, true);
                }
                if (strip.right) {
                    init(self.statements, null, true);
                }
                if (close.strip.left) {
                    _(self.statements, null, true);
                }
                if (callback(data.statements)) {
                    if (fn(self.statements)) {
                        _(data.statements);
                        init(self.statements);
                    }
                }
            } else {
                if (close.strip.left) {
                    _(data.statements, null, true);
                }
            }
            return recurring ? new this.BlockNode(mustache, self, data, button, inverse) : new this.BlockNode(mustache, data, self, button, inverse);
        }
        /**
         * @param {Array} el
         * @param {boolean} next
         * @return {?}
         */
        function show(el, next) {
            /** @type {number} */
            var i = 0;
            var len = el.length;
            for (;i < len;i++) {
                var options = el[i];
                var strip = options.strip;
                if (strip) {
                    var value = callback(el, i, next, "partial" === options.type);
                    var res = fn(el, i, next);
                    var proceed = strip.openStandalone && value;
                    var n = strip.closeStandalone && res;
                    var o = strip.inlineStandalone && (value && res);
                    if (strip.right) {
                        init(el, i, true);
                    }
                    if (strip.left) {
                        _(el, i, true);
                    }
                    if (o) {
                        init(el, i);
                        if (_(el, i)) {
                            if ("partial" === options.type) {
                                /** @type {string} */
                                options.indent = /([ \t]+$)/.exec(el[i - 1].original) ? RegExp.$1 : "";
                            }
                        }
                    }
                    if (proceed) {
                        init((options.program || options.inverse).statements);
                        _(el, i);
                    }
                    if (n) {
                        init(el, i);
                        _((options.inverse || options.program).statements);
                    }
                }
            }
            return el;
        }
        /**
         * @param {Array} s
         * @param {number} i
         * @param {boolean} index
         * @return {?}
         */
        function callback(s, i, index) {
            if (void 0 === i) {
                i = s.length;
            }
            var src = s[i - 1];
            var k = s[i - 2];
            return src ? "content" === src.type ? (k || !index ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(src.original) : void 0 : index;
        }
        /**
         * @param {Array} args
         * @param {number} key
         * @param {boolean} item
         * @return {?}
         */
        function fn(args, key, item) {
            if (void 0 === key) {
                /** @type {number} */
                key = -1;
            }
            var parent = args[key + 1];
            var pageY = args[key + 2];
            return parent ? "content" === parent.type ? (pageY || !item ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(parent.original) : void 0 : item;
        }
        /**
         * @param {?} elements
         * @param {number} depMaps
         * @param {boolean} dataAndEvents
         * @return {undefined}
         */
        function init(elements, depMaps, dataAndEvents) {
            var me = elements[null == depMaps ? 0 : depMaps + 1];
            if (me && ("content" === me.type && (dataAndEvents || !me.rightStripped))) {
                var value = me.string;
                me.string = me.string.replace(dataAndEvents ? /^\s+/ : /^[ \t]*\r?\n?/, "");
                /** @type {boolean} */
                me.rightStripped = me.string !== value;
            }
        }
        /**
         * @param {Array} obj
         * @param {number} recurring
         * @param {boolean} dataAndEvents
         * @return {?}
         */
        function _(obj, recurring, dataAndEvents) {
            var prop = obj[null == recurring ? obj.length - 1 : recurring - 1];
            if (prop && ("content" === prop.type && (dataAndEvents || !prop.leftStripped))) {
                var start = prop.string;
                return prop.string = prop.string.replace(dataAndEvents ? /\s+$/ : /[ \t]+$/, ""), prop.leftStripped = prop.string !== start, prop.leftStripped;
            }
        }
        var __exports__ = {};
        var color = value;
        return __exports__.stripFlags = log, __exports__.prepareBlock = BlockNode, __exports__.prepareProgram = show, __exports__;
    }(pdataCur);
    var __module8__ = function(value, __dependency2__, key, _) {
        /**
         * @param {?} input
         * @return {?}
         */
        function parse(input) {
            return input.constructor === AST.ProgramNode ? input : (parser.yy = attributes, parser.parse(input));
        }
        var __exports__ = {};
        var parser = value;
        var AST = __dependency2__;
        var options = key;
        var _extend = _.extend;
        __exports__.parser = parser;
        var attributes = {};
        return _extend(attributes, options, AST), __exports__.parse = parse, __exports__;
    }(udataCur, __module7__, camelKey, __module2__);
    var __module10__ = function(value, __dependency3__) {
        /**
         * @return {undefined}
         */
        function Compiler() {
        }
        /**
         * @param {?} input
         * @param {Object} options
         * @param {JSONType} env
         * @return {?}
         */
        function precompile(input, options, env) {
            if (null == input || "string" != typeof input && input.constructor !== env.AST.ProgramNode) {
                throw new Exception("You must pass a string or Handlebars AST to Handlebars.precompile. You passed " + input);
            }
            options = options || {};
            if (!("data" in options)) {
                /** @type {boolean} */
                options.data = true;
            }
            if (options.compat) {
                /** @type {boolean} */
                options.useDepths = true;
            }
            var ast = env.parse(input);
            var environment = (new env.Compiler).compile(ast, options);
            return(new env.JavaScriptCompiler).compile(environment, options);
        }
        /**
         * @param {string} input
         * @param {Object} options
         * @param {Object} env
         * @return {?}
         */
        function compile(input, options, env) {
            /**
             * @return {?}
             */
            function compile() {
                var ast = env.parse(input);
                var environment = (new env.Compiler).compile(ast, options);
                var optgroup = (new env.JavaScriptCompiler).compile(environment, options, void 0, true);
                return env.template(optgroup);
            }
            if (null == input || "string" != typeof input && input.constructor !== env.AST.ProgramNode) {
                throw new Exception("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input);
            }
            options = options || {};
            if (!("data" in options)) {
                /** @type {boolean} */
                options.data = true;
            }
            if (options.compat) {
                /** @type {boolean} */
                options.useDepths = true;
            }
            var compiled;
            /**
             * @param {?} context
             * @param {?} options
             * @return {?}
             */
            var evaluate = function(context, options) {
                return compiled || (compiled = compile()), compiled.call(this, context, options);
            };
            return evaluate._setup = function(options) {
                return compiled || (compiled = compile()), compiled._setup(options);
            }, evaluate._child = function(isXML, context, deepDataAndEvents) {
                return compiled || (compiled = compile()), compiled._child(isXML, context, deepDataAndEvents);
            }, evaluate;
        }
        /**
         * @param {string} a
         * @param {string} b
         * @return {?}
         */
        function cmp(a, b) {
            if (a === b) {
                return true;
            }
            if (isArray(a) && (isArray(b) && a.length === b.length)) {
                /** @type {number} */
                var i = 0;
                for (;i < a.length;i++) {
                    if (!cmp(a[i], b[i])) {
                        return false;
                    }
                }
                return true;
            }
        }
        var __exports__ = {};
        var Exception = value;
        var isArray = __dependency3__.isArray;
        /** @type {function (this:(Array.<T>|string|{length: number}), *=, *=): Array.<T>} */
        var __slice = [].slice;
        return __exports__.Compiler = Compiler, Compiler.prototype = {
            /** @type {function (): undefined} */
            compiler : Compiler,
            /**
             * @param {Object} other
             * @return {?}
             */
            equals : function(other) {
                var len = this.opcodes.length;
                if (other.opcodes.length !== len) {
                    return false;
                }
                /** @type {number} */
                var i = 0;
                for (;i < len;i++) {
                    var opcode = this.opcodes[i];
                    var otherOpcode = other.opcodes[i];
                    if (opcode.opcode !== otherOpcode.opcode || !cmp(opcode.args, otherOpcode.args)) {
                        return false;
                    }
                }
                len = this.children.length;
                /** @type {number} */
                i = 0;
                for (;i < len;i++) {
                    if (!this.children[i].equals(other.children[i])) {
                        return false;
                    }
                }
                return true;
            },
            guid : 0,
            /**
             * @param {string} program
             * @param {Object} options
             * @return {?}
             */
            compile : function(program, options) {
                /** @type {Array} */
                this.opcodes = [];
                /** @type {Array} */
                this.children = [];
                this.depths = {
                    list : []
                };
                /** @type {Object} */
                this.options = options;
                this.stringParams = options.stringParams;
                this.trackIds = options.trackIds;
                var knownHelpers = this.options.knownHelpers;
                if (this.options.knownHelpers = {
                        helperMissing : true,
                        blockHelperMissing : true,
                        each : true,
                        if : true,
                        unless : true,
                        with : true,
                        log : true,
                        lookup : true
                    }, knownHelpers) {
                    var name;
                    for (name in knownHelpers) {
                        this.options.knownHelpers[name] = knownHelpers[name];
                    }
                }
                return this.accept(program);
            },
            /**
             * @param {Object} node
             * @return {?}
             */
            accept : function(node) {
                return this[node.type](node);
            },
            /**
             * @param {Object} object
             * @return {?}
             */
            program : function(object) {
                var statements = object.statements;
                /** @type {number} */
                var i = 0;
                var l = statements.length;
                for (;i < l;i++) {
                    this.accept(statements[i]);
                }
                return this.isSimple = 1 === l, this.depths.list = this.depths.list.sort(function(far, near) {
                    return far - near;
                }), this;
            },
            /**
             * @param {string} program
             * @return {?}
             */
            compileProgram : function(program) {
                var depth;
                var result = (new this.compiler).compile(program, this.options);
                /** @type {number} */
                var guid = this.guid++;
                this.usePartial = this.usePartial || result.usePartial;
                this.children[guid] = result;
                /** @type {number} */
                var i = 0;
                var valuesLen = result.depths.list.length;
                for (;i < valuesLen;i++) {
                    depth = result.depths.list[i];
                    if (!(depth < 2)) {
                        this.addDepth(depth - 1);
                    }
                }
                return guid;
            },
            /**
             * @param {?} block
             * @return {undefined}
             */
            block : function(block) {
                var mustache = block.mustache;
                var program = block.program;
                var inverse = block.inverse;
                if (program) {
                    program = this.compileProgram(program);
                }
                if (inverse) {
                    inverse = this.compileProgram(inverse);
                }
                var sexpr = mustache.sexpr;
                var type = this.classifySexpr(sexpr);
                if ("helper" === type) {
                    this.helperSexpr(sexpr, program, inverse);
                } else {
                    if ("simple" === type) {
                        this.simpleSexpr(sexpr);
                        this.opcode("pushProgram", program);
                        this.opcode("pushProgram", inverse);
                        this.opcode("emptyHash");
                        this.opcode("blockValue", sexpr.id.original);
                    } else {
                        this.ambiguousSexpr(sexpr, program, inverse);
                        this.opcode("pushProgram", program);
                        this.opcode("pushProgram", inverse);
                        this.opcode("emptyHash");
                        this.opcode("ambiguousBlockValue");
                    }
                }
                this.opcode("append");
            },
            /**
             * @param {string} name
             * @return {undefined}
             */
            hash : function(name) {
                var _i;
                var _len;
                var xs = name.pairs;
                this.opcode("pushHash");
                /** @type {number} */
                _i = 0;
                _len = xs.length;
                for (;_i < _len;_i++) {
                    this.pushParam(xs[_i][1]);
                }
                for (;_i--;) {
                    this.opcode("assignToHash", xs[_i][0]);
                }
                this.opcode("popHash");
            },
            /**
             * @param {Object} o
             * @return {undefined}
             */
            partial : function(o) {
                var content = o.partialName;
                /** @type {boolean} */
                this.usePartial = true;
                if (o.hash) {
                    this.accept(o.hash);
                } else {
                    this.opcode("push", "undefined");
                }
                if (o.context) {
                    this.accept(o.context);
                } else {
                    this.opcode("getContext", 0);
                    this.opcode("pushContext");
                }
                this.opcode("invokePartial", content.name, o.indent || "");
                this.opcode("append");
            },
            /**
             * @param {string} content
             * @return {undefined}
             */
            content : function(content) {
                if (content.string) {
                    this.opcode("appendContent", content.string);
                }
            },
            /**
             * @param {?} mustache
             * @return {undefined}
             */
            mustache : function(mustache) {
                this.sexpr(mustache.sexpr);
                if (mustache.escaped && !this.options.noEscape) {
                    this.opcode("appendEscaped");
                } else {
                    this.opcode("append");
                }
            },
            /**
             * @param {Element} sexpr
             * @param {string} program
             * @param {string} inverse
             * @return {undefined}
             */
            ambiguousSexpr : function(sexpr, program, inverse) {
                var id = sexpr.id;
                var name = id.parts[0];
                /** @type {boolean} */
                var isBlock = null != program || null != inverse;
                this.opcode("getContext", id.depth);
                this.opcode("pushProgram", program);
                this.opcode("pushProgram", inverse);
                this.ID(id);
                this.opcode("invokeAmbiguous", name, isBlock);
            },
            /**
             * @param {Element} sexpr
             * @return {undefined}
             */
            simpleSexpr : function(sexpr) {
                var id = sexpr.id;
                if ("DATA" === id.type) {
                    this.DATA(id);
                } else {
                    if (id.parts.length) {
                        this.ID(id);
                    } else {
                        this.addDepth(id.depth);
                        this.opcode("getContext", id.depth);
                        this.opcode("pushContext");
                    }
                }
                this.opcode("resolvePossibleLambda");
            },
            /**
             * @param {Object} sexpr
             * @param {?} program
             * @param {?} inverse
             * @return {undefined}
             */
            helperSexpr : function(sexpr, program, inverse) {
                var params = this.setupFullMustacheParams(sexpr, program, inverse);
                var id = sexpr.id;
                var name = id.parts[0];
                if (this.options.knownHelpers[name]) {
                    this.opcode("invokeKnownHelper", params.length, name);
                } else {
                    if (this.options.knownHelpersOnly) {
                        throw new Exception("You specified knownHelpersOnly, but used the unknown helper " + name, sexpr);
                    }
                    /** @type {boolean} */
                    id.falsy = true;
                    this.ID(id);
                    this.opcode("invokeHelper", params.length, id.original, id.isSimple);
                }
            },
            /**
             * @param {string} sexpr
             * @return {undefined}
             */
            sexpr : function(sexpr) {
                var type = this.classifySexpr(sexpr);
                if ("simple" === type) {
                    this.simpleSexpr(sexpr);
                } else {
                    if ("helper" === type) {
                        this.helperSexpr(sexpr);
                    } else {
                        this.ambiguousSexpr(sexpr);
                    }
                }
            },
            /**
             * @param {?} id
             * @return {undefined}
             */
            ID : function(id) {
                this.addDepth(id.depth);
                this.opcode("getContext", id.depth);
                var b = id.parts[0];
                if (b) {
                    this.opcode("lookupOnContext", id.parts, id.falsy, id.isScoped);
                } else {
                    this.opcode("pushContext");
                }
            },
            /**
             * @param {Element} data
             * @return {undefined}
             */
            DATA : function(data) {
                /** @type {boolean} */
                this.options.data = true;
                this.opcode("lookupData", data.id.depth, data.id.parts);
            },
            /**
             * @param {string} string
             * @return {undefined}
             */
            STRING : function(string) {
                this.opcode("pushString", string.string);
            },
            /**
             * @param {string} data
             * @return {undefined}
             */
            NUMBER : function(data) {
                this.opcode("pushLiteral", data.number);
            },
            /**
             * @param {?} bool
             * @return {undefined}
             */
            BOOLEAN : function(bool) {
                this.opcode("pushLiteral", bool.bool);
            },
            /**
             * @return {undefined}
             */
            comment : function() {
            },
            /**
             * @param {string} name
             * @return {undefined}
             */
            opcode : function(name) {
                this.opcodes.push({
                    opcode : name,
                    args : __slice.call(arguments, 1)
                });
            },
            /**
             * @param {number} depth
             * @return {undefined}
             */
            addDepth : function(depth) {
                if (0 !== depth) {
                    if (!this.depths[depth]) {
                        /** @type {boolean} */
                        this.depths[depth] = true;
                        this.depths.list.push(depth);
                    }
                }
            },
            /**
             * @param {Element} sexpr
             * @return {?}
             */
            classifySexpr : function(sexpr) {
                var isHelper = sexpr.isHelper;
                var isEligible = sexpr.eligibleHelper;
                var options = this.options;
                if (isEligible && !isHelper) {
                    var name = sexpr.id.parts[0];
                    if (options.knownHelpers[name]) {
                        /** @type {boolean} */
                        isHelper = true;
                    } else {
                        if (options.knownHelpersOnly) {
                            /** @type {boolean} */
                            isEligible = false;
                        }
                    }
                }
                return isHelper ? "helper" : isEligible ? "ambiguous" : "simple";
            },
            /**
             * @param {Array} values
             * @return {undefined}
             */
            pushParams : function(values) {
                /** @type {number} */
                var i = 0;
                var valuesLen = values.length;
                for (;i < valuesLen;i++) {
                    this.pushParam(values[i]);
                }
            },
            /**
             * @param {Object} val
             * @return {undefined}
             */
            pushParam : function(val) {
                if (this.stringParams) {
                    if (val.depth) {
                        this.addDepth(val.depth);
                    }
                    this.opcode("getContext", val.depth || 0);
                    this.opcode("pushStringParam", val.stringModeValue, val.type);
                    if ("sexpr" === val.type) {
                        this.sexpr(val);
                    }
                } else {
                    if (this.trackIds) {
                        this.opcode("pushId", val.type, val.idName || val.stringModeValue);
                    }
                    this.accept(val);
                }
            },
            /**
             * @param {Object} sexpr
             * @param {?} inverse
             * @param {?} program
             * @return {?}
             */
            setupFullMustacheParams : function(sexpr, inverse, program) {
                var params = sexpr.params;
                return this.pushParams(params), this.opcode("pushProgram", inverse), this.opcode("pushProgram", program), sexpr.hash ? this.hash(sexpr.hash) : this.opcode("emptyHash"), params;
            }
        }, __exports__.precompile = precompile, __exports__.compile = compile, __exports__;
    }(pdataCur, __module2__);
    var failuresLink = function(__dependency3__, value) {
        /**
         * @param {?} v
         * @return {undefined}
         */
        function HookerOverride(v) {
            this.value = v;
        }
        /**
         * @return {undefined}
         */
        function JavaScriptCompiler() {
        }
        var __exports__;
        var COMPILER_REVISION = __dependency3__.COMPILER_REVISION;
        var REVISION_CHANGES = __dependency3__.REVISION_CHANGES;
        var Exception = value;
        JavaScriptCompiler.prototype = {
            /**
             * @param {string} parent
             * @param {string} name
             * @return {?}
             */
            nameLookup : function(parent, name) {
                return JavaScriptCompiler.isValidJavaScriptVariableName(name) ? parent + "." + name : parent + "['" + name + "']";
            },
            /**
             * @param {string} dataAndEvents
             * @return {?}
             */
            depthedLookup : function(dataAndEvents) {
                return this.aliases.lookup = "this.lookup", 'lookup(depths, "' + dataAndEvents + '")';
            },
            /**
             * @return {?}
             */
            compilerInfo : function() {
                var revision = COMPILER_REVISION;
                var versions = REVISION_CHANGES[revision];
                return[revision, versions];
            },
            /**
             * @param {string} string
             * @return {?}
             */
            appendToBuffer : function(string) {
                return this.environment.isSimple ? "return " + string + ";" : {
                    appendToBuffer : true,
                    content : string,
                    /**
                     * @return {?}
                     */
                    toString : function() {
                        return "buffer += " + string + ";";
                    }
                };
            },
            /**
             * @return {?}
             */
            initializeBuffer : function() {
                return this.quotedString("");
            },
            namespace : "Handlebars",
            /**
             * @param {string} environment
             * @param {Object} options
             * @param {boolean} context
             * @param {boolean} deepDataAndEvents
             * @return {?}
             */
            compile : function(environment, options, context, deepDataAndEvents) {
                /** @type {string} */
                this.environment = environment;
                /** @type {Object} */
                this.options = options;
                this.stringParams = this.options.stringParams;
                this.trackIds = this.options.trackIds;
                /** @type {boolean} */
                this.precompile = !deepDataAndEvents;
                this.name = this.environment.name;
                /** @type {boolean} */
                this.isChild = !!context;
                this.context = context || {
                    programs : [],
                    environments : []
                };
                this.preamble();
                /** @type {number} */
                this.stackSlot = 0;
                /** @type {Array} */
                this.stackVars = [];
                this.aliases = {};
                this.registers = {
                    list : []
                };
                /** @type {Array} */
                this.hashes = [];
                /** @type {Array} */
                this.compileStack = [];
                /** @type {Array} */
                this.inlineStack = [];
                this.compileChildren(environment, options);
                this.useDepths = this.useDepths || (environment.depths.list.length || this.options.compat);
                var opcode;
                var i;
                var l;
                var opcodes = environment.opcodes;
                /** @type {number} */
                i = 0;
                l = opcodes.length;
                for (;i < l;i++) {
                    opcode = opcodes[i];
                    this[opcode.opcode].apply(this, opcode.args);
                }
                if (this.pushSource(""), this.stackSlot || (this.inlineStack.length || this.compileStack.length)) {
                    throw new Exception("Compile completed with content left on stack");
                }
                var js = this.createFunctionContext(deepDataAndEvents);
                if (this.isChild) {
                    return js;
                }
                var result = {
                    compiler : this.compilerInfo(),
                    main : js
                };
                /** @type {Array} */
                var data = this.context.programs;
                /** @type {number} */
                i = 0;
                /** @type {number} */
                l = data.length;
                for (;i < l;i++) {
                    if (data[i]) {
                        result[i] = data[i];
                    }
                }
                return this.environment.usePartial && (result.usePartial = true), this.options.data && (result.useData = true), this.useDepths && (result.useDepths = true), this.options.compat && (result.compat = true), deepDataAndEvents || (result.compiler = JSON.stringify(result.compiler), result = this.objectLiteral(result)), result;
            },
            /**
             * @return {undefined}
             */
            preamble : function() {
                /** @type {number} */
                this.lastContext = 0;
                /** @type {Array} */
                this.source = [];
            },
            /**
             * @param {boolean} deepDataAndEvents
             * @return {?}
             */
            createFunctionContext : function(deepDataAndEvents) {
                /** @type {string} */
                var later = "";
                var dig = this.stackVars.concat(this.registers.list);
                if (dig.length > 0) {
                    later += ", " + dig.join(", ");
                }
                var alias;
                for (alias in this.aliases) {
                    if (this.aliases.hasOwnProperty(alias)) {
                        later += ", " + alias + "=" + this.aliases[alias];
                    }
                }
                /** @type {Array} */
                var params = ["depth0", "helpers", "partials", "data"];
                if (this.useDepths) {
                    params.push("depths");
                }
                var options = this.mergeSource(later);
                return deepDataAndEvents ? (params.push(options), Function.apply(this, params)) : "function(" + params.join(",") + ") {\n  " + options + "}";
            },
            /**
             * @param {Object} key
             * @return {?}
             */
            mergeSource : function(key) {
                var buffer;
                var isSym;
                /** @type {string} */
                var data = "";
                /** @type {boolean} */
                var e = !this.forceBuffer;
                /** @type {number} */
                var i = 0;
                var len = this.source.length;
                for (;i < len;i++) {
                    var line = this.source[i];
                    if (line.appendToBuffer) {
                        buffer = buffer ? buffer + "\n    + " + line.content : line.content;
                    } else {
                        if (buffer) {
                            if (data) {
                                data += "buffer += " + buffer + ";\n  ";
                            } else {
                                /** @type {boolean} */
                                isSym = true;
                                /** @type {string} */
                                data = buffer + ";\n  ";
                            }
                            buffer = void 0;
                        }
                        data += line + "\n  ";
                        if (!this.environment.isSimple) {
                            /** @type {boolean} */
                            e = false;
                        }
                    }
                }
                return e ? !buffer && data || (data += "return " + (buffer || '""') + ";\n") : (key += ", buffer = " + (isSym ? "" : this.initializeBuffer()), data += buffer ? "return buffer + " + buffer + ";\n" : "return buffer;\n"), key && (data = "var " + key.substring(2) + (isSym ? "" : ";\n  ") + data), data;
            },
            /**
             * @param {string} walkers
             * @return {undefined}
             */
            blockValue : function(walkers) {
                /** @type {string} */
                this.aliases.blockHelperMissing = "helpers.blockHelperMissing";
                /** @type {Array} */
                var params = [this.contextName(0)];
                this.setupParams(walkers, 0, params);
                var current = this.popStack();
                params.splice(1, 0, current);
                this.push("blockHelperMissing.call(" + params.join(", ") + ")");
            },
            /**
             * @return {undefined}
             */
            ambiguousBlockValue : function() {
                /** @type {string} */
                this.aliases.blockHelperMissing = "helpers.blockHelperMissing";
                /** @type {Array} */
                var params = [this.contextName(0)];
                this.setupParams("", 0, params, true);
                this.flushInline();
                var current = this.topStack();
                params.splice(1, 0, current);
                this.pushSource("if (!" + this.lastHelper + ") { " + current + " = blockHelperMissing.call(" + params.join(", ") + "); }");
            },
            /**
             * @param {Function} content
             * @return {undefined}
             */
            appendContent : function(content) {
                if (this.pendingContent) {
                    content = this.pendingContent + content;
                }
                /** @type {Function} */
                this.pendingContent = content;
            },
            /**
             * @return {undefined}
             */
            append : function() {
                this.flushInline();
                var local = this.popStack();
                this.pushSource("if (" + local + " != null) { " + this.appendToBuffer(local) + " }");
                if (this.environment.isSimple) {
                    this.pushSource("else { " + this.appendToBuffer("''") + " }");
                }
            },
            /**
             * @return {undefined}
             */
            appendEscaped : function() {
                /** @type {string} */
                this.aliases.escapeExpression = "this.escapeExpression";
                this.pushSource(this.appendToBuffer("escapeExpression(" + this.popStack() + ")"));
            },
            /**
             * @param {Node} depth
             * @return {undefined}
             */
            getContext : function(depth) {
                /** @type {Node} */
                this.lastContext = depth;
            },
            /**
             * @return {undefined}
             */
            pushContext : function() {
                this.pushStackLiteral(this.contextName(this.lastContext));
            },
            /**
             * @param {(Array|number)} second
             * @param {boolean} name
             * @param {boolean} dataAndEvents
             * @return {undefined}
             */
            lookupOnContext : function(second, name, dataAndEvents) {
                /** @type {number} */
                var j = 0;
                var l = second.length;
                if (dataAndEvents || (!this.options.compat || this.lastContext)) {
                    this.pushContext();
                } else {
                    this.push(this.depthedLookup(second[j++]));
                }
                for (;j < l;j++) {
                    this.replaceStack(function(current) {
                        var key = this.nameLookup(current, second[j], "context");
                        return name ? " && " + key : " != null ? " + key + " : " + current;
                    });
                }
            },
            /**
             * @param {string} id
             * @param {Array} classNames
             * @return {undefined}
             */
            lookupData : function(id, classNames) {
                if (id) {
                    this.pushStackLiteral("this.data(data, " + id + ")");
                } else {
                    this.pushStackLiteral("data");
                }
                var cnl = classNames.length;
                /** @type {number} */
                var x = 0;
                for (;x < cnl;x++) {
                    this.replaceStack(function(current) {
                        return " && " + this.nameLookup(current, classNames[x], "data");
                    });
                }
            },
            /**
             * @return {undefined}
             */
            resolvePossibleLambda : function() {
                /** @type {string} */
                this.aliases.lambda = "this.lambda";
                this.push("lambda(" + this.popStack() + ", " + this.contextName(0) + ")");
            },
            /**
             * @param {string} type
             * @param {string} string
             * @return {undefined}
             */
            pushStringParam : function(type, string) {
                this.pushContext();
                this.pushString(string);
                if ("sexpr" !== string) {
                    if ("string" == typeof type) {
                        this.pushString(type);
                    } else {
                        this.pushStackLiteral(type);
                    }
                }
            },
            /**
             * @return {undefined}
             */
            emptyHash : function() {
                this.pushStackLiteral("{}");
                if (this.trackIds) {
                    this.push("{}");
                }
                if (this.stringParams) {
                    this.push("{}");
                    this.push("{}");
                }
            },
            /**
             * @return {undefined}
             */
            pushHash : function() {
                if (this.hash) {
                    this.hashes.push(this.hash);
                }
                this.hash = {
                    values : [],
                    types : [],
                    contexts : [],
                    ids : []
                };
            },
            /**
             * @return {undefined}
             */
            popHash : function() {
                var hash = this.hash;
                this.hash = this.hashes.pop();
                if (this.trackIds) {
                    this.push("{" + hash.ids.join(",") + "}");
                }
                if (this.stringParams) {
                    this.push("{" + hash.contexts.join(",") + "}");
                    this.push("{" + hash.types.join(",") + "}");
                }
                this.push("{\n    " + hash.values.join(",\n    ") + "\n  }");
            },
            /**
             * @param {string} string
             * @return {undefined}
             */
            pushString : function(string) {
                this.pushStackLiteral(this.quotedString(string));
            },
            /**
             * @param {string} replacementHash
             * @return {?}
             */
            push : function(replacementHash) {
                return this.inlineStack.push(replacementHash), replacementHash;
            },
            /**
             * @param {string} value
             * @return {undefined}
             */
            pushLiteral : function(value) {
                this.pushStackLiteral(value);
            },
            /**
             * @param {string} guid
             * @return {undefined}
             */
            pushProgram : function(guid) {
                if (null != guid) {
                    this.pushStackLiteral(this.programExpression(guid));
                } else {
                    this.pushStackLiteral(null);
                }
            },
            /**
             * @param {number} paramSize
             * @param {string} name
             * @param {boolean} isRoot
             * @return {undefined}
             */
            invokeHelper : function(paramSize, name, isRoot) {
                /** @type {string} */
                this.aliases.helperMissing = "helpers.helperMissing";
                var value = this.popStack();
                var helper = this.setupHelper(paramSize, name);
                /** @type {string} */
                var f = (isRoot ? helper.name + " || " : "") + value + " || helperMissing";
                this.push("((" + f + ").call(" + helper.callParams + "))");
            },
            /**
             * @param {number} paramSize
             * @param {string} name
             * @return {undefined}
             */
            invokeKnownHelper : function(paramSize, name) {
                var helper = this.setupHelper(paramSize, name);
                this.push(helper.name + ".call(" + helper.callParams + ")");
            },
            /**
             * @param {string} name
             * @param {boolean} deepDataAndEvents
             * @return {undefined}
             */
            invokeAmbiguous : function(name, deepDataAndEvents) {
                /** @type {string} */
                this.aliases.functionType = '"function"';
                /** @type {string} */
                this.aliases.helperMissing = "helpers.helperMissing";
                this.useRegister("helper");
                var value = this.popStack();
                this.emptyHash();
                var helper = this.setupHelper(0, name, deepDataAndEvents);
                var helperName = this.lastHelper = this.nameLookup("helpers", name, "helper");
                this.push("((helper = (helper = " + helperName + " || " + value + ") != null ? helper : helperMissing" + (helper.paramsInit ? "),(" + helper.paramsInit : "") + "),(typeof helper === functionType ? helper.call(" + helper.callParams + ") : helper))");
            },
            /**
             * @param {string} name
             * @param {string} context
             * @return {undefined}
             */
            invokePartial : function(name, context) {
                /** @type {Array} */
                var accumulator = [this.nameLookup("partials", name, "partial"), "'" + context + "'", "'" + name + "'", this.popStack(), this.popStack(), "helpers", "partials"];
                if (this.options.data) {
                    accumulator.push("data");
                } else {
                    if (this.options.compat) {
                        accumulator.push("undefined");
                    }
                }
                if (this.options.compat) {
                    accumulator.push("depths");
                }
                this.push("this.invokePartial(" + accumulator.join(", ") + ")");
            },
            /**
             * @param {string} key
             * @return {undefined}
             */
            assignToHash : function(key) {
                var type;
                var inverse;
                var context;
                var value = this.popStack();
                if (this.trackIds) {
                    context = this.popStack();
                }
                if (this.stringParams) {
                    inverse = this.popStack();
                    type = this.popStack();
                }
                var hash = this.hash;
                if (type) {
                    hash.contexts.push("'" + key + "': " + type);
                }
                if (inverse) {
                    hash.types.push("'" + key + "': " + inverse);
                }
                if (context) {
                    hash.ids.push("'" + key + "': " + context);
                }
                hash.values.push("'" + key + "': (" + value + ")");
            },
            /**
             * @param {string} dataAndEvents
             * @param {string} string
             * @return {undefined}
             */
            pushId : function(dataAndEvents, string) {
                if ("ID" === dataAndEvents || "DATA" === dataAndEvents) {
                    this.pushString(string);
                } else {
                    if ("sexpr" === dataAndEvents) {
                        this.pushStackLiteral("true");
                    } else {
                        this.pushStackLiteral("null");
                    }
                }
            },
            /** @type {function (): undefined} */
            compiler : JavaScriptCompiler,
            /**
             * @param {Object} environment
             * @param {Object} options
             * @return {undefined}
             */
            compileChildren : function(environment, options) {
                var child;
                var compiler;
                var children = environment.children;
                /** @type {number} */
                var i = 0;
                var l = children.length;
                for (;i < l;i++) {
                    child = children[i];
                    compiler = new this.compiler;
                    var index = this.matchExistingProgram(child);
                    if (null == index) {
                        this.context.programs.push("");
                        index = this.context.programs.length;
                        child.index = index;
                        /** @type {string} */
                        child.name = "program" + index;
                        this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
                        this.context.environments[index] = child;
                        this.useDepths = this.useDepths || compiler.useDepths;
                    } else {
                        child.index = index;
                        /** @type {string} */
                        child.name = "program" + index;
                    }
                }
            },
            /**
             * @param {Error} child
             * @return {?}
             */
            matchExistingProgram : function(child) {
                /** @type {number} */
                var i = 0;
                var valuesLen = this.context.environments.length;
                for (;i < valuesLen;i++) {
                    var environment = this.context.environments[i];
                    if (environment && environment.equals(child)) {
                        return i;
                    }
                }
            },
            /**
             * @param {string} guid
             * @return {?}
             */
            programExpression : function(guid) {
                var child = this.environment.children[guid];
                var depths = (child.depths.list, this.useDepths);
                /** @type {Array} */
                var tagNameArr = [child.index, "data"];
                return depths && tagNameArr.push("depths"), "this.program(" + tagNameArr.join(", ") + ")";
            },
            /**
             * @param {string} name
             * @return {undefined}
             */
            useRegister : function(name) {
                if (!this.registers[name]) {
                    /** @type {boolean} */
                    this.registers[name] = true;
                    this.registers.list.push(name);
                }
            },
            /**
             * @param {string} value
             * @return {?}
             */
            pushStackLiteral : function(value) {
                return this.push(new HookerOverride(value));
            },
            /**
             * @param {string} value
             * @return {undefined}
             */
            pushSource : function(value) {
                if (this.pendingContent) {
                    this.source.push(this.appendToBuffer(this.quotedString(this.pendingContent)));
                    this.pendingContent = void 0;
                }
                if (value) {
                    this.source.push(value);
                }
            },
            /**
             * @param {?} elems
             * @return {?}
             */
            pushStack : function(elems) {
                this.flushInline();
                var value = this.incrStack();
                return this.pushSource(value + " = " + elems + ";"), this.compileStack.push(value), value;
            },
            /**
             * @param {Function} callback
             * @return {undefined}
             */
            replaceStack : function(callback) {
                var stack;
                var object;
                var e;
                /** @type {string} */
                var list = "";
                this.isInline();
                if (!this.isInline()) {
                    throw new Exception("replaceStack on non-inline");
                }
                var top = this.popStack(true);
                if (top instanceof HookerOverride) {
                    list = stack = top.value;
                    /** @type {boolean} */
                    e = true;
                } else {
                    /** @type {boolean} */
                    object = !this.stackSlot;
                    var value = object ? this.incrStack() : this.topStackName();
                    /** @type {string} */
                    list = "(" + this.push(value) + " = " + top + ")";
                    stack = this.topStack();
                }
                var inStack = callback.call(this, stack);
                if (!e) {
                    this.popStack();
                }
                if (object) {
                    this.stackSlot--;
                }
                this.push("(" + list + inStack + ")");
            },
            /**
             * @return {?}
             */
            incrStack : function() {
                return this.stackSlot++, this.stackSlot > this.stackVars.length && this.stackVars.push("stack" + this.stackSlot), this.topStackName();
            },
            /**
             * @return {?}
             */
            topStackName : function() {
                return "stack" + this.stackSlot;
            },
            /**
             * @return {undefined}
             */
            flushInline : function() {
                var resultItems = this.inlineStack;
                if (resultItems.length) {
                    /** @type {Array} */
                    this.inlineStack = [];
                    /** @type {number} */
                    var i = 0;
                    var valuesLen = resultItems.length;
                    for (;i < valuesLen;i++) {
                        var result = resultItems[i];
                        if (result instanceof HookerOverride) {
                            this.compileStack.push(result);
                        } else {
                            this.pushStack(result);
                        }
                    }
                }
            },
            /**
             * @return {?}
             */
            isInline : function() {
                return this.inlineStack.length;
            },
            /**
             * @param {boolean} dataAndEvents
             * @return {?}
             */
            popStack : function(dataAndEvents) {
                var inline = this.isInline();
                var v = (inline ? this.inlineStack : this.compileStack).pop();
                if (!dataAndEvents && v instanceof HookerOverride) {
                    return v.value;
                }
                if (!inline) {
                    if (!this.stackSlot) {
                        throw new Exception("Invalid stack pop");
                    }
                    this.stackSlot--;
                }
                return v;
            },
            /**
             * @return {?}
             */
            topStack : function() {
                var resultItems = this.isInline() ? this.inlineStack : this.compileStack;
                var result = resultItems[resultItems.length - 1];
                return result instanceof HookerOverride ? result.value : result;
            },
            /**
             * @param {number} recurring
             * @return {?}
             */
            contextName : function(recurring) {
                return this.useDepths && recurring ? "depths[" + recurring + "]" : "depth" + recurring;
            },
            /**
             * @param {string} str
             * @return {?}
             */
            quotedString : function(str) {
                return'"' + str.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029") + '"';
            },
            /**
             * @param {Object} info
             * @return {?}
             */
            objectLiteral : function(info) {
                /** @type {Array} */
                var tagNameArr = [];
                var name;
                for (name in info) {
                    if (info.hasOwnProperty(name)) {
                        tagNameArr.push(this.quotedString(name) + ":" + info[name]);
                    }
                }
                return "{" + tagNameArr.join(",") + "}";
            },
            /**
             * @param {number} paramSize
             * @param {string} name
             * @param {boolean} deepDataAndEvents
             * @return {?}
             */
            setupHelper : function(paramSize, name, deepDataAndEvents) {
                /** @type {Array} */
                var params = [];
                var code = this.setupParams(name, paramSize, params, deepDataAndEvents);
                var foundHelper = this.nameLookup("helpers", name, "helper");
                return{
                    params : params,
                    paramsInit : code,
                    name : foundHelper,
                    callParams : [this.contextName(0)].concat(params).join(", ")
                };
            },
            /**
             * @param {string} name
             * @param {(Function|number)} recurring
             * @param {Array} params
             * @return {?}
             */
            setupOptions : function(name, recurring, params) {
                var param;
                var inverse;
                var program;
                var options = {};
                /** @type {Array} */
                var coordsAsInts = [];
                /** @type {Array} */
                var contexts = [];
                /** @type {Array} */
                var qs = [];
                options.name = this.quotedString(name);
                options.hash = this.popStack();
                if (this.trackIds) {
                    options.hashIds = this.popStack();
                }
                if (this.stringParams) {
                    options.hashTypes = this.popStack();
                    options.hashContexts = this.popStack();
                }
                inverse = this.popStack();
                program = this.popStack();
                if (program || inverse) {
                    if (!program) {
                        /** @type {string} */
                        program = "this.noop";
                    }
                    if (!inverse) {
                        /** @type {string} */
                        inverse = "this.noop";
                    }
                    options.fn = program;
                    options.inverse = inverse;
                }
                /** @type {(Function|number)} */
                var i = recurring;
                for (;i--;) {
                    param = this.popStack();
                    params[i] = param;
                    if (this.trackIds) {
                        qs[i] = this.popStack();
                    }
                    if (this.stringParams) {
                        contexts[i] = this.popStack();
                        coordsAsInts[i] = this.popStack();
                    }
                }
                return this.trackIds && (options.ids = "[" + qs.join(",") + "]"), this.stringParams && (options.types = "[" + contexts.join(",") + "]", options.contexts = "[" + coordsAsInts.join(",") + "]"), this.options.data && (options.data = "data"), options;
            },
            /**
             * @param {string} obj
             * @param {number} recurring
             * @param {Array} params
             * @param {boolean} deepDataAndEvents
             * @return {?}
             */
            setupParams : function(obj, recurring, params, deepDataAndEvents) {
                var options = this.objectLiteral(this.setupOptions(obj, recurring, params));
                return deepDataAndEvents ? (this.useRegister("options"), params.push("options"), "options=" + options) : (params.push(options), "");
            }
        };
        /** @type {Array.<string>} */
        var reservedWords = "break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield".split(" ");
        var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};
        /** @type {number} */
        var i = 0;
        /** @type {number} */
        var l = reservedWords.length;
        for (;i < l;i++) {
            /** @type {boolean} */
            compilerWords[reservedWords[i]] = true;
        }
        return JavaScriptCompiler.isValidJavaScriptVariableName = function(name) {
            return!JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
        }, __exports__ = JavaScriptCompiler;
    }(__module1__, pdataCur);
    var __module0__ = function(args, __dependency2__, __dependency3__, __dependency4__, el) {
        var fn;
        var params = args;
        var AST = __dependency2__;
        var Parser = __dependency3__.parser;
        var parse = __dependency3__.parse;
        var Compiler = __dependency4__.Compiler;
        var compile = __dependency4__.compile;
        var precompile = __dependency4__.precompile;
        var JavaScriptCompiler = el;
        var _create = params.create;
        /**
         * @return {?}
         */
        var create = function() {
            var hb = _create();
            return hb.compile = function(input, options) {
                return compile(input, options, hb);
            }, hb.precompile = function(input, options) {
                return precompile(input, options, hb);
            }, hb.AST = AST, hb.Compiler = Compiler, hb.JavaScriptCompiler = JavaScriptCompiler, hb.Parser = Parser, hb.parse = parse, hb;
        };
        return params = create(), params.create = create, params.default = params, fn = params;
    }(typePattern, __module7__, __module8__, __module10__, failuresLink);
    return __module0__;
}), function(obj, func) {
    if ("object" == typeof module && "object" == typeof module.exports) {
        module.exports = obj.document ? func(obj, true) : function(name) {
            if (!name.document) {
                throw new Error("jQuery requires a window with a document");
            }
            return func(name);
        };
    } else {
        func(obj);
    }
}("undefined" != typeof window ? window : this, function(win, dataAndEvents) {
    /**
     * @param {string} optgroup
     * @return {?}
     */
    function isArraylike(optgroup) {
        var len = optgroup.length;
        var type = jQuery.type(optgroup);
        return "function" !== type && (!jQuery.isWindow(optgroup) && (!(1 !== optgroup.nodeType || !len) || ("array" === type || (0 === len || "number" == typeof len && (len > 0 && len - 1 in optgroup)))));
    }
    /**
     * @param {Function} recurring
     * @param {string} optgroup
     * @param {Object} deepDataAndEvents
     * @return {?}
     */
    function winnow(recurring, optgroup, deepDataAndEvents) {
        if (jQuery.isFunction(optgroup)) {
            return jQuery.grep(recurring, function(opt_obj, mapper) {
                return!!optgroup.call(opt_obj, mapper, opt_obj) !== deepDataAndEvents;
            });
        }
        if (optgroup.nodeType) {
            return jQuery.grep(recurring, function(templateName) {
                return templateName === optgroup !== deepDataAndEvents;
            });
        }
        if ("string" == typeof optgroup) {
            if (rhtml.test(optgroup)) {
                return jQuery.filter(optgroup, recurring, deepDataAndEvents);
            }
            optgroup = jQuery.filter(optgroup, recurring);
        }
        return jQuery.grep(recurring, function(elem) {
            return core_indexOf.call(optgroup, elem) >= 0 !== deepDataAndEvents;
        });
    }
    /**
     * @param {Object} cur
     * @param {string} dir
     * @return {?}
     */
    function sibling(cur, dir) {
        for (;(cur = cur[dir]) && 1 !== cur.nodeType;) {
        }
        return cur;
    }
    /**
     * @param {string} options
     * @return {?}
     */
    function createOptions(options) {
        var buf = optionsCache[options] = {};
        return jQuery.each(options.match(rvar) || [], function(dataAndEvents, off) {
            /** @type {boolean} */
            buf[off] = true;
        }), buf;
    }
    /**
     * @return {undefined}
     */
    function Data() {
        Object.defineProperty(this.cache = {}, 0, {
            /**
             * @return {?}
             */
            get : function() {
                return{};
            }
        });
        this.expando = jQuery.expando + Data.uid++;
    }
    /**
     * @param {string} elem
     * @param {string} camelKey
     * @param {string} data
     * @return {?}
     */
    function dataAttr(elem, camelKey, data) {
        var optgroup;
        if (void 0 === data && 1 === elem.nodeType) {
            if (optgroup = "data-" + camelKey.replace(r20, "-$&").toLowerCase(), data = elem.getAttribute(optgroup), "string" == typeof data) {
                try {
                    data = "true" === data || "false" !== data && ("null" === data ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data);
                } catch (e) {
                }
                data_user.set(elem, camelKey, data);
            } else {
                data = void 0;
            }
        }
        return data;
    }
    /**
     * @return {?}
     */
    function returnTrue() {
        return true;
    }
    /**
     * @return {?}
     */
    function returnFalse() {
        return false;
    }
    /**
     * @return {?}
     */
    function safeActiveElement() {
        try {
            return optgroup.activeElement;
        } catch (a) {
        }
    }
    /**
     * @param {Node} elem
     * @param {Object} content
     * @return {?}
     */
    function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, "table") && jQuery.nodeName(11 !== content.nodeType ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
    }
    /**
     * @param {Element} elem
     * @return {?}
     */
    function recurring(elem) {
        return elem.type = (null !== elem.getAttribute("type")) + "/" + elem.type, elem;
    }
    /**
     * @param {Element} elem
     * @return {?}
     */
    function restoreScript(elem) {
        /** @type {(Array.<string>|null)} */
        var match = rscriptTypeMasked.exec(elem.type);
        return match ? elem.type = match[1] : elem.removeAttribute("type"), elem;
    }
    /**
     * @param {(Array|NodeList)} elems
     * @param {Array} refElements
     * @return {undefined}
     */
    function setGlobalEval(elems, refElements) {
        /** @type {number} */
        var i = 0;
        var length = elems.length;
        for (;i < length;i++) {
            data_priv.set(elems[i], "globalEval", !refElements || data_priv.get(refElements[i], "globalEval"));
        }
    }
    /**
     * @param {string} src
     * @param {string} dest
     * @return {undefined}
     */
    function cloneCopyEvent(src, dest) {
        var i;
        var valsLength;
        var type;
        var pdataOld;
        var pdataCur;
        var udataOld;
        var udataCur;
        var events;
        if (1 === dest.nodeType) {
            if (data_priv.hasData(src) && (pdataOld = data_priv.access(src), pdataCur = data_priv.set(dest, pdataOld), events = pdataOld.events)) {
                delete pdataCur.handle;
                pdataCur.events = {};
                for (type in events) {
                    /** @type {number} */
                    i = 0;
                    valsLength = events[type].length;
                    for (;i < valsLength;i++) {
                        jQuery.event.add(dest, type, events[type][i]);
                    }
                }
            }
            if (data_user.hasData(src)) {
                udataOld = data_user.access(src);
                udataCur = jQuery.extend({}, udataOld);
                data_user.set(dest, udataCur);
            }
        }
    }
    /**
     * @param {Node} context
     * @param {string} tag
     * @return {?}
     */
    function getAll(context, tag) {
        var ret = "undefined" != typeof context.getElementsByTagName ? context.getElementsByTagName(tag || "*") : "undefined" != typeof context.querySelectorAll ? context.querySelectorAll(tag || "*") : [];
        return void 0 === tag || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
    }
    /**
     * @param {Element} src
     * @param {Element} dest
     * @return {undefined}
     */
    function fixInput(src, dest) {
        var _undefined = dest.nodeName.toLowerCase();
        if ("input" === _undefined && manipulation_rcheckableType.test(src.type)) {
            dest.checked = src.checked;
        } else {
            if (!("input" !== _undefined && "textarea" !== _undefined)) {
                dest.defaultValue = src.defaultValue;
            }
        }
    }
    /**
     * @param {string} name
     * @param {Document} doc
     * @return {?}
     */
    function actualDisplay(name, doc) {
        var el = jQuery(doc.createElement(name)).appendTo(doc.body);
        var displayStyle = jQuery.css(el[0], "display");
        return el.detach(), displayStyle;
    }
    /**
     * @param {string} nodeName
     * @return {?}
     */
    function defaultDisplay(nodeName) {
        var doc = optgroup;
        var display = elemdisplay[nodeName];
        return display || (display = actualDisplay(nodeName, doc), "none" !== display && display || (iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement), doc = iframe[0].contentDocument, doc.write(), doc.close(), display = actualDisplay(nodeName, doc), iframe.detach()), elemdisplay[nodeName] = display), display;
    }
    /**
     * @param {Object} elem
     * @param {string} prop
     * @param {Object} computed
     * @return {?}
     */
    function curCSS(elem, prop, computed) {
        var val;
        return computed = computed || getStyles(elem), computed && (val = computed.getPropertyValue(prop) || computed[prop]), computed && ("" !== val || (jQuery.contains(elem.ownerDocument, elem) || (val = jQuery.style(elem, prop)))), void 0 !== val ? val + "" : val;
    }
    /**
     * @param {?} $timeout
     * @param {Function} hookFn
     * @return {?}
     */
    function addGetHookIf($timeout, hookFn) {
        return{
            /**
             * @return {?}
             */
            get : function() {
                return $timeout() ? void delete this.get : (this.get = hookFn).apply(this, arguments);
            }
        };
    }
    /**
     * @param {Object} style
     * @param {string} name
     * @return {?}
     */
    function vendorPropName(style, name) {
        if (name in style) {
            return name;
        }
        var capitalized = name[0].toUpperCase() + name.slice(1);
        /** @type {string} */
        var origName = name;
        /** @type {number} */
        var length = VENDOR_PREFIXES.length;
        for (;length--;) {
            if (name = VENDOR_PREFIXES[length] + capitalized, name in style) {
                return name;
            }
        }
        return origName;
    }
    /**
     * @param {string} elem
     * @param {string} value
     * @param {string} actual
     * @return {?}
     */
    function setPositiveNumber(elem, value, actual) {
        /** @type {(Array.<string>|null)} */
        var iterator = rrelNum.exec(value);
        return iterator ? Math.max(0, iterator[1] - (actual || 0)) + (iterator[2] || "px") : value;
    }
    /**
     * @param {string} el
     * @param {string} keepData
     * @param {string} extra
     * @param {boolean} isBorderBox
     * @param {?} styles
     * @return {?}
     */
    function augmentWidthOrHeight(el, keepData, extra, isBorderBox, styles) {
        /** @type {number} */
        var i = extra === (isBorderBox ? "border" : "content") ? 4 : "width" === keepData ? 1 : 0;
        /** @type {number} */
        var val = 0;
        for (;i < 4;i += 2) {
            if ("margin" === extra) {
                val += jQuery.css(el, extra + cssExpand[i], true, styles);
            }
            if (isBorderBox) {
                if ("content" === extra) {
                    val -= jQuery.css(el, "padding" + cssExpand[i], true, styles);
                }
                if ("margin" !== extra) {
                    val -= jQuery.css(el, "border" + cssExpand[i] + "Width", true, styles);
                }
            } else {
                val += jQuery.css(el, "padding" + cssExpand[i], true, styles);
                if ("padding" !== extra) {
                    val += jQuery.css(el, "border" + cssExpand[i] + "Width", true, styles);
                }
            }
        }
        return val;
    }
    /**
     * @param {Object} elem
     * @param {string} name
     * @param {string} extra
     * @return {?}
     */
    function getWidthOrHeight(elem, name, extra) {
        /** @type {boolean} */
        var valueIsBorderBox = true;
        var val = "width" === name ? elem.offsetWidth : elem.offsetHeight;
        var styles = getStyles(elem);
        /** @type {boolean} */
        var isBorderBox = "border-box" === jQuery.css(elem, "boxSizing", false, styles);
        if (val <= 0 || null == val) {
            if (val = curCSS(elem, name, styles), (val < 0 || null == val) && (val = elem.style[name]), regexp.test(val)) {
                return val;
            }
            valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
            /** @type {number} */
            val = parseFloat(val) || 0;
        }
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
    }
    /**
     * @param {Array} elements
     * @param {boolean} show
     * @return {?}
     */
    function showHide(elements, show) {
        var display;
        var elem;
        var hidden;
        /** @type {Array} */
        var values = [];
        /** @type {number} */
        var index = 0;
        var length = elements.length;
        for (;index < length;index++) {
            elem = elements[index];
            if (elem.style) {
                values[index] = data_priv.get(elem, "olddisplay");
                display = elem.style.display;
                if (show) {
                    if (!values[index]) {
                        if (!("none" !== display)) {
                            /** @type {string} */
                            elem.style.display = "";
                        }
                    }
                    if ("" === elem.style.display) {
                        if (isHidden(elem)) {
                            values[index] = data_priv.access(elem, "olddisplay", defaultDisplay(elem.nodeName));
                        }
                    }
                } else {
                    hidden = isHidden(elem);
                    if (!("none" === display && hidden)) {
                        data_priv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
                    }
                }
            }
        }
        /** @type {number} */
        index = 0;
        for (;index < length;index++) {
            elem = elements[index];
            if (elem.style) {
                if (!(show && ("none" !== elem.style.display && "" !== elem.style.display))) {
                    elem.style.display = show ? values[index] || "" : "none";
                }
            }
        }
        return elements;
    }
    /**
     * @param {string} prefix
     * @param {string} optgroup
     * @param {boolean} traditional
     * @param {Function} add
     * @return {undefined}
     */
    function buildParams(prefix, optgroup, traditional, add) {
        var name;
        if (jQuery.isArray(optgroup)) {
            jQuery.each(optgroup, function(i, v) {
                if (traditional || rbracket.test(prefix)) {
                    add(prefix, v);
                } else {
                    buildParams(prefix + "[" + ("object" == typeof v ? i : "") + "]", v, traditional, add);
                }
            });
        } else {
            if (traditional || "object" !== jQuery.type(optgroup)) {
                add(prefix, optgroup);
            } else {
                for (name in optgroup) {
                    buildParams(prefix + "[" + name + "]", optgroup[name], traditional, add);
                }
            }
        }
    }
    /**
     * @param {Object} element
     * @return {?}
     */
    function getWindow(element) {
        return jQuery.isWindow(element) ? element : 9 === element.nodeType && element.defaultView;
    }
    /** @type {Array} */
    var core_deletedIds = [];
    var optgroup = win.document;
    /** @type {function (this:(Array.<T>|string|{length: number}), *=, *=): Array.<T>} */
    var core_slice = core_deletedIds.slice;
    /** @type {function (this:*, ...[*]): Array} */
    var core_concat = core_deletedIds.concat;
    /** @type {function (this:(Array.<T>|{length: number}), ...[T]): number} */
    var core_push = core_deletedIds.push;
    /** @type {function (this:(Array.<T>|string|{length: number}), T, number=): number} */
    var core_indexOf = core_deletedIds.indexOf;
    var class2type = {};
    /** @type {function (this:*): string} */
    var core_toString = class2type.toString;
    /** @type {function (this:Object, *): boolean} */
    var core_hasOwn = class2type.hasOwnProperty;
    var support = {};
    /** @type {string} */
    var core_version = "3.0.0-pre -deferred,-ajax,-ajax/jsonp,-ajax/load,-ajax/parseJSON,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/Tween,-effects/animatedSelector,-core/ready,-deprecated,-exports/amd";
    /**
     * @param {string} name
     * @param {Function} recurring
     * @return {?}
     */
    var jQuery = function(name, recurring) {
        return new jQuery.fn.init(name, recurring);
    };
    /** @type {RegExp} */
    var badChars = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
    /** @type {RegExp} */
    var rmsPrefix = /^-ms-/;
    /** @type {RegExp} */
    var emptyParagraphRegexp = /-([\da-z])/gi;
    /**
     * @param {?} all
     * @param {string} letter
     * @return {?}
     */
    var fcamelCase = function(all, letter) {
        return letter.toUpperCase();
    };
    jQuery.fn = jQuery.prototype = {
        jquery : core_version,
        /** @type {function (string, Function): ?} */
        constructor : jQuery,
        selector : "",
        length : 0,
        /**
         * @return {?}
         */
        toArray : function() {
            return core_slice.call(this);
        },
        /**
         * @param {string} elem
         * @return {?}
         */
        get : function(elem) {
            return null != elem ? elem < 0 ? this[elem + this.length] : this[elem] : core_slice.call(this);
        },
        /**
         * @param {?} elems
         * @return {?}
         */
        pushStack : function(elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            return ret.prevObject = this, ret.context = this.context, ret;
        },
        /**
         * @param {Function} opt_attributes
         * @param {Function} args
         * @return {?}
         */
        each : function(opt_attributes, args) {
            return jQuery.each(this, opt_attributes, args);
        },
        /**
         * @param {string} name
         * @return {?}
         */
        map : function(name) {
            return this.pushStack(jQuery.map(this, function(element, loc) {
                return name.call(element, loc, element);
            }));
        },
        /**
         * @return {?}
         */
        slice : function() {
            return this.pushStack(core_slice.apply(this, arguments));
        },
        /**
         * @return {?}
         */
        first : function() {
            return this.eq(0);
        },
        /**
         * @return {?}
         */
        last : function() {
            return this.eq(-1);
        },
        /**
         * @param {number} i
         * @return {?}
         */
        eq : function(i) {
            var len = this.length;
            var j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        /**
         * @return {?}
         */
        end : function() {
            return this.prevObject || this.constructor(null);
        },
        /** @type {function (this:(Array.<T>|{length: number}), ...[T]): number} */
        push : core_push,
        /** @type {function (this:(Array.<T>|{length: number}), function (T, T): number=): ?} */
        sort : core_deletedIds.sort,
        /** @type {function (this:(Array.<T>|{length: number}), *=, *=, ...[T]): Array.<T>} */
        splice : core_deletedIds.splice
    };
    /** @type {function (): ?} */
    jQuery.extend = jQuery.fn.extend = function() {
        var options;
        var name;
        var src;
        var copy;
        var copyIsArray;
        var clone;
        var target = arguments[0] || {};
        /** @type {number} */
        var i = 1;
        /** @type {number} */
        var l = arguments.length;
        /** @type {boolean} */
        var deep = false;
        if ("boolean" == typeof target) {
            /** @type {boolean} */
            deep = target;
            target = arguments[i] || {};
            i++;
        }
        if (!("object" == typeof target)) {
            if (!jQuery.isFunction(target)) {
                target = {};
            }
        }
        if (i === l) {
            target = this;
            i--;
        }
        for (;i < l;i++) {
            if (null != (options = arguments[i])) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target !== copy) {
                        if (deep && (copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy))))) {
                            if (copyIsArray) {
                                /** @type {boolean} */
                                copyIsArray = false;
                                clone = src && jQuery.isArray(src) ? src : [];
                            } else {
                                clone = src && jQuery.isPlainObject(src) ? src : {};
                            }
                            target[name] = jQuery.extend(deep, clone, copy);
                        } else {
                            if (void 0 !== copy) {
                                target[name] = copy;
                            }
                        }
                    }
                }
            }
        }
        return target;
    };
    jQuery.extend({
        expando : "jQuery" + (core_version + Math.random()).replace(/\D/g, ""),
        isReady : true,
        /**
         * @param {string} name
         * @return {?}
         */
        error : function(name) {
            throw new Error(name);
        },
        /**
         * @return {undefined}
         */
        noop : function() {
        },
        /**
         * @param {string} optgroup
         * @return {?}
         */
        isFunction : function(optgroup) {
            return "function" === jQuery.type(optgroup);
        },
        /** @type {function (*): boolean} */
        isArray : Array.isArray,
        /**
         * @param {string} obj
         * @return {?}
         */
        isWindow : function(obj) {
            return null != obj && obj === obj.window;
        },
        /**
         * @param {string} obj
         * @return {?}
         */
        isNumeric : function(obj) {
            return!jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;
        },
        /**
         * @param {string} optgroup
         * @return {?}
         */
        isPlainObject : function(optgroup) {
            return "object" === jQuery.type(optgroup) && (!optgroup.nodeType && (!jQuery.isWindow(optgroup) && !(optgroup.constructor && !core_hasOwn.call(optgroup.constructor.prototype, "isPrototypeOf"))));
        },
        /**
         * @param {?} obj
         * @return {?}
         */
        isEmptyObject : function(obj) {
            var prop;
            for (prop in obj) {
                return false;
            }
            return true;
        },
        /**
         * @param {string} name
         * @return {?}
         */
        type : function(name) {
            return null == name ? name + "" : "object" == typeof name || "function" == typeof name ? class2type[core_toString.call(name)] || "object" : typeof name;
        },
        /**
         * @param {?} data
         * @return {undefined}
         */
        globalEval : function(data) {
            var script = optgroup.createElement("script");
            script.text = data;
            optgroup.head.appendChild(script).parentNode.removeChild(script);
        },
        /**
         * @param {string} string
         * @return {?}
         */
        camelCase : function(string) {
            return string.replace(rmsPrefix, "ms-").replace(emptyParagraphRegexp, fcamelCase);
        },
        /**
         * @param {Node} elem
         * @param {string} name
         * @return {?}
         */
        nodeName : function(elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
        /**
         * @param {Function} obj
         * @param {Function} callback
         * @param {Object} args
         * @return {?}
         */
        each : function(obj, callback, args) {
            /** @type {number} */
            var i = 0;
            var l = obj.length;
            var isArray = isArraylike(obj);
            if (args) {
                if (isArray) {
                    for (;i < l && callback.apply(obj[i], args) !== false;i++) {
                    }
                } else {
                    for (i in obj) {
                        if (callback.apply(obj[i], args) === false) {
                            break;
                        }
                    }
                }
            } else {
                if (isArray) {
                    for (;i < l && callback.call(obj[i], i, obj[i]) !== false;i++) {
                    }
                } else {
                    for (i in obj) {
                        if (callback.call(obj[i], i, obj[i]) === false) {
                            break;
                        }
                    }
                }
            }
            return obj;
        },
        /**
         * @param {(number|string)} text
         * @return {?}
         */
        trim : function(text) {
            return null == text ? "" : (text + "").replace(badChars, "");
        },
        /**
         * @param {?} arr
         * @param {Array} results
         * @return {?}
         */
        makeArray : function(arr, results) {
            var ret = results || [];
            return null != arr && (isArraylike(Object(arr)) ? jQuery.merge(ret, "string" == typeof arr ? [arr] : arr) : core_push.call(ret, arr)), ret;
        },
        /**
         * @param {?} elem
         * @param {?} arr
         * @param {?} i
         * @return {?}
         */
        inArray : function(elem, arr, i) {
            return null == arr ? -1 : core_indexOf.call(arr, elem, i);
        },
        /**
         * @param {Array} first
         * @param {?} second
         * @return {?}
         */
        merge : function(first, second) {
            /** @type {number} */
            var subLn = +second.length;
            /** @type {number} */
            var j = 0;
            var i = first.length;
            for (;j < subLn;j++) {
                first[i++] = second[j];
            }
            return first.length = i, first;
        },
        /**
         * @param {Array} elems
         * @param {Function} callback
         * @param {?} inv
         * @return {?}
         */
        grep : function(elems, callback, inv) {
            var val;
            /** @type {Array} */
            var ret = [];
            /** @type {number} */
            var i = 0;
            var length = elems.length;
            /** @type {boolean} */
            var skip = !inv;
            for (;i < length;i++) {
                /** @type {boolean} */
                val = !callback(elems[i], i);
                if (val !== skip) {
                    ret.push(elems[i]);
                }
            }
            return ret;
        },
        /**
         * @param {string} name
         * @param {Function} recurring
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        map : function(name, recurring, deepDataAndEvents) {
            var value;
            /** @type {number} */
            var i = 0;
            var valuesLen = name.length;
            var isArray = isArraylike(name);
            /** @type {Array} */
            var args = [];
            if (isArray) {
                for (;i < valuesLen;i++) {
                    value = recurring(name[i], i, deepDataAndEvents);
                    if (null != value) {
                        args.push(value);
                    }
                }
            } else {
                for (i in name) {
                    value = recurring(name[i], i, deepDataAndEvents);
                    if (null != value) {
                        args.push(value);
                    }
                }
            }
            return core_concat.apply([], args);
        },
        guid : 1,
        /**
         * @param {Object} fn
         * @param {Object} context
         * @return {?}
         */
        proxy : function(fn, context) {
            var tmp;
            var args;
            var proxy;
            if ("string" == typeof context && (tmp = fn[context], context = fn, fn = tmp), jQuery.isFunction(fn)) {
                return args = core_slice.call(arguments, 2), proxy = function() {
                    return fn.apply(context || this, args.concat(core_slice.call(arguments)));
                }, proxy.guid = fn.guid = fn.guid || jQuery.guid++, proxy;
            }
        },
        /** @type {function (): number} */
        now : Date.now,
        support : support
    });
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(dataAndEvents, m3) {
        class2type["[object " + m3 + "]"] = m3.toLowerCase();
    });
    var Sizzle = function(win) {
        /**
         * @param {string} selector
         * @param {Node} context
         * @param {Array} results
         * @param {Array} seed
         * @return {?}
         */
        function Sizzle(selector, context, results, seed) {
            var match;
            var elem;
            var m;
            var type;
            var i;
            var groups;
            var old;
            var nid;
            var newContext;
            var optgroup;
            if ((context ? context.ownerDocument || context : preferredDoc) !== doc && setDocument(context), context = context || doc, results = results || [], !selector || "string" != typeof selector) {
                return results;
            }
            if (1 !== (type = context.nodeType) && (9 !== type && 11 !== type)) {
                return[];
            }
            if (documentIsHTML && !seed) {
                if (11 !== type && (match = rquickExpr.exec(selector))) {
                    if (m = match[1]) {
                        if (9 === type) {
                            if (elem = context.getElementById(m), !elem || !elem.parentNode) {
                                return results;
                            }
                            if (elem.id === m) {
                                return results.push(elem), results;
                            }
                        } else {
                            if (context.ownerDocument && ((elem = context.ownerDocument.getElementById(m)) && (contains(context, elem) && elem.id === m))) {
                                return results.push(elem), results;
                            }
                        }
                    } else {
                        if (match[2]) {
                            return push.apply(results, context.getElementsByTagName(selector)), results;
                        }
                        if ((m = match[3]) && support.getElementsByClassName) {
                            return push.apply(results, context.getElementsByClassName(m)), results;
                        }
                    }
                }
                if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                    if (nid = old = expando, newContext = context, optgroup = 1 !== type && selector, 1 === type && "object" !== context.nodeName.toLowerCase()) {
                        groups = tokenize(selector);
                        if (old = context.getAttribute("id")) {
                            nid = old.replace(r20, "\\$&");
                        } else {
                            context.setAttribute("id", nid);
                        }
                        /** @type {string} */
                        nid = "[id='" + nid + "'] ";
                        i = groups.length;
                        for (;i--;) {
                            /** @type {string} */
                            groups[i] = nid + toSelector(groups[i]);
                        }
                        newContext = namespace.test(selector) && testContext(context.parentNode) || context;
                        optgroup = groups.join(",");
                    }
                    if (optgroup) {
                        try {
                            return push.apply(results, newContext.querySelectorAll(optgroup)), results;
                        } catch (q) {
                        } finally {
                            if (!old) {
                                context.removeAttribute("id");
                            }
                        }
                    }
                }
            }
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        /**
         * @return {?}
         */
        function createCache() {
            /**
             * @param {string} key
             * @param {?} value
             * @return {?}
             */
            function cache(key, value) {
                return buf.push(key + " ") > Expr.cacheLength && delete cache[buf.shift()], cache[key + " "] = value;
            }
            /** @type {Array} */
            var buf = [];
            return cache;
        }
        /**
         * @param {Object} fn
         * @return {?}
         */
        function markFunction(fn) {
            return fn[expando] = true, fn;
        }
        /**
         * @param {Function} fn
         * @return {?}
         */
        function assert(fn) {
            var t = doc.createElement("div");
            try {
                return!!fn(t);
            } catch (c) {
                return false;
            } finally {
                if (t.parentNode) {
                    t.parentNode.removeChild(t);
                }
                /** @type {null} */
                t = null;
            }
        }
        /**
         * @param {string} attrs
         * @param {Function} handler
         * @return {undefined}
         */
        function addHandle(attrs, handler) {
            var arr = attrs.split("|");
            var i = attrs.length;
            for (;i--;) {
                /** @type {Function} */
                Expr.attrHandle[arr[i]] = handler;
            }
        }
        /**
         * @param {Object} a
         * @param {Object} b
         * @return {?}
         */
        function siblingCheck(a, b) {
            var cur = b && a;
            var diff = cur && (1 === a.nodeType && (1 === b.nodeType && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE)));
            if (diff) {
                return diff;
            }
            if (cur) {
                for (;cur = cur.nextSibling;) {
                    if (cur === b) {
                        return-1;
                    }
                }
            }
            return a ? 1 : -1;
        }
        /**
         * @param {?} type
         * @return {?}
         */
        function createInputPseudo(type) {
            return function(elem) {
                var b = elem.nodeName.toLowerCase();
                return "input" === b && elem.type === type;
            };
        }
        /**
         * @param {?} type
         * @return {?}
         */
        function createButtonPseudo(type) {
            return function(elem) {
                var NULL = elem.nodeName.toLowerCase();
                return("input" === NULL || "button" === NULL) && elem.type === type;
            };
        }
        /**
         * @param {Function} fn
         * @return {?}
         */
        function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
                return argument = +argument, markFunction(function(seed, matches) {
                    var j;
                    var matchIndexes = fn([], seed.length, argument);
                    var i = matchIndexes.length;
                    for (;i--;) {
                        if (seed[j = matchIndexes[i]]) {
                            /** @type {boolean} */
                            seed[j] = !(matches[j] = seed[j]);
                        }
                    }
                });
            });
        }
        /**
         * @param {Object} context
         * @return {?}
         */
        function testContext(context) {
            return context && ("undefined" != typeof context.getElementsByTagName && context);
        }
        /**
         * @return {undefined}
         */
        function setFilters() {
        }
        /**
         * @param {Array} tokens
         * @return {?}
         */
        function toSelector(tokens) {
            /** @type {number} */
            var ti = 0;
            var nTokens = tokens.length;
            /** @type {string} */
            var selector = "";
            for (;ti < nTokens;ti++) {
                selector += tokens[ti].value;
            }
            return selector;
        }
        /**
         * @param {Function} matcher
         * @param {Object} combinator
         * @param {boolean} dataAndEvents
         * @return {?}
         */
        function addCombinator(matcher, combinator, dataAndEvents) {
            var dir = combinator.dir;
            var e = dataAndEvents && "parentNode" === dir;
            /** @type {number} */
            var doneName = done++;
            return combinator.first ? function(elem, context, xml) {
                for (;elem = elem[dir];) {
                    if (1 === elem.nodeType || e) {
                        return matcher(elem, context, xml);
                    }
                }
            } : function(elem, context, xml) {
                var oldCache;
                var outerCache;
                /** @type {Array} */
                var newCache = [dirruns, doneName];
                if (xml) {
                    for (;elem = elem[dir];) {
                        if ((1 === elem.nodeType || e) && matcher(elem, context, xml)) {
                            return true;
                        }
                    }
                } else {
                    for (;elem = elem[dir];) {
                        if (1 === elem.nodeType || e) {
                            if (outerCache = elem[expando] || (elem[expando] = {}), (oldCache = outerCache[dir]) && (oldCache[0] === dirruns && oldCache[1] === doneName)) {
                                return newCache[2] = oldCache[2];
                            }
                            if (outerCache[dir] = newCache, newCache[2] = matcher(elem, context, xml)) {
                                return true;
                            }
                        }
                    }
                }
            };
        }
        /**
         * @param {Object} matchers
         * @return {?}
         */
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context, xml) {
                var i = matchers.length;
                for (;i--;) {
                    if (!matchers[i](elem, context, xml)) {
                        return false;
                    }
                }
                return true;
            } : matchers[0];
        }
        /**
         * @param {string} selector
         * @param {Array} contexts
         * @param {?} results
         * @return {?}
         */
        function multipleContexts(selector, contexts, results) {
            /** @type {number} */
            var i = 0;
            var len = contexts.length;
            for (;i < len;i++) {
                Sizzle(selector, contexts[i], results);
            }
            return results;
        }
        /**
         * @param {Array} unmatched
         * @param {Object} map
         * @param {boolean} filter
         * @param {Object} deepDataAndEvents
         * @param {Object} dataAndEvents
         * @return {?}
         */
        function condense(unmatched, map, filter, deepDataAndEvents, dataAndEvents) {
            var value;
            /** @type {Array} */
            var bucket = [];
            /** @type {number} */
            var i = 0;
            var len = unmatched.length;
            /** @type {boolean} */
            var j = null != map;
            for (;i < len;i++) {
                if (value = unmatched[i]) {
                    if (!(filter && !filter(value, deepDataAndEvents, dataAndEvents))) {
                        bucket.push(value);
                        if (j) {
                            map.push(i);
                        }
                    }
                }
            }
            return bucket;
        }
        /**
         * @param {Object} preFilter
         * @param {string} selector
         * @param {boolean} matcher
         * @param {Object} postFilter
         * @param {Object} postFinder
         * @param {string} postSelector
         * @return {?}
         */
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            return postFilter && (!postFilter[expando] && (postFilter = setMatcher(postFilter))), postFinder && (!postFinder[expando] && (postFinder = setMatcher(postFinder, postSelector))), markFunction(function(seed, recurring, deepDataAndEvents, dataAndEvents) {
                var optgroup;
                var i;
                var elem;
                /** @type {Array} */
                var preMap = [];
                /** @type {Array} */
                var postMap = [];
                var preexisting = recurring.length;
                var elems = seed || multipleContexts(selector || "*", deepDataAndEvents.nodeType ? [deepDataAndEvents] : deepDataAndEvents, []);
                var matcherIn = !preFilter || !seed && selector ? elems : condense(elems, preMap, preFilter, deepDataAndEvents, dataAndEvents);
                var matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : recurring : matcherIn;
                if (matcher && matcher(matcherIn, matcherOut, deepDataAndEvents, dataAndEvents), postFilter) {
                    optgroup = condense(matcherOut, postMap);
                    postFilter(optgroup, [], deepDataAndEvents, dataAndEvents);
                    i = optgroup.length;
                    for (;i--;) {
                        if (elem = optgroup[i]) {
                            /** @type {boolean} */
                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                        }
                    }
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            /** @type {Array} */
                            optgroup = [];
                            i = matcherOut.length;
                            for (;i--;) {
                                if (elem = matcherOut[i]) {
                                    optgroup.push(matcherIn[i] = elem);
                                }
                            }
                            postFinder(null, matcherOut = [], optgroup, dataAndEvents);
                        }
                        i = matcherOut.length;
                        for (;i--;) {
                            if (elem = matcherOut[i]) {
                                if ((optgroup = postFinder ? getDistance(seed, elem) : preMap[i]) > -1) {
                                    /** @type {boolean} */
                                    seed[optgroup] = !(recurring[optgroup] = elem);
                                }
                            }
                        }
                    }
                } else {
                    matcherOut = condense(matcherOut === recurring ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) {
                        postFinder(null, recurring, matcherOut, dataAndEvents);
                    } else {
                        push.apply(recurring, matcherOut);
                    }
                }
            });
        }
        /**
         * @param {Object} tokens
         * @return {?}
         */
        function matcherFromTokens(tokens) {
            var target;
            var matcher;
            var j;
            var len = tokens.length;
            var leadingRelative = Expr.relative[tokens[0].type];
            var implicitRelative = leadingRelative || Expr.relative[" "];
            /** @type {number} */
            var i = leadingRelative ? 1 : 0;
            var matchContext = addCombinator(function(value) {
                return value === target;
            }, implicitRelative, true);
            var matchAnyContext = addCombinator(function(walkers) {
                return getDistance(target, walkers) > -1;
            }, implicitRelative, true);
            /** @type {Array} */
            var matchers = [function(elem, context, xml) {
                var e = !leadingRelative && (xml || context !== outermostContext) || ((target = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                return target = null, e;
            }];
            for (;i < len;i++) {
                if (matcher = Expr.relative[tokens[i].type]) {
                    /** @type {Array} */
                    matchers = [addCombinator(elementMatcher(matchers), matcher)];
                } else {
                    if (matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches), matcher[expando]) {
                        /** @type {number} */
                        j = ++i;
                        for (;j < len && !Expr.relative[tokens[j].type];j++) {
                        }
                        return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({
                            value : " " === tokens[i - 2].type ? "*" : ""
                        })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                    }
                    matchers.push(matcher);
                }
            }
            return elementMatcher(matchers);
        }
        /**
         * @param {Array} elementMatchers
         * @param {Array} setMatchers
         * @return {?}
         */
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            /** @type {boolean} */
            var bySet = setMatchers.length > 0;
            /** @type {boolean} */
            var isMatch = elementMatchers.length > 0;
            /**
             * @param {HTMLElement} opt_values
             * @param {string} context
             * @param {?} xml
             * @param {Object} results
             * @param {Element} record
             * @return {?}
             */
            var superMatcher = function(opt_values, context, xml, results, record) {
                var value;
                var j;
                var matcher;
                /** @type {number} */
                var matchedCount = 0;
                /** @type {string} */
                var i = "0";
                var bucket = opt_values && [];
                /** @type {Array} */
                var setMatched = [];
                var contextBackup = outermostContext;
                var values = opt_values || isMatch && Expr.find.TAG("*", record);
                var dirrunsUnique = dirruns += null == contextBackup ? 1 : Math.random() || 0.1;
                var len = values.length;
                if (record) {
                    outermostContext = context !== doc && context;
                }
                for (;i !== len && null != (value = values[i]);i++) {
                    if (isMatch && value) {
                        /** @type {number} */
                        j = 0;
                        for (;matcher = elementMatchers[j++];) {
                            if (matcher(value, context, xml)) {
                                results.push(value);
                                break;
                            }
                        }
                        if (record) {
                            dirruns = dirrunsUnique;
                        }
                    }
                    if (bySet) {
                        if (value = !matcher && value) {
                            matchedCount--;
                        }
                        if (opt_values) {
                            bucket.push(value);
                        }
                    }
                }
                if (matchedCount += i, bySet && i !== matchedCount) {
                    /** @type {number} */
                    j = 0;
                    for (;matcher = setMatchers[j++];) {
                        matcher(bucket, setMatched, context, xml);
                    }
                    if (opt_values) {
                        if (matchedCount > 0) {
                            for (;i--;) {
                                if (!bucket[i]) {
                                    if (!setMatched[i]) {
                                        setMatched[i] = pop.call(results);
                                    }
                                }
                            }
                        }
                        setMatched = condense(setMatched);
                    }
                    push.apply(results, setMatched);
                    if (record) {
                        if (!opt_values) {
                            if (setMatched.length > 0) {
                                if (matchedCount + setMatchers.length > 1) {
                                    Sizzle.uniqueSort(results);
                                }
                            }
                        }
                    }
                }
                return record && (dirruns = dirrunsUnique, outermostContext = contextBackup), bucket;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        var i;
        var support;
        var Expr;
        var getText;
        var objectToString;
        var tokenize;
        var compile;
        var select;
        var outermostContext;
        var sortInput;
        var E;
        var setDocument;
        var doc;
        var docElem;
        var documentIsHTML;
        var rbuggyQSA;
        var rbuggyMatches;
        var matches;
        var contains;
        /** @type {string} */
        var expando = "sizzle" + 1 * new Date;
        var preferredDoc = win.document;
        /** @type {number} */
        var dirruns = 0;
        /** @type {number} */
        var done = 0;
        var classCache = createCache();
        var tokenCache = createCache();
        var compilerCache = createCache();
        /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        var sortOrder = function(a, b) {
            return a === b && (E = true), 0;
        };
        /** @type {number} */
        var MAX_NEGATIVE = 1 << 31;
        /** @type {function (this:Object, *): boolean} */
        var hasOwn = {}.hasOwnProperty;
        /** @type {Array} */
        var arr = [];
        /** @type {function (this:(Array.<T>|{length: number})): T} */
        var pop = arr.pop;
        /** @type {function (this:(Array.<T>|{length: number}), ...[T]): number} */
        var fn = arr.push;
        /** @type {function (this:(Array.<T>|{length: number}), ...[T]): number} */
        var push = arr.push;
        /** @type {function (this:(Array.<T>|string|{length: number}), *=, *=): Array.<T>} */
        var slice = arr.slice;
        /**
         * @param {Array} a
         * @param {Object} obj
         * @return {?}
         */
        var getDistance = function(a, obj) {
            /** @type {number} */
            var i = 0;
            var aLength = a.length;
            for (;i < aLength;i++) {
                if (a[i] === obj) {
                    return i;
                }
            }
            return-1;
        };
        /** @type {string} */
        var booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped";
        /** @type {string} */
        var whitespace = "[\\x20\\t\\r\\n\\f]";
        /** @type {string} */
        var ele = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+";
        /** @type {string} */
        var attributes = "\\[" + whitespace + "*(" + ele + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + ele + "))|)" + whitespace + "*\\]";
        /** @type {string} */
        var pseudos = ":(" + ele + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|.*)\\)|)";
        /** @type {RegExp} */
        var rclass = new RegExp(whitespace + "+", "g");
        /** @type {RegExp} */
        var rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g");
        /** @type {RegExp} */
        var rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*");
        /** @type {RegExp} */
        var rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*");
        /** @type {RegExp} */
        var rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g");
        /** @type {RegExp} */
        var rpseudo = new RegExp(pseudos);
        /** @type {RegExp} */
        var ridentifier = new RegExp("^" + ele + "$");
        var matchExpr = {
            ID : new RegExp("^#(" + ele + ")"),
            CLASS : new RegExp("^\\.(" + ele + ")"),
            TAG : new RegExp("^(" + ele + "|[*])"),
            ATTR : new RegExp("^" + attributes),
            PSEUDO : new RegExp("^" + pseudos),
            CHILD : new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
            bool : new RegExp("^(?:" + booleans + ")$", "i"),
            needsContext : new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        };
        /** @type {RegExp} */
        var rinputs = /^(?:input|select|textarea|button)$/i;
        /** @type {RegExp} */
        var rchecked = /^h\d$/i;
        /** @type {RegExp} */
        var rnative = /^[^{]+\{\s*\[native \w/;
        /** @type {RegExp} */
        var rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/;
        /** @type {RegExp} */
        var namespace = /[+~]/;
        /** @type {RegExp} */
        var r20 = /'|\\/g;
        /** @type {RegExp} */
        var runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig");
        /**
         * @param {?} _
         * @param {(number|string)} escaped
         * @param {boolean} escapedWhitespace
         * @return {?}
         */
        var funescape = function(_, escaped, escapedWhitespace) {
            /** @type {number} */
            var high = "0x" + escaped - 65536;
            return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, 1023 & high | 56320);
        };
        /**
         * @return {undefined}
         */
        var recurring = function() {
            setDocument();
        };
        try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (xa) {
            push = {
                /** @type {function (?, ?): undefined} */
                apply : arr.length ? function(collection, args) {
                    fn.apply(collection, slice.call(args));
                } : function(collection, args) {
                    var index = collection.length;
                    /** @type {number} */
                    var i = 0;
                    for (;collection[index++] = args[i++];) {
                    }
                    /** @type {number} */
                    collection.length = index - 1;
                }
            };
        }
        support = Sizzle.support = {};
        /** @type {function (?): ?} */
        objectToString = Sizzle.isXML = function(elem) {
            var node = elem && (elem.ownerDocument || elem).documentElement;
            return!!node && "HTML" !== node.nodeName;
        };
        /** @type {function (Node): ?} */
        setDocument = Sizzle.setDocument = function(node) {
            var hasCompare;
            var parent;
            var d = node ? node.ownerDocument || node : preferredDoc;
            return d !== doc && (9 === d.nodeType && d.documentElement) ? (doc = d, docElem = d.documentElement, parent = d.defaultView, parent && (parent !== parent.top && (parent.addEventListener ? parent.addEventListener("unload", recurring, false) : parent.attachEvent && parent.attachEvent("onunload", recurring))), documentIsHTML = !objectToString(d), support.attributes = assert(function(div) {
                return div.className = "i", !div.getAttribute("className");
            }), support.getElementsByTagName = assert(function(div) {
                return div.appendChild(d.createComment("")), !div.getElementsByTagName("*").length;
            }), support.getElementsByClassName = rnative.test(d.getElementsByClassName), support.getById = assert(function(div) {
                return docElem.appendChild(div).id = expando, !d.getElementsByName || !d.getElementsByName(expando).length;
            }), support.getById ? (Expr.find.ID = function(id, context) {
                if ("undefined" != typeof context.getElementById && documentIsHTML) {
                    var m = context.getElementById(id);
                    return m && m.parentNode ? [m] : [];
                }
            }, Expr.filter.ID = function(id) {
                var attrId = id.replace(runescape, funescape);
                return function(elem) {
                    return elem.getAttribute("id") === attrId;
                };
            }) : (delete Expr.find.ID, Expr.filter.ID = function(id) {
                var attrId = id.replace(runescape, funescape);
                return function(elem) {
                    var node = "undefined" != typeof elem.getAttributeNode && elem.getAttributeNode("id");
                    return node && node.value === attrId;
                };
            }), Expr.find.TAG = support.getElementsByTagName ? function(optgroup, doc) {
                return "undefined" != typeof doc.getElementsByTagName ? doc.getElementsByTagName(optgroup) : support.qsa ? doc.querySelectorAll(optgroup) : void 0;
            } : function(tag, root) {
                var value;
                /** @type {Array} */
                var bucket = [];
                /** @type {number} */
                var index = 0;
                var results = root.getElementsByTagName(tag);
                if ("*" === tag) {
                    for (;value = results[index++];) {
                        if (1 === value.nodeType) {
                            bucket.push(value);
                        }
                    }
                    return bucket;
                }
                return results;
            }, Expr.find.CLASS = support.getElementsByClassName && function(m, c) {
                if (documentIsHTML) {
                    return c.getElementsByClassName(m);
                }
            }, rbuggyMatches = [], rbuggyQSA = [], (support.qsa = rnative.test(d.querySelectorAll)) && (assert(function(div) {
                /** @type {string} */
                docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a><select id='" + expando + "-\f]' msallowcapture=''><option selected=''></option></select>";
                if (div.querySelectorAll("[msallowcapture^='']").length) {
                    rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                }
                if (!div.querySelectorAll("[selected]").length) {
                    rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                }
                if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
                    rbuggyQSA.push("~=");
                }
                if (!div.querySelectorAll(":checked").length) {
                    rbuggyQSA.push(":checked");
                }
                if (!div.querySelectorAll("a#" + expando + "+*").length) {
                    rbuggyQSA.push(".#.+[+~]");
                }
            }), assert(function(div) {
                var input = d.createElement("input");
                input.setAttribute("type", "hidden");
                div.appendChild(input).setAttribute("name", "D");
                if (div.querySelectorAll("[name=d]").length) {
                    rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                }
                if (!div.querySelectorAll(":enabled").length) {
                    rbuggyQSA.push(":enabled", ":disabled");
                }
                div.querySelectorAll("*,:x");
                rbuggyQSA.push(",.*:");
            })), (support.matchesSelector = rnative.test(matches = docElem.matches || (docElem.webkitMatchesSelector || (docElem.mozMatchesSelector || (docElem.oMatchesSelector || docElem.msMatchesSelector))))) && assert(function(div) {
                support.disconnectedMatch = matches.call(div, "div");
                matches.call(div, "[s!='']:x");
                rbuggyMatches.push("!=", pseudos);
            }), rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|")), rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|")), hasCompare = rnative.test(docElem.compareDocumentPosition), contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
                var adown = 9 === a.nodeType ? a.documentElement : a;
                var bup = b && b.parentNode;
                return a === bup || !(!bup || (1 !== bup.nodeType || !(adown.contains ? adown.contains(bup) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(bup))));
            } : function(a, b) {
                if (b) {
                    for (;b = b.parentNode;) {
                        if (b === a) {
                            return true;
                        }
                    }
                }
                return false;
            }, sortOrder = hasCompare ? function(a, b) {
                if (a === b) {
                    return E = true, 0;
                }
                /** @type {number} */
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                return compare ? compare : (compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & compare || !support.sortDetached && b.compareDocumentPosition(a) === compare ? a === d || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ? -1 : b === d || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ? 1 : sortInput ? getDistance(sortInput, a) - getDistance(sortInput, b) : 0 : 4 & compare ? -1 : 1);
            } : function(a, b) {
                if (a === b) {
                    return E = true, 0;
                }
                var cur;
                /** @type {number} */
                var i = 0;
                var aup = a.parentNode;
                var bup = b.parentNode;
                /** @type {Array} */
                var ap = [a];
                /** @type {Array} */
                var bp = [b];
                if (!aup || !bup) {
                    return a === d ? -1 : b === d ? 1 : aup ? -1 : bup ? 1 : sortInput ? getDistance(sortInput, a) - getDistance(sortInput, b) : 0;
                }
                if (aup === bup) {
                    return siblingCheck(a, b);
                }
                /** @type {string} */
                cur = a;
                for (;cur = cur.parentNode;) {
                    ap.unshift(cur);
                }
                /** @type {string} */
                cur = b;
                for (;cur = cur.parentNode;) {
                    bp.unshift(cur);
                }
                for (;ap[i] === bp[i];) {
                    i++;
                }
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            }, d) : doc;
        };
        /**
         * @param {string} expr
         * @param {Array} elements
         * @return {?}
         */
        Sizzle.matches = function(expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        /**
         * @param {HTMLElement} elem
         * @param {string} expr
         * @return {?}
         */
        Sizzle.matchesSelector = function(elem, expr) {
            if ((elem.ownerDocument || elem) !== doc && setDocument(elem), expr = expr.replace(rattributeQuotes, "='$1']"), support.matchesSelector && (documentIsHTML && ((!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))))) {
                try {
                    var ret = matches.call(elem, expr);
                    if (ret || (support.disconnectedMatch || elem.document && 11 !== elem.document.nodeType)) {
                        return ret;
                    }
                } catch (e) {
                }
            }
            return Sizzle(expr, doc, null, [elem]).length > 0;
        };
        /**
         * @param {Node} a
         * @param {Object} name
         * @return {?}
         */
        Sizzle.contains = function(a, name) {
            return(a.ownerDocument || a) !== doc && setDocument(a), contains(a, name);
        };
        /**
         * @param {Node} elem
         * @param {string} optgroup
         * @return {?}
         */
        Sizzle.attr = function(elem, optgroup) {
            if ((elem.ownerDocument || elem) !== doc) {
                setDocument(elem);
            }
            var fn = Expr.attrHandle[optgroup.toLowerCase()];
            var val = fn && hasOwn.call(Expr.attrHandle, optgroup.toLowerCase()) ? fn(elem, optgroup, !documentIsHTML) : void 0;
            return void 0 !== val ? val : support.attributes || !documentIsHTML ? elem.getAttribute(optgroup) : (val = elem.getAttributeNode(optgroup)) && val.specified ? val.value : null;
        };
        /**
         * @param {string} name
         * @return {?}
         */
        Sizzle.error = function(name) {
            throw new Error("Syntax error, unrecognized expression: " + name);
        };
        /**
         * @param {Array} results
         * @return {?}
         */
        Sizzle.uniqueSort = function(results) {
            var elem;
            /** @type {Array} */
            var duplicates = [];
            /** @type {number} */
            var j = 0;
            /** @type {number} */
            var i = 0;
            if (E = !support.detectDuplicates, sortInput = !support.sortStable && results.slice(0), results.sort(sortOrder), E) {
                for (;elem = results[i++];) {
                    if (elem === results[i]) {
                        /** @type {number} */
                        j = duplicates.push(i);
                    }
                }
                for (;j--;) {
                    results.splice(duplicates[j], 1);
                }
            }
            return sortInput = null, results;
        };
        /** @type {function (string): ?} */
        getText = Sizzle.getText = function(name) {
            var cur;
            /** @type {string} */
            var ret = "";
            /** @type {number} */
            var d = 0;
            var type = name.nodeType;
            if (type) {
                if (1 === type || (9 === type || 11 === type)) {
                    if ("string" == typeof name.textContent) {
                        return name.textContent;
                    }
                    name = name.firstChild;
                    for (;name;name = name.nextSibling) {
                        ret += getText(name);
                    }
                } else {
                    if (3 === type || 4 === type) {
                        return name.nodeValue;
                    }
                }
            } else {
                for (;cur = name[d++];) {
                    ret += getText(cur);
                }
            }
            return ret;
        };
        Expr = Sizzle.selectors = {
            cacheLength : 50,
            /** @type {function (Object): ?} */
            createPseudo : markFunction,
            match : matchExpr,
            attrHandle : {},
            find : {},
            relative : {
                ">" : {
                    dir : "parentNode",
                    first : true
                },
                " " : {
                    dir : "parentNode"
                },
                "+" : {
                    dir : "previousSibling",
                    first : true
                },
                "~" : {
                    dir : "previousSibling"
                }
            },
            preFilter : {
                /**
                 * @param {Array} match
                 * @return {?}
                 */
                ATTR : function(match) {
                    return match[1] = match[1].replace(runescape, funescape), match[3] = (match[3] || (match[4] || (match[5] || ""))).replace(runescape, funescape), "~=" === match[2] && (match[3] = " " + match[3] + " "), match.slice(0, 4);
                },
                /**
                 * @param {Array} match
                 * @return {?}
                 */
                CHILD : function(match) {
                    return match[1] = match[1].toLowerCase(), "nth" === match[1].slice(0, 3) ? (match[3] || Sizzle.error(match[0]), match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * ("even" === match[3] || "odd" === match[3])), match[5] = +(match[7] + match[8] || "odd" === match[3])) : match[3] && Sizzle.error(match[0]), match;
                },
                /**
                 * @param {Array} match
                 * @return {?}
                 */
                PSEUDO : function(match) {
                    var excess;
                    var unquoted = !match[6] && match[2];
                    return matchExpr.CHILD.test(match[0]) ? null : (match[3] ? match[2] = match[4] || (match[5] || "") : unquoted && (rpseudo.test(unquoted) && ((excess = tokenize(unquoted, true)) && ((excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length) && (match[0] = match[0].slice(0, excess), match[2] = unquoted.slice(0, excess))))), match.slice(0, 3));
                }
            },
            filter : {
                /**
                 * @param {string} nodeNameSelector
                 * @return {?}
                 */
                TAG : function(nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return "*" === nodeNameSelector ? function() {
                        return true;
                    } : function(elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                /**
                 * @param {string} className
                 * @return {?}
                 */
                CLASS : function(className) {
                    var pattern = classCache[className + " "];
                    return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                        return pattern.test("string" == typeof elem.className && elem.className || ("undefined" != typeof elem.getAttribute && elem.getAttribute("class") || ""));
                    });
                },
                /**
                 * @param {string} name
                 * @param {string} not
                 * @param {string} b
                 * @return {?}
                 */
                ATTR : function(name, not, b) {
                    return function(elem) {
                        var a = Sizzle.attr(elem, name);
                        return null == a ? "!=" === not : !not || (a += "", "=" === not ? a === b : "!=" === not ? a !== b : "^=" === not ? b && 0 === a.indexOf(b) : "*=" === not ? b && a.indexOf(b) > -1 : "$=" === not ? b && a.slice(-b.length) === b : "~=" === not ? (" " + a.replace(rclass, " ") + " ").indexOf(b) > -1 : "|=" === not && (a === b || a.slice(0, b.length + 1) === b + "-"));
                    };
                },
                /**
                 * @param {string} type
                 * @param {string} argument
                 * @param {?} dataAndEvents
                 * @param {number} first
                 * @param {number} last
                 * @return {?}
                 */
                CHILD : function(type, argument, dataAndEvents, first, last) {
                    /** @type {boolean} */
                    var simple = "nth" !== type.slice(0, 3);
                    /** @type {boolean} */
                    var forward = "last" !== type.slice(-4);
                    /** @type {boolean} */
                    var value = "of-type" === argument;
                    return 1 === first && 0 === last ? function(contestant) {
                        return!!contestant.parentNode;
                    } : function(elem, dataAndEvents, computed) {
                        var cache;
                        var outerCache;
                        var node;
                        var diff;
                        var nodeIndex;
                        var eventPath;
                        /** @type {string} */
                        var which = simple !== forward ? "nextSibling" : "previousSibling";
                        var parent = elem.parentNode;
                        var attrNames = value && elem.nodeName.toLowerCase();
                        /** @type {boolean} */
                        var useCache = !computed && !value;
                        if (parent) {
                            if (simple) {
                                for (;which;) {
                                    /** @type {Object} */
                                    node = elem;
                                    for (;node = node[which];) {
                                        if (value ? node.nodeName.toLowerCase() === attrNames : 1 === node.nodeType) {
                                            return false;
                                        }
                                    }
                                    /** @type {(boolean|string)} */
                                    eventPath = which = "only" === type && (!eventPath && "nextSibling");
                                }
                                return true;
                            }
                            if (eventPath = [forward ? parent.firstChild : parent.lastChild], forward && useCache) {
                                outerCache = parent[expando] || (parent[expando] = {});
                                cache = outerCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = cache[0] === dirruns && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                for (;node = ++nodeIndex && (node && node[which]) || ((diff = nodeIndex = 0) || eventPath.pop());) {
                                    if (1 === node.nodeType && (++diff && node === elem)) {
                                        /** @type {Array} */
                                        outerCache[type] = [dirruns, nodeIndex, diff];
                                        break;
                                    }
                                }
                            } else {
                                if (useCache && ((cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns)) {
                                    diff = cache[1];
                                } else {
                                    for (;(node = ++nodeIndex && (node && node[which]) || ((diff = nodeIndex = 0) || eventPath.pop())) && ((value ? node.nodeName.toLowerCase() !== attrNames : 1 !== node.nodeType) || (!++diff || (useCache && ((node[expando] || (node[expando] = {}))[type] = [dirruns, diff]), node !== elem)));) {
                                    }
                                }
                            }
                            return diff -= last, diff === first || diff % first === 0 && diff / first >= 0;
                        }
                    };
                },
                /**
                 * @param {string} pseudo
                 * @param {?} context
                 * @return {?}
                 */
                PSEUDO : function(pseudo, context) {
                    var args;
                    var fn = Expr.pseudos[pseudo] || (Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo));
                    return fn[expando] ? fn(context) : fn.length > 1 ? (args = [pseudo, pseudo, "", context], Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(el, event) {
                        var id;
                        var ret = fn(el, context);
                        var i = ret.length;
                        for (;i--;) {
                            id = getDistance(el, ret[i]);
                            /** @type {boolean} */
                            el[id] = !(event[id] = ret[i]);
                        }
                    }) : function(err) {
                        return fn(err, 0, args);
                    }) : fn;
                }
            },
            pseudos : {
                not : markFunction(function(selector) {
                    /** @type {Array} */
                    var elem = [];
                    /** @type {Array} */
                    var memory = [];
                    var matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ? markFunction(function(seed, qs, dataAndEvents, xml) {
                        var val;
                        var unmatched = matcher(seed, null, xml, []);
                        var i = seed.length;
                        for (;i--;) {
                            if (val = unmatched[i]) {
                                /** @type {boolean} */
                                seed[i] = !(qs[i] = val);
                            }
                        }
                    }) : function(value, dataAndEvents, xml) {
                        return elem[0] = value, matcher(elem, null, xml, memory), elem[0] = null, !memory.pop();
                    };
                }),
                has : markFunction(function(selector) {
                    return function(elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                contains : markFunction(function(klass) {
                    return klass = klass.replace(runescape, funescape), function(elem) {
                        return(elem.textContent || (elem.innerText || getText(elem))).indexOf(klass) > -1;
                    };
                }),
                lang : markFunction(function(lang) {
                    return ridentifier.test(lang || "") || Sizzle.error("unsupported lang: " + lang), lang = lang.replace(runescape, funescape).toLowerCase(), function(elem) {
                        var elemLang;
                        do {
                            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                                return elemLang = elemLang.toLowerCase(), elemLang === lang || 0 === elemLang.indexOf(lang + "-");
                            }
                        } while ((elem = elem.parentNode) && 1 === elem.nodeType);
                        return false;
                    };
                }),
                /**
                 * @param {string} name
                 * @return {?}
                 */
                target : function(name) {
                    var models = win.location && win.location.hash;
                    return models && models.slice(1) === name.id;
                },
                /**
                 * @param {string} name
                 * @return {?}
                 */
                root : function(name) {
                    return name === docElem;
                },
                /**
                 * @param {string} name
                 * @return {?}
                 */
                focus : function(name) {
                    return name === doc.activeElement && ((!doc.hasFocus || doc.hasFocus()) && !!(name.type || (name.href || ~name.tabIndex)));
                },
                /**
                 * @param {EventTarget} a
                 * @return {?}
                 */
                enabled : function(a) {
                    return a.disabled === false;
                },
                /**
                 * @param {Object} elem
                 * @return {?}
                 */
                disabled : function(elem) {
                    return elem.disabled === true;
                },
                /**
                 * @param {string} name
                 * @return {?}
                 */
                checked : function(name) {
                    var b = name.nodeName.toLowerCase();
                    return "input" === b && !!name.checked || "option" === b && !!name.selected;
                },
                /**
                 * @param {Node} elem
                 * @return {?}
                 */
                selected : function(elem) {
                    return elem.parentNode && elem.parentNode.selectedIndex, elem.selected === true;
                },
                /**
                 * @param {Object} elem
                 * @return {?}
                 */
                empty : function(elem) {
                    elem = elem.firstChild;
                    for (;elem;elem = elem.nextSibling) {
                        if (elem.nodeType < 6) {
                            return false;
                        }
                    }
                    return true;
                },
                /**
                 * @param {Object} elem
                 * @return {?}
                 */
                parent : function(elem) {
                    return!Expr.pseudos.empty(elem);
                },
                /**
                 * @param {string} name
                 * @return {?}
                 */
                header : function(name) {
                    return rchecked.test(name.nodeName);
                },
                /**
                 * @param {Node} elem
                 * @return {?}
                 */
                input : function(elem) {
                    return rinputs.test(elem.nodeName);
                },
                /**
                 * @param {string} name
                 * @return {?}
                 */
                button : function(name) {
                    var b = name.nodeName.toLowerCase();
                    return "input" === b && "button" === name.type || "button" === b;
                },
                /**
                 * @param {string} name
                 * @return {?}
                 */
                text : function(name) {
                    var evt;
                    return "input" === name.nodeName.toLowerCase() && ("text" === name.type && (null == (evt = name.getAttribute("type")) || "text" === evt.toLowerCase()));
                },
                first : createPositionalPseudo(function() {
                    return[0];
                }),
                last : createPositionalPseudo(function(dataAndEvents, deepDataAndEvents) {
                    return[deepDataAndEvents - 1];
                }),
                eq : createPositionalPseudo(function(dataAndEvents, length, argument) {
                    return[argument < 0 ? argument + length : argument];
                }),
                even : createPositionalPseudo(function(bucket, min) {
                    /** @type {number} */
                    var value = 0;
                    for (;value < min;value += 2) {
                        bucket.push(value);
                    }
                    return bucket;
                }),
                odd : createPositionalPseudo(function(bucket, min) {
                    /** @type {number} */
                    var value = 1;
                    for (;value < min;value += 2) {
                        bucket.push(value);
                    }
                    return bucket;
                }),
                lt : createPositionalPseudo(function(bucket, length, argument) {
                    var value = argument < 0 ? argument + length : argument;
                    for (;--value >= 0;) {
                        bucket.push(value);
                    }
                    return bucket;
                }),
                gt : createPositionalPseudo(function(bucket, length, argument) {
                    var value = argument < 0 ? argument + length : argument;
                    for (;++value < length;) {
                        bucket.push(value);
                    }
                    return bucket;
                })
            }
        };
        Expr.pseudos.nth = Expr.pseudos.eq;
        for (i in{
            radio : true,
            checkbox : true,
            file : true,
            password : true,
            image : true
        }) {
            Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in{
            submit : true,
            reset : true
        }) {
            Expr.pseudos[i] = createButtonPseudo(i);
        }
        return setFilters.prototype = Expr.filters = Expr.pseudos, Expr.setFilters = new setFilters, tokenize = Sizzle.tokenize = function(optgroup, parseOnly) {
            var matched;
            var match;
            var tokens;
            var type;
            var soFar;
            var groups;
            var preFilters;
            var cached = tokenCache[optgroup + " "];
            if (cached) {
                return parseOnly ? 0 : cached.slice(0);
            }
            /** @type {string} */
            soFar = optgroup;
            /** @type {Array} */
            groups = [];
            preFilters = Expr.preFilter;
            for (;soFar;) {
                if (!(matched && !(match = rcomma.exec(soFar)))) {
                    if (match) {
                        soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push(tokens = []);
                }
                /** @type {boolean} */
                matched = false;
                if (match = rcombinators.exec(soFar)) {
                    /** @type {string} */
                    matched = match.shift();
                    tokens.push({
                        value : matched,
                        type : match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) {
                    if (!!(match = matchExpr[type].exec(soFar))) {
                        if (!(preFilters[type] && !(match = preFilters[type](match)))) {
                            matched = match.shift();
                            tokens.push({
                                value : matched,
                                type : type,
                                matches : match
                            });
                            soFar = soFar.slice(matched.length);
                        }
                    }
                }
                if (!matched) {
                    break;
                }
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(optgroup) : tokenCache(optgroup, groups).slice(0);
        }, compile = Sizzle.compile = function(program, args) {
            var i;
            /** @type {Array} */
            var setMatchers = [];
            /** @type {Array} */
            var elementMatchers = [];
            var cached = compilerCache[program + " "];
            if (!cached) {
                if (!args) {
                    args = tokenize(program);
                }
                i = args.length;
                for (;i--;) {
                    cached = matcherFromTokens(args[i]);
                    if (cached[expando]) {
                        setMatchers.push(cached);
                    } else {
                        elementMatchers.push(cached);
                    }
                }
                cached = compilerCache(program, matcherFromGroupMatchers(elementMatchers, setMatchers));
                /** @type {string} */
                cached.selector = program;
            }
            return cached;
        }, select = Sizzle.select = function(name, recurring, dataAndEvents, optgroup) {
            var i;
            var tokens;
            var token;
            var type;
            var find;
            /** @type {(Function|boolean)} */
            var compiled = "function" == typeof name && name;
            var match = !optgroup && tokenize(name = compiled.selector || name);
            if (dataAndEvents = dataAndEvents || [], 1 === match.length) {
                if (tokens = match[0] = match[0].slice(0), tokens.length > 2 && ("ID" === (token = tokens[0]).type && (support.getById && (9 === recurring.nodeType && (documentIsHTML && Expr.relative[tokens[1].type]))))) {
                    if (recurring = (Expr.find.ID(token.matches[0].replace(runescape, funescape), recurring) || [])[0], !recurring) {
                        return dataAndEvents;
                    }
                    if (compiled) {
                        recurring = recurring.parentNode;
                    }
                    name = name.slice(tokens.shift().value.length);
                }
                i = matchExpr.needsContext.test(name) ? 0 : tokens.length;
                for (;i-- && (token = tokens[i], !Expr.relative[type = token.type]);) {
                    if ((find = Expr.find[type]) && (optgroup = find(token.matches[0].replace(runescape, funescape), namespace.test(tokens[0].type) && testContext(recurring.parentNode) || recurring))) {
                        if (tokens.splice(i, 1), name = optgroup.length && toSelector(tokens), !name) {
                            return push.apply(dataAndEvents, optgroup), dataAndEvents;
                        }
                        break;
                    }
                }
            }
            return(compiled || compile(name, match))(optgroup, recurring, !documentIsHTML, dataAndEvents, namespace.test(name) && testContext(recurring.parentNode) || recurring), dataAndEvents;
        }, support.sortStable = expando.split("").sort(sortOrder).join("") === expando, support.detectDuplicates = !!E, setDocument(), support.sortDetached = assert(function(div1) {
            return 1 & div1.compareDocumentPosition(doc.createElement("div"));
        }), assert(function(div) {
            return div.innerHTML = "<a href='#'></a>", "#" === div.firstChild.getAttribute("href");
        }) || addHandle("type|href|height|width", function(elem, optgroup, dataAndEvents) {
            if (!dataAndEvents) {
                return elem.getAttribute(optgroup, "type" === optgroup.toLowerCase() ? 1 : 2);
            }
        }), support.attributes && assert(function(div) {
            return div.innerHTML = "<input/>", div.firstChild.setAttribute("value", ""), "" === div.firstChild.getAttribute("value");
        }) || addHandle("value", function(target, deepDataAndEvents, dataAndEvents) {
            if (!dataAndEvents && "input" === target.nodeName.toLowerCase()) {
                return target.defaultValue;
            }
        }), assert(function(div) {
            return null == div.getAttribute("disabled");
        }) || addHandle(booleans, function(elem, name, dataAndEvents) {
            var val;
            if (!dataAndEvents) {
                return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
            }
        }), Sizzle;
    }(win);
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    var rneedsContext = jQuery.expr.match.needsContext;
    /** @type {RegExp} */
    var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
    /** @type {RegExp} */
    var rhtml = /^.[^:#\[\.,]*$/;
    /**
     * @param {string} name
     * @param {Function} recurring
     * @param {Object} deepDataAndEvents
     * @return {?}
     */
    jQuery.filter = function(name, recurring, deepDataAndEvents) {
        var elem = recurring[0];
        return deepDataAndEvents && (name = ":not(" + name + ")"), 1 === recurring.length && 1 === elem.nodeType ? jQuery.find.matchesSelector(elem, name) ? [elem] : [] : jQuery.find.matches(name, jQuery.grep(recurring, function(dest) {
            return 1 === dest.nodeType;
        }));
    };
    jQuery.fn.extend({
        /**
         * @param {string} optgroup
         * @return {?}
         */
        find : function(optgroup) {
            var i;
            var len = this.length;
            /** @type {Array} */
            var ret = [];
            var self = this;
            if ("string" != typeof optgroup) {
                return this.pushStack(jQuery(optgroup).filter(function() {
                    /** @type {number} */
                    i = 0;
                    for (;i < len;i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }
            /** @type {number} */
            i = 0;
            for (;i < len;i++) {
                jQuery.find(optgroup, self[i], ret);
            }
            return ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret), ret.selector = this.selector ? this.selector + " " + optgroup : optgroup, ret;
        },
        /**
         * @param {string} name
         * @return {?}
         */
        filter : function(name) {
            return this.pushStack(winnow(this, name || [], false));
        },
        /**
         * @param {Array} selector
         * @return {?}
         */
        not : function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        /**
         * @param {string} name
         * @return {?}
         */
        is : function(name) {
            return!!winnow(this, "string" == typeof name && rneedsContext.test(name) ? jQuery(name) : name || [], false).length;
        }
    });
    var rootjQuery;
    /** @type {RegExp} */
    var rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
    /** @type {function (string, string): ?} */
    var init = jQuery.fn.init = function(selector, rvar) {
        var match;
        var length;
        if (!selector) {
            return this;
        }
        if ("string" == typeof selector) {
            if (match = "<" === selector[0] && (">" === selector[selector.length - 1] && selector.length >= 3) ? [null, selector, null] : rquickExpr.exec(selector), !match || !match[1] && rvar) {
                return!rvar || rvar.jquery ? (rvar || rootjQuery).find(selector) : this.constructor(rvar).find(selector);
            }
            if (match[1]) {
                if (rvar = rvar instanceof jQuery ? rvar[0] : rvar, jQuery.merge(this, jQuery.parseHTML(match[1], rvar && rvar.nodeType ? rvar.ownerDocument || rvar : optgroup, true)), rsingleTag.test(match[1]) && jQuery.isPlainObject(rvar)) {
                    for (match in rvar) {
                        if (jQuery.isFunction(this[match])) {
                            this[match](rvar[match]);
                        } else {
                            this.attr(match, rvar[match]);
                        }
                    }
                }
                return this;
            }
            return length = optgroup.getElementById(match[2]), length && (this.length = 1, this[0] = length), this.context = optgroup, this.selector = selector, this;
        }
        return selector.nodeType ? (this.context = this[0] = selector, this.length = 1, this) : jQuery.isFunction(selector) ? void 0 !== rootjQuery.ready ? rootjQuery.ready(selector) : selector(jQuery) : (void 0 !== selector.selector && (this.selector = selector.selector, this.context = selector.context), jQuery.makeArray(selector, this));
    };
    init.prototype = jQuery.fn;
    rootjQuery = jQuery(optgroup);
    /** @type {RegExp} */
    var $ = /^(?:parents|prev(?:Until|All))/;
    var _ = {
        children : true,
        contents : true,
        next : true,
        prev : true
    };
    jQuery.extend({
        /**
         * @param {string} optgroup
         * @param {string} dir
         * @param {string} rvar
         * @return {?}
         */
        dir : function(optgroup, dir, rvar) {
            /** @type {Array} */
            var matched = [];
            /** @type {boolean} */
            var e = void 0 !== rvar;
            for (;(optgroup = optgroup[dir]) && 9 !== optgroup.nodeType;) {
                if (1 === optgroup.nodeType) {
                    if (e && jQuery(optgroup).is(rvar)) {
                        break;
                    }
                    matched.push(optgroup);
                }
            }
            return matched;
        },
        /**
         * @param {Object} n
         * @param {Object} elem
         * @return {?}
         */
        sibling : function(n, elem) {
            /** @type {Array} */
            var r = [];
            for (;n;n = n.nextSibling) {
                if (1 === n.nodeType) {
                    if (n !== elem) {
                        r.push(n);
                    }
                }
            }
            return r;
        }
    });
    jQuery.fn.extend({
        /**
         * @param {string} optgroup
         * @return {?}
         */
        has : function(optgroup) {
            var targets = jQuery(optgroup, this);
            var l = targets.length;
            return this.filter(function() {
                /** @type {number} */
                var i = 0;
                for (;i < l;i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },
        /**
         * @param {string} optgroup
         * @param {Node} context
         * @return {?}
         */
        closest : function(optgroup, context) {
            var rvar;
            /** @type {number} */
            var i = 0;
            var l = this.length;
            /** @type {Array} */
            var matched = [];
            var body = rneedsContext.test(optgroup) || "string" != typeof optgroup ? jQuery(optgroup, context || this.context) : 0;
            for (;i < l;i++) {
                rvar = this[i];
                for (;rvar && rvar !== context;rvar = rvar.parentNode) {
                    if (rvar.nodeType < 11 && (body ? body.index(rvar) > -1 : 1 === rvar.nodeType && jQuery.find.matchesSelector(rvar, optgroup))) {
                        matched.push(rvar);
                        break;
                    }
                }
            }
            return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
        },
        /**
         * @param {string} name
         * @return {?}
         */
        index : function(name) {
            return name ? "string" == typeof name ? core_indexOf.call(jQuery(name), this[0]) : core_indexOf.call(this, name.jquery ? name[0] : name) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
        },
        /**
         * @param {string} optgroup
         * @param {Function} recurring
         * @return {?}
         */
        add : function(optgroup, recurring) {
            return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(optgroup, recurring))));
        },
        /**
         * @param {string} optgroup
         * @return {?}
         */
        addBack : function(optgroup) {
            return this.add(null == optgroup ? this.prevObject : this.prevObject.filter(optgroup));
        }
    });
    jQuery.each({
        /**
         * @param {Node} elem
         * @return {?}
         */
        parent : function(elem) {
            var parent = elem.parentNode;
            return parent && 11 !== parent.nodeType ? parent : null;
        },
        /**
         * @param {string} elem
         * @return {?}
         */
        parents : function(elem) {
            return jQuery.dir(elem, "parentNode");
        },
        /**
         * @param {string} elem
         * @param {?} i
         * @param {string} until
         * @return {?}
         */
        parentsUntil : function(elem, i, until) {
            return jQuery.dir(elem, "parentNode", until);
        },
        /**
         * @param {Object} elem
         * @return {?}
         */
        next : function(elem) {
            return sibling(elem, "nextSibling");
        },
        /**
         * @param {Object} elem
         * @return {?}
         */
        prev : function(elem) {
            return sibling(elem, "previousSibling");
        },
        /**
         * @param {string} elem
         * @return {?}
         */
        nextAll : function(elem) {
            return jQuery.dir(elem, "nextSibling");
        },
        /**
         * @param {string} elem
         * @return {?}
         */
        prevAll : function(elem) {
            return jQuery.dir(elem, "previousSibling");
        },
        /**
         * @param {string} elem
         * @param {?} i
         * @param {string} until
         * @return {?}
         */
        nextUntil : function(elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until);
        },
        /**
         * @param {string} elem
         * @param {?} i
         * @param {string} until
         * @return {?}
         */
        prevUntil : function(elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until);
        },
        /**
         * @param {HTMLElement} elem
         * @return {?}
         */
        siblings : function(elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        /**
         * @param {string} name
         * @return {?}
         */
        children : function(name) {
            return jQuery.sibling(name.firstChild);
        },
        /**
         * @param {Element} elem
         * @return {?}
         */
        contents : function(elem) {
            return elem.contentDocument || jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        /**
         * @param {Object} deepDataAndEvents
         * @param {string} optgroup
         * @return {?}
         */
        jQuery.fn[name] = function(deepDataAndEvents, optgroup) {
            var recurring = jQuery.map(this, fn, deepDataAndEvents);
            return "Until" !== name.slice(-5) && (optgroup = deepDataAndEvents), optgroup && ("string" == typeof optgroup && (recurring = jQuery.filter(optgroup, recurring))), this.length > 1 && (_[name] || jQuery.unique(recurring), $.test(name) && recurring.reverse()), this.pushStack(recurring);
        };
    });
    /** @type {RegExp} */
    var rvar = /\S+/g;
    var optionsCache = {};
    /**
     * @param {Object} options
     * @return {?}
     */
    jQuery.Callbacks = function(options) {
        options = "string" == typeof options ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
        var memory;
        var c;
        var r;
        var firingStart;
        var firingLength;
        var firingIndex;
        /** @type {Array} */
        var list = [];
        /** @type {(Array|boolean)} */
        var stack = !options.once && [];
        /**
         * @param {Array} data
         * @return {undefined}
         */
        var fire = function(data) {
            memory = options.memory && data;
            /** @type {boolean} */
            c = true;
            firingIndex = firingStart || 0;
            /** @type {number} */
            firingStart = 0;
            firingLength = list.length;
            /** @type {boolean} */
            r = true;
            for (;list && firingIndex < firingLength;firingIndex++) {
                if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                    /** @type {boolean} */
                    memory = false;
                    break;
                }
            }
            /** @type {boolean} */
            r = false;
            if (list) {
                if (stack) {
                    if (stack.length) {
                        fire(stack.shift());
                    }
                } else {
                    if (memory) {
                        /** @type {Array} */
                        list = [];
                    } else {
                        self.disable();
                    }
                }
            }
        };
        var self = {
            /**
             * @return {?}
             */
            add : function() {
                if (list) {
                    var start = list.length;
                    !function add(attributes) {
                        jQuery.each(attributes, function(dataAndEvents, optgroup) {
                            var type = jQuery.type(optgroup);
                            if ("function" === type) {
                                if (!(options.unique && self.has(optgroup))) {
                                    list.push(optgroup);
                                }
                            } else {
                                if (optgroup) {
                                    if (optgroup.length) {
                                        if ("string" !== type) {
                                            add(optgroup);
                                        }
                                    }
                                }
                            }
                        });
                    }(arguments);
                    if (r) {
                        firingLength = list.length;
                    } else {
                        if (memory) {
                            firingStart = start;
                            fire(memory);
                        }
                    }
                }
                return this;
            },
            /**
             * @return {?}
             */
            remove : function() {
                return list && jQuery.each(arguments, function(dataAndEvents, arg) {
                    var index;
                    for (;(index = jQuery.inArray(arg, list, index)) > -1;) {
                        list.splice(index, 1);
                        if (r) {
                            if (index <= firingLength) {
                                firingLength--;
                            }
                            if (index <= firingIndex) {
                                firingIndex--;
                            }
                        }
                    }
                }), this;
            },
            /**
             * @param {string} name
             * @return {?}
             */
            has : function(name) {
                return name ? jQuery.inArray(name, list) > -1 : !(!list || !list.length);
            },
            /**
             * @return {?}
             */
            empty : function() {
                return list && (list = [], firingLength = 0), this;
            },
            /**
             * @return {?}
             */
            disable : function() {
                return list = stack = memory = void 0, this;
            },
            /**
             * @return {?}
             */
            disabled : function() {
                return!list;
            },
            /**
             * @return {?}
             */
            lock : function() {
                return stack = void 0, memory || self.disable(), this;
            },
            /**
             * @return {?}
             */
            locked : function() {
                return!stack;
            },
            /**
             * @param {?} context
             * @param {Object} args
             * @return {?}
             */
            fireWith : function(context, args) {
                return!list || (c && !stack || (args = args || [], args = [context, args.slice ? args.slice() : args], r ? stack.push(args) : fire(args))), this;
            },
            /**
             * @return {?}
             */
            fire : function() {
                return self.fireWith(this, arguments), this;
            },
            /**
             * @return {?}
             */
            fired : function() {
                return!!c;
            }
        };
        return self;
    };
    /** @type {function (string, Function, string, string, boolean, string, boolean): ?} */
    var access = jQuery.access = function(elems, fn, optgroup, value, chainable, emptyGet, raw) {
        /** @type {number} */
        var i = 0;
        var length = elems.length;
        /** @type {boolean} */
        var bulk = null == optgroup;
        if ("object" === jQuery.type(optgroup)) {
            /** @type {boolean} */
            chainable = true;
            for (i in optgroup) {
                access(elems, fn, i, optgroup[i], true, emptyGet, raw);
            }
        } else {
            if (void 0 !== value && (chainable = true, jQuery.isFunction(value) || (raw = true), bulk && (raw ? (fn.call(elems, value), fn = null) : (bulk = fn, fn = function(optgroup, name, value) {
                    return bulk.call(jQuery(optgroup), value);
                })), fn)) {
                for (;i < length;i++) {
                    fn(elems[i], optgroup, raw ? value : value.call(elems[i], i, fn(elems[i], optgroup)));
                }
            }
        }
        return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], optgroup) : emptyGet;
    };
    /**
     * @param {?} elem
     * @return {?}
     */
    jQuery.acceptData = function(elem) {
        return 1 === elem.nodeType || (9 === elem.nodeType || !+elem.nodeType);
    };
    /** @type {number} */
    Data.uid = 1;
    /** @type {function (?): ?} */
    Data.accepts = jQuery.acceptData;
    Data.prototype = {
        /**
         * @param {string} name
         * @return {?}
         */
        key : function(name) {
            if (!Data.accepts(name)) {
                return 0;
            }
            var descriptor = {};
            var unlock = name[this.expando];
            if (!unlock) {
                /** @type {number} */
                unlock = Data.uid++;
                try {
                    descriptor[this.expando] = {
                        value : unlock
                    };
                    Object.defineProperties(name, descriptor);
                } catch (d) {
                    /** @type {number} */
                    descriptor[this.expando] = unlock;
                    jQuery.extend(name, descriptor);
                }
            }
            return this.cache[unlock] || (this.cache[unlock] = {}), unlock;
        },
        /**
         * @param {string} optgroup
         * @param {string} data
         * @param {string} value
         * @return {?}
         */
        set : function(optgroup, data, value) {
            var prop;
            var unlock = this.key(optgroup);
            var cache = this.cache[unlock];
            if ("string" == typeof data) {
                /** @type {string} */
                cache[data] = value;
            } else {
                if (jQuery.isEmptyObject(cache)) {
                    jQuery.extend(this.cache[unlock], data);
                } else {
                    for (prop in data) {
                        cache[prop] = data[prop];
                    }
                }
            }
            return cache;
        },
        /**
         * @param {string} optgroup
         * @param {string} value
         * @return {?}
         */
        get : function(optgroup, value) {
            var cache = this.cache[this.key(optgroup)];
            return void 0 === value ? cache : cache[value];
        },
        /**
         * @param {string} owner
         * @param {string} key
         * @param {string} value
         * @return {?}
         */
        access : function(owner, key, value) {
            var stored;
            return void 0 === key || key && ("string" == typeof key && void 0 === value) ? (stored = this.get(owner, key), void 0 !== stored ? stored : this.get(owner, jQuery.camelCase(key))) : (this.set(owner, key, value), void 0 !== value ? value : key);
        },
        /**
         * @param {string} optgroup
         * @param {Object} key
         * @return {undefined}
         */
        remove : function(optgroup, key) {
            var i;
            var name;
            var camel;
            var unlock = this.key(optgroup);
            var cache = this.cache[unlock];
            if (void 0 === key) {
                this.cache[unlock] = {};
            } else {
                if (jQuery.isArray(key)) {
                    name = key.concat(key.map(jQuery.camelCase));
                } else {
                    camel = jQuery.camelCase(key);
                    if (key in cache) {
                        /** @type {Array} */
                        name = [key, camel];
                    } else {
                        name = camel;
                        name = name in cache ? [name] : name.match(rvar) || [];
                    }
                }
                i = name.length;
                for (;i--;) {
                    delete cache[name[i]];
                }
            }
        },
        /**
         * @param {string} owner
         * @return {?}
         */
        hasData : function(owner) {
            return!jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
        },
        /**
         * @param {?} owner
         * @return {undefined}
         */
        discard : function(owner) {
            if (owner[this.expando]) {
                delete this.cache[owner[this.expando]];
            }
        }
    };
    var data_priv = new Data;
    var data_user = new Data;
    /** @type {RegExp} */
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/;
    /** @type {RegExp} */
    var r20 = /[A-Z]/g;
    jQuery.extend({
        /**
         * @param {string} elem
         * @return {?}
         */
        hasData : function(elem) {
            return data_user.hasData(elem) || data_priv.hasData(elem);
        },
        /**
         * @param {string} name
         * @param {Function} recurring
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        data : function(name, recurring, deepDataAndEvents) {
            return data_user.access(name, recurring, deepDataAndEvents);
        },
        /**
         * @param {string} elem
         * @param {Object} name
         * @return {undefined}
         */
        removeData : function(elem, name) {
            data_user.remove(elem, name);
        },
        /**
         * @param {string} elem
         * @param {Object} name
         * @param {string} data
         * @return {?}
         */
        _data : function(elem, name, data) {
            return data_priv.access(elem, name, data);
        },
        /**
         * @param {string} elem
         * @param {Object} name
         * @return {undefined}
         */
        _removeData : function(elem, name) {
            data_priv.remove(elem, name);
        }
    });
    jQuery.fn.extend({
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {?}
         */
        data : function(name, recurring) {
            var len;
            var attributeName;
            var data;
            var elem = this[0];
            var attrs = elem && elem.attributes;
            if (void 0 === name) {
                if (this.length && (data = data_user.get(elem), 1 === elem.nodeType && !data_priv.get(elem, "hasDataAttrs"))) {
                    len = attrs.length;
                    for (;len--;) {
                        if (attrs[len]) {
                            attributeName = attrs[len].name;
                            if (0 === attributeName.indexOf("data-")) {
                                attributeName = jQuery.camelCase(attributeName.slice(5));
                                dataAttr(elem, attributeName, data[attributeName]);
                            }
                        }
                    }
                    data_priv.set(elem, "hasDataAttrs", true);
                }
                return data;
            }
            return "object" == typeof name ? this.each(function() {
                data_user.set(this, name);
            }) : access(this, function(value) {
                var data;
                var camelKey;
                if (elem && void 0 === value) {
                    if (data = data_user.get(elem, name), void 0 !== data) {
                        return data;
                    }
                    if (camelKey = jQuery.camelCase(name), data = data_user.get(elem, camelKey), void 0 !== data) {
                        return data;
                    }
                    if (data = dataAttr(elem, camelKey, void 0), void 0 !== data) {
                        return data;
                    }
                } else {
                    camelKey = jQuery.camelCase(name);
                    this.each(function() {
                        var data = data_user.get(this, camelKey);
                        data_user.set(this, camelKey, value);
                        if (name.indexOf("-") !== -1) {
                            if (void 0 !== data) {
                                data_user.set(this, name, value);
                            }
                        }
                    });
                }
            }, null, recurring, arguments.length > 1, null, true);
        },
        /**
         * @param {Object} name
         * @return {?}
         */
        removeData : function(name) {
            return this.each(function() {
                data_user.remove(this, name);
            });
        }
    });
    jQuery.extend({
        /**
         * @param {string} elem
         * @param {string} type
         * @param {string} data
         * @return {?}
         */
        queue : function(elem, type, data) {
            var queue;
            if (elem) {
                return type = (type || "fx") + "queue", queue = data_priv.get(elem, type), data && (!queue || jQuery.isArray(data) ? queue = data_priv.access(elem, type, jQuery.makeArray(data)) : queue.push(data)), queue || [];
            }
        },
        /**
         * @param {string} elem
         * @param {string} type
         * @return {undefined}
         */
        dequeue : function(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type);
            var ln = queue.length;
            var fn = queue.shift();
            var hooks = jQuery._queueHooks(elem, type);
            /**
             * @return {undefined}
             */
            var next = function() {
                jQuery.dequeue(elem, type);
            };
            if ("inprogress" === fn) {
                fn = queue.shift();
                ln--;
            }
            if (fn) {
                if ("fx" === type) {
                    queue.unshift("inprogress");
                }
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!ln) {
                if (hooks) {
                    hooks.empty.fire();
                }
            }
        },
        /**
         * @param {string} elem
         * @param {string} type
         * @return {?}
         */
        _queueHooks : function(elem, type) {
            /** @type {string} */
            var key = type + "queueHooks";
            return data_priv.get(elem, key) || data_priv.access(elem, key, {
                empty : jQuery.Callbacks("once memory").add(function() {
                    data_priv.remove(elem, [type + "queue", key]);
                })
            });
        }
    });
    jQuery.fn.extend({
        /**
         * @param {string} type
         * @param {string} data
         * @return {?}
         */
        queue : function(type, data) {
            /** @type {number} */
            var setter = 2;
            return "string" != typeof type && (data = type, type = "fx", setter--), arguments.length < setter ? jQuery.queue(this[0], type) : void 0 === data ? this : this.each(function() {
                var queue = jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                if ("fx" === type) {
                    if ("inprogress" !== queue[0]) {
                        jQuery.dequeue(this, type);
                    }
                }
            });
        },
        /**
         * @param {string} type
         * @return {?}
         */
        dequeue : function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        /**
         * @param {string} type
         * @return {?}
         */
        clearQueue : function(type) {
            return this.queue(type || "fx", []);
        },
        /**
         * @param {string} type
         * @param {string} obj
         * @return {?}
         */
        promise : function(type, obj) {
            var body;
            /** @type {number} */
            var d = 1;
            var defer = jQuery.Deferred();
            var elements = this;
            var i = this.length;
            /**
             * @return {undefined}
             */
            var resolve = function() {
                if (!--d) {
                    defer.resolveWith(elements, [elements]);
                }
            };
            if ("string" != typeof type) {
                /** @type {string} */
                obj = type;
                type = void 0;
            }
            type = type || "fx";
            for (;i--;) {
                body = data_priv.get(elements[i], type + "queueHooks");
                if (body) {
                    if (body.empty) {
                        d++;
                        body.empty.add(resolve);
                    }
                }
            }
            return resolve(), defer.promise(obj);
        }
    });
    /** @type {string} */
    var core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
    /** @type {Array} */
    var cssExpand = ["Top", "Right", "Bottom", "Left"];
    /**
     * @param {Object} node
     * @param {Function} context
     * @return {?}
     */
    var isHidden = function(node, context) {
        return node = context || node, "none" === jQuery.css(node, "display") || !jQuery.contains(node.ownerDocument, node);
    };
    /** @type {RegExp} */
    var manipulation_rcheckableType = /^(?:checkbox|radio)$/i;
    !function() {
        var fragment = optgroup.createDocumentFragment();
        var form = fragment.appendChild(optgroup.createElement("div"));
        var input = optgroup.createElement("input");
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        form.appendChild(input);
        support.checkClone = form.cloneNode(true).cloneNode(true).lastChild.checked;
        /** @type {string} */
        form.innerHTML = "<textarea>x</textarea>";
        /** @type {boolean} */
        support.noCloneChecked = !!form.cloneNode(true).lastChild.defaultValue;
    }();
    /** @type {boolean} */
    support.focusinBubbles = "onfocusin" in win;
    /** @type {RegExp} */
    var rmouseEvent = /^key/;
    /** @type {RegExp} */
    var rkeyEvent = /^(?:mouse|pointer|contextmenu|drag)|click/;
    /** @type {RegExp} */
    var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
    /** @type {RegExp} */
    var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
    jQuery.event = {
        global : {},
        /**
         * @param {string} elem
         * @param {Object} types
         * @param {Function} handler
         * @param {Object} e
         * @param {Object} selector
         * @return {undefined}
         */
        add : function(elem, types, handler, e, selector) {
            var handleObjIn;
            var eventHandle;
            var segmentMatch;
            var events;
            var t;
            var handleObj;
            var special;
            var handlers;
            var type;
            var namespaces;
            var origType;
            var elemData = data_priv.get(elem);
            if (elemData) {
                if (handler.handler) {
                    /** @type {Function} */
                    handleObjIn = handler;
                    handler = handleObjIn.handler;
                    selector = handleObjIn.selector;
                }
                if (!handler.guid) {
                    /** @type {number} */
                    handler.guid = jQuery.guid++;
                }
                if (!(events = elemData.events)) {
                    events = elemData.events = {};
                }
                if (!(eventHandle = elemData.handle)) {
                    /** @type {function (Event): ?} */
                    eventHandle = elemData.handle = function(event) {
                        return "undefined" != typeof jQuery && jQuery.event.triggered !== event.type ? jQuery.event.dispatch.apply(elem, arguments) : void 0;
                    };
                }
                types = (types || "").match(rvar) || [""];
                t = types.length;
                for (;t--;) {
                    /** @type {Array} */
                    segmentMatch = rtypenamespace.exec(types[t]) || [];
                    type = origType = segmentMatch[1];
                    namespaces = (segmentMatch[2] || "").split(".").sort();
                    if (type) {
                        special = jQuery.event.special[type] || {};
                        type = (selector ? special.delegateType : special.bindType) || type;
                        special = jQuery.event.special[type] || {};
                        handleObj = jQuery.extend({
                            type : type,
                            origType : origType,
                            data : e,
                            /** @type {Function} */
                            handler : handler,
                            guid : handler.guid,
                            selector : selector,
                            needsContext : selector && jQuery.expr.match.needsContext.test(selector),
                            namespace : namespaces.join(".")
                        }, handleObjIn);
                        if (!(handlers = events[type])) {
                            /** @type {Array} */
                            handlers = events[type] = [];
                            /** @type {number} */
                            handlers.delegateCount = 0;
                            if (!(special.setup && special.setup.call(elem, e, namespaces, eventHandle) !== false)) {
                                if (elem.addEventListener) {
                                    elem.addEventListener(type, eventHandle, false);
                                }
                            }
                        }
                        if (special.add) {
                            special.add.call(elem, handleObj);
                            if (!handleObj.handler.guid) {
                                handleObj.handler.guid = handler.guid;
                            }
                        }
                        if (selector) {
                            handlers.splice(handlers.delegateCount++, 0, handleObj);
                        } else {
                            handlers.push(handleObj);
                        }
                        /** @type {boolean} */
                        jQuery.event.global[type] = true;
                    }
                }
            }
        },
        /**
         * @param {string} elem
         * @param {Object} types
         * @param {Function} handler
         * @param {string} selector
         * @param {boolean} keepData
         * @return {undefined}
         */
        remove : function(elem, types, handler, selector, keepData) {
            var j;
            var origCount;
            var tmp;
            var events;
            var t;
            var handleObj;
            var special;
            var handlers;
            var type;
            var namespaces;
            var origType;
            var elemData = data_priv.hasData(elem) && data_priv.get(elem);
            if (elemData && (events = elemData.events)) {
                types = (types || "").match(rvar) || [""];
                t = types.length;
                for (;t--;) {
                    if (tmp = rtypenamespace.exec(types[t]) || [], type = origType = tmp[1], namespaces = (tmp[2] || "").split(".").sort(), type) {
                        special = jQuery.event.special[type] || {};
                        type = (selector ? special.delegateType : special.bindType) || type;
                        handlers = events[type] || [];
                        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                        origCount = j = handlers.length;
                        for (;j--;) {
                            handleObj = handlers[j];
                            if (!(!keepData && origType !== handleObj.origType)) {
                                if (!(handler && handler.guid !== handleObj.guid)) {
                                    if (!(tmp && !tmp.test(handleObj.namespace))) {
                                        if (!(selector && (selector !== handleObj.selector && ("**" !== selector || !handleObj.selector)))) {
                                            handlers.splice(j, 1);
                                            if (handleObj.selector) {
                                                handlers.delegateCount--;
                                            }
                                            if (special.remove) {
                                                special.remove.call(elem, handleObj);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (origCount) {
                            if (!handlers.length) {
                                if (!(special.teardown && special.teardown.call(elem, namespaces, elemData.handle) !== false)) {
                                    jQuery.removeEvent(elem, type, elemData.handle);
                                }
                                delete events[type];
                            }
                        }
                    } else {
                        for (type in events) {
                            jQuery.event.remove(elem, type + types[t], handler, selector, true);
                        }
                    }
                }
                if (jQuery.isEmptyObject(events)) {
                    delete elemData.handle;
                    data_priv.remove(elem, "events");
                }
            }
        },
        /**
         * @param {Object} event
         * @param {?} data
         * @param {Object} elem
         * @param {boolean} onlyHandlers
         * @return {?}
         */
        trigger : function(event, data, elem, onlyHandlers) {
            var i;
            var cur;
            var tmp;
            var bubbleType;
            var ontype;
            var handle;
            var special;
            /** @type {Array} */
            var eventPath = [elem || optgroup];
            var type = core_hasOwn.call(event, "type") ? event.type : event;
            var namespaces = core_hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            if (cur = tmp = elem = elem || optgroup, 3 !== elem.nodeType && (8 !== elem.nodeType && (!rfocusMorph.test(type + jQuery.event.triggered) && (type.indexOf(".") >= 0 && (namespaces = type.split("."), type = namespaces.shift(), namespaces.sort()), ontype = type.indexOf(":") < 0 && "on" + type, event = event[jQuery.expando] ? event : new jQuery.Event(type, "object" == typeof event && event), event.isTrigger = onlyHandlers ? 2 : 3, event.namespace = namespaces.join("."), event.rnamespace = event.namespace ?
                    new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, event.result = void 0, event.target || (event.target = elem), data = null == data ? [event] : jQuery.makeArray(data, [event]), special = jQuery.event.special[type] || {}, onlyHandlers || (!special.trigger || special.trigger.apply(elem, data) !== false))))) {
                if (!onlyHandlers && (!special.noBubble && !jQuery.isWindow(elem))) {
                    bubbleType = special.delegateType || type;
                    if (!rfocusMorph.test(bubbleType + type)) {
                        cur = cur.parentNode;
                    }
                    for (;cur;cur = cur.parentNode) {
                        eventPath.push(cur);
                        tmp = cur;
                    }
                    if (tmp === (elem.ownerDocument || optgroup)) {
                        eventPath.push(tmp.defaultView || (tmp.parentWindow || win));
                    }
                }
                /** @type {number} */
                i = 0;
                for (;(cur = eventPath[i++]) && !event.isPropagationStopped();) {
                    event.type = i > 1 ? bubbleType : special.bindType || type;
                    handle = (data_priv.get(cur, "events") || {})[event.type] && data_priv.get(cur, "handle");
                    if (handle) {
                        handle.apply(cur, data);
                    }
                    handle = ontype && cur[ontype];
                    if (handle) {
                        if (handle.apply) {
                            if (jQuery.acceptData(cur)) {
                                event.result = handle.apply(cur, data);
                                if (event.result === false) {
                                    event.preventDefault();
                                }
                            }
                        }
                    }
                }
                return event.type = type, onlyHandlers || (event.isDefaultPrevented() || (special._default && special._default.apply(eventPath.pop(), data) !== false || (!jQuery.acceptData(elem) || ontype && (jQuery.isFunction(elem[type]) && (!jQuery.isWindow(elem) && (tmp = elem[ontype], tmp && (elem[ontype] = null), jQuery.event.triggered = type, elem[type](), jQuery.event.triggered = void 0, tmp && (elem[ontype] = tmp))))))), event.result;
            }
        },
        /**
         * @param {Object} event
         * @return {?}
         */
        dispatch : function(event) {
            event = jQuery.event.fix(event);
            var i;
            var j;
            var ret;
            var matched;
            var handleObj;
            /** @type {Array} */
            var handlerQueue = [];
            /** @type {Array.<?>} */
            var args = core_slice.call(arguments);
            var handlers = (data_priv.get(this, "events") || {})[event.type] || [];
            var special = jQuery.event.special[event.type] || {};
            if (args[0] = event, event.delegateTarget = this, !special.preDispatch || special.preDispatch.call(this, event) !== false) {
                handlerQueue = jQuery.event.handlers.call(this, event, handlers);
                /** @type {number} */
                i = 0;
                for (;(matched = handlerQueue[i++]) && !event.isPropagationStopped();) {
                    event.currentTarget = matched.elem;
                    /** @type {number} */
                    j = 0;
                    for (;(handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped();) {
                        if (!(event.rnamespace && !event.rnamespace.test(handleObj.namespace))) {
                            event.handleObj = handleObj;
                            event.data = handleObj.data;
                            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                            if (void 0 !== ret) {
                                if ((event.result = ret) === false) {
                                    event.preventDefault();
                                    event.stopPropagation();
                                }
                            }
                        }
                    }
                }
                return special.postDispatch && special.postDispatch.call(this, event), event.result;
            }
        },
        /**
         * @param {Event} event
         * @param {Object} handlers
         * @return {?}
         */
        handlers : function(event, handlers) {
            var i;
            var bucket;
            var rvar;
            var value;
            /** @type {Array} */
            var handlerQueue = [];
            var delegateCount = handlers.delegateCount;
            var optgroup = event.target;
            if (delegateCount && (optgroup.nodeType && (!event.button || "click" !== event.type))) {
                for (;optgroup !== this;optgroup = optgroup.parentNode || this) {
                    if (optgroup.disabled !== true || "click" !== event.type) {
                        /** @type {Array} */
                        bucket = [];
                        /** @type {number} */
                        i = 0;
                        for (;i < delegateCount;i++) {
                            value = handlers[i];
                            /** @type {string} */
                            rvar = value.selector + " ";
                            if (void 0 === bucket[rvar]) {
                                bucket[rvar] = value.needsContext ? jQuery(rvar, this).index(optgroup) >= 0 : jQuery.find(rvar, this, null, [optgroup]).length;
                            }
                            if (bucket[rvar]) {
                                bucket.push(value);
                            }
                        }
                        if (bucket.length) {
                            handlerQueue.push({
                                elem : optgroup,
                                handlers : bucket
                            });
                        }
                    }
                }
            }
            return delegateCount < handlers.length && handlerQueue.push({
                elem : this,
                handlers : handlers.slice(delegateCount)
            }), handlerQueue;
        },
        props : "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks : {},
        keyHooks : {
            props : "char charCode key keyCode".split(" "),
            /**
             * @param {string} name
             * @param {Function} recurring
             * @return {?}
             */
            filter : function(name, recurring) {
                return null == name.which && (name.which = null != recurring.charCode ? recurring.charCode : recurring.keyCode), name;
            }
        },
        mouseHooks : {
            props : "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            /**
             * @param {string} name
             * @param {Function} recurring
             * @return {?}
             */
            filter : function(name, recurring) {
                var eventDoc;
                var doc;
                var body;
                var old = recurring.button;
                return null == name.pageX && (null != recurring.clientX && (eventDoc = name.target.ownerDocument || optgroup, doc = eventDoc.documentElement, body = eventDoc.body, name.pageX = recurring.clientX + (doc && doc.scrollLeft || (body && body.scrollLeft || 0)) - (doc && doc.clientLeft || (body && body.clientLeft || 0)), name.pageY = recurring.clientY + (doc && doc.scrollTop || (body && body.scrollTop || 0)) - (doc && doc.clientTop || (body && body.clientTop || 0)))), name.which || (void 0 === old ||
                    (name.which = 1 & old ? 1 : 2 & old ? 3 : 4 & old ? 2 : 0)), name;
            }
        },
        /**
         * @param {string} optgroup
         * @return {?}
         */
        fix : function(optgroup) {
            if (optgroup[jQuery.expando]) {
                return optgroup;
            }
            var i;
            var prop;
            var copy;
            var type = optgroup.type;
            /** @type {string} */
            var recurring = optgroup;
            var fixHook = this.fixHooks[type];
            if (!fixHook) {
                this.fixHooks[type] = fixHook = rkeyEvent.test(type) ? this.mouseHooks : rmouseEvent.test(type) ? this.keyHooks : {};
            }
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            optgroup = new jQuery.Event(recurring);
            i = copy.length;
            for (;i--;) {
                prop = copy[i];
                optgroup[prop] = recurring[prop];
            }
            return 3 === optgroup.target.nodeType && (optgroup.target = optgroup.target.parentNode), fixHook.filter ? fixHook.filter(optgroup, recurring) : optgroup;
        },
        special : {
            load : {
                noBubble : true
            },
            focus : {
                /**
                 * @return {?}
                 */
                trigger : function() {
                    if (this !== safeActiveElement() && this.focus) {
                        return this.focus(), false;
                    }
                },
                delegateType : "focusin"
            },
            blur : {
                /**
                 * @return {?}
                 */
                trigger : function() {
                    if (this === safeActiveElement() && this.blur) {
                        return this.blur(), false;
                    }
                },
                delegateType : "focusout"
            },
            click : {
                /**
                 * @return {?}
                 */
                trigger : function() {
                    if ("checkbox" === this.type && (this.click && jQuery.nodeName(this, "input"))) {
                        return this.click(), false;
                    }
                },
                /**
                 * @param {Event} event
                 * @return {?}
                 */
                _default : function(event) {
                    return jQuery.nodeName(event.target, "a");
                }
            },
            beforeunload : {
                /**
                 * @param {Object} event
                 * @return {undefined}
                 */
                postDispatch : function(event) {
                    if (void 0 !== event.result) {
                        if (event.originalEvent) {
                            event.originalEvent.returnValue = event.result;
                        }
                    }
                }
            }
        },
        /**
         * @param {string} type
         * @param {Object} elem
         * @param {Object} event
         * @param {boolean} dataAndEvents
         * @return {undefined}
         */
        simulate : function(type, elem, event, dataAndEvents) {
            var e = jQuery.extend(new jQuery.Event, event, {
                type : type,
                isSimulated : true,
                originalEvent : {}
            });
            if (dataAndEvents) {
                jQuery.event.trigger(e, null, elem);
            } else {
                jQuery.event.dispatch.call(elem, e);
            }
            if (e.isDefaultPrevented()) {
                event.preventDefault();
            }
        }
    };
    /**
     * @param {?} elem
     * @param {string} type
     * @param {string} fn
     * @return {undefined}
     */
    jQuery.removeEvent = function(elem, type, fn) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, fn, false);
        }
    };
    /**
     * @param {string} name
     * @param {Function} recurring
     * @return {?}
     */
    jQuery.Event = function(name, recurring) {
        return this instanceof jQuery.Event ? (name && name.type ? (this.originalEvent = name, this.type = name.type, this.isDefaultPrevented = name.defaultPrevented || void 0 === name.defaultPrevented && name.returnValue === false ? returnTrue : returnFalse) : this.type = name, recurring && jQuery.extend(this, recurring), this.timeStamp = name && name.timeStamp || jQuery.now(), void(this[jQuery.expando] = true)) : new jQuery.Event(name, recurring);
    };
    jQuery.Event.prototype = {
        /** @type {function (string, Function): ?} */
        constructor : jQuery.Event,
        /** @type {function (): ?} */
        isDefaultPrevented : returnFalse,
        /** @type {function (): ?} */
        isPropagationStopped : returnFalse,
        /** @type {function (): ?} */
        isImmediatePropagationStopped : returnFalse,
        /**
         * @return {undefined}
         */
        preventDefault : function() {
            var e = this.originalEvent;
            /** @type {function (): ?} */
            this.isDefaultPrevented = returnTrue;
            if (e) {
                if (e.preventDefault) {
                    e.preventDefault();
                }
            }
        },
        /**
         * @return {undefined}
         */
        stopPropagation : function() {
            var e = this.originalEvent;
            /** @type {function (): ?} */
            this.isPropagationStopped = returnTrue;
            if (e) {
                if (e.stopPropagation) {
                    e.stopPropagation();
                }
            }
        },
        /**
         * @return {undefined}
         */
        stopImmediatePropagation : function() {
            var e = this.originalEvent;
            /** @type {function (): ?} */
            this.isImmediatePropagationStopped = returnTrue;
            if (e) {
                if (e.stopImmediatePropagation) {
                    e.stopImmediatePropagation();
                }
            }
            this.stopPropagation();
        }
    };
    jQuery.each({
        mouseenter : "mouseover",
        mouseleave : "mouseout",
        pointerenter : "pointerover",
        pointerleave : "pointerout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            delegateType : fix,
            bindType : fix,
            /**
             * @param {Event} event
             * @return {?}
             */
            handle : function(event) {
                var returnValue;
                var doc = this;
                var a = event.relatedTarget;
                var handleObj = event.handleObj;
                return a && (a === doc || jQuery.contains(doc, a)) || (event.type = handleObj.origType, returnValue = handleObj.handler.apply(this, arguments), event.type = fix), returnValue;
            }
        };
    });
    if (!support.focusinBubbles) {
        jQuery.each({
            focus : "focusin",
            blur : "focusout"
        }, function(event, name) {
            /**
             * @param {(Object|string)} event
             * @return {undefined}
             */
            var handler = function(event) {
                jQuery.event.simulate(name, event.target, jQuery.event.fix(event), true);
            };
            jQuery.event.special[name] = {
                /**
                 * @return {undefined}
                 */
                setup : function() {
                    var node = this.ownerDocument || this;
                    var descriptor = data_priv.access(node, name);
                    if (!descriptor) {
                        node.addEventListener(event, handler, true);
                    }
                    data_priv.access(node, name, (descriptor || 0) + 1);
                },
                /**
                 * @return {undefined}
                 */
                teardown : function() {
                    var elem = this.ownerDocument || this;
                    /** @type {number} */
                    var data = data_priv.access(elem, name) - 1;
                    if (data) {
                        data_priv.access(elem, name, data);
                    } else {
                        elem.removeEventListener(event, handler, true);
                        data_priv.remove(elem, name);
                    }
                }
            };
        });
    }
    jQuery.fn.extend({
        /**
         * @param {string} type
         * @param {Function} selector
         * @param {Function} data
         * @param {Function} fn
         * @param {(number|string)} one
         * @return {?}
         */
        on : function(type, selector, data, fn, one) {
            var origFn;
            var fix;
            if ("object" == typeof type) {
                if ("string" != typeof selector) {
                    data = data || selector;
                    selector = void 0;
                }
                for (fix in type) {
                    this.on(fix, selector, data, type[fix], one);
                }
                return this;
            }
            if (null == data && null == fn ? (fn = selector, data = selector = void 0) : null == fn && ("string" == typeof selector ? (fn = data, data = void 0) : (fn = data, data = selector, selector = void 0)), fn === false) {
                /** @type {function (): ?} */
                fn = returnFalse;
            } else {
                if (!fn) {
                    return this;
                }
            }
            return 1 === one && (origFn = fn, fn = function(event) {
                return jQuery().off(event), origFn.apply(this, arguments);
            }, fn.guid = origFn.guid || (origFn.guid = jQuery.guid++)), this.each(function() {
                jQuery.event.add(this, type, fn, data, selector);
            });
        },
        /**
         * @param {string} type
         * @param {Function} selector
         * @param {Object} data
         * @param {Function} fn
         * @return {?}
         */
        one : function(type, selector, data, fn) {
            return this.on(type, selector, data, fn, 1);
        },
        /**
         * @param {Object} types
         * @param {Function} selector
         * @param {Function} fn
         * @return {?}
         */
        off : function(types, selector, fn) {
            var handleObj;
            var type;
            if (types && (types.preventDefault && types.handleObj)) {
                return handleObj = types.handleObj, jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler), this;
            }
            if ("object" == typeof types) {
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            return selector !== false && "function" != typeof selector || (fn = selector, selector = void 0), fn === false && (fn = returnFalse), this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        },
        /**
         * @param {string} type
         * @param {?} data
         * @return {?}
         */
        trigger : function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        /**
         * @param {string} type
         * @param {?} data
         * @return {?}
         */
        triggerHandler : function(type, data) {
            var parent = this[0];
            if (parent) {
                return jQuery.event.trigger(type, data, parent, true);
            }
        }
    });
    /** @type {RegExp} */
    var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;
    /** @type {RegExp} */
    var rtagName = /<([\w:]+)/;
    /** @type {RegExp} */
    var reWhitespace = /<|&#?\w+;/;
    /** @type {RegExp} */
    var rchecked = /<(?:script|style|link)/i;
    /** @type {RegExp} */
    var exclude = /checked\s*(?:[^=]|=\s*.checked.)/i;
    /** @type {RegExp} */
    var stopParent = /^$|\/(?:java|ecma)script/i;
    /** @type {RegExp} */
    var rscriptTypeMasked = /^true\/(.*)/;
    /** @type {RegExp} */
    var rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    var wrapMap = {
        option : [1, "<select multiple='multiple'>", "</select>"],
        thead : [1, "<table>", "</table>"],
        col : [2, "<table><colgroup>", "</colgroup></table>"],
        tr : [2, "<table><tbody>", "</tbody></table>"],
        td : [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default : [0, "", ""]
    };
    /** @type {Array} */
    wrapMap.optgroup = wrapMap.option;
    /** @type {Array} */
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    /** @type {Array} */
    wrapMap.th = wrapMap.td;
    jQuery.extend({
        /**
         * @param {Object} elem
         * @param {boolean} dataAndEvents
         * @param {boolean} deepDataAndEvents
         * @return {?}
         */
        clone : function(elem, dataAndEvents, deepDataAndEvents) {
            var i;
            var l;
            var srcElements;
            var destElements;
            var clone = elem.cloneNode(true);
            var inPage = jQuery.contains(elem.ownerDocument, elem);
            if (!(support.noCloneChecked || (1 !== elem.nodeType && 11 !== elem.nodeType || jQuery.isXMLDoc(elem)))) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                /** @type {number} */
                i = 0;
                l = srcElements.length;
                for (;i < l;i++) {
                    fixInput(srcElements[i], destElements[i]);
                }
            }
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    /** @type {number} */
                    i = 0;
                    l = srcElements.length;
                    for (;i < l;i++) {
                        cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }
            return destElements = getAll(clone, "script"), destElements.length > 0 && setGlobalEval(destElements, !inPage && getAll(elem, "script")), clone;
        },
        /**
         * @param {Array} elems
         * @param {Document} doc
         * @param {boolean} nodes
         * @param {?} selection
         * @return {?}
         */
        buildFragment : function(elems, doc, nodes, selection) {
            var optgroup;
            var tmp;
            var tag;
            var wrap;
            var i;
            var j;
            var fragment = doc.createDocumentFragment();
            /** @type {Array} */
            var scripts = [];
            /** @type {number} */
            var index = 0;
            var length = elems.length;
            for (;index < length;index++) {
                if (optgroup = elems[index], optgroup || 0 === optgroup) {
                    if ("object" === jQuery.type(optgroup)) {
                        jQuery.merge(scripts, optgroup.nodeType ? [optgroup] : optgroup);
                    } else {
                        if (reWhitespace.test(optgroup)) {
                            tmp = tmp || fragment.appendChild(doc.createElement("div"));
                            tag = (rtagName.exec(optgroup) || ["", ""])[1].toLowerCase();
                            wrap = wrapMap[tag] || wrapMap._default;
                            tmp.innerHTML = wrap[1] + optgroup.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                            j = wrap[0];
                            for (;j--;) {
                                tmp = tmp.lastChild;
                            }
                            jQuery.merge(scripts, tmp.childNodes);
                            tmp = fragment.firstChild;
                            /** @type {string} */
                            tmp.textContent = "";
                        } else {
                            scripts.push(doc.createTextNode(optgroup));
                        }
                    }
                }
            }
            /** @type {string} */
            fragment.textContent = "";
            /** @type {number} */
            index = 0;
            for (;optgroup = scripts[index++];) {
                if ((!selection || jQuery.inArray(optgroup, selection) === -1) && (i = jQuery.contains(optgroup.ownerDocument, optgroup), tmp = getAll(fragment.appendChild(optgroup), "script"), i && setGlobalEval(tmp), nodes)) {
                    /** @type {number} */
                    j = 0;
                    for (;optgroup = tmp[j++];) {
                        if (stopParent.test(optgroup.type || "")) {
                            nodes.push(optgroup);
                        }
                    }
                }
            }
            return fragment;
        },
        /**
         * @param {?} elems
         * @return {undefined}
         */
        cleanData : function(elems) {
            var data;
            var elem;
            var type;
            var key;
            var special = jQuery.event.special;
            /** @type {number} */
            var i = 0;
            for (;void 0 !== (elem = elems[i]);i++) {
                if (jQuery.acceptData(elem) && (key = elem[data_priv.expando], key && (data = data_priv.cache[key]))) {
                    if (data.events) {
                        for (type in data.events) {
                            if (special[type]) {
                                jQuery.event.remove(elem, type);
                            } else {
                                jQuery.removeEvent(elem, type, data.handle);
                            }
                        }
                    }
                    if (data_priv.cache[key]) {
                        delete data_priv.cache[key];
                    }
                }
                delete data_user.cache[elem[data_user.expando]];
            }
        }
    });
    jQuery.fn.extend({
        /**
         * @param {string} name
         * @return {?}
         */
        text : function(name) {
            return access(this, function(textString) {
                return void 0 === textString ? jQuery.text(this) : this.empty().each(function() {
                    if (!(1 !== this.nodeType && (11 !== this.nodeType && 9 !== this.nodeType))) {
                        /** @type {string} */
                        this.textContent = textString;
                    }
                });
            }, null, name, arguments.length);
        },
        /**
         * @return {?}
         */
        append : function() {
            return this.domManip(arguments, function(elem) {
                if (1 === this.nodeType || (11 === this.nodeType || 9 === this.nodeType)) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        /**
         * @return {?}
         */
        prepend : function() {
            return this.domManip(arguments, function(elem) {
                if (1 === this.nodeType || (11 === this.nodeType || 9 === this.nodeType)) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        /**
         * @return {?}
         */
        before : function() {
            return this.domManip(arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },
        /**
         * @return {?}
         */
        after : function() {
            return this.domManip(arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },
        /**
         * @param {string} optgroup
         * @param {Object} keepData
         * @return {?}
         */
        remove : function(optgroup, keepData) {
            var elem;
            var curLoop = optgroup ? jQuery.filter(optgroup, this) : this;
            /** @type {number} */
            var i = 0;
            for (;null != (elem = curLoop[i]);i++) {
                if (!keepData) {
                    if (!(1 !== elem.nodeType)) {
                        jQuery.cleanData(getAll(elem));
                    }
                }
                if (elem.parentNode) {
                    if (keepData) {
                        if (jQuery.contains(elem.ownerDocument, elem)) {
                            setGlobalEval(getAll(elem, "script"));
                        }
                    }
                    elem.parentNode.removeChild(elem);
                }
            }
            return this;
        },
        /**
         * @return {?}
         */
        empty : function() {
            var elem;
            /** @type {number} */
            var unlock = 0;
            for (;null != (elem = this[unlock]);unlock++) {
                if (1 === elem.nodeType) {
                    jQuery.cleanData(getAll(elem, false));
                    /** @type {string} */
                    elem.textContent = "";
                }
            }
            return this;
        },
        /**
         * @param {Object} dataAndEvents
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        clone : function(dataAndEvents, deepDataAndEvents) {
            return dataAndEvents = null != dataAndEvents && dataAndEvents, deepDataAndEvents = null == deepDataAndEvents ? dataAndEvents : deepDataAndEvents, this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        /**
         * @param {string} value
         * @return {?}
         */
        html : function(value) {
            return access(this, function(value) {
                var elem = this[0] || {};
                /** @type {number} */
                var i = 0;
                var l = this.length;
                if (void 0 === value && 1 === elem.nodeType) {
                    return elem.innerHTML;
                }
                if ("string" == typeof value && (!rchecked.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()])) {
                    /** @type {string} */
                    value = value.replace(rxhtmlTag, "<$1></$2>");
                    try {
                        for (;i < l;i++) {
                            elem = this[i] || {};
                            if (1 === elem.nodeType) {
                                jQuery.cleanData(getAll(elem, false));
                                /** @type {string} */
                                elem.innerHTML = value;
                            }
                        }
                        /** @type {number} */
                        elem = 0;
                    } catch (e) {
                    }
                }
                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },
        /**
         * @return {?}
         */
        replaceWith : function() {
            var arg = arguments[0];
            return this.domManip(arguments, function(s) {
                arg = this.parentNode;
                jQuery.cleanData(getAll(this));
                if (arg) {
                    arg.replaceChild(s, this);
                }
            }), arg && (arg.length || arg.nodeType) ? this : this.remove();
        },
        /**
         * @param {string} selector
         * @return {?}
         */
        detach : function(selector) {
            return this.remove(selector, true);
        },
        /**
         * @param {Object} args
         * @param {Function} callback
         * @return {?}
         */
        domManip : function(args, callback) {
            /** @type {Array} */
            args = core_concat.apply([], args);
            var fragment;
            var first;
            var optgroup;
            var valsLength;
            var node;
            var doc;
            /** @type {number} */
            var i = 0;
            var l = this.length;
            var set = this;
            /** @type {number} */
            var iNoClone = l - 1;
            var html = args[0];
            var isFunction = jQuery.isFunction(html);
            if (isFunction || l > 1 && ("string" == typeof html && (!support.checkClone && exclude.test(html)))) {
                return this.each(function(index) {
                    var self = set.eq(index);
                    if (isFunction) {
                        args[0] = html.call(this, index, self.html());
                    }
                    self.domManip(args, callback);
                });
            }
            if (l && (fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this), first = fragment.firstChild, 1 === fragment.childNodes.length && (fragment = first), first)) {
                optgroup = jQuery.map(getAll(fragment, "script"), recurring);
                valsLength = optgroup.length;
                for (;i < l;i++) {
                    node = fragment;
                    if (i !== iNoClone) {
                        node = jQuery.clone(node, true, true);
                        if (valsLength) {
                            jQuery.merge(optgroup, getAll(node, "script"));
                        }
                    }
                    callback.call(this[i], node, i);
                }
                if (valsLength) {
                    doc = optgroup[optgroup.length - 1].ownerDocument;
                    jQuery.map(optgroup, restoreScript);
                    /** @type {number} */
                    i = 0;
                    for (;i < valsLength;i++) {
                        node = optgroup[i];
                        if (stopParent.test(node.type || "")) {
                            if (!data_priv.access(node, "globalEval")) {
                                if (jQuery.contains(doc, node)) {
                                    if (node.src) {
                                        if (jQuery._evalUrl) {
                                            jQuery._evalUrl(node.src);
                                        }
                                    } else {
                                        jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return this;
        }
    });
    jQuery.each({
        appendTo : "append",
        prependTo : "prepend",
        insertBefore : "before",
        insertAfter : "after",
        replaceAll : "replaceWith"
    }, function(original, method) {
        /**
         * @param {string} optgroup
         * @return {?}
         */
        jQuery.fn[original] = function(optgroup) {
            var resp;
            /** @type {Array} */
            var ret = [];
            var insert = jQuery(optgroup);
            /** @type {number} */
            var last = insert.length - 1;
            /** @type {number} */
            var i = 0;
            for (;i <= last;i++) {
                resp = i === last ? this : this.clone(true);
                jQuery(insert[i])[method](resp);
                core_push.apply(ret, resp.get());
            }
            return this.pushStack(ret);
        };
    });
    var iframe;
    var elemdisplay = {
        HTML : "block",
        BODY : "block"
    };
    /** @type {RegExp} */
    var rmargin = /^margin/;
    /** @type {RegExp} */
    var regexp = new RegExp("^(" + core_pnum + ")(?!px)[a-z%]+$", "i");
    /**
     * @param {Node} elem
     * @return {?}
     */
    var getStyles = function(elem) {
        return elem.ownerDocument.defaultView.opener ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : win.getComputedStyle(elem, null);
    };
    var root = optgroup.documentElement;
    !function() {
        /**
         * @return {undefined}
         */
        function computePixelPositionAndBoxSizingReliable() {
            /** @type {string} */
            div.style.cssText = "-webkit-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute";
            /** @type {string} */
            div.innerHTML = "";
            root.appendChild(el);
            var divStyle = win.getComputedStyle(div, null);
            /** @type {boolean} */
            c = "1%" !== divStyle.top;
            /** @type {boolean} */
            d = "4px" === divStyle.width;
            root.removeChild(el);
        }
        var c;
        var d;
        var el = optgroup.createElement("div");
        var div = optgroup.createElement("div");
        if (div.style) {
            /** @type {string} */
            div.style.backgroundClip = "content-box";
            /** @type {string} */
            div.cloneNode(true).style.backgroundClip = "";
            /** @type {boolean} */
            support.clearCloneStyle = "content-box" === div.style.backgroundClip;
            /** @type {string} */
            el.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute";
            el.appendChild(div);
            if (win.getComputedStyle) {
                jQuery.extend(support, {
                    /**
                     * @return {?}
                     */
                    pixelPosition : function() {
                        return computePixelPositionAndBoxSizingReliable(), c;
                    },
                    /**
                     * @return {?}
                     */
                    boxSizingReliable : function() {
                        return null == d && computePixelPositionAndBoxSizingReliable(), d;
                    },
                    /**
                     * @return {?}
                     */
                    reliableMarginRight : function() {
                        var b;
                        var marginDiv = div.appendChild(optgroup.createElement("div"));
                        return marginDiv.style.cssText = div.style.cssText = "-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", marginDiv.style.marginRight = marginDiv.style.width = "0", div.style.width = "1px", root.appendChild(el), b = !parseFloat(win.getComputedStyle(marginDiv, null).marginRight), root.removeChild(el), div.removeChild(marginDiv), b;
                    }
                });
            }
        }
    }();
    /**
     * @param {Element} elem
     * @param {Object} options
     * @param {Function} callback
     * @param {Array} args
     * @return {?}
     */
    jQuery.swap = function(elem, options, callback, args) {
        var ret;
        var name;
        var old = {};
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        for (name in options) {
            elem.style[name] = old[name];
        }
        return ret;
    };
    /** @type {RegExp} */
    var rdisplayswap = /^(none|table(?!-c[ea]).+)/;
    /** @type {RegExp} */
    var rrelNum = new RegExp("^(" + core_pnum + ")(.*)$", "i");
    /** @type {RegExp} */
    var re2 = new RegExp("^([+-])=(" + core_pnum + ")", "i");
    var props = {
        position : "absolute",
        visibility : "hidden",
        display : "block"
    };
    var cssNormalTransform = {
        letterSpacing : "0",
        fontWeight : "400"
    };
    /** @type {Array} */
    var VENDOR_PREFIXES = ["Webkit", "Moz", "ms"];
    jQuery.extend({
        cssHooks : {
            opacity : {
                /**
                 * @param {string} elem
                 * @param {string} value
                 * @return {?}
                 */
                get : function(elem, value) {
                    if (value) {
                        var ret = curCSS(elem, "opacity");
                        return "" === ret ? "1" : ret;
                    }
                }
            }
        },
        cssNumber : {
            columnCount : true,
            fillOpacity : true,
            flexGrow : true,
            flexShrink : true,
            fontWeight : true,
            lineHeight : true,
            opacity : true,
            order : true,
            orphans : true,
            widows : true,
            zIndex : true,
            zoom : true
        },
        cssProps : {
            float : "cssFloat"
        },
        /**
         * @param {string} elem
         * @param {string} name
         * @param {string} val
         * @param {string} extra
         * @return {?}
         */
        style : function(elem, name, val, extra) {
            if (elem && (3 !== elem.nodeType && (8 !== elem.nodeType && elem.style))) {
                var ret;
                var type;
                var hooks;
                var origName = jQuery.camelCase(name);
                var style = elem.style;
                return name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName)), hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName], void 0 === val ? hooks && ("get" in hooks && void 0 !== (ret = hooks.get(elem, false, extra))) ? ret : style[name] : (type = typeof val, "string" === type && ((ret = re2.exec(val)) && (val = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name)), type = "number")), null != val && (val === val && ("number" !== type || (jQuery.cssNumber[origName] ||
                    (val += "px")), support.clearCloneStyle || ("" !== val || (0 !== name.indexOf("background") || (style[name] = "inherit"))), hooks && ("set" in hooks && void 0 === (val = hooks.set(elem, val, extra))) || (style[name] = val))), void 0);
            }
        },
        /**
         * @param {string} prop
         * @param {string} name
         * @param {boolean} recurring
         * @param {?} val
         * @return {?}
         */
        css : function(prop, name, recurring, val) {
            var ret;
            var a;
            var result;
            var origName = jQuery.camelCase(name);
            return name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(prop.style, origName)), result = jQuery.cssHooks[name] || jQuery.cssHooks[origName], result && ("get" in result && (ret = result.get(prop, true, recurring))), void 0 === ret && (ret = curCSS(prop, name, val)), "normal" === ret && (name in cssNormalTransform && (ret = cssNormalTransform[name])), "" === recurring || recurring ? (a = parseFloat(ret), recurring === true || jQuery.isNumeric(a) ? a || 0 : ret) :
                ret;
        }
    });
    jQuery.each(["height", "width"], function(dataAndEvents, name) {
        jQuery.cssHooks[name] = {
            /**
             * @param {string} elem
             * @param {string} value
             * @param {string} extra
             * @return {?}
             */
            get : function(elem, value, extra) {
                if (value) {
                    return rdisplayswap.test(jQuery.css(elem, "display")) && 0 === elem.offsetWidth ? jQuery.swap(elem, props, function() {
                        return getWidthOrHeight(elem, name, extra);
                    }) : getWidthOrHeight(elem, name, extra);
                }
            },
            /**
             * @param {string} elem
             * @param {string} value
             * @param {string} extra
             * @return {?}
             */
            set : function(elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, "border-box" === jQuery.css(elem, "boxSizing", false, styles), styles) : 0);
            }
        };
    });
    jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function(body, dataAndEvents) {
        if (dataAndEvents) {
            return jQuery.swap(body, {
                display : "inline-block"
            }, curCSS, [body, "marginRight"]);
        }
    });
    jQuery.each({
        margin : "",
        padding : "",
        border : "Width"
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            /**
             * @param {string} line
             * @return {?}
             */
            expand : function(line) {
                /** @type {number} */
                var i = 0;
                var expanded = {};
                /** @type {Array} */
                var tokens = "string" == typeof line ? line.split(" ") : [line];
                for (;i < 4;i++) {
                    expanded[prefix + cssExpand[i] + suffix] = tokens[i] || (tokens[i - 2] || tokens[0]);
                }
                return expanded;
            }
        };
        if (!rmargin.test(prefix)) {
            /** @type {function (string, string, string): ?} */
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });
    jQuery.fn.extend({
        /**
         * @param {string} prop
         * @param {string} value
         * @return {?}
         */
        css : function(prop, value) {
            return access(this, function(fn, elements, value) {
                var styles;
                var ln;
                var map = {};
                /** @type {number} */
                var i = 0;
                if (jQuery.isArray(elements)) {
                    styles = getStyles(fn);
                    ln = elements.length;
                    for (;i < ln;i++) {
                        map[elements[i]] = jQuery.css(fn, elements[i], false, styles);
                    }
                    return map;
                }
                return void 0 !== value ? jQuery.style(fn, elements, value) : jQuery.css(fn, elements);
            }, prop, value, arguments.length > 1);
        },
        /**
         * @return {?}
         */
        show : function() {
            return showHide(this, true);
        },
        /**
         * @return {?}
         */
        hide : function() {
            return showHide(this);
        },
        /**
         * @param {?} state
         * @return {?}
         */
        toggle : function(state) {
            return "boolean" == typeof state ? state ? this.show() : this.hide() : this.each(function() {
                if (isHidden(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });
    /**
     * @param {?} time
     * @param {string} type
     * @return {?}
     */
    jQuery.fn.delay = function(time, type) {
        return time = jQuery.fx ? jQuery.fx.speeds[time] || time : time, type = type || "fx", this.queue(type, function(next, event) {
            /** @type {number} */
            var timeout = setTimeout(next, time);
            /**
             * @return {undefined}
             */
            event.stop = function() {
                clearTimeout(timeout);
            };
        });
    };
    (function() {
        var input = optgroup.createElement("input");
        var select = optgroup.createElement("select");
        var opt = select.appendChild(optgroup.createElement("option"));
        /** @type {string} */
        input.type = "checkbox";
        /** @type {boolean} */
        support.checkOn = "" !== input.value;
        support.optSelected = opt.selected;
        /** @type {boolean} */
        select.disabled = true;
        /** @type {boolean} */
        support.optDisabled = !opt.disabled;
        input = optgroup.createElement("input");
        /** @type {string} */
        input.value = "t";
        /** @type {string} */
        input.type = "radio";
        /** @type {boolean} */
        support.radioValue = "t" === input.value;
    })();
    var nodeHook;
    var boolHook;
    var values = jQuery.expr.attrHandle;
    jQuery.fn.extend({
        /**
         * @param {string} value
         * @param {string} name
         * @return {?}
         */
        attr : function(value, name) {
            return access(this, jQuery.attr, value, name, arguments.length > 1);
        },
        /**
         * @param {string} name
         * @return {?}
         */
        removeAttr : function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        /**
         * @param {string} elem
         * @param {string} name
         * @param {string} value
         * @return {?}
         */
        attr : function(elem, name, value) {
            var hooks;
            var ret;
            var nodeType = elem.nodeType;
            if (elem && (3 !== nodeType && (8 !== nodeType && 2 !== nodeType))) {
                return "undefined" == typeof elem.getAttribute ? jQuery.prop(elem, name, value) : (1 === nodeType && jQuery.isXMLDoc(elem) || (name = name.toLowerCase(), hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook)), void 0 === value ? hooks && ("get" in hooks && null !== (ret = hooks.get(elem, name))) ? ret : (ret = jQuery.find.attr(elem, name), null == ret ? void 0 : ret) : null !== value ? hooks && ("set" in hooks && void 0 !== (ret = hooks.set(elem, value,
                    name))) ? ret : (elem.setAttribute(name, value + ""), value) : void jQuery.removeAttr(elem, name));
            }
        },
        /**
         * @param {Object} elem
         * @param {string} value
         * @return {undefined}
         */
        removeAttr : function(elem, value) {
            var name;
            var propName;
            /** @type {number} */
            var i = 0;
            var attrNames = value && value.match(rvar);
            if (attrNames && 1 === elem.nodeType) {
                for (;name = attrNames[i++];) {
                    propName = jQuery.propFix[name] || name;
                    if (jQuery.expr.match.bool.test(name)) {
                        /** @type {boolean} */
                        elem[propName] = false;
                    }
                    elem.removeAttribute(name);
                }
            }
        },
        attrHooks : {
            type : {
                /**
                 * @param {string} elem
                 * @param {string} value
                 * @return {?}
                 */
                set : function(elem, value) {
                    if (!support.radioValue && ("radio" === value && jQuery.nodeName(elem, "input"))) {
                        var val = elem.value;
                        return elem.setAttribute("type", value), val && (elem.value = val), value;
                    }
                }
            }
        }
    });
    boolHook = {
        /**
         * @param {string} elem
         * @param {string} value
         * @param {string} name
         * @return {?}
         */
        set : function(elem, value, name) {
            return value === false ? jQuery.removeAttr(elem, name) : elem.setAttribute(name, name), name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(dataAndEvents, name) {
        var callback = values[name] || jQuery.find.attr;
        /**
         * @param {string} arg
         * @param {string} key
         * @param {string} common
         * @return {?}
         */
        values[name] = function(arg, key, common) {
            var result;
            var value;
            return common || (value = values[key], values[key] = result, result = null != callback(arg, key, common) ? key.toLowerCase() : null, values[key] = value), result;
        };
    });
    /** @type {RegExp} */
    var rinputs = /^(?:input|select|textarea|button)$/i;
    jQuery.fn.extend({
        /**
         * @param {string} name
         * @param {string} value
         * @return {?}
         */
        prop : function(name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        /**
         * @param {?} name
         * @return {?}
         */
        removeProp : function(name) {
            return this.each(function() {
                delete this[jQuery.propFix[name] || name];
            });
        }
    });
    jQuery.extend({
        propFix : {
            for : "htmlFor",
            class : "className"
        },
        /**
         * @param {string} elem
         * @param {string} name
         * @param {string} value
         * @return {?}
         */
        prop : function(elem, name, value) {
            var ret;
            var hooks;
            var n;
            var nodeType = elem.nodeType;
            if (elem && (3 !== nodeType && (8 !== nodeType && 2 !== nodeType))) {
                return n = 1 !== nodeType || !jQuery.isXMLDoc(elem), n && (name = jQuery.propFix[name] || name, hooks = jQuery.propHooks[name]), void 0 !== value ? hooks && ("set" in hooks && void 0 !== (ret = hooks.set(elem, value, name))) ? ret : elem[name] = value : hooks && ("get" in hooks && null !== (ret = hooks.get(elem, name))) ? ret : elem[name];
            }
        },
        propHooks : {
            tabIndex : {
                /**
                 * @param {string} elem
                 * @return {?}
                 */
                get : function(elem) {
                    return elem.hasAttribute("tabindex") || (rinputs.test(elem.nodeName) || elem.href) ? elem.tabIndex : -1;
                }
            }
        }
    });
    if (!support.optSelected) {
        jQuery.propHooks.selected = {
            /**
             * @param {string} elem
             * @return {?}
             */
            get : function(elem) {
                var parent = elem.parentNode;
                return parent && (parent.parentNode && parent.parentNode.selectedIndex), null;
            }
        };
    }
    jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    /** @type {RegExp} */
    var rclass = /[\t\r\n\f]/g;
    jQuery.fn.extend({
        /**
         * @param {string} value
         * @return {?}
         */
        addClass : function(value) {
            var classes;
            var elem;
            var cur;
            var clazz;
            var j;
            var finalValue;
            /** @type {(boolean|string)} */
            var proceed = "string" == typeof value && value;
            /** @type {number} */
            var i = 0;
            var l = this.length;
            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).addClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                classes = (value || "").match(rvar) || [];
                for (;i < l;i++) {
                    if (elem = this[i], cur = 1 === elem.nodeType && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ")) {
                        /** @type {number} */
                        j = 0;
                        for (;clazz = classes[j++];) {
                            if (cur.indexOf(" " + clazz + " ") < 0) {
                                cur += clazz + " ";
                            }
                        }
                        finalValue = jQuery.trim(cur);
                        if (elem.className !== finalValue) {
                            elem.className = finalValue;
                        }
                    }
                }
            }
            return this;
        },
        /**
         * @param {string} value
         * @return {?}
         */
        removeClass : function(value) {
            var res;
            var elem;
            var cur;
            var apn;
            var resLength;
            var finalValue;
            /** @type {(boolean|string)} */
            var h = 0 === arguments.length || "string" == typeof value && value;
            /** @type {number} */
            var i = 0;
            var l = this.length;
            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).removeClass(value.call(this, j, this.className));
                });
            }
            if (h) {
                res = (value || "").match(rvar) || [];
                for (;i < l;i++) {
                    if (elem = this[i], cur = 1 === elem.nodeType && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "")) {
                        /** @type {number} */
                        resLength = 0;
                        for (;apn = res[resLength++];) {
                            for (;cur.indexOf(" " + apn + " ") >= 0;) {
                                /** @type {string} */
                                cur = cur.replace(" " + apn + " ", " ");
                            }
                        }
                        finalValue = value ? jQuery.trim(cur) : "";
                        if (elem.className !== finalValue) {
                            elem.className = finalValue;
                        }
                    }
                }
            }
            return this;
        },
        /**
         * @param {string} value
         * @param {?} stateVal
         * @return {?}
         */
        toggleClass : function(value, stateVal) {
            /** @type {string} */
            var type = typeof value;
            return "boolean" == typeof stateVal && "string" === type ? stateVal ? this.addClass(value) : this.removeClass(value) : jQuery.isFunction(value) ? this.each(function(i) {
                jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
            }) : this.each(function() {
                if ("string" === type) {
                    var klass;
                    /** @type {number} */
                    var resLength = 0;
                    var $this = jQuery(this);
                    var res = value.match(rvar) || [];
                    for (;klass = res[resLength++];) {
                        if ($this.hasClass(klass)) {
                            $this.removeClass(klass);
                        } else {
                            $this.addClass(klass);
                        }
                    }
                } else {
                    if (!(void 0 !== value && "boolean" !== type)) {
                        if (this.className) {
                            data_priv.set(this, "__className__", this.className);
                        }
                        this.className = this.className || value === false ? "" : data_priv.get(this, "__className__") || "";
                    }
                }
            });
        },
        /**
         * @param {string} name
         * @return {?}
         */
        hasClass : function(name) {
            /** @type {string} */
            var cookieName = " " + name + " ";
            /** @type {number} */
            var i = 0;
            var l = this.length;
            for (;i < l;i++) {
                if (1 === this[i].nodeType && (" " + this[i].className + " ").replace(rclass, " ").indexOf(cookieName) >= 0) {
                    return true;
                }
            }
            return false;
        }
    });
    /** @type {RegExp} */
    var rreturn = /\r/g;
    jQuery.fn.extend({
        /**
         * @param {string} html
         * @return {?}
         */
        val : function(html) {
            var hooks;
            var ret;
            var isFunction;
            var elem = this[0];
            if (arguments.length) {
                return isFunction = jQuery.isFunction(html), this.each(function(i) {
                    var optgroup;
                    if (1 === this.nodeType) {
                        optgroup = isFunction ? html.call(this, i, jQuery(this).val()) : html;
                        if (null == optgroup) {
                            /** @type {string} */
                            optgroup = "";
                        } else {
                            if ("number" == typeof optgroup) {
                                optgroup += "";
                            } else {
                                if (jQuery.isArray(optgroup)) {
                                    optgroup = jQuery.map(optgroup, function(month) {
                                        return null == month ? "" : month + "";
                                    });
                                }
                            }
                        }
                        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                        if (!(hooks && ("set" in hooks && void 0 !== hooks.set(this, optgroup, "value")))) {
                            this.value = optgroup;
                        }
                    }
                });
            }
            if (elem) {
                return hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()], hooks && ("get" in hooks && void 0 !== (ret = hooks.get(elem, "value"))) ? ret : (ret = elem.value, "string" == typeof ret ? ret.replace(rreturn, "") : null == ret ? "" : ret);
            }
        }
    });
    jQuery.extend({
        valHooks : {
            option : {
                /**
                 * @param {string} elem
                 * @return {?}
                 */
                get : function(elem) {
                    return jQuery.trim(elem.value);
                }
            },
            select : {
                /**
                 * @param {string} elem
                 * @return {?}
                 */
                get : function(elem) {
                    var value;
                    var optgroup;
                    var options = elem.options;
                    var index = elem.selectedIndex;
                    /** @type {boolean} */
                    var one = "select-one" === elem.type || index < 0;
                    /** @type {(Array|null)} */
                    var values = one ? null : [];
                    var max = one ? index + 1 : options.length;
                    var i = index < 0 ? max : one ? index : 0;
                    for (;i < max;i++) {
                        if (optgroup = options[i], (optgroup.selected || i === index) && ((support.optDisabled ? !optgroup.disabled : null === optgroup.getAttribute("disabled")) && (!optgroup.parentNode.disabled || !jQuery.nodeName(optgroup.parentNode, "optgroup")))) {
                            if (value = jQuery(optgroup).val(), one) {
                                return value;
                            }
                            values.push(value);
                        }
                    }
                    return values;
                },
                /**
                 * @param {string} elem
                 * @param {string} value
                 * @return {?}
                 */
                set : function(elem, value) {
                    var c;
                    var ol;
                    var options = elem.options;
                    var values = jQuery.makeArray(value);
                    var len = options.length;
                    for (;len--;) {
                        ol = options[len];
                        if (ol.selected = jQuery.inArray(jQuery.valHooks.option.get(ol), values) >= 0) {
                            /** @type {boolean} */
                            c = true;
                        }
                    }
                    return c || (elem.selectedIndex = -1), values;
                }
            }
        }
    });
    jQuery.each(["radio", "checkbox"], function() {
        jQuery.valHooks[this] = {
            /**
             * @param {string} optgroup
             * @param {string} value
             * @return {?}
             */
            set : function(optgroup, value) {
                if (jQuery.isArray(value)) {
                    return optgroup.checked = jQuery.inArray(jQuery(optgroup).val(), value) >= 0;
                }
            }
        };
        if (!support.checkOn) {
            /**
             * @param {string} elem
             * @return {?}
             */
            jQuery.valHooks[this].get = function(elem) {
                return null === elem.getAttribute("value") ? "on" : elem.value;
            };
        }
    });
    jQuery.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(dataAndEvents, fix) {
        /**
         * @param {Object} data
         * @param {Function} fn
         * @return {?}
         */
        jQuery.fn[fix] = function(data, fn) {
            return arguments.length > 0 ? this.on(fix, null, data, fn) : this.trigger(fix);
        };
    });
    jQuery.fn.extend({
        /**
         * @param {undefined} fnOver
         * @param {Object} fnOut
         * @return {?}
         */
        hover : function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        },
        /**
         * @param {Object} recurring
         * @param {Object} fn
         * @param {?} obj
         * @return {?}
         */
        bind : function(recurring, fn, obj) {
            return this.on(recurring, null, fn, obj);
        },
        /**
         * @param {string} type
         * @param {Object} fn
         * @return {?}
         */
        unbind : function(type, fn) {
            return this.off(type, null, fn);
        },
        /**
         * @param {Function} selector
         * @param {string} fix
         * @param {Object} data
         * @param {Function} fn
         * @return {?}
         */
        delegate : function(selector, fix, data, fn) {
            return this.on(fix, selector, data, fn);
        },
        /**
         * @param {string} selector
         * @param {string} event
         * @param {Object} fn
         * @return {?}
         */
        undelegate : function(selector, event, fn) {
            return 1 === arguments.length ? this.off(selector, "**") : this.off(event, selector || "**", fn);
        }
    });
    jQuery.fn.extend({
        /**
         * @param {string} optgroup
         * @return {?}
         */
        wrapAll : function(optgroup) {
            var wrap;
            return this[0] && (jQuery.isFunction(optgroup) && (optgroup = optgroup.call(this[0])), wrap = jQuery(optgroup, this[0].ownerDocument).eq(0).clone(true), this[0].parentNode && wrap.insertBefore(this[0]), wrap.map(function() {
                var elem = this;
                for (;elem.firstElementChild;) {
                    elem = elem.firstElementChild;
                }
                return elem;
            }).append(this)), this;
        },
        /**
         * @param {string} html
         * @return {?}
         */
        wrapInner : function(html) {
            return jQuery.isFunction(html) ? this.each(function(i) {
                jQuery(this).wrapInner(html.call(this, i));
            }) : this.each(function() {
                var self = jQuery(this);
                var contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html);
                } else {
                    self.append(html);
                }
            });
        },
        /**
         * @param {string} html
         * @return {?}
         */
        wrap : function(html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function(i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },
        /**
         * @return {?}
         */
        unwrap : function() {
            return this.parent().each(function() {
                if (!jQuery.nodeName(this, "body")) {
                    jQuery(this).replaceWith(this.childNodes);
                }
            }).end();
        }
    });
    /**
     * @param {HTMLElement} elem
     * @return {?}
     */
    jQuery.expr.filters.hidden = function(elem) {
        return!elem.offsetWidth || !elem.offsetHeight;
    };
    /**
     * @param {undefined} elem
     * @return {?}
     */
    jQuery.expr.filters.visible = function(elem) {
        return!jQuery.expr.filters.hidden(elem);
    };
    /** @type {RegExp} */
    var rQuot = /%20/g;
    /** @type {RegExp} */
    var rbracket = /\[\]$/;
    /** @type {RegExp} */
    var rCRLF = /\r?\n/g;
    /** @type {RegExp} */
    var mouseTypeRegex = /^(?:submit|button|image|reset|file)$/i;
    /** @type {RegExp} */
    var rsubmittable = /^(?:input|select|textarea|keygen)/i;
    /**
     * @param {Object} a
     * @param {Function} traditional
     * @return {?}
     */
    jQuery.param = function(a, traditional) {
        var prefix;
        /** @type {Array} */
        var klass = [];
        /**
         * @param {?} key
         * @param {string} value
         * @return {undefined}
         */
        var add = function(key, value) {
            value = jQuery.isFunction(value) ? value() : null == value ? "" : value;
            /** @type {string} */
            klass[klass.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
        };
        if (void 0 === traditional && (traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional), jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
            jQuery.each(a, function() {
                add(this.name, this.value);
            });
        } else {
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }
        return klass.join("&").replace(rQuot, "+");
    };
    jQuery.fn.extend({
        /**
         * @return {?}
         */
        serialize : function() {
            return jQuery.param(this.serializeArray());
        },
        /**
         * @return {?}
         */
        serializeArray : function() {
            return this.map(function() {
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
                var type = this.type;
                return this.name && (!jQuery(this).is(":disabled") && (rsubmittable.test(this.nodeName) && (!mouseTypeRegex.test(type) && (this.checked || !manipulation_rcheckableType.test(type)))));
            }).map(function(dataAndEvents, elem) {
                var optgroup = jQuery(this).val();
                return null == optgroup ? null : jQuery.isArray(optgroup) ? jQuery.map(optgroup, function(val) {
                    return{
                        name : elem.name,
                        value : val.replace(rCRLF, "\r\n")
                    };
                }) : {
                    name : elem.name,
                    value : optgroup.replace(rCRLF, "\r\n")
                };
            }).get();
        }
    });
    support.createHTMLDocument = function() {
        var doc = optgroup.implementation.createHTMLDocument("");
        return!!doc.body && (doc.body.innerHTML = "<form></form><form></form>", 2 === doc.body.childNodes.length);
    }();
    /**
     * @param {string} data
     * @param {boolean} doc
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    jQuery.parseHTML = function(data, doc, dataAndEvents) {
        if (!data || "string" != typeof data) {
            return null;
        }
        if ("boolean" == typeof doc) {
            /** @type {boolean} */
            dataAndEvents = doc;
            /** @type {boolean} */
            doc = false;
        }
        doc = doc || (support.createHTMLDocument ? optgroup.implementation.createHTMLDocument("") : optgroup);
        /** @type {(Array.<string>|null)} */
        var options = rsingleTag.exec(data);
        /** @type {(Array|boolean)} */
        var rvar = !dataAndEvents && [];
        return options ? [doc.createElement(options[1])] : (options = jQuery.buildFragment([data], doc, rvar), rvar && (rvar.length && jQuery(rvar).remove()), jQuery.merge([], options.childNodes));
    };
    jQuery.offset = {
        /**
         * @param {string} optgroup
         * @param {Object} options
         * @param {?} i
         * @return {undefined}
         */
        setOffset : function(optgroup, options, i) {
            var curPosition;
            var curLeft;
            var curCSSTop;
            var curTop;
            var position;
            var curCSSLeft;
            var j;
            var first = jQuery.css(optgroup, "position");
            var curElem = jQuery(optgroup);
            var props = {};
            if ("static" === first) {
                /** @type {string} */
                optgroup.style.position = "relative";
            }
            position = curElem.offset();
            curCSSTop = jQuery.css(optgroup, "top");
            curCSSLeft = jQuery.css(optgroup, "left");
            /** @type {boolean} */
            j = ("absolute" === first || "fixed" === first) && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
            if (j) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                /** @type {number} */
                curTop = parseFloat(curCSSTop) || 0;
                /** @type {number} */
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (jQuery.isFunction(options)) {
                options = options.call(optgroup, i, jQuery.extend({}, position));
            }
            if (null != options.top) {
                /** @type {number} */
                props.top = options.top - position.top + curTop;
            }
            if (null != options.left) {
                /** @type {number} */
                props.left = options.left - position.left + curLeft;
            }
            if ("using" in options) {
                options.using.call(optgroup, props);
            } else {
                curElem.css(props);
            }
        }
    };
    jQuery.fn.extend({
        /**
         * @param {string} name
         * @return {?}
         */
        offset : function(name) {
            if (arguments.length) {
                return void 0 === name ? this : this.each(function(dataName) {
                    jQuery.offset.setOffset(this, name, dataName);
                });
            }
            var doc;
            var win;
            var b = this[0];
            var box = {
                top : 0,
                left : 0
            };
            var element = b && b.ownerDocument;
            if (element) {
                return doc = element.documentElement, jQuery.contains(doc, b) ? (box = b.getBoundingClientRect(), win = getWindow(element), {
                    top : box.top + win.pageYOffset - doc.clientTop,
                    left : box.left + win.pageXOffset - doc.clientLeft
                }) : box;
            }
        },
        /**
         * @return {?}
         */
        position : function() {
            if (this[0]) {
                var offsetParent;
                var offset;
                var div = this[0];
                var parentOffset = {
                    top : 0,
                    left : 0
                };
                return "fixed" === jQuery.css(div, "position") ? offset = div.getBoundingClientRect() : (offsetParent = this.offsetParent(), offset = this.offset(), jQuery.nodeName(offsetParent[0], "html") || (parentOffset = offsetParent.offset()), parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true), parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true)), {
                    top : offset.top - parentOffset.top - jQuery.css(div, "marginTop", true),
                    left : offset.left - parentOffset.left - jQuery.css(div, "marginLeft", true)
                };
            }
        },
        /**
         * @return {?}
         */
        offsetParent : function() {
            return this.map(function() {
                var parent = this.offsetParent || root;
                for (;parent && (!jQuery.nodeName(parent, "html") && "static" === jQuery.css(parent, "position"));) {
                    parent = parent.offsetParent;
                }
                return parent || root;
            });
        }
    });
    jQuery.each({
        scrollLeft : "pageXOffset",
        scrollTop : "pageYOffset"
    }, function(name, prop) {
        /** @type {boolean} */
        var top = "pageYOffset" === prop;
        /**
         * @param {string} isXML
         * @return {?}
         */
        jQuery.fn[name] = function(isXML) {
            return access(this, function(elem, method, val) {
                var win = getWindow(elem);
                return void 0 === val ? win ? win[prop] : elem[method] : void(win ? win.scrollTo(top ? win.pageXOffset : val, top ? val : win.pageYOffset) : elem[method] = val);
            }, name, isXML, arguments.length, null);
        };
    });
    jQuery.each(["top", "left"], function(dataAndEvents, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(optgroup, val) {
            if (val) {
                return val = curCSS(optgroup, prop), regexp.test(val) ? jQuery(optgroup).position()[prop] + "px" : val;
            }
        });
    });
    jQuery.each({
        Height : "height",
        Width : "width"
    }, function(name, type) {
        jQuery.each({
            padding : "inner" + name,
            content : type,
            "" : "outer" + name
        }, function(defaultExtra, original) {
            /**
             * @param {?} margin
             * @param {boolean} value
             * @return {?}
             */
            jQuery.fn[original] = function(margin, value) {
                var chainable = arguments.length && (defaultExtra || "boolean" != typeof margin);
                var extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                return access(this, function(el, prop, value) {
                    var doc;
                    return jQuery.isWindow(el) ? el.document.documentElement["client" + name] : 9 === el.nodeType ? (doc = el.documentElement, Math.max(el.body["scroll" + name], doc["scroll" + name], el.body["offset" + name], doc["offset" + name], doc["client" + name])) : void 0 === value ? jQuery.css(el, prop, extra) : jQuery.style(el, prop, value, extra);
                }, type, chainable ? margin : void 0, chainable, null);
            };
        });
    });
    var _jQuery = win.jQuery;
    var _$ = win.$;
    return jQuery.noConflict = function(deep) {
        return win.$ === jQuery && (win.$ = _$), deep && (win.jQuery === jQuery && (win.jQuery = _jQuery)), jQuery;
    }, dataAndEvents || (win.jQuery = win.$ = jQuery), jQuery;
}), function($) {
    $.simplePlaceholder = {
        placeholderClass : null,
        /**
         * @return {undefined}
         */
        hidePlaceholder : function() {
            var $el = $(this);
            if ($el.val() == $el.attr("placeholder")) {
                if ($el.data($.simplePlaceholder.placeholderData)) {
                    $el.val("").removeClass($.simplePlaceholder.placeholderClass).data($.simplePlaceholder.placeholderData, false);
                }
            }
        },
        /**
         * @return {undefined}
         */
        showPlaceholder : function() {
            var input = $(this);
            if ("" == input.val()) {
                input.val(input.attr("placeholder")).addClass($.simplePlaceholder.placeholderClass).data($.simplePlaceholder.placeholderData, true);
            }
        },
        /**
         * @return {?}
         */
        preventPlaceholderSubmit : function() {
            return $(this).find(".simple-placeholder").each(function(dataAndEvents) {
                var $el = $(this);
                if ($el.val() == $el.attr("placeholder")) {
                    if ($el.data($.simplePlaceholder.placeholderData)) {
                        $el.val("");
                    }
                }
            }), true;
        }
    };
    /**
     * @param {?} opt_attributes
     * @return {?}
     */
    $.fn.simplePlaceholder = function(opt_attributes) {
        if (void 0 == document.createElement("input").placeholder) {
            var attributes = {
                placeholderClass : "placeholding",
                placeholderData : "simplePlaceholder.placeholding"
            };
            if (opt_attributes) {
                $.extend(attributes, opt_attributes);
            }
            $.extend($.simplePlaceholder, attributes);
            this.each(function() {
                var input = $(this);
                input.focus($.simplePlaceholder.hidePlaceholder);
                input.blur($.simplePlaceholder.showPlaceholder);
                input.data($.simplePlaceholder.placeholderData, false);
                if ("" == input.val()) {
                    input.val(input.attr("placeholder"));
                    input.addClass($.simplePlaceholder.placeholderClass);
                    input.data($.simplePlaceholder.placeholderData, true);
                }
                input.addClass("simple-placeholder");
                $(this.form).submit($.simplePlaceholder.preventPlaceholderSubmit);
            });
        }
        return this;
    };
}(jQuery), !function() {
    /**
     * @return {undefined}
     */
    var Runner = function() {
    };
    /**
     * @return {?}
     */
    Runner.prototype.testBait = function() {
        /** @type {Element} */
        var elem = document.createElement("div");
        return elem.setAttribute("class", "pub_300x250 pub_300x250m pub_728x90 text-ad textAd text_ad text_ads text-ads text-ad-links banner banner-top"), elem.setAttribute("style", "width: 1px !important; height: 1px !important; position: absolute !important; left: -10000px !important; top: -1000px !important;"), document.body.appendChild(elem), null !== window.document.body.getAttribute("adp") || ("none" === window.getComputedStyle(elem).display || ("hidden" === window.getComputedStyle(elem).visibility ||
            (0 == elem.offsetHeight || (0 == elem.offsetLeft || (0 == elem.offsetTop || (0 == elem.offsetWidth || (0 == elem.clientHeight || 0 == elem.clientWidth)))))));
    };
    /**
     * @param {Function} fn
     * @return {undefined}
     */
    Runner.prototype.testWithScript = function(fn) {
        /** @type {XMLHttpRequest} */
        var xmlhttp = new XMLHttpRequest;
        /** @type {RegExp} */
        var r20 = /^(www\.)?/;
        /** @type {string} */
        var version = window.location.hostname.replace(r20, "");
        /**
         * @return {undefined}
         */
        xmlhttp.onreadystatechange = function() {
            if (4 == xmlhttp.readyState) {
                fn(200 !== xmlhttp.status);
            }
        };
        try {
            /** @type {string} */
            var location = "//w.tda.io/banners/ads.js?page=";
            xmlhttp.open("GET", location + version, true);
            xmlhttp.send();
        } catch (f) {
            fn(true);
        }
    };
    /**
     * @param {Function} fn
     * @return {undefined}
     */
    Runner.prototype.runTests = function(fn) {
        var testBait = this.testBait();
        if (testBait) {
            fn(true);
        } else {
            this.testWithScript(fn);
        }
    };
    /**
     * @return {?}
     */
    Runner.prototype.isFirefox = function() {
        return navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
    };
    /**
     * @param {Function} files
     * @return {undefined}
     */
    Runner.prototype.run = function(files) {
        var isFirefox = this.testBait();
        if (isFirefox && this.isFirefox()) {
            var that = this;
            setTimeout(function() {
                that.runTests(files);
            }, 1E3);
        } else {
            this.runTests(files);
        }
    };
    /** @type {function (): undefined} */
    window.Detector = Runner;
}(), !function() {
    /**
     * @return {undefined}
     */
    var Task = function() {
    };
    /**
     * @return {?}
     */
    Task.prototype._isPageLoaded = function() {
        return "complete" === document.readyState || "interactive" === document.readyState;
    };
    /**
     * @param {Function} dir
     * @return {undefined}
     */
    Task.prototype._detect = function(dir) {
        var self = new Detector;
        self.run(dir);
    };
    /**
     * @param {Function} file
     * @return {undefined}
     */
    Task.prototype.run = function(file) {
        if (this._isPageLoaded()) {
            setTimeout(this._detect(file), 0);
        } else {
            document.addEventListener("DOMContentLoaded", this._detect(file), false);
        }
    };
    /** @type {function (): undefined} */
    window.Ghostbuster = Task;
}(), function(a, d, prop, originalModel) {
    /**
     * @param {Function} element
     * @param {?} step
     * @param {string} fn
     * @return {?}
     */
    function range(element, step, fn) {
        return setTimeout(bind(element, fn), step);
    }
    /**
     * @param {string} attributes
     * @param {string} sType
     * @param {Object} fn
     * @return {?}
     */
    function apply(attributes, sType, fn) {
        return!!Array.isArray(attributes) && (each(attributes, fn[sType], fn), true);
    }
    /**
     * @param {Function} opt_attributes
     * @param {Function} attributes
     * @param {Function} item
     * @return {undefined}
     */
    function each(opt_attributes, attributes, item) {
        var h;
        if (opt_attributes) {
            if (opt_attributes.forEach) {
                opt_attributes.forEach(attributes, item);
            } else {
                if (opt_attributes.length !== originalModel) {
                    /** @type {number} */
                    h = 0;
                    for (;h < opt_attributes.length;) {
                        attributes.call(item, opt_attributes[h], h, opt_attributes);
                        h++;
                    }
                } else {
                    for (h in opt_attributes) {
                        if (opt_attributes.hasOwnProperty(h)) {
                            attributes.call(item, opt_attributes[h], h, opt_attributes);
                        }
                    }
                }
            }
        }
    }
    /**
     * @param {?} opt_attributes
     * @param {?} attributes
     * @param {string} obj
     * @return {?}
     */
    function extend(opt_attributes, attributes, obj) {
        /** @type {Array.<string>} */
        var codeSegments = Object.keys(attributes);
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;) {
            if (!obj || obj && opt_attributes[codeSegments[i]] === originalModel) {
                opt_attributes[codeSegments[i]] = attributes[codeSegments[i]];
            }
            i++;
        }
        return opt_attributes;
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function merge(first, second) {
        return extend(first, second, true);
    }
    /**
     * @param {Function} child
     * @param {Function} method
     * @param {?} opt_attributes
     * @return {undefined}
     */
    function inherit(child, method, opt_attributes) {
        var self;
        var parent = method.prototype;
        /** @type {Object} */
        self = child.prototype = Object.create(parent);
        /** @type {Function} */
        self.constructor = child;
        self._super = parent;
        if (opt_attributes) {
            extend(self, opt_attributes);
        }
    }
    /**
     * @param {Function} property
     * @param {?} object
     * @return {?}
     */
    function bind(property, object) {
        return function() {
            return property.apply(object, arguments);
        };
    }
    /**
     * @param {?} val
     * @param {?} params
     * @return {?}
     */
    function done(val, params) {
        return typeof val == number ? val.apply(params ? params[0] || originalModel : originalModel, params) : val;
    }
    /**
     * @param {?} model
     * @param {?} resp
     * @return {?}
     */
    function callback(model, resp) {
        return model === originalModel ? resp : model;
    }
    /**
     * @param {string} type
     * @param {Function} wait
     * @param {Object} fn
     * @return {undefined}
     */
    function addListener(type, wait, fn) {
        each(split(wait), function(name) {
            type.addEventListener(name, fn, false);
        });
    }
    /**
     * @param {string} event
     * @param {string} selector
     * @param {string} fn
     * @return {undefined}
     */
    function off(event, selector, fn) {
        each(split(selector), function(type) {
            event.removeEventListener(type, fn, false);
        });
    }
    /**
     * @param {Object} pn
     * @param {Object} dataAndEvents
     * @return {?}
     */
    function query(pn, dataAndEvents) {
        for (;pn;) {
            if (pn == dataAndEvents) {
                return true;
            }
            pn = pn.parentNode;
        }
        return false;
    }
    /**
     * @param {string} arg
     * @param {string} name
     * @return {?}
     */
    function require(arg, name) {
        return arg.indexOf(name) > -1;
    }
    /**
     * @param {string} expression
     * @return {?}
     */
    function split(expression) {
        return expression.trim().split(/\s+/g);
    }
    /**
     * @param {Array} arr
     * @param {string} obj
     * @param {boolean} attr
     * @return {?}
     */
    function indexOf(arr, obj, attr) {
        if (arr.indexOf && !attr) {
            return arr.indexOf(obj);
        }
        /** @type {number} */
        var i = 0;
        for (;i < arr.length;) {
            if (attr && arr[i][attr] == obj || !attr && arr[i] === obj) {
                return i;
            }
            i++;
        }
        return-1;
    }
    /**
     * @param {?} next_scope
     * @return {?}
     */
    function $(next_scope) {
        return Array.prototype.slice.call(next_scope, 0);
    }
    /**
     * @param {Array} arr
     * @param {string} name
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    function contains(arr, name, dataAndEvents) {
        /** @type {Array} */
        var names = [];
        /** @type {Array} */
        var actual = [];
        /** @type {number} */
        var j = 0;
        for (;j < arr.length;) {
            var obj = name ? arr[j][name] : arr[j];
            if (indexOf(actual, obj) < 0) {
                names.push(arr[j]);
            }
            actual[j] = obj;
            j++;
        }
        return dataAndEvents && (names = name ? names.sort(function(a, b) {
            return a[name] > b[name];
        }) : names.sort()), names;
    }
    /**
     * @param {Object} obj
     * @param {string} p
     * @return {?}
     */
    function find(obj, p) {
        var prefix;
        var key;
        var SEPARATOR = p[0].toUpperCase() + p.slice(1);
        /** @type {number} */
        var i = 0;
        for (;i < prefixes.length;) {
            if (prefix = prefixes[i], key = prefix ? prefix + SEPARATOR : p, key in obj) {
                return key;
            }
            i++;
        }
        return originalModel;
    }
    /**
     * @return {?}
     */
    function parent() {
        return oa++;
    }
    /**
     * @param {Node} element
     * @return {?}
     */
    function emit(element) {
        var doc = element.ownerDocument;
        return doc.defaultView || doc.parentWindow;
    }
    /**
     * @param {Element} options
     * @param {Function} callback
     * @return {undefined}
     */
    function init(options, callback) {
        var core_indexOf = this;
        /** @type {Element} */
        this.manager = options;
        /** @type {Function} */
        this.callback = callback;
        this.element = options.element;
        this.target = options.options.inputTarget;
        /**
         * @param {Event} qualifier
         * @return {undefined}
         */
        this.domHandler = function(qualifier) {
            if (done(options.options.enable, [options])) {
                core_indexOf.handler(qualifier);
            }
        };
        this.init();
    }
    /**
     * @param {string} attr
     * @return {?}
     */
    function escape(attr) {
        var finalError;
        var err = attr.options.inputClass;
        return new (finalError = err ? err : hasSuccess ? onSuccess : isMultiLineStringOrPolygon ? Scene : isMultiPointOrLineString ? Game : Model)(attr, finish);
    }
    /**
     * @param {Object} req
     * @param {number} filename
     * @param {Object} options
     * @return {undefined}
     */
    function finish(req, filename, options) {
        var right = options.pointers.length;
        var left = options.changedPointers.length;
        /** @type {(boolean|number)} */
        var f = filename & _initiate && right - left === 0;
        /** @type {(boolean|number)} */
        var g = filename & (doc | clear) && right - left === 0;
        /** @type {boolean} */
        options.isFirst = !!f;
        /** @type {boolean} */
        options.isFinal = !!g;
        if (f) {
            req.session = {};
        }
        /** @type {number} */
        options.eventType = filename;
        update(req, options);
        req.emit("hammer.input", options);
        req.recognize(options);
        /** @type {Object} */
        req.session.prevInput = options;
    }
    /**
     * @param {Object} req
     * @param {Object} e
     * @return {undefined}
     */
    function update(req, e) {
        var pdataCur = req.session;
        var value = e.pointers;
        var len = value.length;
        if (!pdataCur.firstInput) {
            pdataCur.firstInput = handler(e);
        }
        if (len > 1 && !pdataCur.firstMultiple) {
            pdataCur.firstMultiple = handler(e);
        } else {
            if (1 === len) {
                /** @type {boolean} */
                pdataCur.firstMultiple = false;
            }
        }
        var that = pdataCur.firstInput;
        var self = pdataCur.firstMultiple;
        var point = self ? self.center : that.center;
        var classNames = e.center = fix(value);
        /** @type {number} */
        e.timeStamp = now();
        /** @type {number} */
        e.deltaTime = e.timeStamp - that.timeStamp;
        e.angle = frame(point, classNames);
        e.distance = distanceBetween(point, classNames);
        setData(pdataCur, e);
        e.offsetDirection = draw(e.deltaX, e.deltaY);
        e.scale = self ? requestAnimFrame(self.pointers, value) : 1;
        e.rotation = self ? live(self.pointers, value) : 0;
        start(pdataCur, e);
        var node = req.element;
        if (query(e.srcEvent.target, node)) {
            node = e.srcEvent.target;
        }
        e.target = node;
    }
    /**
     * @param {?} value
     * @param {Object} e
     * @return {undefined}
     */
    function setData(value, e) {
        var center = e.center;
        var lastCenter = value.offsetDelta || {};
        var offsetCoordinate = value.prevDelta || {};
        var ev = value.prevInput || {};
        if (!(e.eventType !== _initiate && ev.eventType !== doc)) {
            offsetCoordinate = value.prevDelta = {
                x : ev.deltaX || 0,
                y : ev.deltaY || 0
            };
            lastCenter = value.offsetDelta = {
                x : center.x,
                y : center.y
            };
        }
        e.deltaX = offsetCoordinate.x + (center.x - lastCenter.x);
        e.deltaY = offsetCoordinate.y + (center.y - lastCenter.y);
    }
    /**
     * @param {?} data
     * @param {Object} e
     * @return {undefined}
     */
    function start(data, e) {
        var velocity;
        var newX;
        var y;
        var value;
        var that = data.lastInterval || e;
        /** @type {number} */
        var c = e.timeStamp - that.timeStamp;
        if (e.eventType != clear && (c > time || that.velocity === originalModel)) {
            /** @type {number} */
            var text = that.deltaX - e.deltaX;
            /** @type {number} */
            var width = that.deltaY - e.deltaY;
            var pos = cb(c, text, width);
            newX = pos.x;
            y = pos.y;
            velocity = abs(pos.x) > abs(pos.y) ? pos.x : pos.y;
            value = draw(text, width);
            /** @type {Object} */
            data.lastInterval = e;
        } else {
            velocity = that.velocity;
            newX = that.velocityX;
            y = that.velocityY;
            value = that.direction;
        }
        e.velocity = velocity;
        e.velocityX = newX;
        e.velocityY = y;
        e.direction = value;
    }
    /**
     * @param {Object} e
     * @return {?}
     */
    function handler(e) {
        /** @type {Array} */
        var touches = [];
        /** @type {number} */
        var i = 0;
        for (;i < e.pointers.length;) {
            touches[i] = {
                clientX : floor(e.pointers[i].clientX),
                clientY : floor(e.pointers[i].clientY)
            };
            i++;
        }
        return{
            timeStamp : now(),
            pointers : touches,
            center : fix(touches),
            deltaX : e.deltaX,
            deltaY : e.deltaY
        };
    }
    /**
     * @param {Array} touches
     * @return {?}
     */
    function fix(touches) {
        var l = touches.length;
        if (1 === l) {
            return{
                x : floor(touches[0].clientX),
                y : floor(touches[0].clientY)
            };
        }
        /** @type {number} */
        var x = 0;
        /** @type {number} */
        var y = 0;
        /** @type {number} */
        var i = 0;
        for (;i < l;) {
            x += touches[i].clientX;
            y += touches[i].clientY;
            i++;
        }
        return{
            x : floor(x / l),
            y : floor(y / l)
        };
    }
    /**
     * @param {number} res
     * @param {number} x
     * @param {number} y
     * @return {?}
     */
    function cb(res, x, y) {
        return{
            x : x / res || 0,
            y : y / res || 0
        };
    }
    /**
     * @param {number} x
     * @param {number} y
     * @return {?}
     */
    function draw(x, y) {
        return x === y ? other : abs(x) >= abs(y) ? x > 0 ? right : left : y > 0 ? bottom : up;
    }
    /**
     * @param {?} b
     * @param {?} a
     * @param {Array} attr
     * @return {?}
     */
    function distanceBetween(b, a, attr) {
        if (!attr) {
            /** @type {Array} */
            attr = data;
        }
        /** @type {number} */
        var z0 = a[attr[0]] - b[attr[0]];
        /** @type {number} */
        var z1 = a[attr[1]] - b[attr[1]];
        return Math.sqrt(z0 * z0 + z1 * z1);
    }
    /**
     * @param {?} str
     * @param {?} i
     * @param {Array} fn
     * @return {?}
     */
    function frame(str, i, fn) {
        if (!fn) {
            /** @type {Array} */
            fn = data;
        }
        /** @type {number} */
        var dy = i[fn[0]] - str[fn[0]];
        /** @type {number} */
        var sinAlpha = i[fn[1]] - str[fn[1]];
        return 180 * Math.atan2(sinAlpha, dy) / Math.PI;
    }
    /**
     * @param {Array} fn
     * @param {Array} times
     * @return {?}
     */
    function live(fn, times) {
        return frame(times[1], times[0], y) - frame(fn[1], fn[0], y);
    }
    /**
     * @param {Array} immediate
     * @param {Array} element
     * @return {?}
     */
    function requestAnimFrame(immediate, element) {
        return distanceBetween(element[0], element[1], y) / distanceBetween(immediate[0], immediate[1], y);
    }
    /**
     * @return {undefined}
     */
    function Model() {
        /** @type {string} */
        this.evEl = mousedown;
        /** @type {string} */
        this.evWin = Oa;
        /** @type {boolean} */
        this.allow = true;
        /** @type {boolean} */
        this.pressed = false;
        init.apply(this, arguments);
    }
    /**
     * @return {undefined}
     */
    function onSuccess() {
        this.evEl = EVENT_START;
        this.evWin = evWin;
        init.apply(this, arguments);
        /** @type {Array} */
        this.store = this.manager.session.pointerEvents = [];
    }
    /**
     * @return {undefined}
     */
    function self() {
        /** @type {string} */
        this.evTarget = touchstart;
        /** @type {string} */
        this.evWin = Va;
        /** @type {boolean} */
        this.started = false;
        init.apply(this, arguments);
    }
    /**
     * @param {Event} ev
     * @param {number} opt_attributes
     * @return {?}
     */
    function setup(ev, opt_attributes) {
        var curr = $(ev.touches);
        var part = $(ev.changedTouches);
        return opt_attributes & (doc | clear) && (curr = contains(curr.concat(part), "identifier", true)), [curr, part];
    }
    /**
     * @return {undefined}
     */
    function Scene() {
        /** @type {string} */
        this.evTarget = evTarget;
        this.targetIds = {};
        init.apply(this, arguments);
    }
    /**
     * @param {Event} e
     * @param {number} n
     * @return {?}
     */
    function f(e, n) {
        var list = $(e.touches);
        var validTouchIds = this.targetIds;
        if (n & (_initiate | setValueFromPos) && 1 === list.length) {
            return validTouchIds[list[0].identifier] = true, [list, list];
        }
        var i;
        var codeSegments;
        var keys = $(e.changedTouches);
        /** @type {Array} */
        var rv = [];
        var node = this.target;
        if (codeSegments = list.filter(function(evt) {
                return query(evt.target, node);
            }), n === _initiate) {
            /** @type {number} */
            i = 0;
            for (;i < codeSegments.length;) {
                /** @type {boolean} */
                validTouchIds[codeSegments[i].identifier] = true;
                i++;
            }
        }
        /** @type {number} */
        i = 0;
        for (;i < keys.length;) {
            if (validTouchIds[keys[i].identifier]) {
                rv.push(keys[i]);
            }
            if (n & (doc | clear)) {
                delete validTouchIds[keys[i].identifier];
            }
            i++;
        }
        return rv.length ? [contains(codeSegments.concat(rv), "identifier", true), rv] : void 0;
    }
    /**
     * @return {undefined}
     */
    function Game() {
        init.apply(this, arguments);
        var gl = bind(this.handler, this);
        this.touch = new Scene(this.manager, gl);
        this.mouse = new Model(this.manager, gl);
    }
    /**
     * @param {?} manager
     * @param {string} ol
     * @return {undefined}
     */
    function constructor(manager, ol) {
        this.manager = manager;
        this.set(ol);
    }
    /**
     * @param {string} env
     * @return {?}
     */
    function set(env) {
        if (require(env, name)) {
            return name;
        }
        var a = require(env, value);
        var b = require(env, options);
        return a && b ? value + " " + options : a || b ? a ? value : options : require(env, rvar) ? rvar : AUTO;
    }
    /**
     * @param {Object} opts
     * @return {undefined}
     */
    function initialize(opts) {
        this.id = parent();
        /** @type {null} */
        this.manager = null;
        this.options = merge(opts || {}, this.defaults);
        this.options.enable = callback(this.options.enable, true);
        /** @type {number} */
        this.state = st;
        this.simultaneous = {};
        /** @type {Array} */
        this.requireFail = [];
    }
    /**
     * @param {number} n
     * @return {?}
     */
    function run(n) {
        return n & STATE_CANCELLED ? "cancel" : n & length ? "end" : n & STATE_CHANGED ? "move" : n & w_mask ? "start" : "";
    }
    /**
     * @param {number} dir
     * @return {?}
     */
    function setDirection(dir) {
        return dir == up ? "down" : dir == bottom ? "up" : dir == right ? "left" : dir == left ? "right" : "";
    }
    /**
     * @param {string} arg
     * @param {Object} self
     * @return {?}
     */
    function load(arg, self) {
        var list = self.manager;
        return list ? list.get(arg) : arg;
    }
    /**
     * @return {undefined}
     */
    function template() {
        initialize.apply(this, arguments);
    }
    /**
     * @return {undefined}
     */
    function Sprite() {
        template.apply(this, arguments);
        /** @type {null} */
        this.pX = null;
        /** @type {null} */
        this.pY = null;
    }
    /**
     * @return {undefined}
     */
    function g() {
        template.apply(this, arguments);
    }
    /**
     * @return {undefined}
     */
    function Parser() {
        initialize.apply(this, arguments);
        /** @type {null} */
        this._timer = null;
        /** @type {null} */
        this._input = null;
    }
    /**
     * @return {undefined}
     */
    function SrcCell() {
        template.apply(this, arguments);
    }
    /**
     * @return {undefined}
     */
    function frag() {
        template.apply(this, arguments);
    }
    /**
     * @return {undefined}
     */
    function AnimatedSprite() {
        initialize.apply(this, arguments);
        /** @type {boolean} */
        this.pTime = false;
        /** @type {boolean} */
        this.pCenter = false;
        /** @type {null} */
        this._timer = null;
        /** @type {null} */
        this._input = null;
        /** @type {number} */
        this.count = 0;
    }
    /**
     * @param {string} name
     * @param {Function} recurring
     * @return {?}
     */
    function params(name, recurring) {
        return recurring = recurring || {}, recurring.recognizers = callback(recurring.recognizers, params.defaults.preset), new add(name, recurring);
    }
    /**
     * @param {?} element
     * @param {Object} options
     * @return {undefined}
     */
    function add(element, options) {
        options = options || {};
        this.options = merge(options, params.defaults);
        this.options.inputTarget = this.options.inputTarget || element;
        this.handlers = {};
        this.session = {};
        /** @type {Array} */
        this.recognizers = [];
        this.element = element;
        this.input = escape(this);
        this.touchAction = new constructor(this, this.options.touchAction);
        fn(this, true);
        each(options.recognizers, function(duplicates) {
            var results = this.add(new duplicates[0](duplicates[1]));
            if (duplicates[2]) {
                results.recognizeWith(duplicates[2]);
            }
            if (duplicates[3]) {
                results.requireFailure(duplicates[3]);
            }
        }, this);
    }
    /**
     * @param {Element} item
     * @param {boolean} computed
     * @return {undefined}
     */
    function fn(item, computed) {
        var element = item.element;
        each(item.options.cssProps, function(currentStyle, property) {
            element.style[find(element.style, property)] = computed ? currentStyle : "";
        });
    }
    /**
     * @param {string} type
     * @param {Object} event
     * @return {undefined}
     */
    function createEvent(type, event) {
        /** @type {(Event|null)} */
        var e = d.createEvent("Event");
        e.initEvent(type, true, true);
        /** @type {Object} */
        e.gesture = event;
        event.target.dispatchEvent(e);
    }
    /** @type {Array} */
    var prefixes = ["", "webkit", "moz", "MS", "ms", "o"];
    /** @type {Element} */
    var el = d.createElement("div");
    /** @type {string} */
    var number = "function";
    /** @type {function (*): number} */
    var floor = Math.round;
    /** @type {function (*): number} */
    var abs = Math.abs;
    /** @type {function (): number} */
    var now = Date.now;
    /** @type {number} */
    var oa = 1;
    /** @type {RegExp} */
    var regExp_appleDevice = /mobile|tablet|ip(ad|hone|od)|android/i;
    /** @type {boolean} */
    var isMultiPointOrLineString = "ontouchstart" in a;
    /** @type {boolean} */
    var hasSuccess = find(a, "PointerEvent") !== originalModel;
    /** @type {boolean} */
    var isMultiLineStringOrPolygon = isMultiPointOrLineString && regExp_appleDevice.test(navigator.userAgent);
    /** @type {string} */
    var rel = "touch";
    /** @type {string} */
    var POINTER_TYPE_PEN = "pen";
    /** @type {string} */
    var arrayClass = "mouse";
    /** @type {string} */
    var kinect = "kinect";
    /** @type {number} */
    var time = 25;
    /** @type {number} */
    var _initiate = 1;
    /** @type {number} */
    var setValueFromPos = 2;
    /** @type {number} */
    var doc = 4;
    /** @type {number} */
    var clear = 8;
    /** @type {number} */
    var other = 1;
    /** @type {number} */
    var right = 2;
    /** @type {number} */
    var left = 4;
    /** @type {number} */
    var bottom = 8;
    /** @type {number} */
    var up = 16;
    /** @type {number} */
    var LENGTH_MASK = right | left;
    /** @type {number} */
    var LABEL_POINTER = bottom | up;
    /** @type {number} */
    var rev = LENGTH_MASK | LABEL_POINTER;
    /** @type {Array} */
    var data = ["x", "y"];
    /** @type {Array} */
    var y = ["clientX", "clientY"];
    init.prototype = {
        /**
         * @return {undefined}
         */
        handler : function() {
        },
        /**
         * @return {undefined}
         */
        init : function() {
            if (this.evEl) {
                addListener(this.element, this.evEl, this.domHandler);
            }
            if (this.evTarget) {
                addListener(this.target, this.evTarget, this.domHandler);
            }
            if (this.evWin) {
                addListener(emit(this.element), this.evWin, this.domHandler);
            }
        },
        /**
         * @return {undefined}
         */
        destroy : function() {
            if (this.evEl) {
                off(this.element, this.evEl, this.domHandler);
            }
            if (this.evTarget) {
                off(this.target, this.evTarget, this.domHandler);
            }
            if (this.evWin) {
                off(emit(this.element), this.evWin, this.domHandler);
            }
        }
    };
    var events = {
        mousedown : _initiate,
        mousemove : setValueFromPos,
        mouseup : doc
    };
    /** @type {string} */
    var mousedown = "mousedown";
    /** @type {string} */
    var Oa = "mousemove mouseup";
    inherit(Model, init, {
        /**
         * @param {Event} event
         * @return {undefined}
         */
        handler : function(event) {
            var deepDataAndEvents = events[event.type];
            if (deepDataAndEvents & _initiate) {
                if (0 === event.button) {
                    /** @type {boolean} */
                    this.pressed = true;
                }
            }
            if (deepDataAndEvents & setValueFromPos) {
                if (1 !== event.which) {
                    /** @type {number} */
                    deepDataAndEvents = doc;
                }
            }
            if (this.pressed) {
                if (this.allow) {
                    if (deepDataAndEvents & doc) {
                        /** @type {boolean} */
                        this.pressed = false;
                    }
                    this.callback(this.manager, deepDataAndEvents, {
                        pointers : [event],
                        changedPointers : [event],
                        pointerType : arrayClass,
                        srcEvent : event
                    });
                }
            }
        }
    });
    var handlers = {
        pointerdown : _initiate,
        pointermove : setValueFromPos,
        pointerup : doc,
        pointercancel : clear,
        pointerout : clear
    };
    var eventMapping = {
        2 : rel,
        3 : POINTER_TYPE_PEN,
        4 : arrayClass,
        5 : kinect
    };
    /** @type {string} */
    var EVENT_START = "pointerdown";
    /** @type {string} */
    var evWin = "pointermove pointerup pointercancel";
    if (a.MSPointerEvent) {
        /** @type {string} */
        EVENT_START = "MSPointerDown";
        /** @type {string} */
        evWin = "MSPointerMove MSPointerUp MSPointerCancel";
    }
    inherit(onSuccess, init, {
        /**
         * @param {Event} event
         * @return {undefined}
         */
        handler : function(event) {
            var events = this.store;
            /** @type {boolean} */
            var c = false;
            var cacheKey = event.type.toLowerCase().replace("ms", "");
            var deepDataAndEvents = handlers[cacheKey];
            var key = eventMapping[event.pointerType] || event.pointerType;
            /** @type {boolean} */
            var bulk = key == rel;
            var index = indexOf(events, event.pointerId, "pointerId");
            if (deepDataAndEvents & _initiate && (0 === event.button || bulk)) {
                if (index < 0) {
                    events.push(event);
                    /** @type {number} */
                    index = events.length - 1;
                }
            } else {
                if (deepDataAndEvents & (doc | clear)) {
                    /** @type {boolean} */
                    c = true;
                }
            }
            if (!(index < 0)) {
                /** @type {Event} */
                events[index] = event;
                this.callback(this.manager, deepDataAndEvents, {
                    pointers : events,
                    changedPointers : [event],
                    pointerType : key,
                    srcEvent : event
                });
                if (c) {
                    events.splice(index, 1);
                }
            }
        }
    });
    var touchEvents = {
        touchstart : _initiate,
        touchmove : setValueFromPos,
        touchend : doc,
        touchcancel : clear
    };
    /** @type {string} */
    var touchstart = "touchstart";
    /** @type {string} */
    var Va = "touchstart touchmove touchend touchcancel";
    inherit(self, init, {
        /**
         * @param {Event} event
         * @return {undefined}
         */
        handler : function(event) {
            var deepDataAndEvents = touchEvents[event.type];
            if (deepDataAndEvents === _initiate && (this.started = true), this.started) {
                var e = setup.call(this, event, deepDataAndEvents);
                if (deepDataAndEvents & (doc | clear)) {
                    if (e[0].length - e[1].length === 0) {
                        /** @type {boolean} */
                        this.started = false;
                    }
                }
                this.callback(this.manager, deepDataAndEvents, {
                    pointers : e[0],
                    changedPointers : e[1],
                    pointerType : rel,
                    srcEvent : event
                });
            }
        }
    });
    var mouseEvents = {
        touchstart : _initiate,
        touchmove : setValueFromPos,
        touchend : doc,
        touchcancel : clear
    };
    /** @type {string} */
    var evTarget = "touchstart touchmove touchend touchcancel";
    inherit(Scene, init, {
        /**
         * @param {Event} event
         * @return {undefined}
         */
        handler : function(event) {
            var deepDataAndEvents = mouseEvents[event.type];
            var e = f.call(this, event, deepDataAndEvents);
            if (e) {
                this.callback(this.manager, deepDataAndEvents, {
                    pointers : e[0],
                    changedPointers : e[1],
                    pointerType : rel,
                    srcEvent : event
                });
            }
        }
    });
    inherit(Game, init, {
        /**
         * @param {string} event
         * @param {number} deepDataAndEvents
         * @param {number} attributes
         * @return {undefined}
         */
        handler : function(event, deepDataAndEvents, attributes) {
            /** @type {boolean} */
            var isRel = attributes.pointerType == rel;
            /** @type {boolean} */
            var isArr = attributes.pointerType == arrayClass;
            if (isRel) {
                /** @type {boolean} */
                this.mouse.allow = false;
            } else {
                if (isArr && !this.mouse.allow) {
                    return;
                }
            }
            if (deepDataAndEvents & (doc | clear)) {
                /** @type {boolean} */
                this.mouse.allow = true;
            }
            this.callback(event, deepDataAndEvents, attributes);
        },
        /**
         * @return {undefined}
         */
        destroy : function() {
            this.touch.destroy();
            this.mouse.destroy();
        }
    });
    var index = find(el.style, "touchAction");
    /** @type {boolean} */
    var wasReordered = index !== originalModel;
    /** @type {string} */
    var touchAction = "compute";
    /** @type {string} */
    var AUTO = "auto";
    /** @type {string} */
    var rvar = "manipulation";
    /** @type {string} */
    var name = "none";
    /** @type {string} */
    var value = "pan-x";
    /** @type {string} */
    var options = "pan-y";
    constructor.prototype = {
        /**
         * @param {string} elem
         * @return {undefined}
         */
        set : function(elem) {
            if (elem == touchAction) {
                elem = this.compute();
            }
            if (wasReordered) {
                /** @type {string} */
                this.manager.element.style[index] = elem;
            }
            this.actions = elem.toLowerCase().trim();
        },
        /**
         * @return {undefined}
         */
        update : function() {
            this.set(this.manager.options.touchAction);
        },
        /**
         * @return {?}
         */
        compute : function() {
            /** @type {Array} */
            var l = [];
            return each(this.manager.recognizers, function(map) {
                if (done(map.options.enable, [map])) {
                    l = l.concat(map.getTouchAction());
                }
            }), set(l.join(" "));
        },
        /**
         * @param {Object} e
         * @return {?}
         */
        preventDefaults : function(e) {
            if (!wasReordered) {
                var originalEvent = e.srcEvent;
                var len = e.offsetDirection;
                if (this.manager.session.prevented) {
                    return void originalEvent.preventDefault();
                }
                var x = this.actions;
                var path = require(x, name);
                var target = require(x, options);
                var result = require(x, value);
                return path || (target && len & LENGTH_MASK || result && len & LABEL_POINTER) ? this.preventSrc(originalEvent) : void 0;
            }
        },
        /**
         * @param {?} e
         * @return {undefined}
         */
        preventSrc : function(e) {
            /** @type {boolean} */
            this.manager.session.prevented = true;
            e.preventDefault();
        }
    };
    /** @type {number} */
    var st = 1;
    /** @type {number} */
    var w_mask = 2;
    /** @type {number} */
    var STATE_CHANGED = 4;
    /** @type {number} */
    var length = 8;
    /** @type {number} */
    var state = length;
    /** @type {number} */
    var STATE_CANCELLED = 16;
    /** @type {number} */
    var addCurveIntersections = 32;
    initialize.prototype = {
        defaults : {},
        /**
         * @param {string} elem
         * @return {?}
         */
        set : function(elem) {
            return extend(this.options, elem), this.manager && this.manager.touchAction.update(), this;
        },
        /**
         * @param {Object} value
         * @return {?}
         */
        recognizeWith : function(value) {
            if (apply(value, "recognizeWith", this)) {
                return this;
            }
            var newDeviceListLookup = this.simultaneous;
            return value = load(value, this), newDeviceListLookup[value.id] || (newDeviceListLookup[value.id] = value, value.recognizeWith(this)), this;
        },
        /**
         * @param {Object} value
         * @return {?}
         */
        dropRecognizeWith : function(value) {
            return apply(value, "dropRecognizeWith", this) ? this : (value = load(value, this), delete this.simultaneous[value.id], this);
        },
        /**
         * @param {string} value
         * @return {?}
         */
        requireFailure : function(value) {
            if (apply(value, "requireFailure", this)) {
                return this;
            }
            var seen = this.requireFail;
            return value = load(value, this), indexOf(seen, value) === -1 && (seen.push(value), value.requireFailure(this)), this;
        },
        /**
         * @param {Text} value
         * @return {?}
         */
        dropRequireFailure : function(value) {
            if (apply(value, "dropRequireFailure", this)) {
                return this;
            }
            value = load(value, this);
            var index = indexOf(this.requireFail, value);
            return index > -1 && this.requireFail.splice(index, 1), this;
        },
        /**
         * @return {?}
         */
        hasRequireFailures : function() {
            return this.requireFail.length > 0;
        },
        /**
         * @param {Element} other
         * @return {?}
         */
        canRecognizeWith : function(other) {
            return!!this.simultaneous[other.id];
        },
        /**
         * @param {string} data
         * @return {undefined}
         */
        emit : function(data) {
            /**
             * @param {boolean} dataAndEvents
             * @return {undefined}
             */
            function handler(dataAndEvents) {
                self.manager.emit(self.options.event + (dataAndEvents ? run(i) : ""), data);
            }
            var self = this;
            var i = this.state;
            if (i < length) {
                handler(true);
            }
            handler();
            if (i >= length) {
                handler(true);
            }
        },
        /**
         * @param {string} k
         * @return {?}
         */
        tryEmit : function(k) {
            return this.canEmit() ? this.emit(k) : void(this.state = addCurveIntersections);
        },
        /**
         * @return {?}
         */
        canEmit : function() {
            /** @type {number} */
            var j = 0;
            for (;j < this.requireFail.length;) {
                if (!(this.requireFail[j].state & (addCurveIntersections | st))) {
                    return false;
                }
                j++;
            }
            return true;
        },
        /**
         * @param {Object} options
         * @return {?}
         */
        recognize : function(options) {
            var data = extend({}, options);
            return done(this.options.enable, [this, data]) ? (this.state & (state | STATE_CANCELLED | addCurveIntersections) && (this.state = st), this.state = this.process(data), void(this.state & (w_mask | STATE_CHANGED | length | STATE_CANCELLED) && this.tryEmit(data))) : (this.reset(), void(this.state = addCurveIntersections));
        },
        /**
         * @param {?} collection
         * @return {undefined}
         */
        process : function(collection) {
        },
        /**
         * @return {undefined}
         */
        getTouchAction : function() {
        },
        /**
         * @return {undefined}
         */
        reset : function() {
        }
    };
    inherit(template, initialize, {
        defaults : {
            pointers : 1
        },
        /**
         * @param {Object} stream
         * @return {?}
         */
        attrTest : function(stream) {
            var value = this.options.pointers;
            return 0 === value || stream.pointers.length === value;
        },
        /**
         * @param {Object} entry
         * @return {?}
         */
        process : function(entry) {
            var state = this.state;
            var type = entry.eventType;
            /** @type {number} */
            var linear1 = state & (w_mask | STATE_CHANGED);
            var linear2 = this.attrTest(entry);
            return linear1 && (type & clear || !linear2) ? state | STATE_CANCELLED : linear1 || linear2 ? type & doc ? state | length : state & w_mask ? state | STATE_CHANGED : w_mask : addCurveIntersections;
        }
    });
    inherit(Sprite, template, {
        defaults : {
            event : "pan",
            threshold : 10,
            pointers : 1,
            direction : rev
        },
        /**
         * @return {?}
         */
        getTouchAction : function() {
            var len = this.options.direction;
            /** @type {Array} */
            var bucket = [];
            return len & LENGTH_MASK && bucket.push(options), len & LABEL_POINTER && bucket.push(value), bucket;
        },
        /**
         * @param {Object} e
         * @return {?}
         */
        directionTest : function(e) {
            var settings = this.options;
            /** @type {boolean} */
            var tracking = true;
            var t = e.distance;
            var direction = e.direction;
            var distX = e.deltaX;
            var value = e.deltaY;
            return direction & settings.direction || (settings.direction & LENGTH_MASK ? (direction = 0 === distX ? other : distX < 0 ? right : left, tracking = distX != this.pX, t = Math.abs(e.deltaX)) : (direction = 0 === value ? other : value < 0 ? bottom : up, tracking = value != this.pY, t = Math.abs(e.deltaY))), e.direction = direction, tracking && (t > settings.threshold && direction & settings.direction);
        },
        /**
         * @param {Object} stream
         * @return {?}
         */
        attrTest : function(stream) {
            return template.prototype.attrTest.call(this, stream) && (this.state & w_mask || !(this.state & w_mask) && this.directionTest(stream));
        },
        /**
         * @param {Object} data
         * @return {undefined}
         */
        emit : function(data) {
            this.pX = data.deltaX;
            this.pY = data.deltaY;
            var event = setDirection(data.direction);
            if (event) {
                this.manager.emit(this.options.event + event, data);
            }
            this._super.emit.call(this, data);
        }
    });
    inherit(g, template, {
        defaults : {
            event : "pinch",
            threshold : 0,
            pointers : 2
        },
        /**
         * @return {?}
         */
        getTouchAction : function() {
            return[name];
        },
        /**
         * @param {Object} p
         * @return {?}
         */
        attrTest : function(p) {
            return this._super.attrTest.call(this, p) && (Math.abs(p.scale - 1) > this.options.threshold || this.state & w_mask);
        },
        /**
         * @param {?} data
         * @return {undefined}
         */
        emit : function(data) {
            if (this._super.emit.call(this, data), 1 !== data.scale) {
                /** @type {string} */
                var type = data.scale < 1 ? "in" : "out";
                this.manager.emit(this.options.event + type, data);
            }
        }
    });
    inherit(Parser, initialize, {
        defaults : {
            event : "press",
            pointers : 1,
            time : 500,
            threshold : 5
        },
        /**
         * @return {?}
         */
        getTouchAction : function() {
            return[AUTO];
        },
        /**
         * @param {string} a
         * @return {?}
         */
        process : function(a) {
            var b = this.options;
            /** @type {boolean} */
            var c = a.pointers.length === b.pointers;
            /** @type {boolean} */
            var d = a.distance < b.threshold;
            /** @type {boolean} */
            var f = a.deltaTime > b.time;
            if (this._input = a, !d || (!c || a.eventType & (doc | clear) && !f)) {
                this.reset();
            } else {
                if (a.eventType & _initiate) {
                    this.reset();
                    this._timer = range(function() {
                        /** @type {number} */
                        this.state = state;
                        this.tryEmit();
                    }, b.time, this);
                } else {
                    if (a.eventType & doc) {
                        return state;
                    }
                }
            }
            return addCurveIntersections;
        },
        /**
         * @return {undefined}
         */
        reset : function() {
            clearTimeout(this._timer);
        },
        /**
         * @param {?} data
         * @return {undefined}
         */
        emit : function(data) {
            if (this.state === state) {
                if (data && data.eventType & doc) {
                    this.manager.emit(this.options.event + "up", data);
                } else {
                    /** @type {number} */
                    this._input.timeStamp = now();
                    this.manager.emit(this.options.event, this._input);
                }
            }
        }
    });
    inherit(SrcCell, template, {
        defaults : {
            event : "rotate",
            threshold : 0,
            pointers : 2
        },
        /**
         * @return {?}
         */
        getTouchAction : function() {
            return[name];
        },
        /**
         * @param {Object} item
         * @return {?}
         */
        attrTest : function(item) {
            return this._super.attrTest.call(this, item) && (Math.abs(item.rotation) > this.options.threshold || this.state & w_mask);
        }
    });
    inherit(frag, template, {
        defaults : {
            event : "swipe",
            threshold : 10,
            velocity : 0.65,
            direction : LENGTH_MASK | LABEL_POINTER,
            pointers : 1
        },
        /**
         * @return {?}
         */
        getTouchAction : function() {
            return Sprite.prototype.getTouchAction.call(this);
        },
        /**
         * @param {Object} e
         * @return {?}
         */
        attrTest : function(e) {
            var distance;
            var len = this.options.direction;
            return len & (LENGTH_MASK | LABEL_POINTER) ? distance = e.velocity : len & LENGTH_MASK ? distance = e.velocityX : len & LABEL_POINTER && (distance = e.velocityY), this._super.attrTest.call(this, e) && (len & e.direction && (e.distance > this.options.threshold && (abs(distance) > this.options.velocity && e.eventType & doc)));
        },
        /**
         * @param {?} data
         * @return {undefined}
         */
        emit : function(data) {
            var event = setDirection(data.direction);
            if (event) {
                this.manager.emit(this.options.event + event, data);
            }
            this.manager.emit(this.options.event, data);
        }
    });
    inherit(AnimatedSprite, initialize, {
        defaults : {
            event : "tap",
            pointers : 1,
            taps : 1,
            interval : 300,
            time : 250,
            threshold : 2,
            posThreshold : 10
        },
        /**
         * @return {?}
         */
        getTouchAction : function() {
            return[rvar];
        },
        /**
         * @param {string} e
         * @return {?}
         */
        process : function(e) {
            var options = this.options;
            /** @type {boolean} */
            var c = e.pointers.length === options.pointers;
            /** @type {boolean} */
            var m = e.distance < options.threshold;
            /** @type {boolean} */
            var k = e.deltaTime < options.time;
            if (this.reset(), e.eventType & _initiate && 0 === this.count) {
                return this.failTimeout();
            }
            if (m && (k && c)) {
                if (e.eventType != doc) {
                    return this.failTimeout();
                }
                /** @type {boolean} */
                var b = !this.pTime || e.timeStamp - this.pTime < options.interval;
                /** @type {boolean} */
                var a = !this.pCenter || distanceBetween(this.pCenter, e.center) < options.posThreshold;
                this.pTime = e.timeStamp;
                this.pCenter = e.center;
                if (a && b) {
                    this.count += 1;
                } else {
                    /** @type {number} */
                    this.count = 1;
                }
                /** @type {string} */
                this._input = e;
                /** @type {number} */
                var count = this.count % options.taps;
                if (0 === count) {
                    return this.hasRequireFailures() ? (this._timer = range(function() {
                        /** @type {number} */
                        this.state = state;
                        this.tryEmit();
                    }, options.interval, this), w_mask) : state;
                }
            }
            return addCurveIntersections;
        },
        /**
         * @return {?}
         */
        failTimeout : function() {
            return this._timer = range(function() {
                /** @type {number} */
                this.state = addCurveIntersections;
            }, this.options.interval, this), addCurveIntersections;
        },
        /**
         * @return {undefined}
         */
        reset : function() {
            clearTimeout(this._timer);
        },
        /**
         * @return {undefined}
         */
        emit : function() {
            if (this.state == state) {
                this._input.tapCount = this.count;
                this.manager.emit(this.options.event, this._input);
            }
        }
    });
    /** @type {string} */
    params.VERSION = "2.0.4";
    params.defaults = {
        domEvents : false,
        touchAction : touchAction,
        enable : true,
        inputTarget : null,
        inputClass : null,
        preset : [[SrcCell, {
            enable : false
        }], [g, {
            enable : false
        }, ["rotate"]], [frag, {
            direction : LENGTH_MASK
        }], [Sprite, {
            direction : LENGTH_MASK
        }, ["swipe"]], [AnimatedSprite], [AnimatedSprite, {
            event : "doubletap",
            taps : 2
        }, ["tap"]], [Parser]],
        cssProps : {
            userSelect : "none",
            touchSelect : "none",
            touchCallout : "none",
            contentZooming : "none",
            userDrag : "none",
            tapHighlightColor : "rgba(0,0,0,0)"
        }
    };
    /** @type {number} */
    var stopped = 1;
    /** @type {number} */
    var EADDRINUSE = 2;
    add.prototype = {
        /**
         * @param {string} elem
         * @return {?}
         */
        set : function(elem) {
            return extend(this.options, elem), elem.touchAction && this.touchAction.update(), elem.inputTarget && (this.input.destroy(), this.input.target = elem.inputTarget, this.input.init()), this;
        },
        /**
         * @param {boolean} gotoEnd
         * @return {undefined}
         */
        stop : function(gotoEnd) {
            /** @type {number} */
            this.session.stopped = gotoEnd ? EADDRINUSE : stopped;
        },
        /**
         * @param {Object} url
         * @return {undefined}
         */
        recognize : function(url) {
            var e = this.session;
            if (!e.stopped) {
                this.touchAction.preventDefaults(url);
                var child;
                var codeSegments = this.recognizers;
                var options = e.curRecognizer;
                if (!options || options && options.state & state) {
                    /** @type {null} */
                    options = e.curRecognizer = null;
                }
                /** @type {number} */
                var i = 0;
                for (;i < codeSegments.length;) {
                    child = codeSegments[i];
                    if (e.stopped === EADDRINUSE || options && (child != options && !child.canRecognizeWith(options))) {
                        child.reset();
                    } else {
                        child.recognize(url);
                    }
                    if (!options) {
                        if (child.state & (w_mask | STATE_CHANGED | length)) {
                            options = e.curRecognizer = child;
                        }
                    }
                    i++;
                }
            }
        },
        /**
         * @param {string} elem
         * @return {?}
         */
        get : function(elem) {
            if (elem instanceof initialize) {
                return elem;
            }
            var codeSegments = this.recognizers;
            /** @type {number} */
            var i = 0;
            for (;i < codeSegments.length;i++) {
                if (codeSegments[i].options.event == elem) {
                    return codeSegments[i];
                }
            }
            return null;
        },
        /**
         * @param {string} value
         * @return {?}
         */
        add : function(value) {
            if (apply(value, "add", this)) {
                return this;
            }
            var selector = this.get(value.options.event);
            return selector && this.remove(selector), this.recognizers.push(value), value.manager = this, this.touchAction.update(), value;
        },
        /**
         * @param {string} owner
         * @return {?}
         */
        remove : function(owner) {
            if (apply(owner, "remove", this)) {
                return this;
            }
            var listeners = this.recognizers;
            return owner = this.get(owner), listeners.splice(indexOf(listeners, owner), 1), this.touchAction.update(), this;
        },
        /**
         * @param {string} type
         * @param {Function} wait
         * @return {?}
         */
        on : function(type, wait) {
            var handlers = this.handlers;
            return each(split(type), function(event) {
                handlers[event] = handlers[event] || [];
                handlers[event].push(wait);
            }), this;
        },
        /**
         * @param {string} selector
         * @param {string} callback
         * @return {?}
         */
        off : function(selector, callback) {
            var handlers = this.handlers;
            return each(split(selector), function(type) {
                if (callback) {
                    handlers[type].splice(indexOf(handlers[type], callback), 1);
                } else {
                    delete handlers[type];
                }
            }), this;
        },
        /**
         * @param {string} type
         * @param {Object} data
         * @return {undefined}
         */
        emit : function(type, data) {
            if (this.options.domEvents) {
                createEvent(type, data);
            }
            var listeners = this.handlers[type] && this.handlers[type].slice();
            if (listeners && listeners.length) {
                /** @type {string} */
                data.type = type;
                /**
                 * @return {undefined}
                 */
                data.preventDefault = function() {
                    data.srcEvent.preventDefault();
                };
                /** @type {number} */
                var i = 0;
                for (;i < listeners.length;) {
                    listeners[i](data);
                    i++;
                }
            }
        },
        /**
         * @return {undefined}
         */
        destroy : function() {
            if (this.element) {
                fn(this, false);
            }
            this.handlers = {};
            this.session = {};
            this.input.destroy();
            /** @type {null} */
            this.element = null;
        }
    };
    extend(params, {
        INPUT_START : _initiate,
        INPUT_MOVE : setValueFromPos,
        INPUT_END : doc,
        INPUT_CANCEL : clear,
        STATE_POSSIBLE : st,
        STATE_BEGAN : w_mask,
        STATE_CHANGED : STATE_CHANGED,
        STATE_ENDED : length,
        STATE_RECOGNIZED : state,
        STATE_CANCELLED : STATE_CANCELLED,
        STATE_FAILED : addCurveIntersections,
        DIRECTION_NONE : other,
        DIRECTION_LEFT : right,
        DIRECTION_RIGHT : left,
        DIRECTION_UP : bottom,
        DIRECTION_DOWN : up,
        DIRECTION_HORIZONTAL : LENGTH_MASK,
        DIRECTION_VERTICAL : LABEL_POINTER,
        DIRECTION_ALL : rev,
        /** @type {function (?, Object): undefined} */
        Manager : add,
        /** @type {function (Element, Function): undefined} */
        Input : init,
        /** @type {function (?, string): undefined} */
        TouchAction : constructor,
        /** @type {function (): undefined} */
        TouchInput : Scene,
        /** @type {function (): undefined} */
        MouseInput : Model,
        /** @type {function (): undefined} */
        PointerEventInput : onSuccess,
        /** @type {function (): undefined} */
        TouchMouseInput : Game,
        /** @type {function (): undefined} */
        SingleTouchInput : self,
        /** @type {function (Object): undefined} */
        Recognizer : initialize,
        /** @type {function (): undefined} */
        AttrRecognizer : template,
        /** @type {function (): undefined} */
        Tap : AnimatedSprite,
        /** @type {function (): undefined} */
        Pan : Sprite,
        /** @type {function (): undefined} */
        Swipe : frag,
        /** @type {function (): undefined} */
        Pinch : g,
        /** @type {function (): undefined} */
        Rotate : SrcCell,
        /** @type {function (): undefined} */
        Press : Parser,
        /** @type {function (string, Function, Object): undefined} */
        on : addListener,
        /** @type {function (string, string, string): undefined} */
        off : off,
        /** @type {function (Function, Function, Function): undefined} */
        each : each,
        /** @type {function (?, ?): ?} */
        merge : merge,
        /** @type {function (?, ?, string): ?} */
        extend : extend,
        /** @type {function (Function, Function, ?): undefined} */
        inherit : inherit,
        /** @type {function (Function, ?): ?} */
        bindFn : bind,
        /** @type {function (Object, string): ?} */
        prefixed : find
    });
    if (typeof define == number && define.amd) {
        define(function() {
            return params;
        });
    } else {
        if ("undefined" != typeof module && module.exports) {
            /** @type {function (string, Function): ?} */
            module.exports = params;
        } else {
            /** @type {function (string, Function): ?} */
            a[prop] = params;
        }
    }
}(window, document, "Hammer"), function(self, ctor, test, parent, JSON, object) {
    /**
     * @param {Function} fn
     * @param {Function} callback
     * @return {?}
     */
    function map(fn, callback) {
        return function() {
            return fn.call(this, callback.apply(this, arguments));
        };
    }
    /**
     * @param {string} name
     * @return {?}
     */
    function attr(name) {
        return function(old) {
            return old[name];
        };
    }
    /**
     * @param {Object} args
     * @param {Function} fn
     * @return {?}
     */
    function apply(args, fn) {
        return fn.apply(object, args);
    }
    /**
     * @param {Function} fn
     * @return {?}
     */
    function varArgs(fn) {
        /** @type {number} */
        var index = fn.length - 1;
        /** @type {function (this:(Array.<T>|string|{length: number}), *=, *=): Array.<T>} */
        var __slice = test.prototype.slice;
        if (0 == index) {
            return function() {
                return fn.call(this, __slice.call(arguments));
            };
        }
        if (1 == index) {
            return function() {
                return fn.call(this, arguments[0], __slice.call(arguments, 1));
            };
        }
        /** @type {Array} */
        var args = test(fn.length);
        return function() {
            /** @type {number} */
            var $_i = 0;
            for (;$_i < index;$_i++) {
                args[$_i] = arguments[$_i];
            }
            return args[index] = __slice.call(arguments, index), fn.apply(this, args);
        };
    }
    /**
     * @param {Function} fn
     * @return {?}
     */
    function flip(fn) {
        return function(partials, err) {
            return fn(err, partials);
        };
    }
    /**
     * @param {Function} result
     * @param {?} callback
     * @return {?}
     */
    function cb(result, callback) {
        return function(i) {
            return result(i) && callback(i);
        };
    }
    /**
     * @return {undefined}
     */
    function noop() {
    }
    /**
     * @return {?}
     */
    function always() {
        return true;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    function functor(val) {
        return function() {
            return val;
        };
    }
    /**
     * @param {Function} obj
     * @param {Object} object
     * @return {?}
     */
    function isFunction(obj, object) {
        return object && object.constructor === obj;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function defined(value) {
        return value !== object;
    }
    /**
     * @param {?} fieldList
     * @param {Object} o
     * @return {?}
     */
    function hasAllProperties(fieldList, o) {
        return o instanceof ctor && all(function(asset) {
            return asset in o;
        }, fieldList);
    }
    /**
     * @param {?} actual
     * @param {?} xs
     * @return {?}
     */
    function equal(actual, xs) {
        return[actual, xs];
    }
    /**
     * @param {Array} inputArray
     * @return {?}
     */
    function arrayAsList(inputArray) {
        return reverseList(inputArray.reduce(flip(equal), value));
    }
    /**
     * @param {?} classesToRemove
     * @return {?}
     */
    function listAsArray(classesToRemove) {
        return dispatch(function(buf, pair) {
            return buf.unshift(pair), buf;
        }, [], classesToRemove);
    }
    /**
     * @param {?} fn
     * @param {?} list
     * @return {?}
     */
    function foldR1(fn, list) {
        return list ? equal(fn(head(list)), foldR1(fn, $(list))) : value;
    }
    /**
     * @param {Function} done
     * @param {Array} isXML
     * @param {?} element
     * @return {?}
     */
    function dispatch(done, isXML, element) {
        return element ? done(dispatch(done, isXML, $(element)), head(element)) : isXML;
    }
    /**
     * @param {?} list
     * @param {Function} test
     * @param {string} removedFn
     * @return {?}
     */
    function without(list, test, removedFn) {
        /**
         * @param {?} list
         * @param {?} fn
         * @return {?}
         */
        function map(list, fn) {
            return list ? test(head(list)) ? (fn(head(list)), $(list)) : equal(head(list), map($(list), fn)) : value;
        }
        return map(list, removedFn || noop);
    }
    /**
     * @param {Function} fn
     * @param {?} list
     * @return {?}
     */
    function all(fn, list) {
        return!list || fn(head(list)) && all(fn, $(list));
    }
    /**
     * @param {?} node
     * @param {Object} args
     * @return {undefined}
     */
    function append(node, args) {
        if (node) {
            head(node).apply(null, args);
            append($(node), args);
        }
    }
    /**
     * @param {?} objId
     * @return {?}
     */
    function reverseList(objId) {
        /**
         * @param {?} value
         * @param {string} val
         * @return {?}
         */
        function callback(value, val) {
            return value ? callback($(value), equal(head(value), val)) : val;
        }
        return callback(objId, value);
    }
    /**
     * @param {?} test
     * @param {?} list
     * @return {?}
     */
    function first(test, list) {
        return list && (test(head(list)) ? head(list) : first(test, $(list)));
    }
    /**
     * @param {?} oboeBus
     * @return {undefined}
     */
    function create(oboeBus) {
        /**
         * @return {undefined}
         */
        function resize() {
            /** @type {number} */
            var min = 0;
            if (data.length > max) {
                close("Max buffer length exceeded: textNode");
                /** @type {number} */
                min = Math.max(min, data.length);
            }
            if (h.length > max) {
                close("Max buffer length exceeded: numberNode");
                /** @type {number} */
                min = Math.max(min, h.length);
            }
            x2 = max - min + x1;
        }
        /**
         * @param {string} result
         * @return {undefined}
         */
        function close(result) {
            if (data) {
                callback(data);
                /** @type {string} */
                data = "";
            }
            /** @type {Error} */
            e = parent(result + "\nLn: " + i + "\nCol: " + isPlaceholderItem + "\nChr: " + match);
            ok(errorReport(object, object, e));
        }
        /**
         * @return {undefined}
         */
        function cycle() {
            if (!(method === post && 0 === oauth)) {
                close("Unexpected end");
            }
            if (data) {
                callback(data);
                /** @type {string} */
                data = "";
            }
            /** @type {boolean} */
            V = true;
        }
        /**
         * @param {string} match
         * @return {?}
         */
        function lookAhead(match) {
            return "\r" == match || ("\n" == match || (" " == match || "\t" == match));
        }
        /**
         * @param {string} text
         * @return {?}
         */
        function init(text) {
            if (!e) {
                if (V) {
                    return close("Cannot write after close");
                }
                /** @type {number} */
                var index = 0;
                match = text[0];
                for (;match && (handler = match, match = text[index++]);) {
                    switch(x1++, "\n" == match ? (i++, isPlaceholderItem = 0) : isPlaceholderItem++, method) {
                        case fn:
                            if ("{" === match) {
                                method = property;
                            } else {
                                if ("[" === match) {
                                    method = PUT;
                                } else {
                                    if (!lookAhead(match)) {
                                        return close("Non-whitespace before {[.");
                                    }
                                }
                            }
                            continue;
                        case del:
                            ;
                        case property:
                            if (lookAhead(match)) {
                                continue;
                            }
                            if (method === del) {
                                ret.push(value);
                            } else {
                                if ("}" === match) {
                                    valueAccessor();
                                    checkPositions();
                                    method = ret.pop() || post;
                                    continue;
                                }
                                ret.push(options);
                            }
                            if ('"' !== match) {
                                return close('Malformed object key should start with " ');
                            }
                            method = target;
                            continue;
                        case value:
                            ;
                        case options:
                            if (lookAhead(match)) {
                                continue;
                            }
                            if (":" === match) {
                                if (method === options) {
                                    ret.push(options);
                                    if (data) {
                                        valueAccessor();
                                        getter(data);
                                        /** @type {string} */
                                        data = "";
                                    }
                                    oauth++;
                                } else {
                                    if (data) {
                                        getter(data);
                                        /** @type {string} */
                                        data = "";
                                    }
                                }
                                method = post;
                            } else {
                                if ("}" === match) {
                                    if (data) {
                                        callback(data);
                                        /** @type {string} */
                                        data = "";
                                    }
                                    checkPositions();
                                    oauth--;
                                    method = ret.pop() || post;
                                } else {
                                    if ("," !== match) {
                                        return close("Bad object");
                                    }
                                    if (method === options) {
                                        ret.push(options);
                                    }
                                    if (data) {
                                        callback(data);
                                        /** @type {string} */
                                        data = "";
                                    }
                                    method = del;
                                }
                            }
                            continue;
                        case PUT:
                            ;
                        case post:
                            if (lookAhead(match)) {
                                continue;
                            }
                            if (method === PUT) {
                                if (emit(), oauth++, method = post, "]" === match) {
                                    _emit();
                                    oauth--;
                                    method = ret.pop() || post;
                                    continue;
                                }
                                ret.push(rreturn);
                            }
                            if ('"' === match) {
                                method = target;
                            } else {
                                if ("{" === match) {
                                    method = property;
                                } else {
                                    if ("[" === match) {
                                        method = PUT;
                                    } else {
                                        if ("t" === match) {
                                            method = after;
                                        } else {
                                            if ("f" === match) {
                                                method = methodIn;
                                            } else {
                                                if ("n" === match) {
                                                    method = on;
                                                } else {
                                                    if ("-" === match) {
                                                        h += match;
                                                    } else {
                                                        if ("0" === match) {
                                                            h += match;
                                                            method = object;
                                                        } else {
                                                            if ("123456789".indexOf(match) === -1) {
                                                                return close("Bad value");
                                                            }
                                                            h += match;
                                                            method = object;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            continue;
                        case rreturn:
                            if ("," === match) {
                                ret.push(rreturn);
                                if (data) {
                                    callback(data);
                                    /** @type {string} */
                                    data = "";
                                }
                                method = post;
                            } else {
                                if ("]" !== match) {
                                    if (lookAhead(match)) {
                                        continue;
                                    }
                                    return close("Bad array");
                                }
                                if (data) {
                                    callback(data);
                                    /** @type {string} */
                                    data = "";
                                }
                                _emit();
                                oauth--;
                                method = ret.pop() || post;
                            }
                            continue;
                        case target:
                            /** @type {number} */
                            var lastIndex = index - 1;
                            a: for (;;) {
                                for (;a > 0;) {
                                    if (b += match, match = text.charAt(index++), 4 === a ? (data += String.fromCharCode(parseInt(b, 16)), a = 0, lastIndex = index - 1) : a++, !match) {
                                        break a;
                                    }
                                }
                                if ('"' === match && !U) {
                                    method = ret.pop() || post;
                                    data += text.substring(lastIndex, index - 1);
                                    if (!data) {
                                        callback("");
                                    }
                                    break;
                                }
                                if ("\\" === match && (!U && (U = true, data += text.substring(lastIndex, index - 1), match = text.charAt(index++), !match))) {
                                    break;
                                }
                                if (U) {
                                    if (U = false, "n" === match ? data += "\n" : "r" === match ? data += "\r" : "t" === match ? data += "\t" : "f" === match ? data += "\f" : "b" === match ? data += "\b" : "u" === match ? (a = 1, b = "") : data += match, match = text.charAt(index++), lastIndex = index - 1, match) {
                                        continue;
                                    }
                                    break;
                                }
                                re.lastIndex = index;
                                /** @type {(Array.<string>|null)} */
                                var pos = re.exec(text);
                                if (!pos) {
                                    index = text.length + 1;
                                    data += text.substring(lastIndex, index - 1);
                                    break;
                                }
                                if (index = pos.index + 1, match = text.charAt(pos.index), !match) {
                                    data += text.substring(lastIndex, index - 1);
                                    break;
                                }
                            }
                            continue;
                        case after:
                            if (!match) {
                                continue;
                            }
                            if ("r" !== match) {
                                return close("Invalid true started with t" + match);
                            }
                            method = last;
                            continue;
                        case last:
                            if (!match) {
                                continue;
                            }
                            if ("u" !== match) {
                                return close("Invalid true started with tr" + match);
                            }
                            method = thisMethod;
                            continue;
                        case thisMethod:
                            if (!match) {
                                continue;
                            }
                            if ("e" !== match) {
                                return close("Invalid true started with tru" + match);
                            }
                            callback(true);
                            method = ret.pop() || post;
                            continue;
                        case methodIn:
                            if (!match) {
                                continue;
                            }
                            if ("a" !== match) {
                                return close("Invalid false started with f" + match);
                            }
                            method = _method;
                            continue;
                        case _method:
                            if (!match) {
                                continue;
                            }
                            if ("l" !== match) {
                                return close("Invalid false started with fa" + match);
                            }
                            method = requester;
                            continue;
                        case requester:
                            if (!match) {
                                continue;
                            }
                            if ("s" !== match) {
                                return close("Invalid false started with fal" + match);
                            }
                            method = scope;
                            continue;
                        case scope:
                            if (!match) {
                                continue;
                            }
                            if ("e" !== match) {
                                return close("Invalid false started with fals" + match);
                            }
                            callback(false);
                            method = ret.pop() || post;
                            continue;
                        case on:
                            if (!match) {
                                continue;
                            }
                            if ("u" !== match) {
                                return close("Invalid null started with n" + match);
                            }
                            method = gzip;
                            continue;
                        case gzip:
                            if (!match) {
                                continue;
                            }
                            if ("l" !== match) {
                                return close("Invalid null started with nu" + match);
                            }
                            method = GET;
                            continue;
                        case GET:
                            if (!match) {
                                continue;
                            }
                            if ("l" !== match) {
                                return close("Invalid null started with nul" + match);
                            }
                            callback(null);
                            method = ret.pop() || post;
                            continue;
                        case XRANGEPLAIN:
                            if ("." !== match) {
                                return close("Leading zero not followed by .");
                            }
                            h += match;
                            method = object;
                            continue;
                        case object:
                            if ("0123456789".indexOf(match) !== -1) {
                                h += match;
                            } else {
                                if ("." === match) {
                                    if (h.indexOf(".") !== -1) {
                                        return close("Invalid number has two dots");
                                    }
                                    h += match;
                                } else {
                                    if ("e" === match || "E" === match) {
                                        if (h.indexOf("e") !== -1 || h.indexOf("E") !== -1) {
                                            return close("Invalid number has two exponential");
                                        }
                                        h += match;
                                    } else {
                                        if ("+" === match || "-" === match) {
                                            if ("e" !== handler && "E" !== handler) {
                                                return close("Invalid symbol in number");
                                            }
                                            h += match;
                                        } else {
                                            if (h) {
                                                callback(parseFloat(h));
                                                /** @type {string} */
                                                h = "";
                                            }
                                            index--;
                                            method = ret.pop() || post;
                                        }
                                    }
                                }
                            }
                            continue;
                        default:
                            return close("Unknown state: " + method);
                    }
                }
                if (x1 >= x2) {
                    resize();
                }
            }
        }
        var e;
        var match;
        var handler;
        var valueAccessor = oboeBus(ext).emit;
        var checkPositions = oboeBus(id).emit;
        var emit = oboeBus(paramName).emit;
        var _emit = oboeBus(name).emit;
        var getter = oboeBus(eventName).emit;
        var callback = oboeBus(key).emit;
        var ok = oboeBus(FAIL_EVENT).emit;
        /** @type {number} */
        var max = 65536;
        /** @type {RegExp} */
        var re = /[\\"\n]/g;
        /** @type {number} */
        var actualObject = 0;
        /** @type {number} */
        var fn = actualObject++;
        /** @type {number} */
        var post = actualObject++;
        /** @type {number} */
        var property = actualObject++;
        /** @type {number} */
        var options = actualObject++;
        /** @type {number} */
        var PUT = actualObject++;
        /** @type {number} */
        var rreturn = actualObject++;
        /** @type {number} */
        var target = actualObject++;
        /** @type {number} */
        var del = actualObject++;
        /** @type {number} */
        var value = actualObject++;
        /** @type {number} */
        var after = actualObject++;
        /** @type {number} */
        var last = actualObject++;
        /** @type {number} */
        var thisMethod = actualObject++;
        /** @type {number} */
        var methodIn = actualObject++;
        /** @type {number} */
        var _method = actualObject++;
        /** @type {number} */
        var requester = actualObject++;
        /** @type {number} */
        var scope = actualObject++;
        /** @type {number} */
        var on = actualObject++;
        /** @type {number} */
        var gzip = actualObject++;
        /** @type {number} */
        var GET = actualObject++;
        /** @type {number} */
        var XRANGEPLAIN = actualObject++;
        /** @type {number} */
        var object = actualObject;
        /** @type {number} */
        var x2 = max;
        /** @type {string} */
        var data = "";
        /** @type {string} */
        var h = "";
        /** @type {boolean} */
        var U = false;
        /** @type {boolean} */
        var V = false;
        /** @type {number} */
        var method = fn;
        /** @type {Array} */
        var ret = [];
        /** @type {null} */
        var b = null;
        /** @type {number} */
        var a = 0;
        /** @type {number} */
        var oauth = 0;
        /** @type {number} */
        var x1 = 0;
        /** @type {number} */
        var isPlaceholderItem = 0;
        /** @type {number} */
        var i = 1;
        oboeBus(STREAM_DATA).on(init);
        oboeBus(ABORTING).on(cycle);
    }
    /**
     * @param {?} oboeBus
     * @param {Object} a
     * @return {undefined}
     */
    function instanceController(oboeBus, a) {
        /**
         * @param {?} callback
         * @return {?}
         */
        function on(callback) {
            return function(mongoObject) {
                basis = callback(basis, mongoObject);
            };
        }
        var basis;
        var selector = {};
        var prefix;
        for (prefix in a) {
            oboeBus(prefix).on(on(a[prefix]), selector);
        }
        oboeBus(ROOT_FOUND).on(function() {
            var eventId;
            for (eventId in a) {
                oboeBus(eventId).un(selector);
            }
        });
    }
    /**
     * @param {(Error|string)} headerStr
     * @return {?}
     */
    function parseResponseHeaders(headerStr) {
        var headers = {};
        return headerStr && headerStr.split("\r\n").forEach(function(part) {
            var index = part.indexOf(": ");
            headers[part.substring(0, index)] = part.substring(index + 2);
        }), headers;
    }
    /**
     * @param {Location} uri
     * @param {Object} self
     * @return {?}
     */
    function callback(uri, self) {
        /**
         * @param {string} status
         * @return {?}
         */
        function error(status) {
            return{
                "http:" : 80,
                "https:" : 443
            }[status];
        }
        /**
         * @param {string} options
         * @return {?}
         */
        function load(options) {
            return options.port || error(options.protocol || uri.protocol);
        }
        return!!(self.protocol && self.protocol != uri.protocol || (self.host && self.host != uri.host || self.host && load(self) != load(uri)));
    }
    /**
     * @param {Function} fn
     * @return {?}
     */
    function on(fn) {
        /** @type {RegExp} */
        var reName = /(\w+:)?(?:\/\/)([\w.-]+)?(?::(\d+))?\/?/;
        /** @type {Array} */
        var segmentMatch = reName.exec(fn) || [];
        return{
            protocol : segmentMatch[1] || "",
            host : segmentMatch[2] || "",
            port : segmentMatch[3] || ""
        };
    }
    /**
     * @return {?}
     */
    function httpTransport() {
        return new XMLHttpRequest;
    }
    /**
     * @param {?} oboeBus
     * @param {Object} xhr
     * @param {string} optgroup
     * @param {Function} recurring
     * @param {?} data
     * @param {Object} headers
     * @param {boolean} deepDataAndEvents
     * @return {undefined}
     */
    function streamingHttp(oboeBus, xhr, optgroup, recurring, data, headers, deepDataAndEvents) {
        /**
         * @return {undefined}
         */
        function handleProgress() {
            var textSoFar = xhr.responseText;
            var memory = textSoFar.substr(numberOfCharsAlreadyGivenToCallback);
            if (memory) {
                emitStreamData(memory);
            }
            numberOfCharsAlreadyGivenToCallback = len(textSoFar);
        }
        var emitStreamData = oboeBus(STREAM_DATA).emit;
        var emitFail = oboeBus(FAIL_EVENT).emit;
        /** @type {number} */
        var numberOfCharsAlreadyGivenToCallback = 0;
        /** @type {boolean} */
        var n = true;
        oboeBus(ROOT_FOUND).on(function() {
            /** @type {null} */
            xhr.onreadystatechange = null;
            xhr.abort();
        });
        if ("onprogress" in xhr) {
            /** @type {function (): undefined} */
            xhr.onprogress = handleProgress;
        }
        /**
         * @return {?}
         */
        xhr.onreadystatechange = function() {
            /**
             * @return {undefined}
             */
            function callback() {
                try {
                    if (n) {
                        oboeBus(HTTP_START).emit(xhr.status, parseResponseHeaders(xhr.getAllResponseHeaders()));
                    }
                    /** @type {boolean} */
                    n = false;
                } catch (a) {
                }
            }
            switch(xhr.readyState) {
                case 2:
                    ;
                case 3:
                    return callback();
                case 4:
                    callback();
                    /** @type {boolean} */
                    var d = 2 == String(xhr.status)[0];
                    if (d) {
                        handleProgress();
                        oboeBus(ABORTING).emit();
                    } else {
                        emitFail(errorReport(xhr.status, xhr.responseText));
                    }
                    ;
            }
        };
        try {
            xhr.open(optgroup, recurring, true);
            var headerName;
            for (headerName in headers) {
                xhr.setRequestHeader(headerName, headers[headerName]);
            }
            if (!callback(self.location, on(recurring))) {
                xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
            }
            /** @type {boolean} */
            xhr.withCredentials = deepDataAndEvents;
            xhr.send(data);
        } catch (e) {
            self.setTimeout(partialComplete(emitFail, errorReport(object, object, e)), 0);
        }
    }
    /**
     * @param {string} name
     * @param {string} data
     * @return {?}
     */
    function func(name, data) {
        return{
            key : name,
            node : data
        };
    }
    /**
     * @param {?} oboeBus
     * @return {?}
     */
    function incrementalContentBuilder(oboeBus) {
        /**
         * @param {?} node
         * @param {string} index
         * @return {?}
         */
        function parse(node, index) {
            var str = nodeOf(head(node));
            return isFunction(test, str) ? fn(node, len(str), index) : node;
        }
        /**
         * @param {?} ast
         * @param {string} k
         * @return {?}
         */
        function walk(ast, k) {
            if (!ast) {
                return filter(k), fn(ast, ROOT_PATH, k);
            }
            var v = parse(ast, k);
            var val = $(v);
            var key = keyOf(head(v));
            return callback(val, key, k), equal(func(key, k), val);
        }
        /**
         * @param {?} node
         * @param {string} key
         * @param {string} data
         * @return {undefined}
         */
        function callback(node, key, data) {
            /** @type {string} */
            nodeOf(head(node))[key] = data;
        }
        /**
         * @param {?} key
         * @param {string} k
         * @param {string} data
         * @return {?}
         */
        function fn(key, k, data) {
            if (key) {
                callback(key, k, data);
            }
            var memory = equal(func(k, data), key);
            return fire(memory), memory;
        }
        /**
         * @param {string} k
         * @return {?}
         */
        function value(k) {
            return func(k), $(k) || peek(nodeOf(head(k)));
        }
        var fire = oboeBus(PATH_FOUND).emit;
        var func = oboeBus(NODE_FOUND).emit;
        var filter = oboeBus(STREAM_END).emit;
        var peek = oboeBus(fullEventName).emit;
        var c = {};
        return c[ext] = function(conditional) {
            return walk(conditional, {});
        }, c[paramName] = function(conditional) {
            return walk(conditional, []);
        }, c[eventName] = fn, c[key] = map(value, walk), c[id] = value, c[name] = value, c;
    }
    /**
     * @param {string} eventType
     * @param {Object} newListener
     * @param {Object} removeListener
     * @return {?}
     */
    function singleEventPubSub(eventType, newListener, removeListener) {
        /**
         * @param {Function} id
         * @return {?}
         */
        function hasId(id) {
            return function(filter) {
                return filter.id == id;
            };
        }
        var listenerTupleList;
        var list;
        return{
            /**
             * @param {string} type
             * @param {Function} wait
             * @return {?}
             */
            on : function(type, wait) {
                var tuple = {
                    listener : type,
                    id : wait || type
                };
                return newListener && newListener.emit(eventType, type, tuple.id), listenerTupleList = equal(tuple, listenerTupleList), list = equal(type, list), this;
            },
            /**
             * @return {undefined}
             */
            emit : function() {
                append(list, arguments);
            },
            /**
             * @param {Function} fn
             * @return {undefined}
             */
            un : function(fn) {
                var removed;
                listenerTupleList = without(listenerTupleList, hasId(fn), function(tuple) {
                    /** @type {Object} */
                    removed = tuple;
                });
                if (removed) {
                    list = without(list, function(listener) {
                        return listener == removed.listener;
                    });
                    if (removeListener) {
                        removeListener.emit(eventType, removed.listener, removed.id);
                    }
                }
            },
            /**
             * @return {?}
             */
            listeners : function() {
                return list;
            },
            /**
             * @param {Object} listenerId
             * @return {?}
             */
            hasListener : function(listenerId) {
                var test = listenerId ? hasId(listenerId) : always;
                return defined(first(test, listenerTupleList));
            }
        };
    }
    /**
     * @return {?}
     */
    function pubSub() {
        /**
         * @param {string} eventName
         * @return {?}
         */
        function newSingle(eventName) {
            return singles[eventName] = singleEventPubSub(eventName, newListener, removeListener);
        }
        /**
         * @param {string} eventName
         * @return {?}
         */
        function pubSubInstance(eventName) {
            return singles[eventName] || newSingle(eventName);
        }
        var singles = {};
        var newListener = newSingle("newListener");
        var removeListener = newSingle("removeListener");
        return["emit", "on", "un"].forEach(function(methodName) {
            pubSubInstance[methodName] = varArgs(function(eventName, params) {
                apply(params, pubSubInstance(eventName)[methodName]);
            });
        }), pubSubInstance;
    }
    /**
     * @param {number} statusCode
     * @param {?} string
     * @param {Error} error
     * @return {?}
     */
    function errorReport(statusCode, string, error) {
        try {
            /** @type {*} */
            var ast = JSON.parse(string);
        } catch (f) {
        }
        return{
            statusCode : statusCode,
            body : string,
            jsonBody : ast,
            thrown : error
        };
    }
    /**
     * @param {?} oboeBus
     * @param {?} jsonPathCompiler
     * @return {undefined}
     */
    function patternAdapter(oboeBus, jsonPathCompiler) {
        /**
         * @param {?} emitMatch
         * @param {?} node
         * @param {?} ascent
         * @return {undefined}
         */
        function emitMatchingNode(emitMatch, node, ascent) {
            var descent = reverseList(ascent);
            emitMatch(node, listAsArray($(foldR1(keyOf, descent))), listAsArray(foldR1(nodeOf, descent)));
        }
        /**
         * @param {Function} selector
         * @param {Object} predicateEvent
         * @param {?} compiledJsonPath
         * @return {undefined}
         */
        function addUnderlyingListener(selector, predicateEvent, compiledJsonPath) {
            var emitMatch = oboeBus(selector).emit;
            predicateEvent.on(function(ascent) {
                var maybeMatchingMapping = compiledJsonPath(ascent);
                if (maybeMatchingMapping !== false) {
                    emitMatchingNode(emitMatch, nodeOf(maybeMatchingMapping), ascent);
                }
            }, selector);
            oboeBus("removeListener").on(function(removedEventName) {
                if (removedEventName == selector) {
                    if (!oboeBus(removedEventName).listeners()) {
                        predicateEvent.un(selector);
                    }
                }
            });
        }
        var predicateEventMap = {
            node : oboeBus(NODE_FOUND),
            path : oboeBus(PATH_FOUND)
        };
        oboeBus("newListener").on(function(fullEventName) {
            /** @type {(Array.<string>|null)} */
            var match = /(node|path):(.*)/.exec(fullEventName);
            if (match) {
                var predicateEvent = predicateEventMap[match[1]];
                if (!predicateEvent.hasListener(fullEventName)) {
                    addUnderlyingListener(fullEventName, predicateEvent, jsonPathCompiler(match[2]));
                }
            }
        });
    }
    /**
     * @param {Object} oboeBus
     * @param {string} recurring
     * @return {?}
     */
    function instanceApi(oboeBus, recurring) {
        /**
         * @param {?} eventName
         * @param {Function} selector
         * @return {?}
         */
        function addProtectedCallback(eventName, selector) {
            return oboeBus(eventName).on(protectedCallback(selector), selector), oboeApi;
        }
        /**
         * @param {?} el
         * @param {Function} selector
         * @return {?}
         */
        function addForgettableCallback(el, selector) {
            var safeCallback = protectedCallback(selector);
            return el.on(function() {
                /** @type {boolean} */
                var d = false;
                /**
                 * @return {undefined}
                 */
                oboeApi.forget = function() {
                    /** @type {boolean} */
                    d = true;
                };
                apply(arguments, safeCallback);
                delete oboeApi.forget;
                if (d) {
                    el.un(selector);
                }
            }, selector), oboeApi;
        }
        /**
         * @param {Function} callback
         * @return {?}
         */
        function protectedCallback(callback) {
            return function() {
                try {
                    callback.apply(oboeApi, arguments);
                } catch (e) {
                    oboeBus(FAIL_EVENT).emit(errorReport(object, object, e));
                }
            };
        }
        /**
         * @param {string} type
         * @param {string} pattern
         * @return {?}
         */
        function fullyQualifiedPatternMatchEvent(type, pattern) {
            return oboeBus(type + ":" + pattern);
        }
        /**
         * @param {string} eventId
         * @param {Object} listenerMap
         * @return {undefined}
         */
        function addListenersMap(eventId, listenerMap) {
            var pattern;
            for (pattern in listenerMap) {
                addForgettableCallback(fullyQualifiedPatternMatchEvent(eventId, pattern), listenerMap[pattern]);
            }
        }
        /**
         * @param {string} eventId
         * @param {string} jsonPathOrListenerMap
         * @param {Function} callback
         * @return {?}
         */
        function addNodeOrPathListenerApi(eventId, jsonPathOrListenerMap, callback) {
            return isString(jsonPathOrListenerMap) ? addForgettableCallback(fullyQualifiedPatternMatchEvent(eventId, jsonPathOrListenerMap), callback) : addListenersMap(eventId, jsonPathOrListenerMap), oboeApi;
        }
        var oboeApi;
        /** @type {RegExp} */
        var fullyQualifiedNamePattern = /^(node|path):./;
        var rootNodeFinishedEvent = oboeBus(fullEventName);
        var addListener = varArgs(function(eventId, params) {
            if (oboeApi[eventId]) {
                apply(params, oboeApi[eventId]);
            } else {
                var event = oboeBus(eventId);
                var ready = params[0];
                if (fullyQualifiedNamePattern.test(eventId)) {
                    addForgettableCallback(event, ready);
                } else {
                    event.on(ready);
                }
            }
            return oboeApi;
        });
        /**
         * @param {string} eventId
         * @param {Function} p2
         * @param {?} p3
         * @return {?}
         */
        var removeListener = function(eventId, p2, p3) {
            if ("done" == eventId) {
                rootNodeFinishedEvent.un(p2);
            } else {
                if ("node" == eventId || "path" == eventId) {
                    oboeBus.un(eventId + ":" + p2, p3);
                } else {
                    /** @type {Function} */
                    var listener = p2;
                    oboeBus(eventId).un(listener);
                }
            }
            return oboeApi;
        };
        return oboeBus(STREAM_END).on(function(root) {
            oboeApi.root = functor(root);
        }), oboeBus(HTTP_START).on(function(dataAndEvents, headers) {
            /**
             * @param {string} name
             * @return {?}
             */
            oboeApi.header = function(name) {
                return name ? headers[name] : headers;
            };
        }), oboeApi = {
            on : addListener,
            addListener : addListener,
            /** @type {function (string, Function, ?): ?} */
            removeListener : removeListener,
            emit : oboeBus.emit,
            node : partialComplete(addNodeOrPathListenerApi, "node"),
            path : partialComplete(addNodeOrPathListenerApi, "path"),
            done : partialComplete(addForgettableCallback, rootNodeFinishedEvent),
            start : partialComplete(addProtectedCallback, HTTP_START),
            fail : oboeBus(FAIL_EVENT).on,
            abort : oboeBus(ROOT_FOUND).emit,
            /** @type {function (): undefined} */
            header : noop,
            /** @type {function (): undefined} */
            root : noop,
            source : recurring
        };
    }
    /**
     * @param {string} httpMethodName
     * @param {Object} recurring
     * @param {?} body
     * @param {Object} headers
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    function wire(httpMethodName, recurring, body, headers, deepDataAndEvents) {
        var oboeBus = pubSub();
        return recurring && streamingHttp(oboeBus, httpTransport(), httpMethodName, recurring, body, headers, deepDataAndEvents), create(oboeBus), instanceController(oboeBus, incrementalContentBuilder(oboeBus)), patternAdapter(oboeBus, jsonPathCompiler), instanceApi(oboeBus, recurring);
    }
    /**
     * @param {Function} callback
     * @param {string} id
     * @param {string} value
     * @param {string} arg
     * @param {?} options
     * @param {boolean} rez
     * @param {?} name
     * @return {?}
     */
    function url(callback, id, value, arg, options, rez, name) {
        /**
         * @param {string} fileName
         * @param {?} event
         * @return {?}
         */
        function onComplete(fileName, event) {
            return event === false && (fileName += fileName.indexOf("?") == -1 ? "?" : "&", fileName += "_=" + (new Date).getTime()), fileName;
        }
        return options = options ? JSON.parse(JSON.stringify(options)) : {}, arg ? isString(arg) || (arg = JSON.stringify(arg), options["Content-Type"] = options["Content-Type"] || "application/json") : arg = null, callback(value || "GET", onComplete(id, name), arg, options, rez || false);
    }
    /**
     * @param {Object} options
     * @return {?}
     */
    function init(options) {
        return options ? options.url ? url(wire, options.url, options.method, options.body, options.headers, options.withCredentials, options.cached) : url(wire, options) : wire();
    }
    var partialComplete = varArgs(function(wrapper, args) {
        var numBoundArgs = args.length;
        return varArgs(function(callArgs) {
            /** @type {number} */
            var i = 0;
            for (;i < callArgs.length;i++) {
                args[numBoundArgs + i] = callArgs[i];
            }
            return args.length = numBoundArgs + callArgs.length, wrapper.apply(this, args);
        });
    });
    var lazyUnion = (varArgs(function(fns) {
        /**
         * @param {Object} details
         * @param {Function} thisp
         * @return {?}
         */
        function on(details, thisp) {
            return[apply(details, thisp)];
        }
        var activeClassName = arrayAsList(fns);
        return varArgs(function(isXML) {
            return dispatch(on, isXML, activeClassName)[0];
        });
    }), varArgs(function(fns) {
        return varArgs(function(params) {
            var maybeValue;
            /** @type {number} */
            var i = 0;
            for (;i < len(fns);i++) {
                if (maybeValue = apply(params, fns[i])) {
                    return maybeValue;
                }
            }
        });
    }));
    var len = attr("length");
    var isString = partialComplete(isFunction, String);
    /** @type {null} */
    var value = null;
    var head = attr(0);
    var $ = attr(1);
    var list = varArgs(arrayAsList);
    var jsonPathSyntax = function() {
        /**
         * @param {Object} recurring
         * @return {?}
         */
        var regexDescriptor = function(recurring) {
            return recurring.exec.bind(recurring);
        };
        var jsonPathClause = varArgs(function(componentRegexes) {
            return componentRegexes.unshift(/^/), regexDescriptor(RegExp(componentRegexes.map(attr("source")).join("")));
        });
        /** @type {RegExp} */
        var possiblyCapturing = /(\$?)/;
        /** @type {RegExp} */
        var namedNode = /([\w-_]+|\*)/;
        /** @type {RegExp} */
        var namePlaceholder = /()/;
        /** @type {RegExp} */
        var nodeInArrayNotation = /\["([^"]+)"\]/;
        /** @type {RegExp} */
        var numberedNodeInArrayNotation = /\[(\d+|\*)\]/;
        /** @type {RegExp} */
        var fieldList = /{([\w ]*?)}/;
        /** @type {RegExp} */
        var optionalFieldList = /(?:{([\w ]*?)})?/;
        var jsonPathNamedNodeInObjectNotation = jsonPathClause(possiblyCapturing, namedNode, optionalFieldList);
        var jsonPathNamedNodeInArrayNotation = jsonPathClause(possiblyCapturing, nodeInArrayNotation, optionalFieldList);
        var jsonPathNumberedNodeInArrayNotation = jsonPathClause(possiblyCapturing, numberedNodeInArrayNotation, optionalFieldList);
        var jsonPathPureDuckTyping = jsonPathClause(possiblyCapturing, namePlaceholder, fieldList);
        var jsonPathDoubleDot = jsonPathClause(/\.\./);
        var jsonPathDot = jsonPathClause(/\./);
        var jsonPathBang = jsonPathClause(possiblyCapturing, /!/);
        var emptyString = jsonPathClause(/$/);
        return function(fn) {
            return fn(lazyUnion(jsonPathNamedNodeInObjectNotation, jsonPathNamedNodeInArrayNotation, jsonPathNumberedNodeInArrayNotation, jsonPathPureDuckTyping), jsonPathDoubleDot, jsonPathDot, jsonPathBang, emptyString);
        };
    }();
    var keyOf = attr("key");
    var nodeOf = attr("node");
    var ROOT_PATH = {};
    var jsonPathCompiler = jsonPathSyntax(function(pathNodeSyntax, doubleDotSyntax, dotSyntax, bangSyntax, emptySyntax) {
        /**
         * @param {?} results
         * @param {Array} def
         * @return {?}
         */
        function nameClause(results, def) {
            var name = def[n];
            /** @type {Function} */
            var expectationResult = name && "*" != name ? function(ascent) {
                return headKey(ascent) == name;
            } : always;
            return cb(expectationResult, results);
        }
        /**
         * @param {?} results
         * @param {Array} params
         * @return {?}
         */
        function find(results, params) {
            var param = params[i];
            if (!param) {
                return results;
            }
            var nodes = partialComplete(hasAllProperties, arrayAsList(param.split(/\W+/)));
            var result = map(nodes, args);
            return cb(result, results);
        }
        /**
         * @param {?} result
         * @param {Array} done
         * @return {?}
         */
        function capture(result, done) {
            /** @type {boolean} */
            var guess = !!done[id];
            return guess ? cb(result, head) : result;
        }
        /**
         * @param {Function} data
         * @return {?}
         */
        function skip1(data) {
            /**
             * @param {?} ascent
             * @return {?}
             */
            function notAtRoot(ascent) {
                return headKey(ascent) != ROOT_PATH;
            }
            return data == always ? always : cb(notAtRoot, map(data, $));
        }
        /**
         * @param {Function} previousExpr
         * @return {?}
         */
        function skipMany(previousExpr) {
            if (previousExpr == always) {
                return always;
            }
            var terminalCaseWhenArrivingAtRoot = rootExpr();
            /** @type {Function} */
            var terminalCaseWhenPreviousExpressionIsSatisfied = previousExpr;
            var recursiveCase = skip1(function(section) {
                return cases(section);
            });
            var cases = lazyUnion(terminalCaseWhenArrivingAtRoot, terminalCaseWhenPreviousExpressionIsSatisfied, recursiveCase);
            return cases;
        }
        /**
         * @return {?}
         */
        function rootExpr() {
            return function(ascent) {
                return headKey(ascent) == ROOT_PATH;
            };
        }
        /**
         * @param {?} lastClause
         * @return {?}
         */
        function statementExpr(lastClause) {
            return function(ascent) {
                var exprMatch = lastClause(ascent);
                return exprMatch === true ? head(ascent) : exprMatch;
            };
        }
        /**
         * @param {?} event
         * @param {Array} isXML
         * @param {?} fd
         * @return {?}
         */
        function send(event, isXML, fd) {
            return dispatch(function(outErr, cb) {
                return cb(outErr, fd);
            }, isXML, event);
        }
        /**
         * @param {?} tokenDetector
         * @param {?} key
         * @param {string} jsonPath
         * @param {Array} isXML
         * @param {?} onSuccess
         * @return {?}
         */
        function generateClauseReaderIfTokenFound(tokenDetector, key, jsonPath, isXML, onSuccess) {
            var detected = tokenDetector(jsonPath);
            if (detected) {
                var camelKey = send(key, isXML, detected);
                var rs = jsonPath.substr(len(detected[0]));
                return onSuccess(rs, camelKey);
            }
        }
        /**
         * @param {?} tokenDetector
         * @param {?} exprs
         * @return {?}
         */
        function clauseMatcher(tokenDetector, exprs) {
            return partialComplete(generateClauseReaderIfTokenFound, tokenDetector, exprs);
        }
        /**
         * @param {(Object|string)} deepDataAndEvents
         * @param {Function} object
         * @return {?}
         */
        function seal(deepDataAndEvents, object) {
            return object;
        }
        /**
         * @param {(Function|boolean)} deepDataAndEvents
         * @param {Function} a
         * @return {?}
         */
        function md5_hh(deepDataAndEvents, a) {
            /** @type {function ((Function|boolean), Function): ?} */
            var b = deepDataAndEvents ? md5_hh : seal;
            return md5_cmn(deepDataAndEvents, a, b);
        }
        /** @type {number} */
        var id = 1;
        /** @type {number} */
        var n = 2;
        /** @type {number} */
        var i = 3;
        var headKey = map(keyOf, head);
        var args = map(nodeOf, head);
        var md5_cmn = lazyUnion(clauseMatcher(pathNodeSyntax, list(capture, find, nameClause, skip1)), clauseMatcher(doubleDotSyntax, list(skipMany)), clauseMatcher(dotSyntax, list()), clauseMatcher(bangSyntax, list(capture, rootExpr)), clauseMatcher(emptySyntax, list(statementExpr)), function(dataAndEvents) {
            throw parent('"' + dataAndEvents + '" could not be tokenised');
        });
        return function(deepDataAndEvents) {
            try {
                return md5_hh(deepDataAndEvents, always);
            } catch (ex) {
                throw parent('Could not compile "' + deepDataAndEvents + '" because ' + ex.message);
            }
        };
    });
    /** @type {number} */
    var _S = 1;
    /** @type {number} */
    var PATH_FOUND = _S++;
    /** @type {number} */
    var NODE_FOUND = _S++;
    /** @type {string} */
    var FAIL_EVENT = "fail";
    /** @type {number} */
    var fullEventName = _S++;
    /** @type {number} */
    var STREAM_END = _S++;
    /** @type {string} */
    var HTTP_START = "start";
    /** @type {string} */
    var STREAM_DATA = "data";
    /** @type {string} */
    var ABORTING = "end";
    /** @type {number} */
    var ROOT_FOUND = _S++;
    /** @type {number} */
    var key = _S++;
    /** @type {number} */
    var eventName = _S++;
    /** @type {number} */
    var ext = _S++;
    /** @type {number} */
    var id = _S++;
    /** @type {number} */
    var paramName = _S++;
    /** @type {number} */
    var name = _S++;
    if ("function" == typeof define && define.amd) {
        define("oboe", [], function() {
            return init;
        });
    } else {
        /** @type {function (Object): ?} */
        self.oboe = init;
    }
}(window, Object, Array, Error, JSON), function() {
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function compare(a, b) {
        if (a !== b) {
            /** @type {boolean} */
            var aNumeric = a === a;
            /** @type {boolean} */
            var bNumeric = b === b;
            if (a > b || (!aNumeric || "undefined" == typeof a && bNumeric)) {
                return 1;
            }
            if (a < b || (!bNumeric || "undefined" == typeof b && aNumeric)) {
                return-1;
            }
        }
        return 0;
    }
    /**
     * @param {string} name
     * @param {number} recurring
     * @param {number} val
     * @return {?}
     */
    function factory(name, recurring, val) {
        if (recurring !== recurring) {
            return ondata(name, val);
        }
        /** @type {number} */
        var i = (val || 0) - 1;
        var size = name.length;
        for (;++i < size;) {
            if (name[i] === recurring) {
                return i;
            }
        }
        return-1;
    }
    /**
     * @param {Object} items
     * @param {Function} item
     * @return {?}
     */
    function filter(items, item) {
        var length = items.length;
        items.sort(item);
        for (;length--;) {
            items[length] = items[length].value;
        }
        return items;
    }
    /**
     * @param {string} e
     * @return {?}
     */
    function fn(e) {
        return "string" == typeof e ? e : null == e ? "" : e + "";
    }
    /**
     * @param {string} a
     * @return {?}
     */
    function array_to_hash(a) {
        return a.charCodeAt(0);
    }
    /**
     * @param {string} template
     * @param {string} text
     * @return {?}
     */
    function parse(template, text) {
        /** @type {number} */
        var pos = -1;
        var len = template.length;
        for (;++pos < len && text.indexOf(template.charAt(pos)) > -1;) {
        }
        return pos;
    }
    /**
     * @param {string} s
     * @param {string} res
     * @return {?}
     */
    function cb(s, res) {
        var j = s.length;
        for (;j-- && res.indexOf(s.charAt(j)) > -1;) {
        }
        return j;
    }
    /**
     * @param {Object} a
     * @param {Object} b
     * @return {?}
     */
    function e(a, b) {
        return compare(a.criteria, b.criteria) || a.index - b.index;
    }
    /**
     * @param {Object} left
     * @param {Object} right
     * @return {?}
     */
    function next(left, right) {
        /** @type {number} */
        var i = -1;
        var a = left.criteria;
        var b = right.criteria;
        var len = a.length;
        for (;++i < len;) {
            var c = compare(a[i], b[i]);
            if (c) {
                return c;
            }
        }
        return left.index - right.index;
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    function value(newValue) {
        return msg[newValue];
    }
    /**
     * @param {?} name
     * @return {?}
     */
    function stack(name) {
        return old[name];
    }
    /**
     * @param {?} match
     * @return {?}
     */
    function escapeStringChar(match) {
        return "\\" + escapes[match];
    }
    /**
     * @param {Object} name
     * @param {number} val
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    function ondata(name, val, dataAndEvents) {
        var nlen = name.length;
        var n = dataAndEvents ? val || nlen : (val || 0) - 1;
        for (;dataAndEvents ? n-- : ++n < nlen;) {
            var type = name[n];
            if (type !== type) {
                return n;
            }
        }
        return-1;
    }
    /**
     * @param {?} keepData
     * @return {?}
     */
    function func(keepData) {
        return keepData && "object" == typeof keepData || false;
    }
    /**
     * @param {number} key
     * @return {?}
     */
    function callback(key) {
        return key <= 160 && (key >= 9 && key <= 13) || (32 == key || (160 == key || (5760 == key || (6158 == key || key >= 8192 && (key <= 8202 || (8232 == key || (8233 == key || (8239 == key || (8287 == key || (12288 == key || 65279 == key))))))))));
    }
    /**
     * @param {Array} actual
     * @param {?} value
     * @return {?}
     */
    function fail(actual, value) {
        /** @type {number} */
        var index = -1;
        var n = actual.length;
        /** @type {number} */
        var resLength = -1;
        /** @type {Array} */
        var res = [];
        for (;++index < n;) {
            if (actual[index] === value) {
                /** @type {string} */
                actual[index] = obj;
                /** @type {number} */
                res[++resLength] = index;
            }
        }
        return res;
    }
    /**
     * @param {Array} array
     * @param {boolean} callback
     * @return {?}
     */
    function uniq(array, callback) {
        var type;
        /** @type {number} */
        var index = -1;
        var length = array.length;
        /** @type {number} */
        var resLength = -1;
        /** @type {Array} */
        var res = [];
        for (;++index < length;) {
            var val = array[index];
            var fx = callback ? callback(val, index, array) : val;
            if (!(index && type === fx)) {
                type = fx;
                res[++resLength] = val;
            }
        }
        return res;
    }
    /**
     * @param {string} str
     * @return {?}
     */
    function template(str) {
        /** @type {number} */
        var i = -1;
        var length = str.length;
        for (;++i < length && callback(str.charCodeAt(i));) {
        }
        return i;
    }
    /**
     * @param {string} a
     * @return {?}
     */
    function each(a) {
        var i = a.length;
        for (;i-- && callback(a.charCodeAt(i));) {
        }
        return i;
    }
    /**
     * @param {?} ch
     * @return {?}
     */
    function lookupEscape(ch) {
        return frequency[ch];
    }
    /**
     * @param {Object} global
     * @return {?}
     */
    function init(global) {
        /**
         * @param {string} name
         * @return {?}
         */
        function lodash(name) {
            if (func(name) && !ondata(name)) {
                if (name instanceof lodashWrapper) {
                    return name;
                }
                if (hasOwn.call(name, "__wrapped__")) {
                    return new lodashWrapper(name.__wrapped__, name.__chain__, promote(name.__actions__));
                }
            }
            return new lodashWrapper(name);
        }
        /**
         * @param {?} value
         * @param {?} dataAndEvents
         * @param {Array} chainAll
         * @return {undefined}
         */
        function lodashWrapper(value, dataAndEvents, chainAll) {
            this.__actions__ = chainAll || [];
            /** @type {boolean} */
            this.__chain__ = !!dataAndEvents;
            this.__wrapped__ = value;
        }
        /**
         * @param {(Object|boolean|number|string)} wrapped
         * @return {undefined}
         */
        function data(wrapped) {
            /** @type {null} */
            this.actions = null;
            /** @type {number} */
            this.dir = 1;
            /** @type {number} */
            this.dropCount = 0;
            /** @type {boolean} */
            this.filtered = false;
            /** @type {null} */
            this.iteratees = null;
            this.takeCount = len;
            /** @type {null} */
            this.views = null;
            /** @type {(Object|boolean|number|string)} */
            this.wrapped = wrapped;
        }
        /**
         * @return {?}
         */
        function reset() {
            var parent = this.actions;
            var camelKey = this.iteratees;
            var views = this.views;
            var item = new data(this.wrapped);
            return item.actions = parent ? promote(parent) : null, item.dir = this.dir, item.dropCount = this.dropCount, item.filtered = this.filtered, item.iteratees = camelKey ? promote(camelKey) : null, item.takeCount = this.takeCount, item.views = views ? promote(views) : null, item;
        }
        /**
         * @return {?}
         */
        function _get() {
            if (this.filtered) {
                var item = new data(this);
                /** @type {number} */
                item.dir = -1;
                /** @type {boolean} */
                item.filtered = true;
            } else {
                item = this.clone();
                item.dir *= -1;
            }
            return item;
        }
        /**
         * @return {?}
         */
        function add() {
            var rvar = this.wrapped.value();
            if (!ondata(rvar)) {
                return copy(rvar, this.actions);
            }
            var dir = this.dir;
            /** @type {boolean} */
            var backwards = dir < 0;
            var model = create(0, rvar.length, this.views);
            var start = model.start;
            var end = model.end;
            /** @type {number} */
            var size = end - start;
            var shrinkB = this.dropCount;
            var n = min(size, this.takeCount - shrinkB);
            var deepDataAndEvents = backwards ? end : start - 1;
            var array = this.iteratees;
            var length = array ? array.length : 0;
            /** @type {number} */
            var i = 0;
            /** @type {Array} */
            var results = [];
            a: for (;size-- && i < n;) {
                deepDataAndEvents += dir;
                /** @type {number} */
                var index = -1;
                var v = rvar[deepDataAndEvents];
                for (;++index < length;) {
                    var data = array[index];
                    var value = data.iteratee;
                    var val = value(v, deepDataAndEvents, rvar);
                    var type = data.type;
                    if (type == curCSS) {
                        v = val;
                    } else {
                        if (!val) {
                            if (type == wanted) {
                                continue a;
                            }
                            break a;
                        }
                    }
                }
                if (shrinkB) {
                    shrinkB--;
                } else {
                    results[i++] = v;
                }
            }
            return results;
        }
        /**
         * @return {undefined}
         */
        function Loader() {
            this.__data__ = {};
        }
        /**
         * @param {string} klass
         * @return {?}
         */
        function highlight(klass) {
            return this.has(klass) && delete this.__data__[klass];
        }
        /**
         * @param {string} elem
         * @return {?}
         */
        function click(elem) {
            return "__proto__" == elem ? options : this.__data__[elem];
        }
        /**
         * @param {string} name
         * @return {?}
         */
        function hook(name) {
            return "__proto__" != name && hasOwn.call(this.__data__, name);
        }
        /**
         * @param {string} elem
         * @param {string} value
         * @return {?}
         */
        function disabled(elem, value) {
            return "__proto__" != elem && (this.__data__[elem] = value), this;
        }
        /**
         * @param {Object} collection
         * @return {undefined}
         */
        function helper(collection) {
            var length = collection ? collection.length : 0;
            this.data = {
                hash : nativeCreate(null),
                set : new Set
            };
            for (;length--;) {
                this.push(collection[length]);
            }
        }
        /**
         * @param {Object} obj
         * @param {string} name
         * @return {?}
         */
        function store(obj, name) {
            var context = obj.data;
            var d = "string" == typeof name || func(name) ? context.set.has(name) : context.hash[name];
            return d ? 0 : -1;
        }
        /**
         * @param {string} replacementHash
         * @return {undefined}
         */
        function start(replacementHash) {
            var data = this.data;
            if ("string" == typeof replacementHash || func(replacementHash)) {
                data.set.add(replacementHash);
            } else {
                /** @type {boolean} */
                data.hash[replacementHash] = true;
            }
        }
        /**
         * @param {Object} key
         * @param {Object} t
         * @return {?}
         */
        function promote(key, t) {
            /** @type {number} */
            var k = -1;
            var n = key.length;
            if (!t) {
                t = call(n);
            }
            for (;++k < n;) {
                t[k] = key[k];
            }
            return t;
        }
        /**
         * @param {?} replacementHash
         * @param {Function} fn
         * @return {?}
         */
        function each(replacementHash, fn) {
            /** @type {number} */
            var i = -1;
            var charLen = replacementHash.length;
            for (;++i < charLen && fn(replacementHash[i], i, replacementHash) !== false;) {
            }
            return replacementHash;
        }
        /**
         * @param {Object} array
         * @param {Function} callback
         * @return {?}
         */
        function resize(array, callback) {
            var index = array.length;
            for (;index-- && callback(array[index], index, array) !== false;) {
            }
            return array;
        }
        /**
         * @param {Object} obj
         * @param {Function} callback
         * @return {?}
         */
        function empty(obj, callback) {
            /** @type {number} */
            var index = -1;
            var length = obj.length;
            for (;++index < length;) {
                if (!callback(obj[index], index, obj)) {
                    return false;
                }
            }
            return true;
        }
        /**
         * @param {Array} object
         * @param {Function} callback
         * @return {?}
         */
        function getSize(object, callback) {
            /** @type {number} */
            var index = -1;
            var length = object.length;
            /** @type {number} */
            var i = -1;
            /** @type {Array} */
            var elem = [];
            for (;++index < length;) {
                var value = object[index];
                if (callback(value, index, object)) {
                    elem[++i] = value;
                }
            }
            return elem;
        }
        /**
         * @param {Array} arr
         * @param {?} cb
         * @return {?}
         */
        function split(arr, cb) {
            /** @type {number} */
            var i = -1;
            var e = arr.length;
            var results = call(e);
            for (;++i < e;) {
                results[i] = cb(arr[i], i, arr);
            }
            return results;
        }
        /**
         * @param {Array} settings
         * @return {?}
         */
        function element(settings) {
            /** @type {number} */
            var index = -1;
            var length = settings.length;
            var computed = to;
            for (;++index < length;) {
                var current = settings[index];
                if (current > computed) {
                    computed = current;
                }
            }
            return computed;
        }
        /**
         * @param {Array} elem
         * @return {?}
         */
        function restoreScript(elem) {
            /** @type {number} */
            var exp = -1;
            var childs = elem.length;
            var i = len;
            for (;++exp < childs;) {
                var id = elem[exp];
                if (id < i) {
                    i = id;
                }
            }
            return i;
        }
        /**
         * @param {Array} name
         * @param {?} fn
         * @param {Array} value
         * @param {boolean} pass
         * @return {?}
         */
        function attr(name, fn, value, pass) {
            /** @type {number} */
            var i = -1;
            var size = name.length;
            if (pass) {
                if (size) {
                    value = name[++i];
                }
            }
            for (;++i < size;) {
                value = fn(value, name[i], i, name);
            }
            return value;
        }
        /**
         * @param {Object} name
         * @param {?} fn
         * @param {Array} value
         * @param {boolean} raw
         * @return {?}
         */
        function access(name, fn, value, raw) {
            var i = name.length;
            if (raw) {
                if (i) {
                    value = name[--i];
                }
            }
            for (;i--;) {
                value = fn(value, name[i], i, name);
            }
            return value;
        }
        /**
         * @param {Array} arr
         * @param {Function} fn
         * @return {?}
         */
        function insert(arr, fn) {
            /** @type {number} */
            var i = -1;
            var size = arr.length;
            for (;++i < size;) {
                if (fn(arr[i], i, arr)) {
                    return true;
                }
            }
            return false;
        }
        /**
         * @param {?} exports
         * @param {string} thisValue
         * @return {?}
         */
        function value(exports, thisValue) {
            return "undefined" == typeof exports ? thisValue : exports;
        }
        /**
         * @param {number} name
         * @param {number} opt_capture
         * @param {?} eventName
         * @param {?} params
         * @return {?}
         */
        function addEventListener(name, opt_capture, eventName, params) {
            return "undefined" != typeof name && hasOwn.call(params, eventName) ? name : opt_capture;
        }
        /**
         * @param {?} options
         * @param {string} data
         * @param {Function} callback
         * @return {?}
         */
        function setup(options, data, callback) {
            var params = keys(data);
            if (!callback) {
                return cb(data, options, params);
            }
            /** @type {number} */
            var i = -1;
            var len = params.length;
            for (;++i < len;) {
                var k = params[i];
                var value = options[k];
                var v = callback(value, data[k], k, options, data);
                if (!((v === v ? v === value : value !== value) && ("undefined" != typeof value || k in options))) {
                    options[k] = v;
                }
            }
            return options;
        }
        /**
         * @param {string} data
         * @param {Array} path
         * @return {?}
         */
        function refresh(data, path) {
            /** @type {number} */
            var i = -1;
            var elem = data.length;
            var matched = fn(elem);
            var l = path.length;
            var r = call(l);
            for (;++i < l;) {
                var key = path[i];
                if (matched) {
                    /** @type {number} */
                    key = parseFloat(key);
                    r[i] = append(key, elem) ? data[key] : options;
                } else {
                    r[i] = data[key];
                }
            }
            return r;
        }
        /**
         * @param {string} s
         * @param {?} x
         * @param {?} arg
         * @return {?}
         */
        function cb(s, x, arg) {
            if (!arg) {
                arg = x;
                x = {};
            }
            /** @type {number} */
            var a = -1;
            var len = arg.length;
            for (;++a < len;) {
                var i = arg[a];
                x[i] = s[i];
            }
            return x;
        }
        /**
         * @param {?} object
         * @param {Array} value
         * @return {?}
         */
        function freeze(object, value) {
            /** @type {number} */
            var a = -1;
            var len = value.length;
            for (;++a < len;) {
                var i = value[a];
                object[i] = invoke(object[i], j, object);
            }
            return object;
        }
        /**
         * @param {string} a
         * @param {Object} deepDataAndEvents
         * @param {number} opt_attributes
         * @return {?}
         */
        function render(a, deepDataAndEvents, opt_attributes) {
            /** @type {string} */
            var $s = typeof a;
            return "function" == $s ? "undefined" != typeof deepDataAndEvents && complete(a) ? parse(a, deepDataAndEvents, opt_attributes) : a : null == a ? identity : "object" == $s ? compile(a) : callback(a + "");
        }
        /**
         * @param {string} name
         * @param {boolean} deepDataAndEvents
         * @param {Object} callback
         * @param {?} body
         * @param {boolean} user
         * @param {Object} classes
         * @param {Object} unique
         * @return {?}
         */
        function set(name, deepDataAndEvents, callback, body, user, classes, unique) {
            var value;
            if (callback && (value = user ? callback(name, body, user) : callback(name)), "undefined" != typeof value) {
                return value;
            }
            if (!func(name)) {
                return name;
            }
            var quoteNeeded = ondata(name);
            if (quoteNeeded) {
                if (value = next(name), !deepDataAndEvents) {
                    return promote(name, value);
                }
            } else {
                var type = eventSplitter.call(name);
                /** @type {boolean} */
                var is_defun = type == k;
                if (type != string && (type != number && (!is_defun || user))) {
                    return cache[type] ? self(name, type, deepDataAndEvents) : user ? name : {};
                }
                if (value = convert(is_defun ? {} : name), !deepDataAndEvents) {
                    return cb(name, value, keys(name));
                }
            }
            if (!classes) {
                /** @type {Array} */
                classes = [];
            }
            if (!unique) {
                /** @type {Array} */
                unique = [];
            }
            var i = classes.length;
            for (;i--;) {
                if (classes[i] == name) {
                    return unique[i];
                }
            }
            return classes.push(name), unique.push(value), (quoteNeeded ? each : check)(name, function(d, i) {
                value[i] = set(d, deepDataAndEvents, callback, i, name, classes, unique);
            }), value;
        }
        /**
         * @param {string} methodName
         * @param {number} deepDataAndEvents
         * @param {Object} array
         * @param {number} n
         * @return {?}
         */
        function define(methodName, deepDataAndEvents, array, n) {
            if (!isFunction(methodName)) {
                throw new Stream(filename);
            }
            return setTimer(function() {
                methodName.apply(options, slice(array, n));
            }, deepDataAndEvents);
        }
        /**
         * @param {Object} collection
         * @param {Object} str
         * @return {?}
         */
        function log(collection, str) {
            var length = collection ? collection.length : 0;
            /** @type {Array} */
            var bucket = [];
            if (!length) {
                return bucket;
            }
            /** @type {number} */
            var index = -1;
            var toString = push();
            /** @type {boolean} */
            var elem = toString == factory;
            var nType = elem && (str.length >= 200 && puts(str));
            var len = str.length;
            if (nType) {
                /** @type {function (Object, string): ?} */
                toString = store;
                /** @type {boolean} */
                elem = false;
                str = nType;
            }
            a: for (;++index < length;) {
                var value = collection[index];
                if (elem && value === value) {
                    var i = len;
                    for (;i--;) {
                        if (str[i] === value) {
                            continue a;
                        }
                    }
                    bucket.push(value);
                } else {
                    if (toString(str, value) < 0) {
                        bucket.push(value);
                    }
                }
            }
            return bucket;
        }
        /**
         * @param {string} value
         * @param {Function} callback
         * @return {?}
         */
        function resolve(value, callback) {
            var n = value ? value.length : 0;
            if (!fn(n)) {
                return check(value, callback);
            }
            /** @type {number} */
            var index = -1;
            var collection = apply(value);
            for (;++index < n && callback(collection[index], index, collection) !== false;) {
            }
            return value;
        }
        /**
         * @param {boolean} value
         * @param {?} callback
         * @return {?}
         */
        function toggle(value, callback) {
            var index = value ? value.length : 0;
            if (!fn(index)) {
                return post(value, callback);
            }
            var collection = apply(value);
            for (;index-- && callback(collection[index], index, collection) !== false;) {
            }
            return value;
        }
        /**
         * @param {Object} name
         * @param {Function} callback
         * @return {?}
         */
        function dispatch(name, callback) {
            /** @type {boolean} */
            var method = true;
            return resolve(name, function(basis, mongoObject, arg) {
                return method = !!callback(basis, mongoObject, arg);
            }), method;
        }
        /**
         * @param {string} val
         * @param {Function} callback
         * @return {?}
         */
        function onComplete(val, callback) {
            /** @type {Array} */
            var bucket = [];
            return resolve(val, function(value, mongoObject, arg) {
                if (callback(value, mongoObject, arg)) {
                    bucket.push(value);
                }
            }), bucket;
        }
        /**
         * @param {string} actual
         * @param {Function} recurring
         * @param {Function} callback
         * @param {boolean} dataAndEvents
         * @return {?}
         */
        function test(actual, recurring, callback, dataAndEvents) {
            var i;
            return callback(actual, function(isSorted, x, deepDataAndEvents) {
                if (recurring(isSorted, x, deepDataAndEvents)) {
                    return i = dataAndEvents ? x : isSorted, false;
                }
            }), i;
        }
        /**
         * @param {Object} array
         * @param {boolean} recurring
         * @param {boolean} opt_isDefault
         * @param {number} dataAndEvents
         * @return {?}
         */
        function getData(array, recurring, opt_isDefault, dataAndEvents) {
            /** @type {number} */
            var index = (dataAndEvents || 0) - 1;
            var length = array.length;
            /** @type {number} */
            var j = -1;
            /** @type {Array} */
            var data = [];
            for (;++index < length;) {
                var name = array[index];
                if (func(name) && (fn(name.length) && (ondata(name) || isClassOf(name)))) {
                    if (recurring) {
                        name = getData(name, recurring, opt_isDefault);
                    }
                    /** @type {number} */
                    var i = -1;
                    var size = name.length;
                    data.length += size;
                    for (;++i < size;) {
                        data[++j] = name[i];
                    }
                } else {
                    if (!opt_isDefault) {
                        data[++j] = name;
                    }
                }
            }
            return data;
        }
        /**
         * @param {?} object
         * @param {Function} callback
         * @param {Function} resolve
         * @return {?}
         */
        function successCallback(object, callback, resolve) {
            /** @type {number} */
            var index = -1;
            var map = apply(object);
            var value = resolve(object);
            var length = value.length;
            for (;++index < length;) {
                var key = value[index];
                if (callback(map[key], key, map) === false) {
                    break;
                }
            }
            return object;
        }
        /**
         * @param {string} value
         * @param {Function} callback
         * @param {Function} item
         * @return {?}
         */
        function getValue(value, callback, item) {
            var collection = apply(value);
            var parts = item(value);
            var i = parts.length;
            for (;i--;) {
                var last = parts[i];
                if (callback(collection[last], last, collection) === false) {
                    break;
                }
            }
            return value;
        }
        /**
         * @param {?} s
         * @param {Function} content
         * @return {?}
         */
        function show(s, content) {
            return successCallback(s, content, forEach);
        }
        /**
         * @param {?} replacementHash
         * @param {Function} prop
         * @return {?}
         */
        function check(replacementHash, prop) {
            return successCallback(replacementHash, prop, keys);
        }
        /**
         * @param {Object} node
         * @param {?} callback
         * @return {?}
         */
        function post(node, callback) {
            return getValue(node, callback, keys);
        }
        /**
         * @param {string} o
         * @param {Array} list
         * @return {?}
         */
        function join(o, list) {
            /** @type {number} */
            var index = -1;
            var length = list.length;
            /** @type {number} */
            var ri = -1;
            /** @type {Array} */
            var result = [];
            for (;++index < length;) {
                var item = list[index];
                if (isFunction(o[item])) {
                    result[++ri] = item;
                }
            }
            return result;
        }
        /**
         * @param {boolean} records
         * @param {string} name
         * @param {?} args
         * @return {?}
         */
        function remove(records, name, args) {
            /** @type {number} */
            var resLength = -1;
            /** @type {boolean} */
            var id = "function" == typeof name;
            var val = records ? records.length : 0;
            var res = fn(val) ? call(val) : [];
            return resolve(records, function(object) {
                var method = id ? name : null != object && object[name];
                res[++resLength] = method ? method.apply(object, args) : options;
            }), res;
        }
        /**
         * @param {?} a
         * @param {?} b
         * @param {boolean} fn
         * @param {boolean} inplace
         * @param {Object} doc
         * @param {Object} data
         * @return {?}
         */
        function success(a, b, fn, inplace, doc, data) {
            if (a === b) {
                return 0 !== a || 1 / a == 1 / b;
            }
            /** @type {string} */
            var atype = typeof a;
            /** @type {string} */
            var first = typeof b;
            return "function" != atype && ("object" != atype && ("function" != first && "object" != first)) || (null == a || null == b) ? a !== a && b !== b : process(a, b, success, fn, inplace, doc, data);
        }
        /**
         * @param {string} value
         * @param {string} name
         * @param {Function} callback
         * @param {boolean} obj
         * @param {boolean} data
         * @param {Array} state
         * @param {Object} names
         * @return {?}
         */
        function process(value, name, callback, obj, data, state, names) {
            var isFunction = ondata(value);
            var arr = ondata(name);
            /** @type {string} */
            var type = start;
            /** @type {string} */
            var t = start;
            if (!isFunction) {
                type = eventSplitter.call(value);
                if (type == number) {
                    /** @type {string} */
                    type = string;
                } else {
                    if (type != string) {
                        isFunction = isArray(value);
                    }
                }
            }
            if (!arr) {
                t = eventSplitter.call(name);
                if (t == number) {
                    /** @type {string} */
                    t = string;
                } else {
                    if (t != string) {
                        arr = isArray(name);
                    }
                }
            }
            /** @type {boolean} */
            var propertyIsEnumerable = type == string;
            /** @type {boolean} */
            var s = t == string;
            /** @type {boolean} */
            var isScale = type == t;
            if (isScale && (!isFunction && !propertyIsEnumerable)) {
                return normalize(value, name, type);
            }
            var err = propertyIsEnumerable && hasOwn.call(value, "__wrapped__");
            var result = s && hasOwn.call(name, "__wrapped__");
            if (err || result) {
                return callback(err ? value.value() : value, result ? name.value() : name, obj, data, state, names);
            }
            if (!isScale) {
                return false;
            }
            if (!state) {
                /** @type {Array} */
                state = [];
            }
            if (!names) {
                /** @type {Array} */
                names = [];
            }
            var i = state.length;
            for (;i--;) {
                if (state[i] == value) {
                    return names[i] == name;
                }
            }
            state.push(value);
            names.push(name);
            var key = (isFunction ? loop : send)(value, name, callback, obj, data, state, names);
            return state.pop(), names.pop(), key;
        }
        /**
         * @param {number} obj
         * @param {Array} params
         * @param {Array} c
         * @param {Array} arr
         * @param {boolean} fn
         * @return {?}
         */
        function clear(obj, params, c, arr, fn) {
            var len = params.length;
            if (null == obj) {
                return!len;
            }
            /** @type {number} */
            var i = -1;
            /** @type {boolean} */
            var gotArr = !fn;
            for (;++i < len;) {
                if (gotArr && arr[i] ? c[i] !== obj[params[i]] : !hasOwn.call(obj, params[i])) {
                    return false;
                }
            }
            /** @type {number} */
            i = -1;
            for (;++i < len;) {
                var param = params[i];
                if (gotArr && arr[i]) {
                    var index = hasOwn.call(obj, param)
                } else {
                    var val = obj[param];
                    var arg = c[i];
                    index = fn ? fn(val, arg, param) : options;
                    if ("undefined" == typeof index) {
                        index = success(arg, val, fn, true);
                    }
                }
                if (!index) {
                    return false;
                }
            }
            return true;
        }
        /**
         * @param {string} value
         * @param {?} done
         * @return {?}
         */
        function enter(value, done) {
            /** @type {Array} */
            var _results = [];
            return resolve(value, function(error, file, slug) {
                _results.push(done(error, file, slug));
            }), _results;
        }
        /**
         * @param {string} obj
         * @return {?}
         */
        function compile(obj) {
            var props = keys(obj);
            var i = props.length;
            if (1 == i) {
                var prop = props[0];
                var val = obj[prop];
                if (stringify(val)) {
                    return function(obj) {
                        return null != obj && (val === obj[prop] && hasOwn.call(obj, prop));
                    };
                }
            }
            var r = call(i);
            var args = call(i);
            for (;i--;) {
                val = obj[props[i]];
                r[i] = val;
                args[i] = stringify(val);
            }
            return function(walkers) {
                return clear(walkers, props, r, args);
            };
        }
        /**
         * @param {?} obj
         * @param {string} options
         * @param {boolean} callback
         * @param {(Array|string)} args
         * @param {(Array|string)} path
         * @return {?}
         */
        function bind(obj, options, callback, args, path) {
            var f = fn(options.length) && (ondata(options) || isArray(options));
            return(f ? each : check)(options, function(name, key, t) {
                if (func(name)) {
                    return args || (args = []), path || (path = []), write(obj, t, key, bind, callback, args, path);
                }
                var type = obj[key];
                var val = callback ? callback(type, name, key, obj, t) : options;
                /** @type {boolean} */
                var warning_status = "undefined" == typeof val;
                if (warning_status) {
                    val = name;
                }
                if (!(!f && "undefined" == typeof val)) {
                    if (!(!warning_status && (val === val ? val === type : type !== type))) {
                        obj[key] = val;
                    }
                }
            }), obj;
        }
        /**
         * @param {?} results
         * @param {?} ast
         * @param {?} index
         * @param {Function} callback
         * @param {boolean} cb
         * @param {Object} array
         * @param {Array} data
         * @return {?}
         */
        function write(results, ast, index, callback, cb, array, data) {
            var i = array.length;
            var value = ast[index];
            for (;i--;) {
                if (array[i] == value) {
                    return void(results[index] = data[i]);
                }
            }
            var name = results[index];
            var args = cb ? cb(name, value, index, results, ast) : options;
            /** @type {boolean} */
            var warning_status = "undefined" == typeof args;
            if (warning_status) {
                args = value;
                if (fn(value.length) && (ondata(value) || isArray(value))) {
                    args = ondata(name) ? name : name ? promote(name) : [];
                } else {
                    if (is(value) || isClassOf(value)) {
                        args = isClassOf(name) ? done(name) : is(name) ? name : {};
                    } else {
                        /** @type {boolean} */
                        warning_status = false;
                    }
                }
            }
            array.push(value);
            data.push(args);
            if (warning_status) {
                results[index] = callback(args, value, cb, array, data);
            } else {
                if (args === args ? args !== name : name === name) {
                    results[index] = args;
                }
            }
        }
        /**
         * @param {string} key
         * @return {?}
         */
        function callback(key) {
            return function(object) {
                return null == object ? options : object[key];
            };
        }
        /**
         * @param {string} text
         * @param {Object} res
         * @return {?}
         */
        function onSuccess(text, res) {
            var j = res.length;
            var template = refresh(text, res);
            res.sort(compare);
            for (;j--;) {
                /** @type {number} */
                var start = parseFloat(res[j]);
                if (start != end && append(start)) {
                    /** @type {number} */
                    var end = start;
                    that.call(text, start, 1);
                }
            }
            return template;
        }
        /**
         * @param {number} a
         * @param {number} i
         * @return {?}
         */
        function splice(a, i) {
            return a + floor(nativeRandom() * (i - a + 1));
        }
        /**
         * @param {string} name
         * @param {?} next
         * @param {Array} value
         * @param {boolean} err
         * @param {Function} callback
         * @return {?}
         */
        function index(name, next, value, err, callback) {
            return callback(name, function(line, res, compiled) {
                value = err ? (err = false, line) : next(value, line, res, compiled);
            }), value;
        }
        /**
         * @param {Object} bytes
         * @param {number} recurring
         * @param {string} e
         * @return {?}
         */
        function slice(bytes, recurring, e) {
            /** @type {number} */
            var i = -1;
            var n = bytes.length;
            /** @type {number} */
            recurring = null == recurring ? 0 : +recurring || 0;
            if (recurring < 0) {
                recurring = -recurring > n ? 0 : n + recurring;
            }
            e = "undefined" == typeof e || e > n ? n : +e || 0;
            if (e < 0) {
                e += n;
            }
            /** @type {number} */
            n = recurring > e ? 0 : e - recurring >>> 0;
            recurring >>>= 0;
            var ret = call(n);
            for (;++i < n;) {
                ret[i] = bytes[i + recurring];
            }
            return ret;
        }
        /**
         * @param {string} arg
         * @param {Function} compareFn
         * @return {?}
         */
        function onDeviceReady(arg, compareFn) {
            var compareResult;
            return resolve(arg, function(opt_target, deepDataAndEvents, middle) {
                return compareResult = compareFn(opt_target, deepDataAndEvents, middle), !compareResult;
            }), !!compareResult;
        }
        /**
         * @param {Array} array
         * @param {boolean} callback
         * @return {?}
         */
        function list(array, callback) {
            /** @type {number} */
            var index = -1;
            var fn = push();
            var length = array.length;
            /** @type {boolean} */
            var elem = fn == factory;
            /** @type {boolean} */
            var nType = elem && length >= 200;
            var elements = nType && puts();
            /** @type {Array} */
            var result = [];
            if (elements) {
                /** @type {function (Object, string): ?} */
                fn = store;
                /** @type {boolean} */
                elem = false;
            } else {
                /** @type {boolean} */
                nType = false;
                /** @type {Array} */
                elements = callback ? [] : result;
            }
            a: for (;++index < length;) {
                var value = array[index];
                var options = callback ? callback(value, index, array) : value;
                if (elem && value === value) {
                    var elIdx = elements.length;
                    for (;elIdx--;) {
                        if (elements[elIdx] === options) {
                            continue a;
                        }
                    }
                    if (callback) {
                        elements.push(options);
                    }
                    result.push(value);
                } else {
                    if (fn(elements, options) < 0) {
                        if (callback || nType) {
                            elements.push(options);
                        }
                        result.push(value);
                    }
                }
            }
            return result;
        }
        /**
         * @param {string} obj
         * @param {Array} items
         * @return {?}
         */
        function read(obj, items) {
            /** @type {number} */
            var i = -1;
            var len = items.length;
            var res = call(len);
            for (;++i < len;) {
                res[i] = obj[items[i]];
            }
            return res;
        }
        /**
         * @param {Object} res
         * @param {Array} methods
         * @return {?}
         */
        function copy(res, methods) {
            /** @type {Object} */
            var value = res;
            if (value instanceof data) {
                value = value.value();
            }
            /** @type {number} */
            var index = -1;
            var length = methods.length;
            for (;++index < length;) {
                /** @type {Array} */
                var args = [value];
                var obj = methods[index];
                method.apply(args, obj.args);
                value = obj.func.apply(obj.thisArg, args);
            }
            return value;
        }
        /**
         * @param {Object} ary
         * @param {?} basis
         * @param {boolean} deepDataAndEvents
         * @return {?}
         */
        function trimDots(ary, basis, deepDataAndEvents) {
            /** @type {number} */
            var low = 0;
            var high = ary ? ary.length : low;
            if ("number" == typeof basis && (basis === basis && high <= yg)) {
                for (;low < high;) {
                    /** @type {number} */
                    var index = low + high >>> 1;
                    var prop = ary[index];
                    if (deepDataAndEvents ? prop <= basis : prop < basis) {
                        /** @type {number} */
                        low = index + 1;
                    } else {
                        /** @type {number} */
                        high = index;
                    }
                }
                return high;
            }
            return build(ary, basis, identity, deepDataAndEvents);
        }
        /**
         * @param {Object} ary
         * @param {?} basis
         * @param {Function} callback
         * @param {boolean} deepDataAndEvents
         * @return {?}
         */
        function build(ary, basis, callback, deepDataAndEvents) {
            basis = callback(basis);
            /** @type {number} */
            var low = 0;
            var high = ary ? ary.length : 0;
            /** @type {boolean} */
            var g = basis !== basis;
            /** @type {boolean} */
            var name = "undefined" == typeof basis;
            for (;low < high;) {
                var mid = floor((low + high) / 2);
                var index = callback(ary[mid]);
                /** @type {boolean} */
                var active = index === index;
                if (g) {
                    var names = active || deepDataAndEvents
                } else {
                    names = name ? active && (deepDataAndEvents || "undefined" != typeof index) : deepDataAndEvents ? index <= basis : index < basis;
                }
                if (names) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
            }
            return min(high, padLength);
        }
        /**
         * @param {Function} s
         * @param {Object} args
         * @param {number} expectedNumberOfNonCommentArgs
         * @return {?}
         */
        function parse(s, args, expectedNumberOfNonCommentArgs) {
            if ("function" != typeof s) {
                return identity;
            }
            if ("undefined" == typeof args) {
                return s;
            }
            switch(expectedNumberOfNonCommentArgs) {
                case 1:
                    return function(fd) {
                        return s.call(args, fd);
                    };
                case 3:
                    return function(fd, resp, capture) {
                        return s.call(args, fd, resp, capture);
                    };
                case 4:
                    return function(fd, resp, capture, height) {
                        return s.call(args, fd, resp, capture, height);
                    };
                case 5:
                    return function(fd, resp, capture, height, opt_acc) {
                        return s.call(args, fd, resp, capture, height, opt_acc);
                    };
            }
            return function() {
                return s.apply(args, arguments);
            };
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        function hasKey(obj) {
            return core_toString.call(obj, 0);
        }
        /**
         * @param {(Array|Uint8Array)} data
         * @param {Array} args
         * @param {Array} object
         * @return {?}
         */
        function fire(data, args, object) {
            var length = object.length;
            /** @type {number} */
            var index = -1;
            var y = max(data.length - length, 0);
            /** @type {number} */
            var i = -1;
            var len = args.length;
            var result = call(y + len);
            for (;++i < len;) {
                result[i] = args[i];
            }
            for (;++index < length;) {
                result[object[index]] = data[index];
            }
            for (;y--;) {
                result[i++] = data[index++];
            }
            return result;
        }
        /**
         * @param {(Array|Uint8Array)} a
         * @param {Array} o
         * @param {Array} spy
         * @return {?}
         */
        function MAP(a, o, spy) {
            /** @type {number} */
            var prop = -1;
            var l = spy.length;
            /** @type {number} */
            var i = -1;
            var length = max(a.length - l, 0);
            /** @type {number} */
            var n = -1;
            var position = o.length;
            var r = call(length + position);
            for (;++i < length;) {
                r[i] = a[i];
            }
            /** @type {number} */
            var p = i;
            for (;++n < position;) {
                r[p + n] = o[n];
            }
            for (;++prop < l;) {
                r[p + spy[prop]] = a[i++];
            }
            return r;
        }
        /**
         * @param {Function} fn
         * @param {Object} done
         * @return {?}
         */
        function search(fn, done) {
            return function(name, callback, deepDataAndEvents) {
                var s = done ? done() : {};
                if (callback = expect(callback, deepDataAndEvents, 3), ondata(name)) {
                    /** @type {number} */
                    var i = -1;
                    var size = name.length;
                    for (;++i < size;) {
                        var layer = name[i];
                        fn(s, layer, callback(layer, i, name), name);
                    }
                } else {
                    resolve(name, function(results, mongoObject, arr) {
                        fn(s, results, callback(results, mongoObject, arr), arr);
                    });
                }
                return s;
            };
        }
        /**
         * @param {Function} callback
         * @return {?}
         */
        function load(callback) {
            return function() {
                /** @type {number} */
                var argsLen = arguments.length;
                var err = arguments[0];
                if (argsLen < 2 || null == err) {
                    return err;
                }
                if (argsLen > 3 && (map(arguments[1], arguments[2], arguments[3]) && (argsLen = 2)), argsLen > 3 && "function" == typeof arguments[argsLen - 2]) {
                    var arg = parse(arguments[--argsLen - 1], arguments[argsLen--], 5)
                } else {
                    if (argsLen > 2) {
                        if ("function" == typeof arguments[argsLen - 1]) {
                            arg = arguments[--argsLen];
                        }
                    }
                }
                /** @type {number} */
                var j = 0;
                for (;++j < argsLen;) {
                    var arr = arguments[j];
                    if (arr) {
                        callback(err, arr, arg);
                    }
                }
                return err;
            };
        }
        /**
         * @param {string} obj
         * @param {?} object
         * @return {?}
         */
        function spy(obj, object) {
            /**
             * @return {?}
             */
            function $() {
                return(this instanceof $ ? f : obj).apply(object, arguments);
            }
            var f = format(obj);
            return $;
        }
        /**
         * @param {Function} callback
         * @return {?}
         */
        function animate(callback) {
            return function(e) {
                /** @type {number} */
                var index = -1;
                var body = finish(onStart(e));
                var n = body.length;
                /** @type {string} */
                var basis = "";
                for (;++index < n;) {
                    basis = callback(basis, body[index], index);
                }
                return basis;
            };
        }
        /**
         * @param {Function} template
         * @return {?}
         */
        function format(template) {
            return function() {
                var data = hasOwnProperty(template.prototype);
                var res = template.apply(data, arguments);
                return func(res) ? res : data;
            };
        }
        /**
         * @param {Function} callback
         * @param {boolean} deepDataAndEvents
         * @return {?}
         */
        function cleanup(callback, deepDataAndEvents) {
            return function(name, args, dataAndEvents) {
                if (dataAndEvents) {
                    if (map(name, args, dataAndEvents)) {
                        /** @type {null} */
                        args = null;
                    }
                }
                var MAP = expect();
                /** @type {boolean} */
                var h = null == args;
                if (MAP === render && h || (h = false, args = MAP(args, dataAndEvents, 3)), h) {
                    var value = ondata(name);
                    if (value || !isString(name)) {
                        return callback(value ? name : (0,eval)(name));
                    }
                    /** @type {function (string): ?} */
                    args = array_to_hash;
                }
                return inner(name, args, deepDataAndEvents);
            };
        }
        /**
         * @param {string} obj
         * @param {?} y
         * @param {Object} deepDataAndEvents
         * @param {Object} data
         * @param {Array} x
         * @param {Object} id
         * @param {Array} str
         * @param {Object} name
         * @param {Array} pos
         * @param {number} bit
         * @return {?}
         */
        function ctor(obj, y, deepDataAndEvents, data, x, id, str, name, pos, bit) {
            /**
             * @return {?}
             */
            function init() {
                /** @type {number} */
                var len = arguments.length;
                /** @type {number} */
                var i = len;
                var args = call(len);
                for (;i--;) {
                    args[i] = arguments[i];
                }
                if (data && (args = fire(args, data, x)), id && (args = MAP(args, id, str)), isVerification || overflowY) {
                    var value = init.placeholder;
                    var text = fail(args, value);
                    if (len -= text.length, len < bit) {
                        var newName = name ? promote(name) : null;
                        var maxSize = max(bit - len, 0);
                        var middle = isVerification ? text : null;
                        var errStr = isVerification ? null : text;
                        var pdataCur = isVerification ? args : null;
                        var calls = isVerification ? null : args;
                        y |= isVerification ? oldconfig : c;
                        y &= ~(isVerification ? c : oldconfig);
                        if (!overflowX) {
                            y &= ~(j | mask);
                        }
                        var elem = ctor(obj, y, deepDataAndEvents, pdataCur, middle, calls, errStr, newName, pos, maxSize);
                        return elem.placeholder = value, elem;
                    }
                }
                var object = valuesIfObject ? deepDataAndEvents : this;
                return iterator && (obj = object[key]), name && (args = relative(args, name)), l && (pos < args.length && (args.length = pos)), (this instanceof init ? type || format(obj) : obj).apply(object, args);
            }
            /** @type {number} */
            var l = y & z;
            /** @type {number} */
            var valuesIfObject = y & j;
            /** @type {number} */
            var iterator = y & mask;
            /** @type {number} */
            var isVerification = y & QUnit;
            /** @type {number} */
            var overflowX = y & mapSizeComparer;
            /** @type {number} */
            var overflowY = y & tag;
            var type = !iterator && format(obj);
            var key = obj;
            return init;
        }
        /**
         * @param {string} input
         * @param {number} key
         * @param {string} str
         * @return {?}
         */
        function escape(input, key, str) {
            var il = input.length;
            if (key = +key, il >= key || !f(key)) {
                return "";
            }
            /** @type {number} */
            var attributes = key - il;
            return str = null == str ? " " : str + "", close(str, ceil(attributes / str.length)).slice(0, attributes);
        }
        /**
         * @param {string} value
         * @param {number} i
         * @param {Object} fn
         * @param {Array} params
         * @return {?}
         */
        function action(value, i, fn, params) {
            /**
             * @return {?}
             */
            function e() {
                /** @type {number} */
                var current = -1;
                /** @type {number} */
                var l = arguments.length;
                /** @type {number} */
                var i = -1;
                var len = params.length;
                var args = call(l + len);
                for (;++i < len;) {
                    args[i] = params[i];
                }
                for (;l--;) {
                    args[i++] = arguments[++current];
                }
                return(this instanceof e ? f : value).apply(bool ? fn : this, args);
            }
            /** @type {number} */
            var bool = i & j;
            var f = format(value);
            return e;
        }
        /**
         * @param {string} methodName
         * @param {number} b
         * @param {Function} mayParseLabeledStatementInstead
         * @param {Object} collection
         * @param {Object} recurring
         * @param {Array} aDefaultValue
         * @param {Function} depMaps
         * @param {string} obj
         * @return {?}
         */
        function invoke(methodName, b, mayParseLabeledStatementInstead, collection, recurring, aDefaultValue, depMaps, obj) {
            /** @type {number} */
            var ret = b & mask;
            if (!ret && !isFunction(methodName)) {
                throw new Stream(filename);
            }
            var length = collection ? collection.length : 0;
            if (length || (b &= ~(oldconfig | c), collection = recurring = null), length -= recurring ? recurring.length : 0, b & c) {
                /** @type {Object} */
                var iteratee = collection;
                /** @type {Object} */
                var ms_seeks_backward = recurring;
                /** @type {null} */
                collection = recurring = null;
            }
            var result = !ret && missingTask(methodName);
            /** @type {Array} */
            var args = [methodName, b, mayParseLabeledStatementInstead, collection, recurring, iteratee, ms_seeks_backward, aDefaultValue, depMaps, obj];
            if (result && (result !== true && (equal(args, result), b = args[1], obj = args[9])), args[9] = null == obj ? ret ? 0 : methodName.length : max(obj - length, 0) || 0, b == j) {
                var clone = spy(args[0], args[2])
            } else {
                clone = b != oldconfig && b != (j | oldconfig) || args[4].length ? ctor.apply(null, args) : action.apply(null, args);
            }
            var res = result ? ok : failed;
            return res(clone, args);
        }
        /**
         * @param {Array} obj
         * @param {Object} values
         * @param {Function} f
         * @param {boolean} cb
         * @param {boolean} result
         * @param {Array} name
         * @param {Object} callback
         * @return {?}
         */
        function loop(obj, values, f, cb, result, name, callback) {
            /** @type {number} */
            var key = -1;
            var j = obj.length;
            var len = values.length;
            /** @type {boolean} */
            var method = true;
            if (j != len && !(result && len > j)) {
                return false;
            }
            for (;method && ++key < j;) {
                var val = obj[key];
                var value = values[key];
                if (method = options, cb && (method = result ? cb(value, val, key) : cb(val, value, key)), "undefined" == typeof method) {
                    if (result) {
                        var i = len;
                        for (;i-- && (value = values[i], !(method = val && val === value || f(val, value, cb, result, name, callback)));) {
                        }
                    } else {
                        method = val && val === value || f(val, value, cb, result, name, callback);
                    }
                }
            }
            return!!method;
        }
        /**
         * @param {number} a
         * @param {number} b
         * @param {string} type
         * @return {?}
         */
        function normalize(a, b, type) {
            switch(type) {
                case i:
                    ;
                case numberClass:
                    return+a == +b;
                case location:
                    return a.name == b.name && a.message == b.message;
                case input:
                    return a != +a ? b != +b : 0 == a ? 1 / a == 1 / b : a == +b;
                case h:
                    ;
                case s:
                    return a == b + "";
            }
            return false;
        }
        /**
         * @param {?} b
         * @param {?} object
         * @param {Function} callback
         * @param {boolean} next
         * @param {boolean} err
         * @param {Array} data
         * @param {Object} config
         * @return {?}
         */
        function send(b, object, callback, next, err, data, config) {
            var kb = keys(b);
            var charLen = kb.length;
            var props = keys(object);
            var l2 = props.length;
            if (charLen != l2 && !err) {
                return false;
            }
            var constructor;
            /** @type {number} */
            var i = -1;
            for (;++i < charLen;) {
                var key = kb[i];
                var index = hasOwn.call(object, key);
                if (index) {
                    var val = b[key];
                    var value = object[key];
                    index = options;
                    if (next) {
                        index = err ? next(value, val, key) : next(val, value, key);
                    }
                    if ("undefined" == typeof index) {
                        index = val && val === value || callback(val, value, next, err, data, config);
                    }
                }
                if (!index) {
                    return false;
                }
                if (!constructor) {
                    /** @type {boolean} */
                    constructor = "constructor" == key;
                }
            }
            if (!constructor) {
                var c = b.constructor;
                var name = object.constructor;
                if (c != name && ("constructor" in b && ("constructor" in object && !("function" == typeof c && (c instanceof c && ("function" == typeof name && name instanceof name)))))) {
                    return false;
                }
            }
            return true;
        }
        /**
         * @param {string} value
         * @param {Function} callback
         * @param {boolean} deepDataAndEvents
         * @return {?}
         */
        function inner(value, callback, deepDataAndEvents) {
            var currentValue = deepDataAndEvents ? len : to;
            var lastValue = currentValue;
            var result = lastValue;
            return resolve(value, function(data, i, arr) {
                var value = callback(data, i, arr);
                if ((deepDataAndEvents ? value < lastValue : value > lastValue) || value === currentValue && value === result) {
                    lastValue = value;
                    result = data;
                }
            }), result;
        }
        /**
         * @param {Function} recurring
         * @param {Object} deepDataAndEvents
         * @param {number} opt_attributes
         * @return {?}
         */
        function expect(recurring, deepDataAndEvents, opt_attributes) {
            /** @type {function (string, Object, Object): ?} */
            var msg = lodash.callback || draw;
            return msg = msg === draw ? render : msg, opt_attributes ? msg(recurring, deepDataAndEvents, opt_attributes) : msg;
        }
        /**
         * @param {(Object|string)} elements
         * @param {number} recurring
         * @param {number} elem
         * @return {?}
         */
        function push(elements, recurring, elem) {
            /** @type {function (string, number, number): ?} */
            var _loop = lodash.indexOf || indexOf;
            return _loop = _loop === indexOf ? factory : _loop, elements ? _loop(elements, recurring, elem) : _loop;
        }
        /**
         * @param {number} left
         * @param {Object} size
         * @param {Object} collection
         * @return {?}
         */
        function create(left, size, collection) {
            /** @type {number} */
            var index = -1;
            var length = collection ? collection.length : 0;
            for (;++index < length;) {
                var node = collection[index];
                var width = node.size;
                switch(node.type) {
                    case "drop":
                        left += width;
                        break;
                    case "dropRight":
                        size -= width;
                        break;
                    case "take":
                        size = min(size, left + width);
                        break;
                    case "takeRight":
                        left = max(left, size - width);
                }
            }
            return{
                start : left,
                end : size
            };
        }
        /**
         * @param {?} params
         * @return {?}
         */
        function next(params) {
            var len = params.length;
            var data = new params.constructor(len);
            return len && ("string" == typeof params[0] && (hasOwn.call(params, "index") && (data.index = params.index, data.input = params.input))), data;
        }
        /**
         * @param {(Array|string)} value
         * @return {?}
         */
        function convert(value) {
            var ctor = value.constructor;
            return "function" == typeof ctor && ctor instanceof ctor || (ctor = $), new ctor;
        }
        /**
         * @param {?} value
         * @param {?} key
         * @param {boolean} deepDataAndEvents
         * @return {?}
         */
        function self(value, key, deepDataAndEvents) {
            var ctor = value.constructor;
            switch(key) {
                case b:
                    return hasKey(value);
                case i:
                    ;
                case numberClass:
                    return new ctor(+value);
                case target:
                    ;
                case name:
                    ;
                case source:
                    ;
                case position:
                    ;
                case channel:
                    ;
                case prop:
                    ;
                case data:
                    ;
                case docUid:
                    ;
                case index:
                    var suiteView = value.buffer;
                    return new ctor(deepDataAndEvents ? hasKey(suiteView) : suiteView, value.byteOffset, value.length);
                case input:
                    ;
                case s:
                    return new ctor(value);
                case h:
                    var result = new ctor(value.source, rtagName.exec(value));
                    result.lastIndex = value.lastIndex;
            }
            return result;
        }
        /**
         * @param {Object} a
         * @return {?}
         */
        function complete(a) {
            var support = lodash.support;
            /** @type {boolean} */
            var result = !(support.funcNames ? a.name : support.funcDecomp);
            if (!result) {
                var ch = toString.call(a);
                if (!support.funcNames) {
                    /** @type {boolean} */
                    result = !largeRE.test(ch);
                }
                if (!result) {
                    result = symbol.test(ch) || isNumber(a);
                    ok(a, result);
                }
            }
            return result;
        }
        /**
         * @param {number} a
         * @param {number} b
         * @return {?}
         */
        function append(a, b) {
            return a = +a, b = null == b ? lower : b, a > -1 && (a % 1 == 0 && a < b);
        }
        /**
         * @param {string} object
         * @param {?} recurring
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function map(object, recurring, deepDataAndEvents) {
            if (!func(deepDataAndEvents)) {
                return false;
            }
            /** @type {string} */
            var type = typeof recurring;
            if ("number" == type) {
                var elem = deepDataAndEvents.length;
                var value = fn(elem) && append(recurring, elem);
            } else {
                /** @type {boolean} */
                value = "string" == type && recurring in deepDataAndEvents;
            }
            return value && deepDataAndEvents[recurring] === object;
        }
        /**
         * @param {?} b
         * @return {?}
         */
        function fn(b) {
            return "number" == typeof b && (b > -1 && (b % 1 == 0 && b <= lower));
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        function stringify(obj) {
            return obj === obj && (0 === obj ? 1 / obj > 0 : !func(obj));
        }
        /**
         * @param {Array} a
         * @param {Array} b
         * @return {?}
         */
        function equal(a, b) {
            var left = a[1];
            var x = b[1];
            /** @type {number} */
            var i = left | x;
            /** @type {number} */
            var length = z | right;
            /** @type {number} */
            var y = j | mask;
            /** @type {number} */
            var maxRange = length | y | mapSizeComparer | tag;
            /** @type {(boolean|number)} */
            var noindent = left & z && !(x & z);
            /** @type {(boolean|number)} */
            var isBElement = left & right && !(x & right);
            var joined = (isBElement ? a : b)[7];
            var maxLen = (noindent ? a : b)[8];
            /** @type {boolean} */
            var object = !(left >= right && x > y || left > y && x >= right);
            /** @type {(boolean|number)} */
            var property = i >= length && (i <= maxRange && (left < right || (isBElement || noindent) && joined.length <= maxLen));
            if (!object && !property) {
                return a;
            }
            if (x & j) {
                a[2] = b[2];
                i |= left & j ? 0 : mapSizeComparer;
            }
            var e = b[3];
            if (e) {
                var args = a[3];
                a[3] = args ? fire(args, e, b[4]) : promote(e);
                a[4] = args ? fail(a[3], obj) : promote(b[4]);
            }
            return e = b[5], e && (args = a[5], a[5] = args ? MAP(args, e, b[6]) : promote(e), a[6] = args ? fail(a[5], obj) : promote(b[6])), e = b[7], e && (a[7] = promote(e)), x & z && (a[8] = null == a[8] ? b[8] : min(a[8], b[8])), null == a[9] && (a[9] = b[9]), a[0] = b[0], a[1] = i, a;
        }
        /**
         * @param {string} values
         * @param {Array} arr
         * @return {?}
         */
        function every(values, arr) {
            values = apply(values);
            /** @type {number} */
            var i = -1;
            var size = arr.length;
            var result = {};
            for (;++i < size;) {
                var name = arr[i];
                if (name in values) {
                    result[name] = values[name];
                }
            }
            return result;
        }
        /**
         * @param {string} data
         * @param {Function} func
         * @return {?}
         */
        function message(data, func) {
            var flags = {};
            return show(data, function(value, key, ary) {
                if (func(value, key, ary)) {
                    flags[key] = value;
                }
            }), flags;
        }
        /**
         * @param {string} parent
         * @param {string} s
         * @return {?}
         */
        function relative(parent, s) {
            var value = parent.length;
            var index = min(s.length, value);
            var data = promote(parent);
            for (;index--;) {
                var key = s[index];
                parent[index] = append(key, value) ? data[key] : options;
            }
            return parent;
        }
        /**
         * @param {?} name
         * @return {?}
         */
        function select(name) {
            var c;
            lodash.support;
            if (!func(name) || (eventSplitter.call(name) != string || !hasOwn.call(name, "constructor") && (c = name.constructor, "function" == typeof c && !(c instanceof c)))) {
                return false;
            }
            var text;
            return show(name, function(dataAndEvents, textAlt) {
                text = textAlt;
            }), "undefined" == typeof text || hasOwn.call(name, text);
        }
        /**
         * @param {string} name
         * @return {?}
         */
        function emit(name) {
            var input = forEach(name);
            var i = input.length;
            var elem = i && name.length;
            var support = lodash.support;
            var keepData = elem && (fn(elem) && (ondata(name) || support.nonEnumArgs && isClassOf(name)));
            /** @type {number} */
            var line = -1;
            /** @type {Array} */
            var bucket = [];
            for (;++line < i;) {
                var value = input[line];
                if (keepData && append(value, elem) || hasOwn.call(name, value)) {
                    bucket.push(value);
                }
            }
            return bucket;
        }
        /**
         * @param {string} optgroup
         * @return {?}
         */
        function eval(optgroup) {
            return null == optgroup ? [] : fn(optgroup.length) ? func(optgroup) ? optgroup : $(optgroup) : forOwn(optgroup);
        }
        /**
         * @param {string} optgroup
         * @return {?}
         */
        function apply(optgroup) {
            return func(optgroup) ? optgroup : $(optgroup);
        }
        /**
         * @param {boolean} array
         * @param {number} args
         * @param {boolean} callback
         * @return {?}
         */
        function first(array, args, callback) {
            args = (callback ? map(array, args, callback) : null == args) ? 1 : max(+args || 1, 1);
            /** @type {number} */
            var recurring = 0;
            var length = array ? array.length : 0;
            /** @type {number} */
            var i = -1;
            var object = call(ceil(length / args));
            for (;recurring < length;) {
                object[++i] = slice(array, recurring, recurring += args);
            }
            return object;
        }
        /**
         * @param {Object} array
         * @return {?}
         */
        function compact(array) {
            /** @type {number} */
            var index = -1;
            var length = array ? array.length : 0;
            /** @type {number} */
            var ri = -1;
            /** @type {Array} */
            var result = [];
            for (;++index < length;) {
                var value = array[index];
                if (value) {
                    result[++ri] = value;
                }
            }
            return result;
        }
        /**
         * @return {?}
         */
        function pick() {
            /** @type {number} */
            var i = -1;
            /** @type {number} */
            var len = arguments.length;
            for (;++i < len;) {
                var name = arguments[i];
                if (ondata(name) || isClassOf(name)) {
                    break;
                }
            }
            return log(name, getData(arguments, false, true, ++i));
        }
        /**
         * @param {boolean} array
         * @param {number} recurring
         * @param {boolean} callback
         * @return {?}
         */
        function zip(array, recurring, callback) {
            var length = array ? array.length : 0;
            return length ? ((callback ? map(array, recurring, callback) : null == recurring) && (recurring = 1), slice(array, recurring < 0 ? 0 : recurring)) : [];
        }
        /**
         * @param {boolean} array
         * @param {number} recurring
         * @param {boolean} callback
         * @return {?}
         */
        function union(array, recurring, callback) {
            var length = array ? array.length : 0;
            return length ? ((callback ? map(array, recurring, callback) : null == recurring) && (recurring = 1), recurring = length - (+recurring || 0), slice(array, 0, recurring < 0 ? 0 : recurring)) : [];
        }
        /**
         * @param {Object} array
         * @param {?} callback
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function initial(array, callback, deepDataAndEvents) {
            var index = array ? array.length : 0;
            if (!index) {
                return[];
            }
            callback = expect(callback, deepDataAndEvents, 3);
            for (;index-- && callback(array[index], index, array);) {
            }
            return slice(array, 0, index + 1);
        }
        /**
         * @param {Object} array
         * @param {?} callback
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function rest(array, callback, deepDataAndEvents) {
            var length = array ? array.length : 0;
            if (!length) {
                return[];
            }
            /** @type {number} */
            var index = -1;
            callback = expect(callback, deepDataAndEvents, 3);
            for (;++index < length && callback(array[index], index, array);) {
            }
            return slice(array, index);
        }
        /**
         * @param {Object} collection
         * @param {?} callback
         * @param {Object} value
         * @return {?}
         */
        function iterator(collection, callback, value) {
            /** @type {number} */
            var index = -1;
            var length = collection ? collection.length : 0;
            callback = expect(callback, value, 3);
            for (;++index < length;) {
                if (callback(collection[index], index, collection)) {
                    return index;
                }
            }
            return-1;
        }
        /**
         * @param {Object} collection
         * @param {?} callback
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function fail(collection, callback, deepDataAndEvents) {
            var length = collection ? collection.length : 0;
            callback = expect(callback, deepDataAndEvents, 3);
            for (;length--;) {
                if (callback(collection[length], length, collection)) {
                    return length;
                }
            }
            return-1;
        }
        /**
         * @param {Node} s
         * @return {?}
         */
        function _select(s) {
            return s ? s[0] : options;
        }
        /**
         * @param {boolean} array
         * @param {boolean} recurring
         * @param {boolean} deepDataAndEvents
         * @return {?}
         */
        function flatten(array, recurring, deepDataAndEvents) {
            var iterator = array ? array.length : 0;
            return deepDataAndEvents && (map(array, recurring, deepDataAndEvents) && (recurring = false)), iterator ? getData(array, recurring) : [];
        }
        /**
         * @param {boolean} args
         * @return {?}
         */
        function constructor(args) {
            var numArgs = args ? args.length : 0;
            return numArgs ? getData(args, true) : [];
        }
        /**
         * @param {string} name
         * @param {number} recurring
         * @param {number} end
         * @return {?}
         */
        function indexOf(name, recurring, end) {
            var begin = name ? name.length : 0;
            if (!begin) {
                return-1;
            }
            if ("number" == typeof end) {
                end = end < 0 ? max(begin + end, 0) : end || 0;
            } else {
                if (end) {
                    var n = trimDots(name, recurring);
                    var type = name[n];
                    return(recurring === recurring ? recurring === type : type !== type) ? n : -1;
                }
            }
            return factory(name, recurring, end);
        }
        /**
         * @param {boolean} obj
         * @return {?}
         */
        function i(obj) {
            return union(obj, 1);
        }
        /**
         * @return {?}
         */
        function intersection() {
            /** @type {Array} */
            var bucket = [];
            /** @type {number} */
            var key = -1;
            /** @type {number} */
            var i = arguments.length;
            /** @type {Array} */
            var vals = [];
            var indexOf = push();
            /** @type {boolean} */
            var msg = indexOf == factory;
            for (;++key < i;) {
                var value = arguments[key];
                if (ondata(value) || isClassOf(value)) {
                    bucket.push(value);
                    vals.push(msg && (value.length >= 120 && puts(key && value)));
                }
            }
            /** @type {number} */
            i = bucket.length;
            var collection = bucket[0];
            /** @type {number} */
            var index = -1;
            var length = collection ? collection.length : 0;
            /** @type {Array} */
            var seen = [];
            var cache = vals[0];
            a: for (;++index < length;) {
                if (value = collection[index], (cache ? store(cache, value) : indexOf(seen, value)) < 0) {
                    /** @type {number} */
                    key = i;
                    for (;--key;) {
                        var val = vals[key];
                        if ((val ? store(val, value) : indexOf(bucket[key], value)) < 0) {
                            continue a;
                        }
                    }
                    if (cache) {
                        cache.push(value);
                    }
                    seen.push(value);
                }
            }
            return seen;
        }
        /**
         * @param {boolean} array
         * @return {?}
         */
        function difference(array) {
            var index = array ? array.length : 0;
            return index ? array[index - 1] : options;
        }
        /**
         * @param {Object} array
         * @param {?} value
         * @param {number} start
         * @return {?}
         */
        function lastIndexOf(array, value, start) {
            var length = array ? array.length : 0;
            if (!length) {
                return-1;
            }
            var i = length;
            if ("number" == typeof start) {
                i = (start < 0 ? max(length + start, 0) : min(start || 0, length - 1)) + 1;
            } else {
                if (start) {
                    /** @type {number} */
                    i = trimDots(array, value, true) - 1;
                    var v = array[i];
                    return(value === value ? value === v : v !== v) ? i : -1;
                }
            }
            if (value !== value) {
                return ondata(array, i, true);
            }
            for (;i--;) {
                if (array[i] === value) {
                    return i;
                }
            }
            return-1;
        }
        /**
         * @return {?}
         */
        function groupBy() {
            var result = arguments[0];
            if (!result || !result.length) {
                return result;
            }
            /** @type {number} */
            var i = 0;
            var callback = push();
            /** @type {number} */
            var len = arguments.length;
            for (;++i < len;) {
                /** @type {number} */
                var idx = 0;
                var model = arguments[i];
                for (;(idx = callback(result, model, idx)) > -1;) {
                    that.call(result, idx, 1);
                }
            }
            return result;
        }
        /**
         * @param {Array} obj
         * @return {?}
         */
        function omit(obj) {
            return onSuccess(obj || [], getData(arguments, false, false, 1));
        }
        /**
         * @param {Object} array
         * @param {Object} callback
         * @param {Function} item
         * @return {?}
         */
        function clean(array, callback, item) {
            /** @type {number} */
            var index = -1;
            var length = array ? array.length : 0;
            /** @type {Array} */
            var ret = [];
            callback = expect(callback, item, 3);
            for (;++index < length;) {
                var value = array[index];
                if (callback(value, index, array)) {
                    ret.push(value);
                    that.call(array, index--, 1);
                    length--;
                }
            }
            return ret;
        }
        /**
         * @param {boolean} index
         * @return {?}
         */
        function tail(index) {
            return zip(index, 1);
        }
        /**
         * @param {number} recurring
         * @param {number} opt_attributes
         * @param {Object} fn
         * @return {?}
         */
        function last(recurring, opt_attributes, fn) {
            var tmp = recurring ? recurring.length : 0;
            return tmp ? (fn && ("number" != typeof fn && (map(recurring, opt_attributes, fn) && (opt_attributes = 0, fn = tmp))), slice(recurring, opt_attributes, fn)) : [];
        }
        /**
         * @param {Object} name
         * @param {?} basis
         * @param {Object} model
         * @param {?} obj
         * @return {?}
         */
        function sortedIndex(name, basis, model, obj) {
            var callback = expect(model);
            return callback === render && null == model ? trimDots(name, basis) : build(name, basis, callback(model, obj, 1));
        }
        /**
         * @param {Object} name
         * @param {?} basis
         * @param {Object} value
         * @param {?} node
         * @return {?}
         */
        function _build(name, basis, value, node) {
            var iterator = expect(value);
            return iterator === render && null == value ? trimDots(name, basis, true) : build(name, basis, iterator(value, node, 1), true);
        }
        /**
         * @param {boolean} array
         * @param {number} propName
         * @param {boolean} deepDataAndEvents
         * @return {?}
         */
        function pluck(array, propName, deepDataAndEvents) {
            var length = array ? array.length : 0;
            return length ? ((deepDataAndEvents ? map(array, propName, deepDataAndEvents) : null == propName) && (propName = 1), slice(array, 0, propName < 0 ? 0 : propName)) : [];
        }
        /**
         * @param {boolean} array
         * @param {number} i
         * @param {boolean} callback
         * @return {?}
         */
        function toArray(array, i, callback) {
            var length = array ? array.length : 0;
            return length ? ((callback ? map(array, i, callback) : null == i) && (i = 1), i = length - (+i || 0), slice(array, i < 0 ? 0 : i)) : [];
        }
        /**
         * @param {Object} array
         * @param {?} callback
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function sortBy(array, callback, deepDataAndEvents) {
            var index = array ? array.length : 0;
            if (!index) {
                return[];
            }
            callback = expect(callback, deepDataAndEvents, 3);
            for (;index-- && callback(array[index], index, array);) {
            }
            return slice(array, index + 1);
        }
        /**
         * @param {Object} array
         * @param {?} callback
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function drop(array, callback, deepDataAndEvents) {
            var length = array ? array.length : 0;
            if (!length) {
                return[];
            }
            /** @type {number} */
            var index = -1;
            callback = expect(callback, deepDataAndEvents, 3);
            for (;++index < length && callback(array[index], index, array);) {
            }
            return slice(array, 0, index);
        }
        /**
         * @return {?}
         */
        function stackData() {
            return list(getData(arguments, false, true));
        }
        /**
         * @param {Object} array
         * @param {string} recurring
         * @param {boolean} callback
         * @param {boolean} thisObj
         * @return {?}
         */
        function uniq(array, recurring, callback, thisObj) {
            var length = array ? array.length : 0;
            if (!length) {
                return[];
            }
            if ("boolean" != typeof recurring) {
                if (null != recurring) {
                    /** @type {boolean} */
                    thisObj = callback;
                    callback = map(array, recurring, thisObj) ? null : recurring;
                    /** @type {boolean} */
                    recurring = false;
                }
            }
            var makeIterator = expect();
            return makeIterator === render && null == callback || (callback = makeIterator(callback, thisObj, 3)), recurring && push() == factory ? uniq(array, callback) : list(array, callback);
        }
        /**
         * @param {?} value
         * @return {?}
         */
        function link(value) {
            /** @type {number} */
            var index = -1;
            /** @type {number} */
            var length = (value && (value.length && element(split(value, CB)))) >>> 0;
            var result = call(length);
            for (;++index < length;) {
                result[index] = split(value, callback(index));
            }
            return result;
        }
        /**
         * @param {Object} list
         * @return {?}
         */
        function without(list) {
            return log(list, slice(arguments, 1));
        }
        /**
         * @return {?}
         */
        function onData() {
            /** @type {number} */
            var i = -1;
            /** @type {number} */
            var len = arguments.length;
            for (;++i < len;) {
                var name = arguments[i];
                if (ondata(name) || isClassOf(name)) {
                    var path = path ? log(path, name).concat(log(name, path)) : name
                }
            }
            return path ? list(path) : [];
        }
        /**
         * @return {?}
         */
        function win() {
            /** @type {number} */
            var l = arguments.length;
            var args = call(l);
            for (;l--;) {
                args[l] = arguments[l];
            }
            return link(args);
        }
        /**
         * @param {Object} keys
         * @param {Array} values
         * @return {?}
         */
        function zipObject(keys, values) {
            /** @type {number} */
            var index = -1;
            var length = keys ? keys.length : 0;
            var result = {};
            if (!!length) {
                if (!values) {
                    if (!ondata(keys[0])) {
                        /** @type {Array} */
                        values = [];
                    }
                }
            }
            for (;++index < length;) {
                var key = keys[index];
                if (values) {
                    result[key] = values[index];
                } else {
                    if (key) {
                        result[key[0]] = key[1];
                    }
                }
            }
            return result;
        }
        /**
         * @param {string} optgroup
         * @return {?}
         */
        function chain(optgroup) {
            var value = lodash(optgroup);
            return value.__chain__ = true, value;
        }
        /**
         * @param {?} obj
         * @param {Function} parser
         * @param {?} message
         * @return {?}
         */
        function isNaN(obj, parser, message) {
            return parser.call(message, obj), obj;
        }
        /**
         * @param {Function} elem
         * @param {Function} next_callback
         * @param {?} next_scope
         * @return {?}
         */
        function prev(elem, next_callback, next_scope) {
            return next_callback.call(next_scope, elem);
        }
        /**
         * @return {?}
         */
        function alertObject() {
            return chain(this);
        }
        /**
         * @return {?}
         */
        function reverse() {
            var obj = this.__wrapped__;
            return obj instanceof data ? (this.__actions__.length && (obj = new data(this)), new lodashWrapper(obj.reverse())) : this.thru(function(matched) {
                return matched.reverse();
            });
        }
        /**
         * @return {?}
         */
        function randomString() {
            return this.value() + "";
        }
        /**
         * @return {?}
         */
        function onclick() {
            return copy(this.__wrapped__, this.__actions__);
        }
        /**
         * @param {boolean} data
         * @return {?}
         */
        function addData(data) {
            var result = data ? data.length : 0;
            return fn(result) && (data = (0,eval)(data)), refresh(data, getData(arguments, false, false, 1));
        }
        /**
         * @param {string} obj
         * @param {string} name
         * @param {number} recurring
         * @return {?}
         */
        function contains(obj, name, recurring) {
            var val = obj ? obj.length : 0;
            return fn(val) || (obj = forOwn(obj), val = obj.length), !!val && (recurring = "number" == typeof recurring ? recurring < 0 ? max(val + recurring, 0) : recurring || 0 : 0, "string" == typeof obj || !ondata(obj) && isString(obj) ? recurring < val && obj.indexOf(name, recurring) > -1 : push(obj, name, recurring) > -1);
        }
        /**
         * @param {string} name
         * @param {Function} recurring
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function has(name, recurring, deepDataAndEvents) {
            /** @type {function (Object, Function): ?} */
            var getKey = ondata(name) ? empty : dispatch;
            return "function" == typeof recurring && "undefined" == typeof deepDataAndEvents || (recurring = expect(recurring, deepDataAndEvents, 3)), getKey(name, recurring);
        }
        /**
         * @param {string} name
         * @param {Function} recurring
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function filter(name, recurring, deepDataAndEvents) {
            /** @type {function (Array, Function): ?} */
            var func = ondata(name) ? getSize : onComplete;
            return recurring = expect(recurring, deepDataAndEvents, 3), func(name, recurring);
        }
        /**
         * @param {string} name
         * @param {?} value
         * @param {Object} index
         * @return {?}
         */
        function find(name, value, index) {
            if (ondata(name)) {
                var key = iterator(name, value, index);
                return key > -1 ? name[key] : options;
            }
            return value = expect(value, index, 3), test(name, value, resolve);
        }
        /**
         * @param {string} name
         * @param {Function} recurring
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function hasClass(name, recurring, deepDataAndEvents) {
            return recurring = expect(recurring, deepDataAndEvents, 3), test(name, recurring, toggle);
        }
        /**
         * @param {string} object
         * @param {string} input
         * @return {?}
         */
        function defaults(object, input) {
            return find(object, compile(input));
        }
        /**
         * @param {Function} opt_attributes
         * @param {Function} name
         * @param {Object} callback
         * @return {?}
         */
        function initialize(opt_attributes, name, callback) {
            return "function" == typeof name && ("undefined" == typeof callback && ondata(opt_attributes)) ? each(opt_attributes, name) : resolve(opt_attributes, parse(name, callback, 3));
        }
        /**
         * @param {string} name
         * @param {Function} options
         * @param {Object} callback
         * @return {?}
         */
        function setOptions(name, options, callback) {
            return "function" == typeof options && ("undefined" == typeof callback && ondata(name)) ? resize(name, options) : toggle(name, parse(options, callback, 3));
        }
        /**
         * @param {boolean} data
         * @param {string} type
         * @return {?}
         */
        function trigger(data, type) {
            return remove(data, type, slice(arguments, 2));
        }
        /**
         * @param {string} name
         * @param {Function} recurring
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function options(name, recurring, deepDataAndEvents) {
            /** @type {function (Array, ?): ?} */
            var trimDots = ondata(name) ? split : enter;
            return recurring = expect(recurring, deepDataAndEvents, 3), trimDots(name, recurring);
        }
        /**
         * @param {string} optgroup
         * @param {(number|string)} data
         * @return {?}
         */
        function noop(optgroup, data) {
            return options(optgroup, callback(data + ""));
        }
        /**
         * @param {string} name
         * @param {Function} data
         * @param {Array} isXML
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function proceed(name, data, isXML, deepDataAndEvents) {
            /** @type {Function} */
            var next = ondata(name) ? attr : index;
            return next(name, expect(data, deepDataAndEvents, 4), isXML, arguments.length < 3, resolve);
        }
        /**
         * @param {string} optgroup
         * @param {Function} recurring
         * @param {Array} isXML
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function reduceRight(optgroup, recurring, isXML, deepDataAndEvents) {
            /** @type {Function} */
            var getter = ondata(optgroup) ? access : index;
            return getter(optgroup, expect(recurring, deepDataAndEvents, 4), isXML, arguments.length < 3, toggle);
        }
        /**
         * @param {string} name
         * @param {Function} recurring
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function noConflict(name, recurring, deepDataAndEvents) {
            /** @type {function (Array, Function): ?} */
            var trimDots = ondata(name) ? getSize : onComplete;
            return recurring = expect(recurring, deepDataAndEvents, 3), trimDots(name, function(deepDataAndEvents, opt_obj2, walkers) {
                return!recurring(deepDataAndEvents, opt_obj2, walkers);
            });
        }
        /**
         * @param {string} val
         * @param {?} args
         * @param {boolean} callback
         * @return {?}
         */
        function include(val, args, callback) {
            if (callback ? map(val, args, callback) : null == args) {
                val = (0,eval)(val);
                var paswordLength = val.length;
                return paswordLength > 0 ? val[splice(0, paswordLength - 1)] : options;
            }
            var s = shuffle(val);
            return s.length = min(args < 0 ? 0 : +args || 0, s.length), s;
        }
        /**
         * @param {(Array|string)} obj
         * @return {?}
         */
        function shuffle(obj) {
            obj = (0,eval)(obj);
            /** @type {number} */
            var i = -1;
            var n = obj.length;
            var o = call(n);
            for (;++i < n;) {
                var j = splice(0, i);
                if (i != j) {
                    o[i] = o[j];
                }
                o[j] = obj[i];
            }
            return o;
        }
        /**
         * @param {boolean} collection
         * @return {?}
         */
        function size(collection) {
            var start = collection ? collection.length : 0;
            return fn(start) ? start : keys(collection).length;
        }
        /**
         * @param {string} name
         * @param {Function} value
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function validate(name, value, deepDataAndEvents) {
            /** @type {function (Array, Function): ?} */
            var next = ondata(name) ? insert : onDeviceReady;
            return "function" == typeof value && "undefined" == typeof deepDataAndEvents || (value = expect(value, deepDataAndEvents, 3)), next(name, value);
        }
        /**
         * @param {string} name
         * @param {Function} recurring
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function get(name, recurring, deepDataAndEvents) {
            /** @type {number} */
            var index = -1;
            var node = name ? name.length : 0;
            var result = fn(node) ? call(node) : [];
            return deepDataAndEvents && (map(name, recurring, deepDataAndEvents) && (recurring = null)), recurring = expect(recurring, deepDataAndEvents, 3), resolve(name, function(value, key, collection) {
                result[++index] = {
                    criteria : recurring(value, key, collection),
                    index : index,
                    value : value
                };
            }), filter(result, e);
        }
        /**
         * @param {boolean} val
         * @return {?}
         */
        function reduce(val) {
            /** @type {Arguments} */
            var args = arguments;
            if (args.length > 3) {
                if (map(args[1], args[2], args[3])) {
                    /** @type {Array} */
                    args = [val, args[1]];
                }
            }
            /** @type {number} */
            var index = -1;
            var node = val ? val.length : 0;
            var parts = getData(args, false, false, 1);
            var result = fn(node) ? call(node) : [];
            return resolve(val, function(obj, dataAndEvents, deepDataAndEvents) {
                var i = parts.length;
                var r = call(i);
                for (;i--;) {
                    r[i] = null == obj ? options : obj[parts[i]];
                }
                result[++index] = {
                    criteria : r,
                    index : index,
                    value : obj
                };
            }), filter(result, next);
        }
        /**
         * @param {string} optgroup
         * @param {string} input
         * @return {?}
         */
        function onChange(optgroup, input) {
            return filter(optgroup, compile(input));
        }
        /**
         * @param {(number|string)} name
         * @param {(number|string)} klass
         * @return {?}
         */
        function after(name, klass) {
            if (!isFunction(klass)) {
                if (!isFunction(name)) {
                    throw new Stream(filename);
                }
                var fullName = name;
                /** @type {(number|string)} */
                name = klass;
                klass = fullName;
            }
            return name = f(name = +name) ? name : 0, function() {
                if (--name < 1) {
                    return klass.apply(this, arguments);
                }
            };
        }
        /**
         * @param {string} item
         * @param {Object} recurring
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function activate(item, recurring, deepDataAndEvents) {
            return deepDataAndEvents && (map(item, recurring, deepDataAndEvents) && (recurring = null)), recurring = item && null == recurring ? item.length : max(+recurring || 0, 0), invoke(item, z, null, null, null, null, recurring);
        }
        /**
         * @param {string} name
         * @param {Object} klass
         * @return {?}
         */
        function wrap(name, klass) {
            var returnValue;
            if (!isFunction(klass)) {
                if (!isFunction(name)) {
                    throw new Stream(filename);
                }
                var fullName = name;
                name = klass;
                klass = fullName;
            }
            return function() {
                return--name > 0 ? returnValue = klass.apply(this, arguments) : klass = null, returnValue;
            };
        }
        /**
         * @param {Object} recurring
         * @param {Object} fn
         * @return {?}
         */
        function watch(recurring, fn) {
            /** @type {number} */
            var QUnit = j;
            if (arguments.length > 2) {
                var args = slice(arguments, 2);
                var applyArgs = fail(args, watch.placeholder);
                QUnit |= oldconfig;
            }
            return invoke(recurring, QUnit, fn, args, applyArgs);
        }
        /**
         * @param {string} object
         * @return {?}
         */
        function bindAll(object) {
            return freeze(object, arguments.length > 1 ? getData(arguments, false, false, 1) : functions(object));
        }
        /**
         * @param {Function} locals
         * @param {string} func
         * @return {?}
         */
        function partial(locals, func) {
            /** @type {number} */
            var QUnit = j | mask;
            if (arguments.length > 2) {
                var args = slice(arguments, 2);
                var recurring = fail(args, partial.placeholder);
                QUnit |= oldconfig;
            }
            return invoke(func, QUnit, locals, args, recurring);
        }
        /**
         * @param {string} type
         * @param {Object} func
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function handler(type, func, deepDataAndEvents) {
            if (deepDataAndEvents) {
                if (map(type, func, deepDataAndEvents)) {
                    /** @type {null} */
                    func = null;
                }
            }
            var el = invoke(type, QUnit, null, null, null, null, null, func);
            return el.placeholder = handler.placeholder, el;
        }
        /**
         * @param {string} item
         * @param {Object} walkers
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function tick(item, walkers, deepDataAndEvents) {
            if (deepDataAndEvents) {
                if (map(item, walkers, deepDataAndEvents)) {
                    /** @type {null} */
                    walkers = null;
                }
            }
            var el = invoke(item, tag, null, null, null, null, null, walkers);
            return el.placeholder = tick.placeholder, el;
        }
        /**
         * @param {string} name
         * @param {number} deepDataAndEvents
         * @param {Object} options
         * @return {?}
         */
        function debounce(name, deepDataAndEvents, options) {
            /**
             * @return {undefined}
             */
            function cancelFn() {
                if (timeoutId) {
                    Q(timeoutId);
                }
                if (callback) {
                    Q(callback);
                }
                callback = timeoutId = trailingCall = options;
            }
            /**
             * @return {undefined}
             */
            function delayed() {
                /** @type {number} */
                var timeout = deepDataAndEvents - (now() - cur);
                if (timeout <= 0 || timeout > deepDataAndEvents) {
                    if (callback) {
                        Q(callback);
                    }
                    var isCalled = trailingCall;
                    callback = timeoutId = trailingCall = options;
                    if (isCalled) {
                        prev = now();
                        o = name.apply(object, args);
                        if (!timeoutId) {
                            if (!callback) {
                                /** @type {null} */
                                args = object = null;
                            }
                        }
                    }
                } else {
                    timeoutId = setTimer(delayed, timeout);
                }
            }
            /**
             * @return {undefined}
             */
            function done() {
                if (timeoutId) {
                    Q(timeoutId);
                }
                callback = timeoutId = trailingCall = options;
                if (trailing || d !== deepDataAndEvents) {
                    prev = now();
                    o = name.apply(object, args);
                    if (!timeoutId) {
                        if (!callback) {
                            /** @type {null} */
                            args = object = null;
                        }
                    }
                }
            }
            /**
             * @return {?}
             */
            function wrapped() {
                if (args = arguments, cur = now(), object = this, trailingCall = trailing && (timeoutId || !leading), d === false) {
                    var leadingCall = leading && !timeoutId
                } else {
                    if (!callback) {
                        if (!leading) {
                            prev = cur;
                        }
                    }
                    /** @type {number} */
                    var ms = d - (cur - prev);
                    /** @type {boolean} */
                    var a = ms <= 0 || ms > d;
                    if (a) {
                        if (callback) {
                            callback = Q(callback);
                        }
                        prev = cur;
                        o = name.apply(object, args);
                    } else {
                        if (!callback) {
                            callback = setTimer(done, ms);
                        }
                    }
                }
                return a && timeoutId ? timeoutId = Q(timeoutId) : timeoutId || (deepDataAndEvents === d || (timeoutId = setTimer(delayed, deepDataAndEvents))), leadingCall && (a = true, o = name.apply(object, args)), !a || (timeoutId || (callback || (args = object = null))), o;
            }
            var args;
            var callback;
            var o;
            var cur;
            var object;
            var timeoutId;
            var trailingCall;
            /** @type {number} */
            var prev = 0;
            /** @type {boolean} */
            var d = false;
            /** @type {boolean} */
            var trailing = true;
            if (!isFunction(name)) {
                throw new Stream(filename);
            }
            if (deepDataAndEvents = deepDataAndEvents < 0 ? 0 : deepDataAndEvents, options === true) {
                /** @type {boolean} */
                var leading = true;
                /** @type {boolean} */
                trailing = false;
            } else {
                if (func(options)) {
                    leading = options.leading;
                    d = "maxWait" in options && max(+options.maxWait || 0, deepDataAndEvents);
                    trailing = "trailing" in options ? options.trailing : trailing;
                }
            }
            return wrapped.cancel = cancelFn, wrapped;
        }
        /**
         * @param {string} name
         * @return {?}
         */
        function enabled(name) {
            return define(name, 1, arguments, 1);
        }
        /**
         * @param {string} name
         * @param {number} deepDataAndEvents
         * @return {?}
         */
        function addText(name, deepDataAndEvents) {
            return define(name, deepDataAndEvents, arguments, 2);
        }
        /**
         * @return {?}
         */
        function delegate() {
            /** @type {Arguments} */
            var functions = arguments;
            /** @type {number} */
            var length = functions.length;
            if (!length) {
                return function() {
                };
            }
            if (!empty(functions, isFunction)) {
                throw new Stream(filename);
            }
            return function() {
                /** @type {number} */
                var i = 0;
                var button = functions[i].apply(this, arguments);
                for (;++i < length;) {
                    button = functions[i].call(this, button);
                }
                return button;
            };
        }
        /**
         * @return {?}
         */
        function compose() {
            /** @type {Arguments} */
            var functions = arguments;
            /** @type {number} */
            var fromIndex = functions.length - 1;
            if (fromIndex < 0) {
                return function() {
                };
            }
            if (!empty(functions, isFunction)) {
                throw new Stream(filename);
            }
            return function() {
                /** @type {number} */
                var i = fromIndex;
                var result = functions[i].apply(this, arguments);
                for (;i--;) {
                    result = functions[i].call(this, result);
                }
                return result;
            };
        }
        /**
         * @param {string} optgroup
         * @param {string} resolver
         * @return {?}
         */
        function memoize(optgroup, resolver) {
            if (!isFunction(optgroup) || resolver && !isFunction(resolver)) {
                throw new Stream(filename);
            }
            /**
             * @return {?}
             */
            var require = function() {
                var cache = require.cache;
                var ol = resolver ? resolver.apply(this, arguments) : arguments[0];
                if (cache.has(ol)) {
                    return cache.get(ol);
                }
                var pdataCur = optgroup.apply(this, arguments);
                return cache.set(ol, pdataCur), pdataCur;
            };
            return require.cache = new memoize.Cache, require;
        }
        /**
         * @param {string} optgroup
         * @return {?}
         */
        function once(optgroup) {
            if (!isFunction(optgroup)) {
                throw new Stream(filename);
            }
            return function() {
                return!optgroup.apply(this, arguments);
            };
        }
        /**
         * @param {string} name
         * @return {?}
         */
        function atom(name) {
            return wrap(name, 2);
        }
        /**
         * @param {string} callback
         * @return {?}
         */
        function node(callback) {
            var args = slice(arguments, 1);
            var recurring = fail(args, node.placeholder);
            return invoke(callback, oldconfig, null, args, recurring);
        }
        /**
         * @param {string} arg
         * @return {?}
         */
        function exec(arg) {
            var args = slice(arguments, 1);
            var recurring = fail(args, exec.placeholder);
            return invoke(arg, c, null, args, recurring);
        }
        /**
         * @param {string} callback
         * @return {?}
         */
        function stop(callback) {
            var expectedArgs = getData(arguments, false, false, 1);
            return invoke(callback, right, null, null, null, expectedArgs);
        }
        /**
         * @param {string} optgroup
         * @param {number} deepDataAndEvents
         * @param {Object} options
         * @return {?}
         */
        function throttle(optgroup, deepDataAndEvents, options) {
            /** @type {boolean} */
            var leading = true;
            /** @type {boolean} */
            var trailing = true;
            if (!isFunction(optgroup)) {
                throw new Stream(filename);
            }
            return options === false ? leading = false : func(options) && (leading = "leading" in options ? !!options.leading : leading, trailing = "trailing" in options ? !!options.trailing : trailing), debounceOptions.leading = leading, debounceOptions.maxWait = +deepDataAndEvents, debounceOptions.trailing = trailing, debounce(optgroup, deepDataAndEvents, debounceOptions);
        }
        /**
         * @param {?} opt_data
         * @param {string} arg
         * @return {?}
         */
        function notify(opt_data, arg) {
            return arg = null == arg ? identity : arg, invoke(arg, oldconfig, null, [opt_data], []);
        }
        /**
         * @param {boolean} dataAndEvents
         * @param {boolean} deepDataAndEvents
         * @param {?} val
         * @param {?} options
         * @return {?}
         */
        function configure(dataAndEvents, deepDataAndEvents, val, options) {
            return "boolean" != typeof deepDataAndEvents && (null != deepDataAndEvents && (options = val, val = map(dataAndEvents, deepDataAndEvents, options) ? null : deepDataAndEvents, deepDataAndEvents = false)), val = "function" == typeof val && parse(val, options, 1), set(dataAndEvents, deepDataAndEvents, val);
        }
        /**
         * @param {string} tag
         * @param {Object} val
         * @param {Object} options
         * @return {?}
         */
        function end(tag, val, options) {
            return val = "function" == typeof val && parse(val, options, 1), set(tag, true, val);
        }
        /**
         * @param {string} name
         * @return {?}
         */
        function isClassOf(name) {
            var opts = func(name) ? name.length : options;
            return fn(opts) && eventSplitter.call(name) == number || false;
        }
        /**
         * @param {boolean} name
         * @return {?}
         */
        function isBoolean(name) {
            return name === true || (name === false || (func(name) && eventSplitter.call(name) == i || false));
        }
        /**
         * @param {?} value
         * @return {?}
         */
        function isPlainObject(value) {
            return func(value) && eventSplitter.call(value) == numberClass || false;
        }
        /**
         * @param {?} name
         * @return {?}
         */
        function extend(name) {
            return name && (1 === name.nodeType && (func(name) && eventSplitter.call(name).indexOf("Element") > -1)) || false;
        }
        /**
         * @param {string} name
         * @return {?}
         */
        function isEmpty(name) {
            if (null == name) {
                return true;
            }
            var t = name.length;
            return fn(t) && (ondata(name) || (isString(name) || (isClassOf(name) || func(name) && isFunction(name.splice)))) ? !t : !keys(name).length;
        }
        /**
         * @param {?} a
         * @param {?} b
         * @param {boolean} callback
         * @param {Object} response
         * @return {?}
         */
        function handleResponse(a, b, callback, response) {
            if (callback = "function" == typeof callback && parse(callback, response, 3), !callback && (stringify(a) && stringify(b))) {
                return a === b;
            }
            var tag = callback ? callback(a, b) : options;
            return "undefined" == typeof tag ? success(a, b, callback) : !!tag;
        }
        /**
         * @param {(Error|string)} name
         * @return {?}
         */
        function ready(name) {
            return func(name) && ("string" == typeof name.message && eventSplitter.call(name) == location) || false;
        }
        /**
         * @param {string} name
         * @return {?}
         */
        function isFunction(name) {
            return "function" == typeof name || false;
        }
        /**
         * @param {?} name
         * @return {?}
         */
        function func(name) {
            /** @type {string} */
            var $s = typeof name;
            return "function" == $s || (name && "object" == $s || false);
        }
        /**
         * @param {number} b
         * @param {string} object
         * @param {Object} v
         * @param {Object} parent
         * @return {?}
         */
        function merge(b, object, v, parent) {
            var props = keys(object);
            var i = props.length;
            if (v = "function" == typeof v && parse(v, parent, 3), !v && 1 == i) {
                var prop = props[0];
                var value = object[prop];
                if (stringify(value)) {
                    return null != b && (value === b[prop] && hasOwn.call(b, prop));
                }
            }
            var r = call(i);
            var args = call(i);
            for (;i--;) {
                value = r[i] = object[props[i]];
                args[i] = stringify(value);
            }
            return clear(b, props, r, args, v);
        }
        /**
         * @param {number} obj
         * @return {?}
         */
        function onError(obj) {
            return delay(obj) && obj != +obj;
        }
        /**
         * @param {?} name
         * @return {?}
         */
        function isNumber(name) {
            return null != name && (eventSplitter.call(name) == k ? nodes.test(toString.call(name)) : func(name) && rparentsprev.test(name) || false);
        }
        /**
         * @param {number} obj
         * @return {?}
         */
        function isNull(obj) {
            return null === obj;
        }
        /**
         * @param {number} name
         * @return {?}
         */
        function delay(name) {
            return "number" == typeof name || (func(name) && eventSplitter.call(name) == input || false);
        }
        /**
         * @param {(Error|string)} name
         * @return {?}
         */
        function isRegExp(name) {
            return func(name) && eventSplitter.call(name) == h || false;
        }
        /**
         * @param {string} name
         * @return {?}
         */
        function isString(name) {
            return "string" == typeof name || (func(name) && eventSplitter.call(name) == s || false);
        }
        /**
         * @param {string} name
         * @return {?}
         */
        function isArray(name) {
            return func(name) && (fn(name.length) && args[eventSplitter.call(name)]) || false;
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        function isUndefined(obj) {
            return "undefined" == typeof obj;
        }
        /**
         * @param {boolean} collection
         * @return {?}
         */
        function some(collection) {
            var oldconfig = collection ? collection.length : 0;
            return fn(oldconfig) ? oldconfig ? promote(collection) : [] : forOwn(collection);
        }
        /**
         * @param {string} res
         * @return {?}
         */
        function done(res) {
            return cb(res, forEach(res));
        }
        /**
         * @param {string} object
         * @param {Object} name
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function result(object, name, deepDataAndEvents) {
            var id = hasOwnProperty(object);
            return deepDataAndEvents && (map(object, name, deepDataAndEvents) && (name = null)), name ? cb(name, id, keys(name)) : id;
        }
        /**
         * @param {number} n
         * @return {?}
         */
        function times(n) {
            if (null == n) {
                return n;
            }
            var args = promote(arguments);
            return args.push(value), handle.apply(options, args);
        }
        /**
         * @param {string} obj
         * @param {Function} recurring
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function json(obj, recurring, deepDataAndEvents) {
            return recurring = expect(recurring, deepDataAndEvents, 3), test(obj, recurring, check, true);
        }
        /**
         * @param {string} name
         * @param {Function} recurring
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function setModel(name, recurring, deepDataAndEvents) {
            return recurring = expect(recurring, deepDataAndEvents, 3), test(name, recurring, post, true);
        }
        /**
         * @param {?} e
         * @param {Function} data
         * @param {Object} callback
         * @return {?}
         */
        function onreadystatechange(e, data, callback) {
            return "function" == typeof data && "undefined" == typeof callback || (data = parse(data, callback, 3)), successCallback(e, data, forEach);
        }
        /**
         * @param {string} model
         * @param {Function} node
         * @param {Object} parent
         * @return {?}
         */
        function make(model, node, parent) {
            return node = parse(node, parent, 3), getValue(model, node, forEach);
        }
        /**
         * @param {?} options
         * @param {Function} url
         * @param {Object} last
         * @return {?}
         */
        function open(options, url, last) {
            return "function" == typeof url && "undefined" == typeof last || (url = parse(url, last, 3)), check(options, url);
        }
        /**
         * @param {string} selector
         * @param {Function} url
         * @param {Object} options
         * @return {?}
         */
        function play(selector, url, options) {
            return url = parse(url, options, 3), getValue(selector, url, keys);
        }
        /**
         * @param {string} fn
         * @return {?}
         */
        function functions(fn) {
            return join(fn, forEach(fn));
        }
        /**
         * @param {string} object
         * @param {?} n
         * @return {?}
         */
        function isArguments(object, n) {
            return!!object && hasOwn.call(object, n);
        }
        /**
         * @param {string} name
         * @param {Object} recurring
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function expand(name, recurring, deepDataAndEvents) {
            if (deepDataAndEvents) {
                if (map(name, recurring, deepDataAndEvents)) {
                    /** @type {null} */
                    recurring = null;
                }
            }
            /** @type {number} */
            var index = -1;
            var props = keys(name);
            var length = props.length;
            var params = {};
            for (;++index < length;) {
                var value = props[index];
                var key = name[value];
                if (recurring) {
                    if (hasOwn.call(params, key)) {
                        params[key].push(value);
                    } else {
                        /** @type {Array} */
                        params[key] = [value];
                    }
                } else {
                    params[key] = value;
                }
            }
            return params;
        }
        /**
         * @param {string} optgroup
         * @return {?}
         */
        function forEach(optgroup) {
            if (null == optgroup) {
                return[];
            }
            if (!func(optgroup)) {
                optgroup = $(optgroup);
            }
            var elem = optgroup.length;
            elem = elem && (fn(elem) && ((ondata(optgroup) || support.nonEnumArgs && isClassOf(optgroup)) && elem)) || 0;
            var c = optgroup.constructor;
            /** @type {number} */
            var i = -1;
            /** @type {boolean} */
            var e = "function" == typeof c && c.prototype == optgroup;
            var r = call(elem);
            /** @type {boolean} */
            var keepData = elem > 0;
            for (;++i < elem;) {
                /** @type {string} */
                r[i] = i + "";
            }
            var value;
            for (value in optgroup) {
                if (!(keepData && append(value, elem))) {
                    if (!("constructor" == value && (e || !hasOwn.call(optgroup, value)))) {
                        r.push(value);
                    }
                }
            }
            return r;
        }
        /**
         * @param {?} options
         * @param {?} callback
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function poll(options, callback, deepDataAndEvents) {
            var output = {};
            return callback = expect(callback, deepDataAndEvents, 3), check(options, function(val, key, obj) {
                output[key] = callback(val, key, obj);
            }), output;
        }
        /**
         * @param {string} params
         * @param {?} url
         * @param {Object} parent
         * @return {?}
         */
        function match(params, url, parent) {
            if (null == params) {
                return{};
            }
            if ("function" != typeof url) {
                var type = split(getData(arguments, false, false, 1), String);
                return every(params, log(forEach(params), type));
            }
            return url = parse(url, parent, 3), message(params, function($, deepDataAndEvents, opt_obj2) {
                return!url($, deepDataAndEvents, opt_obj2);
            });
        }
        /**
         * @param {string} obj
         * @return {?}
         */
        function pairs(obj) {
            /** @type {number} */
            var index = -1;
            var props = keys(obj);
            var length = props.length;
            var result = call(length);
            for (;++index < length;) {
                var key = props[index];
                /** @type {Array} */
                result[index] = [key, obj[key]];
            }
            return result;
        }
        /**
         * @param {string} value
         * @param {?} b
         * @param {Object} response
         * @return {?}
         */
        function errorCallback(value, b, response) {
            return null == value ? {} : "function" == typeof b ? message(value, parse(b, response, 3)) : every(value, getData(arguments, false, false, 1));
        }
        /**
         * @param {Object} context
         * @param {string} exports
         * @param {?} tmpl
         * @return {?}
         */
        function register(context, exports, tmpl) {
            var template = null == context ? options : context[exports];
            return "undefined" == typeof template && (template = tmpl), isFunction(template) ? template.call(context) : template;
        }
        /**
         * @param {string} name
         * @param {Function} recurring
         * @param {Object} deepDataAndEvents
         * @param {Object} dataAndEvents
         * @return {?}
         */
        function clone(name, recurring, deepDataAndEvents, dataAndEvents) {
            var usePrototypeKeys = ondata(name) || isArray(name);
            if (recurring = expect(recurring, dataAndEvents, 4), null == deepDataAndEvents) {
                if (usePrototypeKeys || func(name)) {
                    var constructor = name.constructor;
                    deepDataAndEvents = usePrototypeKeys ? ondata(name) ? new constructor : [] : hasOwnProperty("function" == typeof constructor && constructor.prototype);
                } else {
                    deepDataAndEvents = {};
                }
            }
            return(usePrototypeKeys ? each : check)(name, function(opt_obj2, walkers, isXML) {
                return recurring(deepDataAndEvents, opt_obj2, walkers, isXML);
            }), deepDataAndEvents;
        }
        /**
         * @param {string} object
         * @return {?}
         */
        function forOwn(object) {
            return read(object, keys(object));
        }
        /**
         * @param {string} code
         * @return {?}
         */
        function save(code) {
            return read(code, forEach(code));
        }
        /**
         * @param {number} a
         * @param {number} x
         * @param {number} deepDataAndEvents
         * @return {?}
         */
        function random(a, x, deepDataAndEvents) {
            if (deepDataAndEvents) {
                if (map(a, x, deepDataAndEvents)) {
                    /** @type {null} */
                    x = deepDataAndEvents = null;
                }
            }
            /** @type {boolean} */
            var relative = null == a;
            /** @type {boolean} */
            var sAxis = null == x;
            if (null == deepDataAndEvents && (sAxis && "boolean" == typeof a ? (deepDataAndEvents = a, a = 1) : "boolean" == typeof x && (deepDataAndEvents = x, sAxis = true)), relative && (sAxis && (x = 1, sAxis = false)), a = +a || 0, sAxis ? (x = a, a = 0) : x = +x || 0, deepDataAndEvents || (a % 1 || x % 1)) {
                var rand = nativeRandom();
                return min(a + rand * (x - a + parseFloat("1e-" + ((rand + "").length - 1))), x);
            }
            return splice(a, x);
        }
        /**
         * @param {string} input
         * @return {?}
         */
        function capitalize(input) {
            return input = fn(input), input && input.charAt(0).toUpperCase() + input.slice(1);
        }
        /**
         * @param {string} result
         * @return {?}
         */
        function onStart(result) {
            return result = fn(result), result && result.replace(rclass, value);
        }
        /**
         * @param {string} response
         * @param {string} res
         * @param {number} recurring
         * @return {?}
         */
        function destroy(response, res, recurring) {
            response = fn(response);
            res += "";
            var len = response.length;
            return recurring = ("undefined" == typeof recurring ? len : min(recurring < 0 ? 0 : +recurring || 0, len)) - res.length, recurring >= 0 && response.indexOf(res, recurring) == recurring;
        }
        /**
         * @param {string} val
         * @return {?}
         */
        function url(val) {
            return val = fn(val), val && check.test(val) ? val.replace(rreturn, stack) : val;
        }
        /**
         * @param {string} value
         * @return {?}
         */
        function trim(value) {
            return value = fn(value), value && rchecked.test(value) ? value.replace(r20, "\\$&") : value;
        }
        /**
         * @param {string} result
         * @param {number} d
         * @param {string} data
         * @return {?}
         */
        function error(result, d, data) {
            result = fn(result);
            /** @type {number} */
            d = +d;
            var a = result.length;
            if (a >= d || !f(d)) {
                return result;
            }
            /** @type {number} */
            var half = (d - a) / 2;
            var attributes = floor(half);
            var camelKey = ceil(half);
            return data = escape("", camelKey, data), data.slice(0, attributes) + result + data;
        }
        /**
         * @param {Object} data
         * @param {number} subKey
         * @param {string} boundary
         * @return {?}
         */
        function findValueCallback(data, subKey, boundary) {
            return data = fn(data), data && escape(data, subKey, boundary) + data;
        }
        /**
         * @param {Object} result
         * @param {number} subKey
         * @param {string} ms
         * @return {?}
         */
        function time(result, subKey, ms) {
            return result = fn(result), result && result + escape(result, subKey, ms);
        }
        /**
         * @param {string} str
         * @param {number} recurring
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function decode(str, recurring, deepDataAndEvents) {
            return deepDataAndEvents && (map(str, recurring, deepDataAndEvents) && (recurring = 0)), parseInt(str, recurring);
        }
        /**
         * @param {string} result
         * @param {number} i
         * @return {?}
         */
        function close(result, i) {
            /** @type {string} */
            var _result = "";
            if (result = fn(result), i = +i, i < 1 || (!result || !f(i))) {
                return _result;
            }
            do {
                if (i % 2) {
                    _result += result;
                }
                i = floor(i / 2);
                result += result;
            } while (i);
            return _result;
        }
        /**
         * @param {string} input
         * @param {Object} item
         * @param {number} index
         * @return {?}
         */
        function up(input, item, index) {
            return input = fn(input), index = null == index ? 0 : min(index < 0 ? 0 : +index || 0, input.length), input.lastIndexOf(item, index) == index;
        }
        /**
         * @param {string} name
         * @param {Function} recurring
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function template(name, recurring, deepDataAndEvents) {
            var pdataCur = lodash.templateSettings;
            if (deepDataAndEvents) {
                if (map(name, recurring, deepDataAndEvents)) {
                    /** @type {null} */
                    recurring = deepDataAndEvents = null;
                }
            }
            name = fn(name);
            recurring = setup(setup({}, deepDataAndEvents || recurring), pdataCur, addEventListener);
            var charset;
            var isEvaluating;
            var node = setup(setup({}, recurring.imports), pdataCur.imports, addEventListener);
            var element = keys(node);
            var args = read(node, element);
            /** @type {number} */
            var index = 0;
            var interpolate = recurring.interpolate || reNoMatch;
            /** @type {string} */
            var source = "__p += '";
            var nodes = require((recurring.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (recurring.evaluate || reNoMatch).source + "|$", "g");
            /** @type {string} */
            var protocol = "//# sourceURL=" + ("sourceURL" in recurring ? recurring.sourceURL : "lodash.templateSources[" + ++Ia + "]") + "\n";
            name.replace(nodes, function(match, dataAndEvents, from, doc, deepDataAndEvents, offset) {
                return from || (from = doc), source += name.slice(index, offset).replace(escaper, escapeStringChar), dataAndEvents && (charset = true, source += "' +\n__e(" + dataAndEvents + ") +\n'"), deepDataAndEvents && (isEvaluating = true, source += "';\n" + deepDataAndEvents + ";\n__p += '"), from && (source += "' +\n((__t = (" + from + ")) == null ? '' : __t) +\n'"), index = offset + match.length, match;
            });
            source += "';\n";
            var err = recurring.variable;
            if (!err) {
                /** @type {string} */
                source = "with (obj) {\n" + source + "\n}\n";
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(rSlash, "$1").replace(badChars, "$1;");
            /** @type {string} */
            source = "function(" + (err || "obj") + ") {\n" + (err ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (charset ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var e = tryIt(function() {
                return one(element, protocol + "return " + source).apply(options, args);
            });
            if (e.source = source, ready(e)) {
                throw e;
            }
            return e;
        }
        /**
         * @param {string} obj
         * @param {string} name
         * @param {boolean} callback
         * @return {?}
         */
        function _parse(obj, name, callback) {
            /** @type {string} */
            var result = obj;
            return(obj = fn(obj)) ? (callback ? map(result, name, callback) : null == name) ? obj.slice(template(obj), each(obj) + 1) : (name += "", obj.slice(parse(obj, name), cb(obj, name) + 1)) : obj;
        }
        /**
         * @param {string} response
         * @param {(number|string)} o
         * @param {boolean} callback
         * @return {?}
         */
        function onload(response, o, callback) {
            /** @type {string} */
            var result = response;
            return response = fn(response), response ? (callback ? map(result, o, callback) : null == o) ? response.slice(template(response)) : response.slice(parse(response, o + "")) : response;
        }
        /**
         * @param {string} obj
         * @param {(number|string)} x
         * @param {boolean} deepDataAndEvents
         * @return {?}
         */
        function traverse(obj, x, deepDataAndEvents) {
            /** @type {string} */
            var me = obj;
            return obj = fn(obj), obj ? (deepDataAndEvents ? map(me, x, deepDataAndEvents) : null == x) ? obj.slice(0, each(obj) + 1) : obj.slice(0, cb(obj, x + "") + 1) : obj;
        }
        /**
         * @param {string} result
         * @param {Object} options
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function run(result, options, deepDataAndEvents) {
            if (deepDataAndEvents) {
                if (map(result, options, deepDataAndEvents)) {
                    /** @type {null} */
                    options = null;
                }
            }
            /** @type {number} */
            var max = size;
            /** @type {string} */
            var str = barfoobarbazbar;
            if (null != options) {
                if (func(options)) {
                    var value = "separator" in options ? options.separator : value;
                    /** @type {number} */
                    max = "length" in options ? +options.length || 0 : max;
                    str = "omission" in options ? fn(options.omission) : str;
                } else {
                    /** @type {number} */
                    max = +options || 0;
                }
            }
            if (result = fn(result), max >= result.length) {
                return result;
            }
            /** @type {number} */
            var recurring = max - str.length;
            if (recurring < 1) {
                return str;
            }
            var url = result.slice(0, recurring);
            if (null == value) {
                return url + str;
            }
            if (isRegExp(value)) {
                if (result.slice(recurring).search(value)) {
                    var data;
                    var pos;
                    var elem = result.slice(0, recurring);
                    if (!value.global) {
                        value = require(value.source, (rtagName.exec(value) || "") + "g");
                    }
                    /** @type {number} */
                    value.lastIndex = 0;
                    for (;data = value.exec(elem);) {
                        pos = data.index;
                    }
                    url = url.slice(0, null == pos ? recurring : pos);
                }
            } else {
                if (result.indexOf(value, recurring) != recurring) {
                    var len = url.lastIndexOf(value);
                    if (len > -1) {
                        url = url.slice(0, len);
                    }
                }
            }
            return url + str;
        }
        /**
         * @param {string} val
         * @return {?}
         */
        function unescape(val) {
            return val = fn(val), val && rbrace.test(val) ? val.replace(rCRLF, lookupEscape) : val;
        }
        /**
         * @param {string} result
         * @param {Object} data
         * @param {Object} deepDataAndEvents
         * @return {?}
         */
        function finish(result, data, deepDataAndEvents) {
            return deepDataAndEvents && (map(result, data, deepDataAndEvents) && (data = null)), result = fn(result), result.match(data || params) || [];
        }
        /**
         * @param {Function} f
         * @return {?}
         */
        function tryIt(f) {
            try {
                return f();
            } catch (alpha) {
                return ready(alpha) ? alpha : parseFloat(alpha);
            }
        }
        /**
         * @param {string} name
         * @param {Object} deepDataAndEvents
         * @param {Object} opt_attributes
         * @return {?}
         */
        function draw(name, deepDataAndEvents, opt_attributes) {
            return opt_attributes && (map(name, deepDataAndEvents, opt_attributes) && (deepDataAndEvents = null)), func(name) ? update(name) : render(name, deepDataAndEvents);
        }
        /**
         * @param {Array} recurring
         * @return {?}
         */
        function defer(recurring) {
            return function() {
                return recurring;
            };
        }
        /**
         * @param {string} dest
         * @return {?}
         */
        function identity(dest) {
            return dest;
        }
        /**
         * @param {string} source
         * @return {?}
         */
        function update(source) {
            return compile(set(source, true));
        }
        /**
         * @param {Object} c
         * @param {Object} name
         * @param {Object} obj
         * @return {?}
         */
        function mixin(c, name, obj) {
            if (null == obj) {
                var s = func(name);
                var p = s && keys(name);
                var matches = p && (p.length && join(name, p));
                if (!(matches ? matches.length : s)) {
                    /** @type {boolean} */
                    matches = false;
                    /** @type {Object} */
                    obj = name;
                    /** @type {Object} */
                    name = c;
                    c = this;
                }
            }
            if (!matches) {
                matches = join(name, keys(name));
            }
            /** @type {boolean} */
            var l = true;
            /** @type {number} */
            var index = -1;
            var pos = isFunction(c);
            var length = matches.length;
            if (obj === false) {
                /** @type {boolean} */
                l = false;
            } else {
                if (func(obj)) {
                    if ("chain" in obj) {
                        l = obj.chain;
                    }
                }
            }
            for (;++index < length;) {
                var key = matches[index];
                var val = name[key];
                c[key] = val;
                if (pos) {
                    c.prototype[key] = function(f) {
                        return function() {
                            var line = this.__chain__;
                            if (l || line) {
                                var result = c(this.__wrapped__);
                                return(result.__actions__ = promote(this.__actions__)).push({
                                    func : f,
                                    args : arguments,
                                    thisArg : c
                                }), result.__chain__ = line, result;
                            }
                            /** @type {Array} */
                            var args = [this.value()];
                            return method.apply(args, arguments), f.apply(c, args);
                        };
                    }(val);
                }
            }
            return c;
        }
        /**
         * @return {?}
         */
        function specFilter() {
            return global._ = _, this;
        }
        /**
         * @return {undefined}
         */
        function handle_cancel() {
        }
        /**
         * @param {string} name
         * @return {?}
         */
        function debug(name) {
            return callback(name + "");
        }
        /**
         * @param {Object} object
         * @return {?}
         */
        function shimKeys(object) {
            return function(key) {
                return null == object ? options : object[key];
            };
        }
        /**
         * @param {number} val
         * @param {number} recurring
         * @param {number} deepDataAndEvents
         * @return {?}
         */
        function range(val, recurring, deepDataAndEvents) {
            if (deepDataAndEvents) {
                if (map(val, recurring, deepDataAndEvents)) {
                    /** @type {null} */
                    recurring = deepDataAndEvents = null;
                }
            }
            /** @type {number} */
            val = +val || 0;
            /** @type {number} */
            deepDataAndEvents = null == deepDataAndEvents ? 1 : +deepDataAndEvents || 0;
            if (null == recurring) {
                /** @type {number} */
                recurring = val;
                /** @type {number} */
                val = 0;
            } else {
                /** @type {number} */
                recurring = +recurring || 0;
            }
            /** @type {number} */
            var key = -1;
            var reference = max(ceil((recurring - val) / (deepDataAndEvents || 1)), 0);
            var r = call(reference);
            for (;++key < reference;) {
                /** @type {number} */
                r[key] = val;
                val += deepDataAndEvents;
            }
            return r;
        }
        /**
         * @param {number} n
         * @param {?} value
         * @param {Object} parent
         * @return {?}
         */
        function all(n, value, parent) {
            if (n = +n, n < 1 || !f(n)) {
                return[];
            }
            /** @type {number} */
            var i = -1;
            var object = call(min(n, length));
            value = parse(value, parent, 1);
            for (;++i < n;) {
                if (i < length) {
                    object[i] = value(i);
                } else {
                    value(i);
                }
            }
            return object;
        }
        /**
         * @param {string} context
         * @return {?}
         */
        function reject(context) {
            /** @type {number} */
            var id = ++rightId;
            return fn(context) + id;
        }
        global = global ? Benchmark.defaults(root.Object(), global, Benchmark.pick(root, contextProps)) : root;
        var call = global.Array;
        var Constuctor = global.Date;
        var parseFloat = global.Error;
        var one = global.Function;
        var Math = global.Math;
        var config = global.Number;
        var $ = global.Object;
        var require = global.RegExp;
        var String = global.String;
        var Stream = global.TypeError;
        var ArrayProto = call.prototype;
        var prototype = $.prototype;
        var doc = (doc = global.window) && doc.document;
        var toString = one.prototype.toString;
        var CB = callback("length");
        var hasOwn = prototype.hasOwnProperty;
        /** @type {number} */
        var rightId = 0;
        var eventSplitter = prototype.toString;
        var _ = global._;
        var nodes = require("^" + trim(eventSplitter).replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        var Buffer = isNumber(Buffer = global.ArrayBuffer) && Buffer;
        var core_toString = isNumber(core_toString = Buffer && (new Buffer(0)).slice) && core_toString;
        var ceil = Math.ceil;
        var Q = global.clearTimeout;
        var floor = Math.floor;
        var encodeURIComponent = isNumber(encodeURIComponent = $.getPrototypeOf) && encodeURIComponent;
        var method = ArrayProto.push;
        var deferred = prototype.propertyIsEnumerable;
        var Set = isNumber(Set = global.Set) && Set;
        var setTimer = global.setTimeout;
        var that = ArrayProto.splice;
        var optgroup = isNumber(optgroup = global.Uint8Array) && optgroup;
        var Map = (ArrayProto.unshift, isNumber(Map = global.WeakMap) && Map);
        var array = function() {
            try {
                var Map = isNumber(Map = global.Float64Array) && Map;
                var isBuggy = new Map(new Buffer(10), 0, 1) && Map;
            } catch (c) {
            }
            return isBuggy;
        }();
        var nativeIsArray = isNumber(nativeIsArray = call.isArray) && nativeIsArray;
        var nativeCreate = isNumber(nativeCreate = $.create) && nativeCreate;
        var f = global.isFinite;
        var isArrayLike = isNumber(isArrayLike = $.keys) && isArrayLike;
        var max = Math.max;
        var min = Math.min;
        var opt_now = isNumber(opt_now = Constuctor.now) && opt_now;
        var ln = isNumber(ln = config.isFinite) && ln;
        var parseInt = global.parseInt;
        var nativeRandom = Math.random;
        var to = config.NEGATIVE_INFINITY;
        var len = config.POSITIVE_INFINITY;
        /** @type {number} */
        var length = Math.pow(2, 32) - 1;
        /** @type {number} */
        var padLength = length - 1;
        /** @type {number} */
        var yg = length >>> 1;
        var resolution = array ? array.BYTES_PER_ELEMENT : 0;
        /** @type {number} */
        var lower = Math.pow(2, 53) - 1;
        var data_priv = Map && new Map;
        var support = lodash.support = {};
        !function(recurring) {
            /** @type {boolean} */
            support.funcDecomp = !isNumber(global.WinRTError) && symbol.test(init);
            /** @type {boolean} */
            support.funcNames = "string" == typeof one.name;
            try {
                /** @type {boolean} */
                support.dom = 11 === doc.createDocumentFragment().nodeType;
            } catch (b) {
                /** @type {boolean} */
                support.dom = false;
            }
            try {
                /** @type {boolean} */
                support.nonEnumArgs = !deferred.call(arguments, 1);
            } catch (b) {
                /** @type {boolean} */
                support.nonEnumArgs = true;
            }
        }(0, 0);
        lodash.templateSettings = {
            escape : reEscapeDelimiter,
            evaluate : reEvaluateDelimiter,
            interpolate : reInterpolate,
            variable : "",
            imports : {
                /** @type {function (string): ?} */
                _ : lodash
            }
        };
        var hasOwnProperty = function() {
            /**
             * @return {undefined}
             */
            function TemplateClass() {
            }
            return function(object) {
                if (func(object)) {
                    /** @type {Object} */
                    TemplateClass.prototype = object;
                    var result = new TemplateClass;
                    /** @type {null} */
                    TemplateClass.prototype = null;
                }
                return result || global.Object();
            };
        }();
        /** @type {Function} */
        var ok = data_priv ? function(dest, pdataCur) {
            return data_priv.set(dest, pdataCur), dest;
        } : identity;
        if (!core_toString) {
            hasKey = Buffer && optgroup ? function(obj) {
                var x = obj.byteLength;
                var length = array ? floor(x / resolution) : 0;
                /** @type {number} */
                var offset = length * resolution;
                var v = new Buffer(x);
                if (length) {
                    var d = new array(v, 0, length);
                    d.set(new array(obj, 0, length));
                }
                return x != offset && (d = new optgroup(v, offset), d.set(new optgroup(obj, offset))), v;
            } : defer(null);
        }
        var puts = nativeCreate && Set ? function(spy) {
            return new helper(spy);
        } : defer(null);
        /** @type {Function} */
        var missingTask = data_priv ? function(cur) {
            return data_priv.get(cur);
        } : handle_cancel;
        var failed = function() {
            /** @type {number} */
            var k = 0;
            /** @type {number} */
            var aux = 0;
            return function(clone, message) {
                var max = now();
                /** @type {number} */
                var padLength = length - (max - aux);
                if (aux = max, padLength > 0) {
                    if (++k >= len) {
                        return clone;
                    }
                } else {
                    /** @type {number} */
                    k = 0;
                }
                return ok(clone, message);
            };
        }();
        var countBy = search(function(params, dataAndEvents, key) {
            if (hasOwn.call(params, key)) {
                ++params[key];
            } else {
                /** @type {number} */
                params[key] = 1;
            }
        });
        var isEqual = search(function(params, value, key) {
            if (hasOwn.call(params, key)) {
                params[key].push(value);
            } else {
                /** @type {Array} */
                params[key] = [value];
            }
        });
        var invert = search(function(qs, val, i) {
            qs[i] = val;
        });
        var d = cleanup(element);
        var newmin = cleanup(restoreScript, true);
        var isDate = search(function(queues, value, dataAndEvents) {
            queues[dataAndEvents ? 0 : 1].push(value);
        }, function() {
            return[[], []];
        });
        var now = opt_now || function() {
            return(new Constuctor).getTime();
        };
        var ondata = nativeIsArray || function(name) {
            return func(name) && (fn(name.length) && eventSplitter.call(name) == start) || false;
        };
        if (!support.dom) {
            /**
             * @param {?} name
             * @return {?}
             */
            extend = function(name) {
                return name && (1 === name.nodeType && (func(name) && !is(name))) || false;
            };
        }
        var isFinite = ln || function(value) {
            return "number" == typeof value && f(value);
        };
        if (isFunction(/x/) || optgroup && !isFunction(optgroup)) {
            /**
             * @param {string} name
             * @return {?}
             */
            isFunction = function(name) {
                return eventSplitter.call(name) == k;
            };
        }
        /** @type {function (?): ?} */
        var is = encodeURIComponent ? function(name) {
            if (!name || eventSplitter.call(name) != string) {
                return false;
            }
            var size = name.valueOf;
            var value = isNumber(size) && ((value = encodeURIComponent(size)) && encodeURIComponent(value));
            return value ? name == value || encodeURIComponent(name) == value : select(name);
        } : select;
        var handle = load(setup);
        /** @type {function (?): ?} */
        var keys = isArrayLike ? function(name) {
            if (name) {
                var v = name.constructor;
                var t = name.length;
            }
            return "function" == typeof v && v.prototype === name || "function" != typeof name && (t && fn(t)) ? emit(name) : func(name) ? isArrayLike(name) : [];
        } : emit;
        var object = load(bind);
        var isObject = animate(function(y, word, i) {
            return word = word.toLowerCase(), y + (i ? word.charAt(0).toUpperCase() + word.slice(1) : word);
        });
        var uniqueId = animate(function(_parentIdPrefix, m3, pos) {
            return _parentIdPrefix + (pos ? "-" : "") + m3.toLowerCase();
        });
        if (8 != parseInt(v + "08")) {
            /**
             * @param {string} val
             * @param {number} recurring
             * @param {boolean} callback
             * @return {?}
             */
            decode = function(val, recurring, callback) {
                return(callback ? map(val, recurring, callback) : null == recurring) ? recurring = 0 : recurring && (recurring = +recurring), val = _parse(val), parseInt(val, recurring || (fnTest.test(val) ? 16 : 10));
            };
        }
        var where = animate(function(_parentIdPrefix, m3, pos) {
            return _parentIdPrefix + (pos ? "_" : "") + m3.toLowerCase();
        });
        var tap = animate(function(type, match, charset) {
            return type + (charset ? " " : "") + (match.charAt(0).toUpperCase() + match.slice(1));
        });
        return lodashWrapper.prototype = lodash.prototype, Loader.prototype.delete = highlight, Loader.prototype.get = click, Loader.prototype.has = hook, Loader.prototype.set = disabled, helper.prototype.push = start, memoize.Cache = Loader, lodash.after = after, lodash.ary = activate, lodash.assign = handle, lodash.at = addData, lodash.before = wrap, lodash.bind = watch, lodash.bindAll = bindAll, lodash.bindKey = partial, lodash.callback = draw, lodash.chain = chain, lodash.chunk = first, lodash.compact =
            compact, lodash.constant = defer, lodash.countBy = countBy, lodash.create = result, lodash.curry = handler, lodash.curryRight = tick, lodash.debounce = debounce, lodash.defaults = times, lodash.defer = enabled, lodash.delay = addText, lodash.difference = pick, lodash.drop = zip, lodash.dropRight = union, lodash.dropRightWhile = initial, lodash.dropWhile = rest, lodash.filter = filter, lodash.flatten = flatten, lodash.flattenDeep = constructor, lodash.flow = delegate, lodash.flowRight = compose,
            lodash.forEach = initialize, lodash.forEachRight = setOptions, lodash.forIn = onreadystatechange, lodash.forInRight = make, lodash.forOwn = open, lodash.forOwnRight = play, lodash.functions = functions, lodash.groupBy = isEqual, lodash.indexBy = invert, lodash.initial = i, lodash.intersection = intersection, lodash.invert = expand, lodash.invoke = trigger, lodash.keys = keys, lodash.keysIn = forEach, lodash.map = options, lodash.mapValues = poll, lodash.matches = update, lodash.memoize = memoize,
            lodash.merge = object, lodash.mixin = mixin, lodash.negate = once, lodash.omit = match, lodash.once = atom, lodash.pairs = pairs, lodash.partial = node, lodash.partialRight = exec, lodash.partition = isDate, lodash.pick = errorCallback, lodash.pluck = noop, lodash.property = debug, lodash.propertyOf = shimKeys, lodash.pull = groupBy, lodash.pullAt = omit, lodash.range = range, lodash.rearg = stop, lodash.reject = noConflict, lodash.remove = clean, lodash.rest = tail, lodash.shuffle = shuffle,
            lodash.slice = last, lodash.sortBy = get, lodash.sortByAll = reduce, lodash.take = pluck, lodash.takeRight = toArray, lodash.takeRightWhile = sortBy, lodash.takeWhile = drop, lodash.tap = isNaN, lodash.throttle = throttle, lodash.thru = prev, lodash.times = all, lodash.toArray = some, lodash.toPlainObject = done, lodash.transform = clone, lodash.union = stackData, lodash.uniq = uniq, lodash.unzip = link, lodash.values = forOwn, lodash.valuesIn = save, lodash.where = onChange, lodash.without =
            without, lodash.wrap = notify, lodash.xor = onData, lodash.zip = win, lodash.zipObject = zipObject, lodash.backflow = compose, lodash.collect = options, lodash.compose = compose, lodash.each = initialize, lodash.eachRight = setOptions, lodash.extend = handle, lodash.iteratee = draw, lodash.methods = functions, lodash.object = zipObject, lodash.select = filter, lodash.tail = tail, lodash.unique = uniq, mixin(lodash, lodash), lodash.attempt = tryIt, lodash.camelCase = isObject, lodash.capitalize =
            capitalize, lodash.clone = configure, lodash.cloneDeep = end, lodash.deburr = onStart, lodash.endsWith = destroy, lodash.escape = url, lodash.escapeRegExp = trim, lodash.every = has, lodash.find = find, lodash.findIndex = iterator, lodash.findKey = json, lodash.findLast = hasClass, lodash.findLastIndex = fail, lodash.findLastKey = setModel, lodash.findWhere = defaults, lodash.first = _select, lodash.has = isArguments, lodash.identity = identity, lodash.includes = contains, lodash.indexOf = indexOf,
            lodash.isArguments = isClassOf, lodash.isArray = ondata, lodash.isBoolean = isBoolean, lodash.isDate = isPlainObject, lodash.isElement = extend, lodash.isEmpty = isEmpty, lodash.isEqual = handleResponse, lodash.isError = ready, lodash.isFinite = isFinite, lodash.isFunction = isFunction, lodash.isMatch = merge, lodash.isNaN = onError, lodash.isNative = isNumber, lodash.isNull = isNull, lodash.isNumber = delay, lodash.isObject = func, lodash.isPlainObject = is, lodash.isRegExp = isRegExp, lodash.isString =
            isString, lodash.isTypedArray = isArray, lodash.isUndefined = isUndefined, lodash.kebabCase = uniqueId, lodash.last = difference, lodash.lastIndexOf = lastIndexOf, lodash.max = d, lodash.min = newmin, lodash.noConflict = specFilter, lodash.noop = handle_cancel, lodash.now = now, lodash.pad = error, lodash.padLeft = findValueCallback, lodash.padRight = time, lodash.parseInt = decode, lodash.random = random, lodash.reduce = proceed, lodash.reduceRight = reduceRight, lodash.repeat = close, lodash.result =
            register, lodash.runInContext = init, lodash.size = size, lodash.snakeCase = where, lodash.some = validate, lodash.sortedIndex = sortedIndex, lodash.sortedLastIndex = _build, lodash.startCase = tap, lodash.startsWith = up, lodash.template = template, lodash.trim = _parse, lodash.trimLeft = onload, lodash.trimRight = traverse, lodash.trunc = run, lodash.unescape = unescape, lodash.uniqueId = reject, lodash.words = finish, lodash.all = has, lodash.any = validate, lodash.contains = contains, lodash.detect =
            find, lodash.foldl = proceed, lodash.foldr = reduceRight, lodash.head = _select, lodash.include = contains, lodash.inject = proceed, mixin(lodash, function() {
            var target = {};
            return check(lodash, function(s, methodName) {
                if (!lodash.prototype[methodName]) {
                    target[methodName] = s;
                }
            }), target;
        }(), false), lodash.sample = include, lodash.prototype.sample = function(callback) {
            return this.__chain__ || null != callback ? this.thru(function(objId) {
                return include(objId, callback);
            }) : include(this.value());
        }, lodash.VERSION = VERSION, each(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
            /** @type {function (string): ?} */
            lodash[methodName].placeholder = lodash;
        }), each(["filter", "map", "takeWhile"], function(m, type) {
            /** @type {boolean} */
            var isScale = type == wanted;
            /**
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @return {?}
             */
            data.prototype[m] = function(recurring, deepDataAndEvents) {
                var me = this.clone();
                var filtered = me.filtered;
                var eventStore = me.iteratees || (me.iteratees = []);
                return me.filtered = filtered || (isScale || type == CLEANUP && me.dir < 0), eventStore.push({
                    iteratee : expect(recurring, deepDataAndEvents, 3),
                    type : type
                }), me;
            };
        }), each(["drop", "take"], function(type, isNative) {
            /** @type {string} */
            var method = type + "Count";
            /** @type {string} */
            var key = type + "While";
            /**
             * @param {number} value
             * @return {?}
             */
            data.prototype[type] = function(value) {
                value = null == value ? 1 : max(+value || 0, 0);
                var self = this.clone();
                if (self.filtered) {
                    var old = self[method];
                    self[method] = isNative ? min(old, value) : old + value;
                } else {
                    var worker = self.views || (self.views = []);
                    worker.push({
                        size : value,
                        type : type + (self.dir < 0 ? "Right" : "")
                    });
                }
                return self;
            };
            /**
             * @param {?} el
             * @return {?}
             */
            data.prototype[type + "Right"] = function(el) {
                return this.reverse()[type](el).reverse();
            };
            /**
             * @param {?} value
             * @param {?} evt
             * @return {?}
             */
            data.prototype[type + "RightWhile"] = function(value, evt) {
                return this.reverse()[key](value, evt).reverse();
            };
        }), each(["first", "last"], function(m, i) {
            /** @type {string} */
            var unlock = "take" + (i ? "Right" : "");
            /**
             * @return {?}
             */
            data.prototype[m] = function() {
                return this[unlock](1).value()[0];
            };
        }), each(["initial", "rest"], function(m, optional) {
            /** @type {string} */
            var unlock = "drop" + (optional ? "" : "Right");
            /**
             * @return {?}
             */
            data.prototype[m] = function() {
                return this[unlock](1);
            };
        }), each(["pluck", "where"], function(m, offset) {
            /** @type {string} */
            var bytesWritten = offset ? "filter" : "map";
            /** @type {function (string): ?} */
            var cb = offset ? compile : callback;
            /**
             * @param {(number|string)} e
             * @return {?}
             */
            data.prototype[m] = function(e) {
                return this[bytesWritten](cb(offset ? e : e + ""));
            };
        }), data.prototype.dropWhile = function(cb, deepDataAndEvents) {
            var result;
            var b;
            /** @type {boolean} */
            var e = this.dir < 0;
            return cb = expect(cb, deepDataAndEvents, 3), this.filter(function(outErr, a, files) {
                return result = result && (e ? a < b : a > b), b = a, result || (result = !cb(outErr, a, files));
            });
        }, data.prototype.reject = function(name, recurring) {
            return name = expect(name, recurring, 3), this.filter(function(deepDataAndEvents, t, opt_obj2) {
                return!name(deepDataAndEvents, t, opt_obj2);
            });
        }, data.prototype.slice = function(recurring, opt_attributes) {
            /** @type {number} */
            recurring = null == recurring ? 0 : +recurring || 0;
            var duration = recurring < 0 ? this.takeRight(-recurring) : this.drop(recurring);
            return "undefined" != typeof opt_attributes && (opt_attributes = +opt_attributes || 0, duration = opt_attributes < 0 ? duration.dropRight(-opt_attributes) : duration.take(opt_attributes - recurring)), duration;
        }, check(data.prototype, function(__method, methodName) {
            var func = lodash[methodName];
            /** @type {boolean} */
            var spyObj = /^(?:first|last)$/.test(methodName);
            /**
             * @return {?}
             */
            lodash.prototype[methodName] = function() {
                var optgroup = this.__wrapped__;
                /** @type {Arguments} */
                var args = arguments;
                var chainAll = this.__chain__;
                /** @type {boolean} */
                var scopedOptions = !!this.__actions__.length;
                /** @type {boolean} */
                var value = optgroup instanceof data;
                /** @type {boolean} */
                var attrNames = value && !scopedOptions;
                if (spyObj && !chainAll) {
                    return attrNames ? __method.call(optgroup) : func.call(lodash, this.value());
                }
                /**
                 * @param {?} context
                 * @return {?}
                 */
                var later = function(context) {
                    /** @type {Array} */
                    var params = [context];
                    return method.apply(params, args), func.apply(lodash, params);
                };
                if (value || ondata(optgroup)) {
                    var object = attrNames ? optgroup : new data(this);
                    var options = __method.apply(object, args);
                    if (!spyObj && (scopedOptions || options.actions)) {
                        var queue = options.actions || (options.actions = []);
                        queue.push({
                            /** @type {function (Function, Function, ?): ?} */
                            func : prev,
                            args : [later],
                            /** @type {function (string): ?} */
                            thisArg : lodash
                        });
                    }
                    return new lodashWrapper(options, chainAll);
                }
                return this.thru(later);
            };
        }), each(["concat", "join", "pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
            var method = ArrayProto[methodName];
            /** @type {string} */
            var unlock = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru";
            /** @type {boolean} */
            var spyObj = /^(?:join|pop|shift)$/.test(methodName);
            /**
             * @return {?}
             */
            lodash.prototype[methodName] = function() {
                /** @type {Arguments} */
                var args = arguments;
                return spyObj && !this.__chain__ ? method.apply(this.value(), args) : this[unlock](function(object) {
                    return method.apply(object, args);
                });
            };
        }), data.prototype.clone = reset, data.prototype.reverse = _get, data.prototype.value = add, lodash.prototype.chain = alertObject, lodash.prototype.reverse = reverse, lodash.prototype.toString = randomString, lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = onclick, lodash.prototype.collect = lodash.prototype.map, lodash.prototype.head = lodash.prototype.first, lodash.prototype.select = lodash.prototype.filter, lodash.prototype.tail = lodash.prototype.rest, lodash;
    }
    var options;
    /** @type {string} */
    var VERSION = "3.1.0";
    /** @type {number} */
    var j = 1;
    /** @type {number} */
    var mask = 2;
    /** @type {number} */
    var mapSizeComparer = 4;
    /** @type {number} */
    var QUnit = 8;
    /** @type {number} */
    var tag = 16;
    /** @type {number} */
    var oldconfig = 32;
    /** @type {number} */
    var c = 64;
    /** @type {number} */
    var right = 128;
    /** @type {number} */
    var z = 256;
    /** @type {number} */
    var size = 30;
    /** @type {string} */
    var barfoobarbazbar = "...";
    /** @type {number} */
    var len = 150;
    /** @type {number} */
    var length = 16;
    /** @type {number} */
    var wanted = 0;
    /** @type {number} */
    var curCSS = 1;
    /** @type {number} */
    var CLEANUP = 2;
    /** @type {string} */
    var filename = "Expected a function";
    /** @type {string} */
    var obj = "__lodash_placeholder__";
    /** @type {string} */
    var number = "[object Arguments]";
    /** @type {string} */
    var start = "[object Array]";
    /** @type {string} */
    var i = "[object Boolean]";
    /** @type {string} */
    var numberClass = "[object Date]";
    /** @type {string} */
    var location = "[object Error]";
    /** @type {string} */
    var k = "[object Function]";
    /** @type {string} */
    var cacheIndex = "[object Map]";
    /** @type {string} */
    var input = "[object Number]";
    /** @type {string} */
    var string = "[object Object]";
    /** @type {string} */
    var h = "[object RegExp]";
    /** @type {string} */
    var currentId = "[object Set]";
    /** @type {string} */
    var s = "[object String]";
    /** @type {string} */
    var id = "[object WeakMap]";
    /** @type {string} */
    var b = "[object ArrayBuffer]";
    /** @type {string} */
    var target = "[object Float32Array]";
    /** @type {string} */
    var name = "[object Float64Array]";
    /** @type {string} */
    var source = "[object Int8Array]";
    /** @type {string} */
    var position = "[object Int16Array]";
    /** @type {string} */
    var channel = "[object Int32Array]";
    /** @type {string} */
    var prop = "[object Uint8Array]";
    /** @type {string} */
    var data = "[object Uint8ClampedArray]";
    /** @type {string} */
    var docUid = "[object Uint16Array]";
    /** @type {string} */
    var index = "[object Uint32Array]";
    /** @type {RegExp} */
    var reEmptyStringLeading = /\b__p \+= '';/g;
    /** @type {RegExp} */
    var rSlash = /\b(__p \+=) '' \+/g;
    /** @type {RegExp} */
    var badChars = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    /** @type {RegExp} */
    var rCRLF = /&(?:amp|lt|gt|quot|#39|#96);/g;
    /** @type {RegExp} */
    var rreturn = /[&<>"'`]/g;
    /** @type {RegExp} */
    var rbrace = RegExp(rCRLF.source);
    /** @type {RegExp} */
    var check = RegExp(rreturn.source);
    /** @type {RegExp} */
    var reEscapeDelimiter = /<%-([\s\S]+?)%>/g;
    /** @type {RegExp} */
    var reEvaluateDelimiter = /<%([\s\S]+?)%>/g;
    /** @type {RegExp} */
    var reInterpolate = /<%=([\s\S]+?)%>/g;
    /** @type {RegExp} */
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    /** @type {RegExp} */
    var rtagName = /\w*$/;
    /** @type {RegExp} */
    var largeRE = /^\s*function[ \n\r\t]+\w/;
    /** @type {RegExp} */
    var fnTest = /^0[xX]/;
    /** @type {RegExp} */
    var rparentsprev = /^\[object .+?Constructor\]$/;
    /** @type {RegExp} */
    var rclass = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;
    /** @type {RegExp} */
    var reNoMatch = /($^)/;
    /** @type {RegExp} */
    var r20 = /[.*+?^${}()|[\]\/\\]/g;
    /** @type {RegExp} */
    var rchecked = RegExp(r20.source);
    /** @type {RegExp} */
    var symbol = /\bthis\b/;
    /** @type {RegExp} */
    var escaper = /['\n\r\u2028\u2029\\]/g;
    var params = function() {
        /** @type {string} */
        var r = "[A-Z\\xc0-\\xd6\\xd8-\\xde]";
        /** @type {string} */
        var g = "[a-z\\xdf-\\xf6\\xf8-\\xff]+";
        return RegExp(r + "{2,}(?=" + r + g + ")|" + r + "?" + g + "|" + r + "+|[0-9]+", "g");
    }();
    /** @type {string} */
    var v = " \t\v\f\u00a0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000";
    /** @type {Array} */
    var contextProps = ["Array", "ArrayBuffer", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Math", "Number", "Object", "RegExp", "Set", "String", "_", "clearTimeout", "document", "isFinite", "parseInt", "setTimeout", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap", "window", "WinRTError"];
    /** @type {number} */
    var Ia = -1;
    var args = {};
    /** @type {boolean} */
    args[target] = args[name] = args[source] = args[position] = args[channel] = args[prop] = args[data] = args[docUid] = args[index] = true;
    /** @type {boolean} */
    args[number] = args[start] = args[b] = args[i] = args[numberClass] = args[location] = args[k] = args[cacheIndex] = args[input] = args[string] = args[h] = args[currentId] = args[s] = args[id] = false;
    var cache = {};
    /** @type {boolean} */
    cache[number] = cache[start] = cache[b] = cache[i] = cache[numberClass] = cache[target] = cache[name] = cache[source] = cache[position] = cache[channel] = cache[input] = cache[string] = cache[h] = cache[s] = cache[prop] = cache[data] = cache[docUid] = cache[index] = true;
    /** @type {boolean} */
    cache[location] = cache[k] = cache[cacheIndex] = cache[currentId] = cache[id] = false;
    var debounceOptions = {
        leading : false,
        maxWait : 0,
        trailing : false
    };
    var msg = {
        "\u00c0" : "A",
        "\u00c1" : "A",
        "\u00c2" : "A",
        "\u00c3" : "A",
        "\u00c4" : "A",
        "\u00c5" : "A",
        "\u00e0" : "a",
        "\u00e1" : "a",
        "\u00e2" : "a",
        "\u00e3" : "a",
        "\u00e4" : "a",
        "\u00e5" : "a",
        "\u00c7" : "C",
        "\u00e7" : "c",
        "\u00d0" : "D",
        "\u00f0" : "d",
        "\u00c8" : "E",
        "\u00c9" : "E",
        "\u00ca" : "E",
        "\u00cb" : "E",
        "\u00e8" : "e",
        "\u00e9" : "e",
        "\u00ea" : "e",
        "\u00eb" : "e",
        "\u00cc" : "I",
        "\u00cd" : "I",
        "\u00ce" : "I",
        "\u00cf" : "I",
        "\u00ec" : "i",
        "\u00ed" : "i",
        "\u00ee" : "i",
        "\u00ef" : "i",
        "\u00d1" : "N",
        "\u00f1" : "n",
        "\u00d2" : "O",
        "\u00d3" : "O",
        "\u00d4" : "O",
        "\u00d5" : "O",
        "\u00d6" : "O",
        "\u00d8" : "O",
        "\u00f2" : "o",
        "\u00f3" : "o",
        "\u00f4" : "o",
        "\u00f5" : "o",
        "\u00f6" : "o",
        "\u00f8" : "o",
        "\u00d9" : "U",
        "\u00da" : "U",
        "\u00db" : "U",
        "\u00dc" : "U",
        "\u00f9" : "u",
        "\u00fa" : "u",
        "\u00fb" : "u",
        "\u00fc" : "u",
        "\u00dd" : "Y",
        "\u00fd" : "y",
        "\u00ff" : "y",
        "\u00c6" : "Ae",
        "\u00e6" : "ae",
        "\u00de" : "Th",
        "\u00fe" : "th",
        "\u00df" : "ss"
    };
    var old = {
        "&" : "&amp;",
        "<" : "&lt;",
        ">" : "&gt;",
        '"' : "&quot;",
        "'" : "&#39;",
        "`" : "&#96;"
    };
    var frequency = {
        "&amp;" : "&",
        "&lt;" : "<",
        "&gt;" : ">",
        "&quot;" : '"',
        "&#39;" : "'",
        "&#96;" : "`"
    };
    var objectTypes = {
        function : true,
        object : true
    };
    var escapes = {
        "\\" : "\\",
        "'" : "'",
        "\n" : "n",
        "\r" : "r",
        "\u2028" : "u2028",
        "\u2029" : "u2029"
    };
    var root = objectTypes[typeof window] && window !== (this && this.window) ? window : this;
    var freeExports = objectTypes[typeof exports] && (exports && (!exports.nodeType && exports));
    var freeModule = objectTypes[typeof module] && (module && (!module.nodeType && module));
    var self = freeExports && (freeModule && ("object" == typeof global && global));
    if (!!self) {
        if (!(self.global !== self && (self.window !== self && self.self !== self))) {
            root = self;
        }
    }
    var moduleExports = freeModule && (freeModule.exports === freeExports && freeExports);
    var Benchmark = init();
    if ("function" == typeof define && ("object" == typeof define.amd && define.amd)) {
        root._ = Benchmark;
        define(function() {
            return Benchmark;
        });
    } else {
        if (freeExports && freeModule) {
            if (moduleExports) {
                (freeModule.exports = Benchmark)._ = Benchmark;
            } else {
                freeExports._ = Benchmark;
            }
        } else {
            root._ = Benchmark;
        }
    }
}.call(this), function(factory) {
    if ("object" == typeof exports && "undefined" != typeof module) {
        module.exports = factory();
    } else {
        if ("function" == typeof define && define.amd) {
            define([], factory);
        } else {
            var root;
            root = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this;
            root.React = factory();
        }
    }
}(function() {
    return function e(t, n, r) {
        /**
         * @param {string} o
         * @param {?} dx
         * @return {?}
         */
        function s(o, dx) {
            if (!n[o]) {
                if (!t[o]) {
                    var i = "function" == typeof require && require;
                    if (!dx && i) {
                        return i(o, true);
                    }
                    if (a) {
                        return a(o, true);
                    }
                    /** @type {Error} */
                    var err = new Error("Cannot find module '" + o + "'");
                    throw err.code = "MODULE_NOT_FOUND", err;
                }
                var module_ = n[o] = {
                    exports : {}
                };
                t[o][0].call(module_.exports, function(e) {
                    var n = t[o][1][e];
                    return s(n ? n : e);
                }, module_, module_.exports, e, t, n, r);
            }
            return n[o].exports;
        }
        var a = "function" == typeof require && require;
        /** @type {number} */
        var o = 0;
        for (;o < r.length;o++) {
            s(r[o]);
        }
        return s;
    }({
        1 : [function(require, module, dataAndEvents) {
            var Block = require(22);
            var Collection = require(26);
            var inspect = require(37);
            var selfClosing = require(29);
            var nodes = require(64);
            var getActual = require(94);
            var helper = require(96);
            var assert = require(118);
            var should = require(140);
            var update = require(143);
            var indexOf = require(173);
            /** @type {boolean} */
            var dontCloseTags = false;
            Collection.addons = {
                CSSTransitionGroup : selfClosing,
                LinkedStateMixin : Block,
                PureRenderMixin : inspect,
                TransitionGroup : getActual,
                /**
                 * @return {?}
                 */
                batchedUpdates : function() {
                    return indexOf(dontCloseTags, "React.addons.batchedUpdates is deprecated. Use ReactDOM.unstable_batchedUpdates instead."), dontCloseTags = true, helper.batchedUpdates.apply(this, arguments);
                },
                cloneWithProps : assert,
                createFragment : nodes.create,
                shallowCompare : should,
                update : update
            };
            Collection.addons.Perf = require(55);
            Collection.addons.TestUtils = require(91);
            module.exports = Collection;
        }, {
            118 : 118,
            140 : 140,
            143 : 143,
            173 : 173,
            22 : 22,
            26 : 26,
            29 : 29,
            37 : 37,
            55 : 55,
            64 : 64,
            91 : 91,
            94 : 94,
            96 : 96
        }],
        2 : [function(require, module, dataAndEvents) {
            var dom = require(72);
            var getActual = require(122);
            var nodes = require(155);
            var Mixin = {
                /**
                 * @return {undefined}
                 */
                componentDidMount : function() {
                    if (this.props.autoFocus) {
                        nodes(getActual(this));
                    }
                }
            };
            var JsDiff = {
                Mixin : Mixin,
                /**
                 * @return {undefined}
                 */
                focusDOMComponent : function() {
                    nodes(dom.getNode(this._rootNodeID));
                }
            };
            module.exports = JsDiff;
        }, {
            122 : 122,
            155 : 155,
            72 : 72
        }],
        3 : [function(getTarget, module, dataAndEvents) {
            /**
             * @return {?}
             */
            function c() {
                var data = window.opera;
                return "object" == typeof data && ("function" == typeof data.version && parseInt(data.version(), 10) <= 12);
            }
            /**
             * @param {Object} e
             * @return {?}
             */
            function click(e) {
                return(e.ctrlKey || (e.altKey || e.metaKey)) && !(e.ctrlKey && e.altKey);
            }
            /**
             * @param {string} node
             * @return {?}
             */
            function traverseNode(node) {
                switch(node) {
                    case topLevelTypes.topCompositionStart:
                        return eventTypes.compositionStart;
                    case topLevelTypes.topCompositionEnd:
                        return eventTypes.compositionEnd;
                    case topLevelTypes.topCompositionUpdate:
                        return eventTypes.compositionUpdate;
                }
            }
            /**
             * @param {string} dataAndEvents
             * @param {Event} event
             * @return {?}
             */
            function handler(dataAndEvents, event) {
                return dataAndEvents === topLevelTypes.topKeyDown && event.keyCode === ENTER_KEY;
            }
            /**
             * @param {string} dataAndEvents
             * @param {Event} e
             * @return {?}
             */
            function hasClass(dataAndEvents, e) {
                switch(dataAndEvents) {
                    case topLevelTypes.topKeyUp:
                        return restricted.indexOf(e.keyCode) !== -1;
                    case topLevelTypes.topKeyDown:
                        return e.keyCode !== ENTER_KEY;
                    case topLevelTypes.topKeyPress:
                        ;
                    case topLevelTypes.topMouseDown:
                        ;
                    case topLevelTypes.topBlur:
                        return true;
                    default:
                        return false;
                }
            }
            /**
             * @param {Event} evt
             * @return {?}
             */
            function listener(evt) {
                var data = evt.detail;
                return "object" == typeof data && "data" in data ? data.data : null;
            }
            /**
             * @param {string} node
             * @param {string} eventName
             * @param {string} topLevelTargetID
             * @param {Event} evt
             * @param {?} callback
             * @return {?}
             */
            function emit(node, eventName, topLevelTargetID, evt, callback) {
                var eventType;
                var eventData;
                if (w ? eventType = traverseNode(node) : e ? hasClass(node, evt) && (eventType = eventTypes.compositionEnd) : handler(node, evt) && (eventType = eventTypes.compositionStart), !eventType) {
                    return null;
                }
                if (isFunction) {
                    if (e || eventType !== eventTypes.compositionStart) {
                        if (eventType === eventTypes.compositionEnd) {
                            if (e) {
                                eventData = e.getData();
                            }
                        }
                    } else {
                        e = element.getPooled(eventName);
                    }
                }
                var event = target.getPooled(eventType, topLevelTargetID, evt, callback);
                if (eventData) {
                    event.data = eventData;
                } else {
                    var data = listener(evt);
                    if (null !== data) {
                        event.data = data;
                    }
                }
                return fixHook.accumulateTwoPhaseDispatches(event), event;
            }
            /**
             * @param {string} keepData
             * @param {Event} event
             * @return {?}
             */
            function remove(keepData, event) {
                switch(keepData) {
                    case topLevelTypes.topCompositionEnd:
                        return listener(event);
                    case topLevelTypes.topKeyPress:
                        var end = event.which;
                        return end !== start ? null : (doc = true, from);
                    case topLevelTypes.topTextInput:
                        var value = event.data;
                        return value === from && doc ? null : value;
                    default:
                        return null;
                }
            }
            /**
             * @param {string} node
             * @param {Event} evt
             * @return {?}
             */
            function parse(node, evt) {
                if (e) {
                    if (node === topLevelTypes.topCompositionEnd || hasClass(node, evt)) {
                        var c = e.getData();
                        return element.release(e), e = null, c;
                    }
                    return null;
                }
                switch(node) {
                    case topLevelTypes.topPaste:
                        return null;
                    case topLevelTypes.topKeyPress:
                        return evt.which && !click(evt) ? String.fromCharCode(evt.which) : null;
                    case topLevelTypes.topCompositionEnd:
                        return isFunction ? null : evt.data;
                    default:
                        return null;
                }
            }
            /**
             * @param {string} name
             * @param {string} var_args
             * @param {string} details
             * @param {Event} opts
             * @param {?} args
             * @return {?}
             */
            function add(name, var_args, details, opts, args) {
                var data;
                if (data = fn ? remove(name, opts) : parse(name, opts), !data) {
                    return null;
                }
                var event = $.getPooled(eventTypes.beforeInput, details, opts, args);
                return event.data = data, fixHook.accumulateTwoPhaseDispatches(event), event;
            }
            var targetTab = getTarget(15);
            var fixHook = getTarget(19);
            var targetAnchor = getTarget(147);
            var element = getTarget(20);
            var target = getTarget(103);
            var $ = getTarget(107);
            var filename = getTarget(166);
            /** @type {Array} */
            var restricted = [9, 13, 27, 32];
            /** @type {number} */
            var ENTER_KEY = 229;
            var w = targetAnchor.canUseDOM && "CompositionEvent" in window;
            /** @type {null} */
            var _ref = null;
            if (targetAnchor.canUseDOM) {
                if ("documentMode" in document) {
                    _ref = document.documentMode;
                }
            }
            var fn = targetAnchor.canUseDOM && ("TextEvent" in window && (!_ref && !c()));
            var isFunction = targetAnchor.canUseDOM && (!w || _ref && (_ref > 8 && _ref <= 11));
            /** @type {number} */
            var start = 32;
            /** @type {string} */
            var from = String.fromCharCode(start);
            var topLevelTypes = targetTab.topLevelTypes;
            var eventTypes = {
                beforeInput : {
                    phasedRegistrationNames : {
                        bubbled : filename({
                            onBeforeInput : null
                        }),
                        captured : filename({
                            onBeforeInputCapture : null
                        })
                    },
                    dependencies : [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
                },
                compositionEnd : {
                    phasedRegistrationNames : {
                        bubbled : filename({
                            onCompositionEnd : null
                        }),
                        captured : filename({
                            onCompositionEndCapture : null
                        })
                    },
                    dependencies : [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
                },
                compositionStart : {
                    phasedRegistrationNames : {
                        bubbled : filename({
                            onCompositionStart : null
                        }),
                        captured : filename({
                            onCompositionStartCapture : null
                        })
                    },
                    dependencies : [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
                },
                compositionUpdate : {
                    phasedRegistrationNames : {
                        bubbled : filename({
                            onCompositionUpdate : null
                        }),
                        captured : filename({
                            onCompositionUpdateCapture : null
                        })
                    },
                    dependencies : [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
                }
            };
            /** @type {boolean} */
            var doc = false;
            /** @type {null} */
            var e = null;
            var JsDiff = {
                eventTypes : eventTypes,
                /**
                 * @param {string} name
                 * @param {string} obj
                 * @param {string} topLevelTargetID
                 * @param {Event} nativeEvent
                 * @param {?} args
                 * @return {?}
                 */
                extractEvents : function(name, obj, topLevelTargetID, nativeEvent, args) {
                    return[emit(name, obj, topLevelTargetID, nativeEvent, args), add(name, obj, topLevelTargetID, nativeEvent, args)];
                }
            };
            module.exports = JsDiff;
        }, {
            103 : 103,
            107 : 107,
            147 : 147,
            15 : 15,
            166 : 166,
            19 : 19,
            20 : 20
        }],
        4 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {?} xhr
             * @param {string} prop
             * @return {?}
             */
            function parse(xhr, prop) {
                return xhr + prop.charAt(0).toUpperCase() + prop.substring(1);
            }
            var obj = {
                animationIterationCount : true,
                boxFlex : true,
                boxFlexGroup : true,
                boxOrdinalGroup : true,
                columnCount : true,
                flex : true,
                flexGrow : true,
                flexPositive : true,
                flexShrink : true,
                flexNegative : true,
                flexOrder : true,
                fontWeight : true,
                lineClamp : true,
                lineHeight : true,
                opacity : true,
                order : true,
                orphans : true,
                tabSize : true,
                widows : true,
                zIndex : true,
                zoom : true,
                fillOpacity : true,
                stopOpacity : true,
                strokeDashoffset : true,
                strokeOpacity : true,
                strokeWidth : true
            };
            /** @type {Array} */
            var prefixes = ["Webkit", "ms", "Moz", "O"];
            Object.keys(obj).forEach(function(k) {
                prefixes.forEach(function(name) {
                    obj[parse(name, k)] = obj[k];
                });
            });
            var button_active = {
                background : {
                    backgroundAttachment : true,
                    backgroundColor : true,
                    backgroundImage : true,
                    backgroundPositionX : true,
                    backgroundPositionY : true,
                    backgroundRepeat : true
                },
                backgroundPosition : {
                    backgroundPositionX : true,
                    backgroundPositionY : true
                },
                border : {
                    borderWidth : true,
                    borderStyle : true,
                    borderColor : true
                },
                borderBottom : {
                    borderBottomWidth : true,
                    borderBottomStyle : true,
                    borderBottomColor : true
                },
                borderLeft : {
                    borderLeftWidth : true,
                    borderLeftStyle : true,
                    borderLeftColor : true
                },
                borderRight : {
                    borderRightWidth : true,
                    borderRightStyle : true,
                    borderRightColor : true
                },
                borderTop : {
                    borderTopWidth : true,
                    borderTopStyle : true,
                    borderTopColor : true
                },
                font : {
                    fontStyle : true,
                    fontVariant : true,
                    fontWeight : true,
                    fontSize : true,
                    lineHeight : true,
                    fontFamily : true
                },
                outline : {
                    outlineWidth : true,
                    outlineStyle : true,
                    outlineColor : true
                }
            };
            var JsDiff = {
                isUnitlessNumber : obj,
                shorthandPropertyExpansions : button_active
            };
            module.exports = JsDiff;
        }, {}],
        5 : [function(require, module, dataAndEvents) {
            var Block = require(4);
            var nodes = require(147);
            var helper = require(78);
            var isFunction = require(149);
            var group = require(119);
            var getActual = require(160);
            var fade = require(168);
            var callback = require(173);
            var w = fade(function(obj) {
                return getActual(obj);
            });
            /** @type {boolean} */
            var value = false;
            /** @type {string} */
            var name = "cssFloat";
            if (nodes.canUseDOM) {
                /** @type {(CSSStyleDeclaration|null)} */
                var style = document.createElement("div").style;
                try {
                    /** @type {string} */
                    style.font = "";
                } catch (p) {
                    /** @type {boolean} */
                    value = true;
                }
                if (void 0 === document.documentElement.style.cssFloat) {
                    /** @type {string} */
                    name = "styleFloat";
                }
            }
            /** @type {RegExp} */
            var rbrace = /^(?:webkit|moz|o)[A-Z]/;
            /** @type {RegExp} */
            var rclass = /;\s*$/;
            var classVal = {};
            var opt_tagWhitelist = {};
            /**
             * @param {string} key
             * @return {undefined}
             */
            var fn = function(key) {
                if (!(classVal.hasOwnProperty(key) && classVal[key])) {
                    /** @type {boolean} */
                    classVal[key] = true;
                    callback(false, "Unsupported style property %s. Did you mean %s?", key, isFunction(key));
                }
            };
            /**
             * @param {string} key
             * @return {undefined}
             */
            var func = function(key) {
                if (!(classVal.hasOwnProperty(key) && classVal[key])) {
                    /** @type {boolean} */
                    classVal[key] = true;
                    callback(false, "Unsupported vendor-prefixed style property %s. Did you mean %s?", key, key.charAt(0).toUpperCase() + key.slice(1));
                }
            };
            /**
             * @param {string} obj
             * @param {string} tagName
             * @return {undefined}
             */
            var log = function(obj, tagName) {
                if (!(opt_tagWhitelist.hasOwnProperty(tagName) && opt_tagWhitelist[tagName])) {
                    /** @type {boolean} */
                    opt_tagWhitelist[tagName] = true;
                    callback(false, 'Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.', obj, tagName.replace(rclass, ""));
                }
            };
            /**
             * @param {string} data
             * @param {string} type
             * @return {undefined}
             */
            var run = function(data, type) {
                if (data.indexOf("-") > -1) {
                    fn(data);
                } else {
                    if (rbrace.test(data)) {
                        func(data);
                    } else {
                        if (rclass.test(type)) {
                            log(data, type);
                        }
                    }
                }
            };
            var one = {
                /**
                 * @param {Object} data
                 * @return {?}
                 */
                createMarkupForStyles : function(data) {
                    /** @type {string} */
                    var optsData = "";
                    var line;
                    for (line in data) {
                        if (data.hasOwnProperty(line)) {
                            var value = data[line];
                            run(line, value);
                            if (null != value) {
                                optsData += w(line) + ":";
                                optsData += group(line, value) + ";";
                            }
                        }
                    }
                    return optsData || null;
                },
                /**
                 * @param {Element} node
                 * @param {Object} lines
                 * @return {undefined}
                 */
                setValueForStyles : function(node, lines) {
                    var a = node.style;
                    var line;
                    for (line in lines) {
                        if (lines.hasOwnProperty(line)) {
                            run(line, lines[line]);
                            var $ = group(line, lines[line]);
                            if ("float" === line && (line = name), $) {
                                a[line] = $;
                            } else {
                                var attrNames = value && Block.shorthandPropertyExpansions[line];
                                if (attrNames) {
                                    var i;
                                    for (i in attrNames) {
                                        /** @type {string} */
                                        a[i] = "";
                                    }
                                } else {
                                    /** @type {string} */
                                    a[line] = "";
                                }
                            }
                        }
                    }
                }
            };
            helper.measureMethods(one, "CSSPropertyOperations", {
                setValueForStyles : "setValueForStyles"
            });
            module.exports = one;
        }, {
            119 : 119,
            147 : 147,
            149 : 149,
            160 : 160,
            168 : 168,
            173 : 173,
            4 : 4,
            78 : 78
        }],
        6 : [function(require, module, dataAndEvents) {
            /**
             * @return {undefined}
             */
            function Promise() {
                /** @type {null} */
                this._callbacks = null;
                /** @type {null} */
                this._contexts = null;
            }
            var util = require(25);
            var mix = require(24);
            var getActual = require(161);
            mix(Promise.prototype, {
                /**
                 * @param {Function} value
                 * @param {string} options
                 * @return {undefined}
                 */
                enqueue : function(value, options) {
                    this._callbacks = this._callbacks || [];
                    this._contexts = this._contexts || [];
                    this._callbacks.push(value);
                    this._contexts.push(options);
                },
                /**
                 * @return {undefined}
                 */
                notifyAll : function() {
                    var codeSegments = this._callbacks;
                    var elements = this._contexts;
                    if (codeSegments) {
                        if (codeSegments.length !== elements.length) {
                            getActual(false, "Mismatched list of contexts in callback queue");
                        } else {
                            void 0;
                        }
                        /** @type {null} */
                        this._callbacks = null;
                        /** @type {null} */
                        this._contexts = null;
                        /** @type {number} */
                        var i = 0;
                        for (;i < codeSegments.length;i++) {
                            codeSegments[i].call(elements[i]);
                        }
                        /** @type {number} */
                        codeSegments.length = 0;
                        /** @type {number} */
                        elements.length = 0;
                    }
                },
                /**
                 * @return {undefined}
                 */
                reset : function() {
                    /** @type {null} */
                    this._callbacks = null;
                    /** @type {null} */
                    this._contexts = null;
                },
                /**
                 * @return {undefined}
                 */
                destructor : function() {
                    this.reset();
                }
            });
            util.addPoolingTo(Promise);
            /** @type {function (): undefined} */
            module.exports = Promise;
        }, {
            161 : 161,
            24 : 24,
            25 : 25
        }],
        7 : [function(require, module, dataAndEvents) {
            /**
             * @param {Node} elem
             * @return {?}
             */
            function get(elem) {
                var name = elem.nodeName && elem.nodeName.toLowerCase();
                return "select" === name || "input" === name && "file" === elem.type;
            }
            /**
             * @param {Object} data
             * @return {undefined}
             */
            function listener(data) {
                var param = $.getPooled(events.change, dict, data, render(data));
                assert.accumulateTwoPhaseDispatches(param);
                Utils.batchedUpdates(restoreScript, param);
            }
            /**
             * @param {?} event
             * @return {undefined}
             */
            function restoreScript(event) {
                dom.enqueueEvents(event);
                dom.processEventQueue(false);
            }
            /**
             * @param {string} o
             * @param {Function} deepDataAndEvents
             * @return {undefined}
             */
            function bindCallbacks(o, deepDataAndEvents) {
                /** @type {string} */
                target = o;
                /** @type {Function} */
                dict = deepDataAndEvents;
                target.attachEvent("onchange", listener);
            }
            /**
             * @return {undefined}
             */
            function rmEvt() {
                if (target) {
                    target.detachEvent("onchange", listener);
                    /** @type {null} */
                    target = null;
                    /** @type {null} */
                    dict = null;
                }
            }
            /**
             * @param {string} topLevelType
             * @param {(Node|string)} i
             * @param {string} topLevelTargetID
             * @return {?}
             */
            function getTargetIDForInputEvent(topLevelType, i, topLevelTargetID) {
                if (topLevelType === topLevelTypes.topChange) {
                    return topLevelTargetID;
                }
            }
            /**
             * @param {string} topLevelType
             * @param {(Node|string)} a
             * @param {?} deepDataAndEvents
             * @return {undefined}
             */
            function clone(topLevelType, a, deepDataAndEvents) {
                if (topLevelType === topLevelTypes.topFocus) {
                    rmEvt();
                    bindCallbacks(a, deepDataAndEvents);
                } else {
                    if (topLevelType === topLevelTypes.topBlur) {
                        rmEvt();
                    }
                }
            }
            /**
             * @param {Element} obj
             * @param {Function} arg
             * @return {undefined}
             */
            function value(obj, arg) {
                /** @type {Element} */
                target = obj;
                /** @type {Function} */
                dict = arg;
                id = obj.value;
                /** @type {(ObjectPropertyDescriptor|undefined)} */
                ret = Object.getOwnPropertyDescriptor(obj.constructor.prototype, "value");
                Object.defineProperty(target, "value", open_property);
                target.attachEvent("onpropertychange", recurring);
            }
            /**
             * @return {undefined}
             */
            function init() {
                if (target) {
                    delete target.value;
                    target.detachEvent("onpropertychange", recurring);
                    /** @type {null} */
                    target = null;
                    /** @type {null} */
                    dict = null;
                    /** @type {null} */
                    id = null;
                    /** @type {null} */
                    ret = null;
                }
            }
            /**
             * @param {Object} e
             * @return {undefined}
             */
            function recurring(e) {
                if ("value" === e.propertyName) {
                    var key = e.srcElement.value;
                    if (key !== id) {
                        id = key;
                        listener(e);
                    }
                }
            }
            /**
             * @param {string} topLevelType
             * @param {(Node|string)} i
             * @param {string} topLevelTargetID
             * @return {?}
             */
            function getTargetIDForChangeEvent(topLevelType, i, topLevelTargetID) {
                if (topLevelType === topLevelTypes.topInput) {
                    return topLevelTargetID;
                }
            }
            /**
             * @param {string} topLevelType
             * @param {Element} obj
             * @param {?} key
             * @return {undefined}
             */
            function add(topLevelType, obj, key) {
                if (topLevelType === topLevelTypes.topFocus) {
                    init();
                    value(obj, key);
                } else {
                    if (topLevelType === topLevelTypes.topBlur) {
                        init();
                    }
                }
            }
            /**
             * @param {?} topLevelType
             * @param {(Node|string)} i
             * @param {string} topLevelTargetID
             * @return {?}
             */
            function getTargetIDForInputEventIE(topLevelType, i, topLevelTargetID) {
                if ((topLevelType === topLevelTypes.topSelectionChange || (topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown)) && (target && target.value !== id)) {
                    return id = target.value, dict;
                }
            }
            /**
             * @param {Node} elem
             * @return {?}
             */
            function input(elem) {
                return elem.nodeName && ("input" === elem.nodeName.toLowerCase() && ("checkbox" === elem.type || "radio" === elem.type));
            }
            /**
             * @param {string} topLevelType
             * @param {(Node|string)} i
             * @param {string} topLevelTargetID
             * @return {?}
             */
            function getTargetIDForClickEvent(topLevelType, i, topLevelTargetID) {
                if (topLevelType === topLevelTypes.topClick) {
                    return topLevelTargetID;
                }
            }
            var Block = require(15);
            var dom = require(16);
            var assert = require(19);
            var nodes = require(147);
            var Utils = require(96);
            var $ = require(105);
            var render = require(128);
            var filter = require(133);
            var forIn = require(134);
            var getActual = require(166);
            var topLevelTypes = Block.topLevelTypes;
            var events = {
                change : {
                    phasedRegistrationNames : {
                        bubbled : getActual({
                            onChange : null
                        }),
                        captured : getActual({
                            onChangeCapture : null
                        })
                    },
                    dependencies : [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
                }
            };
            /** @type {null} */
            var target = null;
            /** @type {null} */
            var dict = null;
            /** @type {null} */
            var id = null;
            /** @type {null} */
            var ret = null;
            /** @type {boolean} */
            var I = false;
            if (nodes.canUseDOM) {
                I = filter("change") && (!("documentMode" in document) || document.documentMode > 8);
            }
            /** @type {boolean} */
            var J = false;
            if (nodes.canUseDOM) {
                J = filter("input") && (!("documentMode" in document) || document.documentMode > 9);
            }
            var open_property = {
                /**
                 * @return {?}
                 */
                get : function() {
                    return ret.get.call(this);
                },
                /**
                 * @param {string} elem
                 * @return {undefined}
                 */
                set : function(elem) {
                    /** @type {string} */
                    id = "" + elem;
                    ret.set.call(this, elem);
                }
            };
            var JsDiff = {
                eventTypes : events,
                /**
                 * @param {string} topLevelType
                 * @param {Node} classNames
                 * @param {string} topLevelTargetID
                 * @param {Event} nativeEvent
                 * @param {?} args
                 * @return {?}
                 */
                extractEvents : function(topLevelType, classNames, topLevelTargetID, nativeEvent, args) {
                    var getTargetIDFunc;
                    var handleEventFunc;
                    if (get(classNames) ? I ? getTargetIDFunc = getTargetIDForInputEvent : handleEventFunc = clone : forIn(classNames) ? J ? getTargetIDFunc = getTargetIDForChangeEvent : (getTargetIDFunc = getTargetIDForInputEventIE, handleEventFunc = add) : input(classNames) && (getTargetIDFunc = getTargetIDForClickEvent), getTargetIDFunc) {
                        var targetID = getTargetIDFunc(topLevelType, classNames, topLevelTargetID);
                        if (targetID) {
                            var event = $.getPooled(events.change, targetID, nativeEvent, args);
                            return event.type = "change", assert.accumulateTwoPhaseDispatches(event), event;
                        }
                    }
                    if (handleEventFunc) {
                        handleEventFunc(topLevelType, classNames, topLevelTargetID);
                    }
                }
            };
            module.exports = JsDiff;
        }, {
            105 : 105,
            128 : 128,
            133 : 133,
            134 : 134,
            147 : 147,
            15 : 15,
            16 : 16,
            166 : 166,
            19 : 19,
            96 : 96
        }],
        8 : [function(dataAndEvents, module, deepDataAndEvents) {
            /** @type {number} */
            var d = 0;
            var JsDiff = {
                /**
                 * @return {?}
                 */
                createReactRootIndex : function() {
                    return d++;
                }
            };
            module.exports = JsDiff;
        }, {}],
        9 : [function(require, module, dataAndEvents) {
            /**
             * @param {Element} html
             * @param {?} tag
             * @param {?} num
             * @return {undefined}
             */
            function wrap(html, tag, num) {
                var i = num >= html.childNodes.length ? null : html.childNodes.item(num);
                html.insertBefore(tag, i);
            }
            var Handlebars = require(12);
            var Token = require(74);
            var assert = require(78);
            var u = require(138);
            var callback = require(139);
            var getActual = require(161);
            var channel = {
                dangerouslyReplaceNodeWithMarkup : Handlebars.dangerouslyReplaceNodeWithMarkup,
                updateTextContent : callback,
                /**
                 * @param {Array} updates
                 * @param {Array} string
                 * @return {undefined}
                 */
                processUpdates : function(updates, string) {
                    var update;
                    /** @type {null} */
                    var initialChildren = null;
                    /** @type {null} */
                    var ret = null;
                    /** @type {number} */
                    var i = 0;
                    for (;i < updates.length;i++) {
                        if (update = updates[i], update.type === Token.MOVE_EXISTING || update.type === Token.REMOVE_NODE) {
                            var updatedIndex = update.fromIndex;
                            var value = update.parentNode.childNodes[updatedIndex];
                            var parentID = update.parentID;
                            if (value) {
                                void 0;
                            } else {
                                getActual(false, "processUpdates(): Unable to find child %s of element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID `%s`.", updatedIndex, parentID);
                            }
                            initialChildren = initialChildren || {};
                            initialChildren[parentID] = initialChildren[parentID] || [];
                            initialChildren[parentID][updatedIndex] = value;
                            /** @type {Array} */
                            ret = ret || [];
                            ret.push(value);
                        }
                    }
                    var renderedMarkup;
                    if (renderedMarkup = string.length && "string" == typeof string[0] ? Handlebars.dangerouslyRenderMarkup(string) : string, ret) {
                        /** @type {number} */
                        var n = 0;
                        for (;n < ret.length;n++) {
                            ret[n].parentNode.removeChild(ret[n]);
                        }
                    }
                    /** @type {number} */
                    var k = 0;
                    for (;k < updates.length;k++) {
                        switch(update = updates[k], update.type) {
                            case Token.INSERT_MARKUP:
                                wrap(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
                                break;
                            case Token.MOVE_EXISTING:
                                wrap(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
                                break;
                            case Token.SET_MARKUP:
                                u(update.parentNode, update.content);
                                break;
                            case Token.TEXT_CONTENT:
                                callback(update.parentNode, update.content);
                                break;
                            case Token.REMOVE_NODE:
                                ;
                        }
                    }
                }
            };
            assert.measureMethods(channel, "DOMChildrenOperations", {
                updateTextContent : "updateTextContent"
            });
            module.exports = channel;
        }, {
            12 : 12,
            138 : 138,
            139 : 139,
            161 : 161,
            74 : 74,
            78 : 78
        }],
        10 : [function($sanitize, module, dataAndEvents) {
            /**
             * @param {number} deepDataAndEvents
             * @param {number} dataAndEvents
             * @return {?}
             */
            function clone(deepDataAndEvents, dataAndEvents) {
                return(deepDataAndEvents & dataAndEvents) === dataAndEvents;
            }
            var eventsApi = $sanitize(161);
            var YY_START = {
                MUST_USE_ATTRIBUTE : 1,
                MUST_USE_PROPERTY : 2,
                HAS_SIDE_EFFECTS : 4,
                HAS_BOOLEAN_VALUE : 8,
                HAS_NUMERIC_VALUE : 16,
                HAS_POSITIVE_NUMERIC_VALUE : 48,
                HAS_OVERLOADED_BOOLEAN_VALUE : 64,
                /**
                 * @param {Object} domPropertyConfig
                 * @return {undefined}
                 */
                injectDOMPropertyConfig : function(domPropertyConfig) {
                    var YYSTATE = YY_START;
                    var testSource = domPropertyConfig.Properties || {};
                    var nameToAliasesMap = domPropertyConfig.DOMAttributeNamespaces || {};
                    var attributes = domPropertyConfig.DOMAttributeNames || {};
                    var nsObj = domPropertyConfig.DOMPropertyNames || {};
                    var names = domPropertyConfig.DOMMutationMethods || {};
                    if (domPropertyConfig.isCustomAttribute) {
                        filter._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
                    }
                    var name;
                    for (name in testSource) {
                        if (filter.properties.hasOwnProperty(name)) {
                            eventsApi(false, "injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.", name);
                        } else {
                            void 0;
                        }
                        /** @type {string} */
                        var attributeName = name.toLowerCase();
                        var ref = testSource[name];
                        var o = {
                            attributeName : attributeName,
                            attributeNamespace : null,
                            propertyName : name,
                            mutationMethod : null,
                            mustUseAttribute : clone(ref, YYSTATE.MUST_USE_ATTRIBUTE),
                            mustUseProperty : clone(ref, YYSTATE.MUST_USE_PROPERTY),
                            hasSideEffects : clone(ref, YYSTATE.HAS_SIDE_EFFECTS),
                            hasBooleanValue : clone(ref, YYSTATE.HAS_BOOLEAN_VALUE),
                            hasNumericValue : clone(ref, YYSTATE.HAS_NUMERIC_VALUE),
                            hasPositiveNumericValue : clone(ref, YYSTATE.HAS_POSITIVE_NUMERIC_VALUE),
                            hasOverloadedBooleanValue : clone(ref, YYSTATE.HAS_OVERLOADED_BOOLEAN_VALUE)
                        };
                        if (o.mustUseAttribute && o.mustUseProperty ? eventsApi(false, "DOMProperty: Cannot require using both attribute and property: %s", name) : void 0, !o.mustUseProperty && o.hasSideEffects ? eventsApi(false, "DOMProperty: Properties that have side effects must use property: %s", name) : void 0, o.hasBooleanValue + o.hasNumericValue + o.hasOverloadedBooleanValue <= 1 ? void 0 : eventsApi(false, "DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s",
                                name), filter.getPossibleStandardName[attributeName] = name, attributes.hasOwnProperty(name)) {
                            var key = attributes[name];
                            o.attributeName = key;
                            /** @type {string} */
                            filter.getPossibleStandardName[key] = name;
                        }
                        if (nameToAliasesMap.hasOwnProperty(name)) {
                            o.attributeNamespace = nameToAliasesMap[name];
                        }
                        if (nsObj.hasOwnProperty(name)) {
                            o.propertyName = nsObj[name];
                        }
                        if (names.hasOwnProperty(name)) {
                            o.mutationMethod = names[name];
                        }
                        filter.properties[name] = o;
                    }
                }
            };
            var defaultValueCache = {};
            var filter = {
                ID_ATTRIBUTE_NAME : "data-reactid",
                properties : {},
                getPossibleStandardName : {},
                _isCustomAttributeFunctions : [],
                /**
                 * @param {string} keepData
                 * @return {?}
                 */
                isCustomAttribute : function(keepData) {
                    /** @type {number} */
                    var i = 0;
                    for (;i < filter._isCustomAttributeFunctions.length;i++) {
                        var seg = filter._isCustomAttributeFunctions[i];
                        if (seg(keepData)) {
                            return true;
                        }
                    }
                    return false;
                },
                /**
                 * @param {string} nodeName
                 * @param {string} prop
                 * @return {?}
                 */
                getDefaultValueForProperty : function(nodeName, prop) {
                    var testElement;
                    var nodeDefaults = defaultValueCache[nodeName];
                    return nodeDefaults || (defaultValueCache[nodeName] = nodeDefaults = {}), prop in nodeDefaults || (testElement = document.createElement(nodeName), nodeDefaults[prop] = testElement[prop]), nodeDefaults[prop];
                },
                injection : YY_START
            };
            module.exports = filter;
        }, {
            161 : 161
        }],
        11 : [function(require, module, dataAndEvents) {
            /**
             * @param {string} target
             * @return {?}
             */
            function each(target) {
                return!!handler.hasOwnProperty(target) || !obj.hasOwnProperty(target) && (idRegex.test(target) ? (handler[target] = true, true) : (obj[target] = true, forOwn(false, "Invalid attribute name: `%s`", target), false));
            }
            /**
             * @param {?} options
             * @param {number} value
             * @return {?}
             */
            function assign(options, value) {
                return null == value || (options.hasBooleanValue && !value || (options.hasNumericValue && isNaN(value) || (options.hasPositiveNumericValue && value < 1 || options.hasOverloadedBooleanValue && value === false)));
            }
            var self = require(10);
            var Block = require(78);
            var encodeURIComponent = require(136);
            var forOwn = require(173);
            /** @type {RegExp} */
            var idRegex = /^[a-zA-Z_][\w\.\-]*$/;
            var obj = {};
            var handler = {};
            var config = {
                children : true,
                dangerouslySetInnerHTML : true,
                key : true,
                ref : true
            };
            var prevChildren = {};
            /**
             * @param {string} name
             * @return {undefined}
             */
            var func = function(name) {
                if (!(config.hasOwnProperty(name) && config[name] || prevChildren.hasOwnProperty(name) && prevChildren[name])) {
                    /** @type {boolean} */
                    prevChildren[name] = true;
                    var key = name.toLowerCase();
                    var fromIndex = self.isCustomAttribute(key) ? key : self.getPossibleStandardName.hasOwnProperty(key) ? self.getPossibleStandardName[key] : null;
                    forOwn(null == fromIndex, "Unknown DOM property %s. Did you mean %s?", name, fromIndex);
                }
            };
            var jQuery = {
                /**
                 * @param {string} key
                 * @return {?}
                 */
                createMarkupForID : function(key) {
                    return self.ID_ATTRIBUTE_NAME + "=" + encodeURIComponent(key);
                },
                /**
                 * @param {Element} node
                 * @param {string} style
                 * @return {undefined}
                 */
                setAttributeForID : function(node, style) {
                    node.setAttribute(self.ID_ATTRIBUTE_NAME, style);
                },
                /**
                 * @param {string} name
                 * @param {number} value
                 * @return {?}
                 */
                createMarkupForProperty : function(name, value) {
                    var options = self.properties.hasOwnProperty(name) ? self.properties[name] : null;
                    if (options) {
                        if (assign(options, value)) {
                            return "";
                        }
                        var paramName = options.attributeName;
                        return options.hasBooleanValue || options.hasOverloadedBooleanValue && value === true ? paramName + '=""' : paramName + "=" + encodeURIComponent(value);
                    }
                    return self.isCustomAttribute(name) ? null == value ? "" : name + "=" + encodeURIComponent(value) : (func(name), null);
                },
                /**
                 * @param {string} key
                 * @param {string} value
                 * @return {?}
                 */
                createMarkupForCustomAttribute : function(key, value) {
                    return each(key) && null != value ? key + "=" + encodeURIComponent(value) : "";
                },
                /**
                 * @param {Element} node
                 * @param {string} name
                 * @param {?} value
                 * @return {undefined}
                 */
                setValueForProperty : function(node, name, value) {
                    var options = self.properties.hasOwnProperty(name) ? self.properties[name] : null;
                    if (options) {
                        var mutationMethod = options.mutationMethod;
                        if (mutationMethod) {
                            mutationMethod(node, value);
                        } else {
                            if (assign(options, value)) {
                                this.deleteValueForProperty(node, name);
                            } else {
                                if (options.mustUseAttribute) {
                                    var i = options.attributeName;
                                    var ns = options.attributeNamespace;
                                    if (ns) {
                                        node.setAttributeNS(ns, i, "" + value);
                                    } else {
                                        if (options.hasBooleanValue || options.hasOverloadedBooleanValue && value === true) {
                                            node.setAttribute(i, "");
                                        } else {
                                            node.setAttribute(i, "" + value);
                                        }
                                    }
                                } else {
                                    var key = options.propertyName;
                                    if (!(options.hasSideEffects && "" + node[key] == "" + value)) {
                                        node[key] = value;
                                    }
                                }
                            }
                        }
                    } else {
                        if (self.isCustomAttribute(name)) {
                            jQuery.setValueForAttribute(node, name, value);
                        } else {
                            func(name);
                        }
                    }
                },
                /**
                 * @param {Element} node
                 * @param {string} name
                 * @param {?} value
                 * @return {undefined}
                 */
                setValueForAttribute : function(node, name, value) {
                    if (each(name)) {
                        if (null == value) {
                            node.removeAttribute(name);
                        } else {
                            node.setAttribute(name, "" + value);
                        }
                    }
                },
                /**
                 * @param {Element} node
                 * @param {string} name
                 * @return {undefined}
                 */
                deleteValueForProperty : function(node, name) {
                    var e = self.properties.hasOwnProperty(name) ? self.properties[name] : null;
                    if (e) {
                        var traverseNode = e.mutationMethod;
                        if (traverseNode) {
                            traverseNode(node, void 0);
                        } else {
                            if (e.mustUseAttribute) {
                                node.removeAttribute(e.attributeName);
                            } else {
                                var key = e.propertyName;
                                var val = self.getDefaultValueForProperty(node.nodeName, key);
                                if (!(e.hasSideEffects && "" + node[key] === val)) {
                                    node[key] = val;
                                }
                            }
                        }
                    } else {
                        if (self.isCustomAttribute(name)) {
                            node.removeAttribute(name);
                        } else {
                            func(name);
                        }
                    }
                }
            };
            Block.measureMethods(jQuery, "DOMPropertyOperations", {
                setValueForProperty : "setValueForProperty",
                setValueForAttribute : "setValueForAttribute",
                deleteValueForProperty : "deleteValueForProperty"
            });
            module.exports = jQuery;
        }, {
            10 : 10,
            136 : 136,
            173 : 173,
            78 : 78
        }],
        12 : [function(require, module, dataAndEvents) {
            /**
             * @param {string} file
             * @return {?}
             */
            function loadFile(file) {
                return file.substring(1, file.indexOf(" "));
            }
            var Block = require(147);
            var normalize = require(152);
            var parentName = require(153);
            var inspect = require(157);
            var debug = require(161);
            /** @type {RegExp} */
            var rreturn = /^(<[^ \/>]+)/;
            /** @type {string} */
            var optgroup = "data-danger-index";
            var JsDiff = {
                /**
                 * @param {Array} files
                 * @return {?}
                 */
                dangerouslyRenderMarkup : function(files) {
                    if (Block.canUseDOM) {
                        void 0;
                    } else {
                        debug(false, "dangerouslyRenderMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString for server rendering.");
                    }
                    var name;
                    var data = {};
                    /** @type {number} */
                    var index = 0;
                    for (;index < files.length;index++) {
                        if (files[index]) {
                            void 0;
                        } else {
                            debug(false, "dangerouslyRenderMarkup(...): Missing markup.");
                        }
                        name = loadFile(files[index]);
                        name = inspect(name) ? name : "*";
                        data[name] = data[name] || [];
                        data[name][index] = files[index];
                    }
                    /** @type {Array} */
                    var items = [];
                    /** @type {number} */
                    var oldItemsLn = 0;
                    for (name in data) {
                        if (data.hasOwnProperty(name)) {
                            var key;
                            var buf = data[name];
                            for (key in buf) {
                                if (buf.hasOwnProperty(key)) {
                                    var ret = buf[key];
                                    buf[key] = ret.replace(rreturn, "$1 " + optgroup + '="' + key + '" ');
                                }
                            }
                            var codeSegments = normalize(buf.join(""), parentName);
                            /** @type {number} */
                            var i = 0;
                            for (;i < codeSegments.length;++i) {
                                var recurring = codeSegments[i];
                                if (recurring.hasAttribute && recurring.hasAttribute(optgroup)) {
                                    /** @type {number} */
                                    key = +recurring.getAttribute(optgroup);
                                    recurring.removeAttribute(optgroup);
                                    if (items.hasOwnProperty(key)) {
                                        debug(false, "Danger: Assigning to an already-occupied result index.");
                                    } else {
                                        void 0;
                                    }
                                    items[key] = recurring;
                                    oldItemsLn += 1;
                                } else {
                                    console.error("Danger: Discarding unexpected node:", recurring);
                                }
                            }
                        }
                    }
                    return oldItemsLn !== items.length ? debug(false, "Danger: Did not assign to every index of resultList.") : void 0, items.length !== files.length ? debug(false, "Danger: Expected markup to render %s nodes, but rendered %s.", files.length, items.length) : void 0, items;
                },
                /**
                 * @param {Node} node
                 * @param {(Node|string)} opts
                 * @return {undefined}
                 */
                dangerouslyReplaceNodeWithMarkup : function(node, opts) {
                    if (Block.canUseDOM) {
                        void 0;
                    } else {
                        debug(false, "dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.");
                    }
                    if (opts) {
                        void 0;
                    } else {
                        debug(false, "dangerouslyReplaceNodeWithMarkup(...): Missing markup.");
                    }
                    if ("html" === node.tagName.toLowerCase()) {
                        debug(false, "dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().");
                    } else {
                        void 0;
                    }
                    var backupText;
                    backupText = "string" == typeof opts ? normalize(opts, parentName)[0] : opts;
                    node.parentNode.replaceChild(backupText, node);
                }
            };
            module.exports = JsDiff;
        }, {
            147 : 147,
            152 : 152,
            153 : 153,
            157 : 157,
            161 : 161
        }],
        13 : [function(require, module, dataAndEvents) {
            var getActual = require(166);
            /** @type {Array} */
            var JsDiff = [getActual({
                ResponderEventPlugin : null
            }), getActual({
                SimpleEventPlugin : null
            }), getActual({
                TapEventPlugin : null
            }), getActual({
                EnterLeaveEventPlugin : null
            }), getActual({
                ChangeEventPlugin : null
            }), getActual({
                SelectEventPlugin : null
            }), getActual({
                BeforeInputEventPlugin : null
            })];
            /** @type {Array} */
            module.exports = JsDiff;
        }, {
            166 : 166
        }],
        14 : [function(require, module, dataAndEvents) {
            var Block = require(15);
            var lang = require(19);
            var $ = require(109);
            var nodes = require(72);
            var getActual = require(166);
            var topLevelTypes = Block.topLevelTypes;
            var len = nodes.getFirstReactDOM;
            var $scope = {
                mouseEnter : {
                    registrationName : getActual({
                        onMouseEnter : null
                    }),
                    dependencies : [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
                },
                mouseLeave : {
                    registrationName : getActual({
                        onMouseLeave : null
                    }),
                    dependencies : [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
                }
            };
            /** @type {Array} */
            var events = [null, null];
            var JsDiff = {
                eventTypes : $scope,
                /**
                 * @param {string} topLevelType
                 * @param {(number|string)} obj
                 * @param {string} topLevelTargetID
                 * @param {Event} nativeEvent
                 * @param {?} args
                 * @return {?}
                 */
                extractEvents : function(topLevelType, obj, topLevelTargetID, nativeEvent, args) {
                    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
                        return null;
                    }
                    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
                        return null;
                    }
                    var element;
                    if (obj.window === obj) {
                        /** @type {(number|string)} */
                        element = obj;
                    } else {
                        var doc = obj.ownerDocument;
                        element = doc ? doc.defaultView || doc.parentWindow : window;
                    }
                    var target;
                    var el;
                    /** @type {string} */
                    var details = "";
                    /** @type {string} */
                    var options = "";
                    if (topLevelType === topLevelTypes.topMouseOut ? (target = obj, details = topLevelTargetID, el = len(nativeEvent.relatedTarget || nativeEvent.toElement), el ? options = nodes.getID(el) : el = element, el = el || element) : (target = element, el = obj, options = topLevelTargetID), target === el) {
                        return null;
                    }
                    var event = $.getPooled($scope.mouseLeave, details, nativeEvent, args);
                    /** @type {string} */
                    event.type = "mouseleave";
                    event.target = target;
                    event.relatedTarget = el;
                    var evt = $.getPooled($scope.mouseEnter, options, nativeEvent, args);
                    return evt.type = "mouseenter", evt.target = el, evt.relatedTarget = target, lang.accumulateEnterLeaveDispatches(event, evt, details, options), events[0] = event, events[1] = evt, events;
                }
            };
            module.exports = JsDiff;
        }, {
            109 : 109,
            15 : 15,
            166 : 166,
            19 : 19,
            72 : 72
        }],
        15 : [function($sanitize, module, dataAndEvents) {
            var throttledUpdate = $sanitize(165);
            var PropagationPhases = throttledUpdate({
                bubbled : null,
                captured : null
            });
            var topLevelTypes = throttledUpdate({
                topAbort : null,
                topBlur : null,
                topCanPlay : null,
                topCanPlayThrough : null,
                topChange : null,
                topClick : null,
                topCompositionEnd : null,
                topCompositionStart : null,
                topCompositionUpdate : null,
                topContextMenu : null,
                topCopy : null,
                topCut : null,
                topDoubleClick : null,
                topDrag : null,
                topDragEnd : null,
                topDragEnter : null,
                topDragExit : null,
                topDragLeave : null,
                topDragOver : null,
                topDragStart : null,
                topDrop : null,
                topDurationChange : null,
                topEmptied : null,
                topEncrypted : null,
                topEnded : null,
                topError : null,
                topFocus : null,
                topInput : null,
                topKeyDown : null,
                topKeyPress : null,
                topKeyUp : null,
                topLoad : null,
                topLoadedData : null,
                topLoadedMetadata : null,
                topLoadStart : null,
                topMouseDown : null,
                topMouseMove : null,
                topMouseOut : null,
                topMouseOver : null,
                topMouseUp : null,
                topPaste : null,
                topPause : null,
                topPlay : null,
                topPlaying : null,
                topProgress : null,
                topRateChange : null,
                topReset : null,
                topScroll : null,
                topSeeked : null,
                topSeeking : null,
                topSelectionChange : null,
                topStalled : null,
                topSubmit : null,
                topSuspend : null,
                topTextInput : null,
                topTimeUpdate : null,
                topTouchCancel : null,
                topTouchEnd : null,
                topTouchMove : null,
                topTouchStart : null,
                topVolumeChange : null,
                topWaiting : null,
                topWheel : null
            });
            var JsDiff = {
                topLevelTypes : topLevelTypes,
                PropagationPhases : PropagationPhases
            };
            module.exports = JsDiff;
        }, {
            165 : 165
        }],
        16 : [function(require, module, dataAndEvents) {
            /**
             * @return {undefined}
             */
            function appendModelPrefix() {
                var dontCloseTags = received && (received.traverseTwoPhase && received.traverseEnterLeave);
                indexOf(dontCloseTags, "InstanceHandle not injected before use!");
            }
            var config = require(17);
            var assert = require(18);
            var Block = require(61);
            var callback = require(115);
            var a = require(124);
            var getActual = require(161);
            var indexOf = require(173);
            var map = {};
            /** @type {null} */
            var basis = null;
            /**
             * @param {Object} event
             * @param {boolean} recurring
             * @return {undefined}
             */
            var next = function(event, recurring) {
                if (event) {
                    assert.executeDispatchesInOrder(event, recurring);
                    if (!event.isPersistent()) {
                        event.constructor.release(event);
                    }
                }
            };
            /**
             * @param {Object} e
             * @return {?}
             */
            var onmessage = function(e) {
                return next(e, true);
            };
            /**
             * @param {Object} name
             * @return {?}
             */
            var code = function(name) {
                return next(name, false);
            };
            /** @type {null} */
            var received = null;
            var JsDiff = {
                injection : {
                    injectMount : assert.injection.injectMount,
                    /**
                     * @param {?} data
                     * @return {undefined}
                     */
                    injectInstanceHandle : function(data) {
                        received = data;
                        appendModelPrefix();
                    },
                    /**
                     * @return {?}
                     */
                    getInstanceHandle : function() {
                        return appendModelPrefix(), received;
                    },
                    injectEventPluginOrder : config.injectEventPluginOrder,
                    injectEventPluginsByName : config.injectEventPluginsByName
                },
                eventNameDispatchConfigs : config.eventNameDispatchConfigs,
                registrationNameModules : config.registrationNameModules,
                /**
                 * @param {?} key
                 * @param {?} dataAndEvents
                 * @param {?} value
                 * @return {undefined}
                 */
                putListener : function(key, dataAndEvents, value) {
                    if ("function" != typeof value) {
                        getActual(false, "Expected %s listener to be a function, instead got type %s", dataAndEvents, typeof value);
                    } else {
                        void 0;
                    }
                    var flags = map[dataAndEvents] || (map[dataAndEvents] = {});
                    flags[key] = value;
                    var jQuery = config.registrationNameModules[dataAndEvents];
                    if (jQuery) {
                        if (jQuery.didPutListener) {
                            jQuery.didPutListener(key, dataAndEvents, value);
                        }
                    }
                },
                /**
                 * @param {?} id
                 * @param {?} elt
                 * @return {?}
                 */
                getListener : function(id, elt) {
                    var item = map[elt];
                    return item && item[id];
                },
                /**
                 * @param {?} name
                 * @param {(Error|string)} id
                 * @return {undefined}
                 */
                deleteListener : function(name, id) {
                    var elem = config.registrationNameModules[id];
                    if (elem) {
                        if (elem.willDeleteListener) {
                            elem.willDeleteListener(name, id);
                        }
                    }
                    var item = map[id];
                    if (item) {
                        delete item[name];
                    }
                },
                /**
                 * @param {?} id
                 * @return {undefined}
                 */
                deleteAllListeners : function(id) {
                    var n;
                    for (n in map) {
                        if (map[n][id]) {
                            var source = config.registrationNameModules[n];
                            if (source) {
                                if (source.willDeleteListener) {
                                    source.willDeleteListener(id, n);
                                }
                            }
                            delete map[n][id];
                        }
                    }
                },
                /**
                 * @param {string} topLevelType
                 * @param {string} walkers
                 * @param {string} topLevelTargetID
                 * @param {Event} nativeEvent
                 * @param {?} details
                 * @return {?}
                 */
                extractEvents : function(topLevelType, walkers, topLevelTargetID, nativeEvent, details) {
                    var basis;
                    var plugins = config.plugins;
                    /** @type {number} */
                    var i = 0;
                    for (;i < plugins.length;i++) {
                        var possiblePlugin = plugins[i];
                        if (possiblePlugin) {
                            var events = possiblePlugin.extractEvents(topLevelType, walkers, topLevelTargetID, nativeEvent, details);
                            if (events) {
                                basis = callback(basis, events);
                            }
                        }
                    }
                    return basis;
                },
                /**
                 * @param {?} events
                 * @return {undefined}
                 */
                enqueueEvents : function(events) {
                    if (events) {
                        basis = callback(basis, events);
                    }
                },
                /**
                 * @param {boolean} recurring
                 * @return {undefined}
                 */
                processEventQueue : function(recurring) {
                    var invoked = basis;
                    /** @type {null} */
                    basis = null;
                    if (recurring) {
                        a(invoked, onmessage);
                    } else {
                        a(invoked, code);
                    }
                    if (basis) {
                        getActual(false, "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
                    } else {
                        void 0;
                    }
                    Block.rethrowCaughtError();
                },
                /**
                 * @return {undefined}
                 */
                __purge : function() {
                    map = {};
                },
                /**
                 * @return {?}
                 */
                __getListenerBank : function() {
                    return map;
                }
            };
            module.exports = JsDiff;
        }, {
            115 : 115,
            124 : 124,
            161 : 161,
            17 : 17,
            173 : 173,
            18 : 18,
            61 : 61
        }],
        17 : [function($sanitize, module, dataAndEvents) {
            /**
             * @return {undefined}
             */
            function addPlugin() {
                if (reserved) {
                    var i;
                    for (i in object) {
                        var value = object[i];
                        var name = reserved.indexOf(i);
                        if (name > -1 ? void 0 : indexOf(false, "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.", i), !config.plugins[name]) {
                            if (value.extractEvents) {
                                void 0;
                            } else {
                                indexOf(false, "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.", i);
                            }
                            config.plugins[name] = value;
                            var iterable = value.eventTypes;
                            var key;
                            for (key in iterable) {
                                if (invoke(iterable[key], value, key)) {
                                    void 0;
                                } else {
                                    indexOf(false, "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", key, i);
                                }
                            }
                        }
                    }
                }
            }
            /**
             * @param {Object} func
             * @param {?} fn
             * @param {string} method
             * @return {?}
             */
            function invoke(func, fn, method) {
                if (config.eventNameDispatchConfigs.hasOwnProperty(method)) {
                    indexOf(false, "EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.", method);
                } else {
                    void 0;
                }
                /** @type {Object} */
                config.eventNameDispatchConfigs[method] = func;
                var constants = func.phasedRegistrationNames;
                if (constants) {
                    var constant;
                    for (constant in constants) {
                        if (constants.hasOwnProperty(constant)) {
                            var xdomain = constants[constant];
                            request(xdomain, fn, method);
                        }
                    }
                    return true;
                }
                return!!func.registrationName && (request(func.registrationName, fn, method), true);
            }
            /**
             * @param {?} method
             * @param {?} route
             * @param {string} name
             * @return {undefined}
             */
            function request(method, route, name) {
                if (config.registrationNameModules[method]) {
                    indexOf(false, "EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.", method);
                } else {
                    void 0;
                }
                config.registrationNameModules[method] = route;
                config.registrationNameDependencies[method] = route.eventTypes[name].dependencies;
            }
            var indexOf = $sanitize(161);
            /** @type {null} */
            var reserved = null;
            var object = {};
            var config = {
                plugins : [],
                eventNameDispatchConfigs : {},
                registrationNameModules : {},
                registrationNameDependencies : {},
                /**
                 * @param {?} elems
                 * @return {undefined}
                 */
                injectEventPluginOrder : function(elems) {
                    if (reserved) {
                        indexOf(false, "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
                    } else {
                        void 0;
                    }
                    /** @type {Array.<?>} */
                    reserved = Array.prototype.slice.call(elems);
                    addPlugin();
                },
                /**
                 * @param {Object} methods
                 * @return {undefined}
                 */
                injectEventPluginsByName : function(methods) {
                    /** @type {boolean} */
                    var b = false;
                    var property;
                    for (property in methods) {
                        if (methods.hasOwnProperty(property)) {
                            var value = methods[property];
                            if (!(object.hasOwnProperty(property) && object[property] === value)) {
                                if (object[property]) {
                                    indexOf(false, "EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.", property);
                                } else {
                                    void 0;
                                }
                                object[property] = value;
                                /** @type {boolean} */
                                b = true;
                            }
                        }
                    }
                    if (b) {
                        addPlugin();
                    }
                },
                /**
                 * @param {Object} event
                 * @return {?}
                 */
                getPluginModuleForEvent : function(event) {
                    var dispatchConfig = event.dispatchConfig;
                    if (dispatchConfig.registrationName) {
                        return config.registrationNameModules[dispatchConfig.registrationName] || null;
                    }
                    var phase;
                    for (phase in dispatchConfig.phasedRegistrationNames) {
                        if (dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
                            var PluginModule = config.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
                            if (PluginModule) {
                                return PluginModule;
                            }
                        }
                    }
                    return null;
                },
                /**
                 * @return {undefined}
                 */
                _resetEventPlugins : function() {
                    /** @type {null} */
                    reserved = null;
                    var property;
                    for (property in object) {
                        if (object.hasOwnProperty(property)) {
                            delete object[property];
                        }
                    }
                    /** @type {number} */
                    config.plugins.length = 0;
                    var files = config.eventNameDispatchConfigs;
                    var fileName;
                    for (fileName in files) {
                        if (files.hasOwnProperty(fileName)) {
                            delete files[fileName];
                        }
                    }
                    var styles = config.registrationNameModules;
                    var style;
                    for (style in styles) {
                        if (styles.hasOwnProperty(style)) {
                            delete styles[style];
                        }
                    }
                }
            };
            module.exports = config;
        }, {
            161 : 161
        }],
        18 : [function(require, module, dataAndEvents) {
            /**
             * @param {?} topLevelType
             * @return {?}
             */
            function isEndish(topLevelType) {
                return topLevelType === topLevelTypes.topMouseUp || (topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel);
            }
            /**
             * @param {?} topLevelType
             * @return {?}
             */
            function isMoveish(topLevelType) {
                return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
            }
            /**
             * @param {?} topLevelType
             * @return {?}
             */
            function isStartish(topLevelType) {
                return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
            }
            /**
             * @param {Object} e
             * @param {boolean} recurring
             * @param {Function} callback
             * @param {?} attr
             * @return {undefined}
             */
            function update(e, recurring, callback, attr) {
                var node = e.type || "unknown-event";
                e.currentTarget = me.Mount.getNode(attr);
                if (recurring) {
                    jQuery.invokeGuardedCallbackWithCatch(node, callback, e, attr);
                } else {
                    jQuery.invokeGuardedCallback(node, callback, e, attr);
                }
                /** @type {null} */
                e.currentTarget = null;
            }
            /**
             * @param {Object} event
             * @param {boolean} recurring
             * @return {undefined}
             */
            function next(event, recurring) {
                var names = event._dispatchListeners;
                var original = event._dispatchIDs;
                if (fail(event), Array.isArray(names)) {
                    /** @type {number} */
                    var i = 0;
                    for (;i < names.length && !event.isPropagationStopped();i++) {
                        update(event, recurring, names[i], original[i]);
                    }
                } else {
                    if (names) {
                        update(event, recurring, names, original);
                    }
                }
                /** @type {null} */
                event._dispatchListeners = null;
                /** @type {null} */
                event._dispatchIDs = null;
            }
            /**
             * @param {string} event
             * @return {?}
             */
            function ok(event) {
                var dispatchListeners = event._dispatchListeners;
                var dispatchIDs = event._dispatchIDs;
                if (fail(event), Array.isArray(dispatchListeners)) {
                    /** @type {number} */
                    var i = 0;
                    for (;i < dispatchListeners.length && !event.isPropagationStopped();i++) {
                        if (dispatchListeners[i](event, dispatchIDs[i])) {
                            return dispatchIDs[i];
                        }
                    }
                } else {
                    if (dispatchListeners && dispatchListeners(event, dispatchIDs)) {
                        return dispatchIDs;
                    }
                }
                return null;
            }
            /**
             * @param {string} event
             * @return {?}
             */
            function f3(event) {
                var events = ok(event);
                return event._dispatchIDs = null, event._dispatchListeners = null, events;
            }
            /**
             * @param {?} event
             * @return {?}
             */
            function exports(event) {
                fail(event);
                var match = event._dispatchListeners;
                var message = event._dispatchIDs;
                if (Array.isArray(match)) {
                    getActual(false, "executeDirectDispatch(...): Invalid `event`.");
                } else {
                    void 0;
                }
                var count = match ? match(event, message) : null;
                return event._dispatchListeners = null, event._dispatchIDs = null, count;
            }
            /**
             * @param {?} event
             * @return {?}
             */
            function f2(event) {
                return!!event._dispatchListeners;
            }
            var fail;
            var Block = require(15);
            var jQuery = require(61);
            var getActual = require(161);
            var lang = require(173);
            var me = {
                Mount : null,
                /**
                 * @param {Function} obj
                 * @return {undefined}
                 */
                injectMount : function(obj) {
                    /** @type {Function} */
                    me.Mount = obj;
                    lang(obj && (obj.getNode && obj.getID), "EventPluginUtils.injection.injectMount(...): Injected Mount module is missing getNode or getID.");
                }
            };
            var topLevelTypes = Block.topLevelTypes;
            /**
             * @param {?} event
             * @return {undefined}
             */
            fail = function(event) {
                var header = event._dispatchListeners;
                var names = event._dispatchIDs;
                /** @type {boolean} */
                var object = Array.isArray(header);
                /** @type {boolean} */
                var a = Array.isArray(names);
                var b = a ? names.length : names ? 1 : 0;
                var type = object ? header.length : header ? 1 : 0;
                lang(a === object && b === type, "EventPluginUtils: Invalid `event`.");
            };
            var JsDiff = {
                /** @type {function (?): ?} */
                isEndish : isEndish,
                /** @type {function (?): ?} */
                isMoveish : isMoveish,
                /** @type {function (?): ?} */
                isStartish : isStartish,
                /** @type {function (?): ?} */
                executeDirectDispatch : exports,
                /** @type {function (Object, boolean): undefined} */
                executeDispatchesInOrder : next,
                /** @type {function (string): ?} */
                executeDispatchesInOrderStopAtTrue : f3,
                /** @type {function (?): ?} */
                hasDispatches : f2,
                /**
                 * @param {?} id
                 * @return {?}
                 */
                getNode : function(id) {
                    return me.Mount.getNode(id);
                },
                /**
                 * @param {?} id
                 * @return {?}
                 */
                getID : function(id) {
                    return me.Mount.getID(id);
                },
                injection : me
            };
            module.exports = JsDiff;
        }, {
            15 : 15,
            161 : 161,
            173 : 173,
            61 : 61
        }],
        19 : [function(require, module, dataAndEvents) {
            /**
             * @param {?} id
             * @param {Object} event
             * @param {?} propagationPhase
             * @return {?}
             */
            function listenerAtPhase(id, event, propagationPhase) {
                var lowerTagName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
                return indexOf(id, lowerTagName);
            }
            /**
             * @param {?} id
             * @param {?} upwards
             * @param {Object} event
             * @return {undefined}
             */
            function r20(id, upwards, event) {
                factory(id, "Dispatching id must not be null");
                var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
                var listener = listenerAtPhase(id, event, phase);
                if (listener) {
                    event._dispatchListeners = accumulate(event._dispatchListeners, listener);
                    event._dispatchIDs = accumulate(event._dispatchIDs, id);
                }
            }
            /**
             * @param {Object} event
             * @return {undefined}
             */
            function f3(event) {
                if (event) {
                    if (event.dispatchConfig.phasedRegistrationNames) {
                        nodes.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, r20, event);
                    }
                }
            }
            /**
             * @param {Object} event
             * @return {undefined}
             */
            function f2(event) {
                if (event) {
                    if (event.dispatchConfig.phasedRegistrationNames) {
                        nodes.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, r20, event);
                    }
                }
            }
            /**
             * @param {?} id
             * @param {Array} async
             * @param {Object} event
             * @return {undefined}
             */
            function test(id, async, event) {
                if (event && event.dispatchConfig.registrationName) {
                    var lowerTagName = event.dispatchConfig.registrationName;
                    var listener = indexOf(id, lowerTagName);
                    if (listener) {
                        event._dispatchListeners = accumulate(event._dispatchListeners, listener);
                        event._dispatchIDs = accumulate(event._dispatchIDs, id);
                    }
                }
            }
            /**
             * @param {Object} event
             * @return {undefined}
             */
            function fix(event) {
                if (event) {
                    if (event.dispatchConfig.registrationName) {
                        test(event.dispatchMarker, null, event);
                    }
                }
            }
            /**
             * @param {?} expr
             * @return {undefined}
             */
            function generateVerbatim(expr) {
                parenthesize(expr, f3);
            }
            /**
             * @param {?} rvalue
             * @return {undefined}
             */
            function assign(rvalue) {
                parenthesize(rvalue, f2);
            }
            /**
             * @param {?} thisObj
             * @param {?} err
             * @param {string} args
             * @param {string} dir
             * @return {undefined}
             */
            function each(thisObj, err, args, dir) {
                nodes.injection.getInstanceHandle().traverseEnterLeave(args, dir, test, thisObj, err);
            }
            /**
             * @param {?} expr
             * @return {undefined}
             */
            function generateExpression(expr) {
                parenthesize(expr, fix);
            }
            var Block = require(15);
            var nodes = require(16);
            var factory = require(173);
            var accumulate = require(115);
            var parenthesize = require(124);
            var PropagationPhases = Block.PropagationPhases;
            var indexOf = nodes.getListener;
            var JsDiff = {
                /** @type {function (?): undefined} */
                accumulateTwoPhaseDispatches : generateVerbatim,
                /** @type {function (?): undefined} */
                accumulateTwoPhaseDispatchesSkipTarget : assign,
                /** @type {function (?): undefined} */
                accumulateDirectDispatches : generateExpression,
                /** @type {function (?, ?, string, string): undefined} */
                accumulateEnterLeaveDispatches : each
            };
            module.exports = JsDiff;
        }, {
            115 : 115,
            124 : 124,
            15 : 15,
            16 : 16,
            173 : 173
        }],
        20 : [function(require, module, dataAndEvents) {
            /**
             * @param {string} name
             * @return {undefined}
             */
            function create(name) {
                /** @type {string} */
                this._root = name;
                this._startText = this.getText();
                /** @type {null} */
                this._fallbackText = null;
            }
            var assert = require(25);
            var createObject = require(24);
            var xhr = require(131);
            createObject(create.prototype, {
                /**
                 * @return {undefined}
                 */
                destructor : function() {
                    /** @type {null} */
                    this._root = null;
                    /** @type {null} */
                    this._startText = null;
                    /** @type {null} */
                    this._fallbackText = null;
                },
                /**
                 * @return {?}
                 */
                getText : function() {
                    return "value" in this._root ? this._root.value : this._root[xhr()];
                },
                /**
                 * @return {?}
                 */
                getData : function() {
                    if (this._fallbackText) {
                        return this._fallbackText;
                    }
                    var j;
                    var i;
                    var frames = this._startText;
                    var length = frames.length;
                    var a = this.getText();
                    var al = a.length;
                    /** @type {number} */
                    j = 0;
                    for (;j < length && frames[j] === a[j];j++) {
                    }
                    /** @type {number} */
                    var l = length - j;
                    /** @type {number} */
                    i = 1;
                    for (;i <= l && frames[length - i] === a[al - i];i++) {
                    }
                    /** @type {(number|undefined)} */
                    var attributes = i > 1 ? 1 - i : void 0;
                    return this._fallbackText = a.slice(j, attributes), this._fallbackText;
                }
            });
            assert.addPoolingTo(create);
            /** @type {function (string): undefined} */
            module.exports = create;
        }, {
            131 : 131,
            24 : 24,
            25 : 25
        }],
        21 : [function(require, module, dataAndEvents) {
            var raw;
            var nodes = require(10);
            var Block = require(147);
            var value = nodes.injection.MUST_USE_ATTRIBUTE;
            var gid = nodes.injection.MUST_USE_PROPERTY;
            var url = nodes.injection.HAS_BOOLEAN_VALUE;
            var flags = nodes.injection.HAS_SIDE_EFFECTS;
            var minIdx = nodes.injection.HAS_NUMERIC_VALUE;
            var span = nodes.injection.HAS_POSITIVE_NUMERIC_VALUE;
            var download = nodes.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
            if (Block.canUseDOM) {
                /** @type {(DOMImplementation|null)} */
                var implementation = document.implementation;
                /** @type {(boolean|null)} */
                raw = implementation && (implementation.hasFeature && implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1"));
            }
            var JsDiff = {
                isCustomAttribute : RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
                Properties : {
                    accept : null,
                    acceptCharset : null,
                    accessKey : null,
                    action : null,
                    allowFullScreen : value | url,
                    allowTransparency : value,
                    alt : null,
                    async : url,
                    autoComplete : null,
                    autoPlay : url,
                    capture : value | url,
                    cellPadding : null,
                    cellSpacing : null,
                    charSet : value,
                    challenge : value,
                    checked : gid | url,
                    classID : value,
                    className : raw ? value : gid,
                    cols : value | span,
                    colSpan : null,
                    content : null,
                    contentEditable : null,
                    contextMenu : value,
                    controls : gid | url,
                    coords : null,
                    crossOrigin : null,
                    data : null,
                    dateTime : value,
                    default : url,
                    defer : url,
                    dir : null,
                    disabled : value | url,
                    download : download,
                    draggable : null,
                    encType : null,
                    form : value,
                    formAction : value,
                    formEncType : value,
                    formMethod : value,
                    formNoValidate : url,
                    formTarget : value,
                    frameBorder : value,
                    headers : null,
                    height : value,
                    hidden : value | url,
                    high : null,
                    href : null,
                    hrefLang : null,
                    htmlFor : null,
                    httpEquiv : null,
                    icon : null,
                    id : gid,
                    inputMode : value,
                    integrity : null,
                    is : value,
                    keyParams : value,
                    keyType : value,
                    kind : null,
                    label : null,
                    lang : null,
                    list : value,
                    loop : gid | url,
                    low : null,
                    manifest : value,
                    marginHeight : null,
                    marginWidth : null,
                    max : null,
                    maxLength : value,
                    media : value,
                    mediaGroup : null,
                    method : null,
                    min : null,
                    minLength : value,
                    multiple : gid | url,
                    muted : gid | url,
                    name : null,
                    nonce : value,
                    noValidate : url,
                    open : url,
                    optimum : null,
                    pattern : null,
                    placeholder : null,
                    poster : null,
                    preload : null,
                    radioGroup : null,
                    readOnly : gid | url,
                    rel : null,
                    required : url,
                    reversed : url,
                    role : value,
                    rows : value | span,
                    rowSpan : null,
                    sandbox : null,
                    scope : null,
                    scoped : url,
                    scrolling : null,
                    seamless : value | url,
                    selected : gid | url,
                    shape : null,
                    size : value | span,
                    sizes : value,
                    span : span,
                    spellCheck : null,
                    src : null,
                    srcDoc : gid,
                    srcLang : null,
                    srcSet : value,
                    start : minIdx,
                    step : null,
                    style : null,
                    summary : null,
                    tabIndex : null,
                    target : null,
                    title : null,
                    type : null,
                    useMap : null,
                    value : gid | flags,
                    width : value,
                    wmode : value,
                    wrap : null,
                    about : value,
                    datatype : value,
                    inlist : value,
                    prefix : value,
                    property : value,
                    resource : value,
                    typeof : value,
                    vocab : value,
                    autoCapitalize : value,
                    autoCorrect : value,
                    autoSave : null,
                    color : null,
                    itemProp : value,
                    itemScope : value | url,
                    itemType : value,
                    itemID : value,
                    itemRef : value,
                    results : null,
                    security : value,
                    unselectable : value
                },
                DOMAttributeNames : {
                    acceptCharset : "accept-charset",
                    className : "class",
                    htmlFor : "for",
                    httpEquiv : "http-equiv"
                },
                DOMPropertyNames : {
                    autoComplete : "autocomplete",
                    autoFocus : "autofocus",
                    autoPlay : "autoplay",
                    autoSave : "autosave",
                    encType : "encoding",
                    hrefLang : "hreflang",
                    radioGroup : "radiogroup",
                    spellCheck : "spellcheck",
                    srcDoc : "srcdoc",
                    srcSet : "srcset"
                }
            };
            module.exports = JsDiff;
        }, {
            10 : 10,
            147 : 147
        }],
        22 : [function(require, module, dataAndEvents) {
            var ReactLink = require(70);
            var Hash = require(90);
            var JsDiff = {
                /**
                 * @param {string} key
                 * @return {?}
                 */
                linkState : function(key) {
                    return new ReactLink(this.state[key], Hash.createStateKeySetter(this, key));
                }
            };
            module.exports = JsDiff;
        }, {
            70 : 70,
            90 : 90
        }],
        23 : [function(require, module, dataAndEvents) {
            /**
             * @param {Object} bind
             * @return {undefined}
             */
            function filter(bind) {
                if (null != bind.checkedLink && null != bind.valueLink) {
                    hasOwnProperty(false, "Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don't want to use valueLink and vice versa.");
                } else {
                    void 0;
                }
            }
            /**
             * @param {Object} item
             * @return {undefined}
             */
            function getter(item) {
                filter(item);
                if (null != item.value || null != item.onChange) {
                    hasOwnProperty(false, "Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don't want to use valueLink.");
                } else {
                    void 0;
                }
            }
            /**
             * @param {Object} item
             * @return {undefined}
             */
            function fn(item) {
                filter(item);
                if (null != item.checked || null != item.onChange) {
                    hasOwnProperty(false, "Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don't want to use checkedLink");
                } else {
                    void 0;
                }
            }
            /**
             * @param {Object} s
             * @return {?}
             */
            function escapeInnerText(s) {
                if (s) {
                    var b = s.getName();
                    if (b) {
                        return " Check the render method of `" + b + "`.";
                    }
                }
                return "";
            }
            var helper = require(82);
            var clone = require(81);
            var hasOwnProperty = require(161);
            var getActual = require(173);
            var noInputTypes = {
                button : true,
                checkbox : true,
                image : true,
                hidden : true,
                radio : true,
                reset : true,
                submit : true
            };
            var obj = {
                /**
                 * @param {string} name
                 * @param {Function} recurring
                 * @param {Object} deepDataAndEvents
                 * @return {?}
                 */
                value : function(name, recurring, deepDataAndEvents) {
                    return!name[recurring] || (noInputTypes[name.type] || (name.onChange || (name.readOnly || name.disabled))) ? null : new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
                },
                /**
                 * @param {string} name
                 * @param {Function} recurring
                 * @param {Object} deepDataAndEvents
                 * @return {?}
                 */
                checked : function(name, recurring, deepDataAndEvents) {
                    return!name[recurring] || (name.onChange || (name.readOnly || name.disabled)) ? null : new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
                },
                onChange : helper.func
            };
            var jsonList = {};
            var JsDiff = {
                /**
                 * @param {string} context
                 * @param {Object} name
                 * @param {?} source
                 * @return {undefined}
                 */
                checkPropTypes : function(context, name, source) {
                    var key;
                    for (key in obj) {
                        if (obj.hasOwnProperty(key)) {
                            var res = obj[key](name, key, context, clone.prop)
                        }
                        if (res instanceof Error && !(res.message in jsonList)) {
                            /** @type {boolean} */
                            jsonList[res.message] = true;
                            var syntax = escapeInnerText(source);
                            getActual(false, "Failed form propType: %s%s", res.message, syntax);
                        }
                    }
                },
                /**
                 * @param {Object} item
                 * @return {?}
                 */
                getValue : function(item) {
                    return item.valueLink ? (getter(item), item.valueLink.value) : item.value;
                },
                /**
                 * @param {Element} item
                 * @return {?}
                 */
                getChecked : function(item) {
                    return item.checkedLink ? (fn(item), item.checkedLink.value) : item.checked;
                },
                /**
                 * @param {Object} item
                 * @param {Event} e
                 * @return {?}
                 */
                executeOnChange : function(item, e) {
                    return item.valueLink ? (getter(item), item.valueLink.requestChange(e.target.value)) : item.checkedLink ? (fn(item), item.checkedLink.requestChange(e.target.checked)) : item.onChange ? item.onChange.call(void 0, e) : void 0;
                }
            };
            module.exports = JsDiff;
        }, {
            161 : 161,
            173 : 173,
            81 : 81,
            82 : 82
        }],
        24 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @return {?}
             */
            function forEach(name, recurring) {
                if (null == name) {
                    throw new TypeError("Object.assign target cannot be null or undefined");
                }
                var ret = Object(name);
                /** @type {function (this:Object, *): boolean} */
                var hasOwnProperty = Object.prototype.hasOwnProperty;
                /** @type {number} */
                var j = 1;
                for (;j < arguments.length;j++) {
                    var arr = arguments[j];
                    if (null != arr) {
                        var object = Object(arr);
                        var key;
                        for (key in object) {
                            if (hasOwnProperty.call(object, key)) {
                                ret[key] = object[key];
                            }
                        }
                    }
                }
                return ret;
            }
            /** @type {function (string, Function): ?} */
            module.exports = forEach;
        }, {}],
        25 : [function($sanitize, module, dataAndEvents) {
            var fail = $sanitize(161);
            /**
             * @param {Object} recurring
             * @return {?}
             */
            var destroy = function(recurring) {
                var Klass = this;
                if (Klass.instancePool.length) {
                    var uniqs = Klass.instancePool.pop();
                    return Klass.call(uniqs, recurring), uniqs;
                }
                return new Klass(recurring);
            };
            /**
             * @param {Array} a1
             * @param {Array} a2
             * @return {?}
             */
            var isEqual = function(a1, a2) {
                var Klass = this;
                if (Klass.instancePool.length) {
                    var particle = Klass.instancePool.pop();
                    return Klass.call(particle, a1, a2), particle;
                }
                return new Klass(a1, a2);
            };
            /**
             * @param {Array} a1
             * @param {Array} a2
             * @param {boolean} a3
             * @return {?}
             */
            var implement = function(a1, a2, a3) {
                var Klass = this;
                if (Klass.instancePool.length) {
                    var uniqs = Klass.instancePool.pop();
                    return Klass.call(uniqs, a1, a2, a3), uniqs;
                }
                return new Klass(a1, a2, a3);
            };
            /**
             * @param {?} a1
             * @param {?} a2
             * @param {?} a3
             * @param {?} a4
             * @return {?}
             */
            var init = function(a1, a2, a3, a4) {
                var Klass = this;
                if (Klass.instancePool.length) {
                    var uniqs = Klass.instancePool.pop();
                    return Klass.call(uniqs, a1, a2, a3, a4), uniqs;
                }
                return new Klass(a1, a2, a3, a4);
            };
            /**
             * @param {?} a1
             * @param {?} a2
             * @param {?} a3
             * @param {?} a4
             * @param {?} a5
             * @return {?}
             */
            var open = function(a1, a2, a3, a4, a5) {
                var Klass = this;
                if (Klass.instancePool.length) {
                    var uniqs = Klass.instancePool.pop();
                    return Klass.call(uniqs, a1, a2, a3, a4, a5), uniqs;
                }
                return new Klass(a1, a2, a3, a4, a5);
            };
            /**
             * @param {string} value
             * @return {undefined}
             */
            var ok = function(value) {
                var Klass = this;
                if (value instanceof Klass) {
                    void 0;
                } else {
                    fail(false, "Trying to release an instance into a pool of a different type.");
                }
                value.destructor();
                if (Klass.instancePool.length < Klass.poolSize) {
                    Klass.instancePool.push(value);
                }
            };
            /** @type {number} */
            var POST = 10;
            /** @type {function (Object): ?} */
            var HTTPS_TEST_DOMAIN = destroy;
            /**
             * @param {Function} name
             * @param {Function} var_args
             * @return {?}
             */
            var create = function(name, var_args) {
                /** @type {Function} */
                var options = name;
                return options.instancePool = [], options.getPooled = var_args || HTTPS_TEST_DOMAIN, options.poolSize || (options.poolSize = POST), options.release = ok, options;
            };
            var JsDiff = {
                /** @type {function (Function, Function): ?} */
                addPoolingTo : create,
                /** @type {function (Object): ?} */
                oneArgumentPooler : destroy,
                /** @type {function (Array, Array): ?} */
                twoArgumentPooler : isEqual,
                /** @type {function (Array, Array, boolean): ?} */
                threeArgumentPooler : implement,
                /** @type {function (?, ?, ?, ?): ?} */
                fourArgumentPooler : init,
                /** @type {function (?, ?, ?, ?, ?): ?} */
                fiveArgumentPooler : open
            };
            module.exports = JsDiff;
        }, {
            161 : 161
        }],
        26 : [function(require, mod, dataAndEvents) {
            var render = require(40);
            var helper = require(50);
            var oldconfig = require(69);
            var extend = require(24);
            var requestAnimationFrame = require(120);
            var exports = {};
            extend(exports, oldconfig);
            extend(exports, {
                findDOMNode : requestAnimationFrame("findDOMNode", "ReactDOM", "react-dom", render, render.findDOMNode),
                render : requestAnimationFrame("render", "ReactDOM", "react-dom", render, render.render),
                unmountComponentAtNode : requestAnimationFrame("unmountComponentAtNode", "ReactDOM", "react-dom", render, render.unmountComponentAtNode),
                renderToString : requestAnimationFrame("renderToString", "ReactDOMServer", "react-dom/server", helper, helper.renderToString),
                renderToStaticMarkup : requestAnimationFrame("renderToStaticMarkup", "ReactDOMServer", "react-dom/server", helper, helper.renderToStaticMarkup)
            });
            exports.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = render;
            exports.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = helper;
            mod.exports = exports;
        }, {
            120 : 120,
            24 : 24,
            40 : 40,
            50 : 50,
            69 : 69
        }],
        27 : [function(require, module, dataAndEvents) {
            var nodes = require(68);
            var helper = require(122);
            var getActual = require(173);
            /** @type {string} */
            var proto = "_getDOMNodeDidWarn";
            var JsDiff = {
                /**
                 * @return {?}
                 */
                getDOMNode : function() {
                    return getActual(this.constructor[proto], "%s.getDOMNode(...) is deprecated. Please use ReactDOM.findDOMNode(instance) instead.", nodes.get(this).getName() || (this.tagName || "Unknown")), this.constructor[proto] = true, helper(this);
                }
            };
            module.exports = JsDiff;
        }, {
            122 : 122,
            173 : 173,
            68 : 68
        }],
        28 : [function(require, module, dataAndEvents) {
            /**
             * @param {Object} items
             * @return {?}
             */
            function format(items) {
                return Object.prototype.hasOwnProperty.call(items, i) || (items[i] = capturedGroupIndex++, obj[items[i]] = {}), obj[items[i]];
            }
            var nodes = require(15);
            var Block = require(16);
            var path = require(17);
            var camelKey = require(62);
            var helper = require(78);
            var collection = require(114);
            var getActual = require(24);
            var bind = require(133);
            var obj = {};
            /** @type {boolean} */
            var n = false;
            /** @type {number} */
            var capturedGroupIndex = 0;
            var prev = {
                topAbort : "abort",
                topBlur : "blur",
                topCanPlay : "canplay",
                topCanPlayThrough : "canplaythrough",
                topChange : "change",
                topClick : "click",
                topCompositionEnd : "compositionend",
                topCompositionStart : "compositionstart",
                topCompositionUpdate : "compositionupdate",
                topContextMenu : "contextmenu",
                topCopy : "copy",
                topCut : "cut",
                topDoubleClick : "dblclick",
                topDrag : "drag",
                topDragEnd : "dragend",
                topDragEnter : "dragenter",
                topDragExit : "dragexit",
                topDragLeave : "dragleave",
                topDragOver : "dragover",
                topDragStart : "dragstart",
                topDrop : "drop",
                topDurationChange : "durationchange",
                topEmptied : "emptied",
                topEncrypted : "encrypted",
                topEnded : "ended",
                topError : "error",
                topFocus : "focus",
                topInput : "input",
                topKeyDown : "keydown",
                topKeyPress : "keypress",
                topKeyUp : "keyup",
                topLoadedData : "loadeddata",
                topLoadedMetadata : "loadedmetadata",
                topLoadStart : "loadstart",
                topMouseDown : "mousedown",
                topMouseMove : "mousemove",
                topMouseOut : "mouseout",
                topMouseOver : "mouseover",
                topMouseUp : "mouseup",
                topPaste : "paste",
                topPause : "pause",
                topPlay : "play",
                topPlaying : "playing",
                topProgress : "progress",
                topRateChange : "ratechange",
                topScroll : "scroll",
                topSeeked : "seeked",
                topSeeking : "seeking",
                topSelectionChange : "selectionchange",
                topStalled : "stalled",
                topSuspend : "suspend",
                topTextInput : "textInput",
                topTimeUpdate : "timeupdate",
                topTouchCancel : "touchcancel",
                topTouchEnd : "touchend",
                topTouchMove : "touchmove",
                topTouchStart : "touchstart",
                topVolumeChange : "volumechange",
                topWaiting : "waiting",
                topWheel : "wheel"
            };
            /** @type {string} */
            var i = "_reactListenersID" + String(Math.random()).slice(2);
            var data = getActual({}, camelKey, {
                ReactEventListener : null,
                injection : {
                    /**
                     * @param {?} callback
                     * @return {undefined}
                     */
                    injectReactEventListener : function(callback) {
                        callback.setHandleTopLevel(data.handleTopLevel);
                        data.ReactEventListener = callback;
                    }
                },
                /**
                 * @param {boolean} enabled
                 * @return {undefined}
                 */
                setEnabled : function(enabled) {
                    if (data.ReactEventListener) {
                        data.ReactEventListener.setEnabled(enabled);
                    }
                },
                /**
                 * @return {?}
                 */
                isEnabled : function() {
                    return!(!data.ReactEventListener || !data.ReactEventListener.isEnabled());
                },
                /**
                 * @param {string} name
                 * @param {?} keepData
                 * @return {undefined}
                 */
                listenTo : function(name, keepData) {
                    var deepDataAndEvents = keepData;
                    var words = format(deepDataAndEvents);
                    var codeSegments = path.registrationNameDependencies[name];
                    var topLevelTypes = nodes.topLevelTypes;
                    /** @type {number} */
                    var i = 0;
                    for (;i < codeSegments.length;i++) {
                        var cur = codeSegments[i];
                        if (!(words.hasOwnProperty(cur) && words[cur])) {
                            if (cur === topLevelTypes.topWheel) {
                                if (bind("wheel")) {
                                    data.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, "wheel", deepDataAndEvents);
                                } else {
                                    if (bind("mousewheel")) {
                                        data.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, "mousewheel", deepDataAndEvents);
                                    } else {
                                        data.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, "DOMMouseScroll", deepDataAndEvents);
                                    }
                                }
                            } else {
                                if (cur === topLevelTypes.topScroll) {
                                    if (bind("scroll", true)) {
                                        data.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, "scroll", deepDataAndEvents);
                                    } else {
                                        data.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, "scroll", data.ReactEventListener.WINDOW_HANDLE);
                                    }
                                } else {
                                    if (cur === topLevelTypes.topFocus || cur === topLevelTypes.topBlur) {
                                        if (bind("focus", true)) {
                                            data.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, "focus", deepDataAndEvents);
                                            data.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, "blur", deepDataAndEvents);
                                        } else {
                                            if (bind("focusin")) {
                                                data.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, "focusin", deepDataAndEvents);
                                                data.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, "focusout", deepDataAndEvents);
                                            }
                                        }
                                        /** @type {boolean} */
                                        words[topLevelTypes.topBlur] = true;
                                        /** @type {boolean} */
                                        words[topLevelTypes.topFocus] = true;
                                    } else {
                                        if (prev.hasOwnProperty(cur)) {
                                            data.ReactEventListener.trapBubbledEvent(cur, prev[cur], deepDataAndEvents);
                                        }
                                    }
                                }
                            }
                            /** @type {boolean} */
                            words[cur] = true;
                        }
                    }
                },
                /**
                 * @param {?} until
                 * @param {string} type
                 * @param {(Error|string)} deepDataAndEvents
                 * @return {?}
                 */
                trapBubbledEvent : function(until, type, deepDataAndEvents) {
                    return data.ReactEventListener.trapBubbledEvent(until, type, deepDataAndEvents);
                },
                /**
                 * @param {Object} until
                 * @param {string} func
                 * @param {(Error|string)} deepDataAndEvents
                 * @return {?}
                 */
                trapCapturedEvent : function(until, func, deepDataAndEvents) {
                    return data.ReactEventListener.trapCapturedEvent(until, func, deepDataAndEvents);
                },
                /**
                 * @return {undefined}
                 */
                ensureScrollValueMonitoring : function() {
                    if (!n) {
                        var e = collection.refreshScrollValues;
                        data.ReactEventListener.monitorScrollValue(e);
                        /** @type {boolean} */
                        n = true;
                    }
                },
                eventNameDispatchConfigs : Block.eventNameDispatchConfigs,
                registrationNameModules : Block.registrationNameModules,
                putListener : Block.putListener,
                getListener : Block.getListener,
                deleteListener : Block.deleteListener,
                deleteAllListeners : Block.deleteAllListeners
            });
            helper.measureMethods(data, "ReactBrowserEventEmitter", {
                putListener : "putListener",
                deleteListener : "deleteListener"
            });
            module.exports = data;
        }, {
            114 : 114,
            133 : 133,
            15 : 15,
            16 : 16,
            17 : 17,
            24 : 24,
            62 : 62,
            78 : 78
        }],
        29 : [function($, module, dataAndEvents) {
            /**
             * @param {string} prop
             * @return {?}
             */
            function scroll(prop) {
                /** @type {string} */
                var x = "transition" + prop + "Timeout";
                /** @type {string} */
                var path = "transition" + prop;
                return function(scripts) {
                    if (scripts[path]) {
                        if (null == scripts[x]) {
                            return new Error(x + " wasn't supplied to ReactCSSTransitionGroup: this can cause unreliable animations and won't be supported in a future version of React. See https://fb.me/react-animation-transition-group-timeout for more information.");
                        }
                        if ("number" != typeof scripts[x]) {
                            return new Error(x + " must be a number (in milliseconds)");
                        }
                    }
                };
            }
            var self = $(26);
            var tmpl = $(24);
            var optgroup = $(94);
            var property = $(30);
            var JsDiff = self.createClass({
                displayName : "ReactCSSTransitionGroup",
                propTypes : {
                    transitionName : property.propTypes.name,
                    transitionAppear : self.PropTypes.bool,
                    transitionEnter : self.PropTypes.bool,
                    transitionLeave : self.PropTypes.bool,
                    transitionAppearTimeout : scroll("Appear"),
                    transitionEnterTimeout : scroll("Enter"),
                    transitionLeaveTimeout : scroll("Leave")
                },
                /**
                 * @return {?}
                 */
                getDefaultProps : function() {
                    return{
                        transitionAppear : false,
                        transitionEnter : true,
                        transitionLeave : true
                    };
                },
                /**
                 * @param {Function} elem
                 * @return {?}
                 */
                _wrapChild : function(elem) {
                    return self.createElement(property, {
                        name : this.props.transitionName,
                        appear : this.props.transitionAppear,
                        enter : this.props.transitionEnter,
                        leave : this.props.transitionLeave,
                        appearTimeout : this.props.transitionAppearTimeout,
                        enterTimeout : this.props.transitionEnterTimeout,
                        leaveTimeout : this.props.transitionLeaveTimeout
                    }, elem);
                },
                /**
                 * @return {?}
                 */
                render : function() {
                    return self.createElement(optgroup, tmpl({}, this.props, {
                        childFactory : this._wrapChild
                    }));
                }
            });
            module.exports = JsDiff;
        }, {
            24 : 24,
            26 : 26,
            30 : 30,
            94 : 94
        }],
        30 : [function(require, module, dataAndEvents) {
            var self = require(26);
            var Block = require(40);
            var dom = require(145);
            var nodes = require(93);
            var update = require(135);
            /** @type {number} */
            var _nextPaint = 17;
            var JsDiff = self.createClass({
                displayName : "ReactCSSTransitionGroupChild",
                propTypes : {
                    name : self.PropTypes.oneOfType([self.PropTypes.string, self.PropTypes.shape({
                        enter : self.PropTypes.string,
                        leave : self.PropTypes.string,
                        active : self.PropTypes.string
                    }), self.PropTypes.shape({
                        enter : self.PropTypes.string,
                        enterActive : self.PropTypes.string,
                        leave : self.PropTypes.string,
                        leaveActive : self.PropTypes.string,
                        appear : self.PropTypes.string,
                        appearActive : self.PropTypes.string
                    })]).isRequired,
                    appear : self.PropTypes.bool,
                    enter : self.PropTypes.bool,
                    leave : self.PropTypes.bool,
                    appearTimeout : self.PropTypes.number,
                    enterTimeout : self.PropTypes.number,
                    leaveTimeout : self.PropTypes.number
                },
                /**
                 * @param {string} name
                 * @param {Function} recurring
                 * @param {Object} deepDataAndEvents
                 * @return {?}
                 */
                transition : function(name, recurring, deepDataAndEvents) {
                    var node = Block.findDOMNode(this);
                    if (!node) {
                        return void(recurring && recurring());
                    }
                    var className = this.props.name[name] || this.props.name + "-" + name;
                    var classToRemove = this.props.name[name + "Active"] || className + "-active";
                    /** @type {null} */
                    var to = null;
                    /**
                     * @param {Object} e
                     * @return {undefined}
                     */
                    var endListener = function(e) {
                        if (!(e && e.target !== node)) {
                            clearTimeout(to);
                            dom.removeClass(node, className);
                            dom.removeClass(node, classToRemove);
                            nodes.removeEndEventListener(node, endListener);
                            if (recurring) {
                                recurring();
                            }
                        }
                    };
                    dom.addClass(node, className);
                    this.queueClass(classToRemove);
                    if (deepDataAndEvents) {
                        /** @type {number} */
                        to = setTimeout(endListener, deepDataAndEvents);
                        this.transitionTimeouts.push(to);
                    } else {
                        nodes.addEndEventListener(node, endListener);
                    }
                },
                /**
                 * @param {string} className
                 * @return {undefined}
                 */
                queueClass : function(className) {
                    this.classNameQueue.push(className);
                    if (!this.timeout) {
                        /** @type {number} */
                        this.timeout = setTimeout(this.flushClassNameQueue, _nextPaint);
                    }
                },
                /**
                 * @return {undefined}
                 */
                flushClassNameQueue : function() {
                    if (this.isMounted()) {
                        this.classNameQueue.forEach(dom.addClass.bind(dom, Block.findDOMNode(this)));
                    }
                    /** @type {number} */
                    this.classNameQueue.length = 0;
                    /** @type {null} */
                    this.timeout = null;
                },
                /**
                 * @return {undefined}
                 */
                componentWillMount : function() {
                    /** @type {Array} */
                    this.classNameQueue = [];
                    /** @type {Array} */
                    this.transitionTimeouts = [];
                },
                /**
                 * @return {undefined}
                 */
                componentWillUnmount : function() {
                    if (this.timeout) {
                        clearTimeout(this.timeout);
                    }
                    this.transitionTimeouts.forEach(function(to) {
                        clearTimeout(to);
                    });
                },
                /**
                 * @param {Function} recurring
                 * @return {undefined}
                 */
                componentWillAppear : function(recurring) {
                    if (this.props.appear) {
                        this.transition("appear", recurring, this.props.appearTimeout);
                    } else {
                        recurring();
                    }
                },
                /**
                 * @param {Function} recurring
                 * @return {undefined}
                 */
                componentWillEnter : function(recurring) {
                    if (this.props.enter) {
                        this.transition("enter", recurring, this.props.enterTimeout);
                    } else {
                        recurring();
                    }
                },
                /**
                 * @param {Function} recurring
                 * @return {undefined}
                 */
                componentWillLeave : function(recurring) {
                    if (this.props.leave) {
                        this.transition("leave", recurring, this.props.leaveTimeout);
                    } else {
                        recurring();
                    }
                },
                /**
                 * @return {?}
                 */
                render : function() {
                    return update(this.props.children);
                }
            });
            module.exports = JsDiff;
        }, {
            135 : 135,
            145 : 145,
            26 : 26,
            40 : 40,
            93 : 93
        }],
        31 : [function(require, module, dataAndEvents) {
            /**
             * @param {Array} params
             * @param {string} obj
             * @param {number} keys
             * @return {undefined}
             */
            function exports(params, obj, keys) {
                /** @type {boolean} */
                var j = void 0 === params[keys];
                inspect(j, "flattenChildren(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.", keys);
                if (null != obj) {
                    if (j) {
                        params[keys] = getActual(obj, null);
                    }
                }
            }
            var child = require(84);
            var getActual = require(132);
            var isArray = require(141);
            var assert = require(142);
            var inspect = require(173);
            var JsDiff = {
                /**
                 * @param {number} classProps
                 * @param {string} dataAndEvents
                 * @param {string} deepDataAndEvents
                 * @return {?}
                 */
                instantiateChildren : function(classProps, dataAndEvents, deepDataAndEvents) {
                    if (null == classProps) {
                        return null;
                    }
                    var existing = {};
                    return assert(classProps, exports, existing), existing;
                },
                /**
                 * @param {Object} args
                 * @param {Object} obj
                 * @param {string} dataAndEvents
                 * @param {string} deepDataAndEvents
                 * @return {?}
                 */
                updateChildren : function(args, obj, dataAndEvents, deepDataAndEvents) {
                    if (!obj && !args) {
                        return null;
                    }
                    var name;
                    for (name in obj) {
                        if (obj.hasOwnProperty(name)) {
                            var o = args && args[name];
                            var pathConfig = o && o._currentElement;
                            var transaction = obj[name];
                            if (null != o && isArray(pathConfig, transaction)) {
                                child.receiveComponent(o, transaction, dataAndEvents, deepDataAndEvents);
                                obj[name] = o;
                            } else {
                                if (o) {
                                    child.unmountComponent(o, name);
                                }
                                var prop = getActual(transaction, null);
                                obj[name] = prop;
                            }
                        }
                    }
                    for (name in args) {
                        if (!!args.hasOwnProperty(name)) {
                            if (!(obj && obj.hasOwnProperty(name))) {
                                child.unmountComponent(args[name]);
                            }
                        }
                    }
                    return obj;
                },
                /**
                 * @param {Object} attr
                 * @return {undefined}
                 */
                unmountChildren : function(attr) {
                    var a;
                    for (a in attr) {
                        if (attr.hasOwnProperty(a)) {
                            var f = attr[a];
                            child.unmountComponent(f);
                        }
                    }
                }
            };
            module.exports = JsDiff;
        }, {
            132 : 132,
            141 : 141,
            142 : 142,
            173 : 173,
            84 : 84
        }],
        32 : [function(require, module, dataAndEvents) {
            /**
             * @param {string} str
             * @return {?}
             */
            function trim(str) {
                return("" + str).replace(r20, "//");
            }
            /**
             * @param {string} selector
             * @param {?} context
             * @return {undefined}
             */
            function jQuery(selector, context) {
                /** @type {string} */
                this.func = selector;
                this.context = context;
                /** @type {number} */
                this.count = 0;
            }
            /**
             * @param {Object} a
             * @param {?} n
             * @param {?} ctx
             * @return {undefined}
             */
            function f(a, n, ctx) {
                var f = a.func;
                var self = a.context;
                f.call(self, n, a.count++);
            }
            /**
             * @param {Function} opt_attributes
             * @param {Function} attributes
             * @param {Function} type
             * @return {?}
             */
            function setup(opt_attributes, attributes, type) {
                if (null == opt_attributes) {
                    return opt_attributes;
                }
                var value = jQuery.getPooled(attributes, type);
                callback(opt_attributes, f, value);
                jQuery.release(value);
            }
            /**
             * @param {string} next
             * @param {string} err
             * @param {string} fn
             * @param {?} key
             * @return {undefined}
             */
            function self(next, err, fn, key) {
                /** @type {string} */
                this.result = next;
                /** @type {string} */
                this.keyPrefix = err;
                /** @type {string} */
                this.func = fn;
                this.context = key;
                /** @type {number} */
                this.count = 0;
            }
            /**
             * @param {Object} state
             * @param {?} param
             * @param {string} val
             * @return {undefined}
             */
            function update(state, param, val) {
                var data = state.result;
                var name = state.keyPrefix;
                var func = state.func;
                var context = state.context;
                var value = func.call(context, param, state.count++);
                if (Array.isArray(value)) {
                    apply(value, data, val, Block.thatReturnsArgument);
                } else {
                    if (null != value) {
                        if (assert.isValidElement(value)) {
                            value = assert.cloneAndReplaceKey(value, name + (value !== param ? trim(value.key || "") + "/" : "") + val);
                        }
                        data.push(value);
                    }
                }
            }
            /**
             * @param {?} source
             * @param {?} data
             * @param {string} str
             * @param {?} context
             * @param {Object} deepDataAndEvents
             * @return {undefined}
             */
            function apply(source, data, str, context, deepDataAndEvents) {
                /** @type {string} */
                var stack = "";
                if (null != str) {
                    /** @type {string} */
                    stack = trim(str) + "/";
                }
                var value = self.getPooled(data, stack, context, deepDataAndEvents);
                callback(source, update, value);
                self.release(value);
            }
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @return {?}
             */
            function clone(name, recurring, deepDataAndEvents) {
                if (null == name) {
                    return name;
                }
                /** @type {Array} */
                var pdataCur = [];
                return apply(name, pdataCur, null, recurring, deepDataAndEvents), pdataCur;
            }
            /**
             * @param {?} x
             * @param {?} val
             * @param {?} accessor
             * @return {?}
             */
            function sign(x, val, accessor) {
                return null;
            }
            /**
             * @param {?} accumulator
             * @param {?} thisValue
             * @return {?}
             */
            function value(accumulator, thisValue) {
                return callback(accumulator, sign, null);
            }
            /**
             * @param {?} object
             * @return {?}
             */
            function toArray(object) {
                /** @type {Array} */
                var pdataCur = [];
                return apply(object, pdataCur, null, Block.thatReturnsArgument), pdataCur;
            }
            var $ = require(25);
            var assert = require(57);
            var Block = require(153);
            var callback = require(142);
            var doc = $.twoArgumentPooler;
            var elems = $.fourArgumentPooler;
            /** @type {RegExp} */
            var r20 = /\/(?!\/)/g;
            /**
             * @return {undefined}
             */
            jQuery.prototype.destructor = function() {
                /** @type {null} */
                this.func = null;
                /** @type {null} */
                this.context = null;
                /** @type {number} */
                this.count = 0;
            };
            $.addPoolingTo(jQuery, doc);
            /**
             * @return {undefined}
             */
            self.prototype.destructor = function() {
                /** @type {null} */
                this.result = null;
                /** @type {null} */
                this.keyPrefix = null;
                /** @type {null} */
                this.func = null;
                /** @type {null} */
                this.context = null;
                /** @type {number} */
                this.count = 0;
            };
            $.addPoolingTo(self, elems);
            var _ = {
                /** @type {function (Function, Function, Function): ?} */
                forEach : setup,
                /** @type {function (string, Function, Object): ?} */
                map : clone,
                /** @type {function (?, ?, string, ?, Object): undefined} */
                mapIntoWithKeyPrefixInternal : apply,
                /** @type {function (?, ?): ?} */
                count : value,
                /** @type {function (?): ?} */
                toArray : toArray
            };
            module.exports = _;
        }, {
            142 : 142,
            153 : 153,
            25 : 25,
            57 : 57
        }],
        33 : [function(require, module, dataAndEvents) {
            /**
             * @return {undefined}
             */
            function next() {
                if (!B) {
                    /** @type {boolean} */
                    B = true;
                    apply(false, "setProps(...) and replaceProps(...) are deprecated. Instead, call render again at the top level.");
                }
            }
            /**
             * @param {Object} obj
             * @param {Object} a
             * @param {?} eventName
             * @return {undefined}
             */
            function group(obj, a, eventName) {
                var prefix;
                for (prefix in a) {
                    if (a.hasOwnProperty(prefix)) {
                        apply("function" == typeof a[prefix], "%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.", obj.displayName || "ReactClass", c[eventName], prefix);
                    }
                }
            }
            /**
             * @param {?} elem
             * @param {string} key
             * @return {undefined}
             */
            function dataAttr(elem, key) {
                var r = dict.hasOwnProperty(key) ? dict[key] : null;
                if (extra.hasOwnProperty(key)) {
                    if (r !== options.OVERRIDE_BASE) {
                        bind(false, "ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.", key);
                    } else {
                        void 0;
                    }
                }
                if (elem.hasOwnProperty(key)) {
                    if (r !== options.DEFINE_MANY && r !== options.DEFINE_MANY_MERGED) {
                        bind(false, "ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.", key);
                    } else {
                        void 0;
                    }
                }
            }
            /**
             * @param {Object} arg
             * @param {Object} obj
             * @return {undefined}
             */
            function extend(arg, obj) {
                if (obj) {
                    if ("function" == typeof obj) {
                        bind(false, "ReactClass: You're attempting to use a component class as a mixin. Instead, just use a regular object.");
                    } else {
                        void 0;
                    }
                    if (nodes.isValidElement(obj)) {
                        bind(false, "ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");
                    } else {
                        void 0;
                    }
                    var elem = arg.prototype;
                    if (obj.hasOwnProperty(id)) {
                        self.mixins(arg, obj.mixins);
                    }
                    var name;
                    for (name in obj) {
                        if (obj.hasOwnProperty(name) && name !== id) {
                            var val = obj[name];
                            if (dataAttr(elem, name), self.hasOwnProperty(name)) {
                                self[name](arg, val);
                            } else {
                                /** @type {boolean} */
                                var quoteNeeded = dict.hasOwnProperty(name);
                                var array = elem.hasOwnProperty(name);
                                /** @type {boolean} */
                                var fn = "function" == typeof val;
                                /** @type {boolean} */
                                var call = fn && (!quoteNeeded && (!array && obj.autobind !== false));
                                if (call) {
                                    if (!elem.__reactAutoBindMap) {
                                        elem.__reactAutoBindMap = {};
                                    }
                                    elem.__reactAutoBindMap[name] = val;
                                    elem[name] = val;
                                } else {
                                    if (array) {
                                        var x = dict[name];
                                        if (!quoteNeeded || x !== options.DEFINE_MANY_MERGED && x !== options.DEFINE_MANY) {
                                            bind(false, "ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.", x, name);
                                        } else {
                                            void 0;
                                        }
                                        if (x === options.DEFINE_MANY_MERGED) {
                                            elem[name] = $(elem[name], val);
                                        } else {
                                            if (x === options.DEFINE_MANY) {
                                                elem[name] = callback(elem[name], val);
                                            }
                                        }
                                    } else {
                                        elem[name] = val;
                                        if ("function" == typeof val) {
                                            if (obj.displayName) {
                                                /** @type {string} */
                                                elem[name].displayName = obj.displayName + "_" + name;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            /**
             * @param {Object} fn
             * @param {Object} prop
             * @return {undefined}
             */
            function process(fn, prop) {
                if (prop) {
                    var name;
                    for (name in prop) {
                        var value = prop[name];
                        if (prop.hasOwnProperty(name)) {
                            /** @type {boolean} */
                            var hasTexture = name in self;
                            if (hasTexture) {
                                bind(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name);
                            } else {
                                void 0;
                            }
                            /** @type {boolean} */
                            var hasBuffer = name in fn;
                            if (hasBuffer) {
                                bind(false, "ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.", name);
                            } else {
                                void 0;
                            }
                            fn[name] = value;
                        }
                    }
                }
            }
            /**
             * @param {Object} obj
             * @param {Object} source
             * @return {?}
             */
            function mixin(obj, source) {
                if (obj && (source && ("object" == typeof obj && "object" == typeof source))) {
                    void 0;
                } else {
                    bind(false, "mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.");
                }
                var prop;
                for (prop in source) {
                    if (source.hasOwnProperty(prop)) {
                        if (void 0 !== obj[prop]) {
                            bind(false, "mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.", prop);
                        } else {
                            void 0;
                        }
                        obj[prop] = source[prop];
                    }
                }
                return obj;
            }
            /**
             * @param {Function} matcherFunction
             * @param {Function} parent
             * @return {?}
             */
            function $(matcherFunction, parent) {
                return function() {
                    var value = matcherFunction.apply(this, arguments);
                    var props = parent.apply(this, arguments);
                    if (null == value) {
                        return props;
                    }
                    if (null == props) {
                        return value;
                    }
                    var suiteView = {};
                    return mixin(suiteView, value), mixin(suiteView, props), suiteView;
                };
            }
            /**
             * @param {Function} matcherFunction
             * @param {Function} style
             * @return {?}
             */
            function callback(matcherFunction, style) {
                return function() {
                    matcherFunction.apply(this, arguments);
                    style.apply(this, arguments);
                };
            }
            /**
             * @param {Object} component
             * @param {?} method
             * @return {?}
             */
            function init(component, method) {
                var boundMethod = method.bind(component);
                /** @type {Object} */
                boundMethod.__reactBoundContext = component;
                boundMethod.__reactBoundMethod = method;
                /** @type {null} */
                boundMethod.__reactBoundArguments = null;
                var allArgs = component.constructor.displayName;
                /** @type {function (Object): ?} */
                var _bind = boundMethod.bind;
                return boundMethod.bind = function(recurring) {
                    /** @type {number} */
                    var len = arguments.length;
                    /** @type {Array} */
                    var result = Array(len > 1 ? len - 1 : 0);
                    /** @type {number} */
                    var i = 1;
                    for (;i < len;i++) {
                        result[i - 1] = arguments[i];
                    }
                    if (recurring !== component && null !== recurring) {
                        apply(false, "bind(): React component methods may only be bound to the component instance. See %s", allArgs);
                    } else {
                        if (!result.length) {
                            return apply(false, "bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See %s", allArgs), boundMethod;
                        }
                    }
                    var reboundMethod = _bind.apply(boundMethod, arguments);
                    return reboundMethod.__reactBoundContext = component, reboundMethod.__reactBoundMethod = method, reboundMethod.__reactBoundArguments = result, reboundMethod;
                }, boundMethod;
            }
            /**
             * @param {Object} self
             * @return {undefined}
             */
            function reset(self) {
                var name;
                for (name in self.__reactAutoBindMap) {
                    if (self.__reactAutoBindMap.hasOwnProperty(name)) {
                        var method = self.__reactAutoBindMap[name];
                        self[name] = init(self, method);
                    }
                }
            }
            var Type = require(34);
            var nodes = require(57);
            var clone = require(81);
            var c = require(80);
            var helper = require(76);
            var assert = require(24);
            var Block = require(154);
            var bind = require(161);
            var nopt = require(165);
            var requestAnimationFrame = require(166);
            var apply = require(173);
            var id = requestAnimationFrame({
                mixins : null
            });
            var options = nopt({
                DEFINE_ONCE : null,
                DEFINE_MANY : null,
                OVERRIDE_BASE : null,
                DEFINE_MANY_MERGED : null
            });
            /** @type {Array} */
            var values = [];
            /** @type {boolean} */
            var B = false;
            var dict = {
                mixins : options.DEFINE_MANY,
                statics : options.DEFINE_MANY,
                propTypes : options.DEFINE_MANY,
                contextTypes : options.DEFINE_MANY,
                childContextTypes : options.DEFINE_MANY,
                getDefaultProps : options.DEFINE_MANY_MERGED,
                getInitialState : options.DEFINE_MANY_MERGED,
                getChildContext : options.DEFINE_MANY_MERGED,
                render : options.DEFINE_ONCE,
                componentWillMount : options.DEFINE_MANY,
                componentDidMount : options.DEFINE_MANY,
                componentWillReceiveProps : options.DEFINE_MANY,
                shouldComponentUpdate : options.DEFINE_ONCE,
                componentWillUpdate : options.DEFINE_MANY,
                componentDidUpdate : options.DEFINE_MANY,
                componentWillUnmount : options.DEFINE_MANY,
                updateComponent : options.OVERRIDE_BASE
            };
            var self = {
                /**
                 * @param {string} name
                 * @param {Function} recurring
                 * @return {undefined}
                 */
                displayName : function(name, recurring) {
                    /** @type {Function} */
                    name.displayName = recurring;
                },
                /**
                 * @param {Object} obj
                 * @param {Array} source
                 * @return {undefined}
                 */
                mixins : function(obj, source) {
                    if (source) {
                        /** @type {number} */
                        var i = 0;
                        for (;i < source.length;i++) {
                            extend(obj, source[i]);
                        }
                    }
                },
                /**
                 * @param {Object} obj
                 * @param {Object} value
                 * @return {undefined}
                 */
                childContextTypes : function(obj, value) {
                    group(obj, value, clone.childContext);
                    obj.childContextTypes = assert({}, obj.childContextTypes, value);
                },
                /**
                 * @param {Object} obj
                 * @param {Object} value
                 * @return {undefined}
                 */
                contextTypes : function(obj, value) {
                    group(obj, value, clone.context);
                    obj.contextTypes = assert({}, obj.contextTypes, value);
                },
                /**
                 * @param {?} data
                 * @param {?} target
                 * @return {undefined}
                 */
                getDefaultProps : function(data, target) {
                    if (data.getDefaultProps) {
                        data.getDefaultProps = $(data.getDefaultProps, target);
                    } else {
                        data.getDefaultProps = target;
                    }
                },
                /**
                 * @param {Object} obj
                 * @param {Object} value
                 * @return {undefined}
                 */
                propTypes : function(obj, value) {
                    group(obj, value, clone.prop);
                    obj.propTypes = assert({}, obj.propTypes, value);
                },
                /**
                 * @param {Object} a
                 * @param {Object} o
                 * @return {undefined}
                 */
                statics : function(a, o) {
                    process(a, o);
                },
                /**
                 * @return {undefined}
                 */
                autobind : function() {
                }
            };
            var extra = {
                /**
                 * @param {?} opt_attributes
                 * @param {Function} recurring
                 * @return {undefined}
                 */
                replaceState : function(opt_attributes, recurring) {
                    this.updater.enqueueReplaceState(this, opt_attributes);
                    if (recurring) {
                        this.updater.enqueueCallback(this, recurring);
                    }
                },
                /**
                 * @return {?}
                 */
                isMounted : function() {
                    return this.updater.isMounted(this);
                },
                /**
                 * @param {?} deepDataAndEvents
                 * @param {Function} recurring
                 * @return {undefined}
                 */
                setProps : function(deepDataAndEvents, recurring) {
                    next();
                    this.updater.enqueueSetProps(this, deepDataAndEvents);
                    if (recurring) {
                        this.updater.enqueueCallback(this, recurring);
                    }
                },
                /**
                 * @param {?} deepDataAndEvents
                 * @param {Function} recurring
                 * @return {undefined}
                 */
                replaceProps : function(deepDataAndEvents, recurring) {
                    next();
                    this.updater.enqueueReplaceProps(this, deepDataAndEvents);
                    if (recurring) {
                        this.updater.enqueueCallback(this, recurring);
                    }
                }
            };
            /**
             * @return {undefined}
             */
            var parentClass = function() {
            };
            assert(parentClass.prototype, Type.prototype, extra);
            var JsDiff = {
                /**
                 * @param {?} opt_attributes
                 * @return {?}
                 */
                createClass : function(opt_attributes) {
                    /**
                     * @param {string} name
                     * @param {Function} recurring
                     * @param {Object} deepDataAndEvents
                     * @return {undefined}
                     */
                    var fn = function(name, recurring, deepDataAndEvents) {
                        apply(this instanceof fn, "Something is calling a React component directly. Use a factory or JSX instead. See: https://fb.me/react-legacyfactory");
                        if (this.__reactAutoBindMap) {
                            reset(this);
                        }
                        /** @type {string} */
                        this.props = name;
                        /** @type {Function} */
                        this.context = recurring;
                        this.refs = Block;
                        this.updater = deepDataAndEvents || helper;
                        /** @type {null} */
                        this.state = null;
                        var paths = this.getInitialState ? this.getInitialState() : null;
                        if ("undefined" == typeof paths) {
                            if (this.getInitialState._isMockFunction) {
                                /** @type {null} */
                                paths = null;
                            }
                        }
                        if ("object" != typeof paths || Array.isArray(paths)) {
                            bind(false, "%s.getInitialState(): must return an object or null", fn.displayName || "ReactCompositeComponent");
                        } else {
                            void 0;
                        }
                        this.state = paths;
                    };
                    fn.prototype = new parentClass;
                    /** @type {function (string, Function, Object): undefined} */
                    fn.prototype.constructor = fn;
                    values.forEach(extend.bind(null, fn));
                    extend(fn, opt_attributes);
                    if (fn.getDefaultProps) {
                        fn.defaultProps = fn.getDefaultProps();
                    }
                    if (fn.getDefaultProps) {
                        fn.getDefaultProps.isReactClassApproved = {};
                    }
                    if (fn.prototype.getInitialState) {
                        fn.prototype.getInitialState.isReactClassApproved = {};
                    }
                    if (fn.prototype.render) {
                        void 0;
                    } else {
                        bind(false, "createClass(...): Class specification must implement a `render` method.");
                    }
                    apply(!fn.prototype.componentShouldUpdate, "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", opt_attributes.displayName || "A component");
                    apply(!fn.prototype.componentWillRecieveProps, "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", opt_attributes.displayName || "A component");
                    var name;
                    for (name in dict) {
                        if (!fn.prototype[name]) {
                            /** @type {null} */
                            fn.prototype[name] = null;
                        }
                    }
                    return fn;
                },
                injection : {
                    /**
                     * @param {string} value
                     * @return {undefined}
                     */
                    injectMixin : function(value) {
                        values.push(value);
                    }
                }
            };
            module.exports = JsDiff;
        }, {
            154 : 154,
            161 : 161,
            165 : 165,
            166 : 166,
            173 : 173,
            24 : 24,
            34 : 34,
            57 : 57,
            76 : 76,
            80 : 80,
            81 : 81
        }],
        34 : [function($, context, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @return {undefined}
             */
            function self(name, recurring, deepDataAndEvents) {
                /** @type {string} */
                this.props = name;
                /** @type {Function} */
                this.context = recurring;
                this.refs = $spy;
                this.updater = deepDataAndEvents || $src;
            }
            var $src = $(76);
            var emptyJ = $(117);
            var $spy = $(154);
            var clear = $(161);
            var pop = $(173);
            self.prototype.isReactComponent = {};
            /**
             * @param {?} opt_attributes
             * @param {Function} recurring
             * @return {undefined}
             */
            self.prototype.setState = function(opt_attributes, recurring) {
                if ("object" != typeof opt_attributes && ("function" != typeof opt_attributes && null != opt_attributes)) {
                    clear(false, "setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
                } else {
                    void 0;
                }
                pop(null != opt_attributes, "setState(...): You passed an undefined or null state object; instead, use forceUpdate().");
                this.updater.enqueueSetState(this, opt_attributes);
                if (recurring) {
                    this.updater.enqueueCallback(this, recurring);
                }
            };
            /**
             * @param {?} opt_attributes
             * @return {undefined}
             */
            self.prototype.forceUpdate = function(opt_attributes) {
                this.updater.enqueueForceUpdate(this);
                if (opt_attributes) {
                    this.updater.enqueueCallback(this, opt_attributes);
                }
            };
            var obj = {
                getDOMNode : ["getDOMNode", "Use ReactDOM.findDOMNode(component) instead."],
                isMounted : ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
                replaceProps : ["replaceProps", "Instead, call render again at the top level."],
                replaceState : ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."],
                setProps : ["setProps", "Instead, call render again at the top level."]
            };
            /**
             * @param {string} p
             * @param {Array} i
             * @return {undefined}
             */
            var action = function(p, i) {
                if (emptyJ) {
                    Object.defineProperty(self.prototype, p, {
                        /**
                         * @return {undefined}
                         */
                        get : function() {
                            pop(false, "%s(...) is deprecated in plain JavaScript React classes. %s", i[0], i[1]);
                        }
                    });
                }
            };
            var prop;
            for (prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                    action(prop, obj[prop]);
                }
            }
            /** @type {function (string, Function, Object): undefined} */
            context.exports = self;
        }, {
            117 : 117,
            154 : 154,
            161 : 161,
            173 : 173,
            76 : 76
        }],
        35 : [function(require, module, dataAndEvents) {
            var Block = require(45);
            var exp = require(72);
            var JsDiff = {
                processChildrenUpdates : Block.dangerouslyProcessChildrenUpdates,
                replaceNodeWithMarkupByID : Block.dangerouslyReplaceNodeWithMarkupByID,
                /**
                 * @param {?} o
                 * @return {undefined}
                 */
                unmountIDFromEnvironment : function(o) {
                    exp.purgeID(o);
                }
            };
            module.exports = JsDiff;
        }, {
            45 : 45,
            72 : 72
        }],
        36 : [function(require, module, dataAndEvents) {
            var getActual = require(161);
            /** @type {boolean} */
            var e = false;
            var css = {
                unmountIDFromEnvironment : null,
                replaceNodeWithMarkupByID : null,
                processChildrenUpdates : null,
                injection : {
                    /**
                     * @param {?} el
                     * @return {undefined}
                     */
                    injectEnvironment : function(el) {
                        if (e) {
                            getActual(false, "ReactCompositeComponent: injectEnvironment() can only be called once.");
                        } else {
                            void 0;
                        }
                        css.unmountIDFromEnvironment = el.unmountIDFromEnvironment;
                        css.replaceNodeWithMarkupByID = el.replaceNodeWithMarkupByID;
                        css.processChildrenUpdates = el.processChildrenUpdates;
                        /** @type {boolean} */
                        e = true;
                    }
                }
            };
            module.exports = css;
        }, {
            161 : 161
        }],
        37 : [function(require, module, dataAndEvents) {
            var hasOwn = require(140);
            var JsDiff = {
                /**
                 * @param {?} key
                 * @param {Object} jsonString
                 * @return {?}
                 */
                shouldComponentUpdate : function(key, jsonString) {
                    return hasOwn(this, key, jsonString);
                }
            };
            module.exports = JsDiff;
        }, {
            140 : 140
        }],
        38 : [function(require, module, dataAndEvents) {
            /**
             * @param {?} elems
             * @return {?}
             */
            function getText(elems) {
                var field = elems._currentElement._owner || null;
                if (field) {
                    var c = field.getName();
                    if (c) {
                        return " Check the render method of `" + c + "`.";
                    }
                }
                return "";
            }
            /**
             * @param {?} context
             * @return {undefined}
             */
            function jQuery(context) {
            }
            var self = require(36);
            var stream = require(39);
            var nodes = require(57);
            var matches = require(68);
            var assert = require(78);
            var clone = require(81);
            var streams = require(80);
            var child = require(84);
            var val = require(95);
            var flag = require(24);
            var b = require(154);
            var getActual = require(161);
            var indexOf = require(141);
            var func = require(173);
            /**
             * @return {?}
             */
            jQuery.prototype.render = function() {
                var fn = matches.get(this)._currentElement.type;
                return fn(this.props, this.context, this.updater);
            };
            /** @type {number} */
            var _mountOrder = 1;
            var valid = {
                /**
                 * @param {string} label
                 * @return {undefined}
                 */
                construct : function(label) {
                    /** @type {string} */
                    this._currentElement = label;
                    /** @type {null} */
                    this._rootNodeID = null;
                    /** @type {null} */
                    this._instance = null;
                    /** @type {null} */
                    this._pendingElement = null;
                    /** @type {null} */
                    this._pendingStateQueue = null;
                    /** @type {boolean} */
                    this._pendingReplaceState = false;
                    /** @type {boolean} */
                    this._pendingForceUpdate = false;
                    /** @type {null} */
                    this._renderedComponent = null;
                    /** @type {null} */
                    this._context = null;
                    /** @type {number} */
                    this._mountOrder = 0;
                    /** @type {null} */
                    this._topLevelWrapper = null;
                    /** @type {null} */
                    this._pendingCallbacks = null;
                },
                /**
                 * @param {string} transaction
                 * @param {string} callback
                 * @param {string} dataAndEvents
                 * @return {?}
                 */
                mountComponent : function(transaction, callback, dataAndEvents) {
                    /** @type {string} */
                    this._context = dataAndEvents;
                    /** @type {number} */
                    this._mountOrder = _mountOrder++;
                    /** @type {string} */
                    this._rootNodeID = transaction;
                    var node;
                    var optgroup;
                    var point = this._processProps(this._currentElement.props);
                    var name = this._processContext(dataAndEvents);
                    var Node = this._currentElement.type;
                    /** @type {boolean} */
                    var prototype = "prototype" in Node;
                    if (prototype) {
                        stream.current = this;
                        try {
                            node = new Node(point, name, val);
                        } finally {
                            /** @type {null} */
                            stream.current = null;
                        }
                    }
                    if (!(prototype && (null !== node && (node !== false && !nodes.isValidElement(node))))) {
                        optgroup = node;
                        node = new jQuery(Node);
                    }
                    if (null == node.render) {
                        func(false, "%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`, returned null/false from a stateless component, or tried to render an element whose type is a function that isn't a React component.", Node.displayName || (Node.name || "Component"));
                    } else {
                        func(Node.prototype && Node.prototype.isReactComponent || (!prototype || !(node instanceof Node)), "%s(...): React component classes must extend React.Component.", Node.displayName || (Node.name || "Component"));
                    }
                    node.props = point;
                    node.context = name;
                    node.refs = b;
                    node.updater = val;
                    this._instance = node;
                    matches.set(node, this);
                    func(!node.getInitialState || node.getInitialState.isReactClassApproved, "getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", this.getName() || "a component");
                    func(!node.getDefaultProps || node.getDefaultProps.isReactClassApproved, "getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", this.getName() || "a component");
                    func(!node.propTypes, "propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", this.getName() || "a component");
                    func(!node.contextTypes, "contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", this.getName() || "a component");
                    func("function" != typeof node.componentShouldUpdate, "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", this.getName() || "A component");
                    func("function" != typeof node.componentDidUnmount, "%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", this.getName() || "A component");
                    func("function" != typeof node.componentWillRecieveProps, "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", this.getName() || "A component");
                    var id = node.state;
                    if (void 0 === id) {
                        /** @type {null} */
                        node.state = id = null;
                    }
                    if ("object" != typeof id || Array.isArray(id)) {
                        getActual(false, "%s.state: must be set to an object or null", this.getName() || "ReactCompositeComponent");
                    } else {
                        void 0;
                    }
                    /** @type {null} */
                    this._pendingStateQueue = null;
                    /** @type {boolean} */
                    this._pendingReplaceState = false;
                    /** @type {boolean} */
                    this._pendingForceUpdate = false;
                    if (node.componentWillMount) {
                        node.componentWillMount();
                        if (this._pendingStateQueue) {
                            node.state = this._processPendingState(node.props, node.context);
                        }
                    }
                    if (void 0 === optgroup) {
                        optgroup = this._renderValidatedComponent();
                    }
                    this._renderedComponent = this._instantiateReactComponent(optgroup);
                    var element = child.mountComponent(this._renderedComponent, transaction, callback, this._processChildContext(dataAndEvents));
                    return node.componentDidMount && callback.getReactMountReady().enqueue(node.componentDidMount, node), element;
                },
                /**
                 * @return {undefined}
                 */
                unmountComponent : function() {
                    var elem = this._instance;
                    if (elem.componentWillUnmount) {
                        elem.componentWillUnmount();
                    }
                    child.unmountComponent(this._renderedComponent);
                    /** @type {null} */
                    this._renderedComponent = null;
                    /** @type {null} */
                    this._instance = null;
                    /** @type {null} */
                    this._pendingStateQueue = null;
                    /** @type {boolean} */
                    this._pendingReplaceState = false;
                    /** @type {boolean} */
                    this._pendingForceUpdate = false;
                    /** @type {null} */
                    this._pendingCallbacks = null;
                    /** @type {null} */
                    this._pendingElement = null;
                    /** @type {null} */
                    this._context = null;
                    /** @type {null} */
                    this._rootNodeID = null;
                    /** @type {null} */
                    this._topLevelWrapper = null;
                    matches.remove(elem);
                },
                /**
                 * @param {Object} deepDataAndEvents
                 * @return {?}
                 */
                _maskContext : function(deepDataAndEvents) {
                    /** @type {null} */
                    var old = null;
                    var event = this._currentElement.type;
                    var type = event.contextTypes;
                    if (!type) {
                        return b;
                    }
                    old = {};
                    var name;
                    for (name in type) {
                        old[name] = deepDataAndEvents[name];
                    }
                    return old;
                },
                /**
                 * @param {Object} deepDataAndEvents
                 * @return {?}
                 */
                _processContext : function(deepDataAndEvents) {
                    var childContext = this._maskContext(deepDataAndEvents);
                    var type = this._currentElement.type;
                    return type.contextTypes && this._checkPropTypes(type.contextTypes, childContext, clone.context), childContext;
                },
                /**
                 * @param {string} deepDataAndEvents
                 * @return {?}
                 */
                _processChildContext : function(deepDataAndEvents) {
                    var fn = this._currentElement.type;
                    var _instance = this._instance;
                    var props = _instance.getChildContext && _instance.getChildContext();
                    if (props) {
                        if ("object" != typeof fn.childContextTypes) {
                            getActual(false, "%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", this.getName() || "ReactCompositeComponent");
                        } else {
                            void 0;
                        }
                        this._checkPropTypes(fn.childContextTypes, props, clone.childContext);
                        var name;
                        for (name in props) {
                            if (name in fn.childContextTypes) {
                                void 0;
                            } else {
                                getActual(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || "ReactCompositeComponent", name);
                            }
                        }
                        return flag({}, deepDataAndEvents, props);
                    }
                    return deepDataAndEvents;
                },
                /**
                 * @param {?} props
                 * @return {?}
                 */
                _processProps : function(props) {
                    var type = this._currentElement.type;
                    return type.propTypes && this._checkPropTypes(type.propTypes, props, clone.prop), props;
                },
                /**
                 * @param {Object} propTypes
                 * @param {?} props
                 * @param {?} location
                 * @return {undefined}
                 */
                _checkPropTypes : function(propTypes, props, location) {
                    var componentName = this.getName();
                    var propName;
                    for (propName in propTypes) {
                        if (propTypes.hasOwnProperty(propName)) {
                            var err;
                            try {
                                if ("function" != typeof propTypes[propName]) {
                                    getActual(false, "%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.", componentName || "React class", streams[location], propName);
                                } else {
                                    void 0;
                                }
                                err = propTypes[propName](props, propName, componentName, location);
                            } catch (backtrace) {
                                err = backtrace;
                            }
                            if (err instanceof Error) {
                                var gameConfig = getText(this);
                                if (location === clone.prop) {
                                    func(false, "Failed Composite propType: %s%s", err.message, gameConfig);
                                } else {
                                    func(false, "Failed Context Types: %s%s", err.message, gameConfig);
                                }
                            }
                        }
                    }
                },
                /**
                 * @param {?} label
                 * @param {string} transaction
                 * @param {string} dataAndEvents
                 * @return {undefined}
                 */
                receiveComponent : function(label, transaction, dataAndEvents) {
                    var rvar = this._currentElement;
                    var node = this._context;
                    /** @type {null} */
                    this._pendingElement = null;
                    this.updateComponent(transaction, rvar, label, node, dataAndEvents);
                },
                /**
                 * @param {string} dataAndEvents
                 * @return {undefined}
                 */
                performUpdateIfNecessary : function(dataAndEvents) {
                    if (null != this._pendingElement) {
                        child.receiveComponent(this, this._pendingElement || this._currentElement, dataAndEvents, this._context);
                    }
                    if (null !== this._pendingStateQueue || this._pendingForceUpdate) {
                        this.updateComponent(dataAndEvents, this._currentElement, this._currentElement, this._context, this._context);
                    }
                },
                /**
                 * @param {string} transaction
                 * @param {?} name
                 * @param {?} obj
                 * @param {string} dataAndEvents
                 * @param {Object} deepDataAndEvents
                 * @return {undefined}
                 */
                updateComponent : function(transaction, name, obj, dataAndEvents, deepDataAndEvents) {
                    var props;
                    var me = this._instance;
                    var value = this._context === deepDataAndEvents ? me.context : this._processContext(deepDataAndEvents);
                    if (name === obj) {
                        props = obj.props;
                    } else {
                        props = this._processProps(obj.props);
                        if (me.componentWillReceiveProps) {
                            me.componentWillReceiveProps(props, value);
                        }
                    }
                    var s = this._processPendingState(props, value);
                    var io = this._pendingForceUpdate || (!me.shouldComponentUpdate || me.shouldComponentUpdate(props, s, value));
                    func("undefined" != typeof io, "%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", this.getName() || "ReactCompositeComponent");
                    if (io) {
                        /** @type {boolean} */
                        this._pendingForceUpdate = false;
                        this._performComponentUpdate(obj, props, s, value, transaction, deepDataAndEvents);
                    } else {
                        this._currentElement = obj;
                        /** @type {Object} */
                        this._context = deepDataAndEvents;
                        me.props = props;
                        me.state = s;
                        me.context = value;
                    }
                },
                /**
                 * @param {?} key
                 * @param {?} computed
                 * @return {?}
                 */
                _processPendingState : function(key, computed) {
                    var scope = this._instance;
                    var codeSegments = this._pendingStateQueue;
                    var inverse = this._pendingReplaceState;
                    if (this._pendingReplaceState = false, this._pendingStateQueue = null, !codeSegments) {
                        return scope.state;
                    }
                    if (inverse && 1 === codeSegments.length) {
                        return codeSegments[0];
                    }
                    var obj = flag({}, inverse ? codeSegments[0] : scope.state);
                    /** @type {number} */
                    var i = inverse ? 1 : 0;
                    for (;i < codeSegments.length;i++) {
                        var fn = codeSegments[i];
                        flag(obj, "function" == typeof fn ? fn.call(scope, obj, key, computed) : fn);
                    }
                    return obj;
                },
                /**
                 * @param {?} activeXObj
                 * @param {Object} existing
                 * @param {Object} value
                 * @param {?} context
                 * @param {string} transaction
                 * @param {Object} deepDataAndEvents
                 * @return {undefined}
                 */
                _performComponentUpdate : function(activeXObj, existing, value, context, transaction, deepDataAndEvents) {
                    var root;
                    var paths;
                    var contextName;
                    var config = this._instance;
                    /** @type {boolean} */
                    var has_search_bar = Boolean(config.componentDidUpdate);
                    if (has_search_bar) {
                        root = config.props;
                        paths = config.state;
                        contextName = config.context;
                    }
                    if (config.componentWillUpdate) {
                        config.componentWillUpdate(existing, value, context);
                    }
                    this._currentElement = activeXObj;
                    /** @type {Object} */
                    this._context = deepDataAndEvents;
                    /** @type {Object} */
                    config.props = existing;
                    /** @type {Object} */
                    config.state = value;
                    config.context = context;
                    this._updateRenderedComponent(transaction, deepDataAndEvents);
                    if (has_search_bar) {
                        transaction.getReactMountReady().enqueue(config.componentDidUpdate.bind(config, root, paths, contextName), config);
                    }
                },
                /**
                 * @param {string} dataAndEvents
                 * @param {string} deepDataAndEvents
                 * @return {undefined}
                 */
                _updateRenderedComponent : function(dataAndEvents, deepDataAndEvents) {
                    var o = this._renderedComponent;
                    var dontCloseTags = o._currentElement;
                    var optgroup = this._renderValidatedComponent();
                    if (indexOf(dontCloseTags, optgroup)) {
                        child.receiveComponent(o, optgroup, dataAndEvents, this._processChildContext(deepDataAndEvents));
                    } else {
                        var transaction = this._rootNodeID;
                        var restoreScript = o._rootNodeID;
                        child.unmountComponent(o);
                        this._renderedComponent = this._instantiateReactComponent(optgroup);
                        var r20 = child.mountComponent(this._renderedComponent, transaction, dataAndEvents, this._processChildContext(deepDataAndEvents));
                        this._replaceNodeWithMarkupByID(restoreScript, r20);
                    }
                },
                /**
                 * @param {?} callback
                 * @param {Node} regex
                 * @return {undefined}
                 */
                _replaceNodeWithMarkupByID : function(callback, regex) {
                    self.replaceNodeWithMarkupByID(callback, regex);
                },
                /**
                 * @return {?}
                 */
                _renderValidatedComponentWithoutOwnerOrContext : function() {
                    var sass = this._instance;
                    var io = sass.render();
                    return "undefined" == typeof io && (sass.render._isMockFunction && (io = null)), io;
                },
                /**
                 * @return {?}
                 */
                _renderValidatedComponent : function() {
                    var node;
                    stream.current = this;
                    try {
                        node = this._renderValidatedComponentWithoutOwnerOrContext();
                    } finally {
                        /** @type {null} */
                        stream.current = null;
                    }
                    return null === node || (node === false || nodes.isValidElement(node)) ? void 0 : getActual(false, "%s.render(): A valid ReactComponent must be returned. You may have returned undefined, an array or some other invalid object.", this.getName() || "ReactCompositeComponent"), node;
                },
                /**
                 * @param {?} stream
                 * @param {string} component
                 * @return {undefined}
                 */
                attachRef : function(stream, component) {
                    var a = this.getPublicInstance();
                    if (null == a) {
                        getActual(false, "Stateless function components cannot have refs.");
                    } else {
                        void 0;
                    }
                    var Stream = component.getPublicInstance();
                    var r20 = component && component.getName ? component.getName() : "a component";
                    func(null != Stream, 'Stateless function components cannot be given refs (See ref "%s" in %s created by %s). Attempts to access this ref will fail.', stream, r20, this.getName());
                    var global = a.refs === b ? a.refs = {} : a.refs;
                    global[stream] = Stream;
                },
                /**
                 * @param {?} ref
                 * @return {undefined}
                 */
                detachRef : function(ref) {
                    var refs = this.getPublicInstance().refs;
                    delete refs[ref];
                },
                /**
                 * @return {?}
                 */
                getName : function() {
                    var fn = this._currentElement.type;
                    var category = this._instance && this._instance.constructor;
                    return fn.displayName || (category && category.displayName || (fn.name || (category && category.name || null)));
                },
                /**
                 * @return {?}
                 */
                getPublicInstance : function() {
                    var context = this._instance;
                    return context instanceof jQuery ? null : context;
                },
                _instantiateReactComponent : null
            };
            assert.measureMethods(valid, "ReactCompositeComponent", {
                mountComponent : "mountComponent",
                updateComponent : "updateComponent",
                _renderValidatedComponent : "_renderValidatedComponent"
            });
            var JsDiff = {
                Mixin : valid
            };
            module.exports = JsDiff;
        }, {
            141 : 141,
            154 : 154,
            161 : 161,
            173 : 173,
            24 : 24,
            36 : 36,
            39 : 39,
            57 : 57,
            68 : 68,
            78 : 78,
            80 : 80,
            81 : 81,
            84 : 84,
            95 : 95
        }],
        39 : [function(dataAndEvents, module, deepDataAndEvents) {
            var JsDiff = {
                current : null
            };
            module.exports = JsDiff;
        }, {}],
        40 : [function(require, module, dataAndEvents) {
            var inspect = require(39);
            var selfClosing = require(51);
            var css = require(54);
            var helper = require(67);
            var bar = require(72);
            var self = require(78);
            var nodes = require(84);
            var Block = require(96);
            var v = require(97);
            var should = require(122);
            var expect = require(137);
            var assert = require(173);
            css.inject();
            var container = self.measure("React", "render", bar.render);
            var utils = {
                findDOMNode : should,
                render : container,
                unmountComponentAtNode : bar.unmountComponentAtNode,
                version : v,
                unstable_batchedUpdates : Block.batchedUpdates,
                unstable_renderSubtreeIntoContainer : expect
            };
            if ("undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
                if ("function" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject) {
                    __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
                        CurrentOwner : inspect,
                        InstanceHandles : helper,
                        Mount : bar,
                        Reconciler : nodes,
                        TextComponent : selfClosing
                    });
                }
            }
            var getActual = require(147);
            if (getActual.canUseDOM && window.top === window.self) {
                if ("undefined" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
                    if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                        console.debug("Download the React DevTools for a better development experience: https://fb.me/react-devtools");
                    }
                }
                var err = document.documentMode && document.documentMode < 8;
                assert(!err, 'Internet Explorer is running in compatibility mode; please add the following tag to your HTML to prevent this from happening: <meta http-equiv="X-UA-Compatible" content="IE=edge" />');
                /** @type {Array} */
                var codeSegments = [Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim, Object.create, Object.freeze];
                /** @type {number} */
                var i = 0;
                for (;i < codeSegments.length;i++) {
                    if (!codeSegments[i]) {
                        console.error("One or more ES5 shim/shams expected by React are not available: https://fb.me/react-warning-polyfills");
                        break;
                    }
                }
            }
            module.exports = utils;
        }, {
            122 : 122,
            137 : 137,
            147 : 147,
            173 : 173,
            39 : 39,
            51 : 51,
            54 : 54,
            67 : 67,
            72 : 72,
            78 : 78,
            84 : 84,
            96 : 96,
            97 : 97
        }],
        41 : [function(dataAndEvents, module, deepDataAndEvents) {
            var defaults = {
                onClick : true,
                onDoubleClick : true,
                onMouseDown : true,
                onMouseMove : true,
                onMouseUp : true,
                onClickCapture : true,
                onDoubleClickCapture : true,
                onMouseDownCapture : true,
                onMouseMoveCapture : true,
                onMouseUpCapture : true
            };
            var JsDiff = {
                /**
                 * @param {?} dataAndEvents
                 * @param {Object} options
                 * @param {string} deepDataAndEvents
                 * @return {?}
                 */
                getNativeProps : function(dataAndEvents, options, deepDataAndEvents) {
                    if (!options.disabled) {
                        return options;
                    }
                    var internalValues = {};
                    var key;
                    for (key in options) {
                        if (options.hasOwnProperty(key)) {
                            if (!defaults[key]) {
                                internalValues[key] = options[key];
                            }
                        }
                    }
                    return internalValues;
                }
            };
            module.exports = JsDiff;
        }, {}],
        42 : [function(require, module, dataAndEvents) {
            /**
             * @param {?} el
             * @return {?}
             */
            function on(el) {
                if (el) {
                    var field = el._currentElement._owner || null;
                    if (field) {
                        var c = field.getName();
                        if (c) {
                            return " This DOM node was rendered by `" + c + "`.";
                        }
                    }
                }
                return "";
            }
            /**
             * @return {?}
             */
            function listener() {
                var failuresLink = this._reactInternalComponent;
                return debug(false, "ReactDOMComponent: Do not access .getDOMNode() of a DOM node; instead, use the node directly.%s", on(failuresLink)), this;
            }
            /**
             * @return {?}
             */
            function setup() {
                var failuresLink = this._reactInternalComponent;
                return debug(false, "ReactDOMComponent: Do not access .isMounted() of a DOM node.%s", on(failuresLink)), !!failuresLink;
            }
            /**
             * @return {undefined}
             */
            function i() {
                var failuresLink = this._reactInternalComponent;
                debug(false, "ReactDOMComponent: Do not access .setState(), .replaceState(), or .forceUpdate() of a DOM node. This is a no-op.%s", on(failuresLink));
            }
            /**
             * @param {?} deepDataAndEvents
             * @param {string} method
             * @return {undefined}
             */
            function clone(deepDataAndEvents, method) {
                var failuresLink = this._reactInternalComponent;
                debug(false, "ReactDOMComponent: Do not access .setProps() of a DOM node. Instead, call ReactDOM.render again at the top level.%s", on(failuresLink));
                if (failuresLink) {
                    Dom.enqueueSetPropsInternal(failuresLink, deepDataAndEvents);
                    if (method) {
                        Dom.enqueueCallbackInternal(failuresLink, method);
                    }
                }
            }
            /**
             * @param {?} doc
             * @param {string} prop
             * @return {undefined}
             */
            function map(doc, prop) {
                var failuresLink = this._reactInternalComponent;
                debug(false, "ReactDOMComponent: Do not access .replaceProps() of a DOM node. Instead, call ReactDOM.render again at the top level.%s", on(failuresLink));
                if (failuresLink) {
                    Dom.enqueueReplacePropsInternal(failuresLink, doc);
                    if (prop) {
                        Dom.enqueueCallbackInternal(failuresLink, prop);
                    }
                }
            }
            /**
             * @param {Object} arg
             * @return {?}
             */
            function optgroup(arg) {
                if ("object" == typeof arg) {
                    if (Array.isArray(arg)) {
                        return "[" + arg.map(optgroup).join(", ") + "]";
                    }
                    /** @type {Array} */
                    var tagNameArr = [];
                    var a;
                    for (a in arg) {
                        if (Object.prototype.hasOwnProperty.call(arg, a)) {
                            /** @type {string} */
                            var aSibling = /^[a-z$_][\w$_]*$/i.test(a) ? a : JSON.stringify(a);
                            tagNameArr.push(aSibling + ": " + optgroup(arg[a]));
                        }
                    }
                    return "{" + tagNameArr.join(", ") + "}";
                }
                return "string" == typeof arg ? JSON.stringify(arg) : "function" == typeof arg ? "[function object]" : String(arg);
            }
            /**
             * @param {Object} obj
             * @param {Object} opt_key
             * @param {?} self
             * @return {undefined}
             */
            function get(obj, opt_key, self) {
                if (null != obj && (null != opt_key && !getActual(obj, opt_key))) {
                    var label;
                    var str = self._tag;
                    var field = self._currentElement._owner;
                    if (field) {
                        label = field.getName();
                    }
                    /** @type {string} */
                    var selector = label + "|" + str;
                    if (!css.hasOwnProperty(selector)) {
                        /** @type {boolean} */
                        css[selector] = true;
                        debug(false, "`%s` was passed a style object that has previously been mutated. Mutating `style` is deprecated. Consider cloning it beforehand. Check the `render` %s. Previous style: %s. Mutated style: %s.", str, field ? "of `" + label + "`" : "using <" + str + ">", optgroup(obj), optgroup(opt_key));
                    }
                }
            }
            /**
             * @param {?} self
             * @param {Element} target
             * @return {undefined}
             */
            function init(self, target) {
                if (target) {
                    if (socket[self._tag]) {
                        debug(null == target.children && null == target.dangerouslySetInnerHTML, "%s is a void element tag and must not have `children` or use `props.dangerouslySetInnerHTML`.%s", self._tag, self._currentElement._owner ? " Check the render method of " + self._currentElement._owner.getName() + "." : "");
                    }
                    if (null != target.dangerouslySetInnerHTML) {
                        if (null != target.children) {
                            isArray(false, "Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                        } else {
                            void 0;
                        }
                        if ("object" == typeof target.dangerouslySetInnerHTML && isIcon in target.dangerouslySetInnerHTML) {
                            void 0;
                        } else {
                            isArray(false, "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.");
                        }
                    }
                    debug(null == target.innerHTML, "Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                    debug(!target.contentEditable || null == target.children, "A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
                    if (null != target.style && "object" != typeof target.style) {
                        isArray(false, "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.%s", on(self));
                    } else {
                        void 0;
                    }
                }
            }
            /**
             * @param {string} id
             * @param {string} src
             * @param {?} value
             * @param {string} transaction
             * @return {undefined}
             */
            function load(id, src, value, transaction) {
                debug("onScroll" !== src || bind("scroll", true), "This browser doesn't support the `onScroll` event");
                var el = a.findReactContainerForID(id);
                if (el) {
                    var name = el.nodeType === IMG ? el.ownerDocument : el;
                    compile(src, name);
                }
                transaction.getReactMountReady().enqueue(udataCur, {
                    id : id,
                    registrationName : src,
                    listener : value
                });
            }
            /**
             * @return {undefined}
             */
            function udataCur() {
                var data = this;
                self.putListener(data.id, data.registrationName, data.listener);
            }
            /**
             * @return {undefined}
             */
            function update() {
                var node = this;
                if (node._rootNodeID) {
                    void 0;
                } else {
                    isArray(false, "Must be mounted to trap events");
                }
                var deepDataAndEvents = a.getNode(node._rootNodeID);
                switch(deepDataAndEvents ? void 0 : isArray(false, "trapBubbledEvent(...): Requires node to be rendered."), node._tag) {
                    case "iframe":
                        /** @type {Array} */
                        node._wrapperState.listeners = [self.trapBubbledEvent(path.topLevelTypes.topLoad, "load", deepDataAndEvents)];
                        break;
                    case "video":
                        ;
                    case "audio":
                        /** @type {Array} */
                        node._wrapperState.listeners = [];
                        var name;
                        for (name in partials) {
                            if (partials.hasOwnProperty(name)) {
                                node._wrapperState.listeners.push(self.trapBubbledEvent(path.topLevelTypes[name], partials[name], deepDataAndEvents));
                            }
                        }
                        break;
                    case "img":
                        /** @type {Array} */
                        node._wrapperState.listeners = [self.trapBubbledEvent(path.topLevelTypes.topError, "error", deepDataAndEvents), self.trapBubbledEvent(path.topLevelTypes.topLoad, "load", deepDataAndEvents)];
                        break;
                    case "form":
                        /** @type {Array} */
                        node._wrapperState.listeners = [self.trapBubbledEvent(path.topLevelTypes.topReset, "reset", deepDataAndEvents), self.trapBubbledEvent(path.topLevelTypes.topSubmit, "submit", deepDataAndEvents)];
                }
            }
            /**
             * @return {undefined}
             */
            function pdataOld() {
                lang.mountReadyWrapper(this);
            }
            /**
             * @return {undefined}
             */
            function pdataCur() {
                assert.postUpdateWrapper(this);
            }
            /**
             * @param {string} prop
             * @return {undefined}
             */
            function define(prop) {
                if (!hasOwn.call(params, prop)) {
                    if (exclude.test(prop)) {
                        void 0;
                    } else {
                        isArray(false, "Invalid tag: %s", prop);
                    }
                    /** @type {boolean} */
                    params[prop] = true;
                }
            }
            /**
             * @param {(Node|string)} dataAndEvents
             * @param {Object} protoProps
             * @return {?}
             */
            function inherits(dataAndEvents, protoProps) {
                dataAndEvents = create({}, dataAndEvents);
                var o = dataAndEvents[exp.ancestorInfoContextKey];
                return dataAndEvents[exp.ancestorInfoContextKey] = exp.updatedAncestorInfo(o, protoProps._tag, protoProps), dataAndEvents;
            }
            /**
             * @param {string} flags
             * @param {Object} var_args
             * @return {?}
             */
            function extend(flags, var_args) {
                return flags.indexOf("-") >= 0 || null != var_args.is;
            }
            /**
             * @param {string} name
             * @return {undefined}
             */
            function Type(name) {
                define(name);
                this._tag = name.toLowerCase();
                /** @type {null} */
                this._renderedChildren = null;
                /** @type {null} */
                this._previousStyle = null;
                /** @type {null} */
                this._previousStyleCopy = null;
                /** @type {null} */
                this._rootNodeID = null;
                /** @type {null} */
                this._wrapperState = null;
                /** @type {null} */
                this._topLevelWrapper = null;
                /** @type {null} */
                this._nodeWithLegacyProperties = null;
                /** @type {null} */
                this._unprocessedContextDev = null;
                /** @type {null} */
                this._processedContextDev = null;
            }
            var descriptor;
            var Block = require(2);
            var Element = require(5);
            var config = require(10);
            var jQuery = require(11);
            var path = require(15);
            var self = require(28);
            var helper = require(35);
            var Util = require(41);
            var lang = require(46);
            var util = require(47);
            var assert = require(48);
            var utils = require(52);
            var a = require(72);
            var Tree = require(73);
            var nodes = require(78);
            var Dom = require(95);
            var create = require(24);
            var should = require(117);
            var inspect = require(121);
            var isArray = require(161);
            var bind = require(133);
            var requestAnimationFrame = require(166);
            var getName = require(138);
            var flatten = require(139);
            var getActual = require(171);
            var exp = require(144);
            var debug = require(173);
            var index = self.deleteListener;
            var compile = self.listenTo;
            var client = self.registrationNameModules;
            var factory = {
                string : true,
                number : true
            };
            var id = requestAnimationFrame({
                children : null
            });
            var item = requestAnimationFrame({
                style : null
            });
            var isIcon = requestAnimationFrame({
                __html : null
            });
            /** @type {number} */
            var IMG = 1;
            descriptor = {
                props : {
                    enumerable : false,
                    /**
                     * @return {?}
                     */
                    get : function() {
                        var failuresLink = this._reactInternalComponent;
                        return debug(false, "ReactDOMComponent: Do not access .props of a DOM node; instead, recreate the props as `render` did originally or read the DOM properties/attributes directly from this node (e.g., this.refs.box.className).%s", on(failuresLink)), failuresLink._currentElement.props;
                    }
                }
            };
            var css = {};
            var partials = {
                topAbort : "abort",
                topCanPlay : "canplay",
                topCanPlayThrough : "canplaythrough",
                topDurationChange : "durationchange",
                topEmptied : "emptied",
                topEncrypted : "encrypted",
                topEnded : "ended",
                topError : "error",
                topLoadedData : "loadeddata",
                topLoadedMetadata : "loadedmetadata",
                topLoadStart : "loadstart",
                topPause : "pause",
                topPlay : "play",
                topPlaying : "playing",
                topProgress : "progress",
                topRateChange : "ratechange",
                topSeeked : "seeked",
                topSeeking : "seeking",
                topStalled : "stalled",
                topSuspend : "suspend",
                topTimeUpdate : "timeupdate",
                topVolumeChange : "volumechange",
                topWaiting : "waiting"
            };
            var selfClosing = {
                area : true,
                base : true,
                br : true,
                col : true,
                embed : true,
                hr : true,
                img : true,
                input : true,
                keygen : true,
                link : true,
                meta : true,
                param : true,
                source : true,
                track : true,
                wbr : true
            };
            var formProps = {
                listing : true,
                pre : true,
                textarea : true
            };
            var socket = create({
                menuitem : true
            }, selfClosing);
            /** @type {RegExp} */
            var exclude = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
            var params = {};
            /** @type {function (this:Object, *): boolean} */
            var hasOwn = {}.hasOwnProperty;
            /** @type {string} */
            Type.displayName = "ReactDOMComponent";
            Type.Mixin = {
                /**
                 * @param {string} label
                 * @return {undefined}
                 */
                construct : function(label) {
                    /** @type {string} */
                    this._currentElement = label;
                },
                /**
                 * @param {string} _xhr
                 * @param {string} transaction
                 * @param {string} dataAndEvents
                 * @return {?}
                 */
                mountComponent : function(_xhr, transaction, dataAndEvents) {
                    /** @type {string} */
                    this._rootNodeID = _xhr;
                    var options = this._currentElement.props;
                    switch(this._tag) {
                        case "iframe":
                            ;
                        case "img":
                            ;
                        case "form":
                            ;
                        case "video":
                            ;
                        case "audio":
                            this._wrapperState = {
                                listeners : null
                            };
                            transaction.getReactMountReady().enqueue(update, this);
                            break;
                        case "button":
                            options = Util.getNativeProps(this, options, dataAndEvents);
                            break;
                        case "input":
                            lang.mountWrapper(this, options, dataAndEvents);
                            options = lang.getNativeProps(this, options, dataAndEvents);
                            break;
                        case "option":
                            util.mountWrapper(this, options, dataAndEvents);
                            options = util.getNativeProps(this, options, dataAndEvents);
                            break;
                        case "select":
                            assert.mountWrapper(this, options, dataAndEvents);
                            options = assert.getNativeProps(this, options, dataAndEvents);
                            dataAndEvents = assert.processChildContext(this, options, dataAndEvents);
                            break;
                        case "textarea":
                            utils.mountWrapper(this, options, dataAndEvents);
                            options = utils.getNativeProps(this, options, dataAndEvents);
                    }
                    init(this, options);
                    if (dataAndEvents[exp.ancestorInfoContextKey]) {
                        exp(this._tag, this, dataAndEvents[exp.ancestorInfoContextKey]);
                    }
                    /** @type {string} */
                    this._unprocessedContextDev = dataAndEvents;
                    this._processedContextDev = inherits(dataAndEvents, this);
                    dataAndEvents = this._processedContextDev;
                    var targetNode;
                    if (transaction.useCreateElement) {
                        var xml = dataAndEvents[a.ownerDocumentContextKey];
                        var node = xml.createElement(this._currentElement.type);
                        jQuery.setAttributeForID(node, this._rootNodeID);
                        a.getID(node);
                        this._updateDOMProperties({}, options, transaction, node);
                        this._createInitialChildren(transaction, options, dataAndEvents, node);
                        targetNode = node;
                    } else {
                        var target = this._createOpenTagMarkupAndPutListeners(transaction, options);
                        var error = this._createContentMarkup(transaction, options, dataAndEvents);
                        /** @type {string} */
                        targetNode = !error && selfClosing[this._tag] ? target + "/>" : target + ">" + error + "</" + this._currentElement.type + ">";
                    }
                    switch(this._tag) {
                        case "input":
                            transaction.getReactMountReady().enqueue(pdataOld, this);
                        case "button":
                            ;
                        case "select":
                            ;
                        case "textarea":
                            if (options.autoFocus) {
                                transaction.getReactMountReady().enqueue(Block.focusDOMComponent, this);
                            }
                            ;
                    }
                    return targetNode;
                },
                /**
                 * @param {string} transaction
                 * @param {Object} first
                 * @return {?}
                 */
                _createOpenTagMarkupAndPutListeners : function(transaction, first) {
                    /** @type {string} */
                    var ret = "<" + this._currentElement.type;
                    var key;
                    for (key in first) {
                        if (first.hasOwnProperty(key)) {
                            var pdataOld = first[key];
                            if (null != pdataOld) {
                                if (client.hasOwnProperty(key)) {
                                    if (pdataOld) {
                                        load(this._rootNodeID, key, pdataOld, transaction);
                                    }
                                } else {
                                    if (key === item) {
                                        if (pdataOld) {
                                            this._previousStyle = pdataOld;
                                            pdataOld = this._previousStyleCopy = create({}, first.style);
                                        }
                                        pdataOld = Element.createMarkupForStyles(pdataOld);
                                    }
                                    /** @type {null} */
                                    var name = null;
                                    if (null != this._tag && extend(this._tag, first)) {
                                        if (key !== id) {
                                            name = jQuery.createMarkupForCustomAttribute(key, pdataOld);
                                        }
                                    } else {
                                        name = jQuery.createMarkupForProperty(key, pdataOld);
                                    }
                                    if (name) {
                                        ret += " " + name;
                                    }
                                }
                            }
                        }
                    }
                    if (transaction.renderToStaticMarkup) {
                        return ret;
                    }
                    var open = jQuery.createMarkupForID(this._rootNodeID);
                    return ret + " " + open;
                },
                /**
                 * @param {string} transaction
                 * @param {Object} container
                 * @param {string} deepDataAndEvents
                 * @return {?}
                 */
                _createContentMarkup : function(transaction, container, deepDataAndEvents) {
                    /** @type {string} */
                    var xml = "";
                    var innerHTML = container.dangerouslySetInnerHTML;
                    if (null != innerHTML) {
                        if (null != innerHTML.__html) {
                            xml = innerHTML.__html;
                        }
                    } else {
                        var data = factory[typeof container.children] ? container.children : null;
                        var childrenToUse = null != data ? null : container.children;
                        if (null != data) {
                            xml = inspect(data);
                        } else {
                            if (null != childrenToUse) {
                                var mountImages = this.mountChildren(childrenToUse, transaction, deepDataAndEvents);
                                xml = mountImages.join("");
                            }
                        }
                    }
                    return formProps[this._tag] && "\n" === xml.charAt(0) ? "\n" + xml : xml;
                },
                /**
                 * @param {string} dataAndEvents
                 * @param {Object} container
                 * @param {string} deepDataAndEvents
                 * @param {Element} value
                 * @return {undefined}
                 */
                _createInitialChildren : function(dataAndEvents, container, deepDataAndEvents, value) {
                    var innerHTML = container.dangerouslySetInnerHTML;
                    if (null != innerHTML) {
                        if (null != innerHTML.__html) {
                            getName(value, innerHTML.__html);
                        }
                    } else {
                        var shallow = factory[typeof container.children] ? container.children : null;
                        var Backbone = null != shallow ? null : container.children;
                        if (null != shallow) {
                            flatten(value, shallow);
                        } else {
                            if (null != Backbone) {
                                var codeSegments = this.mountChildren(Backbone, dataAndEvents, deepDataAndEvents);
                                /** @type {number} */
                                var i = 0;
                                for (;i < codeSegments.length;i++) {
                                    value.appendChild(codeSegments[i]);
                                }
                            }
                        }
                    }
                },
                /**
                 * @param {?} label
                 * @param {string} transaction
                 * @param {string} dataAndEvents
                 * @return {undefined}
                 */
                receiveComponent : function(label, transaction, dataAndEvents) {
                    var rvar = this._currentElement;
                    this._currentElement = label;
                    this.updateComponent(transaction, rvar, label, dataAndEvents);
                },
                /**
                 * @param {string} transaction
                 * @param {?} res
                 * @param {?} container
                 * @param {string} dataAndEvents
                 * @return {undefined}
                 */
                updateComponent : function(transaction, res, container, dataAndEvents) {
                    var data = res.props;
                    var props = this._currentElement.props;
                    switch(this._tag) {
                        case "button":
                            data = Util.getNativeProps(this, data);
                            props = Util.getNativeProps(this, props);
                            break;
                        case "input":
                            lang.updateWrapper(this);
                            data = lang.getNativeProps(this, data);
                            props = lang.getNativeProps(this, props);
                            break;
                        case "option":
                            data = util.getNativeProps(this, data);
                            props = util.getNativeProps(this, props);
                            break;
                        case "select":
                            data = assert.getNativeProps(this, data);
                            props = assert.getNativeProps(this, props);
                            break;
                        case "textarea":
                            utils.updateWrapper(this);
                            data = utils.getNativeProps(this, data);
                            props = utils.getNativeProps(this, props);
                    }
                    if (this._unprocessedContextDev !== dataAndEvents) {
                        /** @type {string} */
                        this._unprocessedContextDev = dataAndEvents;
                        this._processedContextDev = inherits(dataAndEvents, this);
                    }
                    dataAndEvents = this._processedContextDev;
                    init(this, props);
                    this._updateDOMProperties(data, props, transaction, null);
                    this._updateDOMChildren(data, props, transaction, dataAndEvents);
                    if (!should) {
                        if (this._nodeWithLegacyProperties) {
                            this._nodeWithLegacyProperties.props = props;
                        }
                    }
                    if ("select" === this._tag) {
                        transaction.getReactMountReady().enqueue(pdataCur, this);
                    }
                },
                /**
                 * @param {Object} dict
                 * @param {Object} styles
                 * @param {string} transaction
                 * @param {Element} node
                 * @return {undefined}
                 */
                _updateDOMProperties : function(dict, styles, transaction, node) {
                    var name;
                    var key;
                    var result;
                    for (name in dict) {
                        if (!styles.hasOwnProperty(name) && dict.hasOwnProperty(name)) {
                            if (name === item) {
                                var listenablePrototype = this._previousStyleCopy;
                                for (key in listenablePrototype) {
                                    if (listenablePrototype.hasOwnProperty(key)) {
                                        result = result || {};
                                        /** @type {string} */
                                        result[key] = "";
                                    }
                                }
                                /** @type {null} */
                                this._previousStyleCopy = null;
                            } else {
                                if (client.hasOwnProperty(name)) {
                                    if (dict[name]) {
                                        index(this._rootNodeID, name);
                                    }
                                } else {
                                    if (config.properties[name] || config.isCustomAttribute(name)) {
                                        if (!node) {
                                            node = a.getNode(this._rootNodeID);
                                        }
                                        jQuery.deleteValueForProperty(node, name);
                                    }
                                }
                            }
                        }
                    }
                    for (name in styles) {
                        var value = styles[name];
                        var attrs = name === item ? this._previousStyleCopy : dict[name];
                        if (styles.hasOwnProperty(name) && value !== attrs) {
                            if (name === item) {
                                if (value ? (get(this._previousStyleCopy, this._previousStyle, this), this._previousStyle = value, value = this._previousStyleCopy = create({}, value)) : this._previousStyleCopy = null, attrs) {
                                    for (key in attrs) {
                                        if (!!attrs.hasOwnProperty(key)) {
                                            if (!(value && value.hasOwnProperty(key))) {
                                                result = result || {};
                                                /** @type {string} */
                                                result[key] = "";
                                            }
                                        }
                                    }
                                    for (key in value) {
                                        if (value.hasOwnProperty(key)) {
                                            if (attrs[key] !== value[key]) {
                                                result = result || {};
                                                result[key] = value[key];
                                            }
                                        }
                                    }
                                } else {
                                    result = value;
                                }
                            } else {
                                if (client.hasOwnProperty(name)) {
                                    if (value) {
                                        load(this._rootNodeID, name, value, transaction);
                                    } else {
                                        if (attrs) {
                                            index(this._rootNodeID, name);
                                        }
                                    }
                                } else {
                                    if (extend(this._tag, styles)) {
                                        if (!node) {
                                            node = a.getNode(this._rootNodeID);
                                        }
                                        if (name === id) {
                                            /** @type {null} */
                                            value = null;
                                        }
                                        jQuery.setValueForAttribute(node, name, value);
                                    } else {
                                        if (config.properties[name] || config.isCustomAttribute(name)) {
                                            if (!node) {
                                                node = a.getNode(this._rootNodeID);
                                            }
                                            if (null != value) {
                                                jQuery.setValueForProperty(node, name, value);
                                            } else {
                                                jQuery.deleteValueForProperty(node, name);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (result) {
                        if (!node) {
                            node = a.getNode(this._rootNodeID);
                        }
                        Element.setValueForStyles(node, result);
                    }
                },
                /**
                 * @param {Object} lastProps
                 * @param {Object} nextProps
                 * @param {string} transaction
                 * @param {string} dataAndEvents
                 * @return {undefined}
                 */
                _updateDOMChildren : function(lastProps, nextProps, transaction, dataAndEvents) {
                    var attr = factory[typeof lastProps.children] ? lastProps.children : null;
                    var children = factory[typeof nextProps.children] ? nextProps.children : null;
                    var actual = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
                    var expected = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
                    var i = null != attr ? null : lastProps.children;
                    var typePattern = null != children ? null : nextProps.children;
                    /** @type {boolean} */
                    var k = null != attr || null != actual;
                    /** @type {boolean} */
                    var l = null != children || null != expected;
                    if (null != i && null == typePattern) {
                        this.updateChildren(null, transaction, dataAndEvents);
                    } else {
                        if (k) {
                            if (!l) {
                                this.updateTextContent("");
                            }
                        }
                    }
                    if (null != children) {
                        if (attr !== children) {
                            this.updateTextContent("" + children);
                        }
                    } else {
                        if (null != expected) {
                            if (actual !== expected) {
                                this.updateMarkup("" + expected);
                            }
                        } else {
                            if (null != typePattern) {
                                this.updateChildren(typePattern, transaction, dataAndEvents);
                            }
                        }
                    }
                },
                /**
                 * @return {undefined}
                 */
                unmountComponent : function() {
                    switch(this._tag) {
                        case "iframe":
                            ;
                        case "img":
                            ;
                        case "form":
                            ;
                        case "video":
                            ;
                        case "audio":
                            var codeSegments = this._wrapperState.listeners;
                            if (codeSegments) {
                                /** @type {number} */
                                var i = 0;
                                for (;i < codeSegments.length;i++) {
                                    codeSegments[i].remove();
                                }
                            }
                            break;
                        case "input":
                            lang.unmountWrapper(this);
                            break;
                        case "html":
                            ;
                        case "head":
                            ;
                        case "body":
                            isArray(false, "<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.", this._tag);
                    }
                    if (this.unmountChildren(), self.deleteAllListeners(this._rootNodeID), helper.unmountIDFromEnvironment(this._rootNodeID), this._rootNodeID = null, this._wrapperState = null, this._nodeWithLegacyProperties) {
                        var _nodeWithLegacyProperties = this._nodeWithLegacyProperties;
                        /** @type {null} */
                        _nodeWithLegacyProperties._reactInternalComponent = null;
                        /** @type {null} */
                        this._nodeWithLegacyProperties = null;
                    }
                },
                /**
                 * @return {?}
                 */
                getPublicInstance : function() {
                    if (!this._nodeWithLegacyProperties) {
                        var self = a.getNode(this._rootNodeID);
                        self._reactInternalComponent = this;
                        /** @type {function (): ?} */
                        self.getDOMNode = listener;
                        /** @type {function (): ?} */
                        self.isMounted = setup;
                        /** @type {function (): undefined} */
                        self.setState = i;
                        /** @type {function (): undefined} */
                        self.replaceState = i;
                        /** @type {function (): undefined} */
                        self.forceUpdate = i;
                        /** @type {function (?, string): undefined} */
                        self.setProps = clone;
                        /** @type {function (?, string): undefined} */
                        self.replaceProps = map;
                        if (should) {
                            Object.defineProperties(self, descriptor);
                        } else {
                            self.props = this._currentElement.props;
                        }
                        this._nodeWithLegacyProperties = self;
                    }
                    return this._nodeWithLegacyProperties;
                }
            };
            nodes.measureMethods(Type, "ReactDOMComponent", {
                mountComponent : "mountComponent",
                updateComponent : "updateComponent"
            });
            create(Type.prototype, Type.Mixin, Tree.Mixin);
            /** @type {function (string): undefined} */
            module.exports = Type;
        }, {
            10 : 10,
            11 : 11,
            117 : 117,
            121 : 121,
            133 : 133,
            138 : 138,
            139 : 139,
            144 : 144,
            15 : 15,
            161 : 161,
            166 : 166,
            171 : 171,
            173 : 173,
            2 : 2,
            24 : 24,
            28 : 28,
            35 : 35,
            41 : 41,
            46 : 46,
            47 : 47,
            48 : 48,
            5 : 5,
            52 : 52,
            72 : 72,
            73 : 73,
            78 : 78,
            95 : 95
        }],
        43 : [function($sanitize, module, dataAndEvents) {
            /**
             * @param {string} event
             * @return {?}
             */
            function fn(event) {
                return fixHook.createFactory(event);
            }
            var fixHook = ($sanitize(57), $sanitize(58));
            var memoized = $sanitize(167);
            var ret = memoized({
                a : "a",
                abbr : "abbr",
                address : "address",
                area : "area",
                article : "article",
                aside : "aside",
                audio : "audio",
                b : "b",
                base : "base",
                bdi : "bdi",
                bdo : "bdo",
                big : "big",
                blockquote : "blockquote",
                body : "body",
                br : "br",
                button : "button",
                canvas : "canvas",
                caption : "caption",
                cite : "cite",
                code : "code",
                col : "col",
                colgroup : "colgroup",
                data : "data",
                datalist : "datalist",
                dd : "dd",
                del : "del",
                details : "details",
                dfn : "dfn",
                dialog : "dialog",
                div : "div",
                dl : "dl",
                dt : "dt",
                em : "em",
                embed : "embed",
                fieldset : "fieldset",
                figcaption : "figcaption",
                figure : "figure",
                footer : "footer",
                form : "form",
                h1 : "h1",
                h2 : "h2",
                h3 : "h3",
                h4 : "h4",
                h5 : "h5",
                h6 : "h6",
                head : "head",
                header : "header",
                hgroup : "hgroup",
                hr : "hr",
                html : "html",
                i : "i",
                iframe : "iframe",
                img : "img",
                input : "input",
                ins : "ins",
                kbd : "kbd",
                keygen : "keygen",
                label : "label",
                legend : "legend",
                li : "li",
                link : "link",
                main : "main",
                map : "map",
                mark : "mark",
                menu : "menu",
                menuitem : "menuitem",
                meta : "meta",
                meter : "meter",
                nav : "nav",
                noscript : "noscript",
                object : "object",
                ol : "ol",
                optgroup : "optgroup",
                option : "option",
                output : "output",
                p : "p",
                param : "param",
                picture : "picture",
                pre : "pre",
                progress : "progress",
                q : "q",
                rp : "rp",
                rt : "rt",
                ruby : "ruby",
                s : "s",
                samp : "samp",
                script : "script",
                section : "section",
                select : "select",
                small : "small",
                source : "source",
                span : "span",
                strong : "strong",
                style : "style",
                sub : "sub",
                summary : "summary",
                sup : "sup",
                table : "table",
                tbody : "tbody",
                td : "td",
                textarea : "textarea",
                tfoot : "tfoot",
                th : "th",
                thead : "thead",
                time : "time",
                title : "title",
                tr : "tr",
                track : "track",
                u : "u",
                ul : "ul",
                var : "var",
                video : "video",
                wbr : "wbr",
                circle : "circle",
                clipPath : "clipPath",
                defs : "defs",
                ellipse : "ellipse",
                g : "g",
                image : "image",
                line : "line",
                linearGradient : "linearGradient",
                mask : "mask",
                path : "path",
                pattern : "pattern",
                polygon : "polygon",
                polyline : "polyline",
                radialGradient : "radialGradient",
                rect : "rect",
                stop : "stop",
                svg : "svg",
                text : "text",
                tspan : "tspan"
            }, fn);
            module.exports = ret;
        }, {
            167 : 167,
            57 : 57,
            58 : 58
        }],
        44 : [function(dataAndEvents, module, deepDataAndEvents) {
            var JsDiff = {
                useCreateElement : false
            };
            module.exports = JsDiff;
        }, {}],
        45 : [function(map, module, dataAndEvents) {
            var Ext = map(9);
            var jQuery = map(11);
            var ids = map(72);
            var formatted = map(78);
            var dataAttr = map(161);
            var data = {
                dangerouslySetInnerHTML : "`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.",
                style : "`style` must be set using `updateStylesByID()`."
            };
            var T = {
                /**
                 * @param {?} id
                 * @param {string} name
                 * @param {string} value
                 * @return {undefined}
                 */
                updatePropertyByID : function(id, name, value) {
                    var node = ids.getNode(id);
                    if (data.hasOwnProperty(name)) {
                        dataAttr(false, "updatePropertyByID(...): %s", data[name]);
                    } else {
                        void 0;
                    }
                    if (null != value) {
                        jQuery.setValueForProperty(node, name, value);
                    } else {
                        jQuery.deleteValueForProperty(node, name);
                    }
                },
                /**
                 * @param {?} id
                 * @param {Node} o
                 * @return {undefined}
                 */
                dangerouslyReplaceNodeWithMarkupByID : function(id, o) {
                    var node = ids.getNode(id);
                    Ext.dangerouslyReplaceNodeWithMarkup(node, o);
                },
                /**
                 * @param {Array} updates
                 * @param {?} value
                 * @return {undefined}
                 */
                dangerouslyProcessChildrenUpdates : function(updates, value) {
                    /** @type {number} */
                    var i = 0;
                    for (;i < updates.length;i++) {
                        updates[i].parentNode = ids.getNode(updates[i].parentID);
                    }
                    Ext.processUpdates(updates, value);
                }
            };
            formatted.measureMethods(T, "ReactDOMIDOperations", {
                dangerouslyReplaceNodeWithMarkupByID : "dangerouslyReplaceNodeWithMarkupByID",
                dangerouslyProcessChildrenUpdates : "dangerouslyProcessChildrenUpdates"
            });
            module.exports = T;
        }, {
            11 : 11,
            161 : 161,
            72 : 72,
            78 : 78,
            9 : 9
        }],
        46 : [function(require, mod, dataAndEvents) {
            /**
             * @return {undefined}
             */
            function value() {
                if (this._rootNodeID) {
                    ret.updateWrapper(this);
                }
            }
            /**
             * @param {Event} fn
             * @return {?}
             */
            function init(fn) {
                var elem = this._currentElement.props;
                var matched = result.executeOnChange(elem, fn);
                hooks.asap(value, this);
                var text = elem.name;
                if ("radio" === elem.type && null != text) {
                    var $this = b.getNode(this._rootNodeID);
                    var target = $this;
                    for (;target.parentNode;) {
                        target = target.parentNode;
                    }
                    var codeSegments = target.querySelectorAll("input[name=" + JSON.stringify("" + text) + '][type="radio"]');
                    /** @type {number} */
                    var i = 0;
                    for (;i < codeSegments.length;i++) {
                        var el = codeSegments[i];
                        if (el !== $this && el.form === $this.form) {
                            var sel = b.getID(el);
                            if (sel) {
                                void 0;
                            } else {
                                module(false, "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                            }
                            var val = matches[sel];
                            if (val) {
                                void 0;
                            } else {
                                module(false, "ReactDOMInput: Unknown radio button ID %s.", sel);
                            }
                            hooks.asap(value, val);
                        }
                    }
                }
                return matched;
            }
            var dom = require(45);
            var result = require(23);
            var b = require(72);
            var hooks = require(96);
            var declare = require(24);
            var module = require(161);
            var matches = {};
            var ret = {
                /**
                 * @param {?} dataAndEvents
                 * @param {Element} item
                 * @param {string} deepDataAndEvents
                 * @return {?}
                 */
                getNativeProps : function(dataAndEvents, item, deepDataAndEvents) {
                    var value = result.getValue(item);
                    var $item = result.getChecked(item);
                    var obj = declare({}, item, {
                        defaultChecked : void 0,
                        defaultValue : void 0,
                        value : null != value ? value : dataAndEvents._wrapperState.initialValue,
                        checked : null != $item ? $item : dataAndEvents._wrapperState.initialChecked,
                        onChange : dataAndEvents._wrapperState.onChange
                    });
                    return obj;
                },
                /**
                 * @param {Object} recurring
                 * @param {Object} input
                 * @return {undefined}
                 */
                mountWrapper : function(recurring, input) {
                    result.checkPropTypes("input", input, recurring._currentElement._owner);
                    var il = input.defaultValue;
                    recurring._wrapperState = {
                        initialChecked : input.defaultChecked || false,
                        initialValue : null != il ? il : null,
                        onChange : init.bind(recurring)
                    };
                },
                /**
                 * @param {Object} dataAndEvents
                 * @return {undefined}
                 */
                mountReadyWrapper : function(dataAndEvents) {
                    /** @type {Object} */
                    matches[dataAndEvents._rootNodeID] = dataAndEvents;
                },
                /**
                 * @param {Object} dataAndEvents
                 * @return {undefined}
                 */
                unmountWrapper : function(dataAndEvents) {
                    delete matches[dataAndEvents._rootNodeID];
                },
                /**
                 * @param {Object} self
                 * @return {undefined}
                 */
                updateWrapper : function(self) {
                    var item = self._currentElement.props;
                    var value = item.checked;
                    if (null != value) {
                        dom.updatePropertyByID(self._rootNodeID, "checked", value || false);
                    }
                    var res = result.getValue(item);
                    if (null != res) {
                        dom.updatePropertyByID(self._rootNodeID, "value", "" + res);
                    }
                }
            };
            mod.exports = ret;
        }, {
            161 : 161,
            23 : 23,
            24 : 24,
            45 : 45,
            72 : 72,
            96 : 96
        }],
        47 : [function(require, module, dataAndEvents) {
            var util = require(32);
            var a = require(48);
            var formatValue = require(24);
            var getActual = require(173);
            var al = a.valueContextKey;
            var JsDiff = {
                /**
                 * @param {?} dataAndEvents
                 * @param {Element} option
                 * @param {string} deepDataAndEvents
                 * @return {undefined}
                 */
                mountWrapper : function(dataAndEvents, option, deepDataAndEvents) {
                    getActual(null == option.selected, "Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                    var paths = deepDataAndEvents[al];
                    /** @type {null} */
                    var selected = null;
                    if (null != paths) {
                        if (selected = false, Array.isArray(paths)) {
                            /** @type {number} */
                            var jj = 0;
                            for (;jj < paths.length;jj++) {
                                if ("" + paths[jj] == "" + option.value) {
                                    /** @type {boolean} */
                                    selected = true;
                                    break;
                                }
                            }
                        } else {
                            /** @type {boolean} */
                            selected = "" + paths == "" + option.value;
                        }
                    }
                    dataAndEvents._wrapperState = {
                        selected : selected
                    };
                },
                /**
                 * @param {?} dataAndEvents
                 * @param {?} obj
                 * @param {string} deepDataAndEvents
                 * @return {?}
                 */
                getNativeProps : function(dataAndEvents, obj, deepDataAndEvents) {
                    var item = formatValue({
                        selected : void 0,
                        children : void 0
                    }, obj);
                    if (null != dataAndEvents._wrapperState.selected) {
                        item.selected = dataAndEvents._wrapperState.selected;
                    }
                    /** @type {string} */
                    var tmp = "";
                    return util.forEach(obj.children, function(err) {
                        if (null != err) {
                            if ("string" == typeof err || "number" == typeof err) {
                                tmp += err;
                            } else {
                                getActual(false, "Only strings and numbers are supported as <option> children.");
                            }
                        }
                    }), tmp && (item.children = tmp), item;
                }
            };
            module.exports = JsDiff;
        }, {
            173 : 173,
            24 : 24,
            32 : 32,
            48 : 48
        }],
        48 : [function(require, module, dataAndEvents) {
            /**
             * @return {undefined}
             */
            function add() {
                if (this._rootNodeID && this._wrapperState.pendingUpdate) {
                    /** @type {boolean} */
                    this._wrapperState.pendingUpdate = false;
                    var item = this._currentElement.props;
                    var l = that.getValue(item);
                    if (null != l) {
                        callback(this, Boolean(item.multiple), l);
                    }
                }
            }
            /**
             * @param {Object} object
             * @return {?}
             */
            function toString(object) {
                if (object) {
                    var b = object.getName();
                    if (b) {
                        return " Check the render method of `" + b + "`.";
                    }
                }
                return "";
            }
            /**
             * @param {Object} recurring
             * @param {Object} el
             * @return {undefined}
             */
            function setElementValue(recurring, el) {
                var obj = recurring._currentElement._owner;
                that.checkPropTypes("select", el, obj);
                /** @type {number} */
                var i = 0;
                for (;i < codeSegments.length;i++) {
                    var k = codeSegments[i];
                    if (null != el[k]) {
                        if (el.multiple) {
                            getActual(Array.isArray(el[k]), "The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", k, toString(obj));
                        } else {
                            getActual(!Array.isArray(el[k]), "The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", k, toString(obj));
                        }
                    }
                }
            }
            /**
             * @param {Object} dataAndEvents
             * @param {boolean} __
             * @param {string} c
             * @return {?}
             */
            function callback(dataAndEvents, __, c) {
                var a;
                var i;
                var codeSegments = dom.getNode(dataAndEvents._rootNodeID).options;
                if (__) {
                    a = {};
                    /** @type {number} */
                    i = 0;
                    for (;i < c.length;i++) {
                        /** @type {boolean} */
                        a["" + c[i]] = true;
                    }
                    /** @type {number} */
                    i = 0;
                    for (;i < codeSegments.length;i++) {
                        /** @type {boolean} */
                        var checked = a.hasOwnProperty(codeSegments[i].value);
                        if (codeSegments[i].selected !== checked) {
                            /** @type {boolean} */
                            codeSegments[i].selected = checked;
                        }
                    }
                } else {
                    /** @type {string} */
                    a = "" + c;
                    /** @type {number} */
                    i = 0;
                    for (;i < codeSegments.length;i++) {
                        if (codeSegments[i].value === a) {
                            return void(codeSegments[i].selected = true);
                        }
                    }
                    if (codeSegments.length) {
                        /** @type {boolean} */
                        codeSegments[0].selected = true;
                    }
                }
            }
            /**
             * @param {Event} index
             * @return {?}
             */
            function go(index) {
                var props = this._currentElement.props;
                var key = that.executeOnChange(props, index);
                return this._wrapperState.pendingUpdate = true, $.asap(add, this), key;
            }
            var that = require(23);
            var dom = require(72);
            var $ = require(96);
            var inspect = require(24);
            var getActual = require(173);
            /** @type {string} */
            var n1 = "__ReactDOMSelect_value$" + Math.random().toString(36).slice(2);
            /** @type {Array} */
            var codeSegments = ["value", "defaultValue"];
            var JsDiff = {
                valueContextKey : n1,
                /**
                 * @param {?} dataAndEvents
                 * @param {?} key
                 * @param {string} deepDataAndEvents
                 * @return {?}
                 */
                getNativeProps : function(dataAndEvents, key, deepDataAndEvents) {
                    return inspect({}, key, {
                        onChange : dataAndEvents._wrapperState.onChange,
                        value : void 0
                    });
                },
                /**
                 * @param {Object} recurring
                 * @param {Object} item
                 * @return {undefined}
                 */
                mountWrapper : function(recurring, item) {
                    setElementValue(recurring, item);
                    var $item = that.getValue(item);
                    recurring._wrapperState = {
                        pendingUpdate : false,
                        initialValue : null != $item ? $item : item.defaultValue,
                        onChange : go.bind(recurring),
                        wasMultiple : Boolean(item.multiple)
                    };
                },
                /**
                 * @param {?} dataAndEvents
                 * @param {?} optionsString
                 * @param {string} deepDataAndEvents
                 * @return {?}
                 */
                processChildContext : function(dataAndEvents, optionsString, deepDataAndEvents) {
                    var str = inspect({}, deepDataAndEvents);
                    return str[n1] = dataAndEvents._wrapperState.initialValue, str;
                },
                /**
                 * @param {Object} dataAndEvents
                 * @return {undefined}
                 */
                postUpdateWrapper : function(dataAndEvents) {
                    var item = dataAndEvents._currentElement.props;
                    dataAndEvents._wrapperState.initialValue = void 0;
                    var wasMultiple = dataAndEvents._wrapperState.wasMultiple;
                    /** @type {boolean} */
                    dataAndEvents._wrapperState.wasMultiple = Boolean(item.multiple);
                    var l = that.getValue(item);
                    if (null != l) {
                        /** @type {boolean} */
                        dataAndEvents._wrapperState.pendingUpdate = false;
                        callback(dataAndEvents, Boolean(item.multiple), l);
                    } else {
                        if (wasMultiple !== Boolean(item.multiple)) {
                            if (null != item.defaultValue) {
                                callback(dataAndEvents, Boolean(item.multiple), item.defaultValue);
                            } else {
                                callback(dataAndEvents, Boolean(item.multiple), item.multiple ? [] : "");
                            }
                        }
                    }
                }
            };
            module.exports = JsDiff;
        }, {
            173 : 173,
            23 : 23,
            24 : 24,
            72 : 72,
            96 : 96
        }],
        49 : [function(require, module, dataAndEvents) {
            /**
             * @param {(Node|string)} element
             * @param {number} a
             * @param {(Node|string)} container
             * @param {number} b
             * @return {?}
             */
            function cursorFromBoundaryPoint(element, a, container, b) {
                return element === container && a === b;
            }
            /**
             * @param {Object} el
             * @return {?}
             */
            function makeSelection(el) {
                /** @type {(Selection|null)} */
                var selection = document.selection;
                /** @type {(ControlRange|TextRange|null)} */
                var selectedRange = selection.createRange();
                var curr = selectedRange.text.length;
                var fromStart = selectedRange.duplicate();
                fromStart.moveToElementText(el);
                fromStart.setEndPoint("EndToStart", selectedRange);
                var prev = fromStart.text.length;
                var max = prev + curr;
                return{
                    start : prev,
                    end : max
                };
            }
            /**
             * @param {Object} obj
             * @return {?}
             */
            function insert(obj) {
                /** @type {(Selection|null)} */
                var selection = window.getSelection && window.getSelection();
                if (!selection || 0 === selection.rangeCount) {
                    return null;
                }
                /** @type {(Node|null)} */
                var anchorNode = selection.anchorNode;
                /** @type {number} */
                var anchorOffset = selection.anchorOffset;
                /** @type {(Node|null)} */
                var focusNode = selection.focusNode;
                /** @type {number} */
                var focusOffset = selection.focusOffset;
                /** @type {(Range|null)} */
                var ref = selection.getRangeAt(0);
                try {
                    ref.startContainer.nodeType;
                    ref.endContainer.nodeType;
                } catch (i) {
                    return null;
                }
                var keys = cursorFromBoundaryPoint(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
                /** @type {number} */
                var length = keys ? 0 : ref.toString().length;
                /** @type {(Range|null)} */
                var range = ref.cloneRange();
                range.selectNodeContents(obj);
                range.setEnd(ref.startContainer, ref.startOffset);
                var cursor = cursorFromBoundaryPoint(range.startContainer, range.startOffset, range.endContainer, range.endOffset);
                /** @type {number} */
                var start = cursor ? 0 : range.toString().length;
                /** @type {number} */
                var end = start + length;
                /** @type {(Range|null)} */
                var detectionRange = document.createRange();
                detectionRange.setStart(anchorNode, anchorOffset);
                detectionRange.setEnd(focusNode, focusOffset);
                /** @type {boolean} */
                var isBackward = detectionRange.collapsed;
                return{
                    start : isBackward ? end : start,
                    end : isBackward ? start : end
                };
            }
            /**
             * @param {Element} el
             * @param {?} range
             * @return {undefined}
             */
            function getSelection(el, range) {
                var start;
                var end;
                var r = document.selection.createRange().duplicate();
                if ("undefined" == typeof range.end) {
                    start = range.start;
                    end = start;
                } else {
                    if (range.start > range.end) {
                        start = range.end;
                        end = range.start;
                    } else {
                        start = range.start;
                        end = range.end;
                    }
                }
                r.moveToElementText(el);
                r.moveStart("character", start);
                r.setEndPoint("EndToStart", r);
                r.moveEnd("character", end - start);
                r.select();
            }
            /**
             * @param {Element} node
             * @param {?} range
             * @return {undefined}
             */
            function init(node, range) {
                if (window.getSelection) {
                    /** @type {(Selection|null)} */
                    var selection = window.getSelection();
                    var olen = node[path()].length;
                    /** @type {number} */
                    var name = Math.min(range.start, olen);
                    /** @type {number} */
                    var fn = "undefined" == typeof range.end ? name : Math.min(range.end, olen);
                    if (!selection.extend && name > fn) {
                        /** @type {number} */
                        var original = fn;
                        /** @type {number} */
                        fn = name;
                        /** @type {number} */
                        name = original;
                    }
                    var startMarker = index(node, name);
                    var endMarker = index(node, fn);
                    if (startMarker && endMarker) {
                        /** @type {(Range|null)} */
                        var nativeRange = document.createRange();
                        nativeRange.setStart(startMarker.node, startMarker.offset);
                        selection.removeAllRanges();
                        if (name > fn) {
                            selection.addRange(nativeRange);
                            selection.extend(endMarker.node, endMarker.offset);
                        } else {
                            nativeRange.setEnd(endMarker.node, endMarker.offset);
                            selection.addRange(nativeRange);
                        }
                    }
                }
            }
            var Block = require(147);
            var index = require(130);
            var path = require(131);
            var skip = Block.canUseDOM && ("selection" in document && !("getSelection" in window));
            var JsDiff = {
                /** @type {function (Object): ?} */
                getOffsets : skip ? makeSelection : insert,
                /** @type {function (Element, ?): undefined} */
                setOffsets : skip ? getSelection : init
            };
            module.exports = JsDiff;
        }, {
            130 : 130,
            131 : 131,
            147 : 147
        }],
        50 : [function(require, module, dataAndEvents) {
            var css = require(54);
            var Block = require(88);
            var nodes = require(97);
            css.inject();
            var client = {
                renderToString : Block.renderToString,
                renderToStaticMarkup : Block.renderToStaticMarkup,
                version : nodes
            };
            module.exports = client;
        }, {
            54 : 54,
            88 : 88,
            97 : 97
        }],
        51 : [function(require, module, dataAndEvents) {
            var select = require(9);
            var jQuery = require(11);
            var Block = require(35);
            var a = require(72);
            var createObject = require(24);
            var getActual = require(121);
            var traverseNode = require(139);
            var nodes = require(144);
            /**
             * @param {string} name
             * @return {undefined}
             */
            var Type = function(name) {
            };
            createObject(Type.prototype, {
                /**
                 * @param {string} label
                 * @return {undefined}
                 */
                construct : function(label) {
                    /** @type {string} */
                    this._currentElement = label;
                    /** @type {string} */
                    this._stringText = "" + label;
                    /** @type {null} */
                    this._rootNodeID = null;
                    /** @type {number} */
                    this._mountIndex = 0;
                },
                /**
                 * @param {string} fn
                 * @param {string} transaction
                 * @param {string} dataAndEvents
                 * @return {?}
                 */
                mountComponent : function(fn, transaction, dataAndEvents) {
                    if (dataAndEvents[nodes.ancestorInfoContextKey] && nodes("span", null, dataAndEvents[nodes.ancestorInfoContextKey]), this._rootNodeID = fn, transaction.useCreateElement) {
                        var DOCUMENT = dataAndEvents[a.ownerDocumentContextKey];
                        var node = DOCUMENT.createElement("span");
                        return jQuery.setAttributeForID(node, fn), a.getID(node), traverseNode(node, this._stringText), node;
                    }
                    var actual = getActual(this._stringText);
                    return transaction.renderToStaticMarkup ? actual : "<span " + jQuery.createMarkupForID(fn) + ">" + actual + "</span>";
                },
                /**
                 * @param {string} label
                 * @param {string} transaction
                 * @return {undefined}
                 */
                receiveComponent : function(label, transaction) {
                    if (label !== this._currentElement) {
                        /** @type {string} */
                        this._currentElement = label;
                        /** @type {string} */
                        var recurring = "" + label;
                        if (recurring !== this._stringText) {
                            /** @type {string} */
                            this._stringText = recurring;
                            var optgroup = a.getNode(this._rootNodeID);
                            select.updateTextContent(optgroup, recurring);
                        }
                    }
                },
                /**
                 * @return {undefined}
                 */
                unmountComponent : function() {
                    Block.unmountIDFromEnvironment(this._rootNodeID);
                }
            });
            /** @type {function (string): undefined} */
            module.exports = Type;
        }, {
            11 : 11,
            121 : 121,
            139 : 139,
            144 : 144,
            24 : 24,
            35 : 35,
            72 : 72,
            9 : 9
        }],
        52 : [function(jQuery, module, dataAndEvents) {
            /**
             * @return {undefined}
             */
            function result() {
                if (this._rootNodeID) {
                    JsDiff.updateWrapper(this);
                }
            }
            /**
             * @param {Event} current
             * @return {?}
             */
            function statCb(current) {
                var def = this._currentElement.props;
                var s = self.executeOnChange(def, current);
                return q.asap(result, this), s;
            }
            var self = jQuery(23);
            var node = jQuery(45);
            var q = jQuery(96);
            var group = jQuery(24);
            var scripts = jQuery(161);
            var hidden = jQuery(173);
            var JsDiff = {
                /**
                 * @param {?} dataAndEvents
                 * @param {?} value
                 * @param {string} deepDataAndEvents
                 * @return {?}
                 */
                getNativeProps : function(dataAndEvents, value, deepDataAndEvents) {
                    if (null != value.dangerouslySetInnerHTML) {
                        scripts(false, "`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                    } else {
                        void 0;
                    }
                    var text = group({}, value, {
                        defaultValue : void 0,
                        value : void 0,
                        children : dataAndEvents._wrapperState.initialValue,
                        onChange : dataAndEvents._wrapperState.onChange
                    });
                    return text;
                },
                /**
                 * @param {Object} recurring
                 * @param {Object} name
                 * @return {undefined}
                 */
                mountWrapper : function(recurring, name) {
                    self.checkPropTypes("textarea", name, recurring._currentElement._owner);
                    var defaultValue = name.defaultValue;
                    var children = name.children;
                    if (null != children) {
                        hidden(false, "Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                        if (null != defaultValue) {
                            scripts(false, "If you supply `defaultValue` on a <textarea>, do not pass children.");
                        } else {
                            void 0;
                        }
                        if (Array.isArray(children)) {
                            if (children.length <= 1) {
                                void 0;
                            } else {
                                scripts(false, "<textarea> can only have at most one child.");
                            }
                            children = children[0];
                        }
                        /** @type {string} */
                        defaultValue = "" + children;
                    }
                    if (null == defaultValue) {
                        /** @type {string} */
                        defaultValue = "";
                    }
                    var event = self.getValue(name);
                    recurring._wrapperState = {
                        initialValue : "" + (null != event ? event : defaultValue),
                        onChange : statCb.bind(recurring)
                    };
                },
                /**
                 * @param {Object} component
                 * @return {undefined}
                 */
                updateWrapper : function(component) {
                    var i = component._currentElement.props;
                    var c = self.getValue(i);
                    if (null != c) {
                        node.updatePropertyByID(component._rootNodeID, "value", "" + c);
                    }
                }
            };
            module.exports = JsDiff;
        }, {
            161 : 161,
            173 : 173,
            23 : 23,
            24 : 24,
            45 : 45,
            96 : 96
        }],
        53 : [function(require, module, dataAndEvents) {
            /**
             * @return {undefined}
             */
            function exception() {
                this.reinitializeTransaction();
            }
            var recurring = require(96);
            var nodes = require(113);
            var expect = require(24);
            var initialize = require(153);
            var methods = {
                initialize : initialize,
                /**
                 * @return {undefined}
                 */
                close : function() {
                    /** @type {boolean} */
                    input.isBatchingUpdates = false;
                }
            };
            var offsetLeft = {
                initialize : initialize,
                close : recurring.flushBatchedUpdates.bind(recurring)
            };
            /** @type {Array} */
            var start = [offsetLeft, methods];
            expect(exception.prototype, nodes.Mixin, {
                /**
                 * @return {?}
                 */
                getTransactionWrappers : function() {
                    return start;
                }
            });
            var self = new exception;
            var input = {
                isBatchingUpdates : false,
                /**
                 * @param {Function} callback
                 * @param {?} param
                 * @param {Object} id
                 * @param {Object} body
                 * @param {?} shallow
                 * @param {Object} state
                 * @return {undefined}
                 */
                batchedUpdates : function(callback, param, id, body, shallow, state) {
                    /** @type {boolean} */
                    var il = input.isBatchingUpdates;
                    /** @type {boolean} */
                    input.isBatchingUpdates = true;
                    if (il) {
                        callback(param, id, body, shallow, state);
                    } else {
                        self.perform(callback, null, param, id, body, shallow, state);
                    }
                }
            };
            module.exports = input;
        }, {
            113 : 113,
            153 : 153,
            24 : 24,
            96 : 96
        }],
        54 : [function(fun, $, dataAndEvents) {
            /**
             * @return {undefined}
             */
            function test() {
                if (!z) {
                    /** @type {boolean} */
                    z = true;
                    exports.EventEmitter.injectReactEventListener(restoreScript);
                    exports.EventPluginHub.injectEventPluginOrder(originalEvent);
                    exports.EventPluginHub.injectInstanceHandle(camelKey);
                    exports.EventPluginHub.injectMount(reversed);
                    exports.EventPluginHub.injectEventPluginsByName({
                        SimpleEventPlugin : r,
                        EnterLeaveEventPlugin : fstVal,
                        ChangeEventPlugin : tmp,
                        SelectEventPlugin : ret,
                        BeforeInputEventPlugin : BeforeInputEventPlugin
                    });
                    exports.NativeComponent.injectGenericComponentClass(pdataOld);
                    exports.NativeComponent.injectTextComponentClass(suiteView);
                    exports.Class.injectMixin(udataCur);
                    exports.DOMProperty.injectDOMPropertyConfig(actual_old_result);
                    exports.DOMProperty.injectDOMPropertyConfig(r20);
                    exports.EmptyComponent.injectEmptyComponent("noscript");
                    exports.Updates.injectReconcileTransaction(pdataCur);
                    exports.Updates.injectBatchingStrategy(rvar);
                    exports.RootIndex.injectCreateReactRootIndex(createReactRootIndex.canUseDOM ? _result.createReactRootIndex : actual_new_result.createReactRootIndex);
                    exports.Component.injectEnvironment(failuresLink);
                    var accept = createReactRootIndex.canUseDOM && window.location.href || "";
                    if (/[?&]react_perf\b/.test(accept)) {
                        var fake_onhashchange = fun(55);
                        fake_onhashchange.start();
                    }
                }
            }
            var BeforeInputEventPlugin = fun(3);
            var tmp = fun(7);
            var _result = fun(8);
            var originalEvent = fun(13);
            var fstVal = fun(14);
            var createReactRootIndex = fun(147);
            var actual_old_result = fun(21);
            var udataCur = fun(27);
            var failuresLink = fun(35);
            var rvar = fun(53);
            var pdataOld = fun(42);
            var suiteView = fun(51);
            var restoreScript = fun(63);
            var exports = fun(65);
            var camelKey = fun(67);
            var reversed = fun(72);
            var pdataCur = fun(83);
            var ret = fun(99);
            var actual_new_result = fun(100);
            var r = fun(101);
            var r20 = fun(98);
            /** @type {boolean} */
            var z = false;
            $.exports = {
                /** @type {function (): undefined} */
                inject : test
            };
        }, {
            100 : 100,
            101 : 101,
            13 : 13,
            14 : 14,
            147 : 147,
            21 : 21,
            27 : 27,
            3 : 3,
            35 : 35,
            42 : 42,
            51 : 51,
            53 : 53,
            55 : 55,
            63 : 63,
            65 : 65,
            67 : 67,
            7 : 7,
            72 : 72,
            8 : 8,
            83 : 83,
            98 : 98,
            99 : 99
        }],
        55 : [function(require, module, dataAndEvents) {
            /**
             * @param {number} n
             * @return {?}
             */
            function toDate(n) {
                return Math.floor(100 * n) / 100;
            }
            /**
             * @param {?} parent
             * @param {?} key
             * @param {number} dataAndEvents
             * @return {undefined}
             */
            function promote(parent, key, dataAndEvents) {
                parent[key] = (parent[key] || 0) + dataAndEvents;
            }
            var nodes = require(10);
            var jQuery = require(56);
            var a = require(72);
            var Block = require(78);
            var t = require(170);
            var element = {
                _allMeasurements : [],
                _mountStack : [0],
                _injected : false,
                /**
                 * @return {undefined}
                 */
                start : function() {
                    if (!element._injected) {
                        Block.injection.injectMeasure(element.measure);
                    }
                    /** @type {number} */
                    element._allMeasurements.length = 0;
                    /** @type {boolean} */
                    Block.enableMeasure = true;
                },
                /**
                 * @return {undefined}
                 */
                stop : function() {
                    /** @type {boolean} */
                    Block.enableMeasure = false;
                },
                /**
                 * @return {?}
                 */
                getLastMeasurements : function() {
                    return element._allMeasurements;
                },
                /**
                 * @param {Array} context
                 * @return {undefined}
                 */
                printExclusive : function(context) {
                    context = context || element._allMeasurements;
                    var key = jQuery.getExclusiveSummary(context);
                    console.table(key.map(function(data) {
                        return{
                            "Component class name" : data.componentName,
                            "Total inclusive time (ms)" : toDate(data.inclusive),
                            "Exclusive mount time (ms)" : toDate(data.exclusive),
                            "Exclusive render time (ms)" : toDate(data.render),
                            "Mount time per instance (ms)" : toDate(data.exclusive / data.count),
                            "Render time per instance (ms)" : toDate(data.render / data.count),
                            Instances : data.count
                        };
                    }));
                },
                /**
                 * @param {Array} arg
                 * @return {undefined}
                 */
                printInclusive : function(arg) {
                    arg = arg || element._allMeasurements;
                    var type = jQuery.getInclusiveSummary(arg);
                    console.table(type.map(function(data) {
                        return{
                            "Owner > component" : data.componentName,
                            "Inclusive time (ms)" : toDate(data.time),
                            Instances : data.count
                        };
                    }));
                    console.log("Total time:", jQuery.getTotalTime(arg).toFixed(2) + " ms");
                },
                /**
                 * @param {Array} context
                 * @return {?}
                 */
                getMeasurementsSummaryMap : function(context) {
                    var key = jQuery.getInclusiveSummary(context, true);
                    return key.map(function(data) {
                        return{
                            "Owner > component" : data.componentName,
                            "Wasted time (ms)" : data.time,
                            Instances : data.count
                        };
                    });
                },
                /**
                 * @param {Array} value
                 * @return {undefined}
                 */
                printWasted : function(value) {
                    value = value || element._allMeasurements;
                    console.table(element.getMeasurementsSummaryMap(value));
                    console.log("Total time:", jQuery.getTotalTime(value).toFixed(2) + " ms");
                },
                /**
                 * @param {Array} arg
                 * @return {undefined}
                 */
                printDOM : function(arg) {
                    arg = arg || element._allMeasurements;
                    var type = jQuery.getDOMSummary(arg);
                    console.table(type.map(function(o) {
                        var self = {};
                        return self[nodes.ID_ATTRIBUTE_NAME] = o.id, self.type = o.type, self.args = JSON.stringify(o.args), self;
                    }));
                    console.log("Total time:", jQuery.getTotalTime(arg).toFixed(2) + " ms");
                },
                /**
                 * @param {?} event
                 * @param {string} eventName
                 * @param {number} dataAndEvents
                 * @param {Array} args
                 * @return {undefined}
                 */
                _recordWrite : function(event, eventName, dataAndEvents, args) {
                    var calls = element._allMeasurements[element._allMeasurements.length - 1].writes;
                    calls[event] = calls[event] || [];
                    calls[event].push({
                        type : eventName,
                        time : dataAndEvents,
                        args : args
                    });
                },
                /**
                 * @param {string} type
                 * @param {string} fn
                 * @param {Function} callback
                 * @return {?}
                 */
                measure : function(type, fn, callback) {
                    return function() {
                        /** @type {number} */
                        var l = arguments.length;
                        /** @type {Array} */
                        var args = Array(l);
                        /** @type {number} */
                        var i = 0;
                        for (;i < l;i++) {
                            args[i] = arguments[i];
                        }
                        var dataAndEvents;
                        var value;
                        var m;
                        if ("_renderNewRootComponent" === fn || "flushBatchedUpdates" === fn) {
                            return element._allMeasurements.push({
                                exclusive : {},
                                inclusive : {},
                                render : {},
                                counts : {},
                                writes : {},
                                displayNames : {},
                                totalTime : 0,
                                created : {}
                            }), m = t(), value = callback.apply(this, args), element._allMeasurements[element._allMeasurements.length - 1].totalTime = t() - m, value;
                        }
                        if ("_mountImageIntoNode" === fn || ("ReactBrowserEventEmitter" === type || ("ReactDOMIDOperations" === type || ("CSSPropertyOperations" === type || ("DOMChildrenOperations" === type || "DOMPropertyOperations" === type))))) {
                            if (m = t(), value = callback.apply(this, args), dataAndEvents = t() - m, "_mountImageIntoNode" === fn) {
                                var touchcancel = a.getID(args[1]);
                                element._recordWrite(touchcancel, fn, dataAndEvents, args[0]);
                            } else {
                                if ("dangerouslyProcessChildrenUpdates" === fn) {
                                    args[0].forEach(function(update) {
                                        var options = {};
                                        if (null !== update.fromIndex) {
                                            options.fromIndex = update.fromIndex;
                                        }
                                        if (null !== update.toIndex) {
                                            options.toIndex = update.toIndex;
                                        }
                                        if (null !== update.textContent) {
                                            options.textContent = update.textContent;
                                        }
                                        if (null !== update.markupIndex) {
                                            options.markup = args[1][update.markupIndex];
                                        }
                                        element._recordWrite(update.parentID, update.type, dataAndEvents, options);
                                    });
                                } else {
                                    var arg = args[0];
                                    if ("object" == typeof arg) {
                                        arg = a.getID(args[0]);
                                    }
                                    element._recordWrite(arg, fn, dataAndEvents, Array.prototype.slice.call(args, 1));
                                }
                            }
                            return value;
                        }
                        if ("ReactCompositeComponent" !== type || "mountComponent" !== fn && ("updateComponent" !== fn && "_renderValidatedComponent" !== fn)) {
                            return callback.apply(this, args);
                        }
                        if (this._currentElement.type === a.TopLevelWrapper) {
                            return callback.apply(this, args);
                        }
                        var key = "mountComponent" === fn ? args[0] : this._rootNodeID;
                        /** @type {boolean} */
                        var length = "_renderValidatedComponent" === fn;
                        /** @type {boolean} */
                        var mountComponent = "mountComponent" === fn;
                        /** @type {Array} */
                        var eventPath = element._mountStack;
                        var options = element._allMeasurements[element._allMeasurements.length - 1];
                        if (length ? promote(options.counts, key, 1) : mountComponent && (options.created[key] = true, eventPath.push(0)), m = t(), value = callback.apply(this, args), dataAndEvents = t() - m, length) {
                            promote(options.render, key, dataAndEvents);
                        } else {
                            if (mountComponent) {
                                var u = eventPath.pop();
                                eventPath[eventPath.length - 1] += dataAndEvents;
                                promote(options.exclusive, key, dataAndEvents - u);
                                promote(options.inclusive, key, dataAndEvents);
                            } else {
                                promote(options.inclusive, key, dataAndEvents);
                            }
                        }
                        return options.displayNames[key] = {
                            current : this.getName(),
                            owner : this._currentElement._owner ? this._currentElement._owner.getName() : "<root>"
                        }, value;
                    };
                }
            };
            module.exports = element;
        }, {
            10 : 10,
            170 : 170,
            56 : 56,
            72 : 72,
            78 : 78
        }],
        56 : [function(require, module, dataAndEvents) {
            /**
             * @param {Array} arg
             * @return {?}
             */
            function extend(arg) {
                /** @type {number} */
                var result = 0;
                /** @type {number} */
                var j = 0;
                for (;j < arg.length;j++) {
                    var child = arg[j];
                    result += child.totalTime;
                }
                return result;
            }
            /**
             * @param {Array} target
             * @return {?}
             */
            function save(target) {
                /** @type {Array} */
                var worker = [];
                return target.forEach(function(options) {
                    Object.keys(options.writes).forEach(function(index) {
                        options.writes[index].forEach(function(msg) {
                            worker.push({
                                id : index,
                                type : type[msg.type] || msg.type,
                                args : msg.args
                            });
                        });
                    });
                }), worker;
            }
            /**
             * @param {Array} obj
             * @return {?}
             */
            function loop(obj) {
                var key;
                var data = {};
                /** @type {number} */
                var i = 0;
                for (;i < obj.length;i++) {
                    var options = obj[i];
                    var entities = log({}, options.exclusive, options.inclusive);
                    var p;
                    for (p in entities) {
                        key = options.displayNames[p].current;
                        data[key] = data[key] || {
                            componentName : key,
                            inclusive : 0,
                            exclusive : 0,
                            render : 0,
                            count : 0
                        };
                        if (options.render[p]) {
                            data[key].render += options.render[p];
                        }
                        if (options.exclusive[p]) {
                            data[key].exclusive += options.exclusive[p];
                        }
                        if (options.inclusive[p]) {
                            data[key].inclusive += options.inclusive[p];
                        }
                        if (options.counts[p]) {
                            data[key].count += options.counts[p];
                        }
                    }
                }
                /** @type {Array} */
                var keys = [];
                for (key in data) {
                    if (data[key].exclusive >= time) {
                        keys.push(data[key]);
                    }
                }
                return keys.sort(function(options, event) {
                    return event.exclusive - options.exclusive;
                }), keys;
            }
            /**
             * @param {Array} params
             * @param {boolean} dataAndEvents
             * @return {?}
             */
            function tick(params, dataAndEvents) {
                var id;
                var results = {};
                /** @type {number} */
                var l = 0;
                for (;l < params.length;l++) {
                    var js;
                    var options = params[l];
                    var mak = log({}, options.exclusive, options.inclusive);
                    if (dataAndEvents) {
                        js = destroy(options);
                    }
                    var i;
                    for (i in mak) {
                        if (!dataAndEvents || js[i]) {
                            var b = options.displayNames[i];
                            /** @type {string} */
                            id = b.owner + " > " + b.current;
                            results[id] = results[id] || {
                                componentName : id,
                                time : 0,
                                count : 0
                            };
                            if (options.inclusive[i]) {
                                results[id].time += options.inclusive[i];
                            }
                            if (options.counts[i]) {
                                results[id].count += options.counts[i];
                            }
                        }
                    }
                }
                /** @type {Array} */
                var list = [];
                for (id in results) {
                    if (results[id].time >= time) {
                        list.push(results[id]);
                    }
                }
                return list.sort(function(b, a) {
                    return a.time - b.time;
                }), list;
            }
            /**
             * @param {Object} options
             * @return {?}
             */
            function destroy(options) {
                var escapes = {};
                /** @type {Array.<string>} */
                var codeSegments = Object.keys(options.writes);
                var context = log({}, options.exclusive, options.inclusive);
                var match;
                for (match in context) {
                    /** @type {boolean} */
                    var f = false;
                    /** @type {number} */
                    var i = 0;
                    for (;i < codeSegments.length;i++) {
                        if (0 === codeSegments[i].indexOf(match)) {
                            /** @type {boolean} */
                            f = true;
                            break;
                        }
                    }
                    if (options.created[match]) {
                        /** @type {boolean} */
                        f = true;
                    }
                    if (!f) {
                        if (options.counts[match] > 0) {
                            /** @type {boolean} */
                            escapes[match] = true;
                        }
                    }
                }
                return escapes;
            }
            var log = require(24);
            /** @type {number} */
            var time = 1.2;
            var type = {
                _mountImageIntoNode : "set innerHTML",
                INSERT_MARKUP : "set innerHTML",
                MOVE_EXISTING : "move",
                REMOVE_NODE : "remove",
                SET_MARKUP : "set innerHTML",
                TEXT_CONTENT : "set textContent",
                setValueForProperty : "update attribute",
                setValueForAttribute : "update attribute",
                deleteValueForProperty : "remove attribute",
                setValueForStyles : "update styles",
                replaceNodeWithMarkup : "replace",
                updateTextContent : "set textContent"
            };
            var JsDiff = {
                /** @type {function (Array): ?} */
                getExclusiveSummary : loop,
                /** @type {function (Array, boolean): ?} */
                getInclusiveSummary : tick,
                /** @type {function (Array): ?} */
                getDOMSummary : save,
                /** @type {function (Array): ?} */
                getTotalTime : extend
            };
            module.exports = JsDiff;
        }, {
            24 : 24
        }],
        57 : [function(require, module, dataAndEvents) {
            var config = require(39);
            var apply = require(24);
            var Block = require(117);
            var node = "function" == typeof Symbol && (Symbol.for && Symbol.for("react.element")) || 60103;
            var params = {
                key : true,
                ref : true,
                __self : true,
                __source : true
            };
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @param {Object} dataAndEvents
             * @param {?} s
             * @param {?} state
             * @param {Object} obj
             * @return {?}
             */
            var $ = function(name, recurring, deepDataAndEvents, dataAndEvents, s, state, obj) {
                var object = {
                    $$typeof : node,
                    type : name,
                    /** @type {Function} */
                    key : recurring,
                    ref : deepDataAndEvents,
                    props : obj,
                    _owner : state
                };
                return object._store = {}, Block ? (Object.defineProperty(object._store, "validated", {
                    configurable : false,
                    enumerable : false,
                    writable : true,
                    value : false
                }), Object.defineProperty(object, "_self", {
                    configurable : false,
                    enumerable : false,
                    writable : false,
                    value : dataAndEvents
                }), Object.defineProperty(object, "_source", {
                    configurable : false,
                    enumerable : false,
                    writable : false,
                    value : s
                })) : (object._store.validated = false, object._self = dataAndEvents, object._source = s), Object.freeze(object.props), Object.freeze(object), object;
            };
            /**
             * @param {string} optgroup
             * @param {?} opt_attributes
             * @param {?} children
             * @return {?}
             */
            $.createElement = function(optgroup, opt_attributes, children) {
                var key;
                var result = {};
                /** @type {null} */
                var recurring = null;
                /** @type {null} */
                var deepDataAndEvents = null;
                /** @type {null} */
                var dataAndEvents = null;
                /** @type {null} */
                var source = null;
                if (null != opt_attributes) {
                    deepDataAndEvents = void 0 === opt_attributes.ref ? null : opt_attributes.ref;
                    /** @type {(null|string)} */
                    recurring = void 0 === opt_attributes.key ? null : "" + opt_attributes.key;
                    dataAndEvents = void 0 === opt_attributes.__self ? null : opt_attributes.__self;
                    source = void 0 === opt_attributes.__source ? null : opt_attributes.__source;
                    for (key in opt_attributes) {
                        if (opt_attributes.hasOwnProperty(key)) {
                            if (!params.hasOwnProperty(key)) {
                                result[key] = opt_attributes[key];
                            }
                        }
                    }
                }
                /** @type {number} */
                var l = arguments.length - 2;
                if (1 === l) {
                    result.children = children;
                } else {
                    if (l > 1) {
                        /** @type {Array} */
                        var args = Array(l);
                        /** @type {number} */
                        var i = 0;
                        for (;i < l;i++) {
                            args[i] = arguments[i + 2];
                        }
                        /** @type {Array} */
                        result.children = args;
                    }
                }
                if (optgroup && optgroup.defaultProps) {
                    var iterable = optgroup.defaultProps;
                    for (key in iterable) {
                        if ("undefined" == typeof result[key]) {
                            result[key] = iterable[key];
                        }
                    }
                }
                return $(optgroup, recurring, deepDataAndEvents, dataAndEvents, source, config.current, result);
            };
            /**
             * @param {string} type
             * @return {?}
             */
            $.createFactory = function(type) {
                var node = $.createElement.bind(null, type);
                return node.type = type, node;
            };
            /**
             * @param {Object} doc
             * @param {Function} recurring
             * @return {?}
             */
            $.cloneAndReplaceKey = function(doc, recurring) {
                var emptyJ = $(doc.type, recurring, doc.ref, doc._self, doc._source, doc._owner, doc.props);
                return emptyJ;
            };
            /**
             * @param {Object} self
             * @param {?} xs
             * @return {?}
             */
            $.cloneAndReplaceProps = function(self, xs) {
                var subject = $(self.type, self.key, self.ref, self._self, self._source, self._owner, xs);
                return subject._store.validated = self._store.validated, subject;
            };
            /**
             * @param {Object} self
             * @param {Object} item
             * @param {?} siblings
             * @return {?}
             */
            $.cloneElement = function(self, item, siblings) {
                var key;
                var copy = apply({}, self.props);
                var recurring = self.key;
                var deepDataAndEvents = self.ref;
                var dataAndEvents = self._self;
                var source = self._source;
                var value = self._owner;
                if (null != item) {
                    if (void 0 !== item.ref) {
                        deepDataAndEvents = item.ref;
                        value = config.current;
                    }
                    if (void 0 !== item.key) {
                        /** @type {string} */
                        recurring = "" + item.key;
                    }
                    for (key in item) {
                        if (item.hasOwnProperty(key)) {
                            if (!params.hasOwnProperty(key)) {
                                copy[key] = item[key];
                            }
                        }
                    }
                }
                /** @type {number} */
                var childrenLength = arguments.length - 2;
                if (1 === childrenLength) {
                    copy.children = siblings;
                } else {
                    if (childrenLength > 1) {
                        /** @type {Array} */
                        var childArray = Array(childrenLength);
                        /** @type {number} */
                        var i = 0;
                        for (;i < childrenLength;i++) {
                            childArray[i] = arguments[i + 2];
                        }
                        /** @type {Array} */
                        copy.children = childArray;
                    }
                }
                return $(self.type, recurring, deepDataAndEvents, dataAndEvents, source, value, copy);
            };
            /**
             * @param {Object} name
             * @return {?}
             */
            $.isValidElement = function(name) {
                return "object" == typeof name && (null !== name && name.$$typeof === node);
            };
            /** @type {function (string, Function, Object, Object, ?, ?, Object): ?} */
            module.exports = $;
        }, {
            117 : 117,
            24 : 24,
            39 : 39
        }],
        58 : [function(require, module, dataAndEvents) {
            /**
             * @return {?}
             */
            function show() {
                if (session.current) {
                    var a = session.current.getName();
                    if (a) {
                        return " Check the render method of `" + a + "`.";
                    }
                }
                return "";
            }
            /**
             * @param {Object} item
             * @param {?} options
             * @return {undefined}
             */
            function next(item, options) {
                if (item._store && (!item._store.validated && null == item.key)) {
                    /** @type {boolean} */
                    item._store.validated = true;
                    var group = run("uniqueKey", item, options);
                    if (null !== group) {
                        forEach(false, 'Each child in an array or iterator should have a unique "key" prop.%s%s%s', group.parentOrOwner || "", group.childOwner || "", group.url || "");
                    }
                }
            }
            /**
             * @param {string} id
             * @param {Object} self
             * @param {Object} val
             * @return {?}
             */
            function run(id, self, val) {
                var objUid = show();
                if (!objUid) {
                    var iterator = "string" == typeof val ? val : val.displayName || val.name;
                    if (iterator) {
                        /** @type {string} */
                        objUid = " Check the top-level render call using <" + iterator + ">.";
                    }
                }
                var map = done[id] || (done[id] = {});
                if (map[objUid]) {
                    return null;
                }
                /** @type {boolean} */
                map[objUid] = true;
                var req = {
                    parentOrOwner : objUid,
                    url : " See https://fb.me/react-warning-keys for more information.",
                    childOwner : null
                };
                return self && (self._owner && (self._owner !== session.current && (req.childOwner = " It was passed a child from " + self._owner.getName() + "."))), req;
            }
            /**
             * @param {Object} obj
             * @param {?} fn
             * @return {undefined}
             */
            function add(obj, fn) {
                if ("object" == typeof obj) {
                    if (Array.isArray(obj)) {
                        /** @type {number} */
                        var i = 0;
                        for (;i < obj.length;i++) {
                            var name = obj[i];
                            if (d.isValidElement(name)) {
                                next(name, fn);
                            }
                        }
                    } else {
                        if (d.isValidElement(obj)) {
                            if (obj._store) {
                                /** @type {boolean} */
                                obj._store.validated = true;
                            }
                        } else {
                            if (obj) {
                                var type = getActual(obj);
                                if (type && type !== obj.entries) {
                                    var self;
                                    var stream = type.call(obj);
                                    for (;!(self = stream.next()).done;) {
                                        if (d.isValidElement(self.value)) {
                                            next(self.value, fn);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            /**
             * @param {string} args
             * @param {Object} obj
             * @param {?} req
             * @param {?} method
             * @return {undefined}
             */
            function log(args, obj, req, method) {
                var key;
                for (key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        var data;
                        try {
                            if ("function" != typeof obj[key]) {
                                apply(false, "%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.", args || "React class", helper[method], key);
                            } else {
                                void 0;
                            }
                            data = obj[key](req, key, args, method);
                        } catch (tmp) {
                            data = tmp;
                        }
                        if (forEach(!data || data instanceof Error, "%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", args || "React class", helper[method], key, typeof data), data instanceof Error && !(data.message in screen_callbacks)) {
                            /** @type {boolean} */
                            screen_callbacks[data.message] = true;
                            var r20 = show();
                            forEach(false, "Failed propType: %s%s", data.message, r20);
                        }
                    }
                }
            }
            /**
             * @param {Object} s
             * @return {undefined}
             */
            function call(s) {
                var result = s.type;
                if ("function" == typeof result) {
                    var typePattern = result.displayName || result.name;
                    if (result.propTypes) {
                        log(typePattern, result.propTypes, s.props, e.prop);
                    }
                    if ("function" == typeof result.getDefaultProps) {
                        forEach(result.getDefaultProps.isReactClassApproved, "getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
                    }
                }
            }
            var d = require(57);
            var e = require(81);
            var helper = require(80);
            var session = require(39);
            var ret = require(117);
            var getActual = require(129);
            var apply = require(161);
            var forEach = require(173);
            var done = {};
            var screen_callbacks = {};
            var dom = {
                /**
                 * @param {string} name
                 * @param {?} opt_attributes
                 * @param {?} c
                 * @return {?}
                 */
                createElement : function(name, opt_attributes, c) {
                    /** @type {boolean} */
                    var stringProps = "string" == typeof name || "function" == typeof name;
                    forEach(stringProps, "React.createElement: type should not be null, undefined, boolean, or number. It should be a string (for DOM elements) or a ReactClass (for composite components).%s", show());
                    var node = d.createElement.apply(this, arguments);
                    if (null == node) {
                        return node;
                    }
                    if (stringProps) {
                        /** @type {number} */
                        var i = 2;
                        for (;i < arguments.length;i++) {
                            add(arguments[i], name);
                        }
                    }
                    return call(node), node;
                },
                /**
                 * @param {string} type
                 * @return {?}
                 */
                createFactory : function(type) {
                    var node = dom.createElement.bind(null, type);
                    return node.type = type, ret && Object.defineProperty(node, "type", {
                        enumerable : false,
                        /**
                         * @return {?}
                         */
                        get : function() {
                            return forEach(false, "Factory.type is deprecated. Access the class directly before passing it to createFactory."), Object.defineProperty(this, "type", {
                                value : type
                            }), type;
                        }
                    }), node;
                },
                /**
                 * @param {?} dataAndEvents
                 * @param {?} opt_attributes
                 * @param {?} deepDataAndEvents
                 * @return {?}
                 */
                cloneElement : function(dataAndEvents, opt_attributes, deepDataAndEvents) {
                    var node = d.cloneElement.apply(this, arguments);
                    /** @type {number} */
                    var i = 2;
                    for (;i < arguments.length;i++) {
                        add(arguments[i], node.type);
                    }
                    return call(node), node;
                }
            };
            module.exports = dom;
        }, {
            117 : 117,
            129 : 129,
            161 : 161,
            173 : 173,
            39 : 39,
            57 : 57,
            80 : 80,
            81 : 81
        }],
        59 : [function(require, module, dataAndEvents) {
            var normalizedName;
            var dom = require(57);
            var should = require(60);
            var child = require(84);
            var createObject = require(24);
            var prototype = {
                /**
                 * @param {string} name
                 * @return {undefined}
                 */
                injectEmptyComponent : function(name) {
                    normalizedName = dom.createElement(name);
                }
            };
            /**
             * @param {string} name
             * @return {undefined}
             */
            var Type = function(name) {
                /** @type {null} */
                this._currentElement = null;
                /** @type {null} */
                this._rootNodeID = null;
                this._renderedComponent = name(normalizedName);
            };
            createObject(Type.prototype, {
                /**
                 * @param {string} label
                 * @return {undefined}
                 */
                construct : function(label) {
                },
                /**
                 * @param {string} transaction
                 * @param {string} childName
                 * @param {string} dataAndEvents
                 * @return {?}
                 */
                mountComponent : function(transaction, childName, dataAndEvents) {
                    return should.registerNullComponentID(transaction), this._rootNodeID = transaction, child.mountComponent(this._renderedComponent, transaction, childName, dataAndEvents);
                },
                /**
                 * @return {undefined}
                 */
                receiveComponent : function() {
                },
                /**
                 * @param {?} ctor
                 * @param {?} keepData
                 * @param {?} dataAndEvents
                 * @return {undefined}
                 */
                unmountComponent : function(ctor, keepData, dataAndEvents) {
                    child.unmountComponent(this._renderedComponent);
                    should.deregisterNullComponentID(this._rootNodeID);
                    /** @type {null} */
                    this._rootNodeID = null;
                    /** @type {null} */
                    this._renderedComponent = null;
                }
            });
            Type.injection = prototype;
            /** @type {function (string): undefined} */
            module.exports = Type;
        }, {
            24 : 24,
            57 : 57,
            60 : 60,
            84 : 84
        }],
        60 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {?} name
             * @return {?}
             */
            function atom(name) {
                return!!old[name];
            }
            /**
             * @param {string} name
             * @return {undefined}
             */
            function make_function(name) {
                /** @type {boolean} */
                old[name] = true;
            }
            /**
             * @param {?} name
             * @return {undefined}
             */
            function assigns(name) {
                delete old[name];
            }
            var old = {};
            var JsDiff = {
                /** @type {function (?): ?} */
                isNullComponentID : atom,
                /** @type {function (string): undefined} */
                registerNullComponentID : make_function,
                /** @type {function (?): undefined} */
                deregisterNullComponentID : assigns
            };
            module.exports = JsDiff;
        }, {}],
        61 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {?} dataAndEvents
             * @param {Function} callback
             * @param {Object} error
             * @param {?} id
             * @return {?}
             */
            function clone(dataAndEvents, callback, error, id) {
                try {
                    return callback(error, id);
                } catch (d) {
                    return void(null === e && (e = d));
                }
            }
            /** @type {null} */
            var e = null;
            var JsDiff = {
                /** @type {function (?, Function, Object, ?): ?} */
                invokeGuardedCallback : clone,
                /** @type {function (?, Function, Object, ?): ?} */
                invokeGuardedCallbackWithCatch : clone,
                /**
                 * @return {undefined}
                 */
                rethrowCaughtError : function() {
                    if (e) {
                        var exception = e;
                        throw e = null, exception;
                    }
                }
            };
            if ("undefined" != typeof window && ("function" == typeof window.dispatchEvent && ("undefined" != typeof document && "function" == typeof document.createEvent))) {
                /** @type {Element} */
                var elem = document.createElement("react");
                /**
                 * @param {string} dataAndEvents
                 * @param {Function} fn
                 * @param {Object} arg
                 * @param {?} b
                 * @return {undefined}
                 */
                JsDiff.invokeGuardedCallback = function(dataAndEvents, fn, arg, b) {
                    var click = fn.bind(null, arg, b);
                    /** @type {string} */
                    var type = "react-" + dataAndEvents;
                    elem.addEventListener(type, click, false);
                    /** @type {(Event|null)} */
                    var event = document.createEvent("Event");
                    event.initEvent(type, false, false);
                    elem.dispatchEvent(event);
                    elem.removeEventListener(type, click, false);
                };
            }
            module.exports = JsDiff;
        }, {}],
        62 : [function($sanitize, module, dataAndEvents) {
            /**
             * @param {?} events
             * @return {undefined}
             */
            function eachEvent(events) {
                EventPluginHub.enqueueEvents(events);
                EventPluginHub.processEventQueue(false);
            }
            var EventPluginHub = $sanitize(16);
            var JsDiff = {
                /**
                 * @param {string} topLevelType
                 * @param {string} walkers
                 * @param {string} topLevelTargetID
                 * @param {Event} nativeEvent
                 * @param {?} details
                 * @return {undefined}
                 */
                handleTopLevel : function(topLevelType, walkers, topLevelTargetID, nativeEvent, details) {
                    var events = EventPluginHub.extractEvents(topLevelType, walkers, topLevelTargetID, nativeEvent, details);
                    eachEvent(events);
                }
            };
            module.exports = JsDiff;
        }, {
            16 : 16
        }],
        63 : [function(require, module, dataAndEvents) {
            /**
             * @param {?} attr
             * @return {?}
             */
            function has(attr) {
                var a = _self.getID(attr);
                var id = parents.getReactRootIDFromNodeID(a);
                var container = _self.findReactContainerForID(id);
                var s = _self.getFirstReactDOM(container);
                return s;
            }
            /**
             * @param {?} doAnimate
             * @param {Object} id
             * @return {undefined}
             */
            function renderer(doAnimate, id) {
                this.topLevelType = doAnimate;
                /** @type {Object} */
                this.nativeEvent = id;
                /** @type {Array} */
                this.ancestors = [];
            }
            /**
             * @param {?} isXML
             * @return {undefined}
             */
            function restoreScript(isXML) {
                register(isXML);
            }
            /**
             * @param {?} value
             * @return {undefined}
             */
            function register(value) {
                var el = _self.getFirstReactDOM(isFunction(value.nativeEvent)) || window;
                var remove = el;
                for (;remove;) {
                    value.ancestors.push(remove);
                    remove = has(remove);
                }
                /** @type {number} */
                var i = 0;
                for (;i < value.ancestors.length;i++) {
                    el = value.ancestors[i];
                    var last = _self.getID(el) || "";
                    obj._handleTopLevel(value.topLevelType, el, last, value.nativeEvent, isFunction(value.nativeEvent));
                }
            }
            /**
             * @param {?} count
             * @return {undefined}
             */
            function fn(count) {
                var $window = jQuery(window);
                count($window);
            }
            var event = require(146);
            var Block = require(147);
            var assert = require(25);
            var parents = require(67);
            var _self = require(72);
            var nodes = require(96);
            var createObject = require(24);
            var isFunction = require(128);
            var jQuery = require(158);
            createObject(renderer.prototype, {
                /**
                 * @return {undefined}
                 */
                destructor : function() {
                    /** @type {null} */
                    this.topLevelType = null;
                    /** @type {null} */
                    this.nativeEvent = null;
                    /** @type {number} */
                    this.ancestors.length = 0;
                }
            });
            assert.addPoolingTo(renderer, assert.twoArgumentPooler);
            var obj = {
                _enabled : true,
                _handleTopLevel : null,
                WINDOW_HANDLE : Block.canUseDOM ? window : null,
                /**
                 * @param {?} id
                 * @return {undefined}
                 */
                setHandleTopLevel : function(id) {
                    obj._handleTopLevel = id;
                },
                /**
                 * @param {boolean} enabled
                 * @return {undefined}
                 */
                setEnabled : function(enabled) {
                    /** @type {boolean} */
                    obj._enabled = !!enabled;
                },
                /**
                 * @return {?}
                 */
                isEnabled : function() {
                    return obj._enabled;
                },
                /**
                 * @param {?} arg
                 * @param {string} type
                 * @param {?} deepDataAndEvents
                 * @return {?}
                 */
                trapBubbledEvent : function(arg, type, deepDataAndEvents) {
                    var el = deepDataAndEvents;
                    return el ? event.listen(el, type, obj.dispatchEvent.bind(null, arg)) : null;
                },
                /**
                 * @param {Object} arg
                 * @param {string} func
                 * @param {?} deepDataAndEvents
                 * @return {?}
                 */
                trapCapturedEvent : function(arg, func, deepDataAndEvents) {
                    var s = deepDataAndEvents;
                    return s ? event.capture(s, func, obj.dispatchEvent.bind(null, arg)) : null;
                },
                /**
                 * @param {Object} arg
                 * @return {undefined}
                 */
                monitorScrollValue : function(arg) {
                    var recurring = fn.bind(null, arg);
                    event.listen(window, "scroll", recurring);
                },
                /**
                 * @param {Event} event
                 * @param {(Object|string)} data
                 * @return {undefined}
                 */
                dispatchEvent : function(event, data) {
                    if (obj._enabled) {
                        var value = renderer.getPooled(event, data);
                        try {
                            nodes.batchedUpdates(restoreScript, value);
                        } finally {
                            renderer.release(value);
                        }
                    }
                }
            };
            module.exports = obj;
        }, {
            128 : 128,
            146 : 146,
            147 : 147,
            158 : 158,
            24 : 24,
            25 : 25,
            67 : 67,
            72 : 72,
            96 : 96
        }],
        64 : [function(require, module, dataAndEvents) {
            var self = require(32);
            var nodes = require(57);
            var filter = require(153);
            var forOwn = require(161);
            var callback = require(173);
            /** @type {RegExp} */
            var exclude = /^\d+$/;
            /** @type {boolean} */
            var j = false;
            var Class = {
                /**
                 * @param {Object} obj
                 * @return {?}
                 */
                create : function(obj) {
                    if ("object" != typeof obj || (!obj || Array.isArray(obj))) {
                        return callback(false, "React.addons.createFragment only accepts a single object. Got: %s", obj), obj;
                    }
                    if (nodes.isValidElement(obj)) {
                        return callback(false, "React.addons.createFragment does not accept a ReactElement without a wrapper object."), obj;
                    }
                    if (1 === obj.nodeType) {
                        forOwn(false, "React.addons.createFragment(...): Encountered an invalid child; DOM elements are not valid children of React components.");
                    } else {
                        void 0;
                    }
                    /** @type {Array} */
                    var els = [];
                    var prop;
                    for (prop in obj) {
                        if (!j) {
                            if (exclude.test(prop)) {
                                callback(false, "React.addons.createFragment(...): Child objects should have non-numeric keys so ordering is preserved.");
                                /** @type {boolean} */
                                j = true;
                            }
                        }
                        self.mapIntoWithKeyPrefixInternal(obj[prop], els, prop, filter.thatReturnsArgument);
                    }
                    return els;
                }
            };
            module.exports = Class;
        }, {
            153 : 153,
            161 : 161,
            173 : 173,
            32 : 32,
            57 : 57
        }],
        65 : [function(require, module, dataAndEvents) {
            var Block = require(10);
            var nodes = require(16);
            var helper = require(36);
            var Type = require(33);
            var inspect = require(59);
            var selfClosing = require(28);
            var getActual = require(75);
            var assert = require(78);
            var should = require(86);
            var expect = require(96);
            var EventEmitter = {
                Component : helper.injection,
                Class : Type.injection,
                DOMProperty : Block.injection,
                EmptyComponent : inspect.injection,
                EventPluginHub : nodes.injection,
                EventEmitter : selfClosing.injection,
                NativeComponent : getActual.injection,
                Perf : assert.injection,
                RootIndex : should.injection,
                Updates : expect.injection
            };
            module.exports = EventEmitter;
        }, {
            10 : 10,
            16 : 16,
            28 : 28,
            33 : 33,
            36 : 36,
            59 : 59,
            75 : 75,
            78 : 78,
            86 : 86,
            96 : 96
        }],
        66 : [function(require, module, dataAndEvents) {
            /**
             * @param {?} opt_obj2
             * @return {?}
             */
            function insertBefore(opt_obj2) {
                return addEvt(document.documentElement, opt_obj2);
            }
            var assert = require(49);
            var addEvt = require(150);
            var getActual = require(155);
            var $ = require(156);
            var me = {
                /**
                 * @param {boolean} elem
                 * @return {?}
                 */
                hasSelectionCapabilities : function(elem) {
                    var name = elem && (elem.nodeName && elem.nodeName.toLowerCase());
                    return name && ("input" === name && "text" === elem.type || ("textarea" === name || "true" === elem.contentEditable));
                },
                /**
                 * @return {?}
                 */
                getSelectionInformation : function() {
                    var focusedElem = $();
                    return{
                        focusedElem : focusedElem,
                        selectionRange : me.hasSelectionCapabilities(focusedElem) ? me.getSelection(focusedElem) : null
                    };
                },
                /**
                 * @param {?} priorSelectionInformation
                 * @return {undefined}
                 */
                restoreSelection : function(priorSelectionInformation) {
                    var emptyJ = $();
                    var priorFocusedElem = priorSelectionInformation.focusedElem;
                    var priorSelectionRange = priorSelectionInformation.selectionRange;
                    if (emptyJ !== priorFocusedElem) {
                        if (insertBefore(priorFocusedElem)) {
                            if (me.hasSelectionCapabilities(priorFocusedElem)) {
                                me.setSelection(priorFocusedElem, priorSelectionRange);
                            }
                            getActual(priorFocusedElem);
                        }
                    }
                },
                /**
                 * @param {Object} input
                 * @return {?}
                 */
                getSelection : function(input) {
                    var selection;
                    if ("selectionStart" in input) {
                        selection = {
                            start : input.selectionStart,
                            end : input.selectionEnd
                        };
                    } else {
                        if (document.selection && (input.nodeName && "input" === input.nodeName.toLowerCase())) {
                            /** @type {(ControlRange|TextRange|null)} */
                            var range2 = document.selection.createRange();
                            if (range2.parentElement() === input) {
                                selection = {
                                    start : -range2.moveStart("character", -input.value.length),
                                    end : -range2.moveEnd("character", -input.value.length)
                                };
                            }
                        } else {
                            selection = assert.getOffsets(input);
                        }
                    }
                    return selection || {
                        start : 0,
                        end : 0
                    };
                },
                /**
                 * @param {Element} input
                 * @param {?} selection
                 * @return {undefined}
                 */
                setSelection : function(input, selection) {
                    var start = selection.start;
                    var end = selection.end;
                    if ("undefined" == typeof end && (end = start), "selectionStart" in input) {
                        input.selectionStart = start;
                        /** @type {number} */
                        input.selectionEnd = Math.min(end, input.value.length);
                    } else {
                        if (document.selection && (input.nodeName && "input" === input.nodeName.toLowerCase())) {
                            var r = input.createTextRange();
                            r.collapse(true);
                            r.moveStart("character", start);
                            r.moveEnd("character", end - start);
                            r.select();
                        } else {
                            assert.setOffsets(input, selection);
                        }
                    }
                }
            };
            module.exports = me;
        }, {
            150 : 150,
            155 : 155,
            156 : 156,
            49 : 49
        }],
        67 : [function(require, module, dataAndEvents) {
            /**
             * @param {?} obj
             * @return {?}
             */
            function isArray(obj) {
                return name + obj.toString(36);
            }
            /**
             * @param {string} text
             * @param {string} index
             * @return {?}
             */
            function fn(text, index) {
                return text.charAt(index) === name || index === text.length;
            }
            /**
             * @param {string} str
             * @return {?}
             */
            function exists(str) {
                return "" === str || str.charAt(0) === name && str.charAt(str.length - 1) !== name;
            }
            /**
             * @param {string} methodName
             * @param {string} text
             * @return {?}
             */
            function callback(methodName, text) {
                return 0 === text.indexOf(methodName) && fn(text, methodName.length);
            }
            /**
             * @param {string} path
             * @return {?}
             */
            function path(path) {
                return path ? path.substr(0, path.lastIndexOf(name)) : "";
            }
            /**
             * @param {string} value
             * @param {string} item
             * @return {?}
             */
            function remove(value, item) {
                if (exists(value) && exists(item) ? void 0 : debug(false, "getNextDescendantID(%s, %s): Received an invalid React DOM ID.", value, item), callback(value, item) ? void 0 : debug(false, "getNextDescendantID(...): React has made an invalid assumption about the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.", value, item), value === item) {
                    return value;
                }
                var i;
                var offset = value.length + col;
                i = offset;
                for (;i < item.length && !fn(item, i);i++) {
                }
                return item.substr(0, i);
            }
            /**
             * @param {string} val
             * @param {string} data
             * @return {?}
             */
            function success(val, data) {
                /** @type {number} */
                var maxRange = Math.min(val.length, data.length);
                if (0 === maxRange) {
                    return "";
                }
                /** @type {number} */
                var index = 0;
                /** @type {number} */
                var i = 0;
                for (;i <= maxRange;i++) {
                    if (fn(val, i) && fn(data, i)) {
                        /** @type {number} */
                        index = i;
                    } else {
                        if (val.charAt(i) !== data.charAt(i)) {
                            break;
                        }
                    }
                }
                var url = val.substr(0, index);
                return exists(url) ? void 0 : debug(false, "getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s", val, data, url), url;
            }
            /**
             * @param {string} item
             * @param {string} name
             * @param {Function} handler
             * @param {Function} req
             * @param {boolean} recurring
             * @param {boolean} v33
             * @return {undefined}
             */
            function cb(item, name, handler, req, recurring, v33) {
                item = item || "";
                name = name || "";
                if (item === name) {
                    debug(false, "traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.", item);
                } else {
                    void 0;
                }
                var value = callback(name, item);
                if (value || callback(item, name)) {
                    void 0;
                } else {
                    debug(false, "traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do not have a parent path.", item, name);
                }
                /** @type {number} */
                var index = 0;
                /** @type {Function} */
                var fn = value ? path : remove;
                /** @type {string} */
                var state = item;
                for (;;state = fn(state, name)) {
                    var result;
                    if (recurring && state === item || (v33 && state === name || (result = handler(state, value, req))), result === false || state === name) {
                        break;
                    }
                    if (index++ < length) {
                        void 0;
                    } else {
                        debug(false, "traverseParentPath(%s, %s, ...): Detected an infinite loop while traversing the React DOM ID tree. This may be due to malformed IDs: %s", item, name, state);
                    }
                }
            }
            var Block = require(86);
            var debug = require(161);
            /** @type {string} */
            var name = ".";
            /** @type {number} */
            var col = name.length;
            /** @type {number} */
            var length = 1E4;
            var JsDiff = {
                /**
                 * @return {?}
                 */
                createReactRootID : function() {
                    return isArray(Block.createReactRootIndex());
                },
                /**
                 * @param {number} far
                 * @param {number} near
                 * @return {?}
                 */
                createReactID : function(far, near) {
                    return far + near;
                },
                /**
                 * @param {string} cookie
                 * @return {?}
                 */
                getReactRootIDFromNodeID : function(cookie) {
                    if (cookie && (cookie.charAt(0) === name && cookie.length > 1)) {
                        var eqPos = cookie.indexOf(name, 1);
                        return eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
                    }
                    return null;
                },
                /**
                 * @param {string} arg
                 * @param {string} a
                 * @param {Function} name
                 * @param {?} req
                 * @param {?} xhr
                 * @return {undefined}
                 */
                traverseEnterLeave : function(arg, a, name, req, xhr) {
                    var result = success(arg, a);
                    if (result !== arg) {
                        cb(arg, result, name, req, false, true);
                    }
                    if (result !== a) {
                        cb(result, a, name, xhr, true, false);
                    }
                },
                /**
                 * @param {string} res
                 * @param {Function} regex
                 * @param {Function} req
                 * @return {undefined}
                 */
                traverseTwoPhase : function(res, regex, req) {
                    if (res) {
                        cb("", res, regex, req, true, false);
                        cb(res, "", regex, req, false, true);
                    }
                },
                /**
                 * @param {string} res
                 * @param {Function} regex
                 * @param {Function} req
                 * @return {undefined}
                 */
                traverseTwoPhaseSkipTarget : function(res, regex, req) {
                    if (res) {
                        cb("", res, regex, req, true, true);
                        cb(res, "", regex, req, true, true);
                    }
                },
                /**
                 * @param {string} res
                 * @param {Function} xml
                 * @param {Function} req
                 * @return {undefined}
                 */
                traverseAncestors : function(res, xml, req) {
                    cb("", res, xml, req, true, false);
                },
                /** @type {function (string, string): ?} */
                getFirstCommonAncestorID : success,
                /** @type {function (string, string): ?} */
                _getNextDescendantID : remove,
                /** @type {function (string, string): ?} */
                isAncestorIDOf : callback,
                SEPARATOR : name
            };
            module.exports = JsDiff;
        }, {
            161 : 161,
            86 : 86
        }],
        68 : [function(dataAndEvents, context, deepDataAndEvents) {
            var self = {
                /**
                 * @param {string} selector
                 * @return {undefined}
                 */
                remove : function(selector) {
                    selector._reactInternalInstance = void 0;
                },
                /**
                 * @param {string} elem
                 * @return {?}
                 */
                get : function(elem) {
                    return elem._reactInternalInstance;
                },
                /**
                 * @param {string} name
                 * @return {?}
                 */
                has : function(name) {
                    return void 0 !== name._reactInternalInstance;
                },
                /**
                 * @param {string} elem
                 * @param {string} value
                 * @return {undefined}
                 */
                set : function(elem, value) {
                    /** @type {string} */
                    elem._reactInternalInstance = value;
                }
            };
            context.exports = self;
        }, {}],
        69 : [function($, module, dataAndEvents) {
            var self = $(32);
            var $spy = $(34);
            var emptyJ = $(33);
            var $src = $(43);
            var d = $(57);
            var frag = $(58);
            var curElem = $(82);
            var version = $(97);
            var revisionCheckbox = $(24);
            var fields = $(135);
            var createElement = d.createElement;
            var time = d.createFactory;
            var de = d.cloneElement;
            createElement = frag.createElement;
            time = frag.createFactory;
            de = frag.cloneElement;
            var JsDiff = {
                Children : {
                    map : self.map,
                    forEach : self.forEach,
                    count : self.count,
                    toArray : self.toArray,
                    only : fields
                },
                Component : $spy,
                createElement : createElement,
                cloneElement : de,
                isValidElement : d.isValidElement,
                PropTypes : curElem,
                createClass : emptyJ.createClass,
                createFactory : time,
                /**
                 * @param {?} mixinResolves
                 * @return {?}
                 */
                createMixin : function(mixinResolves) {
                    return mixinResolves;
                },
                DOM : $src,
                version : version,
                __spread : revisionCheckbox
            };
            module.exports = JsDiff;
        }, {
            135 : 135,
            24 : 24,
            32 : 32,
            33 : 33,
            34 : 34,
            43 : 43,
            57 : 57,
            58 : 58,
            82 : 82,
            97 : 97
        }],
        70 : [function(Event, module, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @return {undefined}
             */
            function setup(name, recurring) {
                /** @type {string} */
                this.value = name;
                /** @type {Function} */
                this.requestChange = recurring;
            }
            /**
             * @param {string} name
             * @return {?}
             */
            function id(name) {
                var suiteView = {
                    value : "undefined" == typeof name ? self.PropTypes.any.isRequired : name.isRequired,
                    requestChange : self.PropTypes.func.isRequired
                };
                return self.PropTypes.shape(suiteView);
            }
            var self = Event(26);
            setup.PropTypes = {
                /** @type {function (string): ?} */
                link : id
            };
            /** @type {function (string, Function): undefined} */
            module.exports = setup;
        }, {
            26 : 26
        }],
        71 : [function($sanitize, module, dataAndEvents) {
            var parseMarkupCore = $sanitize(116);
            /** @type {RegExp} */
            var r20 = /\/?>/;
            var attr = {
                CHECKSUM_ATTR_NAME : "data-react-checksum",
                /**
                 * @param {string} markup
                 * @return {?}
                 */
                addChecksumToMarkup : function(markup) {
                    var allElements = parseMarkupCore(markup);
                    return markup.replace(r20, " " + attr.CHECKSUM_ATTR_NAME + '="' + allElements + '"$&');
                },
                /**
                 * @param {string} markup
                 * @param {Element} element
                 * @return {?}
                 */
                canReuseMarkup : function(markup, element) {
                    var existingChecksum = element.getAttribute(attr.CHECKSUM_ATTR_NAME);
                    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
                    var allElements = parseMarkupCore(markup);
                    return allElements === existingChecksum;
                }
            };
            module.exports = attr;
        }, {
            116 : 116
        }],
        72 : [function(String, module, dataAndEvents) {
            /**
             * @param {string} e
             * @param {string} keys
             * @return {?}
             */
            function normalize(e, keys) {
                /** @type {number} */
                var padLength = Math.min(e.length, keys.length);
                /** @type {number} */
                var i = 0;
                for (;i < padLength;i++) {
                    if (e.charAt(i) !== keys.charAt(i)) {
                        return i;
                    }
                }
                return e.length === keys.length ? -1 : padLength;
            }
            /**
             * @param {Object} el
             * @return {?}
             */
            function $(el) {
                return el ? el.nodeType === SELECT ? el.documentElement : el.firstChild : null;
            }
            /**
             * @param {Object} context
             * @return {?}
             */
            function getAll(context) {
                var node = $(context);
                return node && element.getID(node);
            }
            /**
             * @param {?} id
             * @return {?}
             */
            function find(id) {
                var key = parseInt(id);
                if (key) {
                    if (ids.hasOwnProperty(key)) {
                        var index = ids[key];
                        if (index !== id) {
                            if (isValid(index, key)) {
                                test(false, "ReactMount: Two valid but unequal nodes with the same `%s`: %s", optgroup, key);
                            } else {
                                void 0;
                            }
                            ids[key] = id;
                        }
                    } else {
                        ids[key] = id;
                    }
                }
                return key;
            }
            /**
             * @param {Object} element
             * @return {?}
             */
            function parseInt(element) {
                return element && (element.getAttribute && element.getAttribute(optgroup)) || "";
            }
            /**
             * @param {HTMLElement} element
             * @param {?} id
             * @return {undefined}
             */
            function setup(element, id) {
                var key = parseInt(element);
                if (key !== id) {
                    delete ids[key];
                }
                element.setAttribute(optgroup, id);
                /** @type {HTMLElement} */
                ids[id] = element;
            }
            /**
             * @param {?} id
             * @return {?}
             */
            function complete(id) {
                return ids.hasOwnProperty(id) && isValid(ids[id], id) || (ids[id] = element.findReactNodeByID(id)), ids[id];
            }
            /**
             * @param {string} arg
             * @return {?}
             */
            function process(arg) {
                var id = r.get(arg)._rootNodeID;
                return day.isNullComponentID(id) ? null : (ids.hasOwnProperty(id) && isValid(ids[id], id) || (ids[id] = element.findReactNodeByID(id)), ids[id]);
            }
            /**
             * @param {Object} value
             * @param {?} id
             * @return {?}
             */
            function isValid(value, id) {
                if (value) {
                    if (parseInt(value) !== id) {
                        test(false, "ReactMount: Unexpected modification of `%s`", optgroup);
                    } else {
                        void 0;
                    }
                    var result = element.findReactContainerForID(id);
                    if (result && callback(result, value)) {
                        return true;
                    }
                }
                return false;
            }
            /**
             * @param {?} key
             * @return {undefined}
             */
            function getKeyAsNumber_(key) {
                delete ids[key];
            }
            /**
             * @param {?} id
             * @return {?}
             */
            function error(id) {
                var index = ids[id];
                return!(!index || !isValid(index, id)) && void(lineStart = index);
            }
            /**
             * @param {string} id
             * @return {?}
             */
            function cancelAnimationFrame(id) {
                /** @type {null} */
                lineStart = null;
                record.traverseAncestors(id, error);
                /** @type {null} */
                var j = lineStart;
                return lineStart = null, j;
            }
            /**
             * @param {string} data
             * @param {string} transaction
             * @param {Function} recurring
             * @param {Object} dataAndEvents
             * @param {Object} deepDataAndEvents
             * @param {Object} params
             * @return {undefined}
             */
            function clone(data, transaction, recurring, dataAndEvents, deepDataAndEvents, params) {
                if (keyName.useCreateElement) {
                    params = extend({}, params);
                    if (recurring.nodeType === SELECT) {
                        /** @type {Function} */
                        params[cacheParam] = recurring;
                    } else {
                        params[cacheParam] = recurring.ownerDocument;
                    }
                }
                if (params === gzipSize) {
                    params = {};
                }
                var j = recurring.nodeName.toLowerCase();
                params[value.ancestorInfoContextKey] = value.updatedAncestorInfo(null, j, null);
                var optgroup = instance.mountComponent(data, transaction, dataAndEvents, params);
                /** @type {string} */
                data._renderedComponent._topLevelWrapper = data;
                element._mountImageIntoNode(optgroup, recurring, deepDataAndEvents, dataAndEvents);
            }
            /**
             * @param {?} elem
             * @param {?} _super
             * @param {?} tag
             * @param {Object} recurring
             * @param {?} opt_obj2
             * @return {undefined}
             */
            function restoreScript(elem, _super, tag, recurring, opt_obj2) {
                var pdataOld = self.ReactReconcileTransaction.getPooled(recurring);
                pdataOld.perform(clone, null, elem, _super, tag, pdataOld, recurring, opt_obj2);
                self.ReactReconcileTransaction.release(pdataOld);
            }
            /**
             * @param {?} val
             * @param {Object} el
             * @return {undefined}
             */
            function evalScript(val, el) {
                instance.unmountComponent(val);
                if (el.nodeType === SELECT) {
                    el = el.documentElement;
                }
                for (;el.lastChild;) {
                    el.removeChild(el.lastChild);
                }
            }
            /**
             * @param {Object} node
             * @return {?}
             */
            function traverseNode(node) {
                var id = getAll(node);
                return!!id && id !== record.getReactRootIDFromNodeID(id);
            }
            /**
             * @param {Object} node
             * @return {?}
             */
            function getNode(node) {
                for (;node && node.parentNode !== node;node = node.parentNode) {
                    if (1 === node.nodeType) {
                        var id = parseInt(node);
                        if (id) {
                            var val;
                            var i = record.getReactRootIDFromNodeID(id);
                            /** @type {Object} */
                            var current = node;
                            do {
                                if (val = parseInt(current), current = current.parentNode, null == current) {
                                    return null;
                                }
                            } while (val !== i);
                            if (current === parents[i]) {
                                return node;
                            }
                        }
                    }
                }
                return null;
            }
            var font = String(10);
            var base = String(28);
            var data = String(39);
            var keyName = String(44);
            var o = String(57);
            var day = String(60);
            var record = String(67);
            var r = String(68);
            var field = String(71);
            var t = String(78);
            var instance = String(84);
            var _ = String(95);
            var self = String(96);
            var extend = String(24);
            var gzipSize = String(154);
            var callback = String(150);
            var getActual = String(132);
            var test = String(161);
            var _path = String(138);
            var printResults = String(141);
            var value = String(144);
            var assert = String(173);
            var optgroup = font.ID_ATTRIBUTE_NAME;
            var ids = {};
            /** @type {number} */
            var nodeType = 1;
            /** @type {number} */
            var SELECT = 9;
            /** @type {number} */
            var ELEMENT_NODE = 11;
            /** @type {string} */
            var cacheParam = "__ReactMount_ownerDocument$" + Math.random().toString(36).slice(2);
            var params = {};
            var parents = {};
            var args = {};
            /** @type {Array} */
            var SplitSolver_solve_nodes = [];
            /** @type {null} */
            var lineStart = null;
            /**
             * @return {undefined}
             */
            var template = function() {
            };
            template.prototype.isReactComponent = {};
            /** @type {string} */
            template.displayName = "TopLevelWrapper";
            /**
             * @return {?}
             */
            template.prototype.render = function() {
                return this.props;
            };
            var element = {
                /** @type {function (): undefined} */
                TopLevelWrapper : template,
                _instancesByReactRootID : params,
                /**
                 * @param {Object} dataAndEvents
                 * @param {Function} renderCallback
                 * @return {undefined}
                 */
                scrollMonitor : function(dataAndEvents, renderCallback) {
                    renderCallback();
                },
                /**
                 * @param {?} container
                 * @param {?} protoProps
                 * @param {Object} node
                 * @param {string} callback
                 * @return {?}
                 */
                _updateRootComponent : function(container, protoProps, node, callback) {
                    return element.scrollMonitor(node, function() {
                        _.enqueueElementInternal(container, protoProps);
                        if (callback) {
                            _.enqueueCallbackInternal(container, callback);
                        }
                    }), args[getAll(node)] = $(node), container;
                },
                /**
                 * @param {?} fn
                 * @param {Object} node
                 * @return {?}
                 */
                _registerComponent : function(fn, node) {
                    if (!node || node.nodeType !== nodeType && (node.nodeType !== SELECT && node.nodeType !== ELEMENT_NODE)) {
                        test(false, "_registerComponent(...): Target container is not a DOM element.");
                    } else {
                        void 0;
                    }
                    base.ensureScrollValueMonitoring();
                    var name = element.registerContainer(node);
                    return params[name] = fn, name;
                },
                /**
                 * @param {?} obj
                 * @param {Object} value
                 * @param {?} shallow
                 * @param {Object} doc
                 * @return {?}
                 */
                _renderNewRootComponent : function(obj, value, shallow, doc) {
                    assert(null == data.current, "_renderNewRootComponent(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate. Check the render method of %s.", data.current && data.current.getName() || "ReactCompositeComponent");
                    var keys = getActual(obj, null);
                    var key = element._registerComponent(keys, value);
                    return self.batchedUpdates(restoreScript, keys, key, value, shallow, doc), args[key] = $(value), keys;
                },
                /**
                 * @param {string} name
                 * @param {Function} recurring
                 * @param {Object} deepDataAndEvents
                 * @param {Object} dataAndEvents
                 * @return {?}
                 */
                renderSubtreeIntoContainer : function(name, recurring, deepDataAndEvents, dataAndEvents) {
                    return null == name || null == name._reactInternalInstance ? test(false, "parentComponent must be a valid React Component") : void 0, element._renderSubtreeIntoContainer(name, recurring, deepDataAndEvents, dataAndEvents);
                },
                /**
                 * @param {string} keepData
                 * @param {number} opts
                 * @param {Object} clone
                 * @param {Function} value
                 * @return {?}
                 */
                _renderSubtreeIntoContainer : function(keepData, opts, clone, value) {
                    if (o.isValidElement(opts)) {
                        void 0;
                    } else {
                        test(false, "ReactDOM.render(): Invalid component element.%s", "string" == typeof opts ? " Instead of passing an element string, make sure to instantiate it by passing it to React.createElement." : "function" == typeof opts ? " Instead of passing a component class, make sure to instantiate it by passing it to React.createElement." : null != opts && void 0 !== opts.props ? " This may be caused by unintentionally loading two independent copies of React." : "");
                    }
                    assert(!clone || (!clone.tagName || "BODY" !== clone.tagName.toUpperCase()), "render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
                    var child = new o(template, null, null, null, null, null, opts);
                    var size = params[getAll(clone)];
                    if (size) {
                        var me = size._currentElement;
                        var all = me.props;
                        if (printResults(all, opts)) {
                            var thisp = size._renderedComponent.getPublicInstance();
                            var restoreScript = value && function() {
                                value.call(thisp);
                            };
                            return element._updateRootComponent(size, child, clone, restoreScript), thisp;
                        }
                        element.unmountComponentAtNode(clone);
                    }
                    var ref = $(clone);
                    var path = ref && !!parseInt(ref);
                    var err = traverseNode(clone);
                    if (assert(!err, "render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render."), !path || ref.nextSibling) {
                        var node = ref;
                        for (;node;) {
                            if (parseInt(node)) {
                                assert(false, "render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                                break;
                            }
                            node = node.nextSibling;
                        }
                    }
                    var shallow = path && (!size && !err);
                    var core_rnotwhite = element._renderNewRootComponent(child, clone, shallow, null != keepData ? keepData._reactInternalInstance._processChildContext(keepData._reactInternalInstance._context) : gzipSize)._renderedComponent.getPublicInstance();
                    return value && value.call(core_rnotwhite), core_rnotwhite;
                },
                /**
                 * @param {number} str
                 * @param {Object} jsonString
                 * @param {Function} options
                 * @return {?}
                 */
                render : function(str, jsonString, options) {
                    return element._renderSubtreeIntoContainer(null, str, jsonString, options);
                },
                /**
                 * @param {Object} node
                 * @return {?}
                 */
                registerContainer : function(node) {
                    var id = getAll(node);
                    return id && (id = record.getReactRootIDFromNodeID(id)), id || (id = record.createReactRootID()), parents[id] = node, id;
                },
                /**
                 * @param {Object} node
                 * @return {?}
                 */
                unmountComponentAtNode : function(node) {
                    assert(null == data.current, "unmountComponentAtNode(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate. Check the render method of %s.", data.current && data.current.getName() || "ReactCompositeComponent");
                    if (!node || node.nodeType !== nodeType && (node.nodeType !== SELECT && node.nodeType !== ELEMENT_NODE)) {
                        test(false, "unmountComponentAtNode(...): Target container is not a DOM element.");
                    } else {
                        void 0;
                    }
                    var l = getAll(node);
                    var param = params[l];
                    if (!param) {
                        var next = traverseNode(node);
                        var id = parseInt(node);
                        var store = id && id === record.getReactRootIDFromNodeID(id);
                        return assert(!next, "unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", store ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component."), false;
                    }
                    return self.batchedUpdates(evalScript, param, node), delete params[l], delete parents[l], delete args[l], true;
                },
                /**
                 * @param {string} id
                 * @return {?}
                 */
                findReactContainerForID : function(id) {
                    var i = record.getReactRootIDFromNodeID(id);
                    var parent = parents[i];
                    var next = args[i];
                    if (next && next.parentNode !== parent) {
                        assert(parseInt(next) === i, "ReactMount: Root element ID differed from reactRootID.");
                        var c = parent.firstChild;
                        if (c && i === parseInt(c)) {
                            args[i] = c;
                        } else {
                            assert(false, "ReactMount: Root element has been removed from its original container. New container: %s", next.parentNode);
                        }
                    }
                    return parent;
                },
                /**
                 * @param {string} id
                 * @return {?}
                 */
                findReactNodeByID : function(id) {
                    var n = element.findReactContainerForID(id);
                    return element.findComponentRoot(n, id);
                },
                /**
                 * @param {Object} node
                 * @return {?}
                 */
                getFirstReactDOM : function(node) {
                    return getNode(node);
                },
                /**
                 * @param {?} attr
                 * @param {string} id
                 * @return {?}
                 */
                findComponentRoot : function(attr, id) {
                    /** @type {Array} */
                    var nodes = SplitSolver_solve_nodes;
                    /** @type {number} */
                    var i = 0;
                    var div = cancelAnimationFrame(id) || attr;
                    assert(null != div, "React can't find the root component node for data-reactid value `%s`. If you're seeing this message, it probably means that you've loaded two copies of React on the page. At this time, only a single copy of React can be loaded at a time.", id);
                    nodes[0] = div.firstChild;
                    /** @type {number} */
                    nodes.length = 1;
                    for (;i < nodes.length;) {
                        var activeElement;
                        var el = nodes[i++];
                        for (;el;) {
                            var type = element.getID(el);
                            if (type) {
                                if (id === type) {
                                    activeElement = el;
                                } else {
                                    if (record.isAncestorIDOf(type, id)) {
                                        /** @type {number} */
                                        nodes.length = i = 0;
                                        nodes.push(el.firstChild);
                                    }
                                }
                            } else {
                                nodes.push(el.firstChild);
                            }
                            el = el.nextSibling;
                        }
                        if (activeElement) {
                            return nodes.length = 0, activeElement;
                        }
                    }
                    /** @type {number} */
                    nodes.length = 0;
                    test(false, "findComponentRoot(..., %s): Unable to find element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID `%s`.", id, element.getID(attr));
                },
                /**
                 * @param {string} name
                 * @param {Function} recurring
                 * @param {Object} deepDataAndEvents
                 * @param {Object} dataAndEvents
                 * @return {undefined}
                 */
                _mountImageIntoNode : function(name, recurring, deepDataAndEvents, dataAndEvents) {
                    if (!recurring || recurring.nodeType !== nodeType && (recurring.nodeType !== SELECT && recurring.nodeType !== ELEMENT_NODE) ? test(false, "mountComponentIntoNode(...): Target container is not valid.") : void 0, deepDataAndEvents) {
                        var element = $(recurring);
                        if (field.canReuseMarkup(name, element)) {
                            return;
                        }
                        var roleName = element.getAttribute(field.CHECKSUM_ATTR_NAME);
                        element.removeAttribute(field.CHECKSUM_ATTR_NAME);
                        var obj = element.outerHTML;
                        element.setAttribute(field.CHECKSUM_ATTR_NAME, roleName);
                        var node;
                        /** @type {string} */
                        var h = name;
                        if (recurring.nodeType === nodeType) {
                            /** @type {Element} */
                            node = document.createElement("div");
                            /** @type {string} */
                            node.innerHTML = name;
                            h = node.innerHTML;
                        } else {
                            /** @type {Element} */
                            node = document.createElement("iframe");
                            document.body.appendChild(node);
                            node.contentDocument.write(name);
                            h = node.contentDocument.documentElement.outerHTML;
                            document.body.removeChild(node);
                        }
                        var i = normalize(h, obj);
                        var value = " (client) " + h.substring(i - 20, i + 20) + "\n (server) " + obj.substring(i - 20, i + 20);
                        if (recurring.nodeType === SELECT) {
                            test(false, "You're trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s",
                                value);
                        } else {
                            void 0;
                        }
                        assert(false, "React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:\n%s", value);
                    }
                    if (recurring.nodeType === SELECT ? test(false, "You're trying to render a component to the document but you didn't use server rendering. We can't do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.") : void 0, dataAndEvents.useCreateElement) {
                        for (;recurring.lastChild;) {
                            recurring.removeChild(recurring.lastChild);
                        }
                        recurring.appendChild(name);
                    } else {
                        _path(recurring, name);
                    }
                },
                ownerDocumentContextKey : cacheParam,
                /** @type {function (Object): ?} */
                getReactRootID : getAll,
                /** @type {function (?): ?} */
                getID : find,
                /** @type {function (HTMLElement, ?): undefined} */
                setID : setup,
                /** @type {function (?): ?} */
                getNode : complete,
                /** @type {function (string): ?} */
                getNodeFromInstance : process,
                /** @type {function (Object, ?): ?} */
                isValid : isValid,
                /** @type {function (?): undefined} */
                purgeID : getKeyAsNumber_
            };
            t.measureMethods(element, "ReactMount", {
                _renderNewRootComponent : "_renderNewRootComponent",
                _mountImageIntoNode : "_mountImageIntoNode"
            });
            module.exports = element;
        }, {
            10 : 10,
            132 : 132,
            138 : 138,
            141 : 141,
            144 : 144,
            150 : 150,
            154 : 154,
            161 : 161,
            173 : 173,
            24 : 24,
            28 : 28,
            39 : 39,
            44 : 44,
            57 : 57,
            60 : 60,
            67 : 67,
            68 : 68,
            71 : 71,
            78 : 78,
            84 : 84,
            95 : 95,
            96 : 96
        }],
        73 : [function(require, module, dataAndEvents) {
            /**
             * @param {string} insertBefore
             * @param {string} options
             * @param {?} returnDom
             * @return {undefined}
             */
            function createChild(insertBefore, options, returnDom) {
                matched.push({
                    parentID : insertBefore,
                    parentNode : null,
                    type : env.INSERT_MARKUP,
                    markupIndex : related.push(options) - 1,
                    content : null,
                    fromIndex : null,
                    toIndex : returnDom
                });
            }
            /**
             * @param {string} id
             * @param {?} opt_data
             * @param {number} toIndex
             * @return {undefined}
             */
            function notify(id, opt_data, toIndex) {
                matched.push({
                    parentID : id,
                    parentNode : null,
                    type : env.MOVE_EXISTING,
                    markupIndex : null,
                    content : null,
                    fromIndex : opt_data,
                    toIndex : toIndex
                });
            }
            /**
             * @param {string} object
             * @param {?} fromIndex
             * @return {undefined}
             */
            function getEnumerableProperties(object, fromIndex) {
                matched.push({
                    parentID : object,
                    parentNode : null,
                    type : env.REMOVE_NODE,
                    markupIndex : null,
                    content : null,
                    fromIndex : fromIndex,
                    toIndex : null
                });
            }
            /**
             * @param {string} failing_message
             * @param {string} deepDataAndEvents
             * @return {undefined}
             */
            function report(failing_message, deepDataAndEvents) {
                matched.push({
                    parentID : failing_message,
                    parentNode : null,
                    type : env.SET_MARKUP,
                    markupIndex : null,
                    content : deepDataAndEvents,
                    fromIndex : null,
                    toIndex : null
                });
            }
            /**
             * @param {string} val
             * @param {string} data
             * @return {undefined}
             */
            function ondata(val, data) {
                matched.push({
                    parentID : val,
                    parentNode : null,
                    type : env.TEXT_CONTENT,
                    markupIndex : null,
                    content : data,
                    fromIndex : null,
                    toIndex : null
                });
            }
            /**
             * @return {undefined}
             */
            function getPosition() {
                if (matched.length) {
                    jQuery.processChildrenUpdates(matched, related);
                    first();
                }
            }
            /**
             * @return {undefined}
             */
            function first() {
                /** @type {number} */
                matched.length = 0;
                /** @type {number} */
                related.length = 0;
            }
            var jQuery = require(36);
            var env = require(74);
            var stream = require(39);
            var util = require(84);
            var _ = require(31);
            var template = require(123);
            /** @type {number} */
            var q = 0;
            /** @type {Array} */
            var matched = [];
            /** @type {Array} */
            var related = [];
            var JsDiff = {
                Mixin : {
                    /**
                     * @param {number} protoProps
                     * @param {string} dataAndEvents
                     * @param {string} deepDataAndEvents
                     * @return {?}
                     */
                    _reconcilerInstantiateChildren : function(protoProps, dataAndEvents, deepDataAndEvents) {
                        if (this._currentElement) {
                            try {
                                return stream.current = this._currentElement._owner, _.instantiateChildren(protoProps, dataAndEvents, deepDataAndEvents);
                            } finally {
                                /** @type {null} */
                                stream.current = null;
                            }
                        }
                        return _.instantiateChildren(protoProps, dataAndEvents, deepDataAndEvents);
                    },
                    /**
                     * @param {Object} details
                     * @param {Object} context
                     * @param {string} dataAndEvents
                     * @param {string} deepDataAndEvents
                     * @return {?}
                     */
                    _reconcilerUpdateChildren : function(details, context, dataAndEvents, deepDataAndEvents) {
                        var result;
                        if (this._currentElement) {
                            try {
                                stream.current = this._currentElement._owner;
                                result = template(context);
                            } finally {
                                /** @type {null} */
                                stream.current = null;
                            }
                            return _.updateChildren(details, result, dataAndEvents, deepDataAndEvents);
                        }
                        return result = template(context), _.updateChildren(details, result, dataAndEvents, deepDataAndEvents);
                    },
                    /**
                     * @param {number} protoProps
                     * @param {string} dataAndEvents
                     * @param {string} deepDataAndEvents
                     * @return {?}
                     */
                    mountChildren : function(protoProps, dataAndEvents, deepDataAndEvents) {
                        var types = this._reconcilerInstantiateChildren(protoProps, dataAndEvents, deepDataAndEvents);
                        this._renderedChildren = types;
                        /** @type {Array} */
                        var bucket = [];
                        /** @type {number} */
                        var msgId = 0;
                        var type;
                        for (type in types) {
                            if (types.hasOwnProperty(type)) {
                                var data = types[type];
                                /** @type {string} */
                                var transaction = this._rootNodeID + type;
                                var value = util.mountComponent(data, transaction, dataAndEvents, deepDataAndEvents);
                                /** @type {number} */
                                data._mountIndex = msgId++;
                                bucket.push(value);
                            }
                        }
                        return bucket;
                    },
                    /**
                     * @param {string} name
                     * @return {undefined}
                     */
                    updateTextContent : function(name) {
                        q++;
                        /** @type {boolean} */
                        var b = true;
                        try {
                            var css = this._renderedChildren;
                            _.unmountChildren(css);
                            var selector;
                            for (selector in css) {
                                if (css.hasOwnProperty(selector)) {
                                    this._unmountChild(css[selector]);
                                }
                            }
                            this.setTextContent(name);
                            /** @type {boolean} */
                            b = false;
                        } finally {
                            q--;
                            if (!q) {
                                if (b) {
                                    first();
                                } else {
                                    getPosition();
                                }
                            }
                        }
                    },
                    /**
                     * @param {string} deepDataAndEvents
                     * @return {undefined}
                     */
                    updateMarkup : function(deepDataAndEvents) {
                        q++;
                        /** @type {boolean} */
                        var b = true;
                        try {
                            var info = this._renderedChildren;
                            _.unmountChildren(info);
                            var name;
                            for (name in info) {
                                if (info.hasOwnProperty(name)) {
                                    this._unmountChildByName(info[name], name);
                                }
                            }
                            this.setMarkup(deepDataAndEvents);
                            /** @type {boolean} */
                            b = false;
                        } finally {
                            q--;
                            if (!q) {
                                if (b) {
                                    first();
                                } else {
                                    getPosition();
                                }
                            }
                        }
                    },
                    /**
                     * @param {Object} args
                     * @param {string} transaction
                     * @param {string} dataAndEvents
                     * @return {undefined}
                     */
                    updateChildren : function(args, transaction, dataAndEvents) {
                        q++;
                        /** @type {boolean} */
                        var d = true;
                        try {
                            this._updateChildren(args, transaction, dataAndEvents);
                            /** @type {boolean} */
                            d = false;
                        } finally {
                            q--;
                            if (!q) {
                                if (d) {
                                    first();
                                } else {
                                    getPosition();
                                }
                            }
                        }
                    },
                    /**
                     * @param {Object} object
                     * @param {string} dataAndEvents
                     * @param {string} deepDataAndEvents
                     * @return {undefined}
                     */
                    _updateChildren : function(object, dataAndEvents, deepDataAndEvents) {
                        var prevChildren = this._renderedChildren;
                        var obj = this._reconcilerUpdateChildren(prevChildren, object, dataAndEvents, deepDataAndEvents);
                        if (this._renderedChildren = obj, obj || prevChildren) {
                            var name;
                            /** @type {number} */
                            var lastIndex = 0;
                            /** @type {number} */
                            var nextIndex = 0;
                            for (name in obj) {
                                if (obj.hasOwnProperty(name)) {
                                    var prevChild = prevChildren && prevChildren[name];
                                    var memory = obj[name];
                                    if (prevChild === memory) {
                                        this.moveChild(prevChild, nextIndex, lastIndex);
                                        /** @type {number} */
                                        lastIndex = Math.max(prevChild._mountIndex, lastIndex);
                                        /** @type {number} */
                                        prevChild._mountIndex = nextIndex;
                                    } else {
                                        if (prevChild) {
                                            /** @type {number} */
                                            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
                                            this._unmountChild(prevChild);
                                        }
                                        this._mountChildByNameAtIndex(memory, name, nextIndex, dataAndEvents, deepDataAndEvents);
                                    }
                                    nextIndex++;
                                }
                            }
                            for (name in prevChildren) {
                                if (!!prevChildren.hasOwnProperty(name)) {
                                    if (!(obj && obj.hasOwnProperty(name))) {
                                        this._unmountChild(prevChildren[name]);
                                    }
                                }
                            }
                        }
                    },
                    /**
                     * @return {undefined}
                     */
                    unmountChildren : function() {
                        var protoProps = this._renderedChildren;
                        _.unmountChildren(protoProps);
                        /** @type {null} */
                        this._renderedChildren = null;
                    },
                    /**
                     * @param {?} child
                     * @param {number} toIndex
                     * @param {number} lastIndex
                     * @return {undefined}
                     */
                    moveChild : function(child, toIndex, lastIndex) {
                        if (child._mountIndex < lastIndex) {
                            notify(this._rootNodeID, child._mountIndex, toIndex);
                        }
                    },
                    /**
                     * @param {string} child
                     * @param {string} args
                     * @return {undefined}
                     */
                    createChild : function(child, args) {
                        createChild(this._rootNodeID, args, child._mountIndex);
                    },
                    /**
                     * @param {?} child
                     * @return {undefined}
                     */
                    removeChild : function(child) {
                        getEnumerableProperties(this._rootNodeID, child._mountIndex);
                    },
                    /**
                     * @param {string} val
                     * @return {undefined}
                     */
                    setTextContent : function(val) {
                        ondata(this._rootNodeID, val);
                    },
                    /**
                     * @param {string} deepDataAndEvents
                     * @return {undefined}
                     */
                    setMarkup : function(deepDataAndEvents) {
                        report(this._rootNodeID, deepDataAndEvents);
                    },
                    /**
                     * @param {string} data
                     * @param {?} keepData
                     * @param {number} index
                     * @param {string} dataAndEvents
                     * @param {string} deepDataAndEvents
                     * @return {undefined}
                     */
                    _mountChildByNameAtIndex : function(data, keepData, index, dataAndEvents, deepDataAndEvents) {
                        var transaction = this._rootNodeID + keepData;
                        var typePattern = util.mountComponent(data, transaction, dataAndEvents, deepDataAndEvents);
                        /** @type {number} */
                        data._mountIndex = index;
                        this.createChild(data, typePattern);
                    },
                    /**
                     * @param {?} child
                     * @return {undefined}
                     */
                    _unmountChild : function(child) {
                        this.removeChild(child);
                        /** @type {null} */
                        child._mountIndex = null;
                    }
                }
            };
            module.exports = JsDiff;
        }, {
            123 : 123,
            31 : 31,
            36 : 36,
            39 : 39,
            74 : 74,
            84 : 84
        }],
        74 : [function($sanitize, module, dataAndEvents) {
            var readFile = $sanitize(165);
            var input = readFile({
                INSERT_MARKUP : null,
                MOVE_EXISTING : null,
                REMOVE_NODE : null,
                SET_MARKUP : null,
                TEXT_CONTENT : null
            });
            module.exports = input;
        }, {
            165 : 165
        }],
        75 : [function(require, module, dataAndEvents) {
            /**
             * @param {Event} f
             * @return {?}
             */
            function isFunction(f) {
                if ("function" == typeof f.type) {
                    return f.type;
                }
                var tag = f.type;
                var group = tagMap[tag];
                return null == group && (tagMap[tag] = group = escapeCharacters(tag)), group;
            }
            /**
             * @param {Object} s
             * @return {?}
             */
            function parse(s) {
                return Vec2 ? void 0 : getName(false, "There is no registered component for the tag %s", s.type), new Vec2(s.type, s.props);
            }
            /**
             * @param {string} keepData
             * @return {?}
             */
            function remove(keepData) {
                return new ary(keepData);
            }
            /**
             * @param {?} dataAndEvents
             * @return {?}
             */
            function clone(dataAndEvents) {
                return dataAndEvents instanceof ary;
            }
            var makeIterator = require(24);
            var getName = require(161);
            /** @type {null} */
            var escapeCharacters = null;
            /** @type {null} */
            var Vec2 = null;
            var tagMap = {};
            /** @type {null} */
            var ary = null;
            var injectComponentClasses = {
                /**
                 * @param {Object} value
                 * @return {undefined}
                 */
                injectGenericComponentClass : function(value) {
                    /** @type {Object} */
                    Vec2 = value;
                },
                /**
                 * @param {Object} obj
                 * @return {undefined}
                 */
                injectTextComponentClass : function(obj) {
                    /** @type {Object} */
                    ary = obj;
                },
                /**
                 * @param {?} thisObj
                 * @return {undefined}
                 */
                injectComponentClasses : function(thisObj) {
                    makeIterator(tagMap, thisObj);
                }
            };
            var JsDiff = {
                /** @type {function (Event): ?} */
                getComponentClassForElement : isFunction,
                /** @type {function (Object): ?} */
                createInternalComponent : parse,
                /** @type {function (string): ?} */
                createInstanceForText : remove,
                /** @type {function (?): ?} */
                isTextComponent : clone,
                injection : injectComponentClasses
            };
            module.exports = JsDiff;
        }, {
            161 : 161,
            24 : 24
        }],
        76 : [function($filter, module, dataAndEvents) {
            /**
             * @param {(Array|string)} dataAndEvents
             * @param {string} arr
             * @return {undefined}
             */
            function clone(dataAndEvents, arr) {
                fn(false, "%s(...): Can only update a mounted or mounting component. This usually means you called %s() on an unmounted component. This is a no-op. Please check the code for the %s component.", arr, arr, dataAndEvents.constructor && dataAndEvents.constructor.displayName || "");
            }
            var fn = $filter(173);
            var JsDiff = {
                /**
                 * @param {?} dataAndEvents
                 * @return {?}
                 */
                isMounted : function(dataAndEvents) {
                    return false;
                },
                /**
                 * @param {?} dataAndEvents
                 * @param {Function} recurring
                 * @return {undefined}
                 */
                enqueueCallback : function(dataAndEvents, recurring) {
                },
                /**
                 * @param {(Array|string)} dataAndEvents
                 * @return {undefined}
                 */
                enqueueForceUpdate : function(dataAndEvents) {
                    clone(dataAndEvents, "forceUpdate");
                },
                /**
                 * @param {(Array|string)} dataAndEvents
                 * @param {?} opt_attributes
                 * @return {undefined}
                 */
                enqueueReplaceState : function(dataAndEvents, opt_attributes) {
                    clone(dataAndEvents, "replaceState");
                },
                /**
                 * @param {(Array|string)} dataAndEvents
                 * @param {?} opt_attributes
                 * @return {undefined}
                 */
                enqueueSetState : function(dataAndEvents, opt_attributes) {
                    clone(dataAndEvents, "setState");
                },
                /**
                 * @param {(Array|string)} dataAndEvents
                 * @param {?} deepDataAndEvents
                 * @return {undefined}
                 */
                enqueueSetProps : function(dataAndEvents, deepDataAndEvents) {
                    clone(dataAndEvents, "setProps");
                },
                /**
                 * @param {(Array|string)} dataAndEvents
                 * @param {?} deepDataAndEvents
                 * @return {undefined}
                 */
                enqueueReplaceProps : function(dataAndEvents, deepDataAndEvents) {
                    clone(dataAndEvents, "replaceProps");
                }
            };
            module.exports = JsDiff;
        }, {
            173 : 173
        }],
        77 : [function(require, module, dataAndEvents) {
            var getActual = require(161);
            var Data = {
                /**
                 * @param {Object} owner
                 * @return {?}
                 */
                isValidOwner : function(owner) {
                    return!(!owner || ("function" != typeof owner.attachRef || "function" != typeof owner.detachRef));
                },
                /**
                 * @param {string} component
                 * @param {?} ref
                 * @param {Object} owner
                 * @return {undefined}
                 */
                addComponentAsRefTo : function(component, ref, owner) {
                    if (Data.isValidOwner(owner)) {
                        void 0;
                    } else {
                        getActual(false, "addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).");
                    }
                    owner.attachRef(ref, component);
                },
                /**
                 * @param {Object} keepData
                 * @param {?} ref
                 * @param {Object} owner
                 * @return {undefined}
                 */
                removeComponentAsRefFrom : function(keepData, ref, owner) {
                    if (Data.isValidOwner(owner)) {
                        void 0;
                    } else {
                        getActual(false, "removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).");
                    }
                    if (owner.getPublicInstance().refs[ref] === keepData.getPublicInstance()) {
                        owner.detachRef(ref);
                    }
                }
            };
            module.exports = Data;
        }, {
            161 : 161
        }],
        78 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {string} xs
             * @param {string} keepData
             * @param {Function} array
             * @return {?}
             */
            function remove(xs, keepData, array) {
                return array;
            }
            var util = {
                enableMeasure : false,
                /** @type {function (string, string, Function): ?} */
                storedMeasure : remove,
                /**
                 * @param {?} value
                 * @param {string} type
                 * @param {?} opt_attributes
                 * @return {undefined}
                 */
                measureMethods : function(value, type, opt_attributes) {
                    var key;
                    for (key in opt_attributes) {
                        if (opt_attributes.hasOwnProperty(key)) {
                            value[key] = util.measure(type, opt_attributes[key], value[key]);
                        }
                    }
                },
                /**
                 * @param {string} src
                 * @param {string} name
                 * @param {Function} fn
                 * @return {?}
                 */
                measure : function(src, name, fn) {
                    /** @type {null} */
                    var result = null;
                    /**
                     * @return {?}
                     */
                    var b = function() {
                        return util.enableMeasure ? (result || (result = util.storedMeasure(src, name, fn)), result.apply(this, arguments)) : fn.apply(this, arguments);
                    };
                    return b.displayName = src + "_" + name, b;
                },
                injection : {
                    /**
                     * @param {Function} measure
                     * @return {undefined}
                     */
                    injectMeasure : function(measure) {
                        /** @type {Function} */
                        util.storedMeasure = measure;
                    }
                }
            };
            module.exports = util;
        }, {}],
        79 : [function(require, module, dataAndEvents) {
            /**
             * @param {Function} f
             * @return {?}
             */
            function fn(f) {
                return function(data, name, value) {
                    if (data.hasOwnProperty(name)) {
                        data[name] = f(data[name], value);
                    } else {
                        data[name] = value;
                    }
                };
            }
            /**
             * @param {Object} o
             * @param {Object} obj
             * @return {?}
             */
            function objectToString(o, obj) {
                var name;
                for (name in obj) {
                    if (obj.hasOwnProperty(name)) {
                        var merge = config[name];
                        if (merge && config.hasOwnProperty(name)) {
                            merge(o, name, obj[name]);
                        } else {
                            if (!o.hasOwnProperty(name)) {
                                o[name] = obj[name];
                            }
                        }
                    }
                }
                return o;
            }
            var inherits = require(24);
            var nodes = require(153);
            var ctor = require(164);
            var data = fn(function(classProps, protoProps) {
                return inherits({}, protoProps, classProps);
            });
            var config = {
                children : nodes,
                className : fn(ctor),
                style : data
            };
            var JsDiff = {
                /**
                 * @param {Function} recurring
                 * @param {Object} walkers
                 * @return {?}
                 */
                mergeProps : function(recurring, walkers) {
                    return objectToString(inherits({}, recurring), walkers);
                }
            };
            module.exports = JsDiff;
        }, {
            153 : 153,
            164 : 164,
            24 : 24
        }],
        80 : [function(dataAndEvents, module, deepDataAndEvents) {
            var obj = {};
            obj = {
                prop : "prop",
                context : "context",
                childContext : "child context"
            };
            module.exports = obj;
        }, {}],
        81 : [function(require, module, dataAndEvents) {
            var flag = require(165);
            var obj = flag({
                prop : null,
                context : null,
                childContext : null
            });
            module.exports = obj;
        }, {
            165 : 165
        }],
        82 : [function(require, s, dataAndEvents) {
            /**
             * @param {Function} name
             * @return {?}
             */
            function fn(name) {
                /**
                 * @param {Element} execAsap
                 * @param {Object} params
                 * @param {string} type
                 * @param {(Function|string)} token
                 * @param {?} index
                 * @param {Object} event
                 * @return {?}
                 */
                function handler(execAsap, params, type, token, index, event) {
                    if (token = token || key, event = event || type, null == params[type]) {
                        var prop = props[index];
                        return execAsap ? new Error("Required " + prop + " `" + event + "` was not specified in " + ("`" + token + "`.")) : null;
                    }
                    return name(params, type, token, index, event);
                }
                var path = handler.bind(null, false);
                return path.isRequired = handler.bind(null, true), path;
            }
            /**
             * @param {string} type
             * @return {?}
             */
            function typeParser(type) {
                /**
                 * @param {Array} object
                 * @param {number} property
                 * @param {string} textStatus
                 * @param {?} status
                 * @param {string} jqXHR
                 * @return {?}
                 */
                function error(object, property, textStatus, status, jqXHR) {
                    var o = object[property];
                    var t = isArray(o);
                    if (t !== type) {
                        var msg = props[status];
                        var prop = hoozit(o);
                        return new Error("Invalid " + msg + " `" + jqXHR + "` of type " + ("`" + prop + "` supplied to `" + textStatus + "`, expected ") + ("`" + type + "`."));
                    }
                    return null;
                }
                return fn(error);
            }
            /**
             * @return {?}
             */
            function runSuite() {
                return fn(Block.thatReturns(null));
            }
            /**
             * @param {?} callback
             * @return {?}
             */
            function next(callback) {
                /**
                 * @param {Array} response
                 * @param {number} id
                 * @param {string} data
                 * @param {?} success
                 * @param {string} _
                 * @return {?}
                 */
                function error(response, id, data, success, _) {
                    var res = response[id];
                    if (!Array.isArray(res)) {
                        var prop = props[success];
                        var err = isArray(res);
                        return new Error("Invalid " + prop + " `" + _ + "` of type " + ("`" + err + "` supplied to `" + data + "`, expected an array."));
                    }
                    /** @type {number} */
                    var i = 0;
                    for (;i < res.length;i++) {
                        var result = callback(res, i, data, success, _ + "[" + i + "]");
                        if (result instanceof Error) {
                            return result;
                        }
                    }
                    return null;
                }
                return fn(error);
            }
            /**
             * @return {?}
             */
            function interceptor() {
                /**
                 * @param {Array} errors
                 * @param {number} status
                 * @param {string} textStatus
                 * @param {?} index
                 * @param {string} jqXHR
                 * @return {?}
                 */
                function error(errors, status, textStatus, index, jqXHR) {
                    if (!assert.isValidElement(errors[status])) {
                        var prop = props[index];
                        return new Error("Invalid " + prop + " `" + jqXHR + "` supplied to " + ("`" + textStatus + "`, expected a single ReactElement."));
                    }
                    return null;
                }
                return fn(error);
            }
            /**
             * @param {Function} model
             * @return {?}
             */
            function create(model) {
                /**
                 * @param {Array} data
                 * @param {number} property
                 * @param {string} textStatus
                 * @param {?} index
                 * @param {string} jqXHR
                 * @return {?}
                 */
                function error(data, property, textStatus, index, jqXHR) {
                    if (!(data[property] instanceof model)) {
                        var prop = props[index];
                        var curKey = model.name || key;
                        var url = parse(data[property]);
                        return new Error("Invalid " + prop + " `" + jqXHR + "` of type " + ("`" + url + "` supplied to `" + textStatus + "`, expected ") + ("instance of `" + curKey + "`."));
                    }
                    return null;
                }
                return fn(error);
            }
            /**
             * @param {string} names
             * @return {?}
             */
            function load(names) {
                /**
                 * @param {Array} $cookies
                 * @param {number} key
                 * @param {string} textStatus
                 * @param {?} index
                 * @param {string} jqXHR
                 * @return {?}
                 */
                function error($cookies, key, textStatus, index, jqXHR) {
                    var value = $cookies[key];
                    /** @type {number} */
                    var i = 0;
                    for (;i < names.length;i++) {
                        if (value === names[i]) {
                            return null;
                        }
                    }
                    var prop = props[index];
                    /** @type {string} */
                    var callback = JSON.stringify(names);
                    return new Error("Invalid " + prop + " `" + jqXHR + "` of value `" + value + "` " + ("supplied to `" + textStatus + "`, expected one of " + callback + "."));
                }
                return fn(Array.isArray(names) ? error : function() {
                    return new Error("Invalid argument supplied to oneOf, expected an instance of array.");
                });
            }
            /**
             * @param {?} callback
             * @return {?}
             */
            function process(callback) {
                /**
                 * @param {Array} stack
                 * @param {number} offset
                 * @param {string} selector
                 * @param {?} method
                 * @param {string} message
                 * @return {?}
                 */
                function parse(stack, offset, selector, method, message) {
                    var data = stack[offset];
                    var newState = isArray(data);
                    if ("object" !== newState) {
                        var definition = props[method];
                        return new Error("Invalid " + definition + " `" + message + "` of type " + ("`" + newState + "` supplied to `" + selector + "`, expected an object."));
                    }
                    var file;
                    for (file in data) {
                        if (data.hasOwnProperty(file)) {
                            var ret = callback(data, file, selector, method, message + "." + file);
                            if (ret instanceof Error) {
                                return ret;
                            }
                        }
                    }
                    return null;
                }
                return fn(parse);
            }
            /**
             * @param {(Array|string)} paths
             * @return {?}
             */
            function render(paths) {
                /**
                 * @param {?} err
                 * @param {?} textStatus
                 * @param {string} collection
                 * @param {?} index
                 * @param {string} request
                 * @return {?}
                 */
                function error(err, textStatus, collection, index, request) {
                    /** @type {number} */
                    var i = 0;
                    for (;i < paths.length;i++) {
                        var callback = paths[i];
                        if (null == callback(err, textStatus, collection, index, request)) {
                            return null;
                        }
                    }
                    var prop = props[index];
                    return new Error("Invalid " + prop + " `" + request + "` supplied to " + ("`" + collection + "`."));
                }
                return fn(Array.isArray(paths) ? error : function() {
                    return new Error("Invalid argument supplied to oneOfType, expected an instance of array.");
                });
            }
            /**
             * @return {?}
             */
            function authenticate() {
                /**
                 * @param {Array} xhr
                 * @param {number} i
                 * @param {string} textStatus
                 * @param {?} index
                 * @param {string} jqXHR
                 * @return {?}
                 */
                function error(xhr, i, textStatus, index, jqXHR) {
                    if (!optgroup(xhr[i])) {
                        var prop = props[index];
                        return new Error("Invalid " + prop + " `" + jqXHR + "` supplied to " + ("`" + textStatus + "`, expected a ReactNode."));
                    }
                    return null;
                }
                return fn(error);
            }
            /**
             * @param {?} obj
             * @return {?}
             */
            function update(obj) {
                /**
                 * @param {Array} $cookies
                 * @param {number} key
                 * @param {string} scope
                 * @param {?} type
                 * @param {string} _
                 * @return {?}
                 */
                function error($cookies, key, scope, type, _) {
                    var value = $cookies[key];
                    var isFunction = isArray(value);
                    if ("object" !== isFunction) {
                        var p = props[type];
                        return new Error("Invalid " + p + " `" + _ + "` of type `" + isFunction + "` " + ("supplied to `" + scope + "`, expected `object`."));
                    }
                    var prop;
                    for (prop in obj) {
                        var fn = obj[prop];
                        if (fn) {
                            var values = fn(value, prop, scope, type, _ + "." + prop);
                            if (values) {
                                return values;
                            }
                        }
                    }
                    return null;
                }
                return fn(error);
            }
            /**
             * @param {Object} obj
             * @return {?}
             */
            function optgroup(obj) {
                switch(typeof obj) {
                    case "number":
                        ;
                    case "string":
                        ;
                    case "undefined":
                        return true;
                    case "boolean":
                        return!obj;
                    case "object":
                        if (Array.isArray(obj)) {
                            return obj.every(optgroup);
                        }
                        if (null === obj || assert.isValidElement(obj)) {
                            return true;
                        }
                        var objToString = getActual(obj);
                        if (!objToString) {
                            return false;
                        }
                        var pair;
                        var stream = objToString.call(obj);
                        if (objToString !== obj.entries) {
                            for (;!(pair = stream.next()).done;) {
                                if (!optgroup(pair.value)) {
                                    return false;
                                }
                            }
                        } else {
                            for (;!(pair = stream.next()).done;) {
                                var values = pair.value;
                                if (values && !optgroup(values[1])) {
                                    return false;
                                }
                            }
                        }
                        return true;
                    default:
                        return false;
                }
            }
            /**
             * @param {?} o
             * @return {?}
             */
            function isArray(o) {
                /** @type {string} */
                var t = typeof o;
                return Array.isArray(o) ? "array" : o instanceof RegExp ? "object" : t;
            }
            /**
             * @param {?} o
             * @return {?}
             */
            function hoozit(o) {
                var wasArray = isArray(o);
                if ("object" === wasArray) {
                    if (o instanceof Date) {
                        return "date";
                    }
                    if (o instanceof RegExp) {
                        return "regexp";
                    }
                }
                return wasArray;
            }
            /**
             * @param {(Array|string)} node
             * @return {?}
             */
            function parse(node) {
                return node.constructor && node.constructor.name ? node.constructor.name : "<<anonymous>>";
            }
            var assert = require(57);
            var props = require(80);
            var Block = require(153);
            var getActual = require(129);
            /** @type {string} */
            var key = "<<anonymous>>";
            var json = {
                array : typeParser("array"),
                bool : typeParser("boolean"),
                func : typeParser("function"),
                number : typeParser("number"),
                object : typeParser("object"),
                string : typeParser("string"),
                any : runSuite(),
                /** @type {function (?): ?} */
                arrayOf : next,
                element : interceptor(),
                /** @type {function (Function): ?} */
                instanceOf : create,
                node : authenticate(),
                /** @type {function (?): ?} */
                objectOf : process,
                /** @type {function (string): ?} */
                oneOf : load,
                /** @type {function ((Array|string)): ?} */
                oneOfType : render,
                /** @type {function (?): ?} */
                shape : update
            };
            s.exports = json;
        }, {
            129 : 129,
            153 : 153,
            57 : 57,
            80 : 80
        }],
        83 : [function(require, module, dataAndEvents) {
            /**
             * @param {string} name
             * @return {undefined}
             */
            function Class(name) {
                this.reinitializeTransaction();
                /** @type {boolean} */
                this.renderToStaticMarkup = false;
                this.reactMountReady = utils.getPooled(null);
                this.useCreateElement = !name && Block.useCreateElement;
            }
            var utils = require(6);
            var util = require(25);
            var child = require(28);
            var Block = require(44);
            var api = require(66);
            var nodes = require(113);
            var Emitter = require(24);
            var methods = {
                initialize : api.getSelectionInformation,
                close : api.restoreSelection
            };
            var CSHARP_KEYWORDS = {
                /**
                 * @return {?}
                 */
                initialize : function() {
                    var a = child.isEnabled();
                    return child.setEnabled(false), a;
                },
                /**
                 * @param {boolean} enabled
                 * @return {undefined}
                 */
                close : function(enabled) {
                    child.setEnabled(enabled);
                }
            };
            var JSCRIPT_KEYWORDS = {
                /**
                 * @return {undefined}
                 */
                initialize : function() {
                    this.reactMountReady.reset();
                },
                /**
                 * @return {undefined}
                 */
                close : function() {
                    this.reactMountReady.notifyAll();
                }
            };
            /** @type {Array} */
            var ALL_KEYWORDS = [methods, CSHARP_KEYWORDS, JSCRIPT_KEYWORDS];
            var r20 = {
                /**
                 * @return {?}
                 */
                getTransactionWrappers : function() {
                    return ALL_KEYWORDS;
                },
                /**
                 * @return {?}
                 */
                getReactMountReady : function() {
                    return this.reactMountReady;
                },
                /**
                 * @return {undefined}
                 */
                destructor : function() {
                    utils.release(this.reactMountReady);
                    /** @type {null} */
                    this.reactMountReady = null;
                }
            };
            Emitter(Class.prototype, nodes.Mixin, r20);
            util.addPoolingTo(Class);
            /** @type {function (string): undefined} */
            module.exports = Class;
        }, {
            113 : 113,
            24 : 24,
            25 : 25,
            28 : 28,
            44 : 44,
            6 : 6,
            66 : 66
        }],
        84 : [function(require, module, dataAndEvents) {
            /**
             * @return {undefined}
             */
            function udataCur() {
                assert.attachRefs(this, this._currentElement);
            }
            var assert = require(85);
            var JsDiff = {
                /**
                 * @param {string} url_params
                 * @param {string} transaction
                 * @param {string} deepDataAndEvents
                 * @param {string} dataAndEvents
                 * @return {?}
                 */
                mountComponent : function(url_params, transaction, deepDataAndEvents, dataAndEvents) {
                    var mock = url_params.mountComponent(transaction, deepDataAndEvents, dataAndEvents);
                    return url_params._currentElement && (null != url_params._currentElement.ref && deepDataAndEvents.getReactMountReady().enqueue(udataCur, url_params)), mock;
                },
                /**
                 * @param {?} child
                 * @return {undefined}
                 */
                unmountComponent : function(child) {
                    assert.detachRefs(child, child._currentElement);
                    child.unmountComponent();
                },
                /**
                 * @param {Object} scope
                 * @param {string} name
                 * @param {string} dataAndEvents
                 * @param {string} node
                 * @return {undefined}
                 */
                receiveComponent : function(scope, name, dataAndEvents, node) {
                    var parent = scope._currentElement;
                    if (name !== parent || node !== scope._context) {
                        var helper = assert.shouldUpdateRefs(parent, name);
                        if (helper) {
                            assert.detachRefs(scope, parent);
                        }
                        scope.receiveComponent(name, dataAndEvents, node);
                        if (helper) {
                            if (scope._currentElement) {
                                if (null != scope._currentElement.ref) {
                                    dataAndEvents.getReactMountReady().enqueue(udataCur, scope);
                                }
                            }
                        }
                    }
                },
                /**
                 * @param {string} deepDataAndEvents
                 * @param {string} dataAndEvents
                 * @return {undefined}
                 */
                performUpdateIfNecessary : function(deepDataAndEvents, dataAndEvents) {
                    deepDataAndEvents.performUpdateIfNecessary(dataAndEvents);
                }
            };
            module.exports = JsDiff;
        }, {
            85 : 85
        }],
        85 : [function($sanitize, module, dataAndEvents) {
            /**
             * @param {?} callback
             * @param {string} value
             * @param {Object} object
             * @return {undefined}
             */
            function freeze(callback, value, object) {
                if ("function" == typeof callback) {
                    callback(value.getPublicInstance());
                } else {
                    jQuery.addComponentAsRefTo(value, callback, object);
                }
            }
            /**
             * @param {?} fn
             * @param {Object} key
             * @param {Object} owner
             * @return {undefined}
             */
            function access(fn, key, owner) {
                if ("function" == typeof fn) {
                    fn(null);
                } else {
                    jQuery.removeComponentAsRefFrom(key, fn, owner);
                }
            }
            var jQuery = $sanitize(77);
            var JsDiff = {};
            /**
             * @param {string} ctor
             * @param {Object} item
             * @return {undefined}
             */
            JsDiff.attachRefs = function(ctor, item) {
                if (null !== item && item !== false) {
                    var restoreScript = item.ref;
                    if (null != restoreScript) {
                        freeze(restoreScript, ctor, item._owner);
                    }
                }
            };
            /**
             * @param {Object} value
             * @param {Object} props
             * @return {?}
             */
            JsDiff.shouldUpdateRefs = function(value, props) {
                /** @type {boolean} */
                var doubleQuotedValue = null === value || value === false;
                /** @type {boolean} */
                var singleQoutedValue = null === props || props === false;
                return doubleQuotedValue || (singleQoutedValue || (props._owner !== value._owner || props.ref !== value.ref));
            };
            /**
             * @param {Object} name
             * @param {Object} value
             * @return {undefined}
             */
            JsDiff.detachRefs = function(name, value) {
                if (null !== value && value !== false) {
                    var then = value.ref;
                    if (null != then) {
                        access(then, name, value._owner);
                    }
                }
            };
            module.exports = JsDiff;
        }, {
            77 : 77
        }],
        86 : [function(dataAndEvents, module, deepDataAndEvents) {
            var injection = {
                /**
                 * @param {?} prototype
                 * @return {undefined}
                 */
                injectCreateReactRootIndex : function(prototype) {
                    Type.createReactRootIndex = prototype;
                }
            };
            var Type = {
                createReactRootIndex : null,
                injection : injection
            };
            module.exports = Type;
        }, {}],
        87 : [function(dataAndEvents, module, deepDataAndEvents) {
            var JsDiff = {
                isBatchingUpdates : false,
                /**
                 * @param {Function} callback
                 * @return {undefined}
                 */
                batchedUpdates : function(callback) {
                }
            };
            module.exports = JsDiff;
        }, {}],
        88 : [function($, module, deepDataAndEvents) {
            /**
             * @param {Object} obj
             * @return {?}
             */
            function release(obj) {
                if (dialog.isValidElement(obj)) {
                    void 0;
                } else {
                    push(false, "renderToString(): You must pass a valid ReactElement.");
                }
                var transaction;
                try {
                    emptyJ.injection.injectBatchingStrategy(relatedTarget);
                    var data = $spy.createReactRootID();
                    return transaction = me.getPooled(false), transaction.perform(function() {
                        var actual = fn(obj, null);
                        var markup = actual.mountComponent(data, transaction, dataAndEvents);
                        return container.addChecksumToMarkup(markup);
                    }, null);
                } finally {
                    me.release(transaction);
                    emptyJ.injection.injectBatchingStrategy(optgroup);
                }
            }
            /**
             * @param {Object} res
             * @return {?}
             */
            function leave(res) {
                if (dialog.isValidElement(res)) {
                    void 0;
                } else {
                    push(false, "renderToStaticMarkup(): You must pass a valid ReactElement.");
                }
                var transaction;
                try {
                    emptyJ.injection.injectBatchingStrategy(relatedTarget);
                    var data = $spy.createReactRootID();
                    return transaction = me.getPooled(true), transaction.perform(function() {
                        var r = fn(res, null);
                        return r.mountComponent(data, transaction, dataAndEvents);
                    }, null);
                } finally {
                    me.release(transaction);
                    emptyJ.injection.injectBatchingStrategy(optgroup);
                }
            }
            var optgroup = $(53);
            var dialog = $(57);
            var $spy = $(67);
            var container = $(71);
            var relatedTarget = $(87);
            var me = $(89);
            var emptyJ = $(96);
            var dataAndEvents = $(154);
            var fn = $(132);
            var push = $(161);
            module.exports = {
                /** @type {function (Object): ?} */
                renderToString : release,
                /** @type {function (Object): ?} */
                renderToStaticMarkup : leave
            };
        }, {
            132 : 132,
            154 : 154,
            161 : 161,
            53 : 53,
            57 : 57,
            67 : 67,
            71 : 71,
            87 : 87,
            89 : 89,
            96 : 96
        }],
        89 : [function(require, module, dataAndEvents) {
            /**
             * @param {string} name
             * @return {undefined}
             */
            function Class(name) {
                this.reinitializeTransaction();
                /** @type {string} */
                this.renderToStaticMarkup = name;
                this.reactMountReady = utils.getPooled(null);
                /** @type {boolean} */
                this.useCreateElement = false;
            }
            var util = require(25);
            var utils = require(6);
            var nodes = require(113);
            var Emitter = require(24);
            var Block = require(153);
            var methods = {
                /**
                 * @return {undefined}
                 */
                initialize : function() {
                    this.reactMountReady.reset();
                },
                close : Block
            };
            /** @type {Array} */
            var getTransactionWrappers = [methods];
            var r20 = {
                /**
                 * @return {?}
                 */
                getTransactionWrappers : function() {
                    return getTransactionWrappers;
                },
                /**
                 * @return {?}
                 */
                getReactMountReady : function() {
                    return this.reactMountReady;
                },
                /**
                 * @return {undefined}
                 */
                destructor : function() {
                    utils.release(this.reactMountReady);
                    /** @type {null} */
                    this.reactMountReady = null;
                }
            };
            Emitter(Class.prototype, nodes.Mixin, r20);
            util.addPoolingTo(Class);
            /** @type {function (string): undefined} */
            module.exports = Class;
        }, {
            113 : 113,
            153 : 153,
            24 : 24,
            25 : 25,
            6 : 6
        }],
        90 : [function(dataAndEvents, mod, deepDataAndEvents) {
            /**
             * @param {Object} el
             * @param {string} name
             * @return {?}
             */
            function func(el, name) {
                var attributes = {};
                return function(value) {
                    attributes[name] = value;
                    el.setState(attributes);
                };
            }
            var exports = {
                /**
                 * @param {Object} obj
                 * @param {Function} funcReturningState
                 * @return {?}
                 */
                createStateSetter : function(obj, funcReturningState) {
                    return function(mapper, b, capture, d, e, f) {
                        var attributes = funcReturningState.call(obj, mapper, b, capture, d, e, f);
                        if (attributes) {
                            obj.setState(attributes);
                        }
                    };
                },
                /**
                 * @param {Object} component
                 * @param {string} key
                 * @return {?}
                 */
                createStateKeySetter : function(component, key) {
                    var cache = component.__keySetters || (component.__keySetters = {});
                    return cache[key] || (cache[key] = func(component, key));
                }
            };
            exports.Mixin = {
                /**
                 * @param {Function} funcReturningState
                 * @return {?}
                 */
                createStateSetter : function(funcReturningState) {
                    return exports.createStateSetter(this, funcReturningState);
                },
                /**
                 * @param {string} key
                 * @return {?}
                 */
                createStateKeySetter : function(key) {
                    return exports.createStateKeySetter(this, key);
                }
            };
            mod.exports = exports;
        }, {}],
        91 : [function(require, module, dataAndEvents) {
            /**
             * @param {?} tokenizer
             * @return {undefined}
             */
            function Context(tokenizer) {
            }
            /**
             * @param {?} inst
             * @param {Function} callback
             * @return {?}
             */
            function check(inst, callback) {
                if (!inst || !inst.getPublicInstance) {
                    return[];
                }
                var which = inst.getPublicInstance();
                /** @type {Array} */
                var args = callback(which) ? [which] : [];
                var v = inst._currentElement;
                if (_.isDOMComponent(which)) {
                    var key;
                    var renderedChildren = inst._renderedChildren;
                    for (key in renderedChildren) {
                        if (renderedChildren.hasOwnProperty(key)) {
                            /** @type {Array} */
                            args = args.concat(check(renderedChildren[key], callback));
                        }
                    }
                } else {
                    if (array.isValidElement(v)) {
                        if ("function" == typeof v.type) {
                            /** @type {Array} */
                            args = args.concat(check(inst._renderedComponent, callback));
                        }
                    }
                }
                return args;
            }
            /**
             * @param {?} child
             * @param {Object} elem
             * @param {string} dataAndEvents
             * @return {undefined}
             */
            function restoreScript(child, elem, dataAndEvents) {
                var transaction = util.ReactReconcileTransaction.getPooled(false);
                child._render(elem, transaction, dataAndEvents);
                util.ReactReconcileTransaction.release(transaction);
            }
            /**
             * @param {?} key
             * @return {?}
             */
            function add(key) {
                return function(dom, partials) {
                    var el;
                    if (_.isDOMComponent(dom)) {
                        el = render(dom);
                    } else {
                        if (dom.tagName) {
                            /** @type {Element} */
                            el = dom;
                        }
                    }
                    var type = EventEmitter.eventNameDispatchConfigs[key];
                    var opts = new Context;
                    opts.target = el;
                    var event = new CustomEvent(type, b.getID(el), opts, el);
                    fn(event, partials);
                    if (type.phasedRegistrationNames) {
                        assert.accumulateTwoPhaseDispatches(event);
                    } else {
                        assert.accumulateDirectDispatches(event);
                    }
                    util.batchedUpdates(function() {
                        suite.enqueueEvents(event);
                        suite.processEventQueue(true);
                    });
                };
            }
            /**
             * @return {undefined}
             */
            function buildParams() {
                _.Simulate = {};
                var i;
                for (i in EventEmitter.eventNameDispatchConfigs) {
                    _.Simulate[i] = add(i);
                }
            }
            /**
             * @param {string} s
             * @return {?}
             */
            function transform(s) {
                return function(child, partials) {
                    var context = new Context(s);
                    fn(context, partials);
                    if (_.isDOMComponent(child)) {
                        _.simulateNativeEventOnDOMComponent(s, child, context);
                    } else {
                        if (child.tagName) {
                            _.simulateNativeEventOnNode(s, child, context);
                        }
                    }
                };
            }
            var item = require(15);
            var suite = require(16);
            var assert = require(19);
            var dom = require(26);
            var res = require(40);
            var array = require(57);
            var EventEmitter = require(28);
            var nodes = require(38);
            var Block = require(67);
            var list = require(68);
            var b = require(72);
            var util = require(96);
            var CustomEvent = require(105);
            var fn = require(24);
            var rest = require(154);
            var render = require(122);
            var callback = require(161);
            var pkg = item.topLevelTypes;
            var _ = {
                /**
                 * @param {undefined} key
                 * @return {?}
                 */
                renderIntoDocument : function(key) {
                    /** @type {Element} */
                    var obj = document.createElement("div");
                    return res.render(key, obj);
                },
                /**
                 * @param {Object} obj
                 * @return {?}
                 */
                isElement : function(obj) {
                    return array.isValidElement(obj);
                },
                /**
                 * @param {Object} elem
                 * @param {?} name
                 * @return {?}
                 */
                isElementOfType : function(elem, name) {
                    return array.isValidElement(elem) && elem.type === name;
                },
                /**
                 * @param {Node} object
                 * @return {?}
                 */
                isDOMComponent : function(object) {
                    return!(!object || (1 !== object.nodeType || !object.tagName));
                },
                /**
                 * @param {Object} v
                 * @return {?}
                 */
                isDOMComponentElement : function(v) {
                    return!!(v && (array.isValidElement(v) && v.tagName));
                },
                /**
                 * @param {Object} result
                 * @return {?}
                 */
                isCompositeComponent : function(result) {
                    return!_.isDOMComponent(result) && (null != result && ("function" == typeof result.render && "function" == typeof result.setState));
                },
                /**
                 * @param {string} arg
                 * @param {string} attr
                 * @return {?}
                 */
                isCompositeComponentWithType : function(arg, attr) {
                    if (!_.isCompositeComponent(arg)) {
                        return false;
                    }
                    var type = list.get(arg);
                    var originalType = type._currentElement.type;
                    return originalType === attr;
                },
                /**
                 * @param {Object} obj
                 * @return {?}
                 */
                isCompositeComponentElement : function(obj) {
                    if (!array.isValidElement(obj)) {
                        return false;
                    }
                    var that = obj.type.prototype;
                    return "function" == typeof that.render && "function" == typeof that.setState;
                },
                /**
                 * @param {string} arg
                 * @param {?} actual
                 * @return {?}
                 */
                isCompositeComponentElementWithType : function(arg, actual) {
                    var type = list.get(arg);
                    var expected = type._currentElement.type;
                    return!(!_.isCompositeComponentElement(arg) || expected !== actual);
                },
                /**
                 * @param {string} arg
                 * @return {?}
                 */
                getRenderedChildOfCompositeComponent : function(arg) {
                    if (!_.isCompositeComponent(arg)) {
                        return null;
                    }
                    var keyName = list.get(arg);
                    return keyName._renderedComponent.getPublicInstance();
                },
                /**
                 * @param {string} fn
                 * @param {Function} done
                 * @return {?}
                 */
                findAllInRenderedTree : function(fn, done) {
                    return fn ? (_.isCompositeComponent(fn) ? void 0 : callback(false, "findAllInRenderedTree(...): instance must be a composite component"), check(list.get(fn), done)) : [];
                },
                /**
                 * @param {string} root
                 * @param {string} names
                 * @return {?}
                 */
                scryRenderedDOMComponentsWithClass : function(root, names) {
                    return Array.isArray(names) || (names = names.split(/\s+/)), _.findAllInRenderedTree(root, function(elem) {
                        if (_.isDOMComponent(elem)) {
                            var string = elem.className;
                            if ("string" != typeof string) {
                                string = elem.getAttribute("class") || "";
                            }
                            var list = string.split(/\s+/);
                            return names.every(function(optgroup) {
                                return list.indexOf(optgroup) !== -1;
                            });
                        }
                        return false;
                    });
                },
                /**
                 * @param {string} root
                 * @param {string} className
                 * @return {?}
                 */
                findRenderedDOMComponentWithClass : function(root, className) {
                    var all = _.scryRenderedDOMComponentsWithClass(root, className);
                    if (1 !== all.length) {
                        throw new Error("Did not find exactly one match (found: " + all.length + ") for class:" + className);
                    }
                    return all[0];
                },
                /**
                 * @param {string} root
                 * @param {string} tagName
                 * @return {?}
                 */
                scryRenderedDOMComponentsWithTag : function(root, tagName) {
                    return _.findAllInRenderedTree(root, function(child) {
                        return _.isDOMComponent(child) && child.tagName.toUpperCase() === tagName.toUpperCase();
                    });
                },
                /**
                 * @param {string} root
                 * @param {string} tagName
                 * @return {?}
                 */
                findRenderedDOMComponentWithTag : function(root, tagName) {
                    var all = _.scryRenderedDOMComponentsWithTag(root, tagName);
                    if (1 !== all.length) {
                        throw new Error("Did not find exactly one match for tag:" + tagName);
                    }
                    return all[0];
                },
                /**
                 * @param {string} root
                 * @param {string} protoProps
                 * @return {?}
                 */
                scryRenderedComponentsWithType : function(root, protoProps) {
                    return _.findAllInRenderedTree(root, function(until) {
                        return _.isCompositeComponentWithType(until, protoProps);
                    });
                },
                /**
                 * @param {string} root
                 * @param {string} protoProps
                 * @return {?}
                 */
                findRenderedComponentWithType : function(root, protoProps) {
                    var result = _.scryRenderedComponentsWithType(root, protoProps);
                    if (1 !== result.length) {
                        throw new Error("Did not find exactly one match for componentType:" + protoProps + " (found " + result.length + ")");
                    }
                    return result[0];
                },
                /**
                 * @param {Function} self
                 * @param {string} nodeName
                 * @return {?}
                 */
                mockComponent : function(self, nodeName) {
                    return nodeName = nodeName || (self.mockTagName || "div"), self.prototype.render.mockImplementation(function() {
                        return dom.createElement(nodeName, null, this.props.children);
                    }), this;
                },
                /**
                 * @param {string} event
                 * @param {Object} element
                 * @param {(Object|string)} e
                 * @return {undefined}
                 */
                simulateNativeEventOnNode : function(event, element, e) {
                    /** @type {Object} */
                    e.target = element;
                    EventEmitter.ReactEventListener.dispatchEvent(event, e);
                },
                /**
                 * @param {string} obj
                 * @param {Element} data
                 * @param {(Object|string)} i
                 * @return {undefined}
                 */
                simulateNativeEventOnDOMComponent : function(obj, data, i) {
                    _.simulateNativeEventOnNode(obj, render(data), i);
                },
                /**
                 * @param {number} x
                 * @param {number} y
                 * @return {?}
                 */
                nativeTouchData : function(x, y) {
                    return{
                        touches : [{
                            pageX : x,
                            pageY : y
                        }]
                    };
                },
                /**
                 * @return {?}
                 */
                createRenderer : function() {
                    return new DisplayObject;
                },
                Simulate : null,
                SimulateNative : {}
            };
            /**
             * @return {undefined}
             */
            var DisplayObject = function() {
                /** @type {null} */
                this._instance = null;
            };
            /**
             * @return {?}
             */
            DisplayObject.prototype.getRenderOutput = function() {
                return this._instance && (this._instance._renderedComponent && this._instance._renderedComponent._renderedOutput) || null;
            };
            /**
             * @param {?} o
             * @return {undefined}
             */
            var Type = function(o) {
                this._renderedOutput = o;
                this._currentElement = o;
            };
            Type.prototype = {
                /**
                 * @return {undefined}
                 */
                mountComponent : function() {
                },
                /**
                 * @param {?} label
                 * @return {undefined}
                 */
                receiveComponent : function(label) {
                    this._renderedOutput = label;
                    this._currentElement = label;
                },
                /**
                 * @return {undefined}
                 */
                unmountComponent : function() {
                },
                /**
                 * @return {?}
                 */
                getPublicInstance : function() {
                    return null;
                }
            };
            /**
             * @return {undefined}
             */
            var self = function() {
            };
            fn(self.prototype, nodes.Mixin, {
                /**
                 * @param {string} name
                 * @return {?}
                 */
                _instantiateReactComponent : function(name) {
                    return new Type(name);
                },
                /**
                 * @return {undefined}
                 */
                _replaceNodeWithMarkupByID : function() {
                },
                _renderValidatedComponent : nodes.Mixin._renderValidatedComponentWithoutOwnerOrContext
            });
            /**
             * @param {Object} fn
             * @param {Object} expr
             * @return {undefined}
             */
            DisplayObject.prototype.render = function(fn, expr) {
                if (array.isValidElement(fn)) {
                    void 0;
                } else {
                    callback(false, "ReactShallowRenderer render(): Invalid component element.%s", "function" == typeof fn ? " Instead of passing a component class, make sure to instantiate it by passing it to React.createElement." : "");
                }
                if ("string" == typeof fn.type) {
                    callback(false, "ReactShallowRenderer render(): Shallow rendering works only with custom components, not primitives (%s). Instead of calling `.render(el)` and inspecting the rendered output, look at `el.props` directly instead.", fn.type);
                } else {
                    void 0;
                }
                if (!expr) {
                    expr = rest;
                }
                util.batchedUpdates(restoreScript, this, fn, expr);
            };
            /**
             * @return {undefined}
             */
            DisplayObject.prototype.unmount = function() {
                if (this._instance) {
                    this._instance.unmountComponent();
                }
            };
            /**
             * @param {Object} o
             * @param {string} transaction
             * @param {string} dataAndEvents
             * @return {undefined}
             */
            DisplayObject.prototype._render = function(o, transaction, dataAndEvents) {
                if (this._instance) {
                    this._instance.receiveComponent(o, transaction, dataAndEvents);
                } else {
                    var data = Block.createReactRootID();
                    var instance = new self(o.type);
                    instance.construct(o);
                    instance.mountComponent(data, transaction, dataAndEvents);
                    this._instance = instance;
                }
            };
            /** @type {function (): undefined} */
            var matcherFunction = suite.injection.injectEventPluginOrder;
            /**
             * @return {undefined}
             */
            suite.injection.injectEventPluginOrder = function() {
                matcherFunction.apply(this, arguments);
                buildParams();
            };
            /** @type {function (): undefined} */
            var __method = suite.injection.injectEventPluginsByName;
            /**
             * @return {undefined}
             */
            suite.injection.injectEventPluginsByName = function() {
                __method.apply(this, arguments);
                buildParams();
            };
            buildParams();
            Object.keys(pkg).forEach(function(text) {
                /** @type {string} */
                var name = 0 === text.indexOf("top") ? text.charAt(3).toLowerCase() + text.substr(4) : text;
                _.SimulateNative[name] = transform(text);
            });
            module.exports = _;
        }, {
            105 : 105,
            122 : 122,
            15 : 15,
            154 : 154,
            16 : 16,
            161 : 161,
            19 : 19,
            24 : 24,
            26 : 26,
            28 : 28,
            38 : 38,
            40 : 40,
            57 : 57,
            67 : 67,
            68 : 68,
            72 : 72,
            96 : 96
        }],
        92 : [function($sanitize, module, dataAndEvents) {
            var _close = $sanitize(123);
            var JsDiff = {
                /**
                 * @param {?} id
                 * @return {?}
                 */
                getChildMapping : function(id) {
                    return id ? _close(id) : id;
                },
                /**
                 * @param {Object} items
                 * @param {Object} set
                 * @return {?}
                 */
                mergeChildMappings : function(items, set) {
                    /**
                     * @param {string} index
                     * @return {?}
                     */
                    function merge(index) {
                        return set.hasOwnProperty(index) ? set[index] : items[index];
                    }
                    items = items || {};
                    set = set || {};
                    var keys = {};
                    /** @type {Array} */
                    var key = [];
                    var value;
                    for (value in items) {
                        if (set.hasOwnProperty(value)) {
                            if (key.length) {
                                /** @type {Array} */
                                keys[value] = key;
                                /** @type {Array} */
                                key = [];
                            }
                        } else {
                            key.push(value);
                        }
                    }
                    var type;
                    var obj = {};
                    var i;
                    for (i in set) {
                        if (keys.hasOwnProperty(i)) {
                            /** @type {number} */
                            type = 0;
                            for (;type < keys[i].length;type++) {
                                var node = keys[i][type];
                                obj[keys[i][type]] = merge(node);
                            }
                        }
                        obj[i] = merge(i);
                    }
                    /** @type {number} */
                    type = 0;
                    for (;type < key.length;type++) {
                        obj[key[type]] = merge(key[type]);
                    }
                    return obj;
                }
            };
            module.exports = JsDiff;
        }, {
            123 : 123
        }],
        93 : [function(require, module, dataAndEvents) {
            /**
             * @return {undefined}
             */
            function callback() {
                /** @type {Element} */
                var left = document.createElement("div");
                /** @type {(CSSStyleDeclaration|null)} */
                var a = left.style;
                if (!("AnimationEvent" in window)) {
                    delete map.animationend.animation;
                }
                if (!("TransitionEvent" in window)) {
                    delete map.transitionend.transition;
                }
                var letter;
                for (letter in map) {
                    var elems = map[letter];
                    var i;
                    for (i in elems) {
                        if (i in a) {
                            ret.push(elems[i]);
                            break;
                        }
                    }
                }
            }
            /**
             * @param {?} el
             * @param {string} type
             * @param {string} callback
             * @return {undefined}
             */
            function addEventListener(el, type, callback) {
                el.addEventListener(type, callback, false);
            }
            /**
             * @param {?} result
             * @param {string} name
             * @param {string} obj
             * @return {undefined}
             */
            function close(result, name, obj) {
                result.removeEventListener(name, obj, false);
            }
            var Block = require(147);
            var map = {
                transitionend : {
                    transition : "transitionend",
                    WebkitTransition : "webkitTransitionEnd",
                    MozTransition : "mozTransitionEnd",
                    OTransition : "oTransitionEnd",
                    msTransition : "MSTransitionEnd"
                },
                animationend : {
                    animation : "animationend",
                    WebkitAnimation : "webkitAnimationEnd",
                    MozAnimation : "mozAnimationEnd",
                    OAnimation : "oAnimationEnd",
                    msAnimation : "MSAnimationEnd"
                }
            };
            /** @type {Array} */
            var ret = [];
            if (Block.canUseDOM) {
                callback();
            }
            var JsDiff = {
                /**
                 * @param {?} node
                 * @param {Function} eventListener
                 * @return {?}
                 */
                addEndEventListener : function(node, eventListener) {
                    return 0 === ret.length ? void window.setTimeout(eventListener, 0) : void ret.forEach(function(type) {
                        addEventListener(node, type, eventListener);
                    });
                },
                /**
                 * @param {?} node
                 * @param {Function} walkers
                 * @return {undefined}
                 */
                removeEndEventListener : function(node, walkers) {
                    if (0 !== ret.length) {
                        ret.forEach(function(param) {
                            close(node, param, walkers);
                        });
                    }
                }
            };
            module.exports = JsDiff;
        }, {
            147 : 147
        }],
        94 : [function(require, module, dataAndEvents) {
            var self = require(26);
            var $ = require(92);
            var getActual = require(24);
            var Block = require(153);
            var JsDiff = self.createClass({
                displayName : "ReactTransitionGroup",
                propTypes : {
                    component : self.PropTypes.any,
                    childFactory : self.PropTypes.func
                },
                /**
                 * @return {?}
                 */
                getDefaultProps : function() {
                    return{
                        component : "span",
                        childFactory : Block.thatReturnsArgument
                    };
                },
                /**
                 * @return {?}
                 */
                getInitialState : function() {
                    return{
                        children : $.getChildMapping(this.props.children)
                    };
                },
                /**
                 * @return {undefined}
                 */
                componentWillMount : function() {
                    this.currentlyTransitioningKeys = {};
                    /** @type {Array} */
                    this.keysToEnter = [];
                    /** @type {Array} */
                    this.keysToLeave = [];
                },
                /**
                 * @return {undefined}
                 */
                componentDidMount : function() {
                    var a = this.state.children;
                    var prefix;
                    for (prefix in a) {
                        if (a[prefix]) {
                            this.performAppear(prefix);
                        }
                    }
                },
                /**
                 * @param {Object} target
                 * @return {undefined}
                 */
                componentWillReceiveProps : function(target) {
                    var keywords = $.getChildMapping(target.children);
                    var items = this.state.children;
                    this.setState({
                        children : $.mergeChildMappings(items, keywords)
                    });
                    var value;
                    for (value in keywords) {
                        var item = items && items.hasOwnProperty(value);
                        if (!!keywords[value]) {
                            if (!item) {
                                if (!this.currentlyTransitioningKeys[value]) {
                                    this.keysToEnter.push(value);
                                }
                            }
                        }
                    }
                    for (value in items) {
                        var g = keywords && keywords.hasOwnProperty(value);
                        if (!!items[value]) {
                            if (!g) {
                                if (!this.currentlyTransitioningKeys[value]) {
                                    this.keysToLeave.push(value);
                                }
                            }
                        }
                    }
                },
                /**
                 * @return {undefined}
                 */
                componentDidUpdate : function() {
                    var asserterNames = this.keysToEnter;
                    /** @type {Array} */
                    this.keysToEnter = [];
                    asserterNames.forEach(this.performEnter);
                    var failures = this.keysToLeave;
                    /** @type {Array} */
                    this.keysToLeave = [];
                    failures.forEach(this.performLeave);
                },
                /**
                 * @param {Object} name
                 * @return {undefined}
                 */
                performAppear : function(name) {
                    /** @type {boolean} */
                    this.currentlyTransitioningKeys[name] = true;
                    var ref = this.refs[name];
                    if (ref.componentWillAppear) {
                        ref.componentWillAppear(this._handleDoneAppearing.bind(this, name));
                    } else {
                        this._handleDoneAppearing(name);
                    }
                },
                /**
                 * @param {Object} name
                 * @return {undefined}
                 */
                _handleDoneAppearing : function(name) {
                    var ref = this.refs[name];
                    if (ref.componentDidAppear) {
                        ref.componentDidAppear();
                    }
                    delete this.currentlyTransitioningKeys[name];
                    var order = $.getChildMapping(this.props.children);
                    if (!(order && order.hasOwnProperty(name))) {
                        this.performLeave(name);
                    }
                },
                /**
                 * @param {Object} name
                 * @return {undefined}
                 */
                performEnter : function(name) {
                    /** @type {boolean} */
                    this.currentlyTransitioningKeys[name] = true;
                    var ref = this.refs[name];
                    if (ref.componentWillEnter) {
                        ref.componentWillEnter(this._handleDoneEntering.bind(this, name));
                    } else {
                        this._handleDoneEntering(name);
                    }
                },
                /**
                 * @param {Object} name
                 * @return {undefined}
                 */
                _handleDoneEntering : function(name) {
                    var ref = this.refs[name];
                    if (ref.componentDidEnter) {
                        ref.componentDidEnter();
                    }
                    delete this.currentlyTransitioningKeys[name];
                    var order = $.getChildMapping(this.props.children);
                    if (!(order && order.hasOwnProperty(name))) {
                        this.performLeave(name);
                    }
                },
                /**
                 * @param {Object} name
                 * @return {undefined}
                 */
                performLeave : function(name) {
                    /** @type {boolean} */
                    this.currentlyTransitioningKeys[name] = true;
                    var ref = this.refs[name];
                    if (ref.componentWillLeave) {
                        ref.componentWillLeave(this._handleDoneLeaving.bind(this, name));
                    } else {
                        this._handleDoneLeaving(name);
                    }
                },
                /**
                 * @param {Object} name
                 * @return {undefined}
                 */
                _handleDoneLeaving : function(name) {
                    var ref = this.refs[name];
                    if (ref.componentDidLeave) {
                        ref.componentDidLeave();
                    }
                    delete this.currentlyTransitioningKeys[name];
                    var order = $.getChildMapping(this.props.children);
                    if (order && order.hasOwnProperty(name)) {
                        this.performEnter(name);
                    } else {
                        this.setState(function(closest) {
                            var actual = getActual({}, closest.children);
                            return delete actual[name], {
                                children : actual
                            };
                        });
                    }
                },
                /**
                 * @return {?}
                 */
                render : function() {
                    /** @type {Array} */
                    var children = [];
                    var i;
                    for (i in this.state.children) {
                        var arg = this.state.children[i];
                        if (arg) {
                            children.push(self.cloneElement(this.props.childFactory(arg), {
                                ref : i,
                                key : i
                            }));
                        }
                    }
                    return self.createElement(this.props.component, this.props, children);
                }
            });
            module.exports = JsDiff;
        }, {
            153 : 153,
            24 : 24,
            26 : 26,
            92 : 92
        }],
        95 : [function($, module, dataAndEvents) {
            /**
             * @param {?} regex
             * @return {undefined}
             */
            function fn(regex) {
                template.enqueueUpdate(regex);
            }
            /**
             * @param {string} arg
             * @param {string} success
             * @return {?}
             */
            function require(arg, success) {
                var keyName = list.get(arg);
                return keyName ? (callback(null == self.current, "%s(...): Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.", success), keyName) : (callback(!success, "%s(...): Can only update a mounted or mounting component. This usually means you called %s() on an unmounted component. This is a no-op. Please check the code for the %s component.", success, success, arg.constructor.displayName), null);
            }
            var self = $(39);
            var results = $(57);
            var list = $(68);
            var template = $(96);
            var div = $(24);
            var hidden = $(161);
            var callback = $(173);
            var JsDiff = {
                /**
                 * @param {string} arg
                 * @return {?}
                 */
                isMounted : function(arg) {
                    var current = self.current;
                    if (null !== current) {
                        callback(current._warnedAboutRefsInRender, "%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", current.getName() || "A component");
                        /** @type {boolean} */
                        current._warnedAboutRefsInRender = true;
                    }
                    var keyName = list.get(arg);
                    return!!keyName && !!keyName._renderedComponent;
                },
                /**
                 * @param {string} event
                 * @param {Function} recurring
                 * @return {?}
                 */
                enqueueCallback : function(event, recurring) {
                    if ("function" != typeof recurring) {
                        hidden(false, "enqueueCallback(...): You called `setProps`, `replaceProps`, `setState`, `replaceState`, or `forceUpdate` with a callback that isn't callable.");
                    } else {
                        void 0;
                    }
                    var item = require(event);
                    return item ? (item._pendingCallbacks ? item._pendingCallbacks.push(recurring) : item._pendingCallbacks = [recurring], void fn(item)) : null;
                },
                /**
                 * @param {?} el
                 * @param {string} value
                 * @return {undefined}
                 */
                enqueueCallbackInternal : function(el, value) {
                    if ("function" != typeof value) {
                        hidden(false, "enqueueCallback(...): You called `setProps`, `replaceProps`, `setState`, `replaceState`, or `forceUpdate` with a callback that isn't callable.");
                    } else {
                        void 0;
                    }
                    if (el._pendingCallbacks) {
                        el._pendingCallbacks.push(value);
                    } else {
                        /** @type {Array} */
                        el._pendingCallbacks = [value];
                    }
                    fn(el);
                },
                /**
                 * @param {string} elements
                 * @return {undefined}
                 */
                enqueueForceUpdate : function(elements) {
                    var r20 = require(elements, "forceUpdate");
                    if (r20) {
                        /** @type {boolean} */
                        r20._pendingForceUpdate = true;
                        fn(r20);
                    }
                },
                /**
                 * @param {string} elements
                 * @param {?} opt_attributes
                 * @return {undefined}
                 */
                enqueueReplaceState : function(elements, opt_attributes) {
                    var r20 = require(elements, "replaceState");
                    if (r20) {
                        /** @type {Array} */
                        r20._pendingStateQueue = [opt_attributes];
                        /** @type {boolean} */
                        r20._pendingReplaceState = true;
                        fn(r20);
                    }
                },
                /**
                 * @param {string} elements
                 * @param {string} value
                 * @return {undefined}
                 */
                enqueueSetState : function(elements, value) {
                    var r20 = require(elements, "setState");
                    if (r20) {
                        var bucket = r20._pendingStateQueue || (r20._pendingStateQueue = []);
                        bucket.push(value);
                        fn(r20);
                    }
                },
                /**
                 * @param {string} elements
                 * @param {?} deepDataAndEvents
                 * @return {undefined}
                 */
                enqueueSetProps : function(elements, deepDataAndEvents) {
                    var failuresLink = require(elements, "setProps");
                    if (failuresLink) {
                        JsDiff.enqueueSetPropsInternal(failuresLink, deepDataAndEvents);
                    }
                },
                /**
                 * @param {?} el
                 * @param {?} deepDataAndEvents
                 * @return {undefined}
                 */
                enqueueSetPropsInternal : function(el, deepDataAndEvents) {
                    var t = el._topLevelWrapper;
                    if (t) {
                        void 0;
                    } else {
                        hidden(false, "setProps(...): You called `setProps` on a component with a parent. This is an anti-pattern since props will get reactively updated when rendered. Instead, change the owner's `render` method to pass the correct value as props to the component where it is created.");
                    }
                    var item = t._pendingElement || t._currentElement;
                    var group = item.props;
                    var value = div({}, group.props, deepDataAndEvents);
                    t._pendingElement = results.cloneAndReplaceProps(item, results.cloneAndReplaceProps(group, value));
                    fn(t);
                },
                /**
                 * @param {string} elements
                 * @param {?} deepDataAndEvents
                 * @return {undefined}
                 */
                enqueueReplaceProps : function(elements, deepDataAndEvents) {
                    var failuresLink = require(elements, "replaceProps");
                    if (failuresLink) {
                        JsDiff.enqueueReplacePropsInternal(failuresLink, deepDataAndEvents);
                    }
                },
                /**
                 * @param {?} el
                 * @param {?} value
                 * @return {undefined}
                 */
                enqueueReplacePropsInternal : function(el, value) {
                    var t = el._topLevelWrapper;
                    if (t) {
                        void 0;
                    } else {
                        hidden(false, "replaceProps(...): You called `replaceProps` on a component with a parent. This is an anti-pattern since props will get reactively updated when rendered. Instead, change the owner's `render` method to pass the correct value as props to the component where it is created.");
                    }
                    var item = t._pendingElement || t._currentElement;
                    var property = item.props;
                    t._pendingElement = results.cloneAndReplaceProps(item, results.cloneAndReplaceProps(property, value));
                    fn(t);
                },
                /**
                 * @param {?} el
                 * @param {?} attr
                 * @return {undefined}
                 */
                enqueueElementInternal : function(el, attr) {
                    el._pendingElement = attr;
                    fn(el);
                }
            };
            module.exports = JsDiff;
        }, {
            161 : 161,
            173 : 173,
            24 : 24,
            39 : 39,
            57 : 57,
            68 : 68,
            96 : 96
        }],
        96 : [function(require, module, dataAndEvents) {
            /**
             * @return {undefined}
             */
            function exec() {
                if (node.ReactReconcileTransaction && console) {
                    void 0;
                } else {
                    callback(false, "ReactUpdates: must inject a reconcile transaction class and batching strategy");
                }
            }
            /**
             * @return {undefined}
             */
            function o() {
                this.reinitializeTransaction();
                /** @type {null} */
                this.dirtyComponentsLength = null;
                this.callbackQueue = utils.getPooled();
                this.reconcileTransaction = node.ReactReconcileTransaction.getPooled(false);
            }
            /**
             * @param {Function} callback
             * @param {?} param
             * @param {Object} event
             * @param {Object} body
             * @param {?} shallow
             * @param {Object} state
             * @return {undefined}
             */
            function next(callback, param, event, body, shallow, state) {
                exec();
                console.batchedUpdates(callback, param, event, body, shallow, state);
            }
            /**
             * @param {?} dataAndEvents
             * @param {?} deepDataAndEvents
             * @return {?}
             */
            function clone(dataAndEvents, deepDataAndEvents) {
                return dataAndEvents._mountOrder - deepDataAndEvents._mountOrder;
            }
            /**
             * @param {?} element
             * @return {undefined}
             */
            function url(element) {
                var length = element.dirtyComponentsLength;
                if (length !== buffer.length) {
                    callback(false, "Expected flush transaction's stored dirty-components length (%s) to match dirty-components array length (%s).", length, buffer.length);
                } else {
                    void 0;
                }
                buffer.sort(clone);
                /** @type {number} */
                var i = 0;
                for (;i < length;i++) {
                    var dataAndEvents = buffer[i];
                    var branchDataJSON = dataAndEvents._pendingCallbacks;
                    if (dataAndEvents._pendingCallbacks = null, assert.performUpdateIfNecessary(dataAndEvents, element.reconcileTransaction), branchDataJSON) {
                        /** @type {number} */
                        var conditionIndex = 0;
                        for (;conditionIndex < branchDataJSON.length;conditionIndex++) {
                            element.callbackQueue.enqueue(branchDataJSON[conditionIndex], dataAndEvents.getPublicInstance());
                        }
                    }
                }
            }
            /**
             * @param {?} value
             * @return {?}
             */
            function restoreScript(value) {
                return exec(), console.isBatchingUpdates ? void buffer.push(value) : void console.batchedUpdates(restoreScript, value);
            }
            /**
             * @param {Function} e
             * @param {string} fn
             * @return {undefined}
             */
            function run(e, fn) {
                if (console.isBatchingUpdates) {
                    void 0;
                } else {
                    callback(false, "ReactUpdates.asap: Can't enqueue an asap callback in a context whereupdates are not being batched.");
                }
                me.enqueue(e, fn);
                /** @type {boolean} */
                naiveLength = true;
            }
            var utils = require(6);
            var exp = require(25);
            var Block = require(78);
            var assert = require(84);
            var nodes = require(113);
            var typeOf = require(24);
            var callback = require(161);
            /** @type {Array} */
            var buffer = [];
            var me = utils.getPooled();
            /** @type {boolean} */
            var naiveLength = false;
            /** @type {null} */
            var console = null;
            var methods = {
                /**
                 * @return {undefined}
                 */
                initialize : function() {
                    /** @type {number} */
                    this.dirtyComponentsLength = buffer.length;
                },
                /**
                 * @return {undefined}
                 */
                close : function() {
                    if (this.dirtyComponentsLength !== buffer.length) {
                        buffer.splice(0, this.dirtyComponentsLength);
                        resolve();
                    } else {
                        /** @type {number} */
                        buffer.length = 0;
                    }
                }
            };
            var CSHARP_KEYWORDS = {
                /**
                 * @return {undefined}
                 */
                initialize : function() {
                    this.callbackQueue.reset();
                },
                /**
                 * @return {undefined}
                 */
                close : function() {
                    this.callbackQueue.notifyAll();
                }
            };
            /** @type {Array} */
            var ALL_KEYWORDS = [methods, CSHARP_KEYWORDS];
            typeOf(o.prototype, nodes.Mixin, {
                /**
                 * @return {?}
                 */
                getTransactionWrappers : function() {
                    return ALL_KEYWORDS;
                },
                /**
                 * @return {undefined}
                 */
                destructor : function() {
                    /** @type {null} */
                    this.dirtyComponentsLength = null;
                    utils.release(this.callbackQueue);
                    /** @type {null} */
                    this.callbackQueue = null;
                    node.ReactReconcileTransaction.release(this.reconcileTransaction);
                    /** @type {null} */
                    this.reconcileTransaction = null;
                },
                /**
                 * @param {Function} fn
                 * @param {Array} recurring
                 * @param {?} value
                 * @return {?}
                 */
                perform : function(fn, recurring, value) {
                    return nodes.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, fn, recurring, value);
                }
            });
            exp.addPoolingTo(o);
            /**
             * @return {undefined}
             */
            var resolve = function() {
                for (;buffer.length || naiveLength;) {
                    if (buffer.length) {
                        var transaction = o.getPooled();
                        transaction.perform(url, null, transaction);
                        o.release(transaction);
                    }
                    if (naiveLength) {
                        /** @type {boolean} */
                        naiveLength = false;
                        var udataCur = me;
                        me = utils.getPooled();
                        udataCur.notifyAll();
                        utils.release(udataCur);
                    }
                }
            };
            resolve = Block.measure("ReactUpdates", "flushBatchedUpdates", resolve);
            var injection = {
                /**
                 * @param {Function} value
                 * @return {undefined}
                 */
                injectReconcileTransaction : function(value) {
                    if (value) {
                        void 0;
                    } else {
                        callback(false, "ReactUpdates: must provide a reconcile transaction class");
                    }
                    /** @type {Function} */
                    node.ReactReconcileTransaction = value;
                },
                /**
                 * @param {Function} name
                 * @return {undefined}
                 */
                injectBatchingStrategy : function(name) {
                    if (name) {
                        void 0;
                    } else {
                        callback(false, "ReactUpdates: must provide a batching strategy");
                    }
                    if ("function" != typeof name.batchedUpdates) {
                        callback(false, "ReactUpdates: must provide a batchedUpdates() function");
                    } else {
                        void 0;
                    }
                    if ("boolean" != typeof name.isBatchingUpdates) {
                        callback(false, "ReactUpdates: must provide an isBatchingUpdates boolean attribute");
                    } else {
                        void 0;
                    }
                    /** @type {Function} */
                    console = name;
                }
            };
            var node = {
                ReactReconcileTransaction : null,
                /** @type {function (Function, ?, Object, Object, ?, Object): undefined} */
                batchedUpdates : next,
                /** @type {function (?): ?} */
                enqueueUpdate : restoreScript,
                flushBatchedUpdates : resolve,
                injection : injection,
                /** @type {function (Function, string): undefined} */
                asap : run
            };
            module.exports = node;
        }, {
            113 : 113,
            161 : 161,
            24 : 24,
            25 : 25,
            6 : 6,
            78 : 78,
            84 : 84
        }],
        97 : [function(dataAndEvents, module, deepDataAndEvents) {
            /** @type {string} */
            module.exports = "0.14.7";
        }, {}],
        98 : [function(require, module, dataAndEvents) {
            var Block = require(10);
            var pos = Block.injection.MUST_USE_ATTRIBUTE;
            var prefix = {
                xlink : "http://www.w3.org/1999/xlink",
                xml : "http://www.w3.org/XML/1998/namespace"
            };
            var JsDiff = {
                Properties : {
                    clipPath : pos,
                    cx : pos,
                    cy : pos,
                    d : pos,
                    dx : pos,
                    dy : pos,
                    fill : pos,
                    fillOpacity : pos,
                    fontFamily : pos,
                    fontSize : pos,
                    fx : pos,
                    fy : pos,
                    gradientTransform : pos,
                    gradientUnits : pos,
                    markerEnd : pos,
                    markerMid : pos,
                    markerStart : pos,
                    offset : pos,
                    opacity : pos,
                    patternContentUnits : pos,
                    patternUnits : pos,
                    points : pos,
                    preserveAspectRatio : pos,
                    r : pos,
                    rx : pos,
                    ry : pos,
                    spreadMethod : pos,
                    stopColor : pos,
                    stopOpacity : pos,
                    stroke : pos,
                    strokeDasharray : pos,
                    strokeLinecap : pos,
                    strokeOpacity : pos,
                    strokeWidth : pos,
                    textAnchor : pos,
                    transform : pos,
                    version : pos,
                    viewBox : pos,
                    x1 : pos,
                    x2 : pos,
                    x : pos,
                    xlinkActuate : pos,
                    xlinkArcrole : pos,
                    xlinkHref : pos,
                    xlinkRole : pos,
                    xlinkShow : pos,
                    xlinkTitle : pos,
                    xlinkType : pos,
                    xmlBase : pos,
                    xmlLang : pos,
                    xmlSpace : pos,
                    y1 : pos,
                    y2 : pos,
                    y : pos
                },
                DOMAttributeNamespaces : {
                    xlinkActuate : prefix.xlink,
                    xlinkArcrole : prefix.xlink,
                    xlinkHref : prefix.xlink,
                    xlinkRole : prefix.xlink,
                    xlinkShow : prefix.xlink,
                    xlinkTitle : prefix.xlink,
                    xlinkType : prefix.xlink,
                    xmlBase : prefix.xml,
                    xmlLang : prefix.xml,
                    xmlSpace : prefix.xml
                },
                DOMAttributeNames : {
                    clipPath : "clip-path",
                    fillOpacity : "fill-opacity",
                    fontFamily : "font-family",
                    fontSize : "font-size",
                    gradientTransform : "gradientTransform",
                    gradientUnits : "gradientUnits",
                    markerEnd : "marker-end",
                    markerMid : "marker-mid",
                    markerStart : "marker-start",
                    patternContentUnits : "patternContentUnits",
                    patternUnits : "patternUnits",
                    preserveAspectRatio : "preserveAspectRatio",
                    spreadMethod : "spreadMethod",
                    stopColor : "stop-color",
                    stopOpacity : "stop-opacity",
                    strokeDasharray : "stroke-dasharray",
                    strokeLinecap : "stroke-linecap",
                    strokeOpacity : "stroke-opacity",
                    strokeWidth : "stroke-width",
                    textAnchor : "text-anchor",
                    viewBox : "viewBox",
                    xlinkActuate : "xlink:actuate",
                    xlinkArcrole : "xlink:arcrole",
                    xlinkHref : "xlink:href",
                    xlinkRole : "xlink:role",
                    xlinkShow : "xlink:show",
                    xlinkTitle : "xlink:title",
                    xlinkType : "xlink:type",
                    xmlBase : "xml:base",
                    xmlLang : "xml:lang",
                    xmlSpace : "xml:space"
                }
            };
            module.exports = JsDiff;
        }, {
            10 : 10
        }],
        99 : [function(require, module, dataAndEvents) {
            /**
             * @param {Object} node
             * @return {?}
             */
            function getSelection(node) {
                if ("selectionStart" in node && nodes.hasSelectionCapabilities(node)) {
                    return{
                        start : node.selectionStart,
                        end : node.selectionEnd
                    };
                }
                if (window.getSelection) {
                    /** @type {(Selection|null)} */
                    var selection = window.getSelection();
                    return{
                        anchorNode : selection.anchorNode,
                        anchorOffset : selection.anchorOffset,
                        focusNode : selection.focusNode,
                        focusOffset : selection.focusOffset
                    };
                }
                if (document.selection) {
                    /** @type {(ControlRange|TextRange|null)} */
                    var range = document.selection.createRange();
                    return{
                        parentElement : range.parentElement(),
                        text : range.text,
                        top : range.boundingTop,
                        left : range.boundingLeft
                    };
                }
            }
            /**
             * @param {Event} context
             * @param {?} args
             * @return {?}
             */
            function select(context, args) {
                if (inNext || (null == el || el !== isHTML())) {
                    return null;
                }
                var fragment = getSelection(el);
                if (!node || !dom(node, fragment)) {
                    node = fragment;
                    var event = $.getPooled(options.select, details, context, args);
                    return event.type = "select", event.target = el, assert.accumulateTwoPhaseDispatches(event), event;
                }
                return null;
            }
            var Block = require(15);
            var assert = require(19);
            var helper = require(147);
            var nodes = require(66);
            var $ = require(105);
            var isHTML = require(156);
            var getActual = require(134);
            var inspect = require(166);
            var dom = require(171);
            var topLevelTypes = Block.topLevelTypes;
            var p = helper.canUseDOM && ("documentMode" in document && document.documentMode <= 11);
            var options = {
                select : {
                    phasedRegistrationNames : {
                        bubbled : inspect({
                            onSelect : null
                        }),
                        captured : inspect({
                            onSelectCapture : null
                        })
                    },
                    dependencies : [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
                }
            };
            /** @type {null} */
            var el = null;
            /** @type {null} */
            var details = null;
            /** @type {null} */
            var node = null;
            /** @type {boolean} */
            var inNext = false;
            /** @type {boolean} */
            var v = false;
            var str = inspect({
                onSelect : null
            });
            var JsDiff = {
                eventTypes : options,
                /**
                 * @param {string} topLevelType
                 * @param {Element} obj
                 * @param {Error} topLevelTargetID
                 * @param {Event} nativeEvent
                 * @param {?} args
                 * @return {?}
                 */
                extractEvents : function(topLevelType, obj, topLevelTargetID, nativeEvent, args) {
                    if (!v) {
                        return null;
                    }
                    switch(topLevelType) {
                        case topLevelTypes.topFocus:
                            if (getActual(obj) || "true" === obj.contentEditable) {
                                /** @type {Element} */
                                el = obj;
                                /** @type {Error} */
                                details = topLevelTargetID;
                                /** @type {null} */
                                node = null;
                            }
                            break;
                        case topLevelTypes.topBlur:
                            /** @type {null} */
                            el = null;
                            /** @type {null} */
                            details = null;
                            /** @type {null} */
                            node = null;
                            break;
                        case topLevelTypes.topMouseDown:
                            /** @type {boolean} */
                            inNext = true;
                            break;
                        case topLevelTypes.topContextMenu:
                            ;
                        case topLevelTypes.topMouseUp:
                            return inNext = false, select(nativeEvent, args);
                        case topLevelTypes.topSelectionChange:
                            if (p) {
                                break;
                            }
                            ;
                        case topLevelTypes.topKeyDown:
                            ;
                        case topLevelTypes.topKeyUp:
                            return select(nativeEvent, args);
                    }
                    return null;
                },
                /**
                 * @param {?} keepData
                 * @param {?} dataAndEvents
                 * @param {?} putativeSpy
                 * @return {undefined}
                 */
                didPutListener : function(keepData, dataAndEvents, putativeSpy) {
                    if (dataAndEvents === str) {
                        /** @type {boolean} */
                        v = true;
                    }
                }
            };
            module.exports = JsDiff;
        }, {
            105 : 105,
            134 : 134,
            147 : 147,
            15 : 15,
            156 : 156,
            166 : 166,
            171 : 171,
            19 : 19,
            66 : 66
        }],
        100 : [function(dataAndEvents, module, deepDataAndEvents) {
            /** @type {number} */
            var scaleX = Math.pow(2, 53);
            var JsDiff = {
                /**
                 * @return {?}
                 */
                createReactRootIndex : function() {
                    return Math.ceil(Math.random() * scaleX);
                }
            };
            module.exports = JsDiff;
        }, {}],
        101 : [function(_, module, dataAndEvents) {
            var today = _(15);
            var _this = _(146);
            var events = _(19);
            var instance = _(72);
            var s = _(102);
            var SyntheticEvent = _(105);
            var SyntheticMouseEvent = _(106);
            var SyntheticFocusEvent = _(108);
            var SyntheticUIEvent = _(109);
            var SyntheticTouchEvent = _(104);
            var SyntheticWheelEvent = _(110);
            var SyntheticKeyboardEvent = _(111);
            var SyntheticClipboardEvent = _(112);
            var recurring = _(153);
            var forIn = _(125);
            var wrapped = _(161);
            var throttledUpdate = _(166);
            var topLevelTypes = today.topLevelTypes;
            var self = {
                abort : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onAbort : true
                        }),
                        captured : throttledUpdate({
                            onAbortCapture : true
                        })
                    }
                },
                blur : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onBlur : true
                        }),
                        captured : throttledUpdate({
                            onBlurCapture : true
                        })
                    }
                },
                canPlay : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onCanPlay : true
                        }),
                        captured : throttledUpdate({
                            onCanPlayCapture : true
                        })
                    }
                },
                canPlayThrough : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onCanPlayThrough : true
                        }),
                        captured : throttledUpdate({
                            onCanPlayThroughCapture : true
                        })
                    }
                },
                click : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onClick : true
                        }),
                        captured : throttledUpdate({
                            onClickCapture : true
                        })
                    }
                },
                contextMenu : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onContextMenu : true
                        }),
                        captured : throttledUpdate({
                            onContextMenuCapture : true
                        })
                    }
                },
                copy : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onCopy : true
                        }),
                        captured : throttledUpdate({
                            onCopyCapture : true
                        })
                    }
                },
                cut : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onCut : true
                        }),
                        captured : throttledUpdate({
                            onCutCapture : true
                        })
                    }
                },
                doubleClick : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onDoubleClick : true
                        }),
                        captured : throttledUpdate({
                            onDoubleClickCapture : true
                        })
                    }
                },
                drag : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onDrag : true
                        }),
                        captured : throttledUpdate({
                            onDragCapture : true
                        })
                    }
                },
                dragEnd : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onDragEnd : true
                        }),
                        captured : throttledUpdate({
                            onDragEndCapture : true
                        })
                    }
                },
                dragEnter : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onDragEnter : true
                        }),
                        captured : throttledUpdate({
                            onDragEnterCapture : true
                        })
                    }
                },
                dragExit : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onDragExit : true
                        }),
                        captured : throttledUpdate({
                            onDragExitCapture : true
                        })
                    }
                },
                dragLeave : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onDragLeave : true
                        }),
                        captured : throttledUpdate({
                            onDragLeaveCapture : true
                        })
                    }
                },
                dragOver : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onDragOver : true
                        }),
                        captured : throttledUpdate({
                            onDragOverCapture : true
                        })
                    }
                },
                dragStart : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onDragStart : true
                        }),
                        captured : throttledUpdate({
                            onDragStartCapture : true
                        })
                    }
                },
                drop : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onDrop : true
                        }),
                        captured : throttledUpdate({
                            onDropCapture : true
                        })
                    }
                },
                durationChange : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onDurationChange : true
                        }),
                        captured : throttledUpdate({
                            onDurationChangeCapture : true
                        })
                    }
                },
                emptied : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onEmptied : true
                        }),
                        captured : throttledUpdate({
                            onEmptiedCapture : true
                        })
                    }
                },
                encrypted : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onEncrypted : true
                        }),
                        captured : throttledUpdate({
                            onEncryptedCapture : true
                        })
                    }
                },
                ended : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onEnded : true
                        }),
                        captured : throttledUpdate({
                            onEndedCapture : true
                        })
                    }
                },
                error : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onError : true
                        }),
                        captured : throttledUpdate({
                            onErrorCapture : true
                        })
                    }
                },
                focus : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onFocus : true
                        }),
                        captured : throttledUpdate({
                            onFocusCapture : true
                        })
                    }
                },
                input : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onInput : true
                        }),
                        captured : throttledUpdate({
                            onInputCapture : true
                        })
                    }
                },
                keyDown : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onKeyDown : true
                        }),
                        captured : throttledUpdate({
                            onKeyDownCapture : true
                        })
                    }
                },
                keyPress : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onKeyPress : true
                        }),
                        captured : throttledUpdate({
                            onKeyPressCapture : true
                        })
                    }
                },
                keyUp : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onKeyUp : true
                        }),
                        captured : throttledUpdate({
                            onKeyUpCapture : true
                        })
                    }
                },
                load : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onLoad : true
                        }),
                        captured : throttledUpdate({
                            onLoadCapture : true
                        })
                    }
                },
                loadedData : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onLoadedData : true
                        }),
                        captured : throttledUpdate({
                            onLoadedDataCapture : true
                        })
                    }
                },
                loadedMetadata : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onLoadedMetadata : true
                        }),
                        captured : throttledUpdate({
                            onLoadedMetadataCapture : true
                        })
                    }
                },
                loadStart : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onLoadStart : true
                        }),
                        captured : throttledUpdate({
                            onLoadStartCapture : true
                        })
                    }
                },
                mouseDown : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onMouseDown : true
                        }),
                        captured : throttledUpdate({
                            onMouseDownCapture : true
                        })
                    }
                },
                mouseMove : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onMouseMove : true
                        }),
                        captured : throttledUpdate({
                            onMouseMoveCapture : true
                        })
                    }
                },
                mouseOut : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onMouseOut : true
                        }),
                        captured : throttledUpdate({
                            onMouseOutCapture : true
                        })
                    }
                },
                mouseOver : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onMouseOver : true
                        }),
                        captured : throttledUpdate({
                            onMouseOverCapture : true
                        })
                    }
                },
                mouseUp : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onMouseUp : true
                        }),
                        captured : throttledUpdate({
                            onMouseUpCapture : true
                        })
                    }
                },
                paste : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onPaste : true
                        }),
                        captured : throttledUpdate({
                            onPasteCapture : true
                        })
                    }
                },
                pause : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onPause : true
                        }),
                        captured : throttledUpdate({
                            onPauseCapture : true
                        })
                    }
                },
                play : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onPlay : true
                        }),
                        captured : throttledUpdate({
                            onPlayCapture : true
                        })
                    }
                },
                playing : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onPlaying : true
                        }),
                        captured : throttledUpdate({
                            onPlayingCapture : true
                        })
                    }
                },
                progress : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onProgress : true
                        }),
                        captured : throttledUpdate({
                            onProgressCapture : true
                        })
                    }
                },
                rateChange : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onRateChange : true
                        }),
                        captured : throttledUpdate({
                            onRateChangeCapture : true
                        })
                    }
                },
                reset : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onReset : true
                        }),
                        captured : throttledUpdate({
                            onResetCapture : true
                        })
                    }
                },
                scroll : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onScroll : true
                        }),
                        captured : throttledUpdate({
                            onScrollCapture : true
                        })
                    }
                },
                seeked : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onSeeked : true
                        }),
                        captured : throttledUpdate({
                            onSeekedCapture : true
                        })
                    }
                },
                seeking : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onSeeking : true
                        }),
                        captured : throttledUpdate({
                            onSeekingCapture : true
                        })
                    }
                },
                stalled : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onStalled : true
                        }),
                        captured : throttledUpdate({
                            onStalledCapture : true
                        })
                    }
                },
                submit : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onSubmit : true
                        }),
                        captured : throttledUpdate({
                            onSubmitCapture : true
                        })
                    }
                },
                suspend : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onSuspend : true
                        }),
                        captured : throttledUpdate({
                            onSuspendCapture : true
                        })
                    }
                },
                timeUpdate : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onTimeUpdate : true
                        }),
                        captured : throttledUpdate({
                            onTimeUpdateCapture : true
                        })
                    }
                },
                touchCancel : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onTouchCancel : true
                        }),
                        captured : throttledUpdate({
                            onTouchCancelCapture : true
                        })
                    }
                },
                touchEnd : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onTouchEnd : true
                        }),
                        captured : throttledUpdate({
                            onTouchEndCapture : true
                        })
                    }
                },
                touchMove : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onTouchMove : true
                        }),
                        captured : throttledUpdate({
                            onTouchMoveCapture : true
                        })
                    }
                },
                touchStart : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onTouchStart : true
                        }),
                        captured : throttledUpdate({
                            onTouchStartCapture : true
                        })
                    }
                },
                volumeChange : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onVolumeChange : true
                        }),
                        captured : throttledUpdate({
                            onVolumeChangeCapture : true
                        })
                    }
                },
                waiting : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onWaiting : true
                        }),
                        captured : throttledUpdate({
                            onWaitingCapture : true
                        })
                    }
                },
                wheel : {
                    phasedRegistrationNames : {
                        bubbled : throttledUpdate({
                            onWheel : true
                        }),
                        captured : throttledUpdate({
                            onWheelCapture : true
                        })
                    }
                }
            };
            var unpreparedModules = {
                topAbort : self.abort,
                topBlur : self.blur,
                topCanPlay : self.canPlay,
                topCanPlayThrough : self.canPlayThrough,
                topClick : self.click,
                topContextMenu : self.contextMenu,
                topCopy : self.copy,
                topCut : self.cut,
                topDoubleClick : self.doubleClick,
                topDrag : self.drag,
                topDragEnd : self.dragEnd,
                topDragEnter : self.dragEnter,
                topDragExit : self.dragExit,
                topDragLeave : self.dragLeave,
                topDragOver : self.dragOver,
                topDragStart : self.dragStart,
                topDrop : self.drop,
                topDurationChange : self.durationChange,
                topEmptied : self.emptied,
                topEncrypted : self.encrypted,
                topEnded : self.ended,
                topError : self.error,
                topFocus : self.focus,
                topInput : self.input,
                topKeyDown : self.keyDown,
                topKeyPress : self.keyPress,
                topKeyUp : self.keyUp,
                topLoad : self.load,
                topLoadedData : self.loadedData,
                topLoadedMetadata : self.loadedMetadata,
                topLoadStart : self.loadStart,
                topMouseDown : self.mouseDown,
                topMouseMove : self.mouseMove,
                topMouseOut : self.mouseOut,
                topMouseOver : self.mouseOver,
                topMouseUp : self.mouseUp,
                topPaste : self.paste,
                topPause : self.pause,
                topPlay : self.play,
                topPlaying : self.playing,
                topProgress : self.progress,
                topRateChange : self.rateChange,
                topReset : self.reset,
                topScroll : self.scroll,
                topSeeked : self.seeked,
                topSeeking : self.seeking,
                topStalled : self.stalled,
                topSubmit : self.submit,
                topSuspend : self.suspend,
                topTimeUpdate : self.timeUpdate,
                topTouchCancel : self.touchCancel,
                topTouchEnd : self.touchEnd,
                topTouchMove : self.touchMove,
                topTouchStart : self.touchStart,
                topVolumeChange : self.volumeChange,
                topWaiting : self.waiting,
                topWheel : self.wheel
            };
            var normalizedName;
            for (normalizedName in unpreparedModules) {
                /** @type {Array} */
                unpreparedModules[normalizedName].dependencies = [normalizedName];
            }
            var radio = throttledUpdate({
                onClick : null
            });
            var o = {};
            var JsDiff = {
                eventTypes : self,
                /**
                 * @param {string} topLevelType
                 * @param {string} obj
                 * @param {string} topLevelTargetID
                 * @param {Event} nativeEvent
                 * @param {?} args
                 * @return {?}
                 */
                extractEvents : function(topLevelType, obj, topLevelTargetID, nativeEvent, args) {
                    var dispatchConfig = unpreparedModules[topLevelType];
                    if (!dispatchConfig) {
                        return null;
                    }
                    var EventConstructor;
                    switch(topLevelType) {
                        case topLevelTypes.topAbort:
                            ;
                        case topLevelTypes.topCanPlay:
                            ;
                        case topLevelTypes.topCanPlayThrough:
                            ;
                        case topLevelTypes.topDurationChange:
                            ;
                        case topLevelTypes.topEmptied:
                            ;
                        case topLevelTypes.topEncrypted:
                            ;
                        case topLevelTypes.topEnded:
                            ;
                        case topLevelTypes.topError:
                            ;
                        case topLevelTypes.topInput:
                            ;
                        case topLevelTypes.topLoad:
                            ;
                        case topLevelTypes.topLoadedData:
                            ;
                        case topLevelTypes.topLoadedMetadata:
                            ;
                        case topLevelTypes.topLoadStart:
                            ;
                        case topLevelTypes.topPause:
                            ;
                        case topLevelTypes.topPlay:
                            ;
                        case topLevelTypes.topPlaying:
                            ;
                        case topLevelTypes.topProgress:
                            ;
                        case topLevelTypes.topRateChange:
                            ;
                        case topLevelTypes.topReset:
                            ;
                        case topLevelTypes.topSeeked:
                            ;
                        case topLevelTypes.topSeeking:
                            ;
                        case topLevelTypes.topStalled:
                            ;
                        case topLevelTypes.topSubmit:
                            ;
                        case topLevelTypes.topSuspend:
                            ;
                        case topLevelTypes.topTimeUpdate:
                            ;
                        case topLevelTypes.topVolumeChange:
                            ;
                        case topLevelTypes.topWaiting:
                            EventConstructor = SyntheticEvent;
                            break;
                        case topLevelTypes.topKeyPress:
                            if (0 === forIn(nativeEvent)) {
                                return null;
                            }
                            ;
                        case topLevelTypes.topKeyDown:
                            ;
                        case topLevelTypes.topKeyUp:
                            EventConstructor = SyntheticFocusEvent;
                            break;
                        case topLevelTypes.topBlur:
                            ;
                        case topLevelTypes.topFocus:
                            EventConstructor = SyntheticMouseEvent;
                            break;
                        case topLevelTypes.topClick:
                            if (2 === nativeEvent.button) {
                                return null;
                            }
                            ;
                        case topLevelTypes.topContextMenu:
                            ;
                        case topLevelTypes.topDoubleClick:
                            ;
                        case topLevelTypes.topMouseDown:
                            ;
                        case topLevelTypes.topMouseMove:
                            ;
                        case topLevelTypes.topMouseOut:
                            ;
                        case topLevelTypes.topMouseOver:
                            ;
                        case topLevelTypes.topMouseUp:
                            EventConstructor = SyntheticUIEvent;
                            break;
                        case topLevelTypes.topDrag:
                            ;
                        case topLevelTypes.topDragEnd:
                            ;
                        case topLevelTypes.topDragEnter:
                            ;
                        case topLevelTypes.topDragExit:
                            ;
                        case topLevelTypes.topDragLeave:
                            ;
                        case topLevelTypes.topDragOver:
                            ;
                        case topLevelTypes.topDragStart:
                            ;
                        case topLevelTypes.topDrop:
                            EventConstructor = SyntheticTouchEvent;
                            break;
                        case topLevelTypes.topTouchCancel:
                            ;
                        case topLevelTypes.topTouchEnd:
                            ;
                        case topLevelTypes.topTouchMove:
                            ;
                        case topLevelTypes.topTouchStart:
                            EventConstructor = SyntheticWheelEvent;
                            break;
                        case topLevelTypes.topScroll:
                            EventConstructor = SyntheticKeyboardEvent;
                            break;
                        case topLevelTypes.topWheel:
                            EventConstructor = SyntheticClipboardEvent;
                            break;
                        case topLevelTypes.topCopy:
                            ;
                        case topLevelTypes.topCut:
                            ;
                        case topLevelTypes.topPaste:
                            EventConstructor = s;
                    }
                    if (EventConstructor) {
                        void 0;
                    } else {
                        wrapped(false, "SimpleEventPlugin: Unhandled event type, `%s`.", topLevelType);
                    }
                    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, args);
                    return events.accumulateTwoPhaseDispatches(event), event;
                },
                /**
                 * @param {?} attr
                 * @param {?} dataAndEvents
                 * @param {?} putativeSpy
                 * @return {undefined}
                 */
                didPutListener : function(attr, dataAndEvents, putativeSpy) {
                    if (dataAndEvents === radio) {
                        var value = instance.getNode(attr);
                        if (!o[attr]) {
                            o[attr] = _this.listen(value, "click", recurring);
                        }
                    }
                },
                /**
                 * @param {?} prop
                 * @param {?} value
                 * @return {undefined}
                 */
                willDeleteListener : function(prop, value) {
                    if (value === radio) {
                        o[prop].remove();
                        delete o[prop];
                    }
                }
            };
            module.exports = JsDiff;
        }, {
            102 : 102,
            104 : 104,
            105 : 105,
            106 : 106,
            108 : 108,
            109 : 109,
            110 : 110,
            111 : 111,
            112 : 112,
            125 : 125,
            146 : 146,
            15 : 15,
            153 : 153,
            161 : 161,
            166 : 166,
            19 : 19,
            72 : 72
        }],
        102 : [function($sanitize, config, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @param {Object} dataAndEvents
             * @return {undefined}
             */
            function clone(name, recurring, deepDataAndEvents, dataAndEvents) {
                jQuery.call(this, name, recurring, deepDataAndEvents, dataAndEvents);
            }
            var jQuery = $sanitize(105);
            var restoreScript = {
                /**
                 * @param {Window} e
                 * @return {?}
                 */
                clipboardData : function(e) {
                    return "clipboardData" in e ? e.clipboardData : window.clipboardData;
                }
            };
            jQuery.augmentClass(clone, restoreScript);
            /** @type {function (string, Function, Object, Object): undefined} */
            config.exports = clone;
        }, {
            105 : 105
        }],
        103 : [function($sanitize, config, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @param {Object} dataAndEvents
             * @return {undefined}
             */
            function clone(name, recurring, deepDataAndEvents, dataAndEvents) {
                jQuery.call(this, name, recurring, deepDataAndEvents, dataAndEvents);
            }
            var jQuery = $sanitize(105);
            var restoreScript = {
                data : null
            };
            jQuery.augmentClass(clone, restoreScript);
            /** @type {function (string, Function, Object, Object): undefined} */
            config.exports = clone;
        }, {
            105 : 105
        }],
        104 : [function($sanitize, config, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @param {Object} dataAndEvents
             * @return {undefined}
             */
            function clone(name, recurring, deepDataAndEvents, dataAndEvents) {
                jQuery.call(this, name, recurring, deepDataAndEvents, dataAndEvents);
            }
            var jQuery = $sanitize(109);
            var restoreScript = {
                dataTransfer : null
            };
            jQuery.augmentClass(clone, restoreScript);
            /** @type {function (string, Function, Object, Object): undefined} */
            config.exports = clone;
        }, {
            109 : 109
        }],
        105 : [function(require, module, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @param {Object} dataAndEvents
             * @return {undefined}
             */
            function Class(name, recurring, deepDataAndEvents, dataAndEvents) {
                /** @type {string} */
                this.dispatchConfig = name;
                /** @type {Function} */
                this.dispatchMarker = recurring;
                /** @type {Object} */
                this.nativeEvent = deepDataAndEvents;
                var config = this.constructor.Interface;
                var key;
                for (key in config) {
                    if (config.hasOwnProperty(key)) {
                        var t = config[key];
                        if (t) {
                            this[key] = t(deepDataAndEvents);
                        } else {
                            if ("target" === key) {
                                /** @type {Object} */
                                this.target = dataAndEvents;
                            } else {
                                this[key] = deepDataAndEvents[key];
                            }
                        }
                    }
                }
                var i = null != deepDataAndEvents.defaultPrevented ? deepDataAndEvents.defaultPrevented : deepDataAndEvents.returnValue === false;
                if (i) {
                    this.isDefaultPrevented = evt.thatReturnsTrue;
                } else {
                    this.isDefaultPrevented = evt.thatReturnsFalse;
                }
                this.isPropagationStopped = evt.thatReturnsFalse;
            }
            var $ = require(25);
            var Emitter = require(24);
            var evt = require(153);
            var getEventObject = require(173);
            var oEventPseudo = {
                type : null,
                target : null,
                currentTarget : evt.thatReturnsNull,
                eventPhase : null,
                bubbles : null,
                cancelable : null,
                /**
                 * @param {string} name
                 * @return {?}
                 */
                timeStamp : function(name) {
                    return name.timeStamp || Date.now();
                },
                defaultPrevented : null,
                isTrusted : null
            };
            Emitter(Class.prototype, {
                /**
                 * @return {undefined}
                 */
                preventDefault : function() {
                    /** @type {boolean} */
                    this.defaultPrevented = true;
                    var eventObject = this.nativeEvent;
                    getEventObject(eventObject, "This synthetic event is reused for performance reasons. If you're seeing this, you're calling `preventDefault` on a released/nullified synthetic event. This is a no-op. See https://fb.me/react-event-pooling for more information.");
                    if (eventObject) {
                        if (eventObject.preventDefault) {
                            eventObject.preventDefault();
                        } else {
                            /** @type {boolean} */
                            eventObject.returnValue = false;
                        }
                        this.isDefaultPrevented = evt.thatReturnsTrue;
                    }
                },
                /**
                 * @return {undefined}
                 */
                stopPropagation : function() {
                    var event = this.nativeEvent;
                    getEventObject(event, "This synthetic event is reused for performance reasons. If you're seeing this, you're calling `stopPropagation` on a released/nullified synthetic event. This is a no-op. See https://fb.me/react-event-pooling for more information.");
                    if (event) {
                        if (event.stopPropagation) {
                            event.stopPropagation();
                        } else {
                            /** @type {boolean} */
                            event.cancelBubble = true;
                        }
                        this.isPropagationStopped = evt.thatReturnsTrue;
                    }
                },
                /**
                 * @return {undefined}
                 */
                persist : function() {
                    this.isPersistent = evt.thatReturnsTrue;
                },
                isPersistent : evt.thatReturnsFalse,
                /**
                 * @return {undefined}
                 */
                destructor : function() {
                    var Interface = this.constructor.Interface;
                    var propName;
                    for (propName in Interface) {
                        /** @type {null} */
                        this[propName] = null;
                    }
                    /** @type {null} */
                    this.dispatchConfig = null;
                    /** @type {null} */
                    this.dispatchMarker = null;
                    /** @type {null} */
                    this.nativeEvent = null;
                }
            });
            Class.Interface = oEventPseudo;
            /**
             * @param {Function} dest
             * @param {?} callback
             * @return {undefined}
             */
            Class.augmentClass = function(dest, callback) {
                var Super = this;
                /** @type {Object} */
                var proto = Object.create(Super.prototype);
                Emitter(proto, dest.prototype);
                /** @type {Object} */
                dest.prototype = proto;
                /** @type {Function} */
                dest.prototype.constructor = dest;
                dest.Interface = Emitter({}, Super.Interface, callback);
                dest.augmentClass = Super.augmentClass;
                $.addPoolingTo(dest, $.fourArgumentPooler);
            };
            $.addPoolingTo(Class, $.fourArgumentPooler);
            /** @type {function (string, Function, Object, Object): undefined} */
            module.exports = Class;
        }, {
            153 : 153,
            173 : 173,
            24 : 24,
            25 : 25
        }],
        106 : [function($sanitize, config, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @param {Object} dataAndEvents
             * @return {undefined}
             */
            function clone(name, recurring, deepDataAndEvents, dataAndEvents) {
                jQuery.call(this, name, recurring, deepDataAndEvents, dataAndEvents);
            }
            var jQuery = $sanitize(111);
            var restoreScript = {
                relatedTarget : null
            };
            jQuery.augmentClass(clone, restoreScript);
            /** @type {function (string, Function, Object, Object): undefined} */
            config.exports = clone;
        }, {
            111 : 111
        }],
        107 : [function($sanitize, config, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @param {Object} dataAndEvents
             * @return {undefined}
             */
            function clone(name, recurring, deepDataAndEvents, dataAndEvents) {
                jQuery.call(this, name, recurring, deepDataAndEvents, dataAndEvents);
            }
            var jQuery = $sanitize(105);
            var restoreScript = {
                data : null
            };
            jQuery.augmentClass(clone, restoreScript);
            /** @type {function (string, Function, Object, Object): undefined} */
            config.exports = clone;
        }, {
            105 : 105
        }],
        108 : [function(require, config, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @param {Object} dataAndEvents
             * @return {undefined}
             */
            function clone(name, recurring, deepDataAndEvents, dataAndEvents) {
                jQuery.call(this, name, recurring, deepDataAndEvents, dataAndEvents);
            }
            var jQuery = require(111);
            var assert = require(125);
            var i = require(126);
            var Block = require(127);
            var restoreScript = {
                key : i,
                location : null,
                ctrlKey : null,
                shiftKey : null,
                altKey : null,
                metaKey : null,
                repeat : null,
                locale : null,
                getModifierState : Block,
                /**
                 * @param {Event} e
                 * @return {?}
                 */
                charCode : function(e) {
                    return "keypress" === e.type ? assert(e) : 0;
                },
                /**
                 * @param {Object} e
                 * @return {?}
                 */
                keyCode : function(e) {
                    return "keydown" === e.type || "keyup" === e.type ? e.keyCode : 0;
                },
                /**
                 * @param {Object} e
                 * @return {?}
                 */
                which : function(e) {
                    return "keypress" === e.type ? assert(e) : "keydown" === e.type || "keyup" === e.type ? e.keyCode : 0;
                }
            };
            jQuery.augmentClass(clone, restoreScript);
            /** @type {function (string, Function, Object, Object): undefined} */
            config.exports = clone;
        }, {
            111 : 111,
            125 : 125,
            126 : 126,
            127 : 127
        }],
        109 : [function(require, config, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @param {Object} dataAndEvents
             * @return {undefined}
             */
            function clone(name, recurring, deepDataAndEvents, dataAndEvents) {
                jQuery.call(this, name, recurring, deepDataAndEvents, dataAndEvents);
            }
            var jQuery = require(111);
            var b = require(114);
            var Block = require(127);
            var restoreScript = {
                screenX : null,
                screenY : null,
                clientX : null,
                clientY : null,
                ctrlKey : null,
                shiftKey : null,
                altKey : null,
                metaKey : null,
                getModifierState : Block,
                /**
                 * @param {string} name
                 * @return {?}
                 */
                button : function(name) {
                    var old = name.button;
                    return "which" in name ? old : 2 === old ? 2 : 4 === old ? 1 : 0;
                },
                buttons : null,
                /**
                 * @param {string} name
                 * @return {?}
                 */
                relatedTarget : function(name) {
                    return name.relatedTarget || (name.fromElement === name.srcElement ? name.toElement : name.fromElement);
                },
                /**
                 * @param {string} name
                 * @return {?}
                 */
                pageX : function(name) {
                    return "pageX" in name ? name.pageX : name.clientX + b.currentScrollLeft;
                },
                /**
                 * @param {string} name
                 * @return {?}
                 */
                pageY : function(name) {
                    return "pageY" in name ? name.pageY : name.clientY + b.currentScrollTop;
                }
            };
            jQuery.augmentClass(clone, restoreScript);
            /** @type {function (string, Function, Object, Object): undefined} */
            config.exports = clone;
        }, {
            111 : 111,
            114 : 114,
            127 : 127
        }],
        110 : [function(require, config, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @param {Object} dataAndEvents
             * @return {undefined}
             */
            function clone(name, recurring, deepDataAndEvents, dataAndEvents) {
                jQuery.call(this, name, recurring, deepDataAndEvents, dataAndEvents);
            }
            var jQuery = require(111);
            var Block = require(127);
            var restoreScript = {
                touches : null,
                targetTouches : null,
                changedTouches : null,
                altKey : null,
                metaKey : null,
                ctrlKey : null,
                shiftKey : null,
                getModifierState : Block
            };
            jQuery.augmentClass(clone, restoreScript);
            /** @type {function (string, Function, Object, Object): undefined} */
            config.exports = clone;
        }, {
            111 : 111,
            127 : 127
        }],
        111 : [function(require, config, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @param {Object} dataAndEvents
             * @return {undefined}
             */
            function clone(name, recurring, deepDataAndEvents, dataAndEvents) {
                jQuery.call(this, name, recurring, deepDataAndEvents, dataAndEvents);
            }
            var jQuery = require(105);
            var flag = require(128);
            var restoreScript = {
                /**
                 * @param {string} name
                 * @return {?}
                 */
                view : function(name) {
                    if (name.view) {
                        return name.view;
                    }
                    var obj = flag(name);
                    if (null != obj && obj.window === obj) {
                        return obj;
                    }
                    var doc = obj.ownerDocument;
                    return doc ? doc.defaultView || doc.parentWindow : window;
                },
                /**
                 * @param {Event} params
                 * @return {?}
                 */
                detail : function(params) {
                    return params.detail || 0;
                }
            };
            jQuery.augmentClass(clone, restoreScript);
            /** @type {function (string, Function, Object, Object): undefined} */
            config.exports = clone;
        }, {
            105 : 105,
            128 : 128
        }],
        112 : [function($sanitize, config, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @param {Object} dataAndEvents
             * @return {undefined}
             */
            function clone(name, recurring, deepDataAndEvents, dataAndEvents) {
                jQuery.call(this, name, recurring, deepDataAndEvents, dataAndEvents);
            }
            var jQuery = $sanitize(109);
            var restoreScript = {
                /**
                 * @param {string} name
                 * @return {?}
                 */
                deltaX : function(name) {
                    return "deltaX" in name ? name.deltaX : "wheelDeltaX" in name ? -name.wheelDeltaX : 0;
                },
                /**
                 * @param {string} name
                 * @return {?}
                 */
                deltaY : function(name) {
                    return "deltaY" in name ? name.deltaY : "wheelDeltaY" in name ? -name.wheelDeltaY : "wheelDelta" in name ? -name.wheelDelta : 0;
                },
                deltaZ : null,
                deltaMode : null
            };
            jQuery.augmentClass(clone, restoreScript);
            /** @type {function (string, Function, Object, Object): undefined} */
            config.exports = clone;
        }, {
            109 : 109
        }],
        113 : [function(require, module, dataAndEvents) {
            var sync = require(161);
            var result = {
                /**
                 * @return {undefined}
                 */
                reinitializeTransaction : function() {
                    this.transactionWrappers = this.getTransactionWrappers();
                    if (this.wrapperInitData) {
                        /** @type {number} */
                        this.wrapperInitData.length = 0;
                    } else {
                        /** @type {Array} */
                        this.wrapperInitData = [];
                    }
                    /** @type {boolean} */
                    this._isInTransaction = false;
                },
                _isInTransaction : false,
                getTransactionWrappers : null,
                /**
                 * @return {?}
                 */
                isInTransaction : function() {
                    return!!this._isInTransaction;
                },
                /**
                 * @param {Function} fn
                 * @param {Array} elems
                 * @param {?} name
                 * @param {?} b
                 * @param {?} target
                 * @param {?} value
                 * @param {Object} e
                 * @param {?} f
                 * @return {?}
                 */
                perform : function(fn, elems, name, b, target, value, e, f) {
                    if (this.isInTransaction()) {
                        sync(false, "Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.");
                    } else {
                        void 0;
                    }
                    var j;
                    var ret;
                    try {
                        /** @type {boolean} */
                        this._isInTransaction = true;
                        /** @type {boolean} */
                        j = true;
                        this.initializeAll(0);
                        ret = fn.call(elems, name, b, target, value, e, f);
                        /** @type {boolean} */
                        j = false;
                    } finally {
                        try {
                            if (j) {
                                try {
                                    this.closeAll(0);
                                } catch (l) {
                                }
                            } else {
                                this.closeAll(0);
                            }
                        } finally {
                            /** @type {boolean} */
                            this._isInTransaction = false;
                        }
                    }
                    return ret;
                },
                /**
                 * @param {number} fromIndex
                 * @return {undefined}
                 */
                initializeAll : function(fromIndex) {
                    var resultItems = this.transactionWrappers;
                    /** @type {number} */
                    var i = fromIndex;
                    for (;i < resultItems.length;i++) {
                        var result = resultItems[i];
                        try {
                            this.wrapperInitData[i] = node.OBSERVED_ERROR;
                            this.wrapperInitData[i] = result.initialize ? result.initialize.call(this) : null;
                        } finally {
                            if (this.wrapperInitData[i] === node.OBSERVED_ERROR) {
                                try {
                                    this.initializeAll(i + 1);
                                } catch (e) {
                                }
                            }
                        }
                    }
                },
                /**
                 * @param {number} recurring
                 * @return {undefined}
                 */
                closeAll : function(recurring) {
                    if (this.isInTransaction()) {
                        void 0;
                    } else {
                        sync(false, "Transaction.closeAll(): Cannot close transaction when none are open.");
                    }
                    var branchDataJSON = this.transactionWrappers;
                    /** @type {number} */
                    var conditionIndex = recurring;
                    for (;conditionIndex < branchDataJSON.length;conditionIndex++) {
                        var e;
                        var condition = branchDataJSON[conditionIndex];
                        var initData = this.wrapperInitData[conditionIndex];
                        try {
                            /** @type {boolean} */
                            e = true;
                            if (initData !== node.OBSERVED_ERROR) {
                                if (condition.close) {
                                    condition.close.call(this, initData);
                                }
                            }
                            /** @type {boolean} */
                            e = false;
                        } finally {
                            if (e) {
                                try {
                                    this.closeAll(conditionIndex + 1);
                                } catch (i) {
                                }
                            }
                        }
                    }
                    /** @type {number} */
                    this.wrapperInitData.length = 0;
                }
            };
            var node = {
                Mixin : result,
                OBSERVED_ERROR : {}
            };
            module.exports = node;
        }, {
            161 : 161
        }],
        114 : [function(dataAndEvents, module, deepDataAndEvents) {
            var ret = {
                currentScrollLeft : 0,
                currentScrollTop : 0,
                /**
                 * @param {?} scrollPosition
                 * @return {undefined}
                 */
                refreshScrollValues : function(scrollPosition) {
                    ret.currentScrollLeft = scrollPosition.x;
                    ret.currentScrollTop = scrollPosition.y;
                }
            };
            module.exports = ret;
        }, {}],
        115 : [function(require, context, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @return {?}
             */
            function self(name, recurring) {
                if (null == recurring ? assert(false, "accumulateInto(...): Accumulated items must not be null or undefined.") : void 0, null == name) {
                    return recurring;
                }
                /** @type {boolean} */
                var start = Array.isArray(name);
                /** @type {boolean} */
                var end = Array.isArray(recurring);
                return start && end ? (name.push.apply(name, recurring), name) : start ? (name.push(recurring), name) : end ? [name].concat(recurring) : [name, recurring];
            }
            var assert = require(161);
            /** @type {function (string, Function): ?} */
            context.exports = self;
        }, {
            161 : 161
        }],
        116 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function all(name) {
                /** @type {number} */
                var chunk = 1;
                /** @type {number} */
                var index = 0;
                /** @type {number} */
                var i = 0;
                var valuesLen = name.length;
                /** @type {number} */
                var count = valuesLen & -4;
                for (;i < count;) {
                    for (;i < Math.min(i + 4096, count);i += 4) {
                        index += (chunk += name.charCodeAt(i)) + (chunk += name.charCodeAt(i + 1)) + (chunk += name.charCodeAt(i + 2)) + (chunk += name.charCodeAt(i + 3));
                    }
                    chunk %= slidesLength;
                    index %= slidesLength;
                }
                for (;i < valuesLen;i++) {
                    index += chunk += name.charCodeAt(i);
                }
                return chunk %= slidesLength, index %= slidesLength, chunk | index << 16;
            }
            /** @type {number} */
            var slidesLength = 65521;
            /** @type {function (string): ?} */
            module.exports = all;
        }, {}],
        117 : [function(dataAndEvents, module, deepDataAndEvents) {
            /** @type {boolean} */
            var JsDiff = false;
            try {
                Object.defineProperty({}, "x", {
                    /**
                     * @return {undefined}
                     */
                    get : function() {
                    }
                });
                /** @type {boolean} */
                JsDiff = true;
            } catch (e) {
            }
            /** @type {boolean} */
            module.exports = JsDiff;
        }, {}],
        118 : [function(require, module, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @return {?}
             */
            function Element(name, recurring) {
                indexOf(dontCloseTags, "cloneWithProps(...) is deprecated. Please use React.cloneElement instead.");
                /** @type {boolean} */
                dontCloseTags = true;
                indexOf(!name.ref, "You are calling cloneWithProps() on a child with a ref. This is dangerous because you're creating a new child which will not be added as a ref to its parent.");
                var attributes = lang.mergeProps(recurring, name.props);
                return!attributes.hasOwnProperty($1) && (name.props.hasOwnProperty($1) && (attributes.children = name.props.children)), t.createElement(name.type, attributes);
            }
            var t = require(57);
            var lang = require(79);
            var getActual = require(166);
            var indexOf = require(173);
            var $1 = getActual({
                children : null
            });
            /** @type {boolean} */
            var dontCloseTags = false;
            /** @type {function (string, Function): ?} */
            module.exports = Element;
        }, {
            166 : 166,
            173 : 173,
            57 : 57,
            79 : 79
        }],
        119 : [function(require, module, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @return {?}
             */
            function parse(name, recurring) {
                /** @type {boolean} */
                var c = null == recurring || ("boolean" == typeof recurring || "" === recurring);
                if (c) {
                    return "";
                }
                /** @type {boolean} */
                var alphaPart = isNaN(recurring);
                return alphaPart || (0 === recurring || prevChildren.hasOwnProperty(name) && prevChildren[name]) ? "" + recurring : ("string" == typeof recurring && (recurring = recurring.trim()), recurring + "px");
            }
            var Block = require(4);
            var prevChildren = Block.isUnitlessNumber;
            /** @type {function (string, Function): ?} */
            module.exports = parse;
        }, {
            4 : 4
        }],
        120 : [function(require, config, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @param {Object} dataAndEvents
             * @param {Function} s
             * @return {?}
             */
            function clone(name, recurring, deepDataAndEvents, dataAndEvents, s) {
                /** @type {boolean} */
                var e = false;
                /**
                 * @return {?}
                 */
                var clone = function() {
                    return assert(e, "React.%s is deprecated. Please use %s.%s from require('%s') instead.", name, recurring, name, deepDataAndEvents), e = true, s.apply(dataAndEvents, arguments);
                };
                return extend(clone, s);
            }
            var extend = require(24);
            var assert = require(173);
            /** @type {function (string, Function, Object, Object, Function): ?} */
            config.exports = clone;
        }, {
            173 : 173,
            24 : 24
        }],
        121 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {?} off
             * @return {?}
             */
            function boundary(off) {
                return buf[off];
            }
            /**
             * @param {string} name
             * @return {?}
             */
            function constructor(name) {
                return("" + name).replace(r20, boundary);
            }
            var buf = {
                "&" : "&amp;",
                ">" : "&gt;",
                "<" : "&lt;",
                '"' : "&quot;",
                "'" : "&#x27;"
            };
            /** @type {RegExp} */
            var r20 = /[&><"']/g;
            /** @type {function (string): ?} */
            module.exports = constructor;
        }, {}],
        122 : [function(create, module, dataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function init(name) {
                var current = res.current;
                return null !== current && (model(current._warnedAboutRefsInRender, "%s is accessing getDOMNode or findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", current.getName() || "A component"), current._warnedAboutRefsInRender = true), null == name ? null : 1 === name.nodeType ? name : elem.has(name) ?
                    socket.getNodeFromInstance(name) : (null != name.render && "function" == typeof name.render ? button(false, "findDOMNode was called on an unmounted component.") : void 0, void button(false, "Element appears to be neither ReactComponent nor DOMNode (keys: %s)", Object.keys(name)));
            }
            var res = create(39);
            var elem = create(68);
            var socket = create(72);
            var button = create(161);
            var model = create(173);
            /** @type {function (string): ?} */
            module.exports = init;
        }, {
            161 : 161,
            173 : 173,
            39 : 39,
            68 : 68,
            72 : 72
        }],
        123 : [function($sanitize, module, dataAndEvents) {
            /**
             * @param {?} actualObject
             * @param {string} value
             * @param {?} key
             * @return {undefined}
             */
            function val(actualObject, value, key) {
                var object = actualObject;
                /** @type {boolean} */
                var dontCloseTags = void 0 === object[key];
                indexOf(dontCloseTags, "flattenChildren(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.", key);
                if (dontCloseTags) {
                    if (null != value) {
                        /** @type {string} */
                        object[key] = value;
                    }
                }
            }
            /**
             * @param {string} name
             * @return {?}
             */
            function getName(name) {
                if (null == name) {
                    return name;
                }
                var files = {};
                return ondata(name, val, files), files;
            }
            var ondata = $sanitize(142);
            var indexOf = $sanitize(173);
            /** @type {function (string): ?} */
            module.exports = getName;
        }, {
            142 : 142,
            173 : 173
        }],
        124 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @return {undefined}
             */
            var data = function(name, recurring, deepDataAndEvents) {
                if (Array.isArray(name)) {
                    name.forEach(recurring, deepDataAndEvents);
                } else {
                    if (name) {
                        recurring.call(deepDataAndEvents, name);
                    }
                }
            };
            /** @type {function (string, Function, Object): undefined} */
            module.exports = data;
        }, {}],
        125 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function send(name) {
                var ret;
                var defaultValue = name.keyCode;
                return "charCode" in name ? (ret = name.charCode, 0 === ret && (13 === defaultValue && (ret = 13))) : ret = defaultValue, ret >= 32 || 13 === ret ? ret : 0;
            }
            /** @type {function (string): ?} */
            module.exports = send;
        }, {}],
        126 : [function(get_func, module, dataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function listener(name) {
                if (name.key) {
                    var block = key[name.key] || name.key;
                    if ("Unidentified" !== block) {
                        return block;
                    }
                }
                if ("keypress" === name.type) {
                    var b = func(name);
                    return 13 === b ? "Enter" : String.fromCharCode(b);
                }
                return "keydown" === name.type || "keyup" === name.type ? keytable[name.keyCode] || "Unidentified" : "";
            }
            var func = get_func(125);
            var key = {
                Esc : "Escape",
                Spacebar : " ",
                Left : "ArrowLeft",
                Up : "ArrowUp",
                Right : "ArrowRight",
                Down : "ArrowDown",
                Del : "Delete",
                Win : "OS",
                Menu : "ContextMenu",
                Apps : "ContextMenu",
                Scroll : "ScrollLock",
                MozPrintableKey : "Unidentified"
            };
            var keytable = {
                8 : "Backspace",
                9 : "Tab",
                12 : "Clear",
                13 : "Enter",
                16 : "Shift",
                17 : "Control",
                18 : "Alt",
                19 : "Pause",
                20 : "CapsLock",
                27 : "Escape",
                32 : " ",
                33 : "PageUp",
                34 : "PageDown",
                35 : "End",
                36 : "Home",
                37 : "ArrowLeft",
                38 : "ArrowUp",
                39 : "ArrowRight",
                40 : "ArrowDown",
                45 : "Insert",
                46 : "Delete",
                112 : "F1",
                113 : "F2",
                114 : "F3",
                115 : "F4",
                116 : "F5",
                117 : "F6",
                118 : "F7",
                119 : "F8",
                120 : "F9",
                121 : "F10",
                122 : "F11",
                123 : "F12",
                144 : "NumLock",
                145 : "ScrollLock",
                224 : "Meta"
            };
            /** @type {function (string): ?} */
            module.exports = listener;
        }, {
            125 : 125
        }],
        127 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {?} n
             * @return {?}
             */
            function createRegularNGon(n) {
                var event = this;
                var obj = event.nativeEvent;
                if (obj.getModifierState) {
                    return obj.getModifierState(n);
                }
                var val = vals[n];
                return!!val && !!obj[val];
            }
            /**
             * @param {string} name
             * @return {?}
             */
            function prop(name) {
                return createRegularNGon;
            }
            var vals = {
                Alt : "altKey",
                Control : "ctrlKey",
                Meta : "metaKey",
                Shift : "shiftKey"
            };
            /** @type {function (string): ?} */
            module.exports = prop;
        }, {}],
        128 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function listener(name) {
                var tapElement = name.target || (name.srcElement || window);
                return 3 === tapElement.nodeType ? tapElement.parentNode : tapElement;
            }
            /** @type {function (string): ?} */
            module.exports = listener;
        }, {}],
        129 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function create(name) {
                var url = name && (o && name[o] || name[unlock]);
                if ("function" == typeof url) {
                    return url;
                }
            }
            var o = "function" == typeof Symbol && Symbol.iterator;
            /** @type {string} */
            var unlock = "@@iterator";
            /** @type {function (string): ?} */
            module.exports = create;
        }, {}],
        130 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {Object} f
             * @return {?}
             */
            function func(f) {
                for (;f && f.firstChild;) {
                    f = f.firstChild;
                }
                return f;
            }
            /**
             * @param {Object} node
             * @return {?}
             */
            function insert(node) {
                for (;node;) {
                    if (node.nextSibling) {
                        return node.nextSibling;
                    }
                    node = node.parentNode;
                }
            }
            /**
             * @param {string} name
             * @param {Function} recurring
             * @return {?}
             */
            function create(name, recurring) {
                var n = func(name);
                /** @type {number} */
                var start = 0;
                /** @type {number} */
                var end = 0;
                for (;n;) {
                    if (3 === n.nodeType) {
                        if (end = start + n.textContent.length, start <= recurring && end >= recurring) {
                            return{
                                node : n,
                                offset : recurring - start
                            };
                        }
                        start = end;
                    }
                    n = func(insert(n));
                }
            }
            /** @type {function (string, Function): ?} */
            module.exports = create;
        }, {}],
        131 : [function(require, module, dataAndEvents) {
            /**
             * @return {?}
             */
            function updateRemainingCount() {
                return!textProp && (Block.canUseDOM && (textProp = "textContent" in document.documentElement ? "textContent" : "innerText")), textProp;
            }
            var Block = require(147);
            /** @type {null} */
            var textProp = null;
            /** @type {function (): ?} */
            module.exports = updateRemainingCount;
        }, {
            147 : 147
        }],
        132 : [function(declare, mod, dataAndEvents) {
            /**
             * @param {Object} err
             * @return {?}
             */
            function readFile(err) {
                if (err) {
                    var b = err.getName();
                    if (b) {
                        return " Check the render method of `" + b + "`.";
                    }
                }
                return "";
            }
            /**
             * @param {Function} b
             * @return {?}
             */
            function $(b) {
                return "function" == typeof b && ("undefined" != typeof b.prototype && ("function" == typeof b.prototype.mountComponent && "function" == typeof b.prototype.receiveComponent));
            }
            /**
             * @param {string} name
             * @return {?}
             */
            function result(name) {
                var child;
                if (null === name || name === false) {
                    child = new Buffer(result);
                } else {
                    if ("object" == typeof name) {
                        /** @type {string} */
                        var options = name;
                        if (!options || "function" != typeof options.type && "string" != typeof options.type) {
                            appendLog(false, "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", null == options.type ? options.type : typeof options.type, readFile(options._owner));
                        } else {
                            void 0;
                        }
                        child = "string" == typeof options.type ? socket.createInternalComponent(options) : $(options.type) ? new options.type(options) : new Type;
                    } else {
                        if ("string" == typeof name || "number" == typeof name) {
                            child = socket.createInstanceForText(name);
                        } else {
                            appendLog(false, "Encountered invalid React node of type %s", typeof name);
                        }
                    }
                }
                return arrayForEach("function" == typeof child.construct && ("function" == typeof child.mountComponent && ("function" == typeof child.receiveComponent && "function" == typeof child.unmountComponent)), "Only React Components can be mounted."), child.construct(name), child._mountIndex = 0, child._mountImage = null, child._isOwnerNecessary = false, child._warnedAboutRefsInRender = false, Object.preventExtensions && Object.preventExtensions(child), child;
            }
            var NumberTextBox = declare(38);
            var Buffer = declare(59);
            var socket = declare(75);
            var copyProps = declare(24);
            var appendLog = declare(161);
            var arrayForEach = declare(173);
            /**
             * @return {undefined}
             */
            var Type = function() {
            };
            copyProps(Type.prototype, NumberTextBox.Mixin, {
                /** @type {function (string): ?} */
                _instantiateReactComponent : result
            });
            /** @type {function (string): ?} */
            mod.exports = result;
        }, {
            161 : 161,
            173 : 173,
            24 : 24,
            38 : 38,
            59 : 59,
            75 : 75
        }],
        133 : [function(require, module, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @return {?}
             */
            function listener(name, recurring) {
                if (!Block.canUseDOM || recurring && !("addEventListener" in document)) {
                    return false;
                }
                /** @type {string} */
                var eventName = "on" + name;
                /** @type {boolean} */
                var isSupported = eventName in document;
                if (!isSupported) {
                    /** @type {Element} */
                    var el = document.createElement("div");
                    el.setAttribute(eventName, "return;");
                    /** @type {boolean} */
                    isSupported = "function" == typeof el[eventName];
                }
                return!isSupported && (useHasFeature && ("wheel" === name && (isSupported = document.implementation.hasFeature("Events.wheel", "3.0")))), isSupported;
            }
            var useHasFeature;
            var Block = require(147);
            if (Block.canUseDOM) {
                /** @type {(boolean|null)} */
                useHasFeature = document.implementation && (document.implementation.hasFeature && document.implementation.hasFeature("", "") !== true);
            }
            /** @type {function (string, Function): ?} */
            module.exports = listener;
        }, {
            147 : 147
        }],
        134 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function Attribute(name) {
                var b = name && (name.nodeName && name.nodeName.toLowerCase());
                return b && ("input" === b && defaults[name.type] || "textarea" === b);
            }
            var defaults = {
                color : true,
                date : true,
                datetime : true,
                "datetime-local" : true,
                email : true,
                month : true,
                number : true,
                password : true,
                range : true,
                search : true,
                tel : true,
                text : true,
                time : true,
                url : true,
                week : true
            };
            /** @type {function (string): ?} */
            module.exports = Attribute;
        }, {}],
        135 : [function(require, mod, dataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function exports(name) {
                return selfClosing.isValidElement(name) ? void 0 : getActual(false, "onlyChild must be passed a children with exactly one child."), name;
            }
            var selfClosing = require(57);
            var getActual = require(161);
            /** @type {function (string): ?} */
            mod.exports = exports;
        }, {
            161 : 161,
            57 : 57
        }],
        136 : [function($sanitize, module, dataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function prop(name) {
                return'"' + ondata(name) + '"';
            }
            var ondata = $sanitize(121);
            /** @type {function (string): ?} */
            module.exports = prop;
        }, {
            121 : 121
        }],
        137 : [function(require, module, dataAndEvents) {
            var mod = require(72);
            module.exports = mod.renderSubtreeIntoContainer;
        }, {
            72 : 72
        }],
        138 : [function(require, module, dataAndEvents) {
            var Block = require(147);
            /** @type {RegExp} */
            var rhtml = /^[ \r\n\t\f]/;
            /** @type {RegExp} */
            var reWhitespace = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
            /**
             * @param {string} name
             * @param {Function} recurring
             * @return {undefined}
             */
            var complete = function(name, recurring) {
                /** @type {Function} */
                name.innerHTML = recurring;
            };
            if ("undefined" != typeof MSApp && (MSApp.execUnsafeLocalFunction && (complete = function(name, recurring) {
                    MSApp.execUnsafeLocalFunction(function() {
                        /** @type {Function} */
                        name.innerHTML = recurring;
                    });
                })), Block.canUseDOM) {
                /** @type {Element} */
                var elem = document.createElement("div");
                /** @type {string} */
                elem.innerHTML = " ";
                if ("" === elem.innerHTML) {
                    /**
                     * @param {string} name
                     * @param {Function} recurring
                     * @return {undefined}
                     */
                    complete = function(name, recurring) {
                        if (name.parentNode && name.parentNode.replaceChild(name, name), rhtml.test(recurring) || "<" === recurring[0] && reWhitespace.test(recurring)) {
                            /** @type {string} */
                            name.innerHTML = String.fromCharCode(65279) + recurring;
                            var label = name.firstChild;
                            if (1 === label.data.length) {
                                name.removeChild(label);
                            } else {
                                label.deleteData(0, 1);
                            }
                        } else {
                            /** @type {Function} */
                            name.innerHTML = recurring;
                        }
                    };
                }
            }
            /** @type {function (string, Function): undefined} */
            module.exports = complete;
        }, {
            147 : 147
        }],
        139 : [function(require, mod, dataAndEvents) {
            var Block = require(147);
            var getActual = require(121);
            var inspect = require(138);
            /**
             * @param {string} name
             * @param {Function} recurring
             * @return {undefined}
             */
            var exports = function(name, recurring) {
                /** @type {Function} */
                name.textContent = recurring;
            };
            if (Block.canUseDOM) {
                if (!("textContent" in document.documentElement)) {
                    /**
                     * @param {string} name
                     * @param {Function} recurring
                     * @return {undefined}
                     */
                    exports = function(name, recurring) {
                        inspect(name, getActual(recurring));
                    };
                }
            }
            /** @type {function (string, Function): undefined} */
            mod.exports = exports;
        }, {
            121 : 121,
            138 : 138,
            147 : 147
        }],
        140 : [function(require, module, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @return {?}
             */
            function constructor(name, recurring, deepDataAndEvents) {
                return!assert(name.props, recurring) || !assert(name.state, deepDataAndEvents);
            }
            var assert = require(171);
            /** @type {function (string, Function, Object): ?} */
            module.exports = constructor;
        }, {
            171 : 171
        }],
        141 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @return {?}
             */
            function Node(name, recurring) {
                /** @type {boolean} */
                var a = null === name || name === false;
                /** @type {boolean} */
                var b = null === recurring || recurring === false;
                if (a || b) {
                    return a === b;
                }
                /** @type {string} */
                var type = typeof name;
                /** @type {string} */
                var kind = typeof recurring;
                return "string" === type || "number" === type ? "string" === kind || "number" === kind : "object" === kind && (name.type === recurring.type && name.key === recurring.key);
            }
            /** @type {function (string, Function): ?} */
            module.exports = Node;
        }, {}],
        142 : [function(require, module, dataAndEvents) {
            /**
             * @param {?} key
             * @return {?}
             */
            function date(key) {
                return $cookies[key];
            }
            /**
             * @param {Object} node
             * @param {number} fn
             * @return {?}
             */
            function filter(node, fn) {
                return node && null != node.key ? trim(node.key) : fn.toString(36);
            }
            /**
             * @param {?} str
             * @return {?}
             */
            function trimRight(str) {
                return("" + str).replace(r20, date);
            }
            /**
             * @param {?} text
             * @return {?}
             */
            function trim(text) {
                return "$" + trimRight(text);
            }
            /**
             * @param {Object} node
             * @param {string} buffer
             * @param {Function} callback
             * @param {boolean} deepDataAndEvents
             * @return {?}
             */
            function parse(node, buffer, callback, deepDataAndEvents) {
                /** @type {string} */
                var type = typeof node;
                if ("undefined" !== type && "boolean" !== type || (node = null), null === node || ("string" === type || ("number" === type || nodes.isValidElement(node)))) {
                    return callback(deepDataAndEvents, node, "" === buffer ? cur + filter(node, 0) : buffer), 1;
                }
                var val;
                var BUFFER;
                /** @type {number} */
                var result = 0;
                var name = "" === buffer ? cur : buffer + value;
                if (Array.isArray(node)) {
                    /** @type {number} */
                    var key = 0;
                    for (;key < node.length;key++) {
                        val = node[key];
                        BUFFER = name + filter(val, key);
                        result += parse(val, BUFFER, callback, deepDataAndEvents);
                    }
                } else {
                    var block = dom(node);
                    if (block) {
                        var _ref;
                        var source = block.call(node);
                        if (block !== node.entries) {
                            /** @type {number} */
                            var y = 0;
                            for (;!(_ref = source.next()).done;) {
                                val = _ref.value;
                                BUFFER = name + filter(val, y++);
                                result += parse(val, BUFFER, callback, deepDataAndEvents);
                            }
                        } else {
                            indexOf(dontCloseTags, "Using Maps as children is not yet fully supported. It is an experimental feature that might be removed. Convert it to a sequence / iterable of keyed ReactElements instead.");
                            /** @type {boolean} */
                            dontCloseTags = true;
                            for (;!(_ref = source.next()).done;) {
                                var list = _ref.value;
                                if (list) {
                                    val = list[1];
                                    /** @type {string} */
                                    BUFFER = name + trim(list[0]) + value + filter(val, 0);
                                    result += parse(val, BUFFER, callback, deepDataAndEvents);
                                }
                            }
                        }
                    } else {
                        if ("object" === type) {
                            /** @type {string} */
                            var later = "";
                            if (later = " If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons.", node._isReactElement && (later = " It looks like you're using an element created by a different version of React. Make sure to use only one copy of React."), player.current) {
                                var B = player.current.getName();
                                if (B) {
                                    later += " Check the render method of `" + B + "`.";
                                }
                            }
                            /** @type {string} */
                            var length = String(node);
                            inspect(false, "Objects are not valid as a React child (found: %s).%s", "[object Object]" === length ? "object with keys {" + Object.keys(node).join(", ") + "}" : length, later);
                        }
                    }
                }
                return result;
            }
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @return {?}
             */
            function Map(name, recurring, deepDataAndEvents) {
                return null == name ? 0 : parse(name, "", recurring, deepDataAndEvents);
            }
            var player = require(39);
            var nodes = require(57);
            var a = require(67);
            var dom = require(129);
            var inspect = require(161);
            var indexOf = require(173);
            var cur = a.SEPARATOR;
            /** @type {string} */
            var value = ":";
            var $cookies = {
                "=" : "=0",
                "." : "=1",
                ":" : "=2"
            };
            /** @type {RegExp} */
            var r20 = /[=.:]/g;
            /** @type {boolean} */
            var dontCloseTags = false;
            /** @type {function (string, Function, Object): ?} */
            module.exports = Map;
        }, {
            129 : 129,
            161 : 161,
            173 : 173,
            39 : 39,
            57 : 57,
            67 : 67
        }],
        143 : [function(require, module, dataAndEvents) {
            /**
             * @param {Object} node
             * @return {?}
             */
            function parse(node) {
                return Array.isArray(node) ? node.concat() : node && "object" == typeof node ? merge(new node.constructor, node) : node;
            }
            /**
             * @param {string} res
             * @param {Object} params
             * @param {string} name
             * @return {undefined}
             */
            function emit(res, params, name) {
                if (Array.isArray(res)) {
                    void 0;
                } else {
                    fn(false, "update(): expected target of %s to be an array; got %s.", name, res);
                }
                var param = params[name];
                if (Array.isArray(param)) {
                    void 0;
                } else {
                    fn(false, "update(): expected spec of %s to be an array; got %s. Did you forget to wrap your parameter in an array?", name, param);
                }
            }
            /**
             * @param {string} name
             * @param {Function} recurring
             * @return {?}
             */
            function bind(name, recurring) {
                if ("object" != typeof recurring ? fn(false, "update(): You provided a key path to update() that did not contain one of %s. Did you forget to include {%s: ...}?", args.join(", "), param) : void 0, self.call(recurring, param)) {
                    return 1 !== Object.keys(recurring).length ? fn(false, "Cannot have more than one key in an object with %s", param) : void 0, recurring[param];
                }
                var data = parse(name);
                if (self.call(recurring, j)) {
                    var arr = recurring[j];
                    if (arr && "object" == typeof arr) {
                        void 0;
                    } else {
                        fn(false, "update(): %s expects a spec of type 'object'; got %s", j, arr);
                    }
                    if (data && "object" == typeof data) {
                        void 0;
                    } else {
                        fn(false, "update(): %s expects a target of type 'object'; got %s", j, data);
                    }
                    merge(data, recurring[j]);
                }
                if (self.call(recurring, event)) {
                    emit(name, recurring, event);
                    recurring[event].forEach(function(value) {
                        data.push(value);
                    });
                }
                if (self.call(recurring, method)) {
                    emit(name, recurring, method);
                    recurring[method].forEach(function(item) {
                        data.unshift(item);
                    });
                }
                if (self.call(recurring, value)) {
                    if (Array.isArray(name)) {
                        void 0;
                    } else {
                        fn(false, "Expected %s target to be an array; got %s", value, name);
                    }
                    if (Array.isArray(recurring[value])) {
                        void 0;
                    } else {
                        fn(false, "update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?", value, recurring[value]);
                    }
                    recurring[value].forEach(function(paths) {
                        if (Array.isArray(paths)) {
                            void 0;
                        } else {
                            fn(false, "update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?", value, recurring[value]);
                        }
                        data.splice.apply(data, paths);
                    });
                }
                if (self.call(recurring, index)) {
                    if ("function" != typeof recurring[index]) {
                        fn(false, "update(): expected spec of %s to be a function; got %s.", index, recurring[index]);
                    } else {
                        void 0;
                    }
                    data = recurring[index](data);
                }
                var i;
                for (i in recurring) {
                    if (!(af.hasOwnProperty(i) && af[i])) {
                        data[i] = bind(name[i], recurring[i]);
                    }
                }
                return data;
            }
            var merge = require(24);
            var valueAccessor = require(166);
            var fn = require(161);
            /** @type {function (this:Object, *): boolean} */
            var self = {}.hasOwnProperty;
            var event = valueAccessor({
                $push : null
            });
            var method = valueAccessor({
                $unshift : null
            });
            var value = valueAccessor({
                $splice : null
            });
            var param = valueAccessor({
                $set : null
            });
            var j = valueAccessor({
                $merge : null
            });
            var index = valueAccessor({
                $apply : null
            });
            /** @type {Array} */
            var args = [event, method, value, param, j, index];
            var af = {};
            args.forEach(function(i) {
                /** @type {boolean} */
                af[i] = true;
            });
            /** @type {function (string, Function): ?} */
            module.exports = bind;
        }, {
            161 : 161,
            166 : 166,
            24 : 24
        }],
        144 : [function(require, module, dataAndEvents) {
            var debug = require(24);
            var Block = require(153);
            var assert = require(173);
            var update = Block;
            /** @type {Array} */
            var tags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed",
                "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            /** @type {Array} */
            var names = ["applet", "caption", "html", "table", "td", "th", "marquee", "object", "template", "foreignObject", "desc", "title"];
            /** @type {Array} */
            var selfClosing = names.concat(["button"]);
            /** @type {Array} */
            var option = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var fx = {
                parentTag : null,
                formTag : null,
                aTagInScope : null,
                buttonTagInScope : null,
                nobrTagInScope : null,
                pTagInButtonScope : null,
                listItemTagAutoclosing : null,
                dlItemTagAutoclosing : null
            };
            /**
             * @param {Object} type
             * @param {string} name
             * @param {Object} attr
             * @return {?}
             */
            var init = function(type, name, attr) {
                var settings = debug({}, type || fx);
                var opts = {
                    tag : name,
                    instance : attr
                };
                return names.indexOf(name) !== -1 && (settings.aTagInScope = null, settings.buttonTagInScope = null, settings.nobrTagInScope = null), selfClosing.indexOf(name) !== -1 && (settings.pTagInButtonScope = null), tags.indexOf(name) !== -1 && ("address" !== name && ("div" !== name && ("p" !== name && (settings.listItemTagAutoclosing = null, settings.dlItemTagAutoclosing = null)))), settings.parentTag = opts, "form" === name && (settings.formTag = opts), "a" === name && (settings.aTagInScope = opts),
                "button" === name && (settings.buttonTagInScope = opts), "nobr" === name && (settings.nobrTagInScope = opts), "p" === name && (settings.pTagInButtonScope = opts), "li" === name && (settings.listItemTagAutoclosing = opts), "dd" !== name && "dt" !== name || (settings.dlItemTagAutoclosing = opts), settings;
            };
            /**
             * @param {string} tag
             * @param {string} optgroup
             * @return {?}
             */
            var compileSchema = function(tag, optgroup) {
                switch(optgroup) {
                    case "select":
                        return "option" === tag || ("optgroup" === tag || "#text" === tag);
                    case "optgroup":
                        return "option" === tag || "#text" === tag;
                    case "option":
                        return "#text" === tag;
                    case "tr":
                        return "th" === tag || ("td" === tag || ("style" === tag || ("script" === tag || "template" === tag)));
                    case "tbody":
                        ;
                    case "thead":
                        ;
                    case "tfoot":
                        return "tr" === tag || ("style" === tag || ("script" === tag || "template" === tag));
                    case "colgroup":
                        return "col" === tag || "template" === tag;
                    case "table":
                        return "caption" === tag || ("colgroup" === tag || ("tbody" === tag || ("tfoot" === tag || ("thead" === tag || ("style" === tag || ("script" === tag || "template" === tag))))));
                    case "head":
                        return "base" === tag || ("basefont" === tag || ("bgsound" === tag || ("link" === tag || ("meta" === tag || ("title" === tag || ("noscript" === tag || ("noframes" === tag || ("style" === tag || ("script" === tag || "template" === tag)))))))));
                    case "html":
                        return "head" === tag || "body" === tag;
                }
                switch(tag) {
                    case "h1":
                        ;
                    case "h2":
                        ;
                    case "h3":
                        ;
                    case "h4":
                        ;
                    case "h5":
                        ;
                    case "h6":
                        return "h1" !== optgroup && ("h2" !== optgroup && ("h3" !== optgroup && ("h4" !== optgroup && ("h5" !== optgroup && "h6" !== optgroup))));
                    case "rp":
                        ;
                    case "rt":
                        return option.indexOf(optgroup) === -1;
                    case "caption":
                        ;
                    case "col":
                        ;
                    case "colgroup":
                        ;
                    case "frame":
                        ;
                    case "head":
                        ;
                    case "tbody":
                        ;
                    case "td":
                        ;
                    case "tfoot":
                        ;
                    case "th":
                        ;
                    case "thead":
                        ;
                    case "tr":
                        return null == optgroup;
                }
                return true;
            };
            /**
             * @param {string} p
             * @param {Object} deepDataAndEvents
             * @return {?}
             */
            var Redactor = function(p, deepDataAndEvents) {
                switch(p) {
                    case "address":
                        ;
                    case "article":
                        ;
                    case "aside":
                        ;
                    case "blockquote":
                        ;
                    case "center":
                        ;
                    case "details":
                        ;
                    case "dialog":
                        ;
                    case "dir":
                        ;
                    case "div":
                        ;
                    case "dl":
                        ;
                    case "fieldset":
                        ;
                    case "figcaption":
                        ;
                    case "figure":
                        ;
                    case "footer":
                        ;
                    case "header":
                        ;
                    case "hgroup":
                        ;
                    case "main":
                        ;
                    case "menu":
                        ;
                    case "nav":
                        ;
                    case "ol":
                        ;
                    case "p":
                        ;
                    case "section":
                        ;
                    case "summary":
                        ;
                    case "ul":
                        ;
                    case "pre":
                        ;
                    case "listing":
                        ;
                    case "table":
                        ;
                    case "hr":
                        ;
                    case "xmp":
                        ;
                    case "h1":
                        ;
                    case "h2":
                        ;
                    case "h3":
                        ;
                    case "h4":
                        ;
                    case "h5":
                        ;
                    case "h6":
                        return deepDataAndEvents.pTagInButtonScope;
                    case "form":
                        return deepDataAndEvents.formTag || deepDataAndEvents.pTagInButtonScope;
                    case "li":
                        return deepDataAndEvents.listItemTagAutoclosing;
                    case "dd":
                        ;
                    case "dt":
                        return deepDataAndEvents.dlItemTagAutoclosing;
                    case "button":
                        return deepDataAndEvents.buttonTagInScope;
                    case "a":
                        return deepDataAndEvents.aTagInScope;
                    case "nobr":
                        return deepDataAndEvents.nobrTagInScope;
                }
                return null;
            };
            /**
             * @param {(Object|string)} value
             * @return {?}
             */
            var range = function(value) {
                if (!value) {
                    return[];
                }
                /** @type {Array} */
                var unique = [];
                do {
                    unique.push(value);
                } while (value = value._currentElement._owner);
                return unique.reverse(), unique;
            };
            var map = {};
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @return {undefined}
             */
            update = function(name, recurring, deepDataAndEvents) {
                deepDataAndEvents = deepDataAndEvents || fx;
                var selector = deepDataAndEvents.parentTag;
                var $parent = selector && selector.tag;
                var fn = compileSchema(name, $parent) ? null : selector;
                var value = fn ? null : Redactor(name, deepDataAndEvents);
                var self = fn || value;
                if (self) {
                    var index;
                    var result = self.tag;
                    var core = self.instance;
                    var udataCur = recurring && recurring._currentElement._owner;
                    var pdataOld = core && core._currentElement._owner;
                    var expected = range(udataCur);
                    var actual = range(pdataOld);
                    /** @type {number} */
                    var max_count = Math.min(expected.length, actual.length);
                    /** @type {number} */
                    var i = -1;
                    /** @type {number} */
                    index = 0;
                    for (;index < max_count && expected[index] === actual[index];index++) {
                        /** @type {number} */
                        i = index;
                    }
                    /** @type {string} */
                    var x = "(unknown)";
                    var outname = expected.slice(i + 1).map(function(field) {
                        return field.getName() || x;
                    });
                    var caseInsensitive = actual.slice(i + 1).map(function(field) {
                        return field.getName() || x;
                    });
                    /** @type {string} */
                    var r20 = [].concat(i !== -1 ? expected[i].getName() || x : [], caseInsensitive, result, value ? ["..."] : [], outname, name).join(" > ");
                    /** @type {string} */
                    var objUid = !!fn + "|" + name + "|" + result + "|" + r20;
                    if (map[objUid]) {
                        return;
                    }
                    if (map[objUid] = true, fn) {
                        /** @type {string} */
                        var later = "";
                        if ("table" === result) {
                            if ("tr" === name) {
                                later += " Add a <tbody> to your code to match the DOM tree generated by the browser.";
                            }
                        }
                        assert(false, "validateDOMNesting(...): <%s> cannot appear as a child of <%s>. See %s.%s", name, result, r20, later);
                    } else {
                        assert(false, "validateDOMNesting(...): <%s> cannot appear as a descendant of <%s>. See %s.", name, result, r20);
                    }
                }
            };
            /** @type {string} */
            update.ancestorInfoContextKey = "__validateDOMNesting_ancestorInfo$" + Math.random().toString(36).slice(2);
            /** @type {function (Object, string, Object): ?} */
            update.updatedAncestorInfo = init;
            /**
             * @param {string} tag
             * @param {Object} type
             * @return {?}
             */
            update.isTagValidInContext = function(tag, type) {
                type = type || fx;
                var selector = type.parentTag;
                var $parent = selector && selector.tag;
                return compileSchema(tag, $parent) && !Redactor(tag, type);
            };
            /** @type {function (string, Function, Object): undefined} */
            module.exports = update;
        }, {
            153 : 153,
            173 : 173,
            24 : 24
        }],
        145 : [function($sanitize, module, dataAndEvents) {
            var jQuery = $sanitize(161);
            var obj = {
                /**
                 * @param {string} name
                 * @param {string} className
                 * @return {?}
                 */
                addClass : function(name, className) {
                    return/\s/.test(className) ? jQuery(false, 'CSSCore.addClass takes only a single class name. "%s" contains multiple classes.', className) : void 0, className && (name.classList ? name.classList.add(className) : obj.hasClass(name, className) || (name.className = name.className + " " + className)), name;
                },
                /**
                 * @param {string} name
                 * @param {string} className
                 * @return {?}
                 */
                removeClass : function(name, className) {
                    return/\s/.test(className) ? jQuery(false, 'CSSCore.removeClass takes only a single class name. "%s" contains multiple classes.', className) : void 0, className && (name.classList ? name.classList.remove(className) : obj.hasClass(name, className) && (name.className = name.className.replace(new RegExp("(^|\\s)" + className + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, ""))), name;
                },
                /**
                 * @param {string} checkSet
                 * @param {string} className
                 * @param {boolean} bool
                 * @return {?}
                 */
                conditionClass : function(checkSet, className, bool) {
                    return(bool ? obj.addClass : obj.removeClass)(checkSet, className);
                },
                /**
                 * @param {Node} name
                 * @param {string} selector
                 * @return {?}
                 */
                hasClass : function(name, selector) {
                    return/\s/.test(selector) ? jQuery(false, "CSS.hasClass takes only a single class name.") : void 0, name.classList ? !!selector && name.classList.contains(selector) : (" " + name.className + " ").indexOf(" " + selector + " ") > -1;
                }
            };
            module.exports = obj;
        }, {
            161 : 161
        }],
        146 : [function(format, module, dataAndEvents) {
            var f = format(153);
            var obj = {
                /**
                 * @param {Object} el
                 * @param {string} type
                 * @param {Function} recurring
                 * @return {?}
                 */
                listen : function(el, type, recurring) {
                    return el.addEventListener ? (el.addEventListener(type, recurring, false), {
                        /**
                         * @return {undefined}
                         */
                        remove : function() {
                            el.removeEventListener(type, recurring, false);
                        }
                    }) : el.attachEvent ? (el.attachEvent("on" + type, recurring), {
                        /**
                         * @return {undefined}
                         */
                        remove : function() {
                            el.detachEvent("on" + type, recurring);
                        }
                    }) : void 0;
                },
                /**
                 * @param {HTMLElement} el
                 * @param {string} event
                 * @param {string} callback
                 * @return {?}
                 */
                capture : function(el, event, callback) {
                    return el.addEventListener ? (el.addEventListener(event, callback, true), {
                        /**
                         * @return {undefined}
                         */
                        remove : function() {
                            el.removeEventListener(event, callback, true);
                        }
                    }) : (console.error("Attempted to listen to events during the capture phase on a browser that does not support the capture phase. Your application will not receive some events."), {
                        remove : f
                    });
                },
                /**
                 * @return {undefined}
                 */
                registerDefault : function() {
                }
            };
            module.exports = obj;
        }, {
            153 : 153
        }],
        147 : [function(dataAndEvents, module, deepDataAndEvents) {
            /** @type {boolean} */
            var canUseEventListeners = !("undefined" == typeof window || (!window.document || !window.document.createElement));
            var JsDiff = {
                canUseDOM : canUseEventListeners,
                canUseWorkers : "undefined" != typeof Worker,
                canUseEventListeners : canUseEventListeners && !(!window.addEventListener && !window.attachEvent),
                canUseViewport : canUseEventListeners && !!window.screen,
                isInWorker : !canUseEventListeners
            };
            module.exports = JsDiff;
        }, {}],
        148 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function toCamelCase(name) {
                return name.replace(r20, function(dataAndEvents, letter) {
                    return letter.toUpperCase();
                });
            }
            /** @type {RegExp} */
            var r20 = /-(.)/g;
            /** @type {function (string): ?} */
            module.exports = toCamelCase;
        }, {}],
        149 : [function(require, module, dataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function data(name) {
                return getActual(name.replace(r20, "ms-"));
            }
            var getActual = require(148);
            /** @type {RegExp} */
            var r20 = /^-ms-/;
            /** @type {function (string): ?} */
            module.exports = data;
        }, {
            148 : 148
        }],
        150 : [function($sanitize, module, dataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @return {?}
             */
            function contains(name, recurring) {
                /** @type {boolean} */
                var c = true;
                a: for (;c;) {
                    /** @type {string} */
                    var a = name;
                    /** @type {Function} */
                    var b = recurring;
                    if (c = false, a && b) {
                        if (a === b) {
                            return true;
                        }
                        if (isUndefinedOrNull(a)) {
                            return false;
                        }
                        if (isUndefinedOrNull(b)) {
                            name = a;
                            recurring = b.parentNode;
                            /** @type {boolean} */
                            c = true;
                            continue a;
                        }
                        return a.contains ? a.contains(b) : !!a.compareDocumentPosition && !!(16 & a.compareDocumentPosition(b));
                    }
                    return false;
                }
            }
            var isUndefinedOrNull = $sanitize(163);
            /** @type {function (string, Function): ?} */
            module.exports = contains;
        }, {
            163 : 163
        }],
        151 : [function(prim, module, dataAndEvents) {
            /**
             * @param {?} obj
             * @return {?}
             */
            function isArrayLike(obj) {
                return!!obj && (("object" == typeof obj || "function" == typeof obj) && ("length" in obj && (!("setInterval" in obj) && ("number" != typeof obj.nodeType && (Array.isArray(obj) || ("callee" in obj || "item" in obj))))));
            }
            /**
             * @param {string} name
             * @return {?}
             */
            function resolve(name) {
                return isArrayLike(name) ? Array.isArray(name) ? name.slice() : next(name) : [name];
            }
            var next = prim(172);
            /** @type {function (string): ?} */
            module.exports = resolve;
        }, {
            172 : 172
        }],
        152 : [function(require, module, dataAndEvents) {
            /**
             * @param {string} elem
             * @return {?}
             */
            function next(elem) {
                var tokens = elem.match(optgroup);
                return tokens && tokens[1].toLowerCase();
            }
            /**
             * @param {string} name
             * @param {Function} recurring
             * @return {?}
             */
            function init(name, recurring) {
                /** @type {(Element|null)} */
                var el = startTouchEl;
                if (startTouchEl) {
                    void 0;
                } else {
                    path(false, "createNodesFromMarkup dummy not initialized");
                }
                var src = next(name);
                var args = src && isObject(src);
                if (args) {
                    el.innerHTML = args[1] + name + args[2];
                    var pageY = args[0];
                    for (;pageY--;) {
                        /** @type {(Node|null)} */
                        el = el.lastChild;
                    }
                } else {
                    /** @type {string} */
                    el.innerHTML = name;
                }
                var scripts = el.getElementsByTagName("script");
                if (scripts.length) {
                    if (recurring) {
                        void 0;
                    } else {
                        path(false, "createNodesFromMarkup(...): Unexpected <script> element rendered.");
                    }
                    makeArray(scripts).forEach(recurring);
                }
                var arr = makeArray(el.childNodes);
                for (;el.lastChild;) {
                    el.removeChild(el.lastChild);
                }
                return arr;
            }
            var ua = require(147);
            var makeArray = require(151);
            var isObject = require(157);
            var path = require(161);
            /** @type {(Element|null)} */
            var startTouchEl = ua.canUseDOM ? document.createElement("div") : null;
            /** @type {RegExp} */
            var optgroup = /^\s*<(\w+)/;
            /** @type {function (string, Function): ?} */
            module.exports = init;
        }, {
            147 : 147,
            151 : 151,
            157 : 157,
            161 : 161
        }],
        153 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {Object} recurring
             * @return {?}
             */
            function tokenString(recurring) {
                return function() {
                    return recurring;
                };
            }
            /**
             * @return {undefined}
             */
            function state() {
            }
            /** @type {function (Object): ?} */
            state.thatReturns = tokenString;
            state.thatReturnsFalse = tokenString(false);
            state.thatReturnsTrue = tokenString(true);
            state.thatReturnsNull = tokenString(null);
            /**
             * @return {?}
             */
            state.thatReturnsThis = function() {
                return this;
            };
            /**
             * @param {Function} elem
             * @return {?}
             */
            state.thatReturnsArgument = function(elem) {
                return elem;
            };
            /** @type {function (): undefined} */
            module.exports = state;
        }, {}],
        154 : [function(dataAndEvents, module, deepDataAndEvents) {
            var tests = {};
            Object.freeze(tests);
            module.exports = tests;
        }, {}],
        155 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {string} name
             * @return {undefined}
             */
            function prop(name) {
                try {
                    name.focus();
                } catch (b) {
                }
            }
            /** @type {function (string): undefined} */
            module.exports = prop;
        }, {}],
        156 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @return {?}
             */
            function setup() {
                if ("undefined" == typeof document) {
                    return null;
                }
                try {
                    return document.activeElement || document.body;
                } catch (a) {
                    return document.body;
                }
            }
            /** @type {function (): ?} */
            module.exports = setup;
        }, {}],
        157 : [function(require, module, dataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function setup(name) {
                return content ? void 0 : newBindings(false, "Markup wrapping node not initialized"), cfg.hasOwnProperty(name) || (name = "*"), types.hasOwnProperty(name) || ("*" === name ? content.innerHTML = "<link />" : content.innerHTML = "<" + name + "></" + name + ">", types[name] = !content.firstChild), types[name] ? cfg[name] : null;
            }
            var ua = require(147);
            var newBindings = require(161);
            /** @type {(Element|null)} */
            var content = ua.canUseDOM ? document.createElement("div") : null;
            var types = {};
            /** @type {Array} */
            var option = [1, '<select multiple="true">', "</select>"];
            /** @type {Array} */
            var table = [1, "<table>", "</table>"];
            /** @type {Array} */
            var td = [3, "<table><tbody><tr>", "</tr></tbody></table>"];
            /** @type {Array} */
            var val = [1, '<svg xmlns="http://www.w3.org/2000/svg">', "</svg>"];
            var cfg = {
                "*" : [1, "?<div>", "</div>"],
                area : [1, "<map>", "</map>"],
                col : [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
                legend : [1, "<fieldset>", "</fieldset>"],
                param : [1, "<object>", "</object>"],
                tr : [2, "<table><tbody>", "</tbody></table>"],
                optgroup : option,
                option : option,
                caption : table,
                colgroup : table,
                tbody : table,
                tfoot : table,
                thead : table,
                td : td,
                th : td
            };
            /** @type {Array} */
            var keys = ["circle", "clipPath", "defs", "ellipse", "g", "image", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "text", "tspan"];
            keys.forEach(function(key) {
                /** @type {Array} */
                cfg[key] = val;
                /** @type {boolean} */
                types[key] = true;
            });
            /** @type {function (string): ?} */
            module.exports = setup;
        }, {
            147 : 147,
            161 : 161
        }],
        158 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function listener(name) {
                return name === window ? {
                    x : window.pageXOffset || document.documentElement.scrollLeft,
                    y : window.pageYOffset || document.documentElement.scrollTop
                } : {
                    x : name.scrollLeft,
                    y : name.scrollTop
                };
            }
            /** @type {function (string): ?} */
            module.exports = listener;
        }, {}],
        159 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function data(name) {
                return name.replace(r20, "-$1").toLowerCase();
            }
            /** @type {RegExp} */
            var r20 = /([A-Z])/g;
            /** @type {function (string): ?} */
            module.exports = data;
        }, {}],
        160 : [function($sanitize, module, dataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function prop(name) {
                return ondata(name).replace(r20, "-ms-");
            }
            var ondata = $sanitize(159);
            /** @type {RegExp} */
            var r20 = /^ms-/;
            /** @type {function (string): ?} */
            module.exports = prop;
        }, {
            159 : 159
        }],
        161 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @param {Object} dataAndEvents
             * @param {?} fn
             * @param {?} listener
             * @param {?} obj
             * @param {?} f
             * @return {undefined}
             */
            function on(name, recurring, deepDataAndEvents, dataAndEvents, fn, listener, obj, f) {
                if (void 0 === recurring) {
                    throw new Error("invariant requires an error message argument");
                }
                if (!name) {
                    var error;
                    if (void 0 === recurring) {
                        /** @type {Error} */
                        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
                    } else {
                        /** @type {Array} */
                        var attrNames = [deepDataAndEvents, dataAndEvents, fn, listener, obj, f];
                        /** @type {number} */
                        var i = 0;
                        /** @type {Error} */
                        error = new Error(recurring.replace(/%s/g, function() {
                            return attrNames[i++];
                        }));
                        /** @type {string} */
                        error.name = "Invariant Violation";
                    }
                    throw error.framesToPop = 1, error;
                }
            }
            /** @type {function (string, Function, Object, Object, ?, ?, ?, ?): undefined} */
            module.exports = on;
        }, {}],
        162 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function select(name) {
                return!(!name || !("function" == typeof Node ? name instanceof Node : "object" == typeof name && ("number" == typeof name.nodeType && "string" == typeof name.nodeName)));
            }
            /** @type {function (string): ?} */
            module.exports = select;
        }, {}],
        163 : [function(require, module, dataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function constructor(name) {
                return assert(name) && 3 == name.nodeType;
            }
            var assert = require(162);
            /** @type {function (string): ?} */
            module.exports = constructor;
        }, {
            162 : 162
        }],
        164 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function getName(name) {
                if (!name) {
                    /** @type {string} */
                    name = "";
                }
                var x;
                /** @type {number} */
                var argLength = arguments.length;
                if (argLength > 1) {
                    /** @type {number} */
                    var i = 1;
                    for (;i < argLength;i++) {
                        x = arguments[i];
                        if (x) {
                            /** @type {string} */
                            name = (name ? name + " " : "") + x;
                        }
                    }
                }
                return name;
            }
            /** @type {function (string): ?} */
            module.exports = getName;
        }, {}],
        165 : [function(iterator, module, dataAndEvents) {
            var key = iterator(161);
            /**
             * @param {string} name
             * @return {?}
             */
            var map = function(name) {
                var i;
                var m = {};
                if (name instanceof Object && !Array.isArray(name)) {
                    void 0;
                } else {
                    key(false, "keyMirror(...): Argument must be an object.");
                }
                for (i in name) {
                    if (name.hasOwnProperty(i)) {
                        /** @type {string} */
                        m[i] = i;
                    }
                }
                return m;
            };
            /** @type {function (string): ?} */
            module.exports = map;
        }, {
            161 : 161
        }],
        166 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            var resolve = function(name) {
                var a;
                for (a in name) {
                    if (name.hasOwnProperty(a)) {
                        return a;
                    }
                }
                return null;
            };
            /** @type {function (string): ?} */
            module.exports = resolve;
        }, {}],
        167 : [function(dataAndEvents, config, deepDataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @param {Object} deepDataAndEvents
             * @return {?}
             */
            function clone(name, recurring, deepDataAndEvents) {
                if (!name) {
                    return null;
                }
                var copy = {};
                var i;
                for (i in name) {
                    if (has.call(name, i)) {
                        copy[i] = recurring.call(deepDataAndEvents, name[i], i, name);
                    }
                }
                return copy;
            }
            /** @type {function (this:Object, *): boolean} */
            var has = Object.prototype.hasOwnProperty;
            /** @type {function (string, Function, Object): ?} */
            config.exports = clone;
        }, {}],
        168 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function prop(name) {
                var attributes = {};
                return function($1) {
                    return attributes.hasOwnProperty($1) || (attributes[$1] = name.call(this, $1)), attributes[$1];
                };
            }
            /** @type {function (string): ?} */
            module.exports = prop;
        }, {}],
        169 : [function(require, module, dataAndEvents) {
            var exports;
            var Block = require(147);
            if (Block.canUseDOM) {
                exports = window.performance || (window.msPerformance || window.webkitPerformance);
            }
            module.exports = exports || {};
        }, {
            147 : 147
        }],
        170 : [function(require, module, dataAndEvents) {
            var JsDiff;
            var util = require(169);
            /** @type {function (): ?} */
            JsDiff = util.now ? function() {
                return util.now();
            } : function() {
                return Date.now();
            };
            /** @type {function (): ?} */
            module.exports = JsDiff;
        }, {
            169 : 169
        }],
        171 : [function(dataAndEvents, module, deepDataAndEvents) {
            /**
             * @param {string} name
             * @param {Function} recurring
             * @return {?}
             */
            function run(name, recurring) {
                if (name === recurring) {
                    return true;
                }
                if ("object" != typeof name || (null === name || ("object" != typeof recurring || null === recurring))) {
                    return false;
                }
                /** @type {Array.<string>} */
                var parts = Object.keys(name);
                /** @type {Array.<string>} */
                var fparts = Object.keys(recurring);
                if (parts.length !== fparts.length) {
                    return false;
                }
                var trim = content.bind(recurring);
                /** @type {number} */
                var i = 0;
                for (;i < parts.length;i++) {
                    if (!trim(parts[i]) || name[parts[i]] !== recurring[parts[i]]) {
                        return false;
                    }
                }
                return true;
            }
            /** @type {function (this:Object, *): boolean} */
            var content = Object.prototype.hasOwnProperty;
            /** @type {function (string, Function): ?} */
            module.exports = run;
        }, {}],
        172 : [function(format, module, dataAndEvents) {
            /**
             * @param {string} name
             * @return {?}
             */
            function array(name) {
                var length = name.length;
                if (Array.isArray(name) || "object" != typeof name && "function" != typeof name ? f(false, "toArray: Array-like object expected") : void 0, "number" != typeof length ? f(false, "toArray: Object needs a length property") : void 0, 0 === length || length - 1 in name ? void 0 : f(false, "toArray: Object should have keys for indices"), name.hasOwnProperty) {
                    try {
                        return Array.prototype.slice.call(name);
                    } catch (c) {
                    }
                }
                /** @type {Array} */
                var array = Array(length);
                /** @type {number} */
                var ix = 0;
                for (;ix < length;ix++) {
                    array[ix] = name[ix];
                }
                return array;
            }
            var f = format(161);
            /** @type {function (string): ?} */
            module.exports = array;
        }, {
            161 : 161
        }],
        173 : [function(Constructor, module, dataAndEvents) {
            var object = Constructor(153);
            var on = object;
            /**
             * @param {string} name
             * @param {Function} recurring
             * @return {undefined}
             */
            on = function(name, recurring) {
                /** @type {number} */
                var len = arguments.length;
                /** @type {Array} */
                var result = Array(len > 2 ? len - 2 : 0);
                /** @type {number} */
                var i = 2;
                for (;i < len;i++) {
                    result[i - 2] = arguments[i];
                }
                if (void 0 === recurring) {
                    throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
                }
                if (0 !== recurring.indexOf("Failed Composite propType: ") && !name) {
                    /** @type {number} */
                    var ri = 0;
                    var optgroup = "Warning: " + recurring.replace(/%s/g, function() {
                        return result[ri++];
                    });
                    if ("undefined" != typeof console) {
                        console.error(optgroup);
                    }
                    try {
                        throw new Error(optgroup);
                    } catch (h) {
                    }
                }
            };
            /** @type {function (string, Function): undefined} */
            module.exports = on;
        }, {
            153 : 153
        }]
    }, {}, [1])(1);
}), function(factory) {
    if ("object" == typeof exports && "undefined" != typeof module) {
        module.exports = factory(require("react"));
    } else {
        if ("function" == typeof define && define.amd) {
            define(["react"], factory);
        } else {
            var root;
            root = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this;
            root.ReactDOM = factory(root.React);
        }
    }
}(function(dataAndEvents) {
    return dataAndEvents.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
});
/**
 * @param {string} name
 * @param {Object} params
 * @return {undefined}
 */
var Swiper = function(name, params) {
    /**
     * @param {string} optgroup
     * @param {Object} context
     * @return {?}
     */
    function $$(optgroup, context) {
        return document.querySelectorAll ? (context || document).querySelectorAll(optgroup) : jQuery(optgroup, context);
    }
    /**
     * @param {?} object
     * @return {?}
     */
    function isArray(object) {
        return "[object Array]" === Object.prototype.toString.apply(object);
    }
    /**
     * @return {?}
     */
    function maxWrapperPosition() {
        /** @type {number} */
        var a = wrapperSize - containerSize;
        return params.freeMode && (a = wrapperSize - containerSize), params.slidesPerView > _this.slides.length && (!params.centeredSlides && (a = 0)), a < 0 && (a = 0), a;
    }
    /**
     * @return {undefined}
     */
    function initEvents() {
        /**
         * @param {Element} el
         * @return {undefined}
         */
        function load(el) {
            var image;
            var path;
            /**
             * @return {undefined}
             */
            var onLoad = function() {
                if ("undefined" != typeof _this) {
                    if (null !== _this) {
                        if (void 0 !== _this.imagesLoaded) {
                            _this.imagesLoaded++;
                        }
                        if (_this.imagesLoaded === _this.imagesToLoad.length) {
                            _this.reInit();
                            if (params.onImagesReady) {
                                _this.fireCallback(params.onImagesReady, _this);
                            }
                        }
                    }
                }
            };
            if (el.complete) {
                onLoad();
            } else {
                path = el.currentSrc || el.getAttribute("src");
                if (path) {
                    /** @type {Image} */
                    image = new Image;
                    /** @type {function (): undefined} */
                    image.onload = onLoad;
                    /** @type {function (): undefined} */
                    image.onerror = onLoad;
                    image.src = path;
                } else {
                    onLoad();
                }
            }
        }
        var bind = _this.h.addEventListener;
        var touchstart = "wrapper" === params.eventTarget ? _this.wrapper : _this.container;
        if (_this.browser.ie10 || _this.browser.ie11 ? (bind(touchstart, _this.touchEvents.touchStart, onTouchStart), bind(document, _this.touchEvents.touchMove, onTouchMove), bind(document, _this.touchEvents.touchEnd, onTouchEnd)) : (_this.support.touch && (bind(touchstart, "touchstart", onTouchStart), bind(touchstart, "touchmove", onTouchMove), bind(touchstart, "touchend", onTouchEnd)), params.simulateTouch && (bind(touchstart, "mousedown", onTouchStart), bind(document, "mousemove", onTouchMove), bind(document,
                "mouseup", onTouchEnd))), params.autoResize && bind(window, "resize", _this.resizeFix), addSlideEvents(), _this._wheelEvent = false, params.mousewheelControl) {
            if (void 0 !== document.onmousewheel && (_this._wheelEvent = "mousewheel"), !_this._wheelEvent) {
                try {
                    new WheelEvent("wheel");
                    /** @type {string} */
                    _this._wheelEvent = "wheel";
                } catch (f) {
                }
            }
            if (!_this._wheelEvent) {
                /** @type {string} */
                _this._wheelEvent = "DOMMouseScroll";
            }
            if (_this._wheelEvent) {
                bind(_this.container, _this._wheelEvent, handleMousewheel);
            }
        }
        if (params.keyboardControl && bind(document, "keydown", handleKeyboardKeys), params.updateOnImagesReady) {
            _this.imagesToLoad = $$("img", _this.container);
            /** @type {number} */
            var i = 0;
            for (;i < _this.imagesToLoad.length;i++) {
                load(_this.imagesToLoad[i]);
            }
        }
    }
    /**
     * @return {undefined}
     */
    function addSlideEvents() {
        var i;
        var bind = _this.h.addEventListener;
        if (params.preventLinks) {
            var links = $$("a", _this.container);
            /** @type {number} */
            i = 0;
            for (;i < links.length;i++) {
                bind(links[i], "click", preventClick);
            }
        }
        if (params.releaseFormElements) {
            var codeSegments = $$("input, textarea, select", _this.container);
            /** @type {number} */
            i = 0;
            for (;i < codeSegments.length;i++) {
                bind(codeSegments[i], _this.touchEvents.touchStart, releaseForms, true);
                if (_this.support.touch) {
                    if (params.simulateTouch) {
                        bind(codeSegments[i], "mousedown", releaseForms, true);
                    }
                }
            }
        }
        if (params.onSlideClick) {
            /** @type {number} */
            i = 0;
            for (;i < _this.slides.length;i++) {
                bind(_this.slides[i], "click", slideClick);
            }
        }
        if (params.onSlideTouch) {
            /** @type {number} */
            i = 0;
            for (;i < _this.slides.length;i++) {
                bind(_this.slides[i], _this.touchEvents.touchStart, slideTouch);
            }
        }
    }
    /**
     * @return {undefined}
     */
    function removeSlideEvents() {
        var i;
        var unbind = _this.h.removeEventListener;
        if (params.onSlideClick) {
            /** @type {number} */
            i = 0;
            for (;i < _this.slides.length;i++) {
                unbind(_this.slides[i], "click", slideClick);
            }
        }
        if (params.onSlideTouch) {
            /** @type {number} */
            i = 0;
            for (;i < _this.slides.length;i++) {
                unbind(_this.slides[i], _this.touchEvents.touchStart, slideTouch);
            }
        }
        if (params.releaseFormElements) {
            var codeSegments = $$("input, textarea, select", _this.container);
            /** @type {number} */
            i = 0;
            for (;i < codeSegments.length;i++) {
                unbind(codeSegments[i], _this.touchEvents.touchStart, releaseForms, true);
                if (_this.support.touch) {
                    if (params.simulateTouch) {
                        unbind(codeSegments[i], "mousedown", releaseForms, true);
                    }
                }
            }
        }
        if (params.preventLinks) {
            var links = $$("a", _this.container);
            /** @type {number} */
            i = 0;
            for (;i < links.length;i++) {
                unbind(links[i], "click", preventClick);
            }
        }
    }
    /**
     * @param {Event} e
     * @return {undefined}
     */
    function handleKeyboardKeys(e) {
        var code = e.keyCode || e.charCode;
        if (!(e.shiftKey || (e.altKey || (e.ctrlKey || e.metaKey)))) {
            if (37 === code || (39 === code || (38 === code || 40 === code))) {
                /** @type {boolean} */
                var c = false;
                var swiperOffset = _this.h.getOffset(_this.container);
                var x = _this.h.windowScroll().left;
                var base = _this.h.windowScroll().top;
                var delta = _this.h.windowWidth();
                var post = _this.h.windowHeight();
                /** @type {Array} */
                var resultItems = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + _this.width, swiperOffset.top], [swiperOffset.left, swiperOffset.top + _this.height], [swiperOffset.left + _this.width, swiperOffset.top + _this.height]];
                /** @type {number} */
                var i = 0;
                for (;i < resultItems.length;i++) {
                    var result = resultItems[i];
                    if (result[0] >= x) {
                        if (result[0] <= x + delta) {
                            if (result[1] >= base) {
                                if (result[1] <= base + post) {
                                    /** @type {boolean} */
                                    c = true;
                                }
                            }
                        }
                    }
                }
                if (!c) {
                    return;
                }
            }
            if (isH) {
                if (!(37 !== code && 39 !== code)) {
                    if (e.preventDefault) {
                        e.preventDefault();
                    } else {
                        /** @type {boolean} */
                        e.returnValue = false;
                    }
                }
                if (39 === code) {
                    _this.swipeNext();
                }
                if (37 === code) {
                    _this.swipePrev();
                }
            } else {
                if (!(38 !== code && 40 !== code)) {
                    if (e.preventDefault) {
                        e.preventDefault();
                    } else {
                        /** @type {boolean} */
                        e.returnValue = false;
                    }
                }
                if (40 === code) {
                    _this.swipeNext();
                }
                if (38 === code) {
                    _this.swipePrev();
                }
            }
        }
    }
    /**
     * @param {Function} e
     * @return {?}
     */
    function handleMousewheel(e) {
        var we = _this._wheelEvent;
        /** @type {number} */
        var deltaY = 0;
        if (e.detail) {
            /** @type {number} */
            deltaY = -e.detail;
        } else {
            if ("mousewheel" === we) {
                if (params.mousewheelControlForceToAxis) {
                    if (isH) {
                        if (!(Math.abs(e.wheelDeltaX) > Math.abs(e.wheelDeltaY))) {
                            return;
                        }
                        deltaY = e.wheelDeltaX;
                    } else {
                        if (!(Math.abs(e.wheelDeltaY) > Math.abs(e.wheelDeltaX))) {
                            return;
                        }
                        deltaY = e.wheelDeltaY;
                    }
                } else {
                    deltaY = e.wheelDelta;
                }
            } else {
                if ("DOMMouseScroll" === we) {
                    /** @type {number} */
                    deltaY = -e.detail;
                } else {
                    if ("wheel" === we) {
                        if (params.mousewheelControlForceToAxis) {
                            if (isH) {
                                if (!(Math.abs(e.deltaX) > Math.abs(e.deltaY))) {
                                    return;
                                }
                                /** @type {number} */
                                deltaY = -e.deltaX;
                            } else {
                                if (!(Math.abs(e.deltaY) > Math.abs(e.deltaX))) {
                                    return;
                                }
                                /** @type {number} */
                                deltaY = -e.deltaY;
                            }
                        } else {
                            /** @type {number} */
                            deltaY = Math.abs(e.deltaX) > Math.abs(e.deltaY) ? -e.deltaX : -e.deltaY;
                        }
                    }
                }
            }
        }
        if (params.freeMode) {
            var newPosition = _this.getWrapperTranslate() + deltaY;
            if (newPosition > 0 && (newPosition = 0), newPosition < -maxWrapperPosition() && (newPosition = -maxWrapperPosition()), _this.setWrapperTransition(0), _this.setWrapperTranslate(newPosition), _this.updateActiveSlide(newPosition), 0 === newPosition || newPosition === -maxWrapperPosition()) {
                return;
            }
        } else {
            if ((new Date).getTime() - V > 60) {
                if (deltaY < 0) {
                    _this.swipeNext();
                } else {
                    _this.swipePrev();
                }
            }
            /** @type {number} */
            V = (new Date).getTime();
        }
        return params.autoplay && _this.stopAutoplay(true), e.preventDefault ? e.preventDefault() : e.returnValue = false, false;
    }
    /**
     * @param {Event} event
     * @return {undefined}
     */
    function slideClick(event) {
        if (_this.allowSlideClick) {
            setClickedSlide(event);
            _this.fireCallback(params.onSlideClick, _this, event);
        }
    }
    /**
     * @param {Event} event
     * @return {undefined}
     */
    function slideTouch(event) {
        setClickedSlide(event);
        _this.fireCallback(params.onSlideTouch, _this, event);
    }
    /**
     * @param {Event} event
     * @return {undefined}
     */
    function setClickedSlide(event) {
        if (event.currentTarget) {
            _this.clickedSlide = event.currentTarget;
        } else {
            var element = event.srcElement;
            do {
                if (element.className.indexOf(params.slideClass) > -1) {
                    break;
                }
                element = element.parentNode;
            } while (element);
            _this.clickedSlide = element;
        }
        _this.clickedSlideIndex = _this.slides.indexOf(_this.clickedSlide);
        /** @type {number} */
        _this.clickedSlideLoopIndex = _this.clickedSlideIndex - (_this.loopedSlides || 0);
    }
    /**
     * @param {Object} event
     * @return {?}
     */
    function preventClick(event) {
        if (!_this.allowLinks) {
            return event.preventDefault ? event.preventDefault() : event.returnValue = false, params.preventLinksPropagation && ("stopPropagation" in event && event.stopPropagation()), false;
        }
    }
    /**
     * @param {Event} e
     * @return {?}
     */
    function releaseForms(e) {
        return e.stopPropagation ? e.stopPropagation() : e.returnValue = false, false;
    }
    /**
     * @param {Event} e
     * @return {?}
     */
    function onTouchStart(e) {
        if (params.preventLinks && (_this.allowLinks = true), _this.isTouched || params.onlyExternal) {
            return false;
        }
        var input = e.target || e.srcElement;
        if (document.activeElement) {
            if (document.activeElement !== document.body) {
                if (document.activeElement !== input) {
                    document.activeElement.blur();
                }
            }
        }
        /** @type {Array.<string>} */
        var excludes = "input select textarea".split(" ");
        if (params.noSwiping && (input && noSwipingSlide(input))) {
            return false;
        }
        if (_ = false, _this.isTouched = true, last = "touchstart" === e.type, !last && ("which" in e && 3 === e.which)) {
            return _this.isTouched = false, false;
        }
        if (!last || 1 === e.targetTouches.length) {
            _this.callPlugins("onTouchStartBegin");
            if (!last) {
                if (!_this.isAndroid) {
                    if (excludes.indexOf(input.tagName.toLowerCase()) < 0) {
                        if (e.preventDefault) {
                            e.preventDefault();
                        } else {
                            /** @type {boolean} */
                            e.returnValue = false;
                        }
                    }
                }
            }
            var pageX = last ? e.targetTouches[0].pageX : e.pageX || e.clientX;
            var pageY = last ? e.targetTouches[0].pageY : e.pageY || e.clientY;
            _this.touches.startX = _this.touches.currentX = pageX;
            _this.touches.startY = _this.touches.currentY = pageY;
            _this.touches.start = _this.touches.current = isH ? pageX : pageY;
            _this.setWrapperTransition(0);
            _this.positions.start = _this.positions.current = _this.getWrapperTranslate();
            _this.setWrapperTranslate(_this.positions.start);
            /** @type {number} */
            _this.times.start = (new Date).getTime();
            io = void 0;
            if (params.moveStartThreshold > 0) {
                /** @type {boolean} */
                X = false;
            }
            if (params.onTouchStart) {
                _this.fireCallback(params.onTouchStart, _this, e);
            }
            _this.callPlugins("onTouchStartEnd");
        }
    }
    /**
     * @param {Event} event
     * @return {?}
     */
    function onTouchMove(event) {
        if (_this.isTouched && (!params.onlyExternal && (!last || "mousemove" !== event.type))) {
            var pageX = last ? event.targetTouches[0].pageX : event.pageX || event.clientX;
            var pageY = last ? event.targetTouches[0].pageY : event.pageY || event.clientY;
            if ("undefined" == typeof io && (isH && (io = !!(io || Math.abs(pageY - _this.touches.startY) > Math.abs(pageX - _this.touches.startX)))), "undefined" != typeof io || (isH || (io = !!(io || Math.abs(pageY - _this.touches.startY) < Math.abs(pageX - _this.touches.startX)))), io) {
                return void(_this.isTouched = false);
            }
            if (isH) {
                if (!params.swipeToNext && pageX < _this.touches.startX || !params.swipeToPrev && pageX > _this.touches.startX) {
                    return;
                }
            } else {
                if (!params.swipeToNext && pageY < _this.touches.startY || !params.swipeToPrev && pageY > _this.touches.startY) {
                    return;
                }
            }
            if (event.assignedToSwiper) {
                return void(_this.isTouched = false);
            }
            if (event.assignedToSwiper = true, params.preventLinks && (_this.allowLinks = false), params.onSlideClick && (_this.allowSlideClick = false), params.autoplay && _this.stopAutoplay(true), !last || 1 === event.touches.length) {
                if (_this.isMoved || (_this.callPlugins("onTouchMoveStart"), params.loop && (_this.fixLoop(), _this.positions.start = _this.getWrapperTranslate()), params.onTouchMoveStart && _this.fireCallback(params.onTouchMoveStart, _this)), _this.isMoved = true, event.preventDefault ? event.preventDefault() : event.returnValue = false, _this.touches.current = isH ? pageX : pageY, _this.positions.current = (_this.touches.current - _this.touches.start) * params.touchRatio + _this.positions.start, _this.positions.current >
                    0 && (params.onResistanceBefore && _this.fireCallback(params.onResistanceBefore, _this, _this.positions.current)), _this.positions.current < -maxWrapperPosition() && (params.onResistanceAfter && _this.fireCallback(params.onResistanceAfter, _this, Math.abs(_this.positions.current + maxWrapperPosition()))), params.resistance && "100%" !== params.resistance) {
                    var resistance;
                    if (_this.positions.current > 0 && (resistance = 1 - _this.positions.current / containerSize / 2, resistance < 0.5 ? _this.positions.current = containerSize / 2 : _this.positions.current = _this.positions.current * resistance), _this.positions.current < -maxWrapperPosition()) {
                        var diff = (_this.touches.current - _this.touches.start) * params.touchRatio + (maxWrapperPosition() + _this.positions.start);
                        /** @type {number} */
                        resistance = (containerSize + diff) / containerSize;
                        /** @type {number} */
                        var newPos = _this.positions.current - diff * (1 - resistance) / 2;
                        /** @type {number} */
                        var stopPos = -maxWrapperPosition() - containerSize / 2;
                        if (newPos < stopPos || resistance <= 0) {
                            /** @type {number} */
                            _this.positions.current = stopPos;
                        } else {
                            /** @type {number} */
                            _this.positions.current = newPos;
                        }
                    }
                }
                if (params.resistance && ("100%" === params.resistance && (_this.positions.current > 0 && ((!params.freeMode || params.freeModeFluid) && (_this.positions.current = 0)), _this.positions.current < -maxWrapperPosition() && ((!params.freeMode || params.freeModeFluid) && (_this.positions.current = -maxWrapperPosition())))), !params.followFinger) {
                    return;
                }
                if (params.moveStartThreshold) {
                    if (Math.abs(_this.touches.current - _this.touches.start) > params.moveStartThreshold || X) {
                        if (!X) {
                            return X = true, void(_this.touches.start = _this.touches.current);
                        }
                        _this.setWrapperTranslate(_this.positions.current);
                    } else {
                        _this.positions.current = _this.positions.start;
                    }
                } else {
                    _this.setWrapperTranslate(_this.positions.current);
                }
                return(params.freeMode || params.watchActiveIndex) && _this.updateActiveSlide(_this.positions.current), params.grabCursor && (_this.container.style.cursor = "move", _this.container.style.cursor = "grabbing", _this.container.style.cursor = "-moz-grabbin", _this.container.style.cursor = "-webkit-grabbing"), velocityPrevPosition || (velocityPrevPosition = _this.touches.current), velocityPrevTime || (velocityPrevTime = (new Date).getTime()), _this.velocity = (_this.touches.current - velocityPrevPosition) /
                    ((new Date).getTime() - velocityPrevTime) / 2, Math.abs(_this.touches.current - velocityPrevPosition) < 2 && (_this.velocity = 0), velocityPrevPosition = _this.touches.current, velocityPrevTime = (new Date).getTime(), _this.callPlugins("onTouchMoveEnd"), params.onTouchMove && _this.fireCallback(params.onTouchMove, _this, event), false;
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    function onTouchEnd(e) {
        if (io && _this.swipeReset(), !params.onlyExternal && _this.isTouched) {
            /** @type {boolean} */
            _this.isTouched = false;
            if (params.grabCursor) {
                /** @type {string} */
                _this.container.style.cursor = "move";
                /** @type {string} */
                _this.container.style.cursor = "grab";
                /** @type {string} */
                _this.container.style.cursor = "-moz-grab";
                /** @type {string} */
                _this.container.style.cursor = "-webkit-grab";
            }
            if (!_this.positions.current) {
                if (!(0 === _this.positions.current)) {
                    _this.positions.current = _this.positions.start;
                }
            }
            if (params.followFinger) {
                _this.setWrapperTranslate(_this.positions.current);
            }
            /** @type {number} */
            _this.times.end = (new Date).getTime();
            /** @type {number} */
            _this.touches.diff = _this.touches.current - _this.touches.start;
            /** @type {number} */
            _this.touches.abs = Math.abs(_this.touches.diff);
            /** @type {number} */
            _this.positions.diff = _this.positions.current - _this.positions.start;
            /** @type {number} */
            _this.positions.abs = Math.abs(_this.positions.diff);
            /** @type {number} */
            var diff = _this.positions.diff;
            /** @type {number} */
            var diffAbs = _this.positions.abs;
            /** @type {number} */
            var f = _this.times.end - _this.times.start;
            if (diffAbs < 5) {
                if (f < 300) {
                    if (_this.allowLinks === false) {
                        if (!params.freeMode) {
                            if (!(0 === diffAbs)) {
                                _this.swipeReset();
                            }
                        }
                        if (params.preventLinks) {
                            /** @type {boolean} */
                            _this.allowLinks = true;
                        }
                        if (params.onSlideClick) {
                            /** @type {boolean} */
                            _this.allowSlideClick = true;
                        }
                    }
                }
            }
            setTimeout(function() {
                if ("undefined" != typeof _this) {
                    if (null !== _this) {
                        if (params.preventLinks) {
                            /** @type {boolean} */
                            _this.allowLinks = true;
                        }
                        if (params.onSlideClick) {
                            /** @type {boolean} */
                            _this.allowSlideClick = true;
                        }
                    }
                }
            }, 100);
            var maxPosition = maxWrapperPosition();
            if (!_this.isMoved && params.freeMode) {
                return _this.isMoved = false, params.onTouchEnd && _this.fireCallback(params.onTouchEnd, _this, e), void _this.callPlugins("onTouchEnd");
            }
            if (!_this.isMoved || (_this.positions.current > 0 || _this.positions.current < -maxPosition)) {
                return _this.swipeReset(), params.onTouchEnd && _this.fireCallback(params.onTouchEnd, _this, e), void _this.callPlugins("onTouchEnd");
            }
            if (_this.isMoved = false, params.freeMode) {
                if (params.freeModeFluid) {
                    var afterBouncePosition;
                    /** @type {number} */
                    var momentumDuration = 1E3 * params.momentumRatio;
                    /** @type {number} */
                    var momentumDistance = _this.velocity * momentumDuration;
                    var newPosition = _this.positions.current + momentumDistance;
                    /** @type {boolean} */
                    var l = false;
                    /** @type {number} */
                    var bounceAmount = 20 * Math.abs(_this.velocity) * params.momentumBounceRatio;
                    if (newPosition < -maxPosition) {
                        if (params.momentumBounce && _this.support.transitions) {
                            if (newPosition + maxPosition < -bounceAmount) {
                                /** @type {number} */
                                newPosition = -maxPosition - bounceAmount;
                            }
                            /** @type {number} */
                            afterBouncePosition = -maxPosition;
                            /** @type {boolean} */
                            l = true;
                            /** @type {boolean} */
                            _ = true;
                        } else {
                            /** @type {number} */
                            newPosition = -maxPosition;
                        }
                    }
                    if (newPosition > 0) {
                        if (params.momentumBounce && _this.support.transitions) {
                            if (newPosition > bounceAmount) {
                                /** @type {number} */
                                newPosition = bounceAmount;
                            }
                            /** @type {number} */
                            afterBouncePosition = 0;
                            /** @type {boolean} */
                            l = true;
                            /** @type {boolean} */
                            _ = true;
                        } else {
                            /** @type {number} */
                            newPosition = 0;
                        }
                    }
                    if (0 !== _this.velocity) {
                        /** @type {number} */
                        momentumDuration = Math.abs((newPosition - _this.positions.current) / _this.velocity);
                    }
                    _this.setWrapperTranslate(newPosition);
                    _this.setWrapperTransition(momentumDuration);
                    if (params.momentumBounce) {
                        if (l) {
                            _this.wrapperTransitionEnd(function() {
                                if (_) {
                                    if (params.onMomentumBounce) {
                                        _this.fireCallback(params.onMomentumBounce, _this);
                                    }
                                    _this.callPlugins("onMomentumBounce");
                                    _this.setWrapperTranslate(afterBouncePosition);
                                    _this.setWrapperTransition(300);
                                }
                            });
                        }
                    }
                    _this.updateActiveSlide(newPosition);
                }
                return(!params.freeModeFluid || f >= 300) && _this.updateActiveSlide(_this.positions.current), params.onTouchEnd && _this.fireCallback(params.onTouchEnd, _this, e), void _this.callPlugins("onTouchEnd");
            }
            /** @type {string} */
            direction = diff < 0 ? "toNext" : "toPrev";
            if ("toNext" === direction) {
                if (f <= 300) {
                    if (diffAbs < 30 || !params.shortSwipes) {
                        _this.swipeReset();
                    } else {
                        _this.swipeNext(true, true);
                    }
                }
            }
            if ("toPrev" === direction) {
                if (f <= 300) {
                    if (diffAbs < 30 || !params.shortSwipes) {
                        _this.swipeReset();
                    } else {
                        _this.swipePrev(true, true);
                    }
                }
            }
            /** @type {number} */
            var targetSlideSize = 0;
            if ("auto" === params.slidesPerView) {
                var _slideSize;
                /** @type {number} */
                var b = Math.abs(_this.getWrapperTranslate());
                /** @type {number} */
                var a = 0;
                /** @type {number} */
                var i = 0;
                for (;i < _this.slides.length;i++) {
                    if (_slideSize = isH ? _this.slides[i].getWidth(true, params.roundLengths) : _this.slides[i].getHeight(true, params.roundLengths), a += _slideSize, a > b) {
                        targetSlideSize = _slideSize;
                        break;
                    }
                }
                if (targetSlideSize > containerSize) {
                    targetSlideSize = containerSize;
                }
            } else {
                /** @type {number} */
                targetSlideSize = slideSize * params.slidesPerView;
            }
            if ("toNext" === direction) {
                if (f > 300) {
                    if (diffAbs >= targetSlideSize * params.longSwipesRatio) {
                        _this.swipeNext(true, true);
                    } else {
                        _this.swipeReset();
                    }
                }
            }
            if ("toPrev" === direction) {
                if (f > 300) {
                    if (diffAbs >= targetSlideSize * params.longSwipesRatio) {
                        _this.swipePrev(true, true);
                    } else {
                        _this.swipeReset();
                    }
                }
            }
            if (params.onTouchEnd) {
                _this.fireCallback(params.onTouchEnd, _this, e);
            }
            _this.callPlugins("onTouchEnd");
        }
    }
    /**
     * @param {HTMLElement} obj
     * @param {string} klass
     * @return {?}
     */
    function bind(obj, klass) {
        return obj && (obj.getAttribute("class") && obj.getAttribute("class").indexOf(klass) > -1);
    }
    /**
     * @param {EventTarget} el
     * @return {?}
     */
    function noSwipingSlide(el) {
        /** @type {boolean} */
        var c = false;
        do {
            if (bind(el, params.noSwipingClass)) {
                /** @type {boolean} */
                c = true;
            }
            el = el.parentElement;
        } while (!c && (el.parentElement && !bind(el, params.wrapperClass)));
        return!c && (bind(el, params.wrapperClass) && (bind(el, params.noSwipingClass) && (c = true))), c;
    }
    /**
     * @param {string} name
     * @param {?} node
     * @return {?}
     */
    function load(name, node) {
        var elem;
        /** @type {Element} */
        var el = document.createElement("div");
        return el.innerHTML = node, elem = el.firstChild, elem.className += " " + name, elem.outerHTML;
    }
    /**
     * @param {number} newPosition
     * @param {string} state
     * @param {?} opt_attributes
     * @return {undefined}
     */
    function swipeToPosition(newPosition, state, opt_attributes) {
        /**
         * @return {undefined}
         */
        function anim() {
            /** @type {number} */
            var a = +new Date;
            /** @type {number} */
            var b4 = a - b;
            currentPosition += a1 * b4 / (1E3 / 60);
            /** @type {boolean} */
            k = "toNext" === direction ? currentPosition > newPosition : currentPosition < newPosition;
            if (k) {
                _this.setWrapperTranslate(Math.ceil(currentPosition));
                /** @type {boolean} */
                _this._DOMAnimating = true;
                window.setTimeout(function() {
                    anim();
                }, 1E3 / 60);
            } else {
                if (params.onSlideChangeEnd) {
                    if ("to" === state) {
                        if (opt_attributes.runCallbacks === true) {
                            _this.fireCallback(params.onSlideChangeEnd, _this, direction);
                        }
                    } else {
                        _this.fireCallback(params.onSlideChangeEnd, _this, direction);
                    }
                }
                _this.setWrapperTranslate(newPosition);
                /** @type {boolean} */
                _this._DOMAnimating = false;
            }
        }
        var speed = "to" === state && opt_attributes.speed >= 0 ? opt_attributes.speed : params.speed;
        /** @type {number} */
        var b = +new Date;
        if (_this.support.transitions || !params.DOMAnimation) {
            _this.setWrapperTranslate(newPosition);
            _this.setWrapperTransition(speed);
        } else {
            var currentPosition = _this.getWrapperTranslate();
            /** @type {number} */
            var a1 = Math.ceil((newPosition - currentPosition) / speed * (1E3 / 60));
            /** @type {string} */
            var direction = currentPosition > newPosition ? "toNext" : "toPrev";
            /** @type {boolean} */
            var k = "toNext" === direction ? currentPosition > newPosition : currentPosition < newPosition;
            if (_this._DOMAnimating) {
                return;
            }
            anim();
        }
        _this.updateActiveSlide(newPosition);
        if (params.onSlideNext) {
            if ("next" === state) {
                if (opt_attributes.runCallbacks === true) {
                    _this.fireCallback(params.onSlideNext, _this, newPosition);
                }
            }
        }
        if (params.onSlidePrev) {
            if ("prev" === state) {
                if (opt_attributes.runCallbacks === true) {
                    _this.fireCallback(params.onSlidePrev, _this, newPosition);
                }
            }
        }
        if (params.onSlideReset) {
            if ("reset" === state) {
                if (opt_attributes.runCallbacks === true) {
                    _this.fireCallback(params.onSlideReset, _this, newPosition);
                }
            }
        }
        if (!("next" !== state && ("prev" !== state && "to" !== state))) {
            if (!(opt_attributes.runCallbacks !== true)) {
                slideChangeCallbacks(state);
            }
        }
    }
    /**
     * @param {string} index
     * @return {undefined}
     */
    function slideChangeCallbacks(index) {
        if (_this.callPlugins("onSlideChangeStart"), params.onSlideChangeStart) {
            if (params.queueStartCallbacks && _this.support.transitions) {
                if (_this._queueStartCallbacks) {
                    return;
                }
                /** @type {boolean} */
                _this._queueStartCallbacks = true;
                _this.fireCallback(params.onSlideChangeStart, _this, index);
                _this.wrapperTransitionEnd(function() {
                    /** @type {boolean} */
                    _this._queueStartCallbacks = false;
                });
            } else {
                _this.fireCallback(params.onSlideChangeStart, _this, index);
            }
        }
        if (params.onSlideChangeEnd) {
            if (_this.support.transitions) {
                if (params.queueEndCallbacks) {
                    if (_this._queueEndCallbacks) {
                        return;
                    }
                    /** @type {boolean} */
                    _this._queueEndCallbacks = true;
                    _this.wrapperTransitionEnd(function(err) {
                        _this.fireCallback(params.onSlideChangeEnd, err, index);
                    });
                } else {
                    _this.wrapperTransitionEnd(function(err) {
                        _this.fireCallback(params.onSlideChangeEnd, err, index);
                    });
                }
            } else {
                if (!params.DOMAnimation) {
                    setTimeout(function() {
                        _this.fireCallback(params.onSlideChangeEnd, _this, index);
                    }, 10);
                }
            }
        }
    }
    /**
     * @return {undefined}
     */
    function removePaginationEvents() {
        var pagers = _this.paginationButtons;
        if (pagers) {
            /** @type {number} */
            var i = 0;
            for (;i < pagers.length;i++) {
                _this.h.removeEventListener(pagers[i], "click", recurring);
            }
        }
    }
    /**
     * @return {undefined}
     */
    function addPaginationEvents() {
        var pagers = _this.paginationButtons;
        if (pagers) {
            /** @type {number} */
            var i = 0;
            for (;i < pagers.length;i++) {
                _this.h.addEventListener(pagers[i], "click", recurring);
            }
        }
    }
    /**
     * @param {Event} event
     * @return {undefined}
     */
    function recurring(event) {
        var newIndex;
        var elem = event.target || event.srcElement;
        var codeSegments = _this.paginationButtons;
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
            if (elem === codeSegments[i]) {
                /** @type {number} */
                newIndex = i;
            }
        }
        if (params.autoplay) {
            _this.stopAutoplay(true);
        }
        _this.swipeTo(newIndex);
    }
    /**
     * @return {undefined}
     */
    function playSound() {
        /** @type {number} */
        tref = setTimeout(function() {
            if (params.loop) {
                _this.fixLoop();
                _this.swipeNext(true, true);
            } else {
                if (!_this.swipeNext(true, true)) {
                    if (params.autoplayStopOnLast) {
                        clearTimeout(tref);
                        tref = void 0;
                    } else {
                        _this.swipeTo(0);
                    }
                }
            }
            _this.wrapperTransitionEnd(function() {
                if ("undefined" != typeof tref) {
                    playSound();
                }
            });
        }, params.autoplay);
    }
    /**
     * @return {undefined}
     */
    function makeSwiper() {
        _this.calcSlides();
        if (params.loader.slides.length > 0) {
            if (0 === _this.slides.length) {
                _this.loadSlides();
            }
        }
        if (params.loop) {
            _this.createLoop();
        }
        _this.init();
        initEvents();
        if (params.pagination) {
            _this.createPagination(true);
        }
        if (params.loop || params.initialSlide > 0) {
            _this.swipeTo(params.initialSlide, 0, false);
        } else {
            _this.updateActiveSlide(0);
        }
        if (params.autoplay) {
            _this.startAutoplay();
        }
        _this.centerIndex = _this.activeIndex;
        if (params.onSwiperCreated) {
            _this.fireCallback(params.onSwiperCreated, _this);
        }
        _this.callPlugins("onSwiperCreated");
    }
    if (!document.body.outerHTML && (document.body.__defineGetter__ && HTMLElement)) {
        var element = HTMLElement.prototype;
        if (element.__defineGetter__) {
            element.__defineGetter__("outerHTML", function() {
                return(new XMLSerializer).serializeToString(this);
            });
        }
    }
    if (window.getComputedStyle || (window.getComputedStyle = function(element, mayParseLabeledStatementInstead) {
            return this.el = element, this.getPropertyValue = function(prop) {
                /** @type {RegExp} */
                var rclass = /(\-([a-z]){1})/g;
                return "float" === prop && (prop = "styleFloat"), rclass.test(prop) && (prop = prop.replace(rclass, function() {
                    return arguments[2].toUpperCase();
                })), element.currentStyle[prop] ? element.currentStyle[prop] : null;
            }, this;
        }), Array.prototype.indexOf || (Array.prototype.indexOf = function(name, recurring) {
            /** @type {number} */
            var i = recurring || 0;
            /** @type {number} */
            var l = this.length;
            for (;i < l;i++) {
                if (this[i] === name) {
                    return i;
                }
            }
            return-1;
        }), (document.querySelectorAll || window.jQuery) && ("undefined" != typeof name && (name.nodeType || 0 !== $$(name).length))) {
        var _this = this;
        _this.touches = {
            start : 0,
            startX : 0,
            startY : 0,
            current : 0,
            currentX : 0,
            currentY : 0,
            diff : 0,
            abs : 0
        };
        _this.positions = {
            start : 0,
            abs : 0,
            diff : 0,
            current : 0
        };
        _this.times = {
            start : 0,
            end : 0
        };
        /** @type {number} */
        _this.id = (new Date).getTime();
        _this.container = name.nodeType ? name : $$(name)[0];
        /** @type {boolean} */
        _this.isTouched = false;
        /** @type {boolean} */
        _this.isMoved = false;
        /** @type {number} */
        _this.activeIndex = 0;
        /** @type {number} */
        _this.centerIndex = 0;
        /** @type {number} */
        _this.activeLoaderIndex = 0;
        /** @type {number} */
        _this.activeLoopIndex = 0;
        /** @type {null} */
        _this.previousIndex = null;
        /** @type {number} */
        _this.velocity = 0;
        /** @type {Array} */
        _this.snapGrid = [];
        /** @type {Array} */
        _this.slidesGrid = [];
        /** @type {Array} */
        _this.imagesToLoad = [];
        /** @type {number} */
        _this.imagesLoaded = 0;
        /** @type {number} */
        _this.wrapperLeft = 0;
        /** @type {number} */
        _this.wrapperRight = 0;
        /** @type {number} */
        _this.wrapperTop = 0;
        /** @type {number} */
        _this.wrapperBottom = 0;
        /** @type {boolean} */
        _this.isAndroid = navigator.userAgent.toLowerCase().indexOf("android") >= 0;
        var wrapper;
        var slideSize;
        var wrapperSize;
        var direction;
        var io;
        var containerSize;
        var defaults = {
            eventTarget : "wrapper",
            mode : "horizontal",
            touchRatio : 1,
            speed : 300,
            freeMode : false,
            freeModeFluid : false,
            momentumRatio : 1,
            momentumBounce : true,
            momentumBounceRatio : 1,
            slidesPerView : 1,
            slidesPerGroup : 1,
            slidesPerViewFit : true,
            simulateTouch : true,
            followFinger : true,
            shortSwipes : true,
            longSwipesRatio : 0.5,
            moveStartThreshold : false,
            onlyExternal : false,
            createPagination : true,
            pagination : false,
            paginationElement : "span",
            paginationClickable : false,
            paginationAsRange : true,
            resistance : true,
            scrollContainer : false,
            preventLinks : true,
            preventLinksPropagation : false,
            noSwiping : false,
            noSwipingClass : "swiper-no-swiping",
            initialSlide : 0,
            keyboardControl : false,
            mousewheelControl : false,
            mousewheelControlForceToAxis : false,
            useCSS3Transforms : true,
            autoplay : false,
            autoplayDisableOnInteraction : true,
            autoplayStopOnLast : false,
            loop : false,
            loopAdditionalSlides : 0,
            roundLengths : false,
            calculateHeight : false,
            cssWidthAndHeight : false,
            updateOnImagesReady : true,
            releaseFormElements : true,
            watchActiveIndex : false,
            visibilityFullFit : false,
            offsetPxBefore : 0,
            offsetPxAfter : 0,
            offsetSlidesBefore : 0,
            offsetSlidesAfter : 0,
            centeredSlides : false,
            queueStartCallbacks : false,
            queueEndCallbacks : false,
            autoResize : true,
            resizeReInit : false,
            DOMAnimation : true,
            loader : {
                slides : [],
                slidesHTMLType : "inner",
                surroundGroups : 1,
                logic : "reload",
                loadAllSlides : false
            },
            swipeToPrev : true,
            swipeToNext : true,
            slideElement : "div",
            slideClass : "swiper-slide",
            slideActiveClass : "swiper-slide-active",
            slideVisibleClass : "swiper-slide-visible",
            slideDuplicateClass : "swiper-slide-duplicate",
            wrapperClass : "swiper-wrapper",
            paginationElementClass : "swiper-pagination-switch",
            paginationActiveClass : "swiper-active-switch",
            paginationVisibleClass : "swiper-visible-switch"
        };
        params = params || {};
        var prop;
        for (prop in defaults) {
            if (prop in params && "object" == typeof params[prop]) {
                var subProp;
                for (subProp in defaults[prop]) {
                    if (!(subProp in params[prop])) {
                        params[prop][subProp] = defaults[prop][subProp];
                    }
                }
            } else {
                if (!(prop in params)) {
                    params[prop] = defaults[prop];
                }
            }
        }
        /** @type {Object} */
        _this.params = params;
        if (params.scrollContainer) {
            /** @type {boolean} */
            params.freeMode = true;
            /** @type {boolean} */
            params.freeModeFluid = true;
        }
        if (params.loop) {
            /** @type {string} */
            params.resistance = "100%";
        }
        /** @type {boolean} */
        var isH = "horizontal" === params.mode;
        /** @type {Array} */
        var types = ["mousedown", "mousemove", "mouseup"];
        if (_this.browser.ie10) {
            /** @type {Array} */
            types = ["MSPointerDown", "MSPointerMove", "MSPointerUp"];
        }
        if (_this.browser.ie11) {
            /** @type {Array} */
            types = ["pointerdown", "pointermove", "pointerup"];
        }
        _this.touchEvents = {
            touchStart : _this.support.touch || !params.simulateTouch ? "touchstart" : types[0],
            touchMove : _this.support.touch || !params.simulateTouch ? "touchmove" : types[1],
            touchEnd : _this.support.touch || !params.simulateTouch ? "touchend" : types[2]
        };
        /** @type {number} */
        var i = _this.container.childNodes.length - 1;
        for (;i >= 0;i--) {
            if (_this.container.childNodes[i].className) {
                var _wrapperClasses = _this.container.childNodes[i].className.split(/\s+/);
                /** @type {number} */
                var j = 0;
                for (;j < _wrapperClasses.length;j++) {
                    if (_wrapperClasses[j] === params.wrapperClass) {
                        wrapper = _this.container.childNodes[i];
                    }
                }
            }
        }
        _this.wrapper = wrapper;
        /**
         * @param {Object} el
         * @return {?}
         */
        _this._extendSwiperSlide = function(el) {
            return el.append = function() {
                return params.loop ? el.insertAfter(_this.slides.length - _this.loopedSlides) : (_this.wrapper.appendChild(el), _this.reInit()), el;
            }, el.prepend = function() {
                return params.loop ? (_this.wrapper.insertBefore(el, _this.slides[_this.loopedSlides]), _this.removeLoopedSlides(), _this.calcSlides(), _this.createLoop()) : _this.wrapper.insertBefore(el, _this.wrapper.firstChild), _this.reInit(), el;
            }, el.insertAfter = function(index) {
                if ("undefined" == typeof index) {
                    return false;
                }
                var selector;
                return params.loop ? (selector = _this.slides[index + 1 + _this.loopedSlides], selector ? _this.wrapper.insertBefore(el, selector) : _this.wrapper.appendChild(el), _this.removeLoopedSlides(), _this.calcSlides(), _this.createLoop()) : (selector = _this.slides[index + 1], _this.wrapper.insertBefore(el, selector)), _this.reInit(), el;
            }, el.clone = function() {
                return _this._extendSwiperSlide(el.cloneNode(true));
            }, el.remove = function() {
                _this.wrapper.removeChild(el);
                _this.reInit();
            }, el.html = function(html) {
                return "undefined" == typeof html ? el.innerHTML : (el.innerHTML = html, el);
            }, el.index = function() {
                var ret;
                /** @type {number} */
                var i = _this.slides.length - 1;
                for (;i >= 0;i--) {
                    if (el === _this.slides[i]) {
                        /** @type {number} */
                        ret = i;
                    }
                }
                return ret;
            }, el.isActive = function() {
                return el.index() === _this.activeIndex;
            }, el.swiperSlideDataStorage || (el.swiperSlideDataStorage = {}), el.getData = function(name) {
                return el.swiperSlideDataStorage[name];
            }, el.setData = function(name, value) {
                return el.swiperSlideDataStorage[name] = value, el;
            }, el.data = function(name, recurring) {
                return "undefined" == typeof recurring ? el.getAttribute("data-" + name) : (el.setAttribute("data-" + name, recurring), el);
            }, el.getWidth = function(deepDataAndEvents, recurring) {
                return _this.h.getWidth(el, deepDataAndEvents, recurring);
            }, el.getHeight = function(deepDataAndEvents, recurring) {
                return _this.h.getHeight(el, deepDataAndEvents, recurring);
            }, el.getOffset = function() {
                return _this.h.getOffset(el);
            }, el;
        };
        /**
         * @param {boolean} dataAndEvents
         * @return {undefined}
         */
        _this.calcSlides = function(dataAndEvents) {
            var len = !!_this.slides && _this.slides.length;
            /** @type {Array} */
            _this.slides = [];
            /** @type {Array} */
            _this.displaySlides = [];
            /** @type {number} */
            var i = 0;
            for (;i < _this.wrapper.childNodes.length;i++) {
                if (_this.wrapper.childNodes[i].className) {
                    var _className = _this.wrapper.childNodes[i].className;
                    var _slideClasses = _className.split(/\s+/);
                    /** @type {number} */
                    var j = 0;
                    for (;j < _slideClasses.length;j++) {
                        if (_slideClasses[j] === params.slideClass) {
                            _this.slides.push(_this.wrapper.childNodes[i]);
                        }
                    }
                }
            }
            /** @type {number} */
            i = _this.slides.length - 1;
            for (;i >= 0;i--) {
                _this._extendSwiperSlide(_this.slides[i]);
            }
            if (len !== false) {
                if (len !== _this.slides.length || dataAndEvents) {
                    removeSlideEvents();
                    addSlideEvents();
                    _this.updateActiveSlide();
                    if (_this.params.pagination) {
                        _this.createPagination();
                    }
                    _this.callPlugins("numberOfSlidesChanged");
                }
            }
        };
        /**
         * @param {string} html
         * @param {Node} slideClassList
         * @param {string} el
         * @return {?}
         */
        _this.createSlide = function(html, slideClassList, el) {
            slideClassList = slideClassList || _this.params.slideClass;
            el = el || params.slideElement;
            /** @type {Element} */
            var newSlide = document.createElement(el);
            return newSlide.innerHTML = html || "", newSlide.className = slideClassList, _this._extendSwiperSlide(newSlide);
        };
        /**
         * @param {Object} html
         * @param {Node} slideClassList
         * @param {string} el
         * @return {?}
         */
        _this.appendSlide = function(html, slideClassList, el) {
            if (html) {
                return html.nodeType ? _this._extendSwiperSlide(html).append() : _this.createSlide(html, slideClassList, el).append();
            }
        };
        /**
         * @param {Object} html
         * @param {Node} slideClassList
         * @param {string} el
         * @return {?}
         */
        _this.prependSlide = function(html, slideClassList, el) {
            if (html) {
                return html.nodeType ? _this._extendSwiperSlide(html).prepend() : _this.createSlide(html, slideClassList, el).prepend();
            }
        };
        /**
         * @param {number} elem
         * @param {Object} html
         * @param {Node} slideClassList
         * @param {string} el
         * @return {?}
         */
        _this.insertSlideAfter = function(elem, html, slideClassList, el) {
            return "undefined" != typeof elem && (html.nodeType ? _this._extendSwiperSlide(html).insertAfter(elem) : _this.createSlide(html, slideClassList, el).insertAfter(elem));
        };
        /**
         * @param {(number|string)} index
         * @return {?}
         */
        _this.removeSlide = function(index) {
            if (_this.slides[index]) {
                if (params.loop) {
                    if (!_this.slides[index + _this.loopedSlides]) {
                        return false;
                    }
                    _this.slides[index + _this.loopedSlides].remove();
                    _this.removeLoopedSlides();
                    _this.calcSlides();
                    _this.createLoop();
                } else {
                    _this.slides[index].remove();
                }
                return true;
            }
            return false;
        };
        /**
         * @return {?}
         */
        _this.removeLastSlide = function() {
            return _this.slides.length > 0 && (params.loop ? (_this.slides[_this.slides.length - 1 - _this.loopedSlides].remove(), _this.removeLoopedSlides(), _this.calcSlides(), _this.createLoop()) : _this.slides[_this.slides.length - 1].remove(), true);
        };
        /**
         * @return {undefined}
         */
        _this.removeAllSlides = function() {
            var pl = _this.slides.length;
            /** @type {number} */
            var i = _this.slides.length - 1;
            for (;i >= 0;i--) {
                _this.slides[i].remove();
                if (i === pl - 1) {
                    _this.setWrapperTranslate(0);
                }
            }
        };
        /**
         * @param {?} index
         * @return {?}
         */
        _this.getSlide = function(index) {
            return _this.slides[index];
        };
        /**
         * @return {?}
         */
        _this.getLastSlide = function() {
            return _this.slides[_this.slides.length - 1];
        };
        /**
         * @return {?}
         */
        _this.getFirstSlide = function() {
            return _this.slides[0];
        };
        /**
         * @return {?}
         */
        _this.activeSlide = function() {
            return _this.slides[_this.activeIndex];
        };
        /**
         * @return {undefined}
         */
        _this.fireCallback = function() {
            var listeners = arguments[0];
            if ("[object Array]" === Object.prototype.toString.call(listeners)) {
                /** @type {number} */
                var key = 0;
                for (;key < listeners.length;key++) {
                    if ("function" == typeof listeners[key]) {
                        listeners[key](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                    }
                }
            } else {
                if ("[object String]" === Object.prototype.toString.call(listeners)) {
                    if (params["on" + listeners]) {
                        _this.fireCallback(params["on" + listeners], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                    }
                } else {
                    listeners(arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                }
            }
        };
        /**
         * @param {string} ev
         * @param {string} value
         * @return {?}
         */
        _this.addCallback = function(ev, value) {
            var options;
            var me = this;
            return me.params["on" + ev] ? isArray(this.params["on" + ev]) ? this.params["on" + ev].push(value) : "function" == typeof this.params["on" + ev] ? (options = this.params["on" + ev], this.params["on" + ev] = [], this.params["on" + ev].push(options), this.params["on" + ev].push(value)) : void 0 : (this.params["on" + ev] = [], this.params["on" + ev].push(value));
        };
        /**
         * @param {string} evtName
         * @return {undefined}
         */
        _this.removeCallbacks = function(evtName) {
            if (_this.params["on" + evtName]) {
                /** @type {null} */
                _this.params["on" + evtName] = null;
            }
        };
        /** @type {Array} */
        var bucket = [];
        var plugin;
        for (plugin in _this.plugins) {
            if (params[plugin]) {
                var value = _this.plugins[plugin](_this, params[plugin]);
                if (value) {
                    bucket.push(value);
                }
            }
        }
        /**
         * @param {string} method
         * @param {Object} args
         * @return {undefined}
         */
        _this.callPlugins = function(method, args) {
            if (!args) {
                args = {};
            }
            /** @type {number} */
            var i = 0;
            for (;i < bucket.length;i++) {
                if (method in bucket[i]) {
                    bucket[i][method](args);
                }
            }
        };
        if (!(!_this.browser.ie10 && !_this.browser.ie11)) {
            if (!params.onlyExternal) {
                _this.wrapper.classList.add("swiper-wp8-" + (isH ? "horizontal" : "vertical"));
            }
        }
        if (params.freeMode) {
            _this.container.className += " swiper-free-mode";
        }
        /** @type {boolean} */
        _this.initialized = false;
        /**
         * @param {boolean} viewport
         * @param {boolean} node
         * @return {undefined}
         */
        _this.init = function(viewport, node) {
            var _width = _this.h.getWidth(_this.container, false, params.roundLengths);
            var _height = _this.h.getHeight(_this.container, false, params.roundLengths);
            if (_width !== _this.width || (_height !== _this.height || viewport)) {
                _this.width = _width;
                _this.height = _height;
                var slideWidth;
                var slideHeight;
                var slideMaxHeight;
                var wrapperWidth;
                var wrapperHeight;
                var slideLeft;
                var i;
                containerSize = isH ? _width : _height;
                var wrapper = _this.wrapper;
                if (viewport && _this.calcSlides(node), "auto" === params.slidesPerView) {
                    /** @type {number} */
                    var slidesWidth = 0;
                    /** @type {number} */
                    var slidesHeight = 0;
                    if (params.slidesOffset > 0) {
                        /** @type {string} */
                        wrapper.style.paddingLeft = "";
                        /** @type {string} */
                        wrapper.style.paddingRight = "";
                        /** @type {string} */
                        wrapper.style.paddingTop = "";
                        /** @type {string} */
                        wrapper.style.paddingBottom = "";
                    }
                    /** @type {string} */
                    wrapper.style.width = "";
                    /** @type {string} */
                    wrapper.style.height = "";
                    if (params.offsetPxBefore > 0) {
                        if (isH) {
                            _this.wrapperLeft = params.offsetPxBefore;
                        } else {
                            _this.wrapperTop = params.offsetPxBefore;
                        }
                    }
                    if (params.offsetPxAfter > 0) {
                        if (isH) {
                            _this.wrapperRight = params.offsetPxAfter;
                        } else {
                            _this.wrapperBottom = params.offsetPxAfter;
                        }
                    }
                    if (params.centeredSlides) {
                        if (isH) {
                            /** @type {number} */
                            _this.wrapperLeft = (containerSize - this.slides[0].getWidth(true, params.roundLengths)) / 2;
                            /** @type {number} */
                            _this.wrapperRight = (containerSize - _this.slides[_this.slides.length - 1].getWidth(true, params.roundLengths)) / 2;
                        } else {
                            /** @type {number} */
                            _this.wrapperTop = (containerSize - _this.slides[0].getHeight(true, params.roundLengths)) / 2;
                            /** @type {number} */
                            _this.wrapperBottom = (containerSize - _this.slides[_this.slides.length - 1].getHeight(true, params.roundLengths)) / 2;
                        }
                    }
                    if (isH) {
                        if (_this.wrapperLeft >= 0) {
                            /** @type {string} */
                            wrapper.style.paddingLeft = _this.wrapperLeft + "px";
                        }
                        if (_this.wrapperRight >= 0) {
                            /** @type {string} */
                            wrapper.style.paddingRight = _this.wrapperRight + "px";
                        }
                    } else {
                        if (_this.wrapperTop >= 0) {
                            /** @type {string} */
                            wrapper.style.paddingTop = _this.wrapperTop + "px";
                        }
                        if (_this.wrapperBottom >= 0) {
                            /** @type {string} */
                            wrapper.style.paddingBottom = _this.wrapperBottom + "px";
                        }
                    }
                    /** @type {number} */
                    slideLeft = 0;
                    /** @type {number} */
                    var value = 0;
                    /** @type {Array} */
                    _this.snapGrid = [];
                    /** @type {Array} */
                    _this.slidesGrid = [];
                    /** @type {number} */
                    slideMaxHeight = 0;
                    /** @type {number} */
                    i = 0;
                    for (;i < _this.slides.length;i++) {
                        slideWidth = _this.slides[i].getWidth(true, params.roundLengths);
                        slideHeight = _this.slides[i].getHeight(true, params.roundLengths);
                        if (params.calculateHeight) {
                            /** @type {number} */
                            slideMaxHeight = Math.max(slideMaxHeight, slideHeight);
                        }
                        var _slideSize = isH ? slideWidth : slideHeight;
                        if (params.centeredSlides) {
                            var nextSlideWidth = i === _this.slides.length - 1 ? 0 : _this.slides[i + 1].getWidth(true, params.roundLengths);
                            var nextSlideHeight = i === _this.slides.length - 1 ? 0 : _this.slides[i + 1].getHeight(true, params.roundLengths);
                            var nextSlideSize = isH ? nextSlideWidth : nextSlideHeight;
                            if (_slideSize > containerSize) {
                                if (params.slidesPerViewFit) {
                                    _this.snapGrid.push(slideLeft + _this.wrapperLeft);
                                    _this.snapGrid.push(slideLeft + _slideSize - containerSize + _this.wrapperLeft);
                                } else {
                                    /** @type {number} */
                                    var j = 0;
                                    for (;j <= Math.floor(_slideSize / (containerSize + _this.wrapperLeft));j++) {
                                        if (0 === j) {
                                            _this.snapGrid.push(slideLeft + _this.wrapperLeft);
                                        } else {
                                            _this.snapGrid.push(slideLeft + _this.wrapperLeft + containerSize * j);
                                        }
                                    }
                                }
                                _this.slidesGrid.push(slideLeft + _this.wrapperLeft);
                            } else {
                                _this.snapGrid.push(value);
                                _this.slidesGrid.push(value);
                            }
                            value += _slideSize / 2 + nextSlideSize / 2;
                        } else {
                            if (_slideSize > containerSize) {
                                if (params.slidesPerViewFit) {
                                    _this.snapGrid.push(slideLeft);
                                    _this.snapGrid.push(slideLeft + _slideSize - containerSize);
                                } else {
                                    if (0 !== containerSize) {
                                        /** @type {number} */
                                        var ratio = 0;
                                        for (;ratio <= Math.floor(_slideSize / containerSize);ratio++) {
                                            _this.snapGrid.push(slideLeft + containerSize * ratio);
                                        }
                                    } else {
                                        _this.snapGrid.push(slideLeft);
                                    }
                                }
                            } else {
                                _this.snapGrid.push(slideLeft);
                            }
                            _this.slidesGrid.push(slideLeft);
                        }
                        slideLeft += _slideSize;
                        slidesWidth += slideWidth;
                        slidesHeight += slideHeight;
                    }
                    if (params.calculateHeight) {
                        /** @type {number} */
                        _this.height = slideMaxHeight;
                    }
                    if (isH) {
                        wrapperSize = slidesWidth + _this.wrapperRight + _this.wrapperLeft;
                        if (!(params.cssWidthAndHeight && "height" !== params.cssWidthAndHeight)) {
                            /** @type {string} */
                            wrapper.style.width = slidesWidth + "px";
                        }
                        if (!(params.cssWidthAndHeight && "width" !== params.cssWidthAndHeight)) {
                            /** @type {string} */
                            wrapper.style.height = _this.height + "px";
                        }
                    } else {
                        if (!(params.cssWidthAndHeight && "height" !== params.cssWidthAndHeight)) {
                            /** @type {string} */
                            wrapper.style.width = _this.width + "px";
                        }
                        if (!(params.cssWidthAndHeight && "width" !== params.cssWidthAndHeight)) {
                            /** @type {string} */
                            wrapper.style.height = slidesHeight + "px";
                        }
                        wrapperSize = slidesHeight + _this.wrapperTop + _this.wrapperBottom;
                    }
                } else {
                    if (params.scrollContainer) {
                        /** @type {string} */
                        wrapper.style.width = "";
                        /** @type {string} */
                        wrapper.style.height = "";
                        wrapperWidth = _this.slides[0].getWidth(true, params.roundLengths);
                        wrapperHeight = _this.slides[0].getHeight(true, params.roundLengths);
                        wrapperSize = isH ? wrapperWidth : wrapperHeight;
                        /** @type {string} */
                        wrapper.style.width = wrapperWidth + "px";
                        /** @type {string} */
                        wrapper.style.height = wrapperHeight + "px";
                        slideSize = isH ? wrapperWidth : wrapperHeight;
                    } else {
                        if (params.calculateHeight) {
                            /** @type {number} */
                            slideMaxHeight = 0;
                            /** @type {number} */
                            wrapperHeight = 0;
                            if (!isH) {
                                /** @type {string} */
                                _this.container.style.height = "";
                            }
                            /** @type {string} */
                            wrapper.style.height = "";
                            /** @type {number} */
                            i = 0;
                            for (;i < _this.slides.length;i++) {
                                /** @type {string} */
                                _this.slides[i].style.height = "";
                                /** @type {number} */
                                slideMaxHeight = Math.max(_this.slides[i].getHeight(true), slideMaxHeight);
                                if (!isH) {
                                    wrapperHeight += _this.slides[i].getHeight(true);
                                }
                            }
                            /** @type {number} */
                            slideHeight = slideMaxHeight;
                            /** @type {number} */
                            _this.height = slideHeight;
                            if (isH) {
                                /** @type {number} */
                                wrapperHeight = slideHeight;
                            } else {
                                /** @type {number} */
                                containerSize = slideHeight;
                                /** @type {string} */
                                _this.container.style.height = containerSize + "px";
                            }
                        } else {
                            slideHeight = isH ? _this.height : _this.height / params.slidesPerView;
                            if (params.roundLengths) {
                                /** @type {number} */
                                slideHeight = Math.ceil(slideHeight);
                            }
                            wrapperHeight = isH ? _this.height : _this.slides.length * slideHeight;
                        }
                        slideWidth = isH ? _this.width / params.slidesPerView : _this.width;
                        if (params.roundLengths) {
                            /** @type {number} */
                            slideWidth = Math.ceil(slideWidth);
                        }
                        wrapperWidth = isH ? _this.slides.length * slideWidth : _this.width;
                        slideSize = isH ? slideWidth : slideHeight;
                        if (params.offsetSlidesBefore > 0) {
                            if (isH) {
                                /** @type {number} */
                                _this.wrapperLeft = slideSize * params.offsetSlidesBefore;
                            } else {
                                /** @type {number} */
                                _this.wrapperTop = slideSize * params.offsetSlidesBefore;
                            }
                        }
                        if (params.offsetSlidesAfter > 0) {
                            if (isH) {
                                /** @type {number} */
                                _this.wrapperRight = slideSize * params.offsetSlidesAfter;
                            } else {
                                /** @type {number} */
                                _this.wrapperBottom = slideSize * params.offsetSlidesAfter;
                            }
                        }
                        if (params.offsetPxBefore > 0) {
                            if (isH) {
                                _this.wrapperLeft = params.offsetPxBefore;
                            } else {
                                _this.wrapperTop = params.offsetPxBefore;
                            }
                        }
                        if (params.offsetPxAfter > 0) {
                            if (isH) {
                                _this.wrapperRight = params.offsetPxAfter;
                            } else {
                                _this.wrapperBottom = params.offsetPxAfter;
                            }
                        }
                        if (params.centeredSlides) {
                            if (isH) {
                                /** @type {number} */
                                _this.wrapperLeft = (containerSize - slideSize) / 2;
                                /** @type {number} */
                                _this.wrapperRight = (containerSize - slideSize) / 2;
                            } else {
                                /** @type {number} */
                                _this.wrapperTop = (containerSize - slideSize) / 2;
                                /** @type {number} */
                                _this.wrapperBottom = (containerSize - slideSize) / 2;
                            }
                        }
                        if (isH) {
                            if (_this.wrapperLeft > 0) {
                                /** @type {string} */
                                wrapper.style.paddingLeft = _this.wrapperLeft + "px";
                            }
                            if (_this.wrapperRight > 0) {
                                /** @type {string} */
                                wrapper.style.paddingRight = _this.wrapperRight + "px";
                            }
                        } else {
                            if (_this.wrapperTop > 0) {
                                /** @type {string} */
                                wrapper.style.paddingTop = _this.wrapperTop + "px";
                            }
                            if (_this.wrapperBottom > 0) {
                                /** @type {string} */
                                wrapper.style.paddingBottom = _this.wrapperBottom + "px";
                            }
                        }
                        wrapperSize = isH ? wrapperWidth + _this.wrapperRight + _this.wrapperLeft : wrapperHeight + _this.wrapperTop + _this.wrapperBottom;
                        if (parseFloat(wrapperWidth) > 0) {
                            if (!params.cssWidthAndHeight || "height" === params.cssWidthAndHeight) {
                                /** @type {string} */
                                wrapper.style.width = wrapperWidth + "px";
                            }
                        }
                        if (parseFloat(wrapperHeight) > 0) {
                            if (!params.cssWidthAndHeight || "width" === params.cssWidthAndHeight) {
                                /** @type {string} */
                                wrapper.style.height = wrapperHeight + "px";
                            }
                        }
                        /** @type {number} */
                        slideLeft = 0;
                        /** @type {Array} */
                        _this.snapGrid = [];
                        /** @type {Array} */
                        _this.slidesGrid = [];
                        /** @type {number} */
                        i = 0;
                        for (;i < _this.slides.length;i++) {
                            _this.snapGrid.push(slideLeft);
                            _this.slidesGrid.push(slideLeft);
                            slideLeft += slideSize;
                            if (parseFloat(slideWidth) > 0) {
                                if (!params.cssWidthAndHeight || "height" === params.cssWidthAndHeight) {
                                    /** @type {string} */
                                    _this.slides[i].style.width = slideWidth + "px";
                                }
                            }
                            if (parseFloat(slideHeight) > 0) {
                                if (!params.cssWidthAndHeight || "width" === params.cssWidthAndHeight) {
                                    /** @type {string} */
                                    _this.slides[i].style.height = slideHeight + "px";
                                }
                            }
                        }
                    }
                }
                if (_this.initialized) {
                    _this.callPlugins("onInit");
                    if (params.onInit) {
                        _this.fireCallback(params.onInit, _this);
                    }
                } else {
                    _this.callPlugins("onFirstInit");
                    if (params.onFirstInit) {
                        _this.fireCallback(params.onFirstInit, _this);
                    }
                }
                /** @type {boolean} */
                _this.initialized = true;
            }
        };
        /**
         * @param {boolean} c
         * @return {undefined}
         */
        _this.reInit = function(c) {
            _this.init(true, c);
        };
        /**
         * @param {?} reInit
         * @return {undefined}
         */
        _this.resizeFix = function(reInit) {
            _this.callPlugins("beforeResizeFix");
            _this.init(params.resizeReInit || reInit);
            if (params.freeMode) {
                if (_this.getWrapperTranslate() < -maxWrapperPosition()) {
                    _this.setWrapperTransition(0);
                    _this.setWrapperTranslate(-maxWrapperPosition());
                }
            } else {
                _this.swipeTo(params.loop ? _this.activeLoopIndex : _this.activeIndex, 0, false);
                if (params.autoplay) {
                    if (_this.support.transitions && "undefined" != typeof tref) {
                        if ("undefined" != typeof tref) {
                            clearTimeout(tref);
                            tref = void 0;
                            _this.startAutoplay();
                        }
                    } else {
                        if ("undefined" != typeof scrollIntervalId) {
                            clearInterval(scrollIntervalId);
                            scrollIntervalId = void 0;
                            _this.startAutoplay();
                        }
                    }
                }
            }
            _this.callPlugins("afterResizeFix");
        };
        /**
         * @param {boolean} dataAndEvents
         * @return {undefined}
         */
        _this.destroy = function(dataAndEvents) {
            var unbind = _this.h.removeEventListener;
            var touchmove = "wrapper" === params.eventTarget ? _this.wrapper : _this.container;
            if (_this.browser.ie10 || _this.browser.ie11 ? (unbind(touchmove, _this.touchEvents.touchStart, onTouchStart), unbind(document, _this.touchEvents.touchMove, onTouchMove), unbind(document, _this.touchEvents.touchEnd, onTouchEnd)) : (_this.support.touch && (unbind(touchmove, "touchstart", onTouchStart), unbind(touchmove, "touchmove", onTouchMove), unbind(touchmove, "touchend", onTouchEnd)), params.simulateTouch && (unbind(touchmove, "mousedown", onTouchStart), unbind(document, "mousemove", onTouchMove),
                    unbind(document, "mouseup", onTouchEnd))), params.autoResize && unbind(window, "resize", _this.resizeFix), removeSlideEvents(), params.paginationClickable && removePaginationEvents(), params.mousewheelControl && (_this._wheelEvent && unbind(_this.container, _this._wheelEvent, handleMousewheel)), params.keyboardControl && unbind(document, "keydown", handleKeyboardKeys), params.autoplay && _this.stopAutoplay(), dataAndEvents) {
                _this.wrapper.removeAttribute("style");
                /** @type {number} */
                var i = 0;
                for (;i < _this.slides.length;i++) {
                    _this.slides[i].removeAttribute("style");
                }
            }
            _this.callPlugins("onDestroy");
            if (window.jQuery) {
                if (window.jQuery(_this.container).data("swiper")) {
                    window.jQuery(_this.container).removeData("swiper");
                }
            }
            if (window.Zepto) {
                if (window.Zepto(_this.container).data("swiper")) {
                    window.Zepto(_this.container).removeData("swiper");
                }
            }
            /** @type {null} */
            _this = null;
        };
        /**
         * @return {undefined}
         */
        _this.disableKeyboardControl = function() {
            /** @type {boolean} */
            params.keyboardControl = false;
            _this.h.removeEventListener(document, "keydown", handleKeyboardKeys);
        };
        /**
         * @return {undefined}
         */
        _this.enableKeyboardControl = function() {
            /** @type {boolean} */
            params.keyboardControl = true;
            _this.h.addEventListener(document, "keydown", handleKeyboardKeys);
        };
        /** @type {number} */
        var V = (new Date).getTime();
        if (_this.disableMousewheelControl = function() {
                return!!_this._wheelEvent && (params.mousewheelControl = false, _this.h.removeEventListener(_this.container, _this._wheelEvent, handleMousewheel), true);
            }, _this.enableMousewheelControl = function() {
                return!!_this._wheelEvent && (params.mousewheelControl = true, _this.h.addEventListener(_this.container, _this._wheelEvent, handleMousewheel), true);
            }, params.grabCursor) {
            var containerStyle = _this.container.style;
            /** @type {string} */
            containerStyle.cursor = "move";
            /** @type {string} */
            containerStyle.cursor = "grab";
            /** @type {string} */
            containerStyle.cursor = "-moz-grab";
            /** @type {string} */
            containerStyle.cursor = "-webkit-grab";
        }
        /** @type {boolean} */
        _this.allowSlideClick = true;
        /** @type {boolean} */
        _this.allowLinks = true;
        var X;
        var velocityPrevPosition;
        var velocityPrevTime;
        /** @type {boolean} */
        var last = false;
        /** @type {boolean} */
        var _ = true;
        /**
         * @param {boolean} dataAndEvents
         * @param {boolean} deepDataAndEvents
         * @return {?}
         */
        _this.swipeNext = function(dataAndEvents, deepDataAndEvents) {
            if ("undefined" == typeof dataAndEvents) {
                /** @type {boolean} */
                dataAndEvents = true;
            }
            if (!deepDataAndEvents) {
                if (params.loop) {
                    _this.fixLoop();
                }
            }
            if (!deepDataAndEvents) {
                if (params.autoplay) {
                    _this.stopAutoplay(true);
                }
            }
            _this.callPlugins("onSwipeNext");
            var currentPosition = _this.getWrapperTranslate().toFixed(2);
            var newPosition = currentPosition;
            if ("auto" === params.slidesPerView) {
                /** @type {number} */
                var i = 0;
                for (;i < _this.snapGrid.length;i++) {
                    if (-currentPosition >= _this.snapGrid[i].toFixed(2) && -currentPosition < _this.snapGrid[i + 1].toFixed(2)) {
                        /** @type {number} */
                        newPosition = -_this.snapGrid[i + 1];
                        break;
                    }
                }
            } else {
                /** @type {number} */
                var groupSize = slideSize * params.slidesPerGroup;
                /** @type {number} */
                newPosition = -(Math.floor(Math.abs(currentPosition) / Math.floor(groupSize)) * groupSize + groupSize);
            }
            return newPosition < -maxWrapperPosition() && (newPosition = -maxWrapperPosition()), newPosition !== currentPosition && (swipeToPosition(newPosition, "next", {
                runCallbacks : dataAndEvents
            }), true);
        };
        /**
         * @param {boolean} dataAndEvents
         * @param {boolean} deepDataAndEvents
         * @return {?}
         */
        _this.swipePrev = function(dataAndEvents, deepDataAndEvents) {
            if ("undefined" == typeof dataAndEvents) {
                /** @type {boolean} */
                dataAndEvents = true;
            }
            if (!deepDataAndEvents) {
                if (params.loop) {
                    _this.fixLoop();
                }
            }
            if (!deepDataAndEvents) {
                if (params.autoplay) {
                    _this.stopAutoplay(true);
                }
            }
            _this.callPlugins("onSwipePrev");
            var newPosition;
            /** @type {number} */
            var currentPosition = Math.ceil(_this.getWrapperTranslate());
            if ("auto" === params.slidesPerView) {
                /** @type {number} */
                newPosition = 0;
                /** @type {number} */
                var i = 1;
                for (;i < _this.snapGrid.length;i++) {
                    if (-currentPosition === _this.snapGrid[i]) {
                        /** @type {number} */
                        newPosition = -_this.snapGrid[i - 1];
                        break;
                    }
                    if (-currentPosition > _this.snapGrid[i] && -currentPosition < _this.snapGrid[i + 1]) {
                        /** @type {number} */
                        newPosition = -_this.snapGrid[i];
                        break;
                    }
                }
            } else {
                /** @type {number} */
                var groupSize = slideSize * params.slidesPerGroup;
                /** @type {number} */
                newPosition = -(Math.ceil(-currentPosition / groupSize) - 1) * groupSize;
            }
            return newPosition > 0 && (newPosition = 0), newPosition !== currentPosition && (swipeToPosition(newPosition, "prev", {
                runCallbacks : dataAndEvents
            }), true);
        };
        /**
         * @param {boolean} runCallbacks
         * @return {?}
         */
        _this.swipeReset = function(runCallbacks) {
            if ("undefined" == typeof runCallbacks) {
                /** @type {boolean} */
                runCallbacks = true;
            }
            _this.callPlugins("onSwipeReset");
            var newPosition;
            var currentPosition = _this.getWrapperTranslate();
            /** @type {number} */
            var groupSize = slideSize * params.slidesPerGroup;
            -maxWrapperPosition();
            if ("auto" === params.slidesPerView) {
                /** @type {number} */
                newPosition = 0;
                /** @type {number} */
                var i = 0;
                for (;i < _this.snapGrid.length;i++) {
                    if (-currentPosition === _this.snapGrid[i]) {
                        return;
                    }
                    if (-currentPosition >= _this.snapGrid[i] && -currentPosition < _this.snapGrid[i + 1]) {
                        /** @type {number} */
                        newPosition = _this.positions.diff > 0 ? -_this.snapGrid[i + 1] : -_this.snapGrid[i];
                        break;
                    }
                }
                if (-currentPosition >= _this.snapGrid[_this.snapGrid.length - 1]) {
                    /** @type {number} */
                    newPosition = -_this.snapGrid[_this.snapGrid.length - 1];
                }
                if (currentPosition <= -maxWrapperPosition()) {
                    /** @type {number} */
                    newPosition = -maxWrapperPosition();
                }
            } else {
                /** @type {number} */
                newPosition = currentPosition < 0 ? Math.round(currentPosition / groupSize) * groupSize : 0;
                if (currentPosition <= -maxWrapperPosition()) {
                    /** @type {number} */
                    newPosition = -maxWrapperPosition();
                }
            }
            return params.scrollContainer && (newPosition = currentPosition < 0 ? currentPosition : 0), newPosition < -maxWrapperPosition() && (newPosition = -maxWrapperPosition()), params.scrollContainer && (containerSize > slideSize && (newPosition = 0)), newPosition !== currentPosition && (swipeToPosition(newPosition, "reset", {
                runCallbacks : runCallbacks
            }), true);
        };
        /**
         * @param {number} index
         * @param {number} recurring
         * @param {boolean} mayParseLabeledStatementInstead
         * @return {?}
         */
        _this.swipeTo = function(index, recurring, mayParseLabeledStatementInstead) {
            /** @type {number} */
            index = parseInt(index, 10);
            _this.callPlugins("onSwipeTo", {
                index : index,
                speed : recurring
            });
            if (params.loop) {
                index += _this.loopedSlides;
            }
            var target = _this.getWrapperTranslate();
            if (!(!isFinite(index) || (index > _this.slides.length - 1 || index < 0))) {
                var related;
                return related = "auto" === params.slidesPerView ? -_this.slidesGrid[index] : -index * slideSize, related < -maxWrapperPosition() && (related = -maxWrapperPosition()), related !== target && ("undefined" == typeof mayParseLabeledStatementInstead && (mayParseLabeledStatementInstead = true), swipeToPosition(related, "to", {
                    index : index,
                    speed : recurring,
                    runCallbacks : mayParseLabeledStatementInstead
                }), true);
            }
        };
        /** @type {boolean} */
        _this._queueStartCallbacks = false;
        /** @type {boolean} */
        _this._queueEndCallbacks = false;
        /**
         * @param {number} position
         * @return {undefined}
         */
        _this.updateActiveSlide = function(position) {
            if (_this.initialized && 0 !== _this.slides.length) {
                _this.previousIndex = _this.activeIndex;
                if ("undefined" == typeof position) {
                    position = _this.getWrapperTranslate();
                }
                if (position > 0) {
                    /** @type {number} */
                    position = 0;
                }
                var i;
                if ("auto" === params.slidesPerView) {
                    if (_this.activeIndex = _this.slidesGrid.indexOf(-position), _this.activeIndex < 0) {
                        /** @type {number} */
                        i = 0;
                        for (;i < _this.slidesGrid.length - 1 && !(-position > _this.slidesGrid[i] && -position < _this.slidesGrid[i + 1]);i++) {
                        }
                        /** @type {number} */
                        var index = Math.abs(_this.slidesGrid[i] + position);
                        /** @type {number} */
                        var firingIndex = Math.abs(_this.slidesGrid[i + 1] + position);
                        if (index <= firingIndex) {
                            /** @type {number} */
                            _this.activeIndex = i;
                        } else {
                            /** @type {number} */
                            _this.activeIndex = i + 1;
                        }
                    }
                } else {
                    _this.activeIndex = Math[params.visibilityFullFit ? "ceil" : "round"](-position / slideSize);
                }
                if (_this.activeIndex === _this.slides.length && (_this.activeIndex = _this.slides.length - 1), _this.activeIndex < 0 && (_this.activeIndex = 0), _this.slides[_this.activeIndex]) {
                    if (_this.calcVisibleSlides(position), _this.support.classList) {
                        var label;
                        /** @type {number} */
                        i = 0;
                        for (;i < _this.slides.length;i++) {
                            label = _this.slides[i];
                            label.classList.remove(params.slideActiveClass);
                            if (_this.visibleSlides.indexOf(label) >= 0) {
                                label.classList.add(params.slideVisibleClass);
                            } else {
                                label.classList.remove(params.slideVisibleClass);
                            }
                        }
                        _this.slides[_this.activeIndex].classList.add(params.slideActiveClass);
                    } else {
                        /** @type {RegExp} */
                        var rclass = new RegExp("\\s*" + params.slideActiveClass);
                        /** @type {RegExp} */
                        var inViewClassRegexp = new RegExp("\\s*" + params.slideVisibleClass);
                        /** @type {number} */
                        i = 0;
                        for (;i < _this.slides.length;i++) {
                            _this.slides[i].className = _this.slides[i].className.replace(rclass, "").replace(inViewClassRegexp, "");
                            if (_this.visibleSlides.indexOf(_this.slides[i]) >= 0) {
                                _this.slides[i].className += " " + params.slideVisibleClass;
                            }
                        }
                        _this.slides[_this.activeIndex].className += " " + params.slideActiveClass;
                    }
                    if (params.loop) {
                        var ls = _this.loopedSlides;
                        /** @type {number} */
                        _this.activeLoopIndex = _this.activeIndex - ls;
                        if (_this.activeLoopIndex >= _this.slides.length - 2 * ls) {
                            /** @type {number} */
                            _this.activeLoopIndex = _this.slides.length - 2 * ls - _this.activeLoopIndex;
                        }
                        if (_this.activeLoopIndex < 0) {
                            /** @type {number} */
                            _this.activeLoopIndex = _this.slides.length - 2 * ls + _this.activeLoopIndex;
                        }
                        if (_this.activeLoopIndex < 0) {
                            /** @type {number} */
                            _this.activeLoopIndex = 0;
                        }
                    } else {
                        _this.activeLoopIndex = _this.activeIndex;
                    }
                    if (params.pagination) {
                        _this.updatePagination(position);
                    }
                }
            }
        };
        /**
         * @param {boolean} dataAndEvents
         * @return {undefined}
         */
        _this.createPagination = function(dataAndEvents) {
            if (params.paginationClickable && (_this.paginationButtons && removePaginationEvents()), _this.paginationContainer = params.pagination.nodeType ? params.pagination : $$(params.pagination)[0], params.createPagination) {
                /** @type {string} */
                var urlConfigHtml = "";
                var cnl = _this.slides.length;
                var padLength = cnl;
                if (params.loop) {
                    padLength -= 2 * _this.loopedSlides;
                }
                /** @type {number} */
                var i = 0;
                for (;i < padLength;i++) {
                    urlConfigHtml += "<" + params.paginationElement + ' class="' + params.paginationElementClass + '"></' + params.paginationElement + ">";
                }
                /** @type {string} */
                _this.paginationContainer.innerHTML = urlConfigHtml;
            }
            _this.paginationButtons = $$("." + params.paginationElementClass, _this.paginationContainer);
            if (!dataAndEvents) {
                _this.updatePagination();
            }
            _this.callPlugins("onCreatePagination");
            if (params.paginationClickable) {
                addPaginationEvents();
            }
        };
        /**
         * @param {number} position
         * @return {undefined}
         */
        _this.updatePagination = function(position) {
            if (params.pagination && !(_this.slides.length < 1)) {
                var activePagers = $$("." + params.paginationActiveClass, _this.paginationContainer);
                if (activePagers) {
                    var pagers = _this.paginationButtons;
                    if (0 !== pagers.length) {
                        /** @type {number} */
                        var i = 0;
                        for (;i < pagers.length;i++) {
                            pagers[i].className = params.paginationElementClass;
                        }
                        var stepBase = params.loop ? _this.loopedSlides : 0;
                        if (params.paginationAsRange) {
                            if (!_this.visibleSlides) {
                                _this.calcVisibleSlides(position);
                            }
                            var x;
                            /** @type {Array} */
                            var proc = [];
                            /** @type {number} */
                            x = 0;
                            for (;x < _this.visibleSlides.length;x++) {
                                /** @type {number} */
                                var value = _this.slides.indexOf(_this.visibleSlides[x]) - stepBase;
                                if (params.loop) {
                                    if (value < 0) {
                                        /** @type {number} */
                                        value = _this.slides.length - 2 * _this.loopedSlides + value;
                                    }
                                }
                                if (params.loop) {
                                    if (value >= _this.slides.length - 2 * _this.loopedSlides) {
                                        /** @type {number} */
                                        value = _this.slides.length - 2 * _this.loopedSlides - value;
                                        /** @type {number} */
                                        value = Math.abs(value);
                                    }
                                }
                                proc.push(value);
                            }
                            /** @type {number} */
                            x = 0;
                            for (;x < proc.length;x++) {
                                if (pagers[proc[x]]) {
                                    pagers[proc[x]].className += " " + params.paginationVisibleClass;
                                }
                            }
                            if (params.loop) {
                                if (void 0 !== pagers[_this.activeLoopIndex]) {
                                    pagers[_this.activeLoopIndex].className += " " + params.paginationActiveClass;
                                }
                            } else {
                                if (pagers[_this.activeIndex]) {
                                    pagers[_this.activeIndex].className += " " + params.paginationActiveClass;
                                }
                            }
                        } else {
                            if (params.loop) {
                                if (pagers[_this.activeLoopIndex]) {
                                    pagers[_this.activeLoopIndex].className += " " + params.paginationActiveClass + " " + params.paginationVisibleClass;
                                }
                            } else {
                                if (pagers[_this.activeIndex]) {
                                    pagers[_this.activeIndex].className += " " + params.paginationActiveClass + " " + params.paginationVisibleClass;
                                }
                            }
                        }
                    }
                }
            }
        };
        /**
         * @param {number} position
         * @return {undefined}
         */
        _this.calcVisibleSlides = function(position) {
            /** @type {Array} */
            var visibleSlides = [];
            /** @type {number} */
            var _slideLeft = 0;
            /** @type {number} */
            var _slideSize = 0;
            /** @type {number} */
            var _slideRight = 0;
            if (isH) {
                if (_this.wrapperLeft > 0) {
                    position += _this.wrapperLeft;
                }
            }
            if (!isH) {
                if (_this.wrapperTop > 0) {
                    position += _this.wrapperTop;
                }
            }
            /** @type {number} */
            var i = 0;
            for (;i < _this.slides.length;i++) {
                _slideLeft += _slideSize;
                _slideSize = "auto" === params.slidesPerView ? isH ? _this.h.getWidth(_this.slides[i], true, params.roundLengths) : _this.h.getHeight(_this.slides[i], true, params.roundLengths) : slideSize;
                _slideRight = _slideLeft + _slideSize;
                /** @type {boolean} */
                var h = false;
                if (params.visibilityFullFit) {
                    if (_slideLeft >= -position) {
                        if (_slideRight <= -position + containerSize) {
                            /** @type {boolean} */
                            h = true;
                        }
                    }
                    if (_slideLeft <= -position) {
                        if (_slideRight >= -position + containerSize) {
                            /** @type {boolean} */
                            h = true;
                        }
                    }
                } else {
                    if (_slideRight > -position) {
                        if (_slideRight <= -position + containerSize) {
                            /** @type {boolean} */
                            h = true;
                        }
                    }
                    if (_slideLeft >= -position) {
                        if (_slideLeft < -position + containerSize) {
                            /** @type {boolean} */
                            h = true;
                        }
                    }
                    if (_slideLeft < -position) {
                        if (_slideRight > -position + containerSize) {
                            /** @type {boolean} */
                            h = true;
                        }
                    }
                }
                if (h) {
                    visibleSlides.push(_this.slides[i]);
                }
            }
            if (0 === visibleSlides.length) {
                /** @type {Array} */
                visibleSlides = [_this.slides[_this.activeIndex]];
            }
            /** @type {Array} */
            _this.visibleSlides = visibleSlides;
        };
        var tref;
        var scrollIntervalId;
        /**
         * @return {?}
         */
        _this.startAutoplay = function() {
            if (_this.support.transitions) {
                if ("undefined" != typeof tref) {
                    return false;
                }
                if (!params.autoplay) {
                    return;
                }
                _this.callPlugins("onAutoplayStart");
                if (params.onAutoplayStart) {
                    _this.fireCallback(params.onAutoplayStart, _this);
                }
                playSound();
            } else {
                if ("undefined" != typeof scrollIntervalId) {
                    return false;
                }
                if (!params.autoplay) {
                    return;
                }
                _this.callPlugins("onAutoplayStart");
                if (params.onAutoplayStart) {
                    _this.fireCallback(params.onAutoplayStart, _this);
                }
                /** @type {number} */
                scrollIntervalId = setInterval(function() {
                    if (params.loop) {
                        _this.fixLoop();
                        _this.swipeNext(true, true);
                    } else {
                        if (!_this.swipeNext(true, true)) {
                            if (params.autoplayStopOnLast) {
                                clearInterval(scrollIntervalId);
                                scrollIntervalId = void 0;
                            } else {
                                _this.swipeTo(0);
                            }
                        }
                    }
                }, params.autoplay);
            }
        };
        /**
         * @param {boolean} dataAndEvents
         * @return {undefined}
         */
        _this.stopAutoplay = function(dataAndEvents) {
            if (_this.support.transitions) {
                if (!tref) {
                    return;
                }
                if (tref) {
                    clearTimeout(tref);
                }
                tref = void 0;
                if (dataAndEvents) {
                    if (!params.autoplayDisableOnInteraction) {
                        _this.wrapperTransitionEnd(function() {
                            playSound();
                        });
                    }
                }
                _this.callPlugins("onAutoplayStop");
                if (params.onAutoplayStop) {
                    _this.fireCallback(params.onAutoplayStop, _this);
                }
            } else {
                if (scrollIntervalId) {
                    clearInterval(scrollIntervalId);
                }
                scrollIntervalId = void 0;
                _this.callPlugins("onAutoplayStop");
                if (params.onAutoplayStop) {
                    _this.fireCallback(params.onAutoplayStop, _this);
                }
            }
        };
        /** @type {boolean} */
        _this.loopCreated = false;
        /**
         * @return {undefined}
         */
        _this.removeLoopedSlides = function() {
            if (_this.loopCreated) {
                /** @type {number} */
                var i = 0;
                for (;i < _this.slides.length;i++) {
                    if (_this.slides[i].getData("looped") === true) {
                        _this.wrapper.removeChild(_this.slides[i]);
                    }
                }
            }
        };
        /**
         * @return {undefined}
         */
        _this.createLoop = function() {
            if (0 !== _this.slides.length) {
                if ("auto" === params.slidesPerView) {
                    _this.loopedSlides = params.loopedSlides || 1;
                } else {
                    _this.loopedSlides = Math.floor(params.slidesPerView) + params.loopAdditionalSlides;
                }
                if (_this.loopedSlides > _this.slides.length) {
                    _this.loopedSlides = _this.slides.length;
                }
                var j;
                /** @type {string} */
                var slideFirstHTML = "";
                /** @type {string} */
                var slideLastHTML = "";
                /** @type {string} */
                var slidesSetFullHTML = "";
                var numSlides = _this.slides.length;
                /** @type {number} */
                var fullSlideSets = Math.floor(_this.loopedSlides / numSlides);
                /** @type {number} */
                var remainderSlides = _this.loopedSlides % numSlides;
                /** @type {number} */
                j = 0;
                for (;j < fullSlideSets * numSlides;j++) {
                    /** @type {number} */
                    var i = j;
                    if (j >= numSlides) {
                        /** @type {number} */
                        var over = Math.floor(j / numSlides);
                        /** @type {number} */
                        i = j - numSlides * over;
                    }
                    slidesSetFullHTML += _this.slides[i].outerHTML;
                }
                /** @type {number} */
                j = 0;
                for (;j < remainderSlides;j++) {
                    slideLastHTML += load(params.slideDuplicateClass, _this.slides[j].outerHTML);
                }
                /** @type {number} */
                j = numSlides - remainderSlides;
                for (;j < numSlides;j++) {
                    slideFirstHTML += load(params.slideDuplicateClass, _this.slides[j].outerHTML);
                }
                /** @type {string} */
                var slides = slideFirstHTML + slidesSetFullHTML + wrapper.innerHTML + slidesSetFullHTML + slideLastHTML;
                /** @type {string} */
                wrapper.innerHTML = slides;
                /** @type {boolean} */
                _this.loopCreated = true;
                _this.calcSlides();
                /** @type {number} */
                j = 0;
                for (;j < _this.slides.length;j++) {
                    if (j < _this.loopedSlides || j >= _this.slides.length - _this.loopedSlides) {
                        _this.slides[j].setData("looped", true);
                    }
                }
                _this.callPlugins("onCreateLoop");
            }
        };
        /**
         * @return {undefined}
         */
        _this.fixLoop = function() {
            var newIndex;
            if (_this.activeIndex < _this.loopedSlides) {
                newIndex = _this.slides.length - 3 * _this.loopedSlides + _this.activeIndex;
                _this.swipeTo(newIndex, 0, false);
            } else {
                if ("auto" === params.slidesPerView && _this.activeIndex >= 2 * _this.loopedSlides || _this.activeIndex > _this.slides.length - 2 * params.slidesPerView) {
                    newIndex = -_this.slides.length + _this.activeIndex + _this.loopedSlides;
                    _this.swipeTo(newIndex, 0, false);
                }
            }
        };
        /**
         * @return {undefined}
         */
        _this.loadSlides = function() {
            /** @type {string} */
            var urlConfigHtml = "";
            /** @type {number} */
            _this.activeLoaderIndex = 0;
            var slides = params.loader.slides;
            var padLength = params.loader.loadAllSlides ? slides.length : params.slidesPerView * (1 + params.loader.surroundGroups);
            /** @type {number} */
            var i = 0;
            for (;i < padLength;i++) {
                urlConfigHtml += "outer" === params.loader.slidesHTMLType ? slides[i] : "<" + params.slideElement + ' class="' + params.slideClass + '" data-swiperindex="' + i + '">' + slides[i] + "</" + params.slideElement + ">";
            }
            _this.wrapper.innerHTML = urlConfigHtml;
            _this.calcSlides(true);
            if (!params.loader.loadAllSlides) {
                _this.wrapperTransitionEnd(_this.reloadSlides, true);
            }
        };
        /**
         * @return {undefined}
         */
        _this.reloadSlides = function() {
            var slides = params.loader.slides;
            /** @type {number} */
            var newActiveIndex = parseInt(_this.activeSlide().data("swiperindex"), 10);
            if (!(newActiveIndex < 0 || newActiveIndex > slides.length - 1)) {
                /** @type {number} */
                _this.activeLoaderIndex = newActiveIndex;
                /** @type {number} */
                var firstIndex = Math.max(0, newActiveIndex - params.slidesPerView * params.loader.surroundGroups);
                /** @type {number} */
                var lastIndex = Math.min(newActiveIndex + params.slidesPerView * (1 + params.loader.surroundGroups) - 1, slides.length - 1);
                if (newActiveIndex > 0) {
                    /** @type {number} */
                    var newTransform = -slideSize * (newActiveIndex - firstIndex);
                    _this.setWrapperTranslate(newTransform);
                    _this.setWrapperTransition(0);
                }
                var i;
                if ("reload" === params.loader.logic) {
                    /** @type {string} */
                    _this.wrapper.innerHTML = "";
                    /** @type {string} */
                    var urlConfigHtml = "";
                    /** @type {number} */
                    i = firstIndex;
                    for (;i <= lastIndex;i++) {
                        urlConfigHtml += "outer" === params.loader.slidesHTMLType ? slides[i] : "<" + params.slideElement + ' class="' + params.slideClass + '" data-swiperindex="' + i + '">' + slides[i] + "</" + params.slideElement + ">";
                    }
                    _this.wrapper.innerHTML = urlConfigHtml;
                } else {
                    /** @type {number} */
                    var minExistIndex = 1E3;
                    /** @type {number} */
                    var maxExistIndex = 0;
                    /** @type {number} */
                    i = 0;
                    for (;i < _this.slides.length;i++) {
                        var index = _this.slides[i].data("swiperindex");
                        if (index < firstIndex || index > lastIndex) {
                            _this.wrapper.removeChild(_this.slides[i]);
                        } else {
                            /** @type {number} */
                            minExistIndex = Math.min(index, minExistIndex);
                            /** @type {number} */
                            maxExistIndex = Math.max(index, maxExistIndex);
                        }
                    }
                    /** @type {number} */
                    i = firstIndex;
                    for (;i <= lastIndex;i++) {
                        var newSlide;
                        if (i < minExistIndex) {
                            /** @type {Element} */
                            newSlide = document.createElement(params.slideElement);
                            newSlide.className = params.slideClass;
                            newSlide.setAttribute("data-swiperindex", i);
                            newSlide.innerHTML = slides[i];
                            _this.wrapper.insertBefore(newSlide, _this.wrapper.firstChild);
                        }
                        if (i > maxExistIndex) {
                            /** @type {Element} */
                            newSlide = document.createElement(params.slideElement);
                            newSlide.className = params.slideClass;
                            newSlide.setAttribute("data-swiperindex", i);
                            newSlide.innerHTML = slides[i];
                            _this.wrapper.appendChild(newSlide);
                        }
                    }
                }
                _this.reInit(true);
            }
        };
        makeSwiper();
    }
};
Swiper.prototype = {
    plugins : {},
    /**
     * @param {Function} callback
     * @param {boolean} dataAndEvents
     * @return {undefined}
     */
    wrapperTransitionEnd : function(callback, dataAndEvents) {
        /**
         * @param {Event} ev
         * @return {undefined}
         */
        function fireCallBack(ev) {
            if (ev.target === el && (callback(a), a.params.queueEndCallbacks && (a._queueEndCallbacks = false), !dataAndEvents)) {
                /** @type {number} */
                i = 0;
                for (;i < events.length;i++) {
                    a.h.removeEventListener(el, events[i], fireCallBack);
                }
            }
        }
        var i;
        var a = this;
        var el = a.wrapper;
        /** @type {Array} */
        var events = ["webkitTransitionEnd", "transitionend", "oTransitionEnd", "MSTransitionEnd", "msTransitionEnd"];
        if (callback) {
            /** @type {number} */
            i = 0;
            for (;i < events.length;i++) {
                a.h.addEventListener(el, events[i], fireCallBack);
            }
        }
    },
    /**
     * @param {string} y
     * @return {?}
     */
    getWrapperTranslate : function(y) {
        var components;
        var x;
        var curStyle;
        var transformMatrix;
        var el = this.wrapper;
        return "undefined" == typeof y && (y = "horizontal" === this.params.mode ? "x" : "y"), this.support.transforms && this.params.useCSS3Transforms ? (curStyle = window.getComputedStyle(el, null), window.WebKitCSSMatrix ? transformMatrix = new WebKitCSSMatrix("none" === curStyle.webkitTransform ? "" : curStyle.webkitTransform) : (transformMatrix = curStyle.MozTransform || (curStyle.OTransform || (curStyle.MsTransform || (curStyle.msTransform || (curStyle.transform || curStyle.getPropertyValue("transform").replace("translate(",
            "matrix(1, 0, 0, 1,"))))), components = transformMatrix.toString().split(",")), "x" === y && (x = window.WebKitCSSMatrix ? transformMatrix.m41 : 16 === components.length ? parseFloat(components[12]) : parseFloat(components[4])), "y" === y && (x = window.WebKitCSSMatrix ? transformMatrix.m42 : 16 === components.length ? parseFloat(components[13]) : parseFloat(components[5]))) : ("x" === y && (x = parseFloat(el.style.left, 10) || 0), "y" === y && (x = parseFloat(el.style.top, 10) || 0)), x || 0;
    },
    /**
     * @param {number} x
     * @param {(Function|string)} y
     * @param {number} z
     * @return {undefined}
     */
    setWrapperTranslate : function(x, y, z) {
        var transformString;
        var es = this.wrapper.style;
        var coords = {
            x : 0,
            y : 0,
            z : 0
        };
        if (3 === arguments.length) {
            /** @type {number} */
            coords.x = x;
            /** @type {(Function|string)} */
            coords.y = y;
            /** @type {number} */
            coords.z = z;
        } else {
            if ("undefined" == typeof y) {
                /** @type {string} */
                y = "horizontal" === this.params.mode ? "x" : "y";
            }
            /** @type {number} */
            coords[y] = x;
        }
        if (this.support.transforms && this.params.useCSS3Transforms) {
            /** @type {string} */
            transformString = this.support.transforms3d ? "translate3d(" + coords.x + "px, " + coords.y + "px, " + coords.z + "px)" : "translate(" + coords.x + "px, " + coords.y + "px)";
            /** @type {string} */
            es.webkitTransform = es.MsTransform = es.msTransform = es.MozTransform = es.OTransform = es.transform = transformString;
        } else {
            /** @type {string} */
            es.left = coords.x + "px";
            /** @type {string} */
            es.top = coords.y + "px";
        }
        this.callPlugins("onSetWrapperTransform", coords);
        if (this.params.onSetWrapperTransform) {
            this.fireCallback(this.params.onSetWrapperTransform, this, coords);
        }
    },
    /**
     * @param {number} duration
     * @return {undefined}
     */
    setWrapperTransition : function(duration) {
        var es = this.wrapper.style;
        /** @type {string} */
        es.webkitTransitionDuration = es.MsTransitionDuration = es.msTransitionDuration = es.MozTransitionDuration = es.OTransitionDuration = es.transitionDuration = duration / 1E3 + "s";
        this.callPlugins("onSetWrapperTransition", {
            duration : duration
        });
        if (this.params.onSetWrapperTransition) {
            this.fireCallback(this.params.onSetWrapperTransition, this, duration);
        }
    },
    h : {
        /**
         * @param {boolean} el
         * @param {boolean} deepDataAndEvents
         * @param {boolean} recurring
         * @return {?}
         */
        getWidth : function(el, deepDataAndEvents, recurring) {
            /** @type {string} */
            var w = window.getComputedStyle(el, null).getPropertyValue("width");
            /** @type {number} */
            var value = parseFloat(w);
            return(isNaN(value) || (w.indexOf("%") > 0 || value < 0)) && (value = el.offsetWidth - parseFloat(window.getComputedStyle(el, null).getPropertyValue("padding-left")) - parseFloat(window.getComputedStyle(el, null).getPropertyValue("padding-right"))), deepDataAndEvents && (value += parseFloat(window.getComputedStyle(el, null).getPropertyValue("padding-left")) + parseFloat(window.getComputedStyle(el, null).getPropertyValue("padding-right"))), recurring ? Math.ceil(value) : value;
        },
        /**
         * @param {boolean} deepDataAndEvents
         * @param {boolean} recurring
         * @param {boolean} asNumber
         * @return {?}
         */
        getHeight : function(deepDataAndEvents, recurring, asNumber) {
            if (recurring) {
                return deepDataAndEvents.offsetHeight;
            }
            /** @type {string} */
            var h = window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("height");
            /** @type {number} */
            var value = parseFloat(h);
            return(isNaN(value) || (h.indexOf("%") > 0 || value < 0)) && (value = deepDataAndEvents.offsetHeight - parseFloat(window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("padding-top")) - parseFloat(window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("padding-bottom"))), recurring && (value += parseFloat(window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("padding-top")) + parseFloat(window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("padding-bottom"))),
                asNumber ? Math.ceil(value) : value;
        },
        /**
         * @param {HTMLElement} el
         * @return {?}
         */
        getOffset : function(el) {
            var box = el.getBoundingClientRect();
            /** @type {(HTMLElement|null)} */
            var body = document.body;
            var clientTop = el.clientTop || (body.clientTop || 0);
            var clientLeft = el.clientLeft || (body.clientLeft || 0);
            var scrollTop = window.pageYOffset || el.scrollTop;
            var scrollLeft = window.pageXOffset || el.scrollLeft;
            return document.documentElement && (!window.pageYOffset && (scrollTop = document.documentElement.scrollTop, scrollLeft = document.documentElement.scrollLeft)), {
                top : box.top + scrollTop - clientTop,
                left : box.left + scrollLeft - clientLeft
            };
        },
        /**
         * @return {?}
         */
        windowWidth : function() {
            return window.innerWidth ? window.innerWidth : document.documentElement && document.documentElement.clientWidth ? document.documentElement.clientWidth : void 0;
        },
        /**
         * @return {?}
         */
        windowHeight : function() {
            return window.innerHeight ? window.innerHeight : document.documentElement && document.documentElement.clientHeight ? document.documentElement.clientHeight : void 0;
        },
        /**
         * @return {?}
         */
        windowScroll : function() {
            return "undefined" != typeof pageYOffset ? {
                left : window.pageXOffset,
                top : window.pageYOffset
            } : document.documentElement ? {
                left : document.documentElement.scrollLeft,
                top : document.documentElement.scrollTop
            } : void 0;
        },
        /**
         * @param {string} elem
         * @param {string} event
         * @param {Object} recurring
         * @param {boolean} capture
         * @return {undefined}
         */
        addEventListener : function(elem, event, recurring, capture) {
            if ("undefined" == typeof capture) {
                /** @type {boolean} */
                capture = false;
            }
            if (elem.addEventListener) {
                elem.addEventListener(event, recurring, capture);
            } else {
                if (elem.attachEvent) {
                    elem.attachEvent("on" + event, recurring);
                }
            }
        },
        /**
         * @param {string} elem
         * @param {string} event
         * @param {boolean} recurring
         * @param {boolean} capture
         * @return {undefined}
         */
        removeEventListener : function(elem, event, recurring, capture) {
            if ("undefined" == typeof capture) {
                /** @type {boolean} */
                capture = false;
            }
            if (elem.removeEventListener) {
                elem.removeEventListener(event, recurring, capture);
            } else {
                if (elem.detachEvent) {
                    elem.detachEvent("on" + event, recurring);
                }
            }
        }
    },
    /**
     * @param {Element} el
     * @param {?} transform
     * @return {undefined}
     */
    setTransform : function(el, transform) {
        var es = el.style;
        es.webkitTransform = es.MsTransform = es.msTransform = es.MozTransform = es.OTransform = es.transform = transform;
    },
    /**
     * @param {Element} el
     * @param {?} translate
     * @return {undefined}
     */
    setTranslate : function(el, translate) {
        var es = el.style;
        var pos = {
            x : translate.x || 0,
            y : translate.y || 0,
            z : translate.z || 0
        };
        /** @type {string} */
        var transformString = this.support.transforms3d ? "translate3d(" + pos.x + "px," + pos.y + "px," + pos.z + "px)" : "translate(" + pos.x + "px," + pos.y + "px)";
        /** @type {string} */
        es.webkitTransform = es.MsTransform = es.msTransform = es.MozTransform = es.OTransform = es.transform = transformString;
        if (!this.support.transforms) {
            /** @type {string} */
            es.left = pos.x + "px";
            /** @type {string} */
            es.top = pos.y + "px";
        }
    },
    /**
     * @param {Element} el
     * @param {number} duration
     * @return {undefined}
     */
    setTransition : function(el, duration) {
        var es = el.style;
        /** @type {string} */
        es.webkitTransitionDuration = es.MsTransitionDuration = es.msTransitionDuration = es.MozTransitionDuration = es.OTransitionDuration = es.transitionDuration = duration + "ms";
    },
    support : {
        touch : window.Modernizr && Modernizr.touch === true || function() {
            return!!("ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch);
        }(),
        transforms3d : window.Modernizr && Modernizr.csstransforms3d === true || function() {
            /** @type {(CSSStyleDeclaration|null)} */
            var div = document.createElement("div").style;
            return "webkitPerspective" in div || ("MozPerspective" in div || ("OPerspective" in div || ("MsPerspective" in div || "perspective" in div)));
        }(),
        transforms : window.Modernizr && Modernizr.csstransforms === true || function() {
            /** @type {(CSSStyleDeclaration|null)} */
            var div = document.createElement("div").style;
            return "transform" in div || ("WebkitTransform" in div || ("MozTransform" in div || ("msTransform" in div || ("MsTransform" in div || "OTransform" in div))));
        }(),
        transitions : window.Modernizr && Modernizr.csstransitions === true || function() {
            /** @type {(CSSStyleDeclaration|null)} */
            var div = document.createElement("div").style;
            return "transition" in div || ("WebkitTransition" in div || ("MozTransition" in div || ("msTransition" in div || ("MsTransition" in div || "OTransition" in div))));
        }(),
        classList : function() {
            /** @type {Element} */
            var div = document.createElement("div");
            return "classList" in div;
        }()
    },
    browser : {
        ie8 : function() {
            /** @type {number} */
            var exp = -1;
            if ("Microsoft Internet Explorer" === navigator.appName) {
                /** @type {string} */
                var ua = navigator.userAgent;
                /** @type {RegExp} */
                var re = new RegExp(/MSIE ([0-9]{1,}[\.0-9]{0,})/);
                if (null !== re.exec(ua)) {
                    /** @type {number} */
                    exp = parseFloat(RegExp.$1);
                }
            }
            return exp !== -1 && exp < 9;
        }(),
        ie10 : window.navigator.msPointerEnabled,
        ie11 : window.navigator.pointerEnabled
    }
}, (window.jQuery || window.Zepto) && !function($) {
    /**
     * @param {EventTarget} params
     * @return {?}
     */
    $.fn.swiper = function(params) {
        var c;
        return this.each(function(dataAndEvents) {
            var $spy = $(this);
            var recurring = new Swiper($spy[0], params);
            if (!dataAndEvents) {
                c = recurring;
            }
            $spy.data("swiper", recurring);
        }), c;
    };
}(window.jQuery || window.Zepto), "undefined" != typeof module ? module.exports = Swiper : "function" == typeof define && (define.amd && define([], function() {
    return Swiper;
}));
var define;
var requireModule;
var require;
var requirejs;
!function() {
    /**
     * @param {Function} func
     * @param {Function} next
     * @return {?}
     */
    function after(func, next) {
        try {
            return func();
        } finally {
            next();
        }
    }
    /**
     * @param {number} guard
     * @return {?}
     */
    function assert(guard) {
        throw new Error("an unsupported module was defined, expected `define(name, deps, module)` instead got: `" + guard + "` arguments to define`");
    }
    /**
     * @param {string} name
     * @param {Array} deps
     * @param {Function} callback
     * @param {(Document|string)} methods
     * @return {undefined}
     */
    function Module(name, deps, callback, methods) {
        /** @type {number} */
        this.id = _id++;
        /** @type {string} */
        this.name = name;
        this.deps = !deps.length && callback.length ? rem : deps;
        this.exports = methods || {};
        /** @type {Function} */
        this.callback = callback;
        this.state = void 0;
        this._require = void 0;
    }
    /**
     * @param {Object} args
     * @param {string} path
     * @param {?} value
     * @return {?}
     */
    function main(args, path, value) {
        var name;
        var fields = args.deps;
        var length = fields.length;
        /** @type {Array} */
        var results = new Array(length);
        var module = {};
        /** @type {number} */
        var i = 0;
        var len = length;
        for (;i < len;i++) {
            name = fields[i];
            if ("exports" === name) {
                module.exports = results[i] = value;
            } else {
                if ("require" === name) {
                    results[i] = args.makeRequire();
                } else {
                    if ("module" === name) {
                        args.exports = value;
                        module = results[i] = args;
                    } else {
                        results[i] = callback(log(name, path), path);
                    }
                }
            }
        }
        return{
            deps : results,
            module : module
        };
    }
    /**
     * @param {string} id
     * @param {string} setting
     * @return {?}
     */
    function callback(id, setting) {
        var mod = registry[id];
        if (!mod) {
            throw new Error("Could not find module `" + id + "` imported from `" + setting + "`");
        }
        return require(id);
    }
    /**
     * @param {string} str
     * @param {string} arg
     * @return {?}
     */
    function log(str, arg) {
        if ("." !== str.charAt(0)) {
            return str;
        }
        var values = str.split("/");
        var segs = arg.split("/");
        var pieces = segs.slice(0, -1);
        /** @type {number} */
        var i = 0;
        var valuesLen = values.length;
        for (;i < valuesLen;i++) {
            var value = values[i];
            if (".." === value) {
                if (0 === pieces.length) {
                    throw new Error("Cannot access parent module of root");
                }
                pieces.pop();
            } else {
                if ("." === value) {
                    continue;
                }
                pieces.push(value);
            }
        }
        return pieces.join("/");
    }
    var namespacedName;
    /** @type {Function} */
    namespacedName = Array.isArray ? Array.isArray : function(name) {
        return "[object Array]" === Object.prototype.toString.call(name);
    };
    var registry = {};
    var files = {};
    /** @type {boolean} */
    var state = false;
    /** @type {number} */
    var _id = 0;
    /** @type {Array} */
    var rem = ["require", "exports", "module"];
    /**
     * @return {?}
     */
    Module.prototype.makeRequire = function() {
        var name = this.name;
        return this._require || (this._require = function(path) {
            return require(log(path, name));
        });
    };
    /**
     * @param {string} id
     * @param {Array} opt_attributes
     * @param {Function} deps
     * @return {undefined}
     */
    define = function(id, opt_attributes, deps) {
        if (arguments.length < 2) {
            assert(arguments.length);
        }
        if (!namespacedName(opt_attributes)) {
            /** @type {Array} */
            deps = opt_attributes;
            /** @type {Array} */
            opt_attributes = [];
        }
        registry[id] = new Module(id, opt_attributes, deps);
    };
    define.petal = {};
    /** @type {function (string): ?} */
    requirejs = require = requireModule = function(name) {
        var self = registry[name];
        if (!self) {
            throw new Error("Could not find module " + name);
        }
        if (self.state !== state && files.hasOwnProperty(name)) {
            return files[name];
        }
        var def;
        var file;
        /** @type {boolean} */
        var g = false;
        files[name] = {};
        after(function() {
            def = main(self, name, files[name]);
            file = self.callback.apply(this, def.deps);
            /** @type {boolean} */
            g = true;
        }, function() {
            if (!g) {
                /** @type {boolean} */
                self.state = state;
            }
        });
        var obj;
        return obj = void 0 === file && def.module.exports ? def.module.exports : files[name] = file, null === obj || ("object" != typeof obj && "function" != typeof obj || (void 0 !== obj.default || (obj.default = obj))), files[name] = obj;
    };
    requirejs.entries = requirejs._eak_seen = registry;
    /**
     * @return {undefined}
     */
    requirejs.clear = function() {
        requirejs.entries = requirejs._eak_seen = registry = {};
        files = state = {};
    };
}(), !function() {
    /**
     * @param {Object} a
     * @param {Object} b
     * @return {?}
     */
    function extend(a, b) {
        var prop;
        for (prop in b) {
            a[prop] = b[prop];
        }
        return b;
    }
    var Simulate = {
        /**
         * @param {string} name
         * @param {Function} recurring
         * @return {undefined}
         */
        event : function(name, recurring) {
            if (document.createEvent) {
                /** @type {(Event|null)} */
                var event = document.createEvent("HTMLEvents");
                event.initEvent(recurring, true, true);
                name.dispatchEvent(event);
            } else {
                event = document.createEventObject();
                name.fireEvent("on" + recurring, event);
            }
        },
        /**
         * @param {EventTarget} element
         * @param {string} type
         * @param {?} options
         * @return {undefined}
         */
        keyEvent : function(element, type, options) {
            var evt;
            var e = {
                bubbles : true,
                cancelable : true,
                view : window,
                ctrlKey : false,
                altKey : false,
                shiftKey : false,
                metaKey : false,
                keyCode : 0,
                charCode : 0
            };
            if (extend(e, options), document.createEvent) {
                try {
                    /** @type {(Event|null)} */
                    evt = document.createEvent("KeyEvents");
                    evt.initKeyEvent(type, e.bubbles, e.cancelable, e.view, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, e.keyCode, e.charCode);
                    element.dispatchEvent(evt);
                } catch (g) {
                    /** @type {(Event|null)} */
                    evt = document.createEvent("Events");
                    evt.initEvent(type, e.bubbles, e.cancelable);
                    extend(evt, {
                        view : e.view,
                        ctrlKey : e.ctrlKey,
                        altKey : e.altKey,
                        shiftKey : e.shiftKey,
                        metaKey : e.metaKey,
                        keyCode : e.keyCode,
                        charCode : e.charCode
                    });
                    element.dispatchEvent(evt);
                }
            }
        }
    };
    /**
     * @param {EventTarget} element
     * @param {string} object
     * @return {undefined}
     */
    Simulate.keypress = function(element, object) {
        var code = object.charCodeAt(0);
        this.keyEvent(element, "keypress", {
            keyCode : code,
            charCode : code
        });
    };
    /**
     * @param {EventTarget} element
     * @param {string} chr
     * @return {undefined}
     */
    Simulate.keydown = function(element, chr) {
        var code = chr.charCodeAt(0);
        this.keyEvent(element, "keydown", {
            keyCode : code,
            charCode : code
        });
    };
    /**
     * @param {EventTarget} element
     * @param {string} chr
     * @return {undefined}
     */
    Simulate.keyup = function(element, chr) {
        var code = chr.charCodeAt(0);
        this.keyEvent(element, "keyup", {
            keyCode : code,
            charCode : code
        });
    };
    /** @type {Array} */
    var events = ["click", "focus", "blur", "dblclick", "input", "change", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "resize", "scroll", "select", "submit", "load", "unload"];
    /** @type {number} */
    var ii = events.length;
    for (;ii--;) {
        var event = events[ii];
        Simulate[event] = function(recurring) {
            return function(optgroup) {
                this.event(optgroup, recurring);
            };
        }(event);
    }
    if ("undefined" != typeof module) {
        module.exports = Simulate;
    } else {
        if ("undefined" != typeof window) {
            window.Simulate = Simulate;
        } else {
            if ("undefined" != typeof define) {
                define(function() {
                    return Simulate;
                });
            }
        }
    }
}(), define("framework/ads/ads", ["exports", "framework/jquery", "framework/translations"], function(exports, dataAndEvents, self) {
    var app;
    var resolver;
    var data;
    var init;
    data = {};
    data.config = {};
    resolver = RSVP.defer();
    /**
     * @return {?}
     */
    init = function() {
        return TATM.debugMode = data.config.debugMode, TATM.scrollingElement = data.config.scrollContainer || window;
    };
    app = {
        /**
         * @param {?} opt_attributes
         * @return {?}
         */
        configure : function(opt_attributes) {
            return $.extend(data.config, opt_attributes), self.translations.configure(data.config.language);
        },
        /**
         * @param {Object} target
         * @return {?}
         */
        init : function(target) {
            if (null == target && (target = {}), data.config.ads.enabled || localStorage.getItem("dfp_ads_enabled")) {
                return "undefined" == typeof TATM || null === TATM ? $.loadExternalScript("https://tdn.da-services.ch/current/" + data.config.currentCustomer + ".js").then(function() {
                    return TATM.init(data.config.siteId, data.config.adInfo.adUnitId, target, false, data.config.desktopContentWidth), init(), TATM.adUnitFirst = true, resolver.resolve();
                }) : resolver.resolve();
            }
        },
        /**
         * @param {Object} element
         * @return {?}
         */
        updateView : function(element) {
            return null == element && (element = {}), resolver.promise.then(function() {
                return TATM.updateView(data.config.siteId, data.config.adInfo.adUnitId, element, false, data.config.desktopContentWidth), init();
            });
        },
        /**
         * @param {?} opt_attributes
         * @return {?}
         */
        registerAds : function(opt_attributes) {
            return resolver.promise.then(function() {
                return TATM.core.initAdUnits(opt_attributes);
            });
        },
        /**
         * @return {?}
         */
        displayAds : function() {
            return resolver.promise.then(function() {
                return TATM.displayAds();
            });
        },
        /**
         * @param {string} deepDataAndEvents
         * @param {string} opt_obj2
         * @return {?}
         */
        addCustomParam : function(deepDataAndEvents, opt_obj2) {
            return resolver.promise.then(function() {
                return TATM.helper.addPageTargeting(deepDataAndEvents, opt_obj2);
            });
        }
    };
    exports.ads = app;
}), define("framework/array", function() {
    if (!("indexOf" in Array.prototype)) {
        /**
         * @param {string} name
         * @param {number=} recurring
         * @return {number}
         * @template T
         */
        Array.prototype.indexOf = function(name, recurring) {
            var _len;
            if (void 0 === recurring) {
                /** @type {number} */
                recurring = 0;
            }
            if (recurring < 0) {
                recurring += this.length;
            }
            if (recurring < 0) {
                /** @type {number} */
                recurring = 0;
            }
            /** @type {number} */
            _len = this.length;
            for (;recurring < _len;) {
                if (recurring in this && this[recurring] === name) {
                    return recurring;
                }
                recurring++;
            }
            return-1;
        };
    }
    if (!Array.prototype.filter) {
        /**
         * @param {(function (this:S, T, number, Array.<T>): ?|null)} name
         * @return {Array.<T>}
         * @template T,S
         */
        Array.prototype.filter = function(name) {
            var index;
            var max_count;
            var values;
            var arr;
            var self;
            var value;
            if (void 0 === this || null === this) {
                throw new TypeError;
            }
            if (arr = Object(this), max_count = arr.length >>> 0, "function" != typeof name) {
                throw new TypeError;
            }
            /** @type {Array} */
            values = [];
            self = arguments[1];
            /** @type {number} */
            index = 0;
            for (;index < max_count;) {
                if (index in arr) {
                    value = arr[index];
                    if (name.call(self, value, index, arr)) {
                        values.push(value);
                    }
                }
                index++;
            }
            return values;
        };
    }
    if (!Array.prototype.some) {
        /**
         * @param {(function (this:S, T, number, Array.<T>): ?|null)} fn
         * @return {boolean}
         * @template T,S
         */
        Array.prototype.some = function(fn) {
            var i;
            var _i;
            var mixed;
            var _ref;
            var self;
            var that;
            if (null === this) {
                throw new "TypeError Array.prototype.some called on null or undefined";
            }
            if ("function" != typeof fn) {
                throw new TypeError;
            }
            self = Object(this);
            /** @type {number} */
            mixed = self.length >>> 0;
            that = arguments.length >= 2 ? arguments[1] : void 0;
            /** @type {number} */
            i = _i = 0;
            /** @type {number} */
            _ref = mixed;
            for (;0 <= _ref ? _i <= _ref : _i >= _ref;i = 0 <= _ref ? ++_i : --_i) {
                if (i in self && fn.call(that, self[i], i, self)) {
                    return true;
                }
            }
            return false;
        };
    }
    if (!Array.prototype.every) {
        /**
         * @param {(function (this:S, T, number, Array.<T>): ?|null)} name
         * @param {Function=} recurring
         * @return {boolean}
         * @template T,S
         */
        Array.prototype.every = function(name, recurring) {
            var self;
            var context;
            var _i;
            var i;
            var value;
            var max;
            var _ref;
            var result;
            if (null === this) {
                throw new TypeError("this is null or not defined");
            }
            if (self = Object(this), max = self.length >>> 0, "function" != typeof name) {
                throw new TypeError;
            }
            if (arguments.length > 1) {
                /** @type {Function} */
                context = recurring;
            }
            /** @type {number} */
            i = 0;
            /** @type {number} */
            i = _i = 0;
            /** @type {number} */
            _ref = max - 1;
            for (;0 <= _ref ? _i <= _ref : _i >= _ref;i = 0 <= _ref ? ++_i : --_i) {
                if (i in self && (value = self[i], result = name.call(context, value, i, self), !result)) {
                    return false;
                }
            }
            return true;
        };
    }
}), define("framework/browser", ["exports"], function(b) {
    var browser;
    browser = {
        browserName : null,
        browserVersion : null,
        /**
         * @return {?}
         */
        isTouchScreen : function() {
            return "ontouchstart" in window || (navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);
        },
        /**
         * @return {?}
         */
        isiPhone : function() {
            return navigator.userAgent.indexOf("iPhone") > -1;
        },
        /**
         * @return {?}
         */
        isiPhoneOriPod : function() {
            return navigator.userAgent.match(/iPhone|iPod/i);
        },
        /**
         * @return {?}
         */
        supportsCors : function() {
            return window.XMLHttpRequest && "withCredentials" in new XMLHttpRequest;
        },
        /**
         * @return {?}
         */
        isDefaultAndroid : function() {
            return this.isAndroid() && (this.isWebKit() && !this.isChrome());
        },
        /**
         * @return {?}
         */
        isAndroid : function() {
            return navigator.userAgent.indexOf("Android") > -1;
        },
        /**
         * @return {?}
         */
        isWebKit : function() {
            return navigator.userAgent.indexOf("WebKit") > -1;
        },
        /**
         * @return {?}
         */
        isChrome : function() {
            return navigator.userAgent.indexOf("Chrome") > -1;
        },
        /**
         * @return {?}
         */
        isWP : function() {
            return navigator.userAgent.indexOf("Windows Phone") > -1;
        },
        /**
         * @return {?}
         */
        isIE8 : function() {
            return navigator.userAgent.indexOf("MSIE 8") > -1;
        },
        /**
         * @return {?}
         */
        isIE9 : function() {
            return navigator.userAgent.indexOf("MSIE 9") > -1;
        },
        /**
         * @return {?}
         */
        isIE10 : function() {
            return navigator.userAgent.indexOf("MSIE 10") > -1;
        },
        /**
         * @return {?}
         */
        isFirefox : function() {
            return navigator.userAgent.indexOf("Firefox") > -1;
        },
        /**
         * @return {?}
         */
        isSafari : function() {
            return navigator.userAgent.indexOf("Safari") > -1;
        },
        /**
         * @return {?}
         */
        isLocalhost : function() {
            return location.hostname.indexOf("localhost") > -1;
        },
        /**
         * @param {Object} map
         * @return {?}
         */
        supportsRequirements : function(map) {
            var octalLiteral;
            var key;
            var dstUri;
            var optgroup;
            var val;
            for (key in map) {
                if (val = map[key], optgroup = new RegExp(key + " [^;]*"), dstUri = navigator.userAgent.match(optgroup), null != dstUri && (octalLiteral = dstUri.toString().split(" "), this.browserName = octalLiteral[0], this.browserVersion = parseInt(octalLiteral[1], 10), this.browserName === key && this.browserVersion < val)) {
                    return alert("Ihre " + key + "-Version (v" + this.browserVersion + ") wird leider nicht mehr unterst\u00fctzt, bitte aktualisieren Sie auf die Version v" + val + " oder h\u00f6her"), false;
                }
            }
            return true;
        },
        /**
         * @param {string} name
         * @return {?}
         */
        scrollTop : function(name) {
            return setTimeout(function() {
                return name.css("overflow", "hidden"), setTimeout(function() {
                    return name.scrollTop(0), setTimeout(function() {
                        return name.css("overflow", "auto");
                    }, 0);
                }, 0);
            }, 0);
        },
        /**
         * @return {?}
         */
        getTransitionEventName : function() {
            var descendant;
            var name;
            var transitionEndEventNames;
            var src;
            /** @type {Element} */
            descendant = document.createElement("fake");
            transitionEndEventNames = {
                WebkitTransition : "webkitTransitionEnd",
                MozTransition : "transitionend",
                transition : "transitionend"
            };
            for (name in transitionEndEventNames) {
                if (src = transitionEndEventNames[name], void 0 !== descendant.style[name]) {
                    return transitionEndEventNames[name];
                }
            }
        },
        /**
         * @return {?}
         */
        getPathname : function() {
            var base;
            var match;
            var path;
            var url;
            return url = location.pathname, path = location.hash, "/" === url ? path && (match = "?#", (base = path.indexOf(match)) > -1 && (path = path.substr(0, base)), url = path.replace("#", "")) : url += path, url;
        },
        /**
         * @param {HTMLElement} x
         * @return {?}
         */
        getQueryParam : function(x) {
            var i;
            var c;
            var d;
            var codeSegments;
            var classNames;
            var className;
            /** @type {Array.<string>} */
            codeSegments = window.location.search.split(/[&?]/);
            d = {};
            /** @type {number} */
            i = 0;
            for (;i < codeSegments.length;) {
                if (codeSegments[i] && (classNames = codeSegments[i].split("="), c = classNames[0], className = classNames[1], c === x)) {
                    return className;
                }
                i++;
            }
        },
        /**
         * @param {Object} a
         * @return {?}
         */
        addAndroidScrollFix : function(a) {
            if (this.isDefaultAndroid()) {
                return a.addClass("androidScrollFix"), setTimeout(function() {
                    return a.removeClass("androidScrollFix"), setTimeout(function() {
                        return a.addClass("androidScrollFix", 100);
                    });
                }, 5E3);
            }
        }
    };
    b.browser = browser;
}), define("framework/categorySlider/categorySlider", ["exports", "framework/string", "framework/store"], function(container, dataAndEvents, deepDataAndEvents) {
    var result;
    result = {
        /**
         * @param {Object} obj
         * @param {?} response
         * @param {?} opt_attributes
         * @return {?}
         */
        insert : function(obj, response, opt_attributes) {
            return ReactDOM.render(React.createElement(require("framework/categorySlider/CategorySlider/component").CategorySlider, {
                data : response,
                initialSlides : response.articles,
                socialMedia : opt_attributes.socialMedia
            }), obj);
        }
    };
    container.categorySlider = result;
}), define("framework/categorySlider/CategorySlider/component", ["exports", "framework/string", "framework/store", "framework/utils"], function(eventHandle, dataAndEvents, c, gma) {
    var elem;
    elem = React.createClass({
        /**
         * @return {?}
         */
        getInitialState : function() {
            return{
                slides : [],
                isLoading : true
            };
        },
        /**
         * @return {?}
         */
        componentWillMount : function() {
            return this.categoryLength = 0, this.hasSwiped = false;
        },
        /**
         * @return {?}
         */
        componentDidMount : function() {
            var $document;
            var categoryLength;
            return $document = $(ReactDOM.findDOMNode(this)), categoryLength = this.props.data.category_article_count, null != categoryLength ? this.categoryLength = categoryLength : this.categoryLength = 30, this.calculateProgress($document, 2, this.categoryLength), this.setState({
                slides : this.createLoadingSlide()
            }, function() {
                var b;
                return b = new Swiper($document.find(".swiper-container")[0], {
                    direction : "horizontal",
                    slidesPerView : 2,
                    resistance : "95%",
                    onTouchEnd : function(self) {
                        return function(p) {
                            return self.calculateProgress($document, p.activeIndex, self.categoryLength + 2);
                        };
                    }(this),
                    onTouchMove : function(dataAndEvents) {
                        return function(deepDataAndEvents) {
                            if (!dataAndEvents.hasSwiped) {
                                return dataAndEvents.loadCategory($document, deepDataAndEvents), dataAndEvents.hasSwiped = true;
                            }
                        };
                    }(this)
                });
            });
        },
        /**
         * @return {?}
         */
        createLoadingSlide : function() {
            var eventPath;
            return eventPath = [], eventPath.push({}), eventPath;
        },
        /**
         * @param {Object} $document
         * @param {?} deepDataAndEvents
         * @return {?}
         */
        loadCategory : function($document, deepDataAndEvents) {
            return c.store.load("categories", {
                id : this.props.data.linked_object_id
            }).then(function(_this) {
                return function(security_context) {
                    var items;
                    var i;
                    var il;
                    var key;
                    var tmp_keys;
                    /** @type {Array} */
                    items = [];
                    tmp_keys = security_context.payload.page_elements;
                    /** @type {number} */
                    i = 0;
                    il = tmp_keys.length;
                    for (;i < il;i++) {
                        key = tmp_keys[i];
                        if ("articles" === key.boxtype) {
                            /** @type {Array} */
                            items = items.concat(key.articles);
                        }
                    }
                    return _this.removeDuplicateEntries(items), _this.setState({
                        slides : items
                    }, function() {
                        var f;
                        return f = $document.find(".imageContainer").height(), $document.find(".imageContainer").css("min-height", f + "px"), gma.utils.loopThroughArticlePreviews(items, $document.find(".articlePreview"), {
                            articlesRead : true,
                            socialCounter : true,
                            socialMedia : _this.props.socialMedia,
                            colorize : {
                                color : security_context.payload.page_elements[0].color,
                                type : "front"
                            },
                            specialIndex : 4
                        }), deepDataAndEvents.reInit(), _this.categoryLength = items.length, _this.setState({
                            isLoading : false
                        });
                    });
                };
            }(this));
        },
        /**
         * @param {Object} results
         * @return {?}
         */
        removeDuplicateEntries : function(results) {
            var l;
            var module;
            var eventPath;
            l = results.length;
            /** @type {Array} */
            eventPath = [];
            for (;l--;) {
                eventPath.push(function() {
                    var i;
                    var valsLength;
                    var codeSegments;
                    var fin;
                    codeSegments = this.props.initialSlides;
                    /** @type {Array} */
                    fin = [];
                    /** @type {number} */
                    i = 0;
                    valsLength = codeSegments.length;
                    for (;i < valsLength;i++) {
                        module = codeSegments[i];
                        if (results[l].id === module.id) {
                            fin.push(results.splice(l, 1));
                        } else {
                            fin.push(void 0);
                        }
                    }
                    return fin;
                }.call(this));
            }
            return eventPath;
        },
        /**
         * @param {Object} $document
         * @param {number} opt_attributes
         * @param {number} results
         * @return {?}
         */
        calculateProgress : function($document, opt_attributes, results) {
            var elem;
            var value;
            return value = opt_attributes / results * 100, elem = $document.find(".paginationContainer .pagination .paginationProgress"), elem.css("width", value + "%");
        },
        /**
         * @return {?}
         */
        render : function() {
            return require("framework/categorySlider/CategorySlider/template").default.apply(this);
        }
    });
    eventHandle.CategorySlider = elem;
}), define("framework/categorySlider/CategorySlider/template", ["exports", "framework/categorySlider/CategorySliderSlide/component"], function(obj, item) {
    /**
     * @param {number} data
     * @param {?} total
     * @return {?}
     */
    function done(data, total) {
        return React.createElement(item.CategorySliderSlide, {
            slide : data,
            key : data.id
        });
    }
    /**
     * @param {number} var_args
     * @param {string} name
     * @return {?}
     */
    function create(var_args, name) {
        return React.createElement(item.CategorySliderSlide, {
            slide : var_args,
            isLoading : this.state.isLoading,
            key : name
        });
    }
    /**
     * @return {?}
     */
    obj.default = function() {
        return React.createElement("div", {
            className : "NnCategorySlider"
        }, React.createElement("div", {
            className : "swiper-container"
        }, React.createElement.apply(this, ["ul", {
            className : "swiper-wrapper"
        }, _.map(this.props.initialSlides, done.bind(this)), _.map(this.state.slides, create.bind(this))])), React.createElement("div", {
            className : "paginationContainer"
        }, React.createElement("div", {
            className : "pagination"
        }, React.createElement("span", {
            className : "paginationProgress"
        }))));
    };
}), define("framework/categorySlider/CategorySliderSlide/component", ["exports"], function(eventHandle) {
    var elem;
    elem = React.createClass({
        /**
         * @return {?}
         */
        componentDidMount : function() {
            var _this;
            return _this = this, $(ReactDOM.findDOMNode(this)).find(">div >a").on("click", function() {
                return $(this).trigger({
                    type : "clickedArticle",
                    id : _this.props.slide.id
                });
            });
        },
        /**
         * @return {?}
         */
        render : function() {
            return require("framework/categorySlider/CategorySliderSlide/template").default.apply(this);
        }
    });
    eventHandle.CategorySliderSlide = elem;
}), define("framework/categorySlider/CategorySliderSlide/template", ["exports", "framework/translations"], function(obj, dataAndEvents) {
    /**
     * @return {?}
     */
    obj.default = function() {
        return React.createElement("li", {
            className : "swiper-slide"
        }, React.createElement("div", {
            className : "articlePreview teaser " + (this.props.isLoading ? "loading" : "")
        }, this.props.isLoading ? React.createElement("div", {
            className : "preloader"
        }, React.createElement("div", {})) : null, React.createElement("a", {
            href : "javascript:void(0);"
        }, React.createElement("div", {}, React.createElement("div", {
            className : "imageContainer"
        }, React.createElement("div", {
            className : "socialCounter"
        }), React.createElement("img", {
            src : this.props.slide.picture_small_url
        })), React.createElement("h5", {}, React.createElement("span", {
            className : "keyword"
        }, this.props.slide.keyword), "\n                    ", this.props.slide.title_short, "\n                "), React.createElement("div", {})))));
    };
}), define("framework/comments/Comment/component", ["exports", "framework/LocalStorageQueue", "framework/translations", "framework/utils", "framework/facebook"], function(tree, dataAndEvents, a, dd, req) {
    var Comment;
    var params;
    var previous;
    previous = new dataAndEvents.LocalStorageQueue("Comments.uprated");
    params = new dataAndEvents.LocalStorageQueue("Comments.shared");
    Comment = React.createClass({
        mixins : [React.addons.LinkedStateMixin],
        maxLength : 800,
        /**
         * @return {?}
         */
        getTimestamp : function() {
            return a.translations.translate("vor") + " " + dd.utils.date.formatRelative(this.props.comment.created_at);
        },
        /**
         * @return {?}
         */
        updateTimestampInterval : function() {
            if (this.isMounted()) {
                return this.setState({
                    createdAt : this.getTimestamp()
                });
            }
        },
        /**
         * @return {?}
         */
        getInitialState : function() {
            return{
                isCommentFormVisible : false,
                isCommentFormDisplayed : false,
                isBlameFormVisible : false,
                isBlameFormDisplayed : false,
                charsLeft : this.maxLength,
                uprates : this.props.comment.uprates,
                message : this.props.comment.message,
                isUprated : previous.contains(this.props.comment.id),
                isShared : params.contains(this.props.comment.id),
                createdAt : this.getTimestamp(),
                exceededChars : false
            };
        },
        /**
         * @return {?}
         */
        focus : function() {
            var first;
            if (first = $(ReactDOM.findDOMNode(this)), !first.hasClass("expanded")) {
                return first.addClass("expanded"), this.props.defaults.hitWemf();
            }
        },
        /**
         * @param {string} key
         * @return {?}
         */
        getFromLocalStorage : function(key) {
            try {
                return localStorage.getItem("Comments." + key);
            } catch (b) {
            }
        },
        /**
         * @return {?}
         */
        componentDidMount : function() {
            if (setInterval(this.updateTimestampInterval, 6E4), !this.props.comment.id) {
                return this.toggleCommentForm();
            }
        },
        /**
         * @return {?}
         */
        componentWillUnmount : function() {
            return clearInterval(this.updateTimestampInterval);
        },
        /**
         * @param {Object} target
         * @param {Object} state
         * @return {?}
         */
        componentDidUpdate : function(target, state) {
            var maxLength;
            if (state.text !== this.state.text) {
                return maxLength = this.maxLength - this.state.text.length, this.setState({
                    charsLeft : maxLength,
                    exceededChars : maxLength < 0
                });
            }
        },
        /**
         * @param {Event} deepDataAndEvents
         * @return {?}
         */
        submitCommentForm : function(deepDataAndEvents) {
            var doc;
            var data;
            if (deepDataAndEvents.preventDefault(), doc = $(ReactDOM.findDOMNode(this.refs.commentForm)), doc.validate()) {
                if (this.props.defaults.showLoader(), data = {
                        message : doc.find("[name=text]").val(),
                        article_id : this.props.defaults.commentsId,
                        parent_id : this.props.comment.id,
                        city : null,
                        zip_code : null,
                        created_at : new Date
                    }, this.props.defaults.facebookUser) {
                    data.first_name = this.props.defaults.facebookUser.first_name;
                    data.last_name = this.props.defaults.facebookUser.last_name;
                    /** @type {string} */
                    data.email = this.props.defaults.facebookUser.name + "@facebook.com";
                } else {
                    data.first_name = doc.find("[name=firstName]").val();
                    data.last_name = doc.find("[name=lastName]").val();
                    data.email = doc.find("[name=email]").val();
                    data.zip_code = doc.find("[name=zipCode]").val();
                    data.city = doc.find("[name=city]").val();
                    try {
                        localStorage.setItem("Comments.firstName", data.first_name);
                        localStorage.setItem("Comments.lastName", data.last_name);
                        localStorage.setItem("Comments.email", data.email);
                        localStorage.setItem("Comments.zipCode", data.zip_code);
                        localStorage.setItem("Comments.city", data.city);
                    } catch (e) {
                    }
                }
                return $.ajax({
                    url : this.props.defaults.apiUrl + "/articles/" + this.props.defaults.commentsId + "/comments",
                    type : "POST",
                    contentType : "application/json; charset=UTF-8",
                    data : JSON.stringify({
                        comment : data
                    }),
                    success : function(self) {
                        return function() {
                            return self.toggleCommentForm(), doc.find("[name=share]").prop("checked") && self.postOnMyWall(data.message), self.setState({
                                text : ""
                            }), doc.find("[type=checkbox]").prop("checked", false), self.props.defaults.showDialog(a.translations.translate("Kommentar versandt"), a.translations.translate("Vielen Dank f\u00fcr Ihren Beitrag. Ihr Kommentar wurde versandt. Bis er von der Redaktion freigeschaltet wird, kann es eine gewisse Zeit dauern.")), self.props.defaults.hitWemf();
                        };
                    }(this),
                    error : function(me) {
                        return function() {
                            return me.props.defaults.showDialog(a.translations.translate("Senden fehlgeschlagen"), a.translations.translate("Ihr Kommentar konnte aus technischen Gr\u00fcnden nicht \u00fcbermittelt werden."));
                        };
                    }(this),
                    complete : function(me) {
                        return function() {
                            return me.props.defaults.hideLoader();
                        };
                    }(this)
                });
            }
            return this.props.defaults.showDialog(a.translations.translate("Senden fehlgeschlagen"), a.translations.translate("Bitte f\u00fcllen Sie alle Felder korrekt aus und akzeptieren Sie die Regeln."));
        },
        /**
         * @param {Event} deepDataAndEvents
         * @return {?}
         */
        submitBlameForm : function(deepDataAndEvents) {
            var doc;
            var result;
            if (deepDataAndEvents.preventDefault(), doc = $(ReactDOM.findDOMNode(this.refs.blameForm)), doc.validate()) {
                this.props.defaults.showLoader();
                result = {
                    name : doc.find("[name=senderName]").val(),
                    email : doc.find("[name=senderEmail]").val(),
                    text : doc.find("[name=blameMessage]").val()
                };
                try {
                    localStorage.setItem("Comments.senderName", result.name);
                    localStorage.setItem("Comments.senderEmail", result.email);
                } catch (e) {
                }
                return $.ajax({
                    url : this.props.defaults.apiUrl + "/articles/" + this.props.defaults.commentsId + "/comments/" + this.props.comment.id + "/blames",
                    type : "POST",
                    contentType : "application/json; charset=UTF-8",
                    data : JSON.stringify({
                        blame : result
                    }),
                    success : function(me) {
                        return function() {
                            return me.toggleBlameForm(), doc.find("[name=blameMessage]").val(""), me.props.defaults.showDialog(a.translations.translate("Kommentar gemeldet"), a.translations.translate("Danke. Unsere Moderatoren pr\u00fcfen Ihren Hinweis so schnell wie m\u00f6glich.")), me.props.defaults.hitWemf();
                        };
                    }(this),
                    error : function(me) {
                        return function() {
                            return me.props.defaults.showDialog(a.translations.translate("Senden fehlgeschlagen"), a.translations.translate("Ihre Meldung konnte aus technischen Gr\u00fcnden nicht \u00fcbermittelt werden."));
                        };
                    }(this),
                    complete : function(me) {
                        return function() {
                            return me.props.defaults.hideLoader();
                        };
                    }(this)
                });
            }
            return this.props.defaults.showDialog(a.translations.translate("Senden fehlgeschlagen"), a.translations.translate("Bitte f\u00fcllen Sie alle Felder korrekt aus."));
        },
        /**
         * @return {?}
         */
        uprate : function() {
            if (!this.state.isUprated) {
                return $.ajax({
                    url : this.props.defaults.apiUrl + "/articles/" + this.props.defaults.commentsId + "/comments/" + this.props.comment.id + "/rates",
                    type : "POST",
                    contentType : "application/json; charset=UTF-8",
                    data : JSON.stringify({
                        rate : {
                            action : "up"
                        }
                    })
                }), this.setState({
                    isUprated : true,
                    uprates : this.state.uprates + 1
                }), previous.add(this.props.comment.id);
            }
        },
        /**
         * @param {string} name
         * @return {?}
         */
        toggleForm : function(name) {
            switch(name) {
                case "comment":
                    return this.toggleCommentForm();
                case "blame":
                    return this.toggleBlameForm();
            }
        },
        /**
         * @return {?}
         */
        toggleCommentForm : function() {
            return this.state.isBlameFormDisplayed && (ReactDOM.findDOMNode(this.refs.blameForm).style.display = "none"), this.state.isCommentFormDisplayed ? this.props.comment.id && $(ReactDOM.findDOMNode(this.refs.commentForm)).toggle() : this.setState({
                isCommentFormDisplayed : true
            }, function(dataAndEvents) {
                return function() {
                    var $document;
                    return $document = $(ReactDOM.findDOMNode(dataAndEvents.refs.commentForm)), $document.find("[placeholder]").simplePlaceholder({
                        placeholderClass : "placeholderForLegacyBrowsers"
                    });
                };
            }(this)), this.props.comment.id && (!this.state.isCommentFormVisible && this.props.defaults.hitWemf()), this.setState({
                isCommentFormVisible : !this.state.isCommentFormVisible
            });
        },
        /**
         * @return {?}
         */
        toggleBlameForm : function() {
            return this.state.isCommentFormDisplayed && (ReactDOM.findDOMNode(this.refs.commentForm).style.display = "none"), this.state.isBlameFormDisplayed ? $(ReactDOM.findDOMNode(this.refs.blameForm)).toggle() : this.setState({
                isBlameFormDisplayed : true
            }, function(dataAndEvents) {
                return function() {
                    var $document;
                    return $document = $(ReactDOM.findDOMNode(dataAndEvents.refs.blameForm)), $document.find("[placeholder]").simplePlaceholder();
                };
            }(this)), this.props.comment.id && (!this.state.isBlameFormVisible && this.props.defaults.hitWemf()), this.setState({
                isBlameFormVisible : !this.state.isBlameFormVisible
            });
        },
        /**
         * @return {?}
         */
        toggleRules : function() {
            return $(ReactDOM.findDOMNode(this)).find(".rules").toggle(), this.props.defaults.hitWemf();
        },
        /**
         * @return {?}
         */
        share : function() {
            if (!this.state.isShared) {
                return this.postOnMyWall('"' + this.props.comment.message.replaceNewLine() + '"\n\n' + a.translations.translate("Kommentar") + " " + a.translations.translate("von") + " " + this.props.comment.first_name + " " + this.props.comment.last_name).then(function(self) {
                    return function() {
                        return self.setState({
                            isShared : true
                        }), params.add(self.props.comment.id);
                    };
                }(this));
            }
        },
        /**
         * @param {string} opt_attributes
         * @return {?}
         */
        postOnMyWall : function(opt_attributes) {
            return req.facebook.postOnMyWall({
                message : opt_attributes,
                link : location.href
            });
        },
        /**
         * @return {?}
         */
        render : function() {
            return require("framework/comments/Comment/template").default.apply(this);
        }
    });
    tree.Comment = Comment;
}), define("framework/comments/Comment/template", ["exports", "framework/translations", "framework/comments/Comment/component"], function(obj, self, item) {
    /**
     * @param {?} __
     * @return {undefined}
     */
    function callback(__) {
        this.uprate();
    }
    /**
     * @param {?} dataObj
     * @return {undefined}
     */
    function func(dataObj) {
        this.toggleForm("blame");
    }
    /**
     * @param {?} pluginName
     * @return {undefined}
     */
    function write(pluginName) {
        this.share();
    }
    /**
     * @param {?} signal_eof
     * @return {undefined}
     */
    function next(signal_eof) {
        this.toggleForm("comment");
    }
    /**
     * @param {?} node
     * @param {Event} deepDataAndEvents
     * @return {undefined}
     */
    function $$(node, deepDataAndEvents) {
        this.submitCommentForm(deepDataAndEvents);
    }
    /**
     * @param {?} component
     * @return {undefined}
     */
    function test(component) {
        this.focus();
    }
    /**
     * @param {?} srcFile
     * @return {undefined}
     */
    function handle(srcFile) {
        this.props.defaults.logout();
    }
    /**
     * @param {?} token
     * @return {undefined}
     */
    function handler(token) {
        this.props.defaults.login();
    }
    /**
     * @param {?} settings
     * @return {undefined}
     */
    function element(settings) {
        this.toggleRules();
    }
    /**
     * @param {?} dataAndEvents
     * @param {Event} deepDataAndEvents
     * @return {undefined}
     */
    function clone(dataAndEvents, deepDataAndEvents) {
        this.submitBlameForm(deepDataAndEvents);
    }
    /**
     * @param {Object} value
     * @param {?} var_args
     * @return {?}
     */
    function extend(value, var_args) {
        return React.createElement(item.Comment, {
            comment : value,
            key : value.id,
            defaults : this.props.defaults
        });
    }
    /**
     * @return {?}
     */
    function init() {
        var data = this.props.comment;
        return React.createElement("li", {
            className : "comment " + (data.id ? "expanded" : "")
        }, data.id ? React.createElement("p", {
            className : "author"
        }, React.createElement("span", {}, "\n            ", data.released ? data.first_name + " " + data.last_name : self.translations.translate("Unbekannter Autor"), "\n        "), React.createElement("time", {}, this.state.createdAt)) : null, React.createElement("p", {
            className : "message",
            dangerouslySetInnerHTML : {
                __html : data.released ? data.message : self.translations.translate("Dieser Kommentar wurde wegen Regelverletzung gel\u00f6scht")
            }
        }), data.id ? React.createElement("p", {
            className : "menu"
        }, React.createElement("a", {
            href : "javascript:void(0);",
            className : this.state.isUprated ? "inactive" : "",
            onClick : callback.bind(this, data),
            name : "uprate"
        }, React.createElement("span", {
            className : "NnIcon upIcon"
        }), "\n            ", self.translations.translate("Empfehlen"), " (", this.state.uprates, ")\n        "), React.createElement("a", {
            href : "javascript:void(0);",
            onClick : func.bind(this, data),
            name : "blame"
        }, self.translations.translate("Melden")), React.createElement("a", {
            href : "javascript:void(0);",
            className : this.state.isShared ? "inactive" : "",
            onClick : write.bind(this, data)
        }, self.translations.translate("Teilen")), this.props.defaults.isCommentingAllowed && data.depth < 3 ? React.createElement("a", {
            href : "javascript:void(0);",
            onClick : next.bind(this, data),
            name : "create"
        }, self.translations.translate("Antworten")) : null) : null, this.state.isCommentFormDisplayed ? React.createElement("form", {
            ref : "commentForm",
            onSubmit : $$.bind(this, data),
            className : "commentForm"
        }, React.createElement("table", {}, React.createElement("tbody", {}, React.createElement("tr", {}, React.createElement("td", {
            colSpan : "4"
        }, React.createElement("div", {}, React.createElement("textarea", {
            name : "text",
            type : "text",
            "data-validation" : "maxLength",
            "data-maxlength" : this.maxLength,
            onFocus : test.bind(this, data),
            valueLink : this.linkState("text"),
            placeholder : self.translations.translate("Schreiben Sie einen Kommentar...")
        }), React.createElement("div", {
            className : "textareaFooter"
        }, React.createElement("p", {
            className : "charsLeft " + (this.state.exceededChars ? "exceeded" : "")
        }, self.translations.translate("Verbleibende Anzahl Zeichen"), ": ", this.state.charsLeft))), React.createElement("p", {
            className : "error",
            "data-label" : "text"
        }, self.translations.translate("Kommentar bearbeiten")))))), React.createElement("table", {
            className : "commentDetails"
        }, this.props.defaults.facebookUser ? React.createElement("tbody", {}, React.createElement("tr", {}, React.createElement("td", {
            colSpan : "4",
            className : "facebookUser"
        }, React.createElement("span", {}, this.props.defaults.facebookUser.first_name, " ", this.props.defaults.facebookUser.last_name, " "), React.createElement("a", {
            href : "javascript:void(0);",
            onClick : handle.bind(this, data)
        }, "(", self.translations.translate("Abmelden"), ")"))), React.createElement("tr", {}, React.createElement("td", {
            colSpan : "4"
        }, React.createElement("label", {}, React.createElement("p", {}, React.createElement("input", {
            type : "checkbox",
            name : "share"
        })), React.createElement("p", {}, "\n                                ", self.translations.translate("Kommentar auf Facebook teilen"), "\n                            "))))) : null, this.props.defaults.facebookUser ? null : React.createElement("tbody", {}, React.createElement("tr", {}, React.createElement("td", {
            colSpan : "4",
            className : "facebookUser"
        }, React.createElement("a", {
            href : "javascript:void(0);",
            onClick : handler.bind(this, data)
        }, React.createElement("span", {
            className : "NnIcon facebookIcon"
        }), self.translations.translate("Mit Facebook anmelden"), "\n                        "))), React.createElement("tr", {}, React.createElement("td", {
            colSpan : "2",
            className : "spaceRight"
        }, React.createElement("input", {
            name : "firstName",
            type : "text",
            "data-validation" : "nodigits",
            placeholder : self.translations.translate("Vorname"),
            defaultValue : this.getFromLocalStorage("firstName")
        }), React.createElement("p", {
            className : "error",
            "data-label" : "firstName"
        }, self.translations.translate("Vorname"), " ", self.translations.translate("fehlt"))), React.createElement("td", {
            colSpan : "2",
            className : "spaceLeft"
        }, React.createElement("input", {
            name : "lastName",
            type : "text",
            "data-validation" : "nodigits",
            placeholder : self.translations.translate("Name"),
            defaultValue : this.getFromLocalStorage("lastName")
        }), React.createElement("p", {
            className : "error",
            "data-label" : "lastName"
        }, self.translations.translate("Name"), " ", self.translations.translate("fehlt")))), React.createElement("tr", {}, React.createElement("td", {
            className : "spaceRight"
        }, React.createElement("input", {
            name : "zipCode",
            type : "text",
            "data-validation" : "digits",
            placeholder : self.translations.translate("PLZ"),
            defaultValue : this.getFromLocalStorage("zipCode")
        }), React.createElement("p", {
            className : "error",
            "data-label" : "zipCode"
        }, self.translations.translate("PLZ"), " ", self.translations.translate("fehlt"))), React.createElement("td", {
            colSpan : "3",
            className : "spaceLeft"
        }, React.createElement("input", {
            name : "city",
            type : "text",
            "," : true,
            "data-validation" : "nodigits",
            placeholder : self.translations.translate("Wohnort"),
            defaultValue : this.getFromLocalStorage("city")
        }), React.createElement("p", {
            className : "error",
            "data-label" : "city"
        }, self.translations.translate("Wohnort"), " ", self.translations.translate("fehlt")))), React.createElement("tr", {}, React.createElement("td", {
            colSpan : "4"
        }, React.createElement("input", {
            name : "email",
            type : "text",
            "data-validation" : "email",
            placeholder : self.translations.translate("E-Mail-Adresse"),
            defaultValue : this.getFromLocalStorage("email")
        }), React.createElement("p", {
            className : "error",
            "data-label" : "email"
        }, self.translations.translate("Bitte geben Sie eine korrekte E-Mail-Adresse ein"))))), React.createElement("tbody", {}, React.createElement("tr", {}, React.createElement("td", {
            colSpan : "4"
        }, React.createElement("label", {
            className : "acceptRules"
        }, React.createElement("p", {}, React.createElement("input", {
            type : "checkbox",
            "data-validation" : "on",
            name : "rules"
        })), React.createElement("p", {}, "\n                                ", self.translations.translate("Ich habe die"), " ", React.createElement("a", {
            href : "javascript:void(0);",
            onClick : element.bind(this, data)
        }, self.translations.translate("Regeln")), " ", self.translations.translate("gelesen und erkl\u00e4re mich einverstanden"), "\n                            ")), React.createElement("p", {
            className : "error",
            "data-label" : "rules"
        }, self.translations.translate("Bitte lesen und akzeptieren Sie die Regeln")))), React.createElement("tr", {}, React.createElement("td", {
            colSpan : "4"
        }, React.createElement("input", {
            type : "submit",
            className : "button",
            value : self.translations.translate("Senden")
        }))))), React.createElement("p", {
            className : "rules",
            dangerouslySetInnerHTML : {
                __html : this.props.defaults.rules
            }
        })) : null, this.state.isBlameFormDisplayed ? React.createElement("form", {
            ref : "blameForm",
            onSubmit : clone.bind(this, data),
            className : "blameForm"
        }, React.createElement("table", {}, React.createElement("tbody", {}, React.createElement("tr", {}, React.createElement("td", {}, React.createElement("p", {}, self.translations.translate("Regelverstoss melden")))), React.createElement("tr", {}, React.createElement("td", {}, React.createElement("p", {}, self.translations.translate("Sie sind der Meinung, dass dieser Kommentar gel\u00f6scht werden sollte? Dann f\u00fcllen Sie bitte dieses Formular aus"), ":"))), React.createElement("tr", {}, React.createElement("td",
            {}, React.createElement("textarea", {
                type : "text",
                name : "blameMessage",
                maxLength : "400",
                placeholder : self.translations.translate("Grund")
            }), React.createElement("p", {
                className : "error",
                "data-label" : "blameMessage"
            }, self.translations.translate("Grund"), " ", self.translations.translate("fehlt")))), React.createElement("tr", {}, React.createElement("td", {}, React.createElement("input", {
            type : "text",
            name : "senderName",
            placeholder : self.translations.translate("Name"),
            "data-validation" : "nodigits",
            defaultValue : this.getFromLocalStorage("senderName")
        }), React.createElement("p", {
            className : "error",
            "data-label" : "senderName"
        }, self.translations.translate("Name"), " ", self.translations.translate("fehlt")))), React.createElement("tr", {}, React.createElement("td", {}, React.createElement("input", {
            type : "text",
            name : "senderEmail",
            placeholder : self.translations.translate("E-Mail-Adresse"),
            "data-validation" : "email",
            defaultValue : this.getFromLocalStorage("senderEmail")
        }), React.createElement("p", {
            className : "error",
            "data-label" : "senderEmail"
        }, self.translations.translate("Bitte geben Sie eine korrekte E-Mail-Adresse ein")))), React.createElement("tr", {}, React.createElement("td", {}, React.createElement("input", {
            type : "submit",
            className : "button",
            value : self.translations.translate("Melden")
        })))))) : null, React.createElement.apply(this, ["ul", {}, _.map(data.children, extend.bind(this))]));
    }
    /**
     * @return {?}
     */
    obj.default = function() {
        return this.props.comment.released || this.props.comment.children.length ? init.apply(this, []) : null;
    };
}), define("framework/comments/comments", ["exports", "framework/string", "framework/jquery", "framework/utils", "framework/store", "framework/translations"], function(post, dataAndEvents, deepDataAndEvents, Backbone, i18n, gyp) {
    var comments;
    var result;
    var self;
    var isEmpty;
    self = {};
    self.config = {
        globalDialogSelector : "",
        globalFullscreenLoaderSelector : "",
        showTeaserComments : false,
        showCommentsCount : true,
        commentRules : "Ehrverletzende, rassistische, unsachliche, themenfremde Kommentare werden gel\u00f6scht.",
        env : ""
    };
    /** @type {Array} */
    result = [];
    /**
     * @param {string} str
     * @return {?}
     */
    isEmpty = function(str) {
        throw "Comments error: " + str;
    };
    comments = {
        /**
         * @param {Object} obj
         * @param {Function} recurring
         * @param {Object} options
         * @return {?}
         */
        insert : function(obj, recurring, options) {
            var selected;
            var callback;
            return this.configure = function() {
                return isEmpty("configure() must not be called after insert()");
            }, arguments.length <= 1 && isEmpty("Parameters missing, pass '<element id>, <comments id>, <callback>|<options>'"), result.indexOf(recurring) > -1 && isEmpty("The provided comments id is already in use"), "function" == typeof options && (callback = options), options = $.extend({}, options), options.callback = options.callback || (callback || function() {
            }), selected = $(obj), selected.data("commentsId", recurring), result.push(recurring), selected.addClass("NnComments"), ReactDOM.render(React.createElement(require("framework/comments/CommentsList/component").default, {
                /** @type {Function} */
                commentsId : recurring,
                callback : options.callback,
                globalDialogSelector : self.config.globalDialogSelector,
                globalFullscreenLoaderSelector : self.config.globalFullscreenLoaderSelector,
                apiUrl : self.config.apiUrl,
                wemfUrls : options.wemfUrls || [],
                showTeaserComments : self.config.showTeaserComments,
                showCommentsCount : self.config.showCommentsCount,
                rules : function() {
                    return "mobile" === self.config.env ? self.config.commentRules.replace("%rulesLink%", "/articles/19367311") : self.config.commentRules.replace("%rulesLink%", "/19367311");
                }()
            }), obj);
        },
        /**
         * @param {?} opt_attributes
         * @return {?}
         */
        configure : function(opt_attributes) {
            return $.extend(self.config, opt_attributes), gyp.translations.configure(self.config.language), Backbone.utils.configure({
                language : self.config.language
            }), i18n.store.configure({
                apiUrl : self.config.apiUrl
            });
        },
        /**
         * @param {string} selector
         * @return {?}
         */
        remove : function(selector) {
            var name;
            return name = $(selector).data("commentsId"), result = _.without(result, name), ReactDOM.unmountComponentAtNode(selector);
        }
    };
    post.comments = comments;
}), define("framework/comments/CommentsList/component", ["exports", "framework/store", "framework/utils", "framework/browser", "framework/facebook", "framework/statistics", "framework/config"], function(attr, c, gma, dataAndEvents, $scope, data, module) {
    var value;
    value = React.createClass({
        mixins : [React.addons.LinkedStateMixin],
        allComments : [],
        filteredComments : [],
        defaultSortBy : "dateDesc",
        /**
         * @return {?}
         */
        getInitialState : function() {
            return{
                comments : [],
                community : [],
                isCommentingAllowed : false,
                facebookUser : null,
                isVisibleOnLM : false
            };
        },
        /**
         * @return {?}
         */
        getDefaultCommentProps : function() {
            return{
                isCommentingAllowed : this.state.isCommentingAllowed,
                facebookUser : this.state.facebookUser,
                commentsId : this.props.commentsId,
                apiUrl : this.props.apiUrl,
                showDialog : this.showDialog,
                login : this.login,
                logout : this.logout,
                showLoader : this.showLoader,
                hideLoader : this.hideLoader,
                hitWemf : this.hitWemf,
                rules : this.props.rules,
                isVisibleOnLM : this.props.isVisibleOnLM
            };
        },
        /**
         * @return {?}
         */
        getLoader : function() {
            var $col;
            return $col = $(ReactDOM.findDOMNode(this)).find(".fullscreenLoader"), this.props.globalFullscreenLoaderSelector && ($col = $("" + this.props.globalFullscreenLoaderSelector)), $col;
        },
        /**
         * @return {?}
         */
        showLoader : function() {
            return this.getLoader().addClass("NnTransparency").show();
        },
        /**
         * @return {?}
         */
        hideLoader : function() {
            return this.getLoader().removeClass("NnTransparency").hide();
        },
        /**
         * @return {?}
         */
        componentDidMount : function() {
            var $col;
            return $col = $(ReactDOM.findDOMNode(this)), this.props.globalFullscreenLoaderSelector || $col.append(require("framework/loader/fullscreenLoader").default()), this.props.globalDialogSelector || ($col.append(require("framework/dialog/templates/dialog").default()), $col.find(".NnDialog").on("click", function(event) {
                return event.delegateTarget.style.display = "none";
            })), "lematin" === module.config.currentCustomer && ($(".notAvailable").addClass("visible"), this.state.isVisibleOnLM = true), RSVP.all([c.store.load("articles", {
                id : this.props.commentsId,
                subkey : "comments"
            }), c.store.load("articles", {
                id : this.props.commentsId,
                subkey : "communities"
            })]).then(function(_this) {
                return function(f) {
                    var isCommentingAllowed;
                    var contextElem;
                    var children;
                    var flatten;
                    return _this.allComments = f[0].payload.comments, contextElem = f[1].payload.communities, (children = function(elem, i) {
                        return null == i && (i = 0), i++, elem.forEach(function(first) {
                            if (first.depth = i, first.children) {
                                return children(first.children, i);
                            }
                        });
                    })(_this.allComments), _this.filteredComments = (flatten = function(target, shallow) {
                        return null == shallow && (shallow = []), target.forEach(function(value) {
                            if (shallow.push(value), value.children) {
                                return flatten(value.children, shallow), value.children = [];
                            }
                        }), shallow;
                    })($.extend(true, [], _this.allComments)).filter(function(pane) {
                        return pane.selected === true;
                    }), _this.filteredComments.sort(function(obj, a) {
                        return new Date(a.created_at) - new Date(obj.created_at);
                    }), isCommentingAllowed = contextElem.filter(function(statement) {
                        return "comment" === statement.type;
                    })[0], _this.setState({
                        comments : _this.allComments,
                        community : isCommentingAllowed,
                        isCommentingAllowed : gma.utils.isCommentingAllowed(isCommentingAllowed.allow_comments_weekdays, isCommentingAllowed.allow_comments_weekends)
                    }, function() {
                        if (this.setState({
                                sortBy : this.filteredComments.length ? "selected" : this.defaultSortBy
                            }, function() {
                                var options;
                                var _i;
                                var i;
                                var _len;
                                var getAll;
                                var codeSegments;
                                var params;
                                if (this.props.showTeaserComments && ("selected" !== this.state.sortBy && this.allComments.length)) {
                                    /** @type {Array} */
                                    params = [];
                                    codeSegments = this.allComments.slice(0, 2);
                                    /** @type {number} */
                                    i = _i = 0;
                                    _len = codeSegments.length;
                                    for (;_i < _len;i = ++_i) {
                                        if (options = codeSegments[i], options = $.extend(true, {}, options), 0 !== options.children.length) {
                                            if (1 === i) {
                                                /** @type {Array} */
                                                options.children = [];
                                            } else {
                                                this.spliceChildArray(options.children, 1);
                                            }
                                            params.push(options);
                                            break;
                                        }
                                        /** @type {Array} */
                                        options.children = [];
                                        params.push(options);
                                    }
                                    this.setState({
                                        comments : params
                                    });
                                }
                                return getAll = this.sort, this.sort = function(args) {
                                    return function(clone) {
                                        return getAll(clone), args.props.showTeaserComments && $(ReactDOM.findDOMNode(args.refs.showAllComments)).hide(), args.hitWemf();
                                    };
                                }(this);
                            }), $scope.facebook.init().then(function(dataAndEvents) {
                                return function() {
                                    return dataAndEvents.setState({
                                        facebookUser : $scope.facebook.getUser()
                                    }), $($scope.facebook).on("login logout", function(ignoreMethodDoesntExist, deepDataAndEvents) {
                                        return dataAndEvents.setState({
                                            facebookUser : deepDataAndEvents
                                        });
                                    });
                                };
                            }(this)), this.props.callback && this.props.callback(f), !this.props.globalFullscreenLoaderSelector) {
                            return this.hideLoader();
                        }
                    });
                };
            }(this));
        },
        /**
         * @return {?}
         */
        componentWillUnmount : function() {
            return $($scope.facebook).off("login logout");
        },
        /**
         * @param {Array} arr
         * @param {number} index
         * @return {?}
         */
        spliceChildArray : function(arr, index) {
            if (arr.splice(index, arr.length), null != arr[0]) {
                return this.spliceChildArray(arr[0].children, 0);
            }
        },
        /**
         * @param {Function} array
         * @return {?}
         */
        sort : function(array) {
            switch(array) {
                case "popularity":
                    return this.setState({
                        comments : this.allComments.sort(function(b, a) {
                            return a.uprates - b.uprates;
                        })
                    });
                case "dateDesc":
                    return this.setState({
                        comments : this.allComments.sort(function(obj, a) {
                            return new Date(a.created_at) - new Date(obj.created_at);
                        })
                    });
                case "dateAsc":
                    return this.setState({
                        comments : this.allComments.sort(function(obj, a) {
                            return new Date(obj.created_at) - new Date(a.created_at);
                        })
                    });
                case "selected":
                    return this.setState({
                        comments : this.filteredComments
                    });
            }
        },
        /**
         * @return {?}
         */
        login : function() {
            return $scope.facebook.login(), this.hitWemf();
        },
        /**
         * @return {?}
         */
        logout : function() {
            return $scope.facebook.logout(), this.hitWemf();
        },
        /**
         * @return {?}
         */
        hitWemf : function() {
            return data.statistics.track("wemf", this.props.wemfUrls.map(function(requestUrl) {
                return{
                    provider : "wemf",
                    url : requestUrl,
                    desktop_url : requestUrl
                };
            }));
        },
        /**
         * @return {?}
         */
        showAllComments : function() {
            return $(ReactDOM.findDOMNode(this.refs.showAllComments)).hide(), this.setState({
                comments : this.allComments
            }), this.props.showTeaserComments && "selected" === this.state.sortBy ? this.setState({
                sortBy : this.defaultSortBy
            }) : this.hitWemf();
        },
        /**
         * @param {string} args
         * @param {string} callback
         * @return {?}
         */
        showDialog : function(args, callback) {
            return gma.utils.showDialog(this.props.globalDialogSelector ? "" + this.props.globalDialogSelector : $(ReactDOM.findDOMNode(this)).find(".NnDialog")[0], args, callback);
        },
        /**
         * @return {?}
         */
        render : function() {
            return require("framework/comments/CommentsList/template").default.apply(this);
        },
        /**
         * @param {Object} target
         * @param {Object} putativeSpy
         * @return {?}
         */
        componentDidUpdate : function(target, putativeSpy) {
            if (putativeSpy.sortBy !== this.state.sortBy) {
                return this.sort(this.state.sortBy);
            }
        }
    });
    attr.default = value;
}), define("framework/comments/CommentsList/template", ["exports", "framework/translations", "framework/comments/Comment/component"], function(obj, self, item) {
    /**
     * @param {Object} c
     * @param {?} var_args
     * @return {?}
     */
    function create(c, var_args) {
        return React.createElement(item.Comment, {
            comment : c,
            key : c.id,
            defaults : this.getDefaultCommentProps()
        });
    }
    /**
     * @return {undefined}
     */
    function func() {
        this.showAllComments();
    }
    /**
     * @return {?}
     */
    obj.default = function() {
        return React.createElement("div", {}, this.props.showCommentsCount ? React.createElement("h2", {}, "\n        ", this.state.community.count, " ", this.state.community.comment_count_text, "\n    ") : null, this.state.isVisibleOnLM ? React.createElement("div", {}, React.createElement("p", {
            className : "LMonly"
        }, "\n           ", self.translations.translate("Kommentare k\u00f6nnen nur am Desktop eingegeben werden."), "\n        ")) : null, React.createElement("ul", {}, this.state.isCommentingAllowed ? React.createElement(item.Comment, {
            comment : {
                released : true
            },
            defaults : this.getDefaultCommentProps()
        }) : null), this.state.comments.length ? React.createElement("div", {
            className : "separator"
        }) : null, this.state.comments.length ? React.createElement("table", {
            className : "NnSelect"
        }, React.createElement("tbody", {}, React.createElement("tr", {}, React.createElement("td", {}, React.createElement("span", {
            className : "NnIcon downIcon"
        })), React.createElement("td", {}, React.createElement("select", {
            valueLink : this.linkState("sortBy")
        }, React.createElement("option", {
            value : "dateDesc"
        }, self.translations.translate("Neuste")), React.createElement("option", {
            value : "popularity"
        }, self.translations.translate("Beliebteste")), this.filteredComments.length ? React.createElement("option", {
            value : "selected"
        }, self.translations.translate("Wahl der Redaktion")) : null, React.createElement("option", {
            value : "dateAsc"
        }, self.translations.translate("\u00c4lteste"))))))) : null, React.createElement.apply(this, ["ul", {
            ref : "commentsList"
        }, _.map(this.state.comments, create.bind(this))]), this.props.showTeaserComments && this.state.comments.length ? React.createElement("a", {
            href : "javascript:void(0);",
            className : "showAllComments",
            ref : "showAllComments",
            onClick : func.bind(this)
        }, "\n        ", self.translations.translate("Alle Kommentare anzeigen"), "\n        ", React.createElement("span", {
            className : "NnIcon downIcon"
        })) : null);
    };
}), define("framework/config", ["exports"], function(__exports__) {
    var config;
    var i;
    var comp;
    var e;
    if (comp = {
            rules : {
                dch : 'Wir freuen uns, dass Sie bei uns einen Kommentar abgeben wollen. Ihr Onlinekommentar kann auch auf der Leserbriefseite der gedruckten Zeitung erscheinen. Bitte machen Sie sich vorab mit <a href="%rulesLink%">unseren Kommentarregeln</a> vertraut. Die Redaktion beh\u00e4lt sich vor, Beitr\u00e4ge nicht zu publizieren. Dies gilt ganz allgemein, aber insbesondere f\u00fcr ehrverletzende, rassistische, unsachliche, themenfremde Kommentare oder solche in Mundart oder Fremdsprachen. Kommentare mit Fantasienamen oder offensichtlich falschen Namen werden ebenfalls nicht ver\u00f6ffentlicht. \u00dcber die Entscheide der Redaktion wird weder Rechenschaft abgelegt, noch Korrespondenz gef\u00fchrt. Die Redaktion beh\u00e4lt sich ausserdem vor, Leserkommentare zu k\u00fcrzen. Bitte nehmen Sie zur Kenntnis, dass Ihre Beitr\u00e4ge auch von Google und anderen Suchmaschinen gefunden werden k\u00f6nnen und dass die Redaktion nichts unternehmen kann, um einen Kommentar aus dem Suchmaschinenindex zu l\u00f6schen.',
                wch : "Nous nous r\u00e9jouissons de votre contribution. Veuillez prendre connaissance des conditions d'utilisation suivantes: La r\u00e9daction se r\u00e9serve le droit de ne pas publier un commentaire, et plus particuli\u00e8rement pour les termes insultants, racistes, subjectifs ou inappropri\u00e9s, ainsi que ceux r\u00e9dig\u00e9s en langues \u00e9trang\u00e8res. Les commentaires avec des pseudonymes ou des fausses identit\u00e9s ne seront pas non plus publi\u00e9s. La r\u00e9daction n'a pas \u00e0 rendre de compte ou \u00e0 communiquer au sujet de ses d\u00e9cisions. Aucune explication ne sera donn\u00e9e par t\u00e9l\u00e9phone. La r\u00e9daction se r\u00e9serve \u00e9galement le droit de raccourcir les commentaires des lecteurs. Veuillez \u00e9galement noter que votre commentaire pourra \u00eatre index\u00e9 par Google et tout autre moteur de recherche. La r\u00e9daction ne pourra \u00eatre tenue pour responsable, tout comme elle ne pourra supprimer un commentaire index\u00e9 par un moteur de recherche."
            }
        }, config = {
            /**
             * @param {?} opt_attributes
             * @return {?}
             */
            configure : function(opt_attributes) {
                return $.extend(this, opt_attributes);
            },
            version : window.version = "1.322.0-23",
            api : window.api,
            apiUrl : "/api",
            defaultPathname : "/fronts/mobile",
            requestTimeout : 5E3,
            requestRetries : 10,
            timeoutBetweenRetries : 1E3,
            internalConsole : false,
            noNavigation : false,
            noHeader : false,
            initialTransition : true,
            isDebugMode : false,
            isNativeApp : false,
            language : "de",
            commentRules : comp.rules.dch,
            customers : {
                "24heures" : {
                    fullName : "24heures",
                    shortName : "VQH",
                    alternativeName : "24heures",
                    language : "fr",
                    locale : "fr_FR",
                    appleAppId : 380349537,
                    wemf : {
                        survey : {
                            szmvars : "24heures//CP//",
                            url : "https://24heures-ssl.wemfbox.ch/2004/01/survey.js"
                        },
                        nn1 : ["https://newsnetz-ssl.wemfbox.ch/cgi-bin/ivw/CP/24heures/", "https://24heures-ssl.wemfbox.ch/cgi-bin/ivw/CP/"]
                    },
                    twitter : {
                        accountName : "24heuresch"
                    },
                    facebook : {
                        pageId : 0x240f767ee8ed3c,
                        pageUrl : "https://facebook.com/24heures.ch",
                        init : {
                            appId : 0xe48ae959be71,
                            version : "v2.6",
                            channelUrl : "http://www.24heures.ch/channel.html",
                            status : true,
                            cookie : true,
                            xfbml : true
                        },
                        login : {
                            scope : "publish_actions,user_likes"
                        }
                    },
                    commentRules : comp.rules.wch
                },
                bazonline : {
                    fullName : "Baslerzeitung",
                    shortName : "BaZ",
                    alternativeName : "bazonline",
                    locale : "de_DE",
                    appleAppId : 327214089,
                    wemf : {
                        survey : {
                            szmvars : "baz//CP//",
                            url : "https://baz-ssl.wemfbox.ch/2004/01/survey.js"
                        },
                        nn1 : ["https://newsnetz-ssl.wemfbox.ch/cgi-bin/ivw/CP/baz/", "https://baz-ssl.wemfbox.ch/cgi-bin/ivw/CP/"]
                    },
                    twitter : {
                        accountName : "bazonline"
                    },
                    facebook : {
                        pageId : 111236060676,
                        pageUrl : "https://www.facebook.com/pages/Basler-Zeitung/111236060676",
                        init : {
                            appId : 0xa8f52ff12d4b,
                            version : "v2.6",
                            channelUrl : "http://www.bazonline.ch/channel.html",
                            status : true,
                            cookie : true,
                            xfbml : true
                        },
                        login : {
                            scope : "publish_actions,user_likes"
                        }
                    },
                    commentRules : "Wir freuen uns, dass Sie bei uns einen Kommentar abgeben wollen. Ihr Onlinekommentar kann auch auf der Leserbriefseite der gedruckten Zeitung (mit Angabe Wohnort) erscheinen. Bitte nehmen Sie vorab folgende Regeln zur Kenntnis: Die Redaktion beh\u00e4lt sich vor, Kommentare nicht zu publizieren. Dies gilt ganz allgemein, aber insbesondere f\u00fcr ehrverletzende, rassistische, unsachliche, themenfremde Kommentare oder solche in Mundart oder Fremdsprachen. Kommentare mit Fantasienamen oder mit ganz offensichtlich falschen Namen werden ebenfalls nicht ver\u00f6ffentlicht. \u00dcber die Entscheide der Redaktion wird weder Rechenschaft abgelegt, noch Korrespondenz gef\u00fchrt. Telefonische Ausk\u00fcnfte werden keine erteilt. Die Redaktion beh\u00e4lt sich ausserdem vor, Leserkommentare online wie in der Printausgabe zu k\u00fcrzen. Bitte nehmen Sie zur Kenntnis, dass Ihr Kommentar auch von Google und anderen Suchmaschinen gefunden werden kann und dass die Redaktion nichts unternehmen kann und wird, um einen einmal abgegebenen Kommentar aus dem Suchmaschinenindex zu l\u00f6schen."
                },
                bernerzeitung : {
                    fullName : "Bernerzeitung",
                    shortName : "BZ",
                    alternativeName : "bernerzeitung",
                    locale : "de_DE",
                    appleAppId : 327210951,
                    wemf : {
                        survey : {
                            szmvars : "bernerz//CP//",
                            url : "https://bernerz-ssl.wemfbox.ch/2004/01/survey.js"
                        },
                        nn1 : ["https://newsnetz-ssl.wemfbox.ch/cgi-bin/ivw/CP/bernerz/", "https://bernerz-ssl.wemfbox.ch/cgi-bin/ivw/CP/"]
                    },
                    twitter : {
                        accountName : "BernerZeitung"
                    },
                    facebook : {
                        pageId : 69474637264,
                        pageUrl : "https://www.facebook.com/pages/wwwbernerzeitungch/69474637264",
                        init : {
                            appId : 0x89e8c640dab4,
                            version : "v2.6",
                            channelUrl : "http://www.bernerzeitung.ch/channel.html",
                            status : true,
                            cookie : true,
                            xfbml : true
                        },
                        login : {
                            scope : "publish_actions,user_likes"
                        }
                    }
                },
                derbund : {
                    fullName : "Der Bund",
                    shortName : "B",
                    alternativeName : "derbund",
                    locale : "de_DE",
                    appleAppId : 327212452,
                    wemf : {
                        survey : {
                            szmvars : "derbund//CP//",
                            url : "https://derbund-ssl.wemfbox.ch/2004/01/survey.js"
                        },
                        nn1 : ["https://newsnetz-ssl.wemfbox.ch/cgi-bin/ivw/CP/derbund/", "https://derbund-ssl.wemfbox.ch/cgi-bin/ivw/CP/"]
                    },
                    twitter : {
                        accountName : "derbund"
                    },
                    facebook : {
                        pageId : 0xa2b88c55e7a5,
                        pageUrl : "https://facebook.com/derbundch",
                        init : {
                            appId : 0x91e1137db9d7,
                            version : "v2.6",
                            channelUrl : "http://www.derbund.ch/channel.html",
                            status : true,
                            cookie : true,
                            xfbml : true
                        },
                        login : {
                            scope : "publish_actions,user_likes"
                        }
                    }
                },
                lematin : {
                    fullName : "LeMatin",
                    shortName : "LM",
                    alternativeName : "lematin",
                    language : "fr",
                    locale : "fr_FR",
                    appleAppId : 307368454,
                    wemf : {
                        survey : {
                            url : "https://lematin-ssl.wemfbox.ch/2004/01/survey.js",
                            szmvars : "lematin//CP//"
                        },
                        nn1 : ["https://newsnetz-ssl.wemfbox.ch/cgi-bin/ivw/CP/lematin/", "https://lematin-ssl.wemfbox.ch/cgi-bin/ivw/CP/"]
                    },
                    twitter : {
                        accountName : "lematinch"
                    },
                    facebook : {
                        pageId : 0x622626671623,
                        pageUrl : "https://www.facebook.com/lematin.ch",
                        init : {
                            appId : 0xaba71f315271,
                            version : "v2.6",
                            channelUrl : "http://www.tagesanzeiger.ch/channel.html",
                            status : true,
                            cookie : true,
                            xfbml : true
                        },
                        login : {
                            scope : "publish_actions,user_likes"
                        }
                    },
                    commentRules : comp.rules.wch
                },
                tagesanzeiger : {
                    fullName : "Tages-Anzeiger",
                    shortName : "TA",
                    alternativeName : "tagesanzeiger",
                    locale : "de_DE",
                    appleAppId : 322823380,
                    wemf : {
                        survey : {
                            url : "https://tagi-ssl.wemfbox.ch/2004/01/survey.js",
                            szmvars : "tagesanz//CP//"
                        },
                        nn1 : ["https://newsnetz-ssl.wemfbox.ch/cgi-bin/ivw/CP/tagesanz/", "https://tagi-ssl.wemfbox.ch/cgi-bin/ivw/CP/"]
                    },
                    twitter : {
                        accountName : "tagesanzeiger"
                    },
                    facebook : {
                        pageId : 177194474660,
                        pageUrl : "https://facebook.com/Tagesanzeiger",
                        init : {
                            appId : 0x85cf003bc7a8,
                            version : "v2.6",
                            channelUrl : "http://www.tagesanzeiger.ch/channel.html",
                            status : true,
                            cookie : true,
                            xfbml : true
                        },
                        login : {
                            scope : "publish_actions,user_likes"
                        }
                    }
                },
                tdg : {
                    fullName : "Tribune de Gen\u00e9ve",
                    shortName : "TDG",
                    alternativeName : "tdg",
                    language : "fr",
                    locale : "fr_FR",
                    appleAppId : 380351338,
                    twitter : {
                        accountName : "tdggeneve"
                    },
                    wemf : {
                        survey : {
                            url : "https://tdg-ssl.wemfbox.ch/2004/01/survey.js",
                            szmvars : "tdg//CP//"
                        },
                        nn1 : ["https://newsnetz-ssl.wemfbox.ch/cgi-bin/ivw/CP/tdg/", "https://tdg-ssl.wemfbox.ch/cgi-bin/ivw/CP/"]
                    },
                    facebook : {
                        pageId : 0x5fab172cbbe0,
                        pageUrl : "https://facebook.com/tdg.ch",
                        init : {
                            appId : 0xca328161bb05,
                            version : "v2.6",
                            channelUrl : "http://www.derbund.ch/channel.html",
                            status : true,
                            cookie : true,
                            xfbml : true
                        },
                        login : {
                            scope : "publish_actions,user_likes"
                        }
                    },
                    commentRules : comp.rules.wch
                },
                zsz : {
                    fullName : "Z\u00fcrichsee-Zeitung",
                    shortName : "ZSZ",
                    alternativeName : "zsz",
                    locale : "de_DE",
                    twitter : {
                        accountName : "ZSZonline"
                    },
                    facebook : {
                        pageId : 385968291506847,
                        pageUrl : "https://www.facebook.com/pages/Z%C3%BCrichsee-Zeitung/385968291506847",
                        init : {
                            appId : 0x5771af8280f98,
                            version : "v2.6",
                            channelUrl : "http://www.zsz.ch/channel.html",
                            status : true,
                            cookie : true,
                            xfbml : true
                        },
                        login : {
                            scope : "publish_actions,user_likes"
                        }
                    },
                    wemf : {
                        survey : {
                            url : "https://zsz-ssl.wemfbox.ch/2004/01/survey.js",
                            szmvars : "zsz//CP//"
                        },
                        nn1 : ["https://newsnetz-ssl.wemfbox.ch/cgi-bin/ivw/CP/zsz/", "https://zsz-ssl.wemfbox.ch/cgi-bin/ivw/CP/"]
                    }
                },
                landbote : {
                    fullName : "Landbote",
                    shortName : "LB",
                    alternativeName : "landbote",
                    locale : "de_DE",
                    twitter : {
                        accountName : "landbote"
                    },
                    facebook : {
                        pageId : 0x847f82b7cf17,
                        pageUrl : "https://www.facebook.com/landbote",
                        init : {
                            appId : 738531732909881,
                            version : "v2.6",
                            channelUrl : "http://www.landbote.ch/channel.html",
                            status : true,
                            cookie : true,
                            xfbml : true
                        },
                        login : {
                            scope : "publish_actions,user_likes"
                        }
                    },
                    wemf : {
                        survey : {
                            url : "https://winti-ssl.wemfbox.ch/2004/01/survey.js",
                            szmvars : "winti//CP//"
                        },
                        nn1 : ["https://newsnetz-ssl.wemfbox.ch/cgi-bin/ivw/CP/winti/", "https://winti-ssl.wemfbox.ch/cgi-bin/ivw/CP/"]
                    }
                },
                zuonline : {
                    fullName : "Z\u00fcrcher Unterl\u00e4nder",
                    shortName : "ZU",
                    alternativeName : "zuonline",
                    locale : "de_DE",
                    twitter : {
                        accountName : "ZUnterland"
                    },
                    facebook : {
                        pageId : 588623241193743,
                        pageUrl : "https://www.facebook.com/pages/Z%C3%BCrcher-Unterl%C3%A4nder/588623241193743",
                        init : {
                            appId : 900877159943131,
                            version : "v2.6",
                            channelUrl : "http://www.zuonline.ch/channel.html",
                            status : true,
                            cookie : true,
                            xfbml : true
                        },
                        login : {
                            scope : "publish_actions,user_likes"
                        }
                    },
                    wemf : {
                        survey : {
                            url : "https://zuonline-ssl.wemfbox.ch/2004/01/survey.js",
                            szmvars : "zuonline//CP//"
                        },
                        nn1 : ["https://newsnetz-ssl.wemfbox.ch/cgi-bin/ivw/CP/zuonline/", "https://zuonline-ssl.wemfbox.ch/cgi-bin/ivw/CP/"]
                    }
                },
                berneroberlaender : {
                    fullName : "Berner Oberl\u00e4nder",
                    shortName : "BO",
                    alternativeName : "berneroberlaender",
                    locale : "de_DE",
                    appleAppId : 994154918,
                    wemf : {
                        survey : {
                            szmvars : "bernerz//CP//",
                            url : "https://bernerz-ssl.wemfbox.ch/2004/01/survey.js"
                        },
                        nn1 : ["https://newsnetz-ssl.wemfbox.ch/cgi-bin/ivw/CP/bernerz/", "https://bernerz-ssl.wemfbox.ch/cgi-bin/ivw/CP/"]
                    },
                    twitter : {
                        accountName : "BernerZeitung"
                    },
                    facebook : {
                        pageId : 69474637264,
                        pageUrl : "https://www.facebook.com/pages/wwwbernerzeitungch/69474637264",
                        init : {
                            appId : 0x6c80662f83271,
                            version : "v2.6",
                            channelUrl : "http://www.berneroberlaender.ch/channel.html",
                            status : true,
                            cookie : true,
                            xfbml : true
                        },
                        login : {
                            scope : "publish_actions,user_likes"
                        }
                    }
                },
                thunertagblatt : {
                    fullName : "Thuner Tagblatt",
                    shortName : "TT",
                    alternativeName : "thunertagblatt",
                    locale : "de_DE",
                    wemf : {
                        survey : {
                            szmvars : "bernerz//CP//",
                            url : "https://bernerz-ssl.wemfbox.ch/2004/01/survey.js"
                        },
                        nn1 : ["https://newsnetz-ssl.wemfbox.ch/cgi-bin/ivw/CP/bernerz/", "https://bernerz-ssl.wemfbox.ch/cgi-bin/ivw/CP/"]
                    },
                    twitter : {
                        accountName : "BernerZeitung"
                    },
                    facebook : {
                        pageId : 69474637264,
                        pageUrl : "https://www.facebook.com/pages/wwwbernerzeitungch/69474637264",
                        init : {
                            appId : 800283720174358,
                            version : "v2.6",
                            channelUrl : "http://www.thunertagblatt.ch/channel.html",
                            status : true,
                            cookie : true,
                            xfbml : true
                        },
                        login : {
                            scope : "publish_actions,user_likes"
                        }
                    }
                },
                langenthalertagblatt : {
                    fullName : "Langenthaler Tagblatt",
                    shortName : "LT",
                    alternativeName : "langenthalertagblatt",
                    locale : "de_DE",
                    appleAppId : 994154247,
                    wemf : {
                        survey : {
                            szmvars : "bernerz//CP//",
                            url : "https://bernerz-ssl.wemfbox.ch/2004/01/survey.js"
                        },
                        nn1 : ["https://newsnetz-ssl.wemfbox.ch/cgi-bin/ivw/CP/bernerz/", "https://bernerz-ssl.wemfbox.ch/cgi-bin/ivw/CP/"]
                    },
                    twitter : {
                        accountName : "BernerZeitung"
                    },
                    facebook : {
                        pageId : 69474637264,
                        pageUrl : "http://www.facebook.com/pages/wwwbernerzeitungch/69474637264",
                        init : {
                            appId : 0x674267f1a72f,
                            version : "v2.6",
                            channelUrl : "http://www.langenthalertagblatt.ch/channel.html",
                            status : true,
                            cookie : true,
                            xfbml : true
                        },
                        login : {
                            scope : "publish_actions,user_likes"
                        }
                    }
                },
                "12app" : {
                    shortName : "BOA",
                    alternativeName : "12app",
                    language : "de",
                    locale : "de_DE",
                    appleAppId : 985919437,
                    productWebsite : "http://www.12app.ch/",
                    itunesAppStoreUrl : "https://itunes.apple.com/us/app/12-app/id985919437?l=de&ls=1&mt=8",
                    googlePlayStoreUrl : "https://play.google.com/store/apps/details?id=ch.iagentur.i12app",
                    twitter : {
                        accountName : null
                    },
                    facebook : {
                        init : {
                            appId : 0x6182a80b7faa,
                            version : "v2.6",
                            xfbml : true
                        }
                    },
                    commentRules : comp.rules.dch
                }
            },
            paywall : {
                enabled : true,
                status : {
                    enabled : 2,
                    trackOnly : 1,
                    disabled : 0
                },
                templateSets : "https://%subdomain%.%currentCustomer%.ch/cre-1.0/cockpit/platform/tamedia/shop/%alternativeName%/api/templatesets.js",
                templateClient : "https://%subdomain%.%currentCustomer%.ch/cre-1.0/static/tracking/1.0/templateclient.js",
                tracking : "https://%subdomain%.%currentCustomer%.ch/cre-1.0/tracking/tracking.js",
                logout : "https://%subdomain%.tamedia.ch/tamstorefront/logoutOnLead",
                abo : "https://%subdomain%.%currentCustomer%.ch",
                myAccount : "https://%subdomain%.%currentCustomer%.ch/tamstorefront/my-account"
            }
        }, $.extend(config, window.configOverrides), navigator.userAgent.indexOf("app-ios-smartphone") > -1 || (navigator.userAgent.indexOf("app-android-smartphone") > -1 || (navigator.userAgent.indexOf("app-ios-tablet") > -1 || navigator.userAgent.indexOf("app-android-tablet") > -1))) {
        switch(config.isNativeApp = true, config.noHeader = true, config.paywall.enabled = false, e = navigator.userAgent.substr(navigator.userAgent.lastIndexOf("-") + 1, navigator.userAgent.length)) {
            case "3":
                /** @type {boolean} */
                config.noHeader = false;
                /** @type {boolean} */
                config.noNavigation = true;
        }
    }
    config.currentCustomer = i = window.location.hostname.split(".").reverse()[1];
    if (!config.customers[i]) {
        i = config.currentCustomer = window.defaultCustomer;
    }
    $.extend(config, config.customers[i]);
    config.isProduction = function() {
        return "mobile" === config.env ? window.location.hostname.toLowerCase().indexOf("mobile2") > -1 : ["localhost", "dev", "staging", "paywall"].every(function(klass) {
            return window.location.hostname.toLowerCase().indexOf(klass) < 0;
        });
    }();
    __exports__.config = config;
}), define("framework/dialog/dialog", ["exports"], function(context) {
    var dialog;
    dialog = {
        /**
         * @return {?}
         */
        init : function() {
            return $(".NnDialog").on("click", function(event) {
                return event.delegateTarget.style.display = "none";
            });
        }
    };
    context.dialog = dialog;
}), define("framework/dialog/templates/dialog", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<div {{#if id}}id="{{id}}"{{/if}} class="NnDialog" name="close">\n    <div>\n        <a class="iconClose"><span class="NnIcon closeIcon"></span></a>\n\n        <h1></h1>\n        <h2></h2>\n        <div>\n            {{> loader}}\n        </div>\n    </div>\n</div>');
}), define("framework/eventsMixin", ["exports"], function(dataAndEvents) {
    var pager;
    /**
     * @return {?}
     */
    pager = function() {
        return this.registerEvent = function(eventName) {
            return null == this.__eventListeners && (this.__eventListeners = {}), null == this.__eventListeners[eventName] && (this.__eventListeners[eventName] = []), this;
        }, this.registerEvents = function(xs) {
            var x;
            var _i;
            var _len;
            /** @type {number} */
            _i = 0;
            _len = xs.length;
            for (;_i < _len;_i++) {
                x = xs[_i];
                this.registerEvent(x);
            }
            return this;
        }, this.on = function(type, wait) {
            var events;
            var j;
            var k;
            events = type.split(" ");
            /** @type {number} */
            j = 0;
            k = events.length;
            for (;j < k;j++) {
                type = events[j];
                if (null != this.__eventListeners[type]) {
                    this.__eventListeners[type].push(wait);
                }
            }
            return this;
        }, this.off = function(eventName, fn) {
            var eventNames;
            var i;
            var idx;
            var _i;
            var total;
            var _ref;
            eventNames = eventName.split(" ");
            /** @type {number} */
            idx = 0;
            total = eventNames.length;
            for (;idx < total;idx++) {
                if (eventName = eventNames[idx], null != this.__eventListeners[eventName]) {
                    if (null != fn) {
                        /** @type {number} */
                        i = _i = _ref = this.__eventListeners[eventName].length - 1;
                        for (;_i >= 0;i = _i += -1) {
                            if (this.__eventListeners[eventName][i] === fn) {
                                this.__eventListeners[eventName].splice(i, 1);
                            }
                        }
                    } else {
                        /** @type {number} */
                        this.__eventListeners[eventName].length = 0;
                    }
                }
            }
            return this;
        }, this.trigger = function(type, data) {
            var callback;
            var _i;
            var _len;
            var list;
            if (null != this.__eventListeners[type]) {
                list = this.__eventListeners[type];
                /** @type {number} */
                _i = 0;
                _len = list.length;
                for (;_i < _len;_i++) {
                    callback = list[_i];
                    if (null != data) {
                        callback.apply(this, null != data.length ? data : [data]);
                    } else {
                        callback.call(this);
                    }
                }
            }
            return this;
        }, this;
    };
    /** @type {function (): ?} */
    dataAndEvents.eventsMixin = pager;
}), define("framework/facebook", ["exports", "framework/config", "framework/browser", "framework/utils", "framework/translations"], function(req, data, b, dataAndEvents, deepDataAndEvents) {
    var i18n;
    var optgroup;
    var h;
    var invokeDfd;
    invokeDfd = RSVP.defer();
    /** @type {boolean} */
    h = false;
    /** @type {null} */
    optgroup = null;
    i18n = {
        /**
         * @return {?}
         */
        init : function() {
            return h || (h = true, $.loadExternalScript("//connect.facebook.net/" + data.config.locale + "/sdk.js#xfbml=1&version=v2.6&appId=" + data.config.facebook.init.appId).then(function(dataAndEvents) {
                return function() {
                    return FB.init(data.config.facebook.init), FB.getLoginStatus(function(jqXHR) {
                        return "connected" === jqXHR.status ? FB.api("/me?fields=first_name,last_name", function(dataAndEvents) {
                            return optgroup = dataAndEvents, invokeDfd.resolve();
                        }) : invokeDfd.resolve();
                    });
                };
            }(this))), invokeDfd.promise;
        },
        /**
         * @return {?}
         */
        getUser : function() {
            return optgroup;
        },
        /**
         * @return {?}
         */
        checkIfUserLikedPage : function() {
            var invokeDfd;
            return invokeDfd = RSVP.defer(), this.login().then(function() {
                return FB.api("/me/likes/" + data.config.facebook.pageId, function(imageData) {
                    return invokeDfd.resolve(imageData.data.length > 0);
                });
            }), invokeDfd.promise;
        },
        /**
         * @return {?}
         */
        login : function() {
            return optgroup ? invokeDfd.promise : (b.browser.isWP() || data.config.isNativeApp ? location.href = "https://www.facebook.com/dialog/oauth?client_id=" + data.config.facebook.init.appId + "&response_type=token&redirect_uri=" + location.href : window.FB && (invokeDfd = RSVP.defer(), FB.login(function(elem) {
                return function(response) {
                    if (response.authResponse) {
                        return FB.api("/me?fields=first_name,last_name", function(dataAndEvents) {
                            return optgroup = dataAndEvents, $(elem).triggerHandler("login", optgroup), invokeDfd.resolve(optgroup);
                        });
                    }
                };
            }(this), data.config.facebook.login)), invokeDfd.promise);
        },
        /**
         * @return {?}
         */
        logout : function() {
            if (window.FB) {
                return optgroup = null, $(this).triggerHandler("logout", optgroup), FB.logout();
            }
        },
        /**
         * @param {string} eventData
         * @return {?}
         */
        postOnMyWall : function(eventData) {
            return this.login().then(function() {
                return FB.api("/me/feed/", "post", eventData, function() {
                });
            });
        }
    };
    req.facebook = i18n;
}), define("framework/handlebars/module", ["exports", "framework/utils", "framework/translations"], function(opts, dd, a) {
    var app;
    var self;
    self = {};
    /** @type {null} */
    self.config = null;
    app = {
        /**
         * @param {?} opt_attributes
         * @return {?}
         */
        configure : function(opt_attributes) {
            return self.config = opt_attributes;
        },
        /**
         * @return {?}
         */
        init : function() {
            return Handlebars.registerHelper("tamediaIcon", function(dataAndEvents, deepDataAndEvents) {
                return new Handlebars.SafeString('<span class="NnIcon ' + dataAndEvents + 'Icon"></span>');
            }), Handlebars.registerHelper("generatePictureCaption", function(opts, dataAndEvents) {
                var val;
                var p1;
                return val = "", (opts.photographer || opts.provider) && (p1 = function() {
                    switch(opts.annotation_type) {
                        case "picture":
                            return a.translations.translate("Bild");
                        case "video":
                            return a.translations.translate("Video");
                        default:
                            return "";
                    }
                }(), val += " ", opts.annotation_type && (val += p1 + ": "), opts.photographer && (val += opts.photographer), opts.photographer && (opts.provider && (val += "/")), opts.provider && (val += opts.provider)), (opts.title ? "<b>" + opts.title + "</b>" : "") + opts.caption + (val ? '<span class="annotation">' + val + "</span>" : "");
            }), Handlebars.registerHelper("isCategoryLink", function(options) {
                return "category" === this.linked_object_type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isWeatherLink", function(options) {
                return "weather" === this.linked_object_type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isCommunityTypeComment", function(options) {
                return "comment" === this.type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isCommunityTypeFacebook", function(options) {
                return "facebook" === this.type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isCommunityTypeTwitter", function(options) {
                return "twitter" === this.type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("times", function(dataAndEvents, template) {
                var result;
                var match;
                /** @type {string} */
                result = "";
                /** @type {number} */
                match = 0;
                for (;match < dataAndEvents;) {
                    result += template.fn(match);
                    ++match;
                }
                return result;
            }), Handlebars.registerHelper("isCommentingAllowed", function(dataAndEvents, options) {
                return dd.utils.isCommentingAllowed(dataAndEvents.allow_comments_weekdays, dataAndEvents.allow_comments_weekends) ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("unlessMaxDepth", function(options) {
                return this.depth < 3 ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("stripAndTrimHtml", function(n) {
                var requestUrl;
                var expr;
                return null == n && (n = ""), expr = n.replace(/<[^>]+>/g, ""), requestUrl = expr.substr(0, 120), /^\S/.test(expr.substr(120)) && (requestUrl = requestUrl.replace(/\s+\S*$/, "")), requestUrl + "...";
            }), Handlebars.registerHelper("linkTo", function(uri, options) {
                var tagNameArr;
                var name;
                var _ref3;
                var value;
                /** @type {Array} */
                tagNameArr = [];
                _ref3 = options.hash;
                for (name in _ref3) {
                    value = _ref3[name];
                    if (uri.indexOf(name) < 0 && ["href", "data-isLinkTo"].indexOf(name) < 0) {
                        tagNameArr.push(name + '="' + value + '"');
                    } else {
                        uri = uri.replace(new RegExp("%" + name + "%"), value);
                    }
                }
                return history.pushState || (uri = "#" + uri), '<a href="' + uri + '" data-isLinkTo="true" ' + tagNameArr.join(" ") + ">" + options.fn(this) + "</a>";
            }), Handlebars.registerHelper("stripHtml", function(isXML) {
                return dd.utils.stripHtml(isXML);
            }), Handlebars.registerHelper("isSupportedBoxtype", function(options) {
                return["articles", "slideshow", "picture", "video", "youtube", "info", "link", "chartMap", "chart", "livevideo", "picturevoting", "quiz", "iframe", "stock_exchange_chart", "poll"].indexOf(this.boxtype) >= 0 ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("displayMediaType", function(options) {
                return["slideshow", "video"].indexOf(this.mediatype) > -1 ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isRecommenderBox", function(options) {
                return "recommender" === this.boxtype ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isArticlesBox", function(options) {
                return "articles" === this.boxtype && "horizontal-slide" !== this.layout_type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isSlideshowOverviewBox", function(options) {
                return "slideshowoverview" === this.boxtype || "horizontal-slide" === this.layout_type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isMeteonewsBox", function(options) {
                return "meteonews" === this.boxtype ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isMeteonewsBoxLM", function(options) {
                return "meteonewsLM" === this.boxtype ? options.fn(this) : vlaue.inverse(this);
            }), Handlebars.registerHelper("isSlideshowElement", function(options) {
                return "element_slideshow" === this.type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isSlideshowBox", function(options) {
                var elem;
                var ret;
                return "slideshow" === this.boxtype && (null != (null != (elem = this.slideshow) && null != (ret = elem.pictures) ? ret.length : void 0) && this.slideshow.pictures.length > 0) ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isPictureElement", function(options) {
                return "element_picture" === this.type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isPictureBox", function(options) {
                return "picture" === this.boxtype ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isVideoElement", function(options) {
                return "element_video" === this.type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isVideoBox", function(options) {
                return "video" === this.boxtype ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isAudioBox", function(options) {
                return "audio" === this.boxtype ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isYouTubeBox", function(options) {
                return "youtube" === this.boxtype ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isInfoBox", function(options) {
                return "info" === this.boxtype ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isLinkBox", function(options) {
                return "link" === this.boxtype ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isHtmlElement", function(options) {
                return "element_html" === this.type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isChartMap", function(options) {
                return "element_chart_map" === this.type || "element_chart" === this.type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isChartMapBox", function(options) {
                return "chartMap" === this.boxtype ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isChartBox", function(options) {
                return "chart" === this.boxtype ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isStockExchangeChartBox", function(options) {
                return "stock_exchange_chart" === this.boxtype ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isLiveStreamBox", function(options) {
                return "livevideo" === this.boxtype ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isLiveticker", function(options) {
                return this.liveticker_id ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isPictureVotingBox", function(options) {
                return "picturevoting" === this.boxtype ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isQuizBox", function(options) {
                return "quiz" === this.boxtype ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isIframeElement", function(options) {
                return "element_iframe" === this.type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isIframeBox", function(options) {
                return "iframe" === this.boxtype ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isIframeBoxMap", function(options) {
                return "iframe" !== this.boxtype || "chart" !== this.iframe_class_name && "map" !== this.iframe_class_name ? options.inverse(this) : options.fn(this);
            }), Handlebars.registerHelper("isPollElement", function(options) {
                return "element_poll" === this.type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isPollBox", function(options) {
                return "poll" === this.boxtype ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isTagsBox", function(options) {
                return "tags" === this.boxtype ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isBlogsBox", function(options) {
                return "blogs" === this.boxtype ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isNewsletterSubscriptionBox", function(options) {
                return "newsletter" === this.boxtype ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("hasIframeHeight", function(options) {
                return "chart" === this.iframe_class_name || ("fixed_height" === this.iframe_class_name || "map" === this.iframe_class_name) ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isNavigationTypeTitle", function(options) {
                return "title" === this.navigation_type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isNavigationTypeCategory", function(options) {
                return "category" === this.navigation_type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isString", function(err, options) {
                return "string" == typeof err ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isWertend", function(options) {
                if ("undefined" != typeof this && null !== this) {
                    return "analyse" === this.layout_type || "analyse_wide" === this.layout_type ? options.fn(this) : options.inverse(this);
                }
            }), Handlebars.registerHelper("isLeadDecoration", function(options) {
                return "undefined" != typeof this && (null !== this && (null != this.decoration && "lead" === this.decoration.position)) ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isTopDecoration", function(options) {
                return "undefined" != typeof this && (null !== this && (null != this.decoration && "top" === this.decoration.position)) ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isBottomDecoration", function(options) {
                return "undefined" != typeof this && (null !== this && (null != this.decoration && "bottom" === this.decoration.position)) ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("translate", function(x) {
                return a.translations.translate(x);
            }), Handlebars.registerHelper("appifyUrl", function(password, year) {
                return null != password ? (password += (password.indexOf("?") >= 0 ? "&" : "?") + "appId=" + self.config.appId, password + (null != year ? "&" + year : "")) : "";
            }), Handlebars.registerHelper("isPublireportage", function(options) {
                if ("undefined" != typeof this && null !== this) {
                    return "publireportage" === this.layout_type ? options.fn(this) : options.inverse(this);
                }
            }), Handlebars.registerHelper("isExternalArticle", function(options) {
                if ("undefined" != typeof this && null !== this) {
                    return "link" === this.layout_type ? options.fn(this) : options.inverse(this);
                }
            }), Handlebars.registerHelper("isTeaser", function(options) {
                switch(this.layout_type) {
                    case "link_wide":
                        ;
                    case "link_wide_extended":
                        ;
                    case "category":
                        ;
                    case "quote":
                        ;
                    case "html_teaser":
                        return options.inverse(this);
                    default:
                        return options.fn(this);
                }
            }), Handlebars.registerHelper("isTeaserWide", function(options) {
                return "link_wide" === this.layout_type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isTeaserWideExtended", function(options) {
                return "link_wide_extended" === this.layout_type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isTeaserCollection", function(options) {
                return "category" === this.layout_type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isTeaserQuote", function(options) {
                return "quote" === this.layout_type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isTeaserHtml", function(options) {
                return "html_teaser" === this.layout_type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isLayoutTypeCategory", function(options) {
                return "category" === this.layout_type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isLayoutTypeSlideshow", function(options) {
                return "slideshow" === this.layout_type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isLayoutTypeMultimedia", function(options) {
                return "multimedia" === this.layout_type || "slideshow" === this.layout_type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isLayoutTypeListicle", function(options) {
                return "listicle" === this.layout_type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isLayoutTypeBreakingNews", function(options) {
                return "breaking-news" === this.pageElementLayoutType ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isLayoutTypeStoryBundle", function(options) {
                return "storybundle" === this.pageElementLayoutType ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isLayoutTypeCollection", function(options) {
                return "collection" === this.pageElementLayoutType ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("toTwoDecimals", function(a) {
                if (null != a) {
                    return a.toFixed(2);
                }
            }), Handlebars.registerHelper("getPageElementLink", function() {
                switch(this.linked_object_type) {
                    case "category":
                        return "/categories/" + this.linked_object_id;
                    case "weather":
                        return "/weather";
                    default:
                        return "javascript:void(0);";
                }
            }), Handlebars.registerHelper("getStockPerformanceColor", function(fps) {
                return fps > 0 ? "green" : fps < 0 ? "red" : "gray";
            }), Handlebars.registerHelper("join", function(mod, off) {
                return mod.map(function(buf) {
                    return buf[off];
                }).join(", ");
            }), Handlebars.registerHelper("getCustomerShortName", function() {
                return self.config.shortName;
            }), Handlebars.registerHelper("getCustomerDomain", function() {
                return self.config.alternativeName;
            }), Handlebars.registerHelper("isLematin", function(options) {
                return "LM" === self.config.shortName ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isLematinCategorySlider", function(options) {
                return 1 === location.pathname.length && ("LM" === self.config.shortName && ("category" === this.linked_object_type && "publireportage" !== this.layout_type)) ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("getProductWebsite", function() {
                return self.config.productWebsite;
            }), Handlebars.registerHelper("getItunesAppStoreUrl", function() {
                return self.config.itunesAppStoreUrl + "&utm_source=sharingpage&utm_medium=" + self.config.env + "&utm_campaign=standard";
            }), Handlebars.registerHelper("getGooglePlayStoreUrl", function() {
                return self.config.googlePlayStoreUrl + "&utm_source=sharingpage&utm_medium=" + self.config.env + "&utm_campaign=standard";
            }), Handlebars.registerHelper("getFromLocalStorage", function(storageKey) {
                try {
                    return localStorage.getItem(storageKey);
                } catch (b) {
                }
            }), Handlebars.registerHelper("getTime", function() {
                var dt;
                var code;
                return dt = new Date, code = dt.getMinutes(), 1 === code.toString().length && (code = "0" + code), dt.getHours() + ":" + code;
            }), Handlebars.registerHelper("getTimestamp", function() {
                return Math.round((new Date).getTime() / 1E3);
            }), Handlebars.registerHelper("isInternalUrl", function(options) {
                return "internal_url" === this.navigation_type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isWeatherPath", function(options) {
                return "weather" === this.path ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isFrontPath", function(options) {
                return "" === this.path ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("formatMeteonewsDay", function(year) {
                var scaled;
                return scaled = ["Sa", "So", "Mo", "Di", "Mi", "Do", "Fr"], a.translations.translate(scaled[(new Date(year)).getDay()]);
            }), Handlebars.registerHelper("formatDate", function(date) {
                return dd.utils.date.format(date);
            }), Handlebars.registerHelper("formatDateShort", function(timestamp) {
                return dd.utils.date.formatShort(timestamp);
            }), Handlebars.registerHelper("formatTime", function(ts) {
                return dd.utils.date.formatTime(ts);
            }), Handlebars.registerHelper("isPaywallEnabled", function(options) {
                return this.site.paywall_status === self.config.paywall.status.enabled && self.config.paywall.enabled ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isDch", function(options) {
                return dd.utils.isDch() ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isDebugMode", function(options) {
                return self.config.isDebugMode ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("unlessReleasedAndHasNoChildren", function(options) {
                return("function" == typeof this ? this("undefined" != typeof released && (null !== released && (this.released === false && 0 === this.children.length))) : void 0) ? options.inverse(this) : options.fn(this);
            }), Handlebars.registerHelper("calculatePercent", function(a, b) {
                var change;
                return change = a / b * 10, Math.round(100 * change) / 10;
            }), Handlebars.registerHelper("isSVGSupported", function(options) {
                return document.createElement("svg").getAttributeNS ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isFirst", function(dataAndEvents, options) {
                return 0 === dataAndEvents ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isEmptyArticle", function(options) {
                return 0 !== this.timestamp_updated_at || null !== this.title ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("getArticlesCount", function() {
                return this.articles.filter(function(dataAndEvents) {
                    return "article" === dataAndEvents.layout_type;
                }).length;
            }), Handlebars.registerHelper("getChannel", function() {
                return null != this.video.channel ? this.video.channel.toLowerCase() : "mobile";
            }), Handlebars.registerHelper("isFooter", function(options) {
                return "footer" === this.type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isDropdownMenu", function(options) {
                return "Mehr" === this.name ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("limit", function(a, attributes) {
                if (null != a) {
                    return a.slice(0, attributes);
                }
            }), Handlebars.registerHelper("getMediaIcon", function() {
                return "picture" === this.mediatype || "iframe" === this.mediatype ? "arrowRight" : "zattoo" === this.mediatype ? "video" : this.mediatype;
            }), Handlebars.registerHelper("getFirstListicleTitle", function(dataAndEvents) {
                var item;
                var i;
                var ln;
                var configList;
                var cell;
                if (null != this.inline_elements && this.inline_elements.length > 0) {
                    configList = this.inline_elements;
                    /** @type {Array} */
                    cell = [];
                    /** @type {number} */
                    i = 0;
                    ln = configList.length;
                    for (;i < ln;i++) {
                        item = configList[i];
                        if ("element" === item.boxtype && "element_listicle" === item.element.type) {
                            cell.push(item.element.title);
                        } else {
                            cell.push(void 0);
                        }
                    }
                    return cell;
                }
            }), Handlebars.registerHelper("isShareElement", function(options) {
                return "element_share" === this.type ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isNavigationActive", function(options) {
                return 0 !== this.navigation_visibility ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("isNavigationExpanded", function(options) {
                return 2 === this.navigation_visibility ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("showCardCount", function(dataAndEvents, assertions) {
                return++dataAndEvents + "/" + assertions.length;
            }), Handlebars.registerHelper("isIndex", function(dataAndEvents, deepDataAndEvents, options) {
                return dataAndEvents + 1 === deepDataAndEvents ? options.fn(this) : options.inverse(this);
            }), Handlebars.registerHelper("hasPremiumDecoration", function(options) {
                var pdataOld;
                var events;
                if ("LM" !== self.config.shortName && "BaZ" !== self.config.shortName) {
                    return "undefined" != typeof this && (null !== this && "premium" === (null != (pdataOld = this.external_services) && null != (events = pdataOld.paywall) ? events.doc_type : void 0)) ? options.fn(this) : options.inverse(this);
                }
            }), Handlebars.registerPartial("loader", function(optgroup) {
                return require("framework/loader/loader").default(optgroup);
            }), Handlebars.registerPartial("dialog", function(optgroup) {
                return require("framework/dialog/templates/dialog").default(optgroup);
            }), Handlebars.registerPartial("fullscreenLoader", function(optgroup) {
                return require("framework/loader/fullscreenLoader").default(optgroup);
            }), Handlebars.registerPartial("cards", function(optgroup) {
                return require("framework/listicles/templates/cards").default(optgroup);
            }), Handlebars.registerPartial("element", function(optgroup) {
                return require("framework/listicles/templates/element").default(optgroup);
            }), Handlebars.registerPartial("navigation", function(optgroup) {
                return require("framework/listicles/templates/navigation").default(optgroup);
            });
        }
    };
    opts.handlebars = app;
}), define("framework/jquery", ["framework/utils", "framework/browser"], function(gma, b) {
    var callback;
    /**
     * @param {string} k
     * @param {string} b
     * @param {string} lower
     * @param {?} v
     * @param {?} easing
     * @param {Function} yes
     * @return {?}
     */
    $.fn.NnTransit = function(k, b, lower, v, easing, yes) {
        var optgroup;
        return optgroup = [], this.each(function() {
            return optgroup.push(new RSVP.Promise(function(ele) {
                return function(jQuery, dataAndEvents) {
                    var e;
                    return e = $(ele), e.css(k, b), function(el) {
                        return setTimeout(function() {
                            var eventName;
                            return eventName = "transitionend", b.browser.isWebKit() && (eventName = "webkitTransitionEnd"), el.css("transition", k + " " + v + " " + easing), el.css("transition"), el.one(eventName, function(types) {
                                return yes && yes(), el.css("transition", ""), jQuery(types.delegateTarget);
                            }).css(k, lower);
                        }, 0);
                    }(e);
                };
            }(this)));
        }), RSVP.all(optgroup);
    };
    /**
     * @return {?}
     */
    $.fn.NnFadeIn = function() {
        return this.css("visibility", "visible").NnTransit("opacity", 0, 1, "0.1s", "ease-in-out");
    };
    /**
     * @return {?}
     */
    $.fn.NnFadeOut = function() {
        return this.NnTransit("opacity", 1, 0, "0.1s", "ease-in-out").then(function(parent) {
            return function() {
                return parent.css("visibility", "hidden");
            };
        }(this));
    };
    /**
     * @return {?}
     */
    $.fn.closestScrollable = function() {
        var element;
        var buffer;
        var _i;
        var _len;
        /** @type {Array} */
        buffer = [];
        /** @type {number} */
        _i = 0;
        _len = this.length;
        for (;_i < _len;_i++) {
            if (element = this[_i], $(element).is(":scrollable")) {
                buffer.push(element);
            } else {
                for (;element = element.parentNode;) {
                    if ($(element).is(":scrollable")) {
                        buffer.push(element);
                        break;
                    }
                }
            }
        }
        return $(buffer);
    };
    /**
     * @param {string} name
     * @return {?}
     */
    $.fn.applyTargetToLinks = function(name) {
        return this.find("a").attr("target", name), this;
    };
    /**
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    $.fn.isInViewport = function(dataAndEvents) {
        var paddingBox;
        if (null == dataAndEvents && (dataAndEvents = false), 0 === this.length) {
            return false;
        }
        if (1 === this.length) {
            return paddingBox = this[0].getBoundingClientRect(), dataAndEvents ? paddingBox.top >= 0 && (paddingBox.left >= 0 && (paddingBox.bottom <= $(window).height() && paddingBox.right <= $(window).width())) : paddingBox.bottom >= 0 && (paddingBox.right >= 0 && (paddingBox.top <= $(window).height() && paddingBox.left <= $(window).width()));
        }
        throw "Cannot use 'isInViewport' for collections";
    };
    /**
     * @return {?}
     */
    $.fn.padding = function() {
        var style;
        if (1 === this.length) {
            return style = window.getComputedStyle(this[0]), {
                top : parseFloat(style.paddingTop),
                right : parseFloat(style.paddingRight),
                bottom : parseFloat(style.paddingBottom),
                left : parseFloat(style.paddingLeft)
            };
        }
        throw "Cannot get paddings over collections";
    };
    /**
     * @return {?}
     */
    $.fn.margin = function() {
        var computedStyle;
        if (1 === this.length) {
            return computedStyle = window.getComputedStyle(this[0]), {
                top : parseFloat(computedStyle.marginTop),
                bottom : parseFloat(computedStyle.marginBottom)
            };
        }
        throw "Selector cannot get margins over collections";
    };
    /**
     * @return {?}
     */
    $.fn.validate = function() {
        var input;
        var x;
        var loading;
        var isLengthProperty;
        var value;
        var excludes;
        return excludes = function() {
            var _i;
            var _len;
            var xs;
            var bucket;
            xs = this.find("input, textarea");
            /** @type {Array} */
            bucket = [];
            /** @type {number} */
            _i = 0;
            _len = xs.length;
            for (;_i < _len;_i++) {
                x = xs[_i];
                input = $(x);
                input.removeClass("invalid");
                value = function() {
                    switch(input.attr("data-validation")) {
                        case "nodigits":
                            return/^[A-Za-z\u00C0-\u00FF\/. -]+$/.test(input.val());
                        case "digits":
                            return/^[0-9]+$/.test(input.val());
                        case "email":
                            return/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(input.val());
                        case "on":
                            return input[0].checked === true;
                        case "maxLength":
                            return input.val().length <= input.attr("data-maxlength") && "" !== input.val();
                        default:
                            return "" !== input.val();
                    }
                }();
                isLengthProperty = input.attr("name");
                loading = this.find("[data-label='" + isLengthProperty + "']");
                if (value) {
                    loading.hide();
                } else {
                    loading.show();
                }
                bucket.push(value);
            }
            return bucket;
        }.call(this), excludes.indexOf(false) === -1;
    };
    /**
     * @param {EventTarget} i
     * @return {?}
     */
    $.fn.simulateDragDrop = function(i) {
        return this.each(function() {
            return new $.simulateDragDrop(this, i);
        });
    };
    /**
     * @param {Event} el
     * @param {Object} options
     * @return {?}
     */
    $.simulateDragDrop = function(el, options) {
        return this.options = options, this.simulateEvent(el, options);
    };
    $.extend($.simulateDragDrop.prototype, {
        /**
         * @param {Event} el
         * @param {Object} options
         * @return {?}
         */
        simulateEvent : function(el, options) {
            var event;
            var evt;
            var e;
            var type;
            return type = "dragstart", e = this.createEvent(type), this.dispatchEvent(el, type, e), type = "drop", evt = this.createEvent(type, {}), evt.dataTransfer = e.dataTransfer, this.dispatchEvent($(options.dropTarget)[0], type, evt), type = "dragend", event = this.createEvent(type, {}), event.dataTransfer = e.dataTransfer, this.dispatchEvent(el, type, event);
        },
        /**
         * @param {string} type
         * @return {?}
         */
        createEvent : function(type) {
            var event;
            return event = document.createEvent("CustomEvent"), event.initCustomEvent(type, true, true, null), event.dataTransfer = {
                data : {},
                /**
                 * @param {string} name
                 * @param {Object} value
                 * @return {?}
                 */
                setData : function(name, value) {
                    return this.data[name] = value;
                },
                /**
                 * @param {string} name
                 * @return {?}
                 */
                getData : function(name) {
                    return this.data[name];
                }
            }, event;
        },
        /**
         * @param {Object} el
         * @param {string} type
         * @param {string} event
         * @return {?}
         */
        dispatchEvent : function(el, type, event) {
            return el.dispatchEvent ? el.dispatchEvent(event) : el.fireEvent ? el.fireEvent("on" + type, event) : void 0;
        }
    });
    $.ajaxSettings = {
        timeout : null,
        contentType : null
    };
    /**
     * @param {?} options
     * @return {?}
     */
    $.ajaxSetup = function(options) {
        return $.extend($.ajaxSettings, options);
    };
    /**
     * @param {string} context
     * @param {Object} s
     * @param {string} err
     * @param {string} value
     * @param {?} done
     * @return {?}
     */
    callback = function(context, s, err, value, done) {
        if (null != s.error && s.error.call(this), done(err), s.global) {
            return $(document).trigger("ajaxError", [{}, {
                statusText : value,
                url : s.url,
                type : s.type,
                timeout : context.timeout
            }]);
        }
    };
    /**
     * @param {?} opt_attributes
     * @param {Object} options
     * @return {?}
     */
    $.ajax = function(opt_attributes, options) {
        var value;
        var attrs;
        var rurl;
        return 1 === arguments.length && "object" == typeof opt_attributes ? (options = opt_attributes, options = $.extend({}, $.ajaxSettings, options)) : (options = $.extend({}, $.ajaxSettings, options), options.url = opt_attributes), null == options.type && (options.type = "GET"), null == options.global && (options.global = true), null == options.data && (options.data = ""), null == options.contentType && (options.contentType = "application/x-www-form-urlencoded; charset=UTF-8"), rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
            attrs = rurl.exec(window.location.href) || [], value = rurl.exec(options.url.toLowerCase()) || [], options.crossDomain = value.length > 0 && (attrs && (attrs[1] !== value[1] || (attrs[2] !== value[2] || (attrs[3] || ("http:" === attrs[1] ? "80" : "443")) !== (value[3] || ("http:" === value[1] ? "80" : "443"))))), options.cache === false && (options.url = gma.utils.addRnd(options.url)), new RSVP.Promise(function(cb, $rootElement) {
            var json;
            var request;
            var xhr;
            return "json" === options.dataType && options.url.indexOf("callback=?") > -1 ? (json = options.url.replace("callback=?", "callback=jsonpCallback"), window.jsonpCallback = function(er) {
                return null != options.success && options.success.call(this, er), cb(er);
            }, $.loadExternalScript(json).then(function() {
                return delete window.jsonpCallback;
            })) : options.crossDomain && (!b.browser.supportsCors() && (window.XDomainRequest && "GET" === options.type)) ? (request = new XDomainRequest, null != options.timeout && (request.timeout = options.timeout), request.open(options.type, options.url), request.onprogress = function() {
            }, request.onload = function() {
                var er;
                var attributes;
                if (!("json" === options.dataType || "text" !== options.dataType && /\/json/i.test(request.contentType))) {
                    throw "$.ajax: XDomainRequest only supports json requests until now";
                }
                if (request.responseText) {
                    try {
                        /** @type {*} */
                        er = JSON.parse(request.responseText);
                        if (null != options.success) {
                            options.success.call(this, er);
                        }
                        cb(er);
                    } catch (name) {
                        attributes = name;
                        callback(request, options, $.extend(attributes, {
                            message : "$.ajax() " + options.type + ": Error parsing: " + options.url
                        }), "parsererror", $rootElement);
                    }
                } else {
                    if (null != options.success) {
                        options.success.call(this, "");
                    }
                    cb("");
                }
                if (null != options.complete) {
                    return options.complete.call(this);
                }
            }, request.onerror = function() {
                return callback(request, options, "$.ajax() " + options.type + ": Unknown error on: " + options.url + "\n " + request.responseText, "Error in XDomainRequest", $rootElement);
            }, request.ontimeout = function() {
                return callback(request, options, "$.ajax() " + options.type + ": " + options.url, "timeout", $rootElement);
            }, null != options.beforeSend && options.beforeSend(request), request.send("")) : (xhr = new XMLHttpRequest, xhr.open(options.type, options.url, true), options.withCredentials && (xhr.withCredentials = true), null != options.timeout && (xhr.timeout = options.timeout), xhr.onreadystatechange = function() {
                var er;
                var attributes;
                var udataCur;
                if (4 === xhr.readyState) {
                    if (200 === xhr.status) {
                        if (xhr.responseText) {
                            try {
                                /** @type {*} */
                                er = JSON.parse(xhr.responseText);
                                if (null != options.success) {
                                    options.success.call(this, er);
                                }
                                cb(er);
                            } catch (name) {
                                attributes = name;
                                callback(xhr, options, $.extend(attributes, {
                                    message : "$.ajax() " + options.type + ": Error parsing: " + options.url
                                }), "parsererror", $rootElement);
                            }
                        } else {
                            if (null != options.success) {
                                options.success.call(this, "");
                            }
                            cb("");
                        }
                    } else {
                        udataCur = 0 === xhr.status ? "Unknown error (might be CORS or a timeout)" : xhr.statusText;
                        callback(xhr, options, "$.ajax() " + options.type + ": Status " + xhr.status + ' "' + udataCur + '" on: ' + options.url, udataCur, $rootElement);
                    }
                    if (null != options.complete) {
                        return options.complete.call(this);
                    }
                }
            }, xhr.setRequestHeader("Content-Type", options.contentType), xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest"), null != options.beforeSend && options.beforeSend(xhr), xhr.send(options.data));
        });
    };
    /**
     * @param {string} elem
     * @return {?}
     */
    $.get = function(elem) {
        return $.ajax(elem);
    };
    /**
     * @param {string} url
     * @param {Object} optgroup
     * @param {Object} success
     * @return {?}
     */
    $.getJSON = function(url, optgroup, success) {
        return $.isFunction(optgroup) && (success = optgroup, optgroup = void 0), $.ajax({
            dataType : "json",
            url : url,
            data : optgroup,
            success : success
        });
    };
    /**
     * @param {?} attributes
     * @param {Object} msg
     * @return {?}
     */
    $.post = function(attributes, msg) {
        return $.ajax(attributes, {
            type : "POST",
            data : msg
        });
    };
    /**
     * @param {string} path
     * @return {?}
     */
    $.loadExternalScript = function(path) {
        return new RSVP.Promise(function(done, $sanitize) {
            var insertAt;
            var script;
            return script = document.createElement("script"), script.type = "text/javascript", script.async = true, script.src = path, "object" == typeof document.attachEvent ? script.onreadystatechange = function() {
                if ("loaded" === script.readyState || "complete" === script.readyState) {
                    return done();
                }
            } : ($(script).on("load", function() {
                return done();
            }), $(script).on("error", function(attributes) {
                return $sanitize($.extend(attributes, {
                    message : "$.loadExternalScript(): Cannot load " + path
                }));
            })), insertAt = document.getElementsByTagName("script")[0], insertAt.parentNode.insertBefore(script, insertAt);
        });
    };
    $.event.special.contentResize = {
        /**
         * @param {?} opt_attributes
         * @param {?} namespaces
         * @return {?}
         */
        setup : function(opt_attributes, namespaces) {
            if ("IFRAME" !== this.nodeName.toUpperCase()) {
                throw "$.event.special.contentResize: This event works with iframes only, and they must have a src specified!";
            }
            return this.__contentResizeId = Math.random().toString().split(".").pop(), $(window).on("message." + this.__contentResizeId, function($image, event) {
                if (this.contentWindow === event.originalEvent.source) {
                    return!$image.attr("src") || ($image.attr("src").search(/^[a-z]+:\/\//g) < 0 || event.originalEvent.origin === $image.attr("src").match(/[a-z]+:\/\/[^\/]+/g)[0]) ? $image.trigger("contentResize", [event.originalEvent.data.width, event.originalEvent.data.height, $image.width(), $image.height()]) : void 0;
                }
            }.bind(this, $(this)));
        },
        /**
         * @param {?} namespaces
         * @return {?}
         */
        teardown : function(namespaces) {
            return $(window).off("message." + this.__contentResizeId);
        }
    };
    (function(jQuery) {
        var attributes;
        var regexInfinity;
        var regexHex;
        return attributes = ["", "-x", "-y"], regexInfinity = /^(?:auto|scroll)$/i, regexHex = /^(?:auto|scroll|visible)$/i, jQuery.expr[":"].scrollable = function(a) {
            var link;
            var thisp;
            return thisp = false, link = jQuery(a), jQuery.each(attributes, function(dataAndEvents, type) {
                return!(thisp = thisp || (regexInfinity.test(link.css("overflow" + type)) || jQuery.nodeName(a, "body") && regexHex.test(link.css("overflow" + type))));
            }), thisp;
        };
    })($);
}), define("framework/listicles/listicle", ["exports", "framework/jquery", "framework/config", "framework/store", "framework/browser", "framework/handlebars/module", "framework/poll/module", "framework/slideshow/slideshow", "framework/facebook"], function(self, dataAndEvents, deepDataAndEvents, amplify, b, $window, Client, ICAL, $scope) {
    var attributes;
    var openDialog;
    var initialize;
    var callback;
    var resize;
    var fn;
    var load;
    var init;
    var render;
    var createStage;
    var fail;
    var remove;
    var done;
    var show;
    /**
     * @param {string} d
     * @return {?}
     */
    done = function(d) {
        if ("undefined" != typeof twttr && (null !== twttr && twttr.widgets.load(d)), "undefined" != typeof instgrm && null !== instgrm) {
            return instgrm.Embeds.process();
        }
    };
    /**
     * @param {?} positionError
     * @param {Element} expected
     * @return {?}
     */
    fail = function(positionError, expected) {
        return(new ICAL.Slideshow(expected, positionError.pictures, {
            fullyResponsive : true
        })).show();
    };
    /**
     * @param {Object} options
     * @return {?}
     */
    createStage = function(options) {
        return Client.poll.init({
            payload : options
        }, options.wrapped_id);
    };
    /**
     * @param {Object} options
     * @param {?} v
     * @return {?}
     */
    render = function(options, v) {
        return resize(options.height, $(v).data("height", options.height));
    };
    /**
     * @param {Object} arr
     * @param {Element} name
     * @param {number} keepData
     * @return {?}
     */
    remove = function(arr, name, keepData) {
        var rule;
        var tag;
        var num;
        var data;
        var item;
        var front;
        return rule = arr.find(".card:eq(" + keepData + ")"), tag = keepData + 1, num = arr.find(".card").length, front = location.href.split("#")[0], item = name.title + " (" + tag + "/" + num + ") " + front + "#card" + tag, data = encodeURIComponent(item), rule.find(".share ul li a").on("click", function() {
            switch($(this).attr("name")) {
                case "facebook":
                    return $scope.facebook.init().then(function() {
                        return FB.ui({
                            method : "feed",
                            name : name.title,
                            link : front + "#card" + tag,
                            description : item
                        });
                    });
                case "whatsapp":
                    return $(this).attr("href", "whatsapp://send?text=" + data);
                case "email":
                    return $(this).attr("href", "mailto:?subject=" + name.title + "&body=" + data);
                case "twitter":
                    return $(this).attr("href", "https://twitter.com/intent/tweet?text=" + data);
            }
        });
    };
    /**
     * @param {?} label
     * @return {?}
     */
    callback = function(label) {
        var elem;
        return elem = $(label), $.nodeName(elem[0], "body") ? $(document) : elem;
    };
    /**
     * @param {string} name
     * @param {Object} element
     * @param {string} config
     * @return {?}
     */
    initialize = function(name, element, config) {
        var d;
        var $this;
        var body;
        var parent;
        var m;
        var el;
        if (0 !== name.navigation_visibility) {
            switch(el = (body = element.closestScrollable())[0], parent = (d = element.find(".card:first"))[0], m = element[0], ($.nodeName(el, "body") ? body : body.parent()).append($this = $("<div id='NnListicleFloatingNav' class='" + config.floatingNavStyle + "'></div>").append(element.find("nav").clone(true).removeClass("expanded"))), config.floatingNavStyle) {
                case attributes.FLOATING_NAV_STYLE_TOP:
                    $this.find("nav").css({
                        width : element.find("nav").outerWidth() + "px"
                    });
            }
            return callback(el).on("scroll", function() {
                var elemLeft;
                var header;
                var elemRight;
                var k;
                var base;
                var klass;
                if (base = el.getBoundingClientRect().top + $.css(el, "borderTopWidth", true), elemLeft = parent.getBoundingClientRect().top - base - $.css(parent, "marginTop", true) - $(document).scrollTop(), k = m.getBoundingClientRect().top - base - $.css(m, "marginTop", true) - $(document).scrollTop(), elemRight = function() {
                        switch(config.floatingNavStyle) {
                            case attributes.FLOATING_NAV_STYLE_TOP:
                                return k + element.outerHeight(true) - element.find("nav").outerHeight(true);
                            case attributes.FLOATING_NAV_STYLE_TINY:
                                return k + element.outerHeight(true);
                        }
                    }(), klass = "visible", header = "invisible", config.hasAnimations && (klass += "Animated", header += "Animated"), elemLeft <= 1 && elemRight >= -1) {
                    if (!$this.hasClass(klass)) {
                        return $this.addClass(klass).removeClass(header);
                    }
                } else {
                    if ($this.hasClass(klass)) {
                        return $this.removeClass(klass).addClass(header);
                    }
                }
            }), $this;
        }
    };
    /**
     * @param {Object} $li
     * @param {Object} checkElement
     * @param {string} callback
     * @return {?}
     */
    openDialog = function($li, checkElement, callback) {
        return $li.find(">div").on("click", function() {
            return $(this).parent().toggleClass("expanded");
        }), $li.find(">ul li").on("click", function() {
            switch($li = $(this).parents("nav:first"), $li.removeClass("expanded"), callback.floatingNavStyle) {
                case attributes.FLOATING_NAV_STYLE_TOP:
                    return $("#NnListicleFloatingNav").addClass("visibleAnimated").removeClass("invisibleAnimated"), show(checkElement.closestScrollable(), checkElement.find(".card:eq(" + $(this).index() + ")"), $li.outerHeight(), callback);
                case attributes.FLOATING_NAV_STYLE_TINY:
                    return show(checkElement.closestScrollable(), checkElement.find(".card:eq(" + $(this).index() + ")"), void 0, callback);
            }
        });
    };
    /**
     * @param {HTMLElement} elements
     * @param {Array} path
     * @param {number} i
     * @param {string} success
     * @return {?}
     */
    show = function(elements, path, i, success) {
        var optgroup;
        var y;
        var element;
        var base;
        var parent;
        var panelId;
        return null == i && (i = 0), element = elements[0], parent = path[0], base = element.getBoundingClientRect().top + $.css(element, "borderTopWidth", true), y = parent.getBoundingClientRect().top - base - $.css(parent, "marginTop", true) - $(document).scrollTop(), optgroup = y + callback(element).scrollTop() - i, panelId = y * -1 + i, b.browser.getTransitionEventName() && (null != success ? success.hasAnimations : void 0) ? elements.find(">*:not(#NnListicleFloatingNav)").css({
            transition : "transform 1s",
            transform : "translateY(" + panelId + "px)",
            "-webkit-transition" : "-webkit-transform 1s",
            "-webkit-transform" : "translateY(" + panelId + "px)"
        }).parent().one(b.browser.getTransitionEventName(), function(dataAndEvents) {
            return $(this).find(">*:not(#NnListicleFloatingNav)").css({
                transition : "",
                transform : "",
                "-webkit-transition" : "",
                "-webkit-transform" : ""
            }), callback(this).scrollTop(optgroup), setTimeout(function() {
                return callback(this).scrollTop(optgroup + 1);
            }, 0);
        }) : (callback(element).scrollTop(optgroup), setTimeout(function() {
            return callback(element).scrollTop(optgroup + 1);
        }, 0));
    };
    /**
     * @param {Object} self
     * @return {?}
     */
    load = function(self) {
        return new RSVP.Promise(function(next, $sanitize) {
            var tmp;
            switch(self.nodeName.toUpperCase()) {
                case "IFRAME":
                    return tmp = false, $(self).on("load", function() {
                        return tmp = true, next();
                    }), setTimeout(function() {
                        if (!tmp) {
                            return $sanitize();
                        }
                    }, 5E3);
                case "IMG":
                    return self.complete ? next() : $(self).on("load", function() {
                        return next();
                    }).on("error", function() {
                        return $sanitize();
                    });
            }
        });
    };
    /**
     * @param {number} event
     * @param {Object} e
     * @return {?}
     */
    resize = function(event, e) {
        return 0 === event ? e.on("contentResize", function(deepDataAndEvents, ignoreMethodDoesntExist, optgroup, textAlt, dataAndEvents) {
            if (optgroup !== dataAndEvents) {
                return $(this).height(optgroup);
            }
        }) : e.outerHeight(e.outerWidth() * event / 612);
    };
    /**
     * @param {string} arg
     * @return {?}
     */
    fn = function(arg) {
        return new RSVP.Promise(function(dataAndEvents) {
            return function(done) {
                return amplify.store.materialize({
                    rootKey : "listicle",
                    key : "element",
                    id : arg,
                    /**
                     * @param {string} event
                     * @return {?}
                     */
                    callback : function(event) {
                        return done(event);
                    }
                });
            };
        }(this));
    };
    /**
     * @param {Object} element
     * @param {string} proxy
     * @param {string} optgroup
     * @return {?}
     */
    init = function(element, proxy, optgroup) {
        var node;
        var key;
        var operation;
        var expected;
        var index;
        var _i;
        var _j;
        var _len;
        var _len1;
        var scripts;
        var _ref1;
        if (optgroup) {
            element.find(".NnListicle").prepend(require("framework/listicles/templates/cards").default(optgroup)).prepend(require("framework/listicles/templates/navigation").default(optgroup)).find(".loader").remove();
            done(element[0]);
            scripts = optgroup.elements;
            /** @type {number} */
            key = _i = 0;
            _len = scripts.length;
            for (;_i < _len;key = ++_i) {
                node = scripts[key];
                if (proxy.hasSocialMedia) {
                    remove(element, optgroup, key);
                } else {
                    $(".share").hide();
                }
                _ref1 = node.elements;
                /** @type {number} */
                index = _j = 0;
                _len1 = _ref1.length;
                for (;_j < _len1;index = ++_j) {
                    switch(operation = _ref1[index], operation.type) {
                        case "element_slideshow":
                            if (!proxy.renderElement(operation, expected = element.find(".slideshowContainer[data-id='" + operation.id + "']")[0])) {
                                fail(operation, expected);
                            }
                            break;
                        case "element_poll":
                            if (!proxy.renderElement(operation, element.find("div[data-pollId='" + operation.id + "']")[0])) {
                                createStage(operation);
                            }
                            break;
                        case "element_iframe":
                            if (!proxy.renderElement(operation, expected = element.find(".card:eq(" + key + ") .elements > .element:eq(" + index + ") iframe")[0])) {
                                render(operation, expected);
                            }
                            ;
                    }
                }
            }
            return openDialog(element.find("nav"), element, proxy), proxy.useFloatingNav && initialize(optgroup, element, proxy), RSVP.allSettled(element.find(".elements img, .elements iframe").map(function() {
                return load(this);
            }).toArray()).then(function(dataAndEvents) {
                return function() {
                    return location.hash && show(element.closestScrollable(), element.find(".card:eq(" + (location.hash.substr(5) - 1) + ")")), $(window).on("resize", function() {
                        return element.find(".element_iframe > iframe").each(function() {
                            return resize($(this).data("height"), $(this));
                        });
                    });
                };
            }(this));
        }
        return element.html(require("framework/listicles/templates/listicle").default());
    };
    attributes = function() {
        /**
         * @param {Object} options
         * @param {(Object|string)} ast
         * @return {undefined}
         */
        function run(options, ast) {
            this._initialize();
            this._setup(options, ast);
            init(this._$container, this._config);
            fn(this._config.id).then(function(self) {
                return function(notCreate) {
                    return init(self._$container, self._config, notCreate);
                };
            }(this));
        }
        return run.prototype._initialize = function() {
            return this._config = null, this._$container = null;
        }, run.prototype._setup = function(extended, c) {
            var config;
            var startData;
            var hasAnimations;
            var useFloatingNav;
            var plot;
            var header;
            return this._config = c, null == (config = this._config).apiUrl && (config.apiUrl = ""), null == (startData = this._config).hasSocialMedia && (startData.hasSocialMedia = true), null == (hasAnimations = this._config).hasAnimations && (hasAnimations.hasAnimations = true), null == (useFloatingNav = this._config).useFloatingNav && (useFloatingNav.useFloatingNav = true), null == (plot = this._config).floatingNavStyle && (plot.floatingNavStyle = run.FLOATING_NAV_STYLE_TOP), null == (header = this._config).renderElement &&
            (header.renderElement = function() {
            }), this._$container = $(extended), $window.handlebars.init(), Client.poll.configure(this._config.apiUrl);
        }, run;
    }();
    $.extend(attributes, {
        FLOATING_NAV_STYLE_TOP : "top",
        FLOATING_NAV_STYLE_TINY : "tiny"
    });
    self.Listicle = attributes;
    /** @type {function (number, Object): ?} */
    self.handleIframeResize = resize;
}), define("framework/listicles/templates/cards", ["exports"], function(obj) {
    obj.default = Handlebars.compile('{{#each elements}}\n    <div class="card {{layout_type}}">\n        <span>{{showCardCount @index ../elements}}</span>\n        <h3>{{title}}</h3>\n        <div class="elements">\n            {{#each elements}}\n                <div class="element {{type}} {{#isPollElement}}NnPollBox{{/isPollElement}}">\n                    {{> element}}\n                </div>\n            {{/each}}\n        </div>\n        <div class="share">\n            <ul>\n                <li><a href="javascript:void(0);" name="whatsapp" class="NnIcon whatsappIcon"></a></li>\n                <li><a href="javascript:void(0);" name="facebook" class="NnIcon facebookIcon"></a></li>\n                <li><a href="javascript:void(0);" name="email" class="NnIcon emailIcon"></a></li>\n                <li><a href="javascript:void(0);" name="twitter" class="NnIcon twitterIcon"></a></li>\n            </ul>\n            <div class="clear"></div>\n        </div>\n    </div>\n{{/each}}');
}), define("framework/listicles/templates/element", ["exports"], function(obj) {
    obj.default = Handlebars.compile('{{#isHtmlElement}}\n    {{{value}}}\n{{/isHtmlElement}}\n\n{{#isPictureElement}}\n    <img src="{{url}}"/>\n    <span>Quelle: {{source}}</span>\n{{/isPictureElement}}\n\n{{#isIframeElement}}\n    <iframe src="{{src}}" scrolling="no"></iframe>\n{{/isIframeElement}}\n\n{{#isSlideshowElement}}\n    <div class="slideshowContainer" data-id="{{id}}"></div>\n{{/isSlideshowElement}}\n\n{{#isPollElement}}\n    <div data-pollId="{{wrapped_id}}">\n        {{!-- will be dynamically added in the article --}}\n    </div>\n{{/isPollElement}}');
}), define("framework/listicles/templates/listicle", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<div class="NnListicle">\n    {{> loader visible="true"}}\n</div>');
}), define("framework/listicles/templates/navigation", ["exports"], function(obj) {
    obj.default = Handlebars.compile('{{#isNavigationActive}}\n    {{#isNavigationExpanded}}<nav class="expanded">{{else}}<nav>{{/isNavigationExpanded}}\n        <div>\n        <span class="NnIcon listIcon"></span>\n        <h3>{{title}}</h3>\n        </div>\n        <ul>\n            {{#each elements}}\n                <li><a href="javascript:void(0);">{{title}}</a></li>\n            {{/each}}\n        </ul>\n    </nav>\n{{/isNavigationActive}}');
}), define("framework/liveticker/liveticker", ["exports", "framework/translations"], function(eventHandle, self) {
    var elem;
    elem = function() {
        /**
         * @param {Object} options
         * @param {(Object|string)} position
         * @return {undefined}
         */
        function Animation(options, position) {
            this._initialize();
            this._setup(options, position);
            this._fetchWholeFeed(function(dataAndEvents) {
                return function() {
                    return dataAndEvents._fetchMessageUpdates(function() {
                        return dataAndEvents._listenForMessageUpdates();
                    });
                };
            }(this));
        }
        return Animation.prototype.isLimitReached = function() {
            if (this._reactComponent) {
                return this._reactComponent.isLimitReached();
            }
        }, Animation.prototype.increaseLimit = function() {
            return this._reactComponent.increaseLimit();
        }, Animation.prototype.destroy = function() {
            return this._teardown();
        }, Animation.prototype.isLoading = function() {
            return this._reactComponent.state.isLoading;
        }, Animation.prototype.pause = function() {
            return this._isPaused = true;
        }, Animation.prototype.resume = function() {
            return this._isPaused = false, this._listenForMessageUpdates();
        }, Animation.prototype._initialize = function() {
            return this._el = null, this._$el = null, clearTimeout(this._fetchMessageUpdatesTimeout), clearTimeout(this._listenForMessageUpdatesTimeout), clearTimeout(this._fetchWholeFeedTimeout), this._config = null, this._refetchIntervalInMs = null, this._fetchMessageUpdatesTimeout = null, this._listenForMessageUpdatesTimeout = null, this._fetchWholeFeedTimeout = null, this._lastRequestedAt = null, this._isFetchingWholeFeed = false, this._isFetchingMessageUpdates = false, this._isPaused = false, this._reactComponent =
                null;
        }, Animation.prototype._setup = function(extended, c) {
            var afterFetchMessageUpdates;
            var renderInlineElement;
            var limitIncreaseValue;
            var config;
            var startData;
            var iconClassRedCard;
            var iconClassYellowRedCard;
            var iconClassGoal;
            var iconClassStart;
            var iconClassEnd;
            var iconClassHockeyEnd;
            var iconClassHockeyGoal;
            var beforeDestroyInlineElement;
            var iconClassHockeyThirdEnd;
            var iconClassMatchpoint;
            var iconClassSetpoint;
            var iconClassBreakpoint;
            var iconClassSubstitution;
            var lang;
            var lastUpdatedAtText;
            var afterRenderMessage;
            var view_model;
            var beforeDestroyMessage;
            var afterHandleMessages;
            var ret;
            var markMessageChangedTimespan;
            var initialLimit;
            return this._config = c, null == (afterFetchMessageUpdates = this._config).afterFetchMessageUpdates && (afterFetchMessageUpdates.afterFetchMessageUpdates = function() {
                return "";
            }), null == (renderInlineElement = this._config).renderInlineElement && (renderInlineElement.renderInlineElement = function() {
                return "";
            }), null == (beforeDestroyInlineElement = this._config).beforeDestroyInlineElement && (beforeDestroyInlineElement.beforeDestroyInlineElement = function() {
            }), null == (afterRenderMessage = this._config).afterRenderMessage && (afterRenderMessage.afterRenderMessage = function() {
            }), null == (view_model = this._config).afterRender && (view_model.afterRender = function() {
            }), null == (beforeDestroyMessage = this._config).beforeDestroyMessage && (beforeDestroyMessage.beforeDestroyMessage = function() {
            }), null == (afterHandleMessages = this._config).afterHandleMessages && (afterHandleMessages.afterHandleMessages = function() {
            }), null != this._config.initialLimit && (null == (ret = this._config).limitStyle && (ret.limitStyle = "button")), null == (markMessageChangedTimespan = this._config).markMessageChangedTimespan && (markMessageChangedTimespan.markMessageChangedTimespan = 5E3), null == (initialLimit = this._config).initialLimit && (initialLimit.initialLimit = 5), null == (limitIncreaseValue = this._config).limitIncreaseValue && (limitIncreaseValue.limitIncreaseValue = 5), null == (config = this._config).iconClassPenalty &&
            (config.iconClassPenalty = "sprite-liveticker-penalty"), null == (startData = this._config).iconClassYellowCard && (startData.iconClassYellowCard = "sprite-liveticker-yellowCard"), null == (iconClassRedCard = this._config).iconClassRedCard && (iconClassRedCard.iconClassRedCard = "sprite-liveticker-redCard"), null == (iconClassYellowRedCard = this._config).iconClassYellowRedCard && (iconClassYellowRedCard.iconClassYellowRedCard = "sprite-liveticker-yellowRedCard"), null == (iconClassGoal = this._config).iconClassGoal &&
            (iconClassGoal.iconClassGoal = "sprite-liveticker-goal"), null == (iconClassStart = this._config).iconClassStart && (iconClassStart.iconClassStart = "sprite-liveticker-startEnd"), null == (iconClassEnd = this._config).iconClassEnd && (iconClassEnd.iconClassEnd = "sprite-liveticker-startEnd"), null == (iconClassHockeyEnd = this._config).iconClassHockeyEnd && (iconClassHockeyEnd.iconClassHockeyEnd = "sprite-liveticker-hockeyEnd"), null == (iconClassHockeyGoal = this._config).iconClassHockeyGoal &&
            (iconClassHockeyGoal.iconClassHockeyGoal = "sprite-liveticker-hockeyGoal"), null == (iconClassHockeyThirdEnd = this._config).iconClassHockeyThirdEnd && (iconClassHockeyThirdEnd.iconClassHockeyThirdEnd = "sprite-liveticker-hockeyThirdEnd"), null == (iconClassMatchpoint = this._config).iconClassMatchpoint && (iconClassMatchpoint.iconClassMatchpoint = "sprite-liveticker-matchpoint"), null == (iconClassSetpoint = this._config).iconClassSetpoint && (iconClassSetpoint.iconClassSetpoint = "sprite-liveticker-setpoint"),
            null == (iconClassBreakpoint = this._config).iconClassBreakpoint && (iconClassBreakpoint.iconClassBreakpoint = "sprite-liveticker-breakpoint"), null == (iconClassSubstitution = this._config).iconClassSubstitution && (iconClassSubstitution.iconClassSubstitution = "sprite-liveticker-substitution"), null == (lang = this._config).lang && (lang.lang = "de"), self.translations.configure(this._config.lang), null == (lastUpdatedAtText = this._config).lastUpdatedAtText && (lastUpdatedAtText.lastUpdatedAtText =
                self.translations.translate("letzte Meldung %s")), this._id = this._config.id, this._el = (this._$el = $(extended))[0], this._reactComponent = ReactDOM.render(React.createElement(require("framework/liveticker/Liveticker/component").Liveticker, {
                config : this._config
            }), this._el);
        }, Animation.prototype._teardown = function() {
            return ReactDOM.unmountComponentAtNode(this._el), this._initialize();
        }, Animation.prototype._fetchWholeFeed = function($sanitize) {
            var args;
            if (!this._isFetchingWholeFeed && !this._isPaused) {
                return this._isFetchingWholeFeed = true, args = arguments, $.ajax({
                    url : this._config.http.baseUrl + "/livetickers/" + this._id + "?type=preview",
                    complete : function(dataAndEvents) {
                        return function() {
                            return dataAndEvents._isFetchingWholeFeed = false;
                        };
                    }(this),
                    success : function(tree) {
                        return function(evt) {
                            if (tree._reactComponent && (tree._reactComponent.setState({
                                    isActive : evt.liveticker.active,
                                    orderBy : evt.liveticker.order_by,
                                    hasQuestionForm : null != evt.liveticker.question_list && evt.liveticker.question_list.active,
                                    questionListId : null != evt.liveticker.question_list ? evt.liveticker.question_list.id : null
                                }), tree._id = evt.liveticker.id, tree._refetchIntervalInMs = evt.liveticker.interval_ms, null != $sanitize)) {
                                return $sanitize();
                            }
                        };
                    }(this),
                    error : function(object) {
                        return function() {
                            return object._fetchWholeFeedTimeout = setTimeout(function() {
                                return object._fetchWholeFeed.apply(object, args);
                            }, 5E3);
                        };
                    }(this)
                });
            }
        }, Animation.prototype._listenForMessageUpdates = function() {
            if (this._reactComponent.state.isActive && !this._isPaused) {
                return this._listenForMessageUpdatesTimeout = setTimeout(function(dataAndEvents) {
                    return function() {
                        return dataAndEvents._fetchMessageUpdates(function() {
                            return dataAndEvents._fetchWholeFeed(), dataAndEvents._listenForMessageUpdates();
                        });
                    };
                }(this), this._refetchIntervalInMs);
            }
        }, Animation.prototype._fetchMessageUpdates = function($sanitize) {
            var typePattern;
            var uid;
            if (!this._isFetchingMessageUpdates && !this._isPaused) {
                return this._isFetchingMessageUpdates = true, typePattern = arguments, uid = this._lastRequestedAt || 0, $.ajax({
                    url : this._config.http.baseUrl + "/livetickers/" + this._id + "/liveticker_message_updates/" + uid,
                    complete : function(dataAndEvents) {
                        return function() {
                            return dataAndEvents._isFetchingMessageUpdates = false;
                        };
                    }(this),
                    success : function(self) {
                        return function(dataAndEvents) {
                            var i;
                            var valsLength;
                            var data;
                            var codeSegments;
                            var px;
                            if (self._reactComponent) {
                                self._lastRequestedAt = dataAndEvents.liveticker_message_updates.request_time;
                                /** @type {number} */
                                px = (new Date).getTime() - self._lastRequestedAt;
                                codeSegments = dataAndEvents.liveticker_message_updates.liveticker_messages;
                                /** @type {number} */
                                i = 0;
                                valsLength = codeSegments.length;
                                for (;i < valsLength;i++) {
                                    data = codeSegments[i];
                                    data.updated_at = data.updated_at + px;
                                    /** @type {number} */
                                    data.received_at = (new Date).getTime();
                                }
                                if (dataAndEvents.liveticker_message_updates.liveticker_messages.length && self._reactComponent.setState({
                                        messages : self._reactComponent.handleMessages(dataAndEvents.liveticker_message_updates.liveticker_messages)
                                    }), self._reactComponent.setState({
                                        isLoading : false
                                    }), self._config.afterFetchMessageUpdates.call(self, dataAndEvents.liveticker_message_updates.liveticker_messages, uid), null != $sanitize) {
                                    return $sanitize();
                                }
                            }
                        };
                    }(this),
                    error : function(args) {
                        return function() {
                            return args._fetchMessageUpdatesTimeout = setTimeout(function() {
                                return args._fetchMessageUpdates.apply(args, typePattern);
                            }, args._refetchIntervalInMs);
                        };
                    }(this)
                });
            }
        }, Animation.prototype._updateTest = function() {
            var i;
            var _i;
            var attributes;
            /** @type {Array} */
            attributes = [];
            /** @type {number} */
            i = _i = 0;
            for (;_i <= 2;i = ++_i) {
                attributes.push($.extend({}, this._reactComponent.state.messages[i], {
                    sort : this._reactComponent.state.messages[i].sort + 1,
                    updated_at : this._reactComponent.state.messages[i].updated_at + 1,
                    received_at : (new Date).getTime()
                }));
            }
            return attributes.push($.extend({}, this._reactComponent._messagesIndex["54acd69787da8b3ad2000002"], {
                text : "<p>Moinsen poinsen</p><p>\x3c!--{{inline_element('5500007687da8bbd1b00302f')}}--\x3e</p>",
                updated_at : (new Date).getTime(),
                received_at : (new Date).getTime()
            })), console.log("update " + attributes.length + " messages"), this._reactComponent.setState({
                messages : this._reactComponent.handleMessages(attributes)
            });
        }, Animation.prototype._createTest = function() {
            return this._reactComponent.setState({
                messages : this._reactComponent.handleMessages([{
                    icon_name : null,
                    id : "moin" + (new Date).getTime(),
                    inline_elements : [],
                    minute_of_play : null,
                    picture_medium_url : null,
                    picture_small_url : null,
                    released : true,
                    score_home : null,
                    score_visitor : null,
                    sort : (new Date).getTime(),
                    text : "<p>haha</p>",
                    title : null,
                    updated_at : (new Date).getTime(),
                    received_at : (new Date).getTime()
                }])
            });
        }, Animation.prototype._deleteTest = function() {
            return this._reactComponent.setState({
                messages : this._reactComponent.handleMessages([{
                    icon_name : null,
                    id : "54acd69787da8b3ad2000002",
                    inline_elements : [],
                    minute_of_play : null,
                    picture_medium_url : null,
                    picture_small_url : null,
                    released : false,
                    score_home : null,
                    score_visitor : null,
                    sort : null,
                    text : null,
                    title : null,
                    updated_at : (new Date).getTime(),
                    received_at : (new Date).getTime()
                }])
            });
        }, Animation.prototype._deleteTestDouble = function() {
            return this._reactComponent.setState({
                messages : this._reactComponent.handleMessages([{
                    icon_name : null,
                    id : "5507eb7587da8ba2a2000002",
                    inline_elements : [],
                    legacy_id : 432968,
                    minute_of_play : null,
                    picture_medium_url : null,
                    picture_small_url : null,
                    released : false,
                    score_home : null,
                    score_visitor : null,
                    sort : 40,
                    text : "<p>6</p>",
                    title : "6",
                    updated_at : (new Date).getTime(),
                    received_at : (new Date).getTime()
                }, {
                    icon_name : null,
                    id : "5507eb7587da8ba3d1000002",
                    inline_elements : [],
                    legacy_id : 432970,
                    minute_of_play : null,
                    picture_medium_url : null,
                    picture_small_url : null,
                    released : false,
                    score_home : null,
                    score_visitor : null,
                    sort : 39,
                    text : "<p>7</p>",
                    title : "7",
                    updated_at : (new Date).getTime(),
                    received_at : (new Date).getTime()
                }])
            });
        }, Animation;
    }();
    eventHandle.Liveticker = elem;
}), define("framework/liveticker/Liveticker/component", ["exports", "framework/string", "framework/translations", "framework/utils"], function(eventHandle, dataAndEvents, self, gma) {
    var elem;
    var lang;
    elem = React.createClass({
        /**
         * @return {?}
         */
        getInitialState : function() {
            return this._messagesIndex = {}, this._inlineElementsIndex = {}, this._visibleMessages = [], this._updateTimestampInterval = null, this._lastUpdatedAt = null, {
                isActive : false,
                isLoading : true,
                messages : [],
                limit : this.props.config.initialLimit,
                orderBy : "desc",
                lastUpdatedAtText : "",
                hasQuestionForm : false,
                questionListId : null
            };
        },
        /**
         * @return {?}
         */
        componentDidMount : function() {
            return lang.lang(this.props.config.lang);
        },
        /**
         * @param {?} key
         * @param {Object} expr
         * @return {?}
         */
        shouldComponentUpdate : function(key, expr) {
            var i;
            var part;
            if (expr.messages.length > 0) {
                for (i in expr) {
                    if (part = expr[i], part !== this.state[i]) {
                        return true;
                    }
                }
            }
            return false;
        },
        /**
         * @param {Object} target
         * @param {Object} that
         * @return {?}
         */
        componentWillUpdate : function(target, that) {
            if (this.state.orderBy !== that.orderBy && this._sortMessageArray(that.messages, that.orderBy), this._visibleMessages = that.messages.slice(0, that.limit), that.isActive) {
                if (null != this.props.config.lastUpdatedAtText && null == this._updateTimestampInterval) {
                    return that.lastUpdatedAtText = this.props.config.lastUpdatedAtText.replace("%s", lang.fromNow(this._lastUpdatedAt)), this._updateTimestampInterval = setInterval(function(self) {
                        return function() {
                            return self.setState({
                                lastUpdatedAtText : self.props.config.lastUpdatedAtText.replace("%s", lang.fromNow(self._lastUpdatedAt))
                            });
                        };
                    }(this), 1E3);
                }
            } else {
                if (null != this._updateTimestampInterval) {
                    return clearInterval(this._updateTimestampInterval), this._updateTimestampInterval = null;
                }
            }
        },
        /**
         * @return {?}
         */
        render : function() {
            return require("framework/liveticker/Liveticker/template").default.apply(this);
        },
        /**
         * @param {Object} target
         * @param {Object} putativeSpy
         * @return {?}
         */
        componentDidUpdate : function(target, putativeSpy) {
            var $window;
            return this._hasSimplePlaceholder() || this._addSimplePlaceholder(), this.refs.questionForm && ($window = $(ReactDOM.findDOMNode(this.refs.questionForm)), $window.off("submit.sendQuestion").on("submit.sendQuestion", this.sendQuestion)), this.props.config.afterRender.call(this);
        },
        /**
         * @return {?}
         */
        componentWillUnmount : function() {
            if (null != this._updateTimestampInterval) {
                return clearInterval(this._updateTimestampInterval), this._updateTimestampInterval = null;
            }
        },
        /**
         * @return {?}
         */
        useButton : function() {
            return "button" === this.props.config.limitStyle;
        },
        /**
         * @return {?}
         */
        useLoader : function() {
            return "scroller" === this.props.config.limitStyle;
        },
        /**
         * @return {?}
         */
        isLimitReached : function() {
            return this.state.limit >= this.state.messages.length;
        },
        /**
         * @return {?}
         */
        increaseLimit : function() {
            return this.setState({
                limit : Math.min(this.state.limit + this.props.config.limitIncreaseValue, this.state.messages.length)
            });
        },
        /**
         * @param {?} event
         * @return {?}
         */
        sendQuestion : function(event) {
            var doc;
            var $scope;
            return doc = $($scope = ReactDOM.findDOMNode(this.refs.questionForm)), doc.validate() ? ($(ReactDOM.findDOMNode(this)).find(".fullscreenLoader").addClass("NnTransparency").show(), $.ajax({
                url : this.props.config.http.baseUrl + "/questions/" + this.state.questionListId,
                type : "PUT",
                contentType : "application/json; charset=UTF-8",
                data : JSON.stringify({
                    question : {
                        question : $scope.question.value,
                        firstname : $scope.firstName.value,
                        lastname : $scope.lastName.value,
                        city : $scope.city.value
                    }
                }),
                success : function(elems) {
                    return function() {
                        return gma.utils.showDialog($(ReactDOM.findDOMNode(elems)).find(".NnDialog"), self.translations.translate("Nachricht versandt"), self.translations.translate("Vielen Dank f\u00fcr Ihren Beitrag. Ihre Nachricht wurde versandt. Die Redaktion wird ausgew\u00e4hlte Einsendungen ver\u00f6ffentlichen.")), elems._resetQuestionForm();
                    };
                }(this),
                error : function(elems) {
                    return function() {
                        return gma.utils.showDialog($(ReactDOM.findDOMNode(elems)).find(".NnDialog"), self.translations.translate("Senden fehlgeschlagen"), self.translations.translate("Ihre Nachricht konnte aus technischen Gr\u00fcnden nicht \u00fcbermittelt werden."));
                    };
                }(this),
                complete : function(elems) {
                    return function() {
                        return $(ReactDOM.findDOMNode(elems)).find(".fullscreenLoader").hide().removeClass("NnTransparency");
                    };
                }(this)
            })) : this._removeSimplePlaceholderClasses(), event.preventDefault();
        },
        /**
         * @param {Array} opt_attributes
         * @return {?}
         */
        handleMessages : function(opt_attributes) {
            var _i;
            var _len;
            var msg;
            var state;
            if (opt_attributes.length) {
                state = this.state.messages;
                /** @type {number} */
                _i = 0;
                _len = opt_attributes.length;
                for (;_i < _len;_i++) {
                    msg = opt_attributes[_i];
                    state = this._handleMessage(msg, state);
                }
                return this._sortMessageArray(state), this.props.config.afterHandleMessages.call(this, state), state;
            }
        },
        /**
         * @param {Element} message
         * @param {Node} event
         * @return {?}
         */
        _handleMessage : function(message, event) {
            var result;
            return message.released && (message.updated_at > this._lastUpdatedAt && (this._lastUpdatedAt = message.updated_at), message.icon_class_name = this.props.config["iconClass" + (null != (result = message.icon_name) ? result : "").camelCase(true)], message.hasScore = null != message.score_home && null != message.score_visitor, message.hasMinuteOfPlay = null != message.minute_of_play), message.id in this._messagesIndex ? message.released ? this._updateMessage(message, event) : this._deleteMessage(message,
                event) : message.released ? this._createMessage(message, event) : event;
        },
        /**
         * @param {Element} message
         * @param {(Node|string)} data
         * @return {?}
         */
        _createMessage : function(message, data) {
            var updateQuery;
            var ol;
            var t;
            return updateQuery = {}, updateQuery.$push = [message], t = React.addons.update(data, updateQuery), ol = t[t.length - 1], this._messagesIndex[ol.id] = ol, this._handleInlineElements(ol), t;
        },
        /**
         * @param {Element} y
         * @param {HTMLElement} selector
         * @return {?}
         */
        _updateMessage : function(y, selector) {
            var i;
            var clone;
            var curLoop;
            var src;
            var match;
            return i = this._getMessageIndexById(y.id, selector), curLoop = {}, curLoop[i] = {
                $merge : y
            }, match = React.addons.update(selector, curLoop), src = match[i], clone = this._messagesIndex[src.id], clone.text !== src.text && this._deleteInlineElementsIndex(clone), this._messagesIndex[src.id] = src, this._handleInlineElements(src), match;
        },
        /**
         * @param {Element} bob
         * @param {HTMLElement} elem
         * @return {?}
         */
        _deleteMessage : function(bob, elem) {
            var camelKey;
            var contains;
            var data;
            return contains = this._getMessageIndexById(bob.id, elem), camelKey = {}, camelKey.$splice = [[contains, 1]], data = React.addons.update(elem, camelKey), delete this._messagesIndex[bob.id], this._deleteInlineElementsIndex(bob), data;
        },
        /**
         * @param {string} state
         * @param {(number|string)} delta_y
         * @return {?}
         */
        _sortMessageArray : function(state, delta_y) {
            return null == delta_y && (delta_y = this.state.orderBy), state.sort(function(dataAndEvents) {
                return function(a, b) {
                    return a.sort > b.sort ? "desc" === delta_y ? -1 : 1 : a.sort < b.sort ? "desc" === delta_y ? 1 : -1 : 0;
                };
            }(this));
        },
        /**
         * @param {?} name
         * @param {Object} array
         * @return {?}
         */
        _getMessageIndexById : function(name, array) {
            var i;
            var _i;
            var _len;
            var v;
            if (null == array) {
                array = this.state.messages;
            }
            /** @type {number} */
            i = _i = 0;
            _len = array.length;
            for (;_i < _len;i = ++_i) {
                if (v = array[i], v.id === name) {
                    return i;
                }
            }
        },
        /**
         * @param {Object} elem
         * @return {?}
         */
        _handleInlineElements : function(elem) {
            var world;
            var i;
            var max;
            var worlds;
            worlds = elem.inline_elements;
            /** @type {number} */
            i = 0;
            max = worlds.length;
            for (;i < max;i++) {
                world = worlds[i];
                this._inlineElementsIndex[world.id] = world;
            }
            return elem.text_parts = this._extractInlineElements(elem.text, elem.inline_elements);
        },
        /**
         * @param {Element} dest
         * @return {?}
         */
        _deleteInlineElementsIndex : function(dest) {
            var path;
            var i;
            var ln;
            var styleSheets;
            var eventPath;
            styleSheets = dest.inline_elements;
            /** @type {Array} */
            eventPath = [];
            /** @type {number} */
            i = 0;
            ln = styleSheets.length;
            for (;i < ln;i++) {
                path = styleSheets[i];
                eventPath.push(delete this._inlineElementsIndex[path.id]);
            }
            return eventPath;
        },
        /**
         * @param {string} line
         * @param {?} dataAndEvents
         * @return {?}
         */
        _extractInlineElements : function(line, dataAndEvents) {
            var i;
            var data;
            var colNames;
            var re;
            if (colNames = [], re = /\x3c!--{{inline_element\(['"]?([a-fA-F0-9]+)['"]?\)}}--\x3e/g, i = 0, "string" == typeof line) {
                for (;data = re.exec(line);) {
                    if (data.index > i) {
                        colNames.push(data.input.substring(i, data.index));
                    }
                    if (data[1] in this._inlineElementsIndex) {
                        colNames.push(this._inlineElementsIndex[data[1]]);
                    }
                    /** @type {number} */
                    i = data.index + data[0].length;
                }
                if (i < line.length) {
                    colNames.push(line.substring(i, line.length));
                }
            }
            return colNames;
        },
        /**
         * @return {?}
         */
        _hasSimplePlaceholder : function() {
            var $document;
            return!!this.refs.questionForm && ($document = $(ReactDOM.findDOMNode(this.refs.questionForm)), $document.find(".simple-placeholder").length > 0);
        },
        /**
         * @return {?}
         */
        _addSimplePlaceholder : function() {
            var $document;
            if (this.refs.questionForm) {
                return $document = $(ReactDOM.findDOMNode(this.refs.questionForm)), $document.find("[placeholder]:not(.placeholderForLegacyBrowsers)").simplePlaceholder({
                    placeholderClass : "placeholderForLegacyBrowsers"
                });
            }
        },
        /**
         * @return {?}
         */
        _removeSimplePlaceholderClasses : function() {
            var $document;
            if (this.refs.questionForm) {
                return $document = $(ReactDOM.findDOMNode(this.refs.questionForm)), $document.find(".placeholderForLegacyBrowsers").removeClass("placeholderForLegacyBrowsers");
            }
        },
        /**
         * @return {?}
         */
        _resetQuestionForm : function() {
            var options;
            if (this.refs.questionForm && (options = ReactDOM.findDOMNode(this.refs.questionForm), options.question.value = "", void 0 === document.createElement("input").placeholder)) {
                return $.simplePlaceholder.showPlaceholder.call(options.question);
            }
        }
    });
    lang = {
        _lang : "de",
        de : {
            relativeTime : {
                future : "in %s",
                past : "vor %s",
                s : "wenigen Sek.",
                ss : "wenigen Sek.",
                m : "1 Min.",
                mm : "%d Min.",
                h : "1 Std.",
                hh : "%d Std.",
                d : "1 Tag",
                dd : "%d Tg.",
                M : "1 Monat",
                MM : "%d Mnt.",
                y : "1 Jahr",
                yy : "%d Jhr."
            }
        },
        fr : {
            relativeTime : {
                future : "dans %s",
                past : "il y a %s",
                s : "quelques secondes",
                ss : "quelques secondes",
                m : "une minute",
                mm : "%d minutes",
                h : "une heure",
                hh : "%d heures",
                d : "un jour",
                dd : "%d jours",
                M : "un mois",
                MM : "%d mois",
                y : "un an",
                yy : "%d ans"
            }
        },
        /**
         * @param {string} lang
         * @param {string} options
         * @return {?}
         */
        lang : function(lang, options) {
            if (this._lang = lang, null != options) {
                return $.extend(this[lang], options);
            }
        },
        /**
         * @param {(number|string)} x2
         * @param {string} test
         * @return {?}
         */
        fromNow : function(x2, test) {
            var parts;
            var part;
            var pattern;
            var x1;
            return null == test && (test = this._lang), x1 = (new Date).getTime(), x1 >= x2 ? (pattern = this[test].relativeTime.past, x2 = x1 - x2) : (pattern = this[test].relativeTime.future, x2 -= x1), parts = ["ms", "s", "m", "h", "d", "M", "y"], part = function(dataAndEvents) {
                return function() {
                    var i;
                    var _i;
                    var _len;
                    /** @type {number} */
                    i = _i = 0;
                    _len = parts.length;
                    for (;_i < _len;i = ++_i) {
                        switch(part = parts[i]) {
                            case "ms":
                                x2 /= 1E3;
                                break;
                            case "s":
                                ;
                            case "m":
                                if (!(x2 / 60 >= 1)) {
                                    return part;
                                }
                                x2 /= 60;
                                break;
                            case "h":
                                if (!(x2 / 24 >= 1)) {
                                    return part;
                                }
                                x2 /= 24;
                                break;
                            case "d":
                                if (!(x2 / 30 >= 1)) {
                                    return part;
                                }
                                x2 /= 30;
                                break;
                            case "M":
                                if (!(x2 / 365 >= 1)) {
                                    return part;
                                }
                                x2 /= 365;
                                break;
                            default:
                                return part;
                        }
                    }
                };
            }(this)(), x2 >= 2 ? pattern.replace("%s", this[test].relativeTime[part + part].replace("%d", Math.floor(x2))) : pattern.replace("%s", this[test].relativeTime[part].replace("%d", Math.floor(x2)));
        }
    };
    eventHandle.Liveticker = elem;
}), define("framework/liveticker/Liveticker/template", ["exports", "framework/translations", "framework/liveticker/LivetickerMessage/component", "framework/loader/loader", "framework/loader/snakeLoader", "framework/loader/fullscreenLoader", "framework/dialog/templates/dialog"], function(opts, self, item, obj, join, value, opt) {
    /**
     * @param {(Function|string)} cfg
     * @param {Object} doc
     * @param {?} range
     * @return {?}
     */
    function fn(cfg, doc, range) {
        return React.createElement(item.LivetickerMessage, {
            key : doc.id,
            message : doc,
            config : cfg,
            parentState : this.state
        });
    }
    /**
     * @return {?}
     */
    function create() {
        var name = this.props.config;
        return React.createElement("div", {
            className : "NnLiveticker" + (this.state.isLoading ? " loading" : "") + (this.state.isActive ? " active" : "")
        }, this.state.hasQuestionForm ? React.createElement("div", {
            className : "questionForm"
        }, React.createElement("h2", {}, "Live-Chat"), React.createElement("form", {
            ref : "questionForm"
        }, React.createElement("div", {
            dangerouslySetInnerHTML : {
                __html : value.default()
            }
        }), React.createElement("div", {
            dangerouslySetInnerHTML : {
                __html : opt.default()
            }
        }), React.createElement("table", {}, React.createElement("tr", {}, React.createElement("td", {
            colSpan : "3"
        }, React.createElement("textarea", {
            name : "question",
            placeholder : self.translations.translate("Ihre Frage...")
        }), React.createElement("p", {
            className : "error",
            "data-label" : "question"
        }, self.translations.translate("Frage"), " ", self.translations.translate("fehlt")))), React.createElement("tr", {}, React.createElement("td", {}, React.createElement("input", {
            type : "text",
            name : "firstName",
            placeholder : self.translations.translate("Vorname"),
            "data-validation" : "nodigits"
        }), React.createElement("p", {
            className : "error",
            "data-label" : "firstName"
        }, self.translations.translate("Vorname"), " ", self.translations.translate("fehlt"))), React.createElement("td", {}, React.createElement("input", {
            type : "text",
            name : "lastName",
            placeholder : self.translations.translate("Name"),
            "data-validation" : "nodigits"
        }), React.createElement("p", {
            className : "error",
            "data-label" : "lastName"
        }, self.translations.translate("Name"), " ", self.translations.translate("fehlt"))), React.createElement("td", {}, React.createElement("input", {
            type : "text",
            name : "city",
            placeholder : self.translations.translate("Wohnort"),
            "data-validation" : "nodigits"
        }), React.createElement("p", {
            className : "error",
            "data-label" : "city"
        }, self.translations.translate("Wohnort"), " ", self.translations.translate("fehlt"))))), "\n\n            ", self.translations.translate("Der Live-Chat wird moderiert. Die Redaktion wird ausgew\u00e4hlte Einsendungen ver\u00f6ffentlichen."), "\n            ", React.createElement("br", {}), React.createElement("button", {
            type : "submit"
        }, self.translations.translate("Senden")))) : null, React.createElement("div", {
            className : "header"
        }, this.state.isLoading ? React.createElement("h2", {
            className : "loadingCaption"
        }, self.translations.translate("Liveticker wird geladen...")) : null, !this.state.isLoading && this.state.isActive ? React.createElement("h2", {
            className : "activeCaption"
        }, React.createElement("div", {
            className : "waiter",
            dangerouslySetInnerHTML : {
                __html : join.default({
                    visible : true
                })
            }
        }), "\n            ", self.translations.translate("Liveticker aktualisiert automatisch"), "\n            ", React.createElement("span", {
            className : "lastUpdatedAt"
        }, this.state.lastUpdatedAtText)) : null, this.state.isLoading || this.state.isActive ? null : React.createElement("h2", {
            className : "inactiveCaption"
        })), React.createElement.apply(this, ["ul", {
            className : "messages"
        }, _.map(this._visibleMessages, fn.bind(this, name))]), React.createElement("div", {
            className : "footer"
        }, !this.isLimitReached() && this.useLoader() || this.state.isLoading ? React.createElement("div", {
            dangerouslySetInnerHTML : {
                __html : obj.default({
                    visible : true
                })
            }
        }) : null, !this.isLimitReached() && this.useButton() ? React.createElement("button", {
            onClick : this.increaseLimit
        }, self.translations.translate("Mehr anzeigen...")) : null));
    }
    /**
     * @return {?}
     */
    opts.default = function() {
        return create.apply(this, []);
    };
}), define("framework/liveticker/LivetickerMessage/component", ["exports"], function(eventHandle) {
    var elem;
    elem = React.createClass({
        /**
         * @return {?}
         */
        getInitialState : function() {
            return this._markedAsChangedTimeout = null, this._renderInlineElementsCallbacks = [], this._ignoreChangedsInProperties = ["sort", "updated_at", "received_at", "inline_elements", "text_parts", "refresh", "cache"], {
                markedAsChanged : false
            };
        },
        /**
         * @return {?}
         */
        componentWillMount : function() {
            return this._renderInlineElements(this.props.message);
        },
        /**
         * @return {?}
         */
        componentDidMount : function() {
            return this.props.parentState.isLoading || this._markAsChanged(), this._callInlineElementCallbacks(), this.props.config.afterRenderMessage.call(this, this.props.message, ReactDOM.findDOMNode(this), "create");
        },
        /**
         * @param {?} arg
         * @param {Object} jsonString
         * @return {?}
         */
        shouldComponentUpdate : function(arg, jsonString) {
            var name;
            var _ref;
            var val;
            if (jsonString.markedAsChanged !== this.state.markedAsChanged) {
                return true;
            }
            _ref = arg.message;
            for (name in _ref) {
                if (val = _ref[name], this._ignoreChangedsInProperties.indexOf(name) < 0 && val !== this.props.message[name]) {
                    return true;
                }
            }
            return false;
        },
        /**
         * @param {Object} target
         * @param {Object} putativeSpy
         * @return {?}
         */
        componentWillUpdate : function(target, putativeSpy) {
            if (this.props.message.text !== target.message.text) {
                return this._destroyInlineElements(), this._renderInlineElements(target.message);
            }
        },
        /**
         * @return {?}
         */
        render : function() {
            return require("framework/liveticker/LivetickerMessage/template").default.apply(this);
        },
        /**
         * @param {Object} target
         * @param {Object} putativeSpy
         * @return {?}
         */
        componentDidUpdate : function(target, putativeSpy) {
            return putativeSpy.markedAsChanged === this.state.markedAsChanged && this._markAsChanged(), this._callInlineElementCallbacks(), this.props.config.afterRenderMessage.call(this, this.props.message, ReactDOM.findDOMNode(this), "update", true);
        },
        /**
         * @return {?}
         */
        componentWillUnmount : function() {
            return clearTimeout(this._markedAsChangedTimeout), this._markedAsChangedTimeout = null, this._destroyInlineElements(), this.props.config.beforeDestroyMessage.call(this, this.props.message, ReactDOM.findDOMNode(this));
        },
        /**
         * @return {?}
         */
        _isDesktopScreen : function() {
            return screen.width > 640;
        },
        /**
         * @return {?}
         */
        _markAsChanged : function() {
            if (null != this.props.config.markMessageChangedTimespan && (new Date).getTime() - this.props.message.received_at < 2E3) {
                return this.setState({
                    markedAsChanged : true
                }), this._markedAsChangedTimeout && clearTimeout(this._markedAsChangedTimeout), this._markedAsChangedTimeout = setTimeout(function(instance) {
                    return function() {
                        if (instance.isMounted()) {
                            return instance.setState({
                                markedAsChanged : false
                            });
                        }
                    };
                }(this), this.props.config.markMessageChangedTimespan);
            }
        },
        /**
         * @return {?}
         */
        _destroyInlineElements : function() {
            var level;
            var j;
            var subLn;
            var parts;
            var elements;
            parts = this.props.message.inline_elements;
            /** @type {Array} */
            elements = [];
            /** @type {number} */
            j = 0;
            subLn = parts.length;
            for (;j < subLn;j++) {
                level = parts[j];
                elements.push(this.props.config.beforeDestroyInlineElement.call(this, this.props.message, level, ReactDOM.findDOMNode(this)));
            }
            return elements;
        },
        /**
         * @param {?} element
         * @return {?}
         */
        _renderInlineElements : function(element) {
            var k;
            var _i;
            var _len;
            var _ref;
            var expr;
            var val;
            /** @type {string} */
            element.text_parts_rendered = "";
            _ref = element.text_parts;
            /** @type {Array} */
            expr = [];
            /** @type {number} */
            k = _i = 0;
            _len = _ref.length;
            for (;_i < _len;k = ++_i) {
                val = _ref[k];
                if ("string" == typeof val) {
                    expr.push(element.text_parts_rendered += val);
                } else {
                    expr.push(function(self) {
                        return function(arg) {
                            var value;
                            return value = self.props.config.renderInlineElement.call(self, element, arg, function(val) {
                                if (null != val) {
                                    return $("#inlineElement_" + arg.id).html(val);
                                }
                            }), "string" == typeof value ? element.text_parts_rendered += value : null != value && (element.text_parts_rendered += '<div id="inlineElement_' + arg.id + '"></div>', $.isFunction(value)) ? self._renderInlineElementsCallbacks.push(value) : void 0;
                        };
                    }(this)(val));
                }
            }
            return expr;
        },
        /**
         * @return {?}
         */
        _callInlineElementCallbacks : function() {
            var world;
            var i;
            var max;
            var worlds;
            worlds = this._renderInlineElementsCallbacks;
            /** @type {number} */
            i = 0;
            max = worlds.length;
            for (;i < max;i++) {
                (world = worlds[i])();
            }
            return this._renderInlineElementsCallbacks.length = 0;
        }
    });
    eventHandle.LivetickerMessage = elem;
}), define("framework/liveticker/LivetickerMessage/template", ["exports"], function(obj) {
    /**
     * @return {?}
     */
    function create() {
        var data = this.props.message;
        return React.createElement("li", {
            className : "message" + (this.state.markedAsChanged ? " changed" : ""),
            id : "message_" + data.id
        }, React.createElement("div", {
            className : "header"
        }, data.title && !data.icon_class_name ? React.createElement("span", {
            className : "title"
        }, data.title) : null, data.hasMinuteOfPlay ? React.createElement("span", {
            className : "time"
        }, data.minute_of_play, "'") : null, data.icon_class_name ? React.createElement("span", {
            className : "spriteIcon " + data.icon_class_name
        }) : null, data.icon_class_name ? React.createElement("span", {
            className : "title"
        }, data.title) : null, data.hasScore ? React.createElement("span", {
            className : "score"
        }, data.score_home, ":", data.score_visitor) : null), React.createElement("div", {
            className : "text"
        }, this._isDesktopScreen() && data.picture_medium_url ? React.createElement("img", {
            src : data.picture_medium_url,
            className : "picture"
        }) : null, !this._isDesktopScreen() && data.picture_small_url ? React.createElement("img", {
            src : data.picture_small_url,
            className : "picture"
        }) : null, React.createElement("div", {
            dangerouslySetInnerHTML : {
                __html : data.text_parts_rendered
            }
        })), React.createElement("div", {
            className : "clear"
        }));
    }
    /**
     * @return {?}
     */
    obj.default = function() {
        return create.apply(this, []);
    };
}), define("framework/loader/bubbleLoader", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<div class="bubbleLoader">\n    <div>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n</div>');
}), define("framework/loader/fullscreenLoader", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<div class="fullscreenLoader {{style}} {{#if visible}}visible{{/if}}" {{#if id}}id="{{id}}"{{/if}}>\n    <div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <span></span>\n    </div>\n</div>');
}), define("framework/loader/loader", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<div class="loader {{style}} {{#if visible}}visible{{/if}}">\n    <div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n</div>');
}), define("framework/loader/snakeLoader", ["exports"], function(obj) {
    obj.default = Handlebars.compile('{{#if visible}}\n    <div class="snakeLoader visible {{style}}">\n{{else}}\n    <div class="snakeLoader {{style}}">\n{{/if}}\n    <div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n</div>');
}), define("framework/LocalStorageQueue", ["exports"], function(eventHandle) {
    var elem;
    elem = function() {
        /**
         * @param {?} err
         * @param {Object} key
         * @return {undefined}
         */
        function self(err, key) {
            this.lsKey = err;
            this.maxLength = null != key ? key : 250;
        }
        return self.prototype.add = function(value) {
            if (!this.contains(value)) {
                if (this.queue.length >= this.maxLength) {
                    this.queue.shift();
                }
                this.queue.push(value);
                try {
                    return localStorage.setItem(this.lsKey, JSON.stringify(this.queue));
                } catch (b) {
                }
            }
        }, self.prototype.contains = function(obj) {
            return this.queue = this.getQueue(this.lsKey), this.queue.indexOf(obj) > -1;
        }, self.prototype.getQueue = function() {
            var source;
            var sourceKeys;
            /** @type {Array} */
            sourceKeys = [];
            try {
                if (source = localStorage.getItem(this.lsKey)) {
                    /** @type {*} */
                    sourceKeys = JSON.parse(source);
                }
            } catch (c) {
            }
            return sourceKeys;
        }, self.prototype.removeItem = function(index) {
            var cs;
            cs = this.getQueue(this.lsKey);
            cs.splice(index, 1);
            try {
                return localStorage.setItem(this.lsKey, JSON.stringify(cs));
            } catch (c) {
            }
        }, self;
    }();
    eventHandle.LocalStorageQueue = elem;
}), define("framework/newsletter/newsletter", ["exports", "framework/jquery", "framework/translations"], function(exports, dataAndEvents, i18n) {
    var self;
    var app;
    self = {};
    self.config = {};
    app = {
        /**
         * @param {?} opt_attributes
         * @return {?}
         */
        configure : function(opt_attributes) {
            return $.extend(self.config, opt_attributes), i18n.translations.configure(self.config.language);
        },
        /**
         * @param {Object} data
         * @param {?} obj
         * @return {?}
         */
        insert : function(data, obj) {
            return ReactDOM.render(React.createElement(require("framework/newsletter/NewsletterSubscriptionContainer/component").NewsletterSubscriptionContainer, {
                paywallUserEmail : obj.paywallUserEmail,
                optinId : obj.optinId,
                serviceId : obj.serviceId,
                template : obj.template,
                title : obj.title,
                lead : obj.lead,
                disclaimer : obj.disclaimer,
                todaysNewsletterUrl : obj.todaysNewsletterUrl,
                listInfos : obj.listInfos || [],
                customer : self.config.currentCustomer,
                origin : "desktop" === self.config.env ? "web" : self.config.env,
                isProduction : self.config.isProduction
            }), data);
        }
    };
    exports.newsletter = app;
}), define("framework/newsletter/NewsletterSubscriptionContainer/component", ["exports"], function(eventHandle) {
    var elem;
    elem = React.createClass({
        /**
         * @return {?}
         */
        render : function() {
            return require("framework/newsletter/NewsletterSubscriptionContainer/template").default.apply(this);
        }
    });
    eventHandle.NewsletterSubscriptionContainer = elem;
}), define("framework/newsletter/NewsletterSubscriptionContainer/template", ["exports", "framework/translations", "framework/newsletter/NewsletterSubscriptionField/component"], function(obj, self, item) {
    /**
     * @param {?} children
     * @param {string} name
     * @return {?}
     */
    function create(children, name) {
        return React.createElement("li", {
            key : name
        }, children);
    }
    /**
     * @return {?}
     */
    obj.default = function() {
        return React.createElement("div", {
            className : "NnNewsletterSubscriptionContainer " + (this.props.template ? this.props.template : "")
        }, "big" == this.props.template ? React.createElement("div", {
            className : "imageContainer"
        }, React.createElement("img", {
            src : "https://files.newsnetz.ch/upload//9/8/98331.jpg",
            alt : "TA Newsletter"
        })) : null, React.createElement("div", {
            className : "textContainer"
        }, React.createElement("h2", {}, this.props.title), "big" == this.props.template ? React.createElement("div", {
            className : "imageContainerMobile"
        }, React.createElement("img", {
            src : "https://files.newsnetz.ch/upload//9/8/98333.jpg",
            alt : "TA Newsletter"
        })) : null, React.createElement("p", {}, this.props.lead), "big" == this.props.template ? React.createElement("div", {}, React.createElement.apply(this, ["ul", {}, _.map(this.props.listInfos, create.bind(this))]), React.createElement("p", {}, this.props.todaysNewsletterUrl ? React.createElement("a", {
            href : this.props.todaysNewsletterUrl
        }, self.translations.translate("Zum heutigen Newsletter")) : null)) : null, React.createElement(item.NewsletterSubscriptionField, {
            paywallUserEmail : this.props.paywallUserEmail,
            optinId : this.props.optinId,
            serviceId : this.props.serviceId,
            customer : this.props.customer,
            origin : this.props.origin,
            disclaimer : this.props.disclaimer,
            isProduction : this.props.isProduction
        })), React.createElement("div", {
            className : "clear"
        }));
    };
}), define("framework/newsletter/NewsletterSubscriptionField/component", ["exports"], function(eventHandle) {
    var elem;
    elem = React.createClass({
        /**
         * @return {?}
         */
        getInitialState : function() {
            return{
                success : false,
                error : false
            };
        },
        /**
         * @param {Event} types
         * @return {?}
         */
        submitSubscriptionForm : function(types) {
            var $document;
            var rule;
            var user;
            var tgt;
            return types.preventDefault(), $document = $(ReactDOM.findDOMNode(this)), rule = $document.find(".subscription"), tgt = this.props.isProduction ? "tgt" : "tgt-igr", rule.validate() ? (user = {
                email : rule.find("input[name=email]").val(),
                origin : this.props.origin,
                source : this.props.optinId,
                opt_ins : [{
                    valid_from : Date.now(),
                    optin_id : this.props.optinId,
                    service_id : this.props.serviceId
                }]
            }, $.ajax({
                url : "https://" + tgt + ".tamedia.ch/cre-1.0/api/tamedia/prospect_import/xhr",
                type : "POST",
                dataType : "json",
                contentType : "application/json",
                data : JSON.stringify(user),
                success : function(_this) {
                    return function(dataAndEvents) {
                        return _this.setState({
                            success : true
                        });
                    };
                }(this),
                error : function(self) {
                    return function(dataAndEvents, deepDataAndEvents, ignoreMethodDoesntExist) {
                        return self.setState({
                            error : true
                        });
                    };
                }(this)
            })) : rule.find("input[name=email]").css("border-color", "#D8000C");
        },
        /**
         * @return {?}
         */
        render : function() {
            return require("framework/newsletter/NewsletterSubscriptionField/template").default.apply(this);
        }
    });
    eventHandle.NewsletterSubscriptionField = elem;
}), define("framework/newsletter/NewsletterSubscriptionField/template", ["exports", "framework/translations"], function(obj, self) {
    /**
     * @param {Event} classNames
     * @return {undefined}
     */
    function removeClass(classNames) {
        this.submitSubscriptionForm(classNames);
    }
    /**
     * @return {?}
     */
    obj.default = function() {
        return React.createElement("div", {
            className : "NnNewsletterSubscriptionField"
        }, this.state.success || this.state.error ? null : React.createElement("div", {}, React.createElement("form", {
            className : "subscription",
            onSubmit : removeClass.bind(this)
        }, React.createElement("input", {
            type : "text",
            name : "email",
            placeholder : self.translations.translate("Ihre E-Mail Adresse"),
            "data-validation" : "email",
            defaultValue : this.props.paywallUserEmail
        }), React.createElement("input", {
            type : "submit",
            name : "send",
            value : self.translations.translate("Senden")
        }), React.createElement("div", {
            className : "error",
            "data-label" : "email"
        }, self.translations.translate("Bitte geben Sie eine g\u00fcltige E-Mail Adresse an."))), React.createElement("p", {
            dangerouslySetInnerHTML : {
                __html : this.props.disclaimer
            }
        })), this.state.success ? React.createElement("div", {
            className : "success"
        }, React.createElement("p", {}, self.translations.translate("Vielen Dank f\u00fcr Ihre Anmeldung."))) : null, this.state.error ? React.createElement("div", {
            className : "error"
        }, React.createElement("p", {}, self.translations.translate("Ein Serverfehler ist aufgetreten, versuchen Sie es sp\u00e4ter noch einmal."))) : null);
    };
}), define("framework/paywallEventHandler", ["exports", "framework/eventsMixin"], function(args, testEnvironment) {
    var Async;
    var self;
    testEnvironment.eventsMixin.call((Async = function() {
    }).prototype);
    self = new Async;
    self.registerEvents(["Auth.afterLogin", "Auth.afterLogout"]);
    args.paywallEventHandler = self;
}), define("framework/paywallInterface", ["exports", "framework/utils"], function(eventHandle, dataAndEvents) {
    var index;
    var loginStateViewModel;
    var compassResult;
    var refresh;
    var filter;
    var resolver;
    var inject;
    var self;
    var elem;
    var params;
    /** @type {number} */
    loginStateViewModel = 2;
    /** @type {number} */
    index = 1;
    /** @type {number} */
    compassResult = 0;
    self = {};
    /** @type {null} */
    self.config = null;
    self.urls = {};
    /** @type {number} */
    self.loginState = loginStateViewModel;
    resolver = RSVP.defer();
    params = {
        abo : "abo-igr",
        tgt : "tgt-igr",
        track : "track-igr"
    };
    /**
     * @return {?}
     */
    inject = function() {
        if ($("meta[name='c1_user_info']").length <= 0) {
            return $("head").append("<meta name=\"c1_user_info\" content='{&quot;nickname&quot;:&quot;&quot;,&quot;email&quot;:&quot;raffael.wannenmacher@gmail.com&quot;,&quot;session_id&quot;:&quot;20b041d8b02d72867361ca46b5d74295&quot;,&quot;birth_date&quot;:&quot;&quot;,&quot;company&quot;:&quot;Tamedia AG&quot;,&quot;login&quot;:&quot;support@newsnet.ch&quot;,&quot;gender&quot;:&quot;&quot;,&quot;title&quot;:&quot;21&quot;,&quot;user_id&quot;:&quot;a0186312-fe62-4649-beeb-abb5fc6cba0e&quot;,&quot;last_name&quot;:&quot;Wannenmacher&quot;,&quot;first_name&quot;:&quot;Raffael&quot;,&quot;language&quot;:&quot;DE&quot;}'>")
                ;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    filter = function(event) {
        switch(event) {
            case "bazonline":
                return "baslerzeitung";
            default:
                return event;
        }
    };
    /**
     * @param {boolean} recurring
     * @param {?} newSeries
     * @return {?}
     */
    refresh = function(recurring, newSeries) {
        var returnValue;
        if (returnValue = filter(self.config.currentCustomer), self.config.paywall_status > self.config.paywall.status.disabled && self.config.paywall.enabled) {
            return recurring ? cre_client.set_page_view() : cre_client.set_page_complete(), cre_client.set_origin("desktop" === self.config.env ? "web" : self.config.env), cre_client.set_service_id(returnValue), cre_client.set_content_id(window.location.pathname), cre_client.set_cms_id(null != newSeries.cms_id ? newSeries.cms_id : 0), null != newSeries.main_channel && cre_client.set_channel(newSeries.main_channel), null != newSeries.sub_channel && cre_client.set_sub_channel(newSeries.sub_channel), recurring ?
                (cre_client.set_heading(document.title), cre_client.set_doc_type(newSeries.doc_type)) : cre_client.set_adblocker(newSeries.adblock), cre_client.request();
        }
    };
    elem = {
        userData : null,
        /**
         * @param {?} opt_attributes
         * @return {?}
         */
        configure : function(opt_attributes) {
            var i;
            var valsLength;
            var codeSegments;
            var get;
            var action;
            self.config = opt_attributes;
            if (self.config.isProduction) {
                /** @type {string} */
                params.abo = "abo";
                /** @type {string} */
                params.tgt = "tgt";
                /** @type {string} */
                params.track = "track";
            }
            /** @type {Array} */
            codeSegments = ["logout", "abo", "myAccount", "templateSets", "templateClient", "tracking"];
            /** @type {Array} */
            get = [];
            /** @type {number} */
            i = 0;
            /** @type {number} */
            valsLength = codeSegments.length;
            for (;i < valsLength;i++) {
                action = codeSegments[i];
                if (self.urls[action]) {
                    get.push(self.urls[action] = this.getUrl(action));
                }
            }
            return get;
        },
        /**
         * @return {?}
         */
        init : function() {
            return self.config.paywall_status > self.config.paywall.status.disabled && self.config.paywall.enabled ? (self.config.isDebugMode && inject(), RSVP.all([$.loadExternalScript(this.getUrl("templateSets")), $.loadExternalScript(this.getUrl("templateClient")), $.loadExternalScript(this.getUrl("tracking"))]).then(function(dataAndEvents) {
                return function() {
                    var optgroup;
                    return(optgroup = dataAndEvents.getPaywallUserData()) ? (self.loginState = index, dataAndEvents.userData = optgroup, self.config.eventHandler.trigger("Auth.afterLogin", optgroup)) : (self.loginState = compassResult, dataAndEvents.userData = null, self.config.eventHandler.trigger("Auth.afterLogout")), self.config.paywall_status === self.config.paywall.status.enabled && (self.config.paywall.enabled && cre_templateclient.setup()), resolver.resolve(optgroup);
                };
            }(this))) : resolver.resolve(), resolver.promise;
        },
        /**
         * @return {?}
         */
        login : function() {
            return resolver.promise.then(function(dataAndEvents) {
                return function() {
                    if (self.loginState !== index) {
                        return window.cre_templateclient.show({
                            template_name : "overlay_anonymous"
                        });
                    }
                };
            }(this));
        },
        /**
         * @return {?}
         */
        logout : function() {
            var results;
            var label;
            return results = window.location.host, "mobile" === self.config.env && (results += "?logout=true"), label = this.getUrl("logout"), window.location.href = label + "?callerUri=https://" + results;
        },
        /**
         * @param {string} id
         * @return {?}
         */
        getUrl : function(id) {
            var guess;
            return guess = function() {
                switch(id) {
                    case "templateSets":
                        ;
                    case "templateClient":
                        ;
                    case "tracking":
                        return params.track;
                    case "abo":
                        ;
                    case "myAccount":
                        return params.abo;
                    default:
                        return params.tgt;
                }
            }(), self.config.paywall[id].replace("%subdomain%", guess).replace("%currentCustomer%", self.config.currentCustomer).replace("%alternativeName%", self.config.alternativeName).replace("%serviceId%", filter(self.config.currentCustomer));
        },
        /**
         * @return {?}
         */
        isLoggedIn : function() {
            return self.loginState === index;
        },
        /**
         * @param {string} newSeries
         * @return {?}
         */
        track : function(newSeries) {
            return resolver.promise.then(function() {
                return refresh(true, newSeries);
            });
        },
        /**
         * @param {?} newSeries
         * @return {?}
         */
        track_pagecomplete : function(newSeries) {
            return resolver.promise.then(function() {
                return refresh(false, newSeries);
            });
        },
        /**
         * @return {?}
         */
        getPaywallUserData : function() {
            try {
                return JSON.parse($("meta[name='c1_user_info']:first").attr("content"));
            } catch (a) {
            }
        }
    };
    eventHandle.paywallInterface = elem;
}), define("framework/paywallUserNavigation/paywallUserNavigation", ["exports"], function(container) {
    var result;
    result = {
        /**
         * @param {Object} obj
         * @param {?} attributes
         * @return {?}
         */
        insert : function(obj, attributes) {
            return ReactDOM.render(React.createElement(require("framework/paywallUserNavigation/PaywallUserNavigation/component").default, attributes), obj);
        }
    };
    container.PaywallUserNavigation = result;
}), define("framework/paywallUserNavigation/PaywallUserNavigation/component", ["exports"], function(attr) {
    var value;
    value = React.createClass({
        /**
         * @return {?}
         */
        getInitialState : function() {
            return{
                isLoggedIn : this.props.interface.isLoggedIn(),
                userData : this.props.interface.userData
            };
        },
        /**
         * @return {?}
         */
        componentWillMount : function() {
            return this.props.eventHandler.on("Auth.afterLogin", this.onAfterLogin), this.props.eventHandler.on("Auth.afterLogout", this.onAfterLogout);
        },
        /**
         * @return {?}
         */
        render : function() {
            return require("framework/paywallUserNavigation/PaywallUserNavigation/template").default.apply(this);
        },
        /**
         * @return {?}
         */
        componentWillUnmount : function() {
            return this.props.eventHandler.off("Auth.afterLogin", this.onAfterLogin), this.props.eventHandler.off("Auth.afterLogout", this.onAfterLogout);
        },
        /**
         * @param {Object} userData
         * @return {?}
         */
        onAfterLogin : function(userData) {
            return this.setState({
                isLoggedIn : true,
                userData : userData
            });
        },
        /**
         * @return {?}
         */
        onAfterLogout : function() {
            return this.setState({
                isLoggedIn : false,
                userData : null
            });
        },
        /**
         * @return {?}
         */
        login : function() {
            return this.props.interface.login();
        },
        /**
         * @return {?}
         */
        logout : function() {
            return this.props.interface.logout();
        },
        /**
         * @return {?}
         */
        openAboPage : function() {
            return window.location.href = this.props.interface.getUrl("abo");
        },
        /**
         * @return {?}
         */
        openMyAccountPage : function() {
            return window.location.href = this.props.interface.getUrl("myAccount");
        }
    });
    attr.default = value;
}), define("framework/paywallUserNavigation/PaywallUserNavigation/template", ["exports", "framework/translations"], function(obj, self) {
    /**
     * @return {undefined}
     */
    function handler() {
        this.login();
    }
    /**
     * @return {undefined}
     */
    function func() {
        this.openAboPage();
    }
    /**
     * @return {undefined}
     */
    function original() {
        this.openAboPage();
    }
    /**
     * @return {undefined}
     */
    function linkElement() {
        this.openMyAccountPage();
    }
    /**
     * @return {undefined}
     */
    function __method() {
        this.logout();
    }
    /**
     * @return {?}
     */
    obj.default = function() {
        return React.createElement("nav", {
            className : "NnPaywallUserNavigation"
        }, this.state.isLoggedIn ? null : React.createElement("div", {}, React.createElement("div", {
            className : "login"
        }, React.createElement("a", {
            href : "javascript:void(0);",
            onClick : handler.bind(this)
        }, self.translations.translate("Login"))), React.createElement("div", {
            className : "subscribe"
        }, React.createElement("a", {
            href : "javascript:void(0);",
            onClick : func.bind(this)
        }, self.translations.translate("Abonnieren")), React.createElement("div", {
            className : "promotion"
        }, React.createElement("div", {}, React.createElement("p", {}, "\n                        ", self.translations.translate("Den Tages-Anzeiger online lesen f\u00fcr nur CHF 18.- im Monat."), "\n                    "), React.createElement("p", {}, React.createElement("img", {
            src : "https://files.newsnetz.ch/upload/1/2/127596.png",
            alt : true
        })), React.createElement("p", {}, "\n                        ", self.translations.translate("Ganz flexibel und jederzeit k\u00fcndbar. Jetzt testen und unbegrenzten Zugriff geniessen."), "\n                    "), React.createElement("a", {
            href : "javascript:void(0);",
            onClick : original.bind(this)
        }, self.translations.translate("Alle Angebote anzeigen")))))), this.state.isLoggedIn ? React.createElement("div", {}, React.createElement("div", {
            className : "welcome"
        }, "\n            ", self.translations.translate("Guten Tag"), ",\n            ", this.state.userData.first_name && this.state.userData.last_name ? React.createElement("span", {
            className : "username"
        }, this.state.userData.first_name, " ", this.state.userData.last_name) : null, this.state.userData.first_name && this.state.userData.last_name ? null : React.createElement("span", {
            className : "username"
        }, this.state.userData.email)), React.createElement("div", {
            className : "myAccount"
        }, React.createElement("a", {
            href : "javascript:void(0);",
            onClick : linkElement.bind(this)
        }, self.translations.translate("Mein Konto"))), React.createElement("div", {
            className : "logout"
        }, React.createElement("a", {
            href : "javascript:void(0);",
            onClick : __method.bind(this)
        }, self.translations.translate("Logout")))) : null);
    };
}), define("framework/poll/box", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<div class="NnPollBox">\n    <h3>{{title}}</h3>\n\n    <p class="question">{{question}}</p>\n\n    <div class="response"></div>\n\n    {{> loader}}\n\n    <div class="votes">\n        {{#each votes}}\n            <a data-pollVoteId="{{id}}" href="javascript:void(0);" >{{description}}</a>\n        {{/each}}\n    </div>\n\n    <div class="poll">\n        {{#each votes}}\n            <p class="answer">{{description}}</p>\n\n            <div class="bars">\n                <div class="bar" style="width: {{calculatePercent count ../total_count}}%"></div>\n            </div>\n\n            <div class="percents">\n                <span>{{calculatePercent count ../total_count}}%</span>\n            </div>\n\n            <div class="clear"></div>\n        {{/each}}\n\n        <div class="clear"></div>\n\n        <p class="total">{{total_count}} Stimmen</p>\n    </div>\n</div>');
}), define("framework/poll/module", ["exports", "framework/statistics", "framework/eventsMixin"], function(exports, data, testEnvironment) {
    var Editor;
    var self;
    var widget;
    self = {};
    self.polls = {};
    self.config = {};
    /** @type {null} */
    self.config.apiUrl = null;
    widget = {
        /**
         * @param {?} opt_attributes
         * @return {?}
         */
        configure : function(opt_attributes) {
            return self.config.apiUrl = opt_attributes;
        },
        /**
         * @param {Object} viewport
         * @param {?} col
         * @param {Function} props
         * @param {boolean} isXML
         * @return {?}
         */
        init : function(viewport, col, props, isXML) {
            return $("div[data-pollId='" + col + "']").each(function(dataAndEvents, v) {
                return self.polls[col] = (new Editor(v, viewport.payload, {
                    apiUrl : self.config.apiUrl
                })).on("afterVote", function() {
                    return data.statistics.track("wemf", props, "polls");
                }).show();
            });
        },
        /**
         * @param {boolean} id
         * @return {?}
         */
        destroy : function(id) {
            if (self.polls[id]) {
                return self.polls[id].destroy(), delete self.polls[id];
            }
        }
    };
    Editor = function() {
        /**
         * @param {Object} obj
         * @param {Object} data
         * @param {string} config
         * @return {undefined}
         */
        function initialize(obj, data, config) {
            var isRates;
            this.registerEvent("afterVote");
            /** @type {Object} */
            this._container = obj;
            this._reactComponent = ReactDOM.render(React.createElement(require("framework/poll/Poll/component").Poll, {
                config : config,
                eventHandler : this
            }), obj);
            if (null != data.elements) {
                data.votes = data.elements;
                /** @type {boolean} */
                isRates = true;
            }
            if (data instanceof RSVP.Promise || "lib$rsvp$promise$$Promise" === data.constructor.name) {
                data.then(function(dataAndEvents) {
                    return function(res) {
                        return dataAndEvents._reactComponent.setState({
                            isLoading : false,
                            payload : res.payload,
                            isRates : isRates
                        });
                    };
                }(this));
            } else {
                this._reactComponent.setState({
                    isLoading : false,
                    payload : data,
                    isRates : isRates
                });
            }
        }
        return initialize.prototype.show = function(fn) {
            return null == fn && (fn = function() {
            }), this._reactComponent.setState({
                isVisible : true
            }, function(elems) {
                return function() {
                    return fn.call(elems);
                };
            }(this)), this;
        }, initialize.prototype.destroy = function() {
            return ReactDOM.unmountComponentAtNode(this._container);
        }, initialize.prototype.getContainer = function() {
            return this._container;
        }, initialize;
    }();
    testEnvironment.eventsMixin.call(Editor.prototype);
    exports.poll = widget;
    exports.Poll = Editor;
}), define("framework/poll/Poll/component", ["exports", "framework/translations", "framework/statistics", "framework/LocalStorageQueue"], function(eventHandle, self, opt_user, dataAndEvents) {
    var elem;
    var contains;
    var queue;
    queue = new dataAndEvents.LocalStorageQueue("Polls.sent");
    /**
     * @param {?} value
     * @return {?}
     */
    contains = function(value) {
        return queue.getQueue().some(function(radio) {
            if (value === radio) {
                return true;
            }
        });
    };
    elem = React.createClass({
        /**
         * @return {?}
         */
        getInitialState : function() {
            return{
                isVisible : false,
                isLoading : true,
                isVotesLoading : false,
                isVoteable : true,
                successMessage : "",
                errorMessage : "",
                payload : {
                    title : "",
                    question : "",
                    votes : null,
                    total_count : 0
                }
            };
        },
        /**
         * @return {?}
         */
        render : function() {
            return require("framework/poll/Poll/template").default.apply(this);
        },
        /**
         * @param {Object} target
         * @param {Object} d
         * @return {?}
         */
        componentWillUpdate : function(target, d) {
            return d.isVoteable = d.payload.active && !contains(d.payload.id);
        },
        /**
         * @param {Event} event
         * @return {?}
         */
        vote : function(event) {
            var $document;
            var jData;
            var type;
            var url;
            var port;
            return port = $(event.target).data("poll-vote-id"), this.setState({
                isVotesLoading : true
            }), url = "" + this.props.config.apiUrl, this.state.isRates ? (url += "/elements/" + port + "/votes", type = "POST", jData = {
                vote : null
            }, $document = $(ReactDOM.findDOMNode(this)), opt_user.statistics.trackGtmEvent("rating_value", {
                question : $document.find(".question").text(),
                answer : $(event.target).text()
            })) : (url += "/polls/" + this.state.payload.legacy_id + "/votes/" + port, type = "PUT"), $.ajax({
                url : url,
                type : type,
                contentType : "application/json",
                data : JSON.stringify(jData),
                success : function(_this) {
                    return function(m1) {
                        if (queue.add(_this.state.payload.id), _this.setState({
                                isLoading : false,
                                isVotesLoading : false,
                                successMessage : m1.message,
                                errorMessage : ""
                            }), _this.props.eventHandler) {
                            return _this.props.eventHandler.trigger("afterVote", [_this.state.payload.id, port]);
                        }
                    };
                }(this),
                error : function(dataAndEvents) {
                    return function() {
                        return dataAndEvents.setState({
                            isLoading : false,
                            isVotesLoading : true,
                            successMessage : "",
                            errorMessage : self.translations.translate("Verbindung fehlgeschlagen, bitte versuchen Sie es sp\u00e4ter erneut.")
                        });
                    };
                }(this)
            });
        },
        /**
         * @param {?} dataAndEvents
         * @return {?}
         */
        calculatePercent : function(dataAndEvents) {
            var startAt;
            return startAt = dataAndEvents / this.state.payload.total_count * 100, this.state.payload.total_count - dataAndEvents > dataAndEvents ? Math.floor(startAt) : Math.ceil(startAt);
        }
    });
    eventHandle.Poll = elem;
}), define("framework/poll/Poll/template", ["exports", "framework/loader/loader"], function(join, obj) {
    /**
     * @param {Object} node
     * @param {?} var_args
     * @return {?}
     */
    function create(node, var_args) {
        return React.createElement("a", {
            key : node.id,
            "data-poll-vote-id" : node.id,
            href : "javascript: void(0);",
            onClick : this.vote
        }, node.description);
    }
    /**
     * @param {Object} doc
     * @param {?} range
     * @return {?}
     */
    function fn(doc, range) {
        return React.createElement("div", {
            key : doc.id
        }, React.createElement("p", {
            className : "answer"
        }, doc.description), React.createElement("div", {
            className : "bars"
        }, React.createElement("div", {
            className : "bar",
            style : {
                width : this.calculatePercent(doc.count) + "%"
            }
        })), React.createElement("div", {
            className : "percents"
        }, React.createElement("span", {}, this.calculatePercent(doc.count), "%")), React.createElement("div", {
            className : "clear"
        }));
    }
    /**
     * @return {?}
     */
    join.default = function() {
        return this.state.isVisible ? React.createElement("div", {
            className : "NnPollBox"
        }, this.state.isLoading ? React.createElement("div", {
            dangerouslySetInnerHTML : {
                __html : obj.default({
                    visible : true
                })
            }
        }) : null, this.state.isLoading ? null : React.createElement("div", {}, React.createElement("h3", {}, this.state.payload.title), React.createElement("p", {
            className : "question"
        }, this.state.payload.question), this.state.successMessage ? React.createElement("div", {
            className : "successMessage"
        }, this.state.successMessage) : null, this.state.errorMessage ? React.createElement("div", {
            className : "errorMessage"
        }, this.state.errorMessage) : null, this.state.isVoteable ? React.createElement.apply(this, ["div", {
            className : "poll"
        }, this.state.isVotesLoading ? React.createElement("div", {
            dangerouslySetInnerHTML : {
                __html : obj.default({
                    visible : true
                })
            }
        }) : null, this.state.isVotesLoading ? null : _.map(this.state.payload.votes, create.bind(this))]) : null, this.state.isVoteable ? null : React.createElement.apply(this, ["div", {
            className : "votes"
        }, _.map(this.state.payload.votes, fn.bind(this)), React.createElement("div", {
            className : "clear"
        })]))) : null;
    };
}), define("framework/recommender/recommender", ["exports", "framework/jquery", "framework/store"], function(exports, dataAndEvents, i18n) {
    var self;
    var app;
    self = {};
    self.config = {};
    app = {
        /**
         * @param {?} opt_attributes
         * @return {?}
         */
        configure : function(opt_attributes) {
            return $.extend(self.config, opt_attributes), i18n.store.configure({
                apiUrl : self.config.apiUrl
            });
        },
        /**
         * @param {Object} obj
         * @param {(Error|string)} attributes
         * @return {?}
         */
        insert : function(obj, attributes) {
            return attributes = $.extend({}, attributes), ReactDOM.render(React.createElement(require("framework/recommender/Recommender/component").Recommender, {
                env : self.config.env,
                customer : self.config.currentCustomer,
                lastVisitedTS : attributes.lastVisitedTS,
                renderSocialMedia : attributes.renderSocialMedia,
                onArticleClick : attributes.onArticleClick,
                onNoRecommendationsFound : attributes.ifNoRecommendationsFound
            }), obj);
        }
    };
    exports.recommender = app;
}), define("framework/recommender/Recommender/component", ["exports", "framework/string", "framework/store", "framework/utils"], function(eventHandle, dataAndEvents, deepDataAndEvents, ignoreMethodDoesntExist) {
    var elem;
    elem = React.createClass({
        /**
         * @return {?}
         */
        getInitialState : function() {
            return{
                articles : []
            };
        },
        /**
         * @param {string} method
         * @param {(Error|string)} options
         * @return {?}
         */
        request : function(method, options) {
            var attributes;
            return attributes = {
                platform : this.props.env
            }, $.extend(attributes, options), new RSVP.Promise(function(dataAndEvents) {
                return function(next, done) {
                    return $.ajax({
                        url : "https://rec.tda." + dataAndEvents.props.customer + ".ch/v1/" + method,
                        type : "POST",
                        contentType : "application/json",
                        dataType : "json",
                        data : JSON.stringify(attributes),
                        withCredentials : true,
                        /**
                         * @param {string} name
                         * @return {?}
                         */
                        success : function(name) {
                            return next(name);
                        },
                        /**
                         * @return {?}
                         */
                        error : function() {
                            return done();
                        }
                    });
                };
            }(this));
        },
        /**
         * @return {?}
         */
        componentDidMount : function() {
            var options;
            return options = {
                last_visit : parseInt(this.props.lastVisitedTS),
                target : this.props.customer
            }, this.request("recommendations", options).then(function(right) {
                return function(model) {
                    return model && 0 !== model.recommendations.length ? right.setState({
                        articles : model.recommendations
                    }) : void right.props.onNoRecommendationsFound();
                };
            }(this), function(dataAndEvents) {
                return function(deepDataAndEvents) {
                    return dataAndEvents.props.onNoRecommendationsFound();
                };
            }(this));
        },
        /**
         * @return {?}
         */
        render : function() {
            return require("framework/recommender/Recommender/template").default.apply(this);
        }
    });
    eventHandle.Recommender = elem;
}), define("framework/recommender/Recommender/template", ["exports", "framework/recommender/RecommenderArticle/component"], function(obj, item) {
    /**
     * @param {?} total
     * @param {string} index
     * @return {?}
     */
    function done(total, index) {
        return React.createElement(item.RecommenderArticle, {
            article : total,
            renderSocialMedia : this.props.renderSocialMedia,
            onClick : this.props.onArticleClick,
            onTrackingClick : this.request,
            key : index,
            index : index,
            className : "recommendedArticle"
        });
    }
    /**
     * @return {?}
     */
    obj.default = function() {
        return React.createElement("div", {
            className : "NnRecommender"
        }, React.createElement.apply(this, ["ul", {}, _.map(this.state.articles, done.bind(this))]));
    };
}), define("framework/recommender/RecommenderArticle/component", ["exports", "framework/store", "framework/utils"], function(eventHandle, c, gma) {
    var elem;
    elem = React.createClass({
        /**
         * @return {?}
         */
        getInitialState : function() {
            return{
                title : "",
                isLoading : true
            };
        },
        /**
         * @param {?} event
         * @return {?}
         */
        trackClick : function(event) {
            return this.props.onTrackingClick("event", {
                type : "recommender_click",
                tracking_data : this.props.article.tracking_data
            });
        },
        /**
         * @return {?}
         */
        componentDidMount : function() {
            var $document;
            return $document = $(ReactDOM.findDOMNode(this)), c.store.load("articles", {
                id : this.props.article.article_id
            }).then(function(model) {
                return function(evt) {
                    var suite;
                    return model.setState({
                        isLoading : false,
                        title : evt.payload.title,
                        link : "/articles/" + evt.payload.id,
                        category : null != (suite = evt.payload.main_category_for_site) ? suite.title : void 0,
                        timestamp : evt.payload.timestamp_updated_at,
                        isPremium : "premium" === evt.payload.external_services.doc_type || false
                    }, function() {
                        return gma.utils.calculateAndInsertTime($document.find("time[data-timestamp]"), true), gma.utils.getArticlesReadQueue().contains(evt.payload.id) && $document.find(">a").addClass("read"), this.props.renderSocialMedia && this.props.renderSocialMedia($document.find(".socialMedia"), evt.payload), $document.find(">a").on("click", function(self) {
                            return function(mapper) {
                                if (self.trackClick(), self.props.onClick) {
                                    return self.props.onClick.call(self, mapper, self.props.index);
                                }
                            };
                        }(this));
                    });
                };
            }(this));
        },
        /**
         * @return {?}
         */
        render : function() {
            return require("framework/recommender/RecommenderArticle/template").default.apply(this);
        }
    });
    eventHandle.RecommenderArticle = elem;
}), define("framework/recommender/RecommenderArticle/template", ["exports", "framework/translations"], function(obj, self) {
    /**
     * @return {?}
     */
    function update() {
        this.props.article;
        return React.createElement("li", {}, this.state.isLoading ? React.createElement("div", {}, React.createElement("div", {
            className : "loadingBar big"
        }), React.createElement("span", {
            className : "loadingBar small"
        }), React.createElement("span", {
            className : "loadingBar small"
        }), React.createElement("span", {
            className : "loadingBar small"
        })) : null, this.state.isLoading ? null : React.createElement("a", {
            href : this.state.link,
            "data-islinkto" : "true"
        }, React.createElement("h5", {}, this.state.title), this.state.isPremium ? React.createElement("span", {
            className : "premium"
        }, "ABO+ ") : null, React.createElement("span", {}, this.state.category, " ", self.translations.translate("Vor"), " ", React.createElement("time", {
            "data-timestamp" : this.state.timestamp
        }), React.createElement("span", {
            className : "socialMedia"
        }))));
    }
    /**
     * @return {?}
     */
    obj.default = function() {
        return update.apply(this, []);
    };
}), define("framework/router", ["exports", "framework/store", "framework/viewManager", "framework/browser", "framework/translations", "framework/config"], function(App, args, api, row, self, app) {
    var g;
    var module;
    var attributes;
    var router;
    var state;
    module = {};
    /** @type {null} */
    module.config = null;
    state = {};
    /** @type {boolean} */
    g = true;
    attributes = {
        routeName : null,
        id : null
    };
    router = {
        trackingInfo : {},
        /**
         * @param {string} opt_attributes
         * @return {?}
         */
        configure : function(opt_attributes) {
            return module.config = opt_attributes;
        },
        /**
         * @param {string} key
         * @param {Function} value
         * @return {?}
         */
        register : function(key, value) {
            return value.name = key, state[key] = value, state[key].router = this, state[key].store = args.store, state[key].applicationRoute = state.application;
        },
        /**
         * @return {?}
         */
        back : function() {
            return 1 === history.length ? this.transitionTo("/") : history.back();
        },
        /**
         * @return {?}
         */
        init : function() {
            if (module.config.initialTransition) {
                return this.transitionTo(row.browser.getPathname());
            }
        },
        /**
         * @param {Object} opt_attributes
         * @return {?}
         */
        setTrackingInfo : function(opt_attributes) {
            return this.trackingInfo = opt_attributes;
        },
        /**
         * @return {?}
         */
        getTrackingInfo : function() {
            return this.trackingInfo;
        },
        /**
         * @param {string} name
         * @return {?}
         */
        getRouteInfo : function(name) {
            var path;
            var id;
            var item;
            var match;
            return "/" === name && (name = module.config.defaultPathname), name = name.substr(1), name = name.split("#")[0], match = name.split("/"), item = {
                path : null != (path = match[2]) ? path : match[0],
                id : null != (id = match[3]) ? id : match[1]
            }, match[2] && (item.parentPath = match[0], item.parentId = match[1]), item;
        },
        /**
         * @param {string} name
         * @param {boolean} index
         * @return {?}
         */
        transitionTo : function(name, index) {
            var cursor;
            var getter;
            var handler;
            var callback;
            var done;
            var render;
            var item;
            var self;
            var options;
            var path;
            return null == index && (index = true), item = this.getRouteInfo(name), options = {
                from : $.extend(attributes),
                to : {
                    routeName : item.path.singularize(),
                    id : item.id,
                    pathname : name
                }
            }, item.parentPath && (options.to.parentRouteName = item.parentPath.singularize()), item.parentId && (options.to.parentId = item.parentId), handler = state[options.from.routeName], self = state[options.to.routeName], self || (options.to.subRouteId = options.to.id, options.to.subRouteName = options.to.routeName, options.to.routeName = options.to.parentRouteName, options.to.id = options.to.parentId, self = state[options.to.routeName]), path = self.urlPattern, options.to.id && (path = path.replace("[id]",
                options.to.id)), options.to.subRouteId && (path = path.replace("[index]", options.to.subRouteId)), cursor = !(null != self.currentRenderedId && self.currentRenderedId === options.to.id), self.currentRenderedId = options.to.id, done = function() {
                if (cursor) {
                    return null != self.renderTemplate ? self.renderTemplate(options) : api.viewManager.renderTemplate(options.to.routeName, {
                        config : app.config
                    });
                }
            }, callback = function() {
                var optgroup;
                return optgroup = [], null != self.loadData ? optgroup = optgroup.concat($.makeArray(self.loadData(options))) : optgroup.push(args.store.load(options.to.routeName.pluralize(), {
                    id : options.to.id
                })), null != state.application.loadData && (optgroup = optgroup.concat($.makeArray(state.application.loadData(options)))), RSVP.all(optgroup);
            }, render = function(data, model, node) {
                return null != state.application.rerenderTemplate && state.application.rerenderTemplate(options, data), model ? (model.node(node, function(err, xy) {
                    return self.streamNode(err, xy[xy.length - 1], options, data);
                }), null != state.application.afterStream && (model.isDone ? state.application.afterStream.call(model, options) : model.done(state.application.afterStream.bind(this, options))), null != self.afterStream ? model.isDone ? self.afterStream.call(model, options) : model.done(self.afterStream.bind(this, options)) : void 0) : null != self.rerenderTemplate ? self.rerenderTemplate(options, data) : api.viewManager.renderTemplate(options.to.routeName, data);
            }, getter = function(dataAndEvents) {
                return function(result) {
                    var e;
                    if (e = null != self.getTitle ? document.title = self.getTitle(options) : document.title = result.title + " - " + args.store.get("sites", "default").title, null != state.application.enter && state.application.enter(options, result, cursor, index), null != self.enter && self.enter(options, result, cursor, index), g) {
                        return $(window).on("popstate hashchange", function() {
                            return row.browser.isWP() || history.replaceState && history.replaceState(null, null, row.browser.getPathname()), dataAndEvents.transitionTo(row.browser.getPathname(), false);
                        }), g = false;
                    }
                };
            }(this), new RSVP.Promise(function(dataAndEvents) {
                return function(next) {
                    var $e;
                    return options.from.routeName === options.to.routeName && options.from.id === options.to.id ? next(options) : (index && (history.pushState && (g || history.pushState(null, null, path))), null != (null != self ? self.beforeTransition : void 0) && self.beforeTransition(options), null != state.application.beforeTransition && state.application.beforeTransition(options), null != (null != handler ? handler.exit : void 0) && handler.exit(options), null != state.application.exit && state.application.exit(options),
                    cursor && (null != state.application.beforeRender && state.application.beforeRender(options), null != self.beforeRender && self.beforeRender(options), done()), $e = $("#" + options.to.routeName + " .fullscreenLoader"), cursor && (!app.config.isNativeApp && $e.show()), api.viewManager.show(options.to.routeName, options.from.routeName, self.animationDirection).then(function() {
                        var finish;
                        var requestRetries;
                        var init;
                        return init = function(events) {
                            var ast;
                            var data;
                            var optgroup;
                            var model;
                            return optgroup = [], data = events[0].payload, model = events[0].stream, ast = events[0].node, cursor && (null != state.application.beforeRerender && state.application.beforeRerender(options, data), null != self.beforeRerender && self.beforeRerender(options, data), render(data, model, ast), null != state.application.afterRerender && (optgroup = optgroup.concat($.makeArray(state.application.afterRerender(options, data)))), null != self.afterRerender && (optgroup = optgroup.concat($.makeArray(self.afterRerender(options,
                                data)))), model || (null == state.application.afterStream || state.application.afterStream(options)), model || (null == self.afterStream || self.afterStream(options))), getter(data), $e.find("span").empty(), $e.hide(), RSVP.all(optgroup).then(function() {
                                return next(options);
                            });
                        }, finish = function(er) {
                            return requestRetries ? (requestRetries <= module.config.requestRetries - 2 && $e.find("span").text(self.translations.translate("Verbindung fehlgeschlagen, erneuter Versuch...")), requestRetries--, setTimeout(function() {
                                return callback().then(init, finish);
                            }, module.config.timeoutBetweenRetries)) : ($e.find(">div>div").hide(), $e.find("span").text(self.translations.translate("Verbindung fehlgeschlagen, bitte versuchen Sie es sp\u00e4ter erneut."))), console.log(er.stack);
                        }, requestRetries = module.config.requestRetries, callback().then(init, finish);
                    }), attributes.routeName = options.to.routeName, attributes.id = options.to.id, attributes.subRouteName = options.to.subRouteName, attributes.subRouteId = options.to.subRouteId, options.to.parentRouteName && (attributes.parentRouteName = options.to.parentRouteName), options.to.parentId ? attributes.parentId = options.to.parentId : void 0);
                };
            }(this));
        }
    };
    App.router = router;
}), define("framework/scoreboard/scoreboard", ["exports"], function(eventHandle) {
    var elem;
    elem = function() {
        /**
         * @param {?} param
         * @param {?} options
         * @return {undefined}
         */
        function initialize(param, options) {
            this._config = $.extend({
                templateName : "template",
                /**
                 * @return {?}
                 */
                getRenderMode : function() {
                    return $(window).width() < 800 || $(window).height() < 600 ? "mobile" : "desktop";
                }
            }, options);
            this._id = this._config.id;
            this._container = (this._$container = $(param))[0];
            $(window).on("resize." + this._id + " orientationchange." + this._id, function(dataAndEvents) {
                return function(deepDataAndEvents) {
                    return dataAndEvents._onResize();
                };
            }(this));
            this._reactComponent = ReactDOM.render(React.createElement(require("framework/scoreboard/Scoreboard/component").Scoreboard, {
                config : this._config
            }), this._container);
            this._$scoreboard = $(ReactDOM.findDOMNode(this._reactComponent));
            this._onResize();
            this._requestData();
        }
        return initialize.prototype.update = function() {
            return this._requestData();
        }, initialize.prototype.destroy = function() {
            return $(window).off("resize." + this._id + " orientationchange." + this._id), ReactDOM.unmountComponentAtNode(this._container);
        }, initialize.prototype._onResize = function() {
            return "mobile" === this._config.getRenderMode() ? this._$scoreboard.removeClass("desktop").addClass("mobile") : this._$scoreboard.removeClass("mobile").addClass("desktop");
        }, initialize.prototype._requestData = function(callback) {
            if (!this._isRequestingData) {
                return this._isRequestingData, $.ajax({
                    url : this._config.baseUrl + "/scoreboards/" + this._id,
                    complete : function(dataAndEvents) {
                        return function() {
                            return dataAndEvents._isRequestingData;
                        };
                    }(this),
                    success : function(dataAndEvents) {
                        return function(element) {
                            if (dataAndEvents._reactComponent && (dataAndEvents._reactComponent.setState($.extend(element.scoreboard, {
                                    isLoading : false
                                })), null != callback)) {
                                return callback();
                            }
                        };
                    }(this)
                });
            }
        }, initialize;
    }();
    eventHandle.Scoreboard = elem;
}), define("framework/scoreboard/Scoreboard/20min-template", ["exports", "framework/translations", "framework/loader/loader"], function(obj, self, join) {
    /**
     * @param {?} signal_eof
     * @param {?} event
     * @param {Element} _this
     * @param {?} doPost
     * @return {?}
     */
    function next(signal_eof, event, _this, doPost) {
        return React.createElement("span", {
            key : _this.id
        }, void 0 !== _this.score_left && void 0 !== _this.score_right ? React.createElement("span", {}, _this.score_left, ":", _this.score_right) : null);
    }
    /**
     * @param {Object} options
     * @return {?}
     */
    function init(options) {
        var data = options.tennis_result;
        return React.createElement("div", {
            className : "tennis"
        }, React.createElement("div", {
            className : "overview"
        }, React.createElement("div", {
            className : "score min20"
        }, React.createElement.apply(this, ["span", {
            className : "numbers"
        }, _.map(data.sets, next.bind(this, options, data))]), React.createElement("div", {
            className : "serve"
        }, React.createElement("div", {
            className : this.isLeftPlayersTurn() ? "active" : ""
        }), React.createElement("div", {
            className : this.isRightPlayersTurn() ? "active" : ""
        }))), React.createElement("div", {
            className : "name home"
        }, data.player_left), React.createElement("div", {
            className : "name guest"
        }, data.player_right), data.icon_home ? React.createElement("img", {
            className : "avatar",
            src : data.icon_home
        }) : null, data.icon_visitor ? React.createElement("img", {
            className : "avatar",
            src : data.icon_visitor
        }) : null));
    }
    /**
     * @param {Event} _
     * @param {?} __
     * @param {Object} o
     * @param {?} success
     * @return {?}
     */
    function callback(_, __, o, success) {
        return React.createElement("span", {
            key : o.id
        }, "soccer" == _.type ? React.createElement("span", {
            className : "sprite-scoreboard-goal"
        }) : null, "hockey" == _.type ? React.createElement("span", {
            className : "sprite-scoreboard-hockeyGoal"
        }) : null, "\n                    ", o.minute, ". ", o.event, "\n                    ", React.createElement("br", {}));
    }
    /**
     * @param {Event} properties
     * @param {?} var_args
     * @param {Object} o
     * @param {?} minutes
     * @return {?}
     */
    function create(properties, var_args, o, minutes) {
        return React.createElement("span", {
            key : o.id
        }, "soccer" == properties.type ? React.createElement("span", {
            className : "sprite-scoreboard-goal"
        }) : null, "hockey" == properties.type ? React.createElement("span", {
            className : "sprite-scoreboard-hockeyGoal"
        }) : null, "\n                    ", o.minute, ". ", o.event, "\n                    ", React.createElement("br", {}));
    }
    /**
     * @param {?} stats
     * @param {?} stdout
     * @param {Element} res
     * @param {?} cbError
     * @return {?}
     */
    function cb(stats, stdout, res, cbError) {
        return React.createElement("tr", {
            key : res.id
        }, React.createElement("td", {}, res.name_home), React.createElement("td", {}, "-"), React.createElement("td", {}, res.name_visitor), React.createElement("td", {}, res.score_home, ":", res.score_visitor));
    }
    /**
     * @param {Object} n
     * @return {?}
     */
    function update(n) {
        var el = n.teamsport_result;
        return React.createElement("div", {
            className : "teamsport"
        }, React.createElement("table", {}, React.createElement("tbody", {}, React.createElement("tr", {}, React.createElement("td", {}, el.icon_home ? React.createElement("img", {
            src : el.icon_home
        }) : null, React.createElement("br", {}), React.createElement("span", {}, el.name_home)), React.createElement("td", {}, el.score_home, " : ", el.score_visitor), React.createElement("td", {}, el.icon_visitor ? React.createElement("img", {
            src : el.icon_visitor
        }) : null, React.createElement("br", {}), React.createElement("span", {}, el.name_visitor))))), React.createElement("div", {
            className : "events"
        }, React.createElement.apply(this, ["div", {
            className : "eventsHome"
        }, _.map(el.events_home, callback.bind(this, n, el))]), React.createElement.apply(this, ["div", {
            className : "eventsVisitor"
        }, _.map(el.events_visitor, create.bind(this, n, el))]), React.createElement("div", {
            className : "clear"
        })), this.hasAdditionalResults() ? React.createElement("div", {
            className : "additionalResults"
        }, React.createElement("span", {}, self.translations.translate("Die anderen Spiele")), React.createElement("table", {}, React.createElement.apply(this, ["tbody", {}, _.map(n.additional_results, cb.bind(this, n, el))]))) : null);
    }
    /**
     * @return {?}
     */
    function ready() {
        var obj = this.state;
        return React.createElement("div", {
            className : "NnScoreboard " + obj.type
        }, obj.isLoading ? React.createElement("div", {
            dangerouslySetInnerHTML : {
                __html : join.default({
                    visible : true
                })
            }
        }) : null, this.isTennisResult() ? init.apply(this, [obj]) : null, this.isTeamsportResult() ? update.apply(this, [obj]) : null);
    }
    /**
     * @return {?}
     */
    obj.default = function() {
        return ready.apply(this, []);
    };
}), define("framework/scoreboard/Scoreboard/component", ["exports"], function(eventHandle) {
    var elem;
    elem = React.createClass({
        /**
         * @return {?}
         */
        getInitialState : function() {
            return{
                isLoading : true
            };
        },
        /**
         * @param {Object} target
         * @param {Object} locale
         * @return {?}
         */
        componentWillUpdate : function(target, locale) {
            var eventPath;
            var configList;
            if ("tennis" === locale.type) {
                configList = locale.tennis_result.sets;
                /** @type {Array} */
                eventPath = [];
                for (;configList.length < locale.tennis_result.number_of_sets;) {
                    eventPath.push(configList.push({
                        set_number : configList.length + 1
                    }));
                }
                return eventPath;
            }
        },
        /**
         * @return {?}
         */
        render : function() {
            return require("framework/scoreboard/Scoreboard/" + this.props.config.templateName).default.apply(this);
        },
        /**
         * @return {?}
         */
        isTennisResult : function() {
            return "tennis" === this.state.type;
        },
        /**
         * @return {?}
         */
        isTeamsportResult : function() {
            return this.state.type && "tennis" !== this.state.type;
        },
        /**
         * @return {?}
         */
        hasAdditionalResults : function() {
            return this.state.additional_results && this.state.additional_results.length;
        },
        /**
         * @return {?}
         */
        isLeftPlayersTurn : function() {
            return "player_left" === this.state.tennis_result.initial_server && !this.state.tennis_result.winner;
        },
        /**
         * @return {?}
         */
        isRightPlayersTurn : function() {
            return "player_right" === this.state.tennis_result.initial_server && !this.state.tennis_result.winner;
        },
        /**
         * @param {Element} dataAndEvents
         * @return {?}
         */
        hasLeftPlayerWon : function(dataAndEvents) {
            return "player_left" === dataAndEvents.winner;
        },
        /**
         * @param {Element} dataAndEvents
         * @return {?}
         */
        hasRightPlayerWon : function(dataAndEvents) {
            return "player_right" === dataAndEvents.winner;
        }
    });
    eventHandle.Scoreboard = elem;
}), define("framework/scoreboard/Scoreboard/template", ["exports", "framework/translations", "framework/loader/loader"], function(obj, self, join) {
    /**
     * @param {?} resource_id
     * @param {?} value
     * @param {Element} data
     * @param {?} embedded
     * @return {?}
     */
    function Resource(resource_id, value, data, embedded) {
        return React.createElement("td", {
            key : data.id
        }, data.set_number, ". S");
    }
    /**
     * @param {?} onComplete
     * @param {?} position
     * @param {Element} node
     * @param {?} er
     * @return {?}
     */
    function finish(onComplete, position, node, er) {
        return React.createElement("td", {
            key : node.id,
            className : this.hasLeftPlayerWon(node) ? "winner" : ""
        }, node.score_left);
    }
    /**
     * @param {?} statement
     * @param {?} wrapper
     * @param {Element} node
     * @param {?} newContent
     * @return {?}
     */
    function wrap(statement, wrapper, node, newContent) {
        return React.createElement("td", {
            key : node.id,
            className : this.hasRightPlayerWon(node) ? "winner" : ""
        }, node.score_right);
    }
    /**
     * @param {Object} options
     * @return {?}
     */
    function init(options) {
        var model = options.tennis_result;
        return React.createElement("div", {
            className : "tennis"
        }, React.createElement("table", {}, React.createElement("thead", {}, React.createElement.apply(this, ["tr", {}, React.createElement("td", {}), _.map(model.sets, Resource.bind(this, options, model))])), React.createElement("tbody", {}, React.createElement.apply(this, ["tr", {}, React.createElement("td", {}, "\n                        ", model.player_left, "\n\n                        ", this.isLeftPlayersTurn() ? React.createElement("span", {
            className : "sprite-scoreboard-tennisRacket"
        }) : null), _.map(model.sets, finish.bind(this, options, model))]), React.createElement.apply(this, ["tr", {}, React.createElement("td", {}, "\n                        ", model.player_right, "\n\n                        ", this.isRightPlayersTurn() ? React.createElement("span", {
            className : "sprite-scoreboard-tennisRacket"
        }) : null), _.map(model.sets, wrap.bind(this, options, model))]))));
    }
    /**
     * @param {Event} _
     * @param {?} __
     * @param {Object} o
     * @param {?} success
     * @return {?}
     */
    function callback(_, __, o, success) {
        return React.createElement("span", {
            key : o.id
        }, "soccer" == _.type ? React.createElement("span", {
            className : "sprite-scoreboard-goal"
        }) : null, "hockey" == _.type ? React.createElement("span", {
            className : "sprite-scoreboard-hockeyGoal"
        }) : null, "\n                    ", o.minute, ". ", o.event, "\n                    ", React.createElement("br", {}));
    }
    /**
     * @param {Event} properties
     * @param {?} var_args
     * @param {Object} o
     * @param {?} minutes
     * @return {?}
     */
    function create(properties, var_args, o, minutes) {
        return React.createElement("span", {
            key : o.id
        }, "soccer" == properties.type ? React.createElement("span", {
            className : "sprite-scoreboard-goal"
        }) : null, "hockey" == properties.type ? React.createElement("span", {
            className : "sprite-scoreboard-hockeyGoal"
        }) : null, "\n                    ", o.minute, ". ", o.event, "\n                    ", React.createElement("br", {}));
    }
    /**
     * @param {?} stats
     * @param {?} stdout
     * @param {Element} res
     * @param {?} cbError
     * @return {?}
     */
    function cb(stats, stdout, res, cbError) {
        return React.createElement("tr", {
            key : res.id
        }, React.createElement("td", {}, res.name_home), React.createElement("td", {}, "-"), React.createElement("td", {}, res.name_visitor), React.createElement("td", {}, res.score_home, ":", res.score_visitor));
    }
    /**
     * @param {Object} n
     * @return {?}
     */
    function update(n) {
        var el = n.teamsport_result;
        return React.createElement("div", {
            className : "teamsport"
        }, React.createElement("table", {}, React.createElement("tbody", {}, React.createElement("tr", {}, React.createElement("td", {}, el.icon_home ? React.createElement("img", {
            src : el.icon_home
        }) : null, React.createElement("br", {}), React.createElement("span", {}, el.name_home)), React.createElement("td", {}, el.score_home, " : ", el.score_visitor), React.createElement("td", {}, el.icon_visitor ? React.createElement("img", {
            src : el.icon_visitor
        }) : null, React.createElement("br", {}), React.createElement("span", {}, el.name_visitor))))), React.createElement("div", {
            className : "events"
        }, React.createElement.apply(this, ["div", {
            className : "eventsHome"
        }, _.map(el.events_home, callback.bind(this, n, el))]), React.createElement.apply(this, ["div", {
            className : "eventsVisitor"
        }, _.map(el.events_visitor, create.bind(this, n, el))]), React.createElement("div", {
            className : "clear"
        })), this.hasAdditionalResults() ? React.createElement("div", {
            className : "additionalResults"
        }, React.createElement("span", {}, self.translations.translate("Die anderen Spiele")), React.createElement("table", {}, React.createElement.apply(this, ["tbody", {}, _.map(n.additional_results, cb.bind(this, n, el))]))) : null);
    }
    /**
     * @return {?}
     */
    function ready() {
        var obj = this.state;
        return React.createElement("div", {
            className : "NnScoreboard " + obj.type
        }, obj.isLoading ? React.createElement("div", {
            dangerouslySetInnerHTML : {
                __html : join.default({
                    visible : true
                })
            }
        }) : null, this.isTennisResult() ? init.apply(this, [obj]) : null, this.isTeamsportResult() ? update.apply(this, [obj]) : null);
    }
    /**
     * @return {?}
     */
    obj.default = function() {
        return ready.apply(this, []);
    };
}), define("framework/slideshow/slideshow", ["exports", "framework/jquery", "framework/string", "framework/browser", "framework/handlebars/module", "framework/translations", "framework/ads/ads"], function(eventHandle, dataAndEvents, deepDataAndEvents, b, $window, self, $scope) {
    var elem;
    var TransitionEvent;
    var getNext;
    var expect;
    /**
     * @param {Function} matcherFunction
     * @param {?} object
     * @return {?}
     */
    var interpolate = function(matcherFunction, object) {
        return function() {
            return matcherFunction.apply(object, arguments);
        };
    };
    $window.handlebars.init();
    /**
     * @param {number} recurring
     * @return {?}
     */
    expect = function(recurring) {
        return recurring / 0.5 % 2 === 1;
    };
    /**
     * @param {number} current
     * @param {number} count
     * @param {number} add
     * @return {?}
     */
    getNext = function(current, count, add) {
        return null == add && (add = 0), current > count ? current = getNext(add + (current - (count + 1)), count, add) : current < add && (current = getNext(count + 1 + current, count, add)), current;
    };
    elem = function() {
        /**
         * @param {?} element
         * @param {string} p
         * @param {number} options
         * @return {undefined}
         */
        function init(element, p, options) {
            this._onTapEventHandler = interpolate(this._onTapEventHandler, this);
            $.extend(this, {
                _id : null,
                _$ : null,
                _$container : null,
                _$swiperContainer : null,
                _currentIndex : 0,
                _lastProcessedImageIndex : null,
                _images : [],
                _isSliding : false,
                _isSwiperCreated : false,
                _options : {
                    template : require("framework/slideshow/templates/slideshow").default,
                    pictureCaptionTemplate : require("framework/slideshow/templates/pictureCaption").default,
                    linksTemplate : require("framework/slideshow/templates/links").default,
                    pagingTemplate : require("framework/slideshow/templates/paging").default,
                    paginationTemplate : require("framework/slideshow/templates/pagination").default,
                    pagination : false,
                    state : "inline",
                    ads : false,
                    adInterval : 4,
                    prerenderedSlides : 4,
                    fullscreenOnly : false,
                    enableFullscreen : true,
                    fullyResponsive : false,
                    enableZoom : true,
                    enableKeyBindings : true,
                    /**
                     * @return {?}
                     */
                    getTitle : function() {
                        return "";
                    },
                    /**
                     * @return {?}
                     */
                    getSubtitle : function() {
                        return "";
                    },
                    /**
                     * @param {Object} photo
                     * @param {?} extent
                     * @return {?}
                     */
                    getImageUrl : function(photo, extent) {
                        return photo.url;
                    },
                    /**
                     * @param {?} deepDataAndEvents
                     * @param {number} dataAndEvents
                     * @param {Array} e
                     * @return {?}
                     */
                    getImagePaging : function(deepDataAndEvents, dataAndEvents, e) {
                        return e.isAdPage ? self.translations.translate("Werbung") : e.template ? e.template({
                            currentImage : dataAndEvents + 1,
                            totalImages : this.getImageCount()
                        }) : "";
                    },
                    /**
                     * @param {Object} obj
                     * @param {?} el
                     * @return {?}
                     */
                    getImageCaption : function(obj, el) {
                        return obj.caption;
                    },
                    /**
                     * @return {?}
                     */
                    getLinks : function() {
                        return "";
                    },
                    /**
                     * @return {?}
                     */
                    getAdUrl : function() {
                        return "";
                    },
                    /**
                     * @return {?}
                     */
                    getRenderMode : function() {
                        return $(window).width() < 768 || $(window).height() < 600 ? "mobile" : "desktop";
                    },
                    backButtonClickCallback : null
                }
            });
            $.extend(this._options, null != options ? options : {});
            /** @type {string} */
            this._id = (new Date).getTime() + "NnSlideshow";
            this._$container = $(element).empty().append(this._options.template()).find(".NnSlideshowContainer").addClass("imagesLoading");
            this._$ = this._$container.find(".NnSlideshow");
            this._$swiperContainer = this._$.find(".swiper-container");
            this._$container.addClass(b.browser.isTouchScreen() ? "touch" : "noTouch");
            this._$container.addClass(this._options.enableFullscreen ? "fullscreenEnabled" : "fullscreenDisabled");
            this._$container.addClass(this._options.pagination ? "paginationEnabled" : "paginationDisabled");
            this._bindEventListeners();
            if (p instanceof RSVP.Promise || "lib$rsvp$promise$$Promise" === p.constructor.name) {
                p.then(function(dataAndEvents) {
                    return function(methods) {
                        return dataAndEvents._initImages(methods), dataAndEvents._createSwiper();
                    };
                }(this));
            } else {
                this._initImages(p);
                this._createSwiper();
            }
        }
        return init.prototype.isDesktop = function() {
            return this._$container.hasClass("desktop");
        }, init.prototype.isMobile = function() {
            return this._$container.hasClass("mobile");
        }, init.prototype.isFullscreen = function() {
            return "fullscreen" === this._options.state;
        }, init.prototype.getImageCount = function() {
            return this._images.length;
        }, init.prototype.getDomNode = function() {
            return this._$[0];
        }, init.prototype.disableAds = function() {
            return this._options.ads = false;
        }, init.prototype.show = function(options) {
            var tunedIndex;
            var plugins;
            if (null == options && (options = {}), options.pageIndex = null != (plugins = options.pageIndex) ? plugins : 0, options.fullscreen = !!this._options.fullscreenOnly || options.fullscreen, this._$container.addClass("visible").removeClass("hidden"), this.transitionTo(options.fullscreen ? "fullscreen" : "inline"), tunedIndex = this._currentIndex, this._currentIndex = options.pageIndex, this._isSwiperCreated && tunedIndex !== this._currentIndex) {
                return this._reinitSwiper(this._swiper, options.pageIndex);
            }
        }, init.prototype.refresh = function(walkers) {
            return this._reinitSwiper(this._swiper, walkers);
        }, init.prototype.hide = function() {
            return this._$container.addClass("hidden").removeClass("visible");
        }, init.prototype.prev = function() {
            if (!this._isSliding) {
                return this._isSliding = true, this._swiper.swipePrev();
            }
        }, init.prototype.next = function() {
            if (!this._isSliding) {
                return this._isSliding = true, this._swiper.swipeNext();
            }
        }, init.prototype.transitionTo = function(name) {
            var type;
            var klass;
            if ((this._options.enableFullscreen || "fullscreen" !== name) && (!this._isSliding && (klass = this._options.state, type = $.Event("beforeTransition"), $(this).trigger(type, [this._images[this._currentIndex], this._currentIndex, name, klass]), !type.cancelTransition))) {
                return this._options.fullscreenOnly && "fullscreen" !== name ? this.destroy() : ("fullscreen" === name ? this._options.enableZoom && (this.isMobile() && (this._slideshowZoomer = new TransitionEvent(this, this._$swiperContainer[0], {
                    onTap : this._onTapEventHandler,
                    onDoubleTap : function(dataAndEvents) {
                        return function() {
                            return dataAndEvents._isSliding = false;
                        };
                    }(this),
                    onPinchEnd : function(dataAndEvents) {
                        return function() {
                            return dataAndEvents._isSliding = false;
                        };
                    }(this),
                    onPanEnd : function(dataAndEvents) {
                        return function() {
                            return dataAndEvents._isSliding = false;
                        };
                    }(this)
                }))) : this._slideshowZoomer && (this._slideshowZoomer.destroy(), this._slideshowZoomer = null), this._options.state = name, this._$container.removeClass(klass).addClass(name), this._renderPage(), this._onResize("afterTransition"), $(this).trigger("afterTransition", [this._images[this._currentIndex], this._currentIndex, name, klass]));
            }
        }, init.prototype.destroy = function() {
            return this.resizeTimeout && clearTimeout(this.resizeTimeout), this._isSwiperCreated && this._swiper.destroy(true), this._slideshowZoomer && (this._slideshowZoomer.destroy(), this._slideshowZoomer = null), this._unbindEventListeners(), this._$container.remove();
        }, init.prototype._bindEventListeners = function() {
            return $(window).on("resize." + this._id + " orientationchange." + this._id, function(instance) {
                return function(event) {
                    return instance._onResize(event.type);
                };
            }(this)), this._options.enableKeyBindings && $(document).on("keydown." + this._id, function(self) {
                return function(event) {
                    if (self.isFullscreen() && (27 === event.keyCode && self.transitionTo("inline")), self.isFullscreen() || self._$.filter(":visible").isInViewport(true)) {
                        if (37 === event.keyCode) {
                            return self.prev();
                        }
                        if (39 === event.keyCode) {
                            return self.next();
                        }
                    }
                };
            }(this)), this._$container.on("click", function(dataAndEvents) {
                return function(ev) {
                    if ($(ev.target).hasClass("NnSlideshowContainer")) {
                        return dataAndEvents.transitionTo("inline");
                    }
                };
            }(this)), this._$.find(".header .closeButton").on("click", function(dataAndEvents) {
                return function(deepDataAndEvents) {
                    return dataAndEvents.transitionTo("inline");
                };
            }(this)), this._$.find(".header .backButton").on("click", function(self) {
                return function(mapper) {
                    return $.isFunction(self._options.backButtonClickCallback) ? self._options.backButtonClickCallback.call(self, mapper) : self.transitionTo("inline");
                };
            }(this)), this._$.find(".nav .back").on("click", function(dataAndEvents) {
                return function(deepDataAndEvents) {
                    return dataAndEvents.prev();
                };
            }(this)), this._$.find(".enlarge").on("click", function(self) {
                return function(dataAndEvents) {
                    return self.transitionTo("fullscreen");
                };
            }(this)), this._$.find(".nav .forward").on("click", function(stream) {
                return function(dataAndEvents) {
                    return stream.next();
                };
            }(this));
        }, init.prototype._unbindEventListeners = function() {
            return $(window).off("." + this._id), $(document).off("." + this._id);
        }, init.prototype._initImages = function(objects) {
            var _i;
            var value;
            var _len;
            /** @type {number} */
            _i = 0;
            _len = objects.length;
            for (;_i < _len;_i++) {
                value = objects[_i];
                this._images.push(value);
            }
            return this._$container.removeClass("imagesLoading").addClass("imagesLoaded");
        }, init.prototype._onResize = function(e) {
            var _naturalSize;
            var style;
            var throttledUpdate;
            var destX;
            var y;
            var value;
            var minX;
            var nDigit;
            var offsetAxis;
            var width;
            var optgroup;
            var x;
            var min;
            switch(min = $(window).width(), x = $(window).height(), _naturalSize = function(dataAndEvents) {
                return function() {
                    return dataAndEvents._$.find(".swiper-container,.swiper-wrapper,.swiper-slide").css({
                        width : "",
                        height : ""
                    });
                };
            }(this), this._options.getRenderMode.call(this)) {
                case "mobile":
                    if (!(!this.isDesktop() && this.isMobile())) {
                        this._$container.removeClass("desktop").addClass("mobile");
                        if (this._isSwiperCreated) {
                            this._destroyAd();
                            this._reinitSwiper(this._swiper, Math.floor(this._currentIndex));
                        }
                        _naturalSize();
                    }
                    break;
                case "desktop":
                    if (!(!this.isMobile() && this.isDesktop())) {
                        this._$container.removeClass("mobile").addClass("desktop");
                        if (this._isSwiperCreated) {
                            this._reinitSwiper(this._swiper, this._currentIndex);
                        }
                        _naturalSize();
                    }
                    ;
            }
            return "afterTransition" === e && _naturalSize(), this.isDesktop() && this.isFullscreen() ? (optgroup = this._$.width(), destX = this._$.height(), b.browser.isIE9() && this._$[0].currentStyle ? (nDigit = parseInt(this._$[0].currentStyle.minWidth, 10), value = parseInt(this._$[0].currentStyle.maxWidth, 10), minX = parseInt(this._$[0].currentStyle.minHeight, 10), y = parseInt(this._$[0].currentStyle.maxHeight, 10)) : (nDigit = parseInt(this._$.css("min-width"), 10), value = parseInt(this._$.css("max-width"),
                10), minX = parseInt(this._$.css("min-height"), 10), y = parseInt(this._$.css("max-height"), 10)), (nDigit && (optgroup > min && min >= nDigit) || value && optgroup < min) && (width = min > value ? value : min, this._$swiperContainer.css("width", this._$swiperContainer.parent().width() - (this._$.outerWidth() - width) + "px"), this._$.css("width", width + "px")), (minX && (destX > x && x >= minX) || y && destX < x) && (offsetAxis = x > y ? y : x, this._$swiperContainer.css("height", this._$swiperContainer.parent().height() -
                (this._$.outerHeight() - offsetAxis) + "px")), this._$.css("margin-top", -this._$.height() / 2), this._$.css("margin-left", -this._$.width() / 2)) : (style = {
                width : "",
                "margin-top" : "",
                "margin-left" : ""
            }, this._options.fullyResponsive && (optgroup = this._$container.parent().width(), this._$swiperContainer.width(optgroup), style.width = optgroup + "px"), this._$.css(style)), throttledUpdate = function(_this) {
                return function() {
                    if (_this._isSwiperCreated) {
                        return _this.resizeTimeout && clearTimeout(_this.resizeTimeout), _this.resizeTimeout = setTimeout(function() {
                            return _this.resizeTimeout = null, _this._swiper.resizeFix();
                        }, "resize" === e ? 500 : 0);
                    }
                };
            }(this), this.isMobile() && (this.isFullscreen() && "orientationchange" === e) ? setTimeout(function(dataAndEvents) {
                return function() {
                    return scrollTo(0, 0), throttledUpdate();
                };
            }(this), 100) : throttledUpdate();
        }, init.prototype._renderPage = function(key) {
            var header;
            var render;
            var data;
            if (null == key && (key = this._currentIndex), this._isSwiperCreated && (this._images.length && (this._$.find("h1").html(this._options.getTitle.call(this, this._images[key], key)), this._$.find("h2").html(this._options.getSubtitle.call(this, this._images[key], key)), header = this._options.footerTemplate ? $(this._options.footerTemplate()) : this._$.find(".footer"), this._$.find(".header").add(header).find(".paging").html(this._options.getImagePaging.call(this, this._images[key], key, {
                    isAdPage : expect(key),
                    template : this._options.pagingTemplate
                })), this.isDesktop() ? (render = function(ctxt) {
                    var $next;
                    return $next = $("<div>" + ctxt + "</div>"), $next.find("a").on("click", function(dataAndEvents) {
                        return function() {
                            return dataAndEvents.transitionTo("inline");
                        };
                    }(this)), $next.children();
                }, this._options.linksTemplate && (data = this._options.getLinks.call(this, this._images[key], key, this._options.linksTemplate).trim()), data ? header.find(".links").html(render(data)).css("display", "") : header.find(".links").hide()) : header.find(".links").hide(), expect(key) ? header.find(".caption").html("") : (this._options.pagination && (this._options.paginationTemplate && header.find(".pagination").html(this._options.paginationTemplate({
                    images : this._images
                })).find(".bubble").removeClass("active").eq(key).addClass("active")), this._options.pictureCaptionTemplate && (header.find(".caption").html(this._options.getImageCaption.call(this, this._images[key], key, this._options.pictureCaptionTemplate)), header.find(".caption .pictures").on("click", function(self) {
                    return function() {
                        return self.transitionTo("fullscreen");
                    };
                }(this)))), this._options.footerTemplate))) {
                return this._$.find(".footer").replaceWith(header);
            }
        }, init.prototype._renderAd = function(parentNode) {
            var tooltip;
            var str;
            var el;
            var last;
            return this._$container.addClass("adPage"), last = (new Date).getTime() + Math.floor(100 * Math.random()), str = "gallery" + last, el = document.createElement("div"), el.style.display = "none", el.id = str, document.body.appendChild(el), tooltip = $(el).appendTo(parentNode), this.isMobile() && tooltip.css("pointer-events", "none"), $scope.ads.registerAds([{
                adUnitName : "gallery",
                targetContainerId : str
            }]), $scope.ads.displayAds(str), setTimeout(function() {
                return tooltip.show();
            }, 0);
        }, init.prototype._destroyAd = function() {
            return this._$swiperContainer.find(".adContainer").empty(), this._$container.removeClass("adPage");
        }, init.prototype._onTapEventHandler = function() {
            return this._isSliding = false, this.isFullscreen() ? this._$container.toggleClass("inactive") : this.transitionTo("fullscreen");
        }, init.prototype._createSwiper = function() {
            if (!this._isSwiperCreated && this._images.length) {
                return this._swiper = new Swiper(this._$swiperContainer[0], {
                    grabCursor : true,
                    noSwiping : this._options.enableZoom && "mobile" === this._options.getRenderMode.call(this),
                    queueEndCallbacks : true,
                    onSwiperCreated : function(el) {
                        return function(node) {
                            return el._swiper = node, el._isSwiperCreated = true, el._reinitSwiper(node);
                        };
                    }(this),
                    onSlideTouch : function(dataAndEvents) {
                        return function(deepDataAndEvents) {
                            return dataAndEvents._isSliding = true;
                        };
                    }(this),
                    onSlideClick : function(object) {
                        return function(dataAndEvents) {
                            return $(dataAndEvents.activeSlide()).hasClass("adContainer") ? ($(dataAndEvents.activeSlide()).find("iframe").first().contents().find("a:first").on("click", function() {
                                return window.open($(this).attr("href"), "_blank"), $(this).off("click");
                            }), $(dataAndEvents.activeSlide()).find("iframe").first().contents().find("a:first").click()) : object._slideshowZoomer ? void 0 : object._onTapEventHandler.apply(object, arguments);
                        };
                    }(this),
                    onSlideReset : function(dataAndEvents) {
                        return function(deepDataAndEvents) {
                            return dataAndEvents._isSliding = false;
                        };
                    }(this),
                    onSlideChangeStart : function(self) {
                        return function(data, index) {
                            var stream;
                            return "toNext" === index && (index = "next"), "toPrev" === index && (index = "prev"), stream = self._calculateSwiperIndices(data, self._calculateSwiperIndices(data, self._currentIndex)[index]), self._currentIndex = stream.current, self._renderPage(), expect(stream.current) ? self._renderAd(self._getSlideByImageIndex(data, stream.current)) : expect(stream.prev) || expect(stream.next) ? self._$container.removeClass("adPage") : void 0;
                        };
                    }(this),
                    onSlideChangeEnd : function(self) {
                        return function(_this, value) {
                            var x;
                            var init;
                            var data;
                            if ("toNext" === value) {
                                /** @type {string} */
                                value = "next";
                            }
                            if ("toPrev" === value) {
                                /** @type {string} */
                                value = "prev";
                            }
                            x = self._lastProcessedImageIndex;
                            for (;x !== self._currentIndex;) {
                                data = self._calculateSwiperIndices(_this, self._calculateSwiperIndices(_this, x)[value]);
                                if ("next" === value) {
                                    self._createSlide(_this, data.last).append();
                                    _this.removeSlide(0);
                                } else {
                                    if ("prev" === value) {
                                        self._createSlide(_this, data.first).prepend();
                                        _this.removeLastSlide();
                                    }
                                }
                                if (expect(data.prev) || expect(data.next)) {
                                    self._destroyAd();
                                }
                                x = data.current;
                            }
                            return self._lastProcessedImageIndex = x, init = function() {
                                return _this.swipeTo(data.positionOfCurrentIndex, 0, false), $(self).trigger("afterSlide", [self._images[x], x, value, self.isFullscreen() ? "fullscreen" : "embedded"]), self._isSliding = false;
                            }, b.browser.isIE8() || b.browser.isIE9() ? setTimeout(function() {
                                return init();
                            }) : init();
                        };
                    }(this)
                });
            }
        }, init.prototype._reinitSwiper = function(_this, obj) {
            var _i;
            var data;
            var _len;
            if (null == obj) {
                obj = this._currentIndex;
            }
            obj = this._currentIndex = getNext(obj, this._images.length - 1);
            data = this._calculateSwiperIndices(_this, obj);
            _this.removeAllSlides();
            /** @type {number} */
            _i = 0;
            _len = data.length;
            for (;_i < _len;_i++) {
                obj = data[_i];
                this._createSlide(_this, obj).append();
            }
            return this._lastProcessedImageIndex = data.current, b.browser.isIE8() || b.browser.isIE9() ? setTimeout(function(dataAndEvents) {
                return function() {
                    return _this.swipeTo(data.positionOfCurrentIndex, 0, false), dataAndEvents._renderPage(), dataAndEvents._onResize();
                };
            }(this)) : (_this.swipeTo(data.positionOfCurrentIndex, 0, false), this._renderPage(), this._onResize());
        }, init.prototype._createSlide = function(_this, recurring) {
            var elem;
            return elem = _this.createSlide(), expect(recurring) ? $(elem).addClass("adContainer") : $(elem).css("background-image", "url(" + this._options.getImageUrl.call(this, this._images[recurring], recurring) + ")"), elem.getImageIndex = function() {
                return parseFloat(this.data("imageIndex"));
            }, elem.data("imageIndex", recurring);
        }, init.prototype._getSlideByImageIndex = function(_xhr, dataAndEvents) {
            return this._$swiperContainer.find(".swiper-slide[data-imageindex='" + dataAndEvents + "']")[0];
        }, init.prototype._calculateSwiperIndices = function(client, value, n) {
            var _j;
            var start;
            var f;
            var current;
            var list;
            var i;
            var _i;
            var offset;
            var _ref1;
            var _ref;
            if (null == n && (n = this._options.prerenderedSlides), f = this._options.ads && ("undefined" != typeof TATM && null !== TATM), start = this.getImageCount(), list = [], 1 === start) {
                /** @type {number} */
                n = 0;
            } else {
                for (;n && (start <= n && n > 2);) {
                    n -= 2;
                }
            }
            if (n) {
                /** @type {number} */
                current = value;
                /** @type {number} */
                i = _j = 1;
                /** @type {number} */
                _ref1 = n / 2;
                for (;1 <= _ref1 ? _j <= _ref1 : _j >= _ref1;i = 1 <= _ref1 ? ++_j : --_j) {
                    offset = getNext(current - 1, start - 1);
                    if (f && (offset + 1) % this._options.adInterval === 0) {
                        list.unshift(current = offset + 0.5);
                    } else {
                        list.unshift(current = Math.ceil(offset));
                    }
                }
            }
            if (list.positionOfCurrentIndex = list.push(value) - 1, n) {
                /** @type {number} */
                current = value;
                /** @type {number} */
                i = _i = 1;
                /** @type {number} */
                _ref = n / 2;
                for (;1 <= _ref ? _i <= _ref : _i >= _ref;i = 1 <= _ref ? ++_i : --_i) {
                    if (f && (current + 1) % this._options.adInterval === 0) {
                        list.push(current += 0.5);
                    } else {
                        list.push(current = getNext(Math.floor(current) + 1, start - 1));
                    }
                }
            }
            return list.first = list[0], list.prev = list[Math.max(list.positionOfCurrentIndex - 1, 0)], list.current = list[list.positionOfCurrentIndex], list.next = list[Math.min(list.positionOfCurrentIndex + 1, list.length - 1)], list.last = list[list.length - 1], list;
        }, init;
    }();
    TransitionEvent = function() {
        /**
         * @param {?} allBindingsAccessor
         * @param {Object} element
         * @param {?} attributes
         * @return {undefined}
         */
        function init(allBindingsAccessor, element, attributes) {
            var g;
            $.extend(this, attributes);
            $.extend(this, {
                _container : element,
                _slideshow : allBindingsAccessor,
                _scale : 1,
                _scaleOnPinchStart : 1,
                _panStartPosition : {},
                _lastPinchEnd : 0
            });
            this._slideshow._$container.addClass("zoomer");
            this._hammertime = g = new Hammer.Manager(element);
            g.add(new Hammer.Tap({
                event : "doubletap",
                taps : 2,
                posThreshold : 100
            }));
            g.add(new Hammer.Tap({
                event : "singletap"
            }));
            g.add(new Hammer.Pinch({
                event : "pinch",
                enable : true
            }));
            g.add(new Hammer.Pan({
                event : "pan"
            }));
            g.get("doubletap").recognizeWith("singletap");
            g.get("singletap").requireFailure("doubletap");
            g.on("singletap", function(_this) {
                return function(mapper) {
                    return _this.onTap.call(_this, mapper);
                };
            }(this));
            g.on("doubletap", function(me) {
                return function(e) {
                    if (me.onDoubleTap.call(me, e), me._slideshow.isFullscreen()) {
                        return $(e.target).addClass("smoothRepositioning"), me._applyScale(e.target, 1 === me._scale ? 2.5 : 1, e);
                    }
                };
            }(this));
            g.on("pinchstart", function(scene) {
                return function(ev) {
                    if (scene._slideshow.isFullscreen()) {
                        return $(ev.target).removeClass("smoothRepositioning"), scene._scaleOnPinchStart = scene._scale;
                    }
                };
            }(this));
            g.on("pinch", function(that) {
                return function(e) {
                    if (that._slideshow.isFullscreen()) {
                        return that._applyScale(e.target, that._scaleOnPinchStart * e.scale, e);
                    }
                };
            }(this));
            g.on("pinchend", function(me) {
                return function(e) {
                    if (me.onPinchEnd.call(me, e), me._slideshow.isFullscreen()) {
                        if ($(e.target).addClass("smoothRepositioning"), me._lastPinchEnd = (new Date).getTime(), me._scale < 1) {
                            return me._applyScale(e.target, 1, e);
                        }
                        if (me._scale > 10) {
                            return me._applyScale(e.target, 10, e);
                        }
                        if (me._scale > 1) {
                            return me._transformImage(e.target, me._getCorrectImagePosition(e.target));
                        }
                    }
                };
            }(this));
            g.on("panstart", function(view) {
                return function(ev) {
                    var c;
                    var k;
                    var v;
                    var s;
                    var y;
                    var x;
                    var height;
                    if (view._slideshow.isFullscreen() && (view._lastPinchEnd < (new Date).getTime() - 300 && ($(ev.target).removeClass("smoothRepositioning"), view._lastPinchEnd = 0, view._scale > 1))) {
                        return c = view._getTransformMatrix(ev.target), s = c[0], k = c[1], v = c[2], y = c[3], x = c[4], height = c[5], view._transformImage(ev.target, view._panStartPosition = {
                            x : x / s,
                            y : height / y
                        });
                    }
                };
            }(this));
            g.on("pan", function(view) {
                return function(e) {
                    if (view._slideshow.isFullscreen() && (0 === view._lastPinchEnd && view._scale > 1)) {
                        return view._transformImage(e.target, {
                            x : view._panStartPosition.x + e.deltaX / view._scale,
                            y : view._panStartPosition.y + e.deltaY / view._scale
                        });
                    }
                };
            }(this));
            g.on("panend", function(me) {
                return function(e) {
                    if (me.onPanEnd.call(me, e), me._slideshow.isFullscreen() && (0 === me._lastPinchEnd && ($(e.target).addClass("smoothRepositioning"), me._scale > 1))) {
                        return me._transformImage(e.target, me._getCorrectImagePosition(e.target));
                    }
                };
            }(this));
        }
        return init.prototype.destroy = function() {
            if (this._hammertime) {
                return this._hammertime.destroy();
            }
        }, init.prototype.onTap = function() {
        }, init.prototype.onDoubleTap = function() {
        }, init.prototype.onPinchEnd = function() {
        }, init.prototype.onPanEnd = function() {
        }, init.prototype._applyScale = function(element, obj, this$static) {
            var name;
            var result;
            return name = $(this._container), result = $(element), obj = Math.max(obj, 0.3), 1 !== obj && 1 === this._scale ? (result.addClass(this._slideshow._swiper.params.noSwipingClass), this._slideshow._$container.addClass("hideNonActiveSlides"), 2.5 === obj && 1 === this._scale ? this._transformImage(element, $.extend(this._getCenterImagePosition(element, obj, this$static.center), {
                scale : obj
            })) : this._transformImage(element, $.extend(this._getScaledImagePosition(element, this._scale, obj, this$static.center), {
                scale : obj
            }))) : 1 === obj && 1 !== this._scale ? this._transformImage(element, {
                scale : obj,
                x : 0,
                y : 0
            }, function(dataAndEvents) {
                return function() {
                    return result.removeClass(dataAndEvents._slideshow._swiper.params.noSwipingClass), dataAndEvents._slideshow._$container.removeClass("hideNonActiveSlides");
                };
            }(this)) : this._transformImage(element, $.extend(this._getScaledImagePosition(element, this._scale, obj, this$static.center), {
                scale : obj
            })), this._scale = obj;
        }, init.prototype._getCorrectImagePosition = function(el, n, key, value, index, step) {
            var c;
            var box;
            var j;
            var _ref;
            var val;
            var token;
            var elementListeners;
            var ix1;
            var x;
            var y;
            return j = {}, c = $(this._container), box = $(el), _ref = this._getTransformMatrix(el), elementListeners = _ref[0], val = _ref[1], token = _ref[2], ix1 = _ref[3], x = _ref[4], y = _ref[5], null == n && (n = this._scale), key = (null != key ? key * n : x) - this._getImageScaleOffset(el, n).x, value = (null != value ? value * n : y) - this._getImageScaleOffset(el, n).y, index = box.width() * n, step = box.height() * n, j.x = function() {
                switch(false) {
                    case !(key > 0):
                        return this._getImageScaleOffset(el, n).x / n;
                    case !(key + index < c.width()):
                        return(this._getImageScaleOffset(el, n).x + c.width() - index) / n;
                }
            }.call(this), j.y = function() {
                switch(false) {
                    case !(value > 0):
                        return this._getImageScaleOffset(el, n).y / n;
                    case !(value + step < c.height()):
                        return(this._getImageScaleOffset(el, n).y + c.height() - step) / n;
                }
            }.call(this), j;
        }, init.prototype._getScaledImagePosition = function(checkElement, dataAndEvents, activeXObj, deepDataAndEvents) {
        }, init.prototype._getCenterImagePosition = function(handle, condition, mousePosition) {
            var slide;
            var parent;
            var scroll;
            var g;
            var h;
            var x;
            var y;
            var camelKey;
            var udataCur;
            return slide = $(this._container), parent = $(handle), g = mousePosition.x - parent.offset().left, h = mousePosition.y - parent.offset().top, camelKey = slide.width() / 2 - parent.width() / 2, udataCur = slide.height() / 2 - parent.height() / 2, camelKey -= g - parent.width() / 2, udataCur -= h - parent.height() / 2, scroll = this._getCorrectImagePosition(handle, condition, camelKey, udataCur), {
                x : null != (x = scroll.x) ? x : camelKey,
                y : null != (y = scroll.y) ? y : udataCur
            };
        }, init.prototype._transformImage = function(element, args, next_callback) {
            var el;
            var e;
            var props;
            var x;
            var dest;
            var tx;
            var y;
            return x = args.scale, tx = args.x, y = args.y, null == next_callback && (next_callback = function() {
            }), props = {}, el = $(element), null == x && (x = this._scale), dest = this._getTransformMatrix(element), dest[0] = dest[3] = x, dest[1] = dest[2] = 0, null != tx && (dest[4] = tx * x, props.left = this._getTransformMatrix(el.parent())[4] * -1), null != y && (dest[5] = y * x, props.top = this._getTransformMatrix(el.parent())[5] * -1), props.transform = props["-webkit-transform"] = "matrix(" + dest.join(", ") + ")", e = (el.css("transform") || (el.css("-webkit-transform") || "")).replace(/\s/g,
                "") !== props.transform.replace(/\s/g, ""), e ? (el.one("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function(next_scope) {
                return function(dataAndEvents) {
                    return next_callback.call(next_scope);
                };
            }(this)), setTimeout(function(dataAndEvents) {
                return function() {
                    return el.css(props);
                };
            }(this))) : next_callback.call(this);
        }, init.prototype._getTransformMatrix = function(element) {
            return($(element).css("transform") || $(element).css("-webkit-transform")).split(/[,\(\)]/).slice(1, -1).map(parseFloat);
        }, init.prototype._getImageScaleOffset = function(el, operator) {
            var n;
            return n = $(el), {
                x : (n.width() * operator - n.width()) / 2,
                y : (n.height() * operator - n.height()) / 2
            };
        }, init;
    }();
    eventHandle.Slideshow = elem;
}), define("framework/slideshow/templates/links", ["exports"], function(obj) {
    obj.default = Handlebars.compile('{{#if articleLinkUri}}\n    <p class="relatedArticle">\n        <a href="{{{articleLinkUri}}}"><span class="NnIcon linkIcon"></span><span class="title">{{translate "Artikel zur Bildstrecke"}}</span></a> {{{articleLinkText}}}\n    </p>\n{{/if}}\n\n{{#if slideshowOverviewUri}}\n    <p class="slideshowOverview">\n        <a href="{{{slideshowOverviewUri}}}"><span class="NnIcon slideshowIcon"></span><span class="title">{{translate "Alle Bildstrecken"}}</span></a>\n    </p>\n{{/if}}');
}), define("framework/slideshow/templates/pagination", ["exports"], function(obj) {
    obj.default = Handlebars.compile('{{#each images}}<span class="bubble"></span>{{/each}}');
}), define("framework/slideshow/templates/paging", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<span class="index">{{currentImage}}</span> <span class="separator"></span> {{totalImages}}');
}), define("framework/slideshow/templates/pictureCaption", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<div>\n    {{#if slideshowTitle}}\n        <h4>\n            {{#displayMediaType}}\n                <span class="NnIcon {{mediatype}}Icon"></span>\n            {{else}}\n                {{#if keyword}}\n                    <span>{{keyword}}</span>\n                {{else}}\n                    {{#if decoration}}\n                        <span style="color: #{{decoration.color}}">{{decoration.name}}</span>\n                    {{else}}\n                        <span style="color: #{{genre.color}}">{{genre.name}}</span>\n                    {{/if}}\n                {{/if}}\n            {{/displayMediaType}}\n                {{slideshowTitle}}\n        </h4>\n    {{/if}}\n\n    {{#if title}}\n        <b>{{title}}</b>\n    {{/if}}\n\n    {{{caption}}} <span class="annotation">{{annotation}}</span>\n\n    {{#if isFirstPicture}}\n        <a class="pictures">({{imageCount}} {{translate "Bilder"}})</a>\n    {{/if}}\n\n    {{#if linkUrl}}\n        {{#if linkText}}\n            <a href="{{linkUrl}}" target="_blank" class="link"><span class ="NnIcon linkIcon"></span>{{linkText}}</a>\n        {{/if}}\n    {{/if}}\n\n    {{#if shareUrl}}\n        <div class="socialMedia">\n            <iframe src="//platform.twitter.com/widgets/tweet_button.html?lang={{language}}&amp;text={{shareText}}&amp;via={{shareTwitterVia}}&amp;url={{shareUrl}}" scrolling="no" frameborder="0" style="border:none; overflow:hidden; height:20px;" allowTransparency="true"></iframe>\n            <iframe src="//www.facebook.com/plugins/like.php?locale={{locale}}&amp;href={{shareUrl}}&amp;width&amp;layout=button_count&amp;action=recommend&amp;show_faces=false&amp;share=false&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; height:21px;" allowTransparency="true"></iframe>\n        </div>\n    {{/if}}\n</div>');
}), define("framework/slideshow/templates/pictureTitles", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<div>\n    <b><span class="NnIcon slideshowIcon"></span> {{title}}</b>\n</div>');
}), define("framework/slideshow/templates/slideshow", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<div class="NnSlideshowContainer">\n    <div class="NnSlideshow">\n        <div class="header">\n            <div class="backButton"><a>{{translate "Zur\u00fcck"}}</a></div>\n\n            <div class="row title">\n                <h1 class="cell"></h1>\n            </div>\n\n            <div class="row subtitle">\n                <h2 class="cell"></h2>\n            </div>\n\n            <div class="paging"></div>\n\n            <a class="closeButton"></a>\n        </div>\n\n        <div class="row body">\n            <div class="cell">\n                <div class="nav">\n                    <a class="back"></a>\n                    <a class="NnIcon enlarge"></a>\n                    <a class="forward"></a>\n                </div>\n\n                <div class="swiper-container">\n                    {{> fullscreenLoader style="transparent" visible="true"}}\n                    <div class="swiper-wrapper"></div>\n                </div>\n            </div>\n        </div>\n\n        <div class="row footerContainer">\n            <div class="footer cell">\n                <div class="pagination"></div>\n                \n                <div class="footerWrapper">\n                    <div class="paging"></div>\n                    <div class="caption"></div>\n                    <div class="links"></div>\n                    <div class="nav">\n                        <a class="back"></a>\n                        <a class="forward"></a>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class="spacer row">\n            <div class="cell"></div>\n        </div>\n    </div>\n</div>');
}), define("framework/slideshow/templates/twistedFooter", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<div class="footer cell">\n    <div class="footerWrapper">\n        <div class="paging"></div>\n        <div class="caption"></div>\n        <div class="links"></div>\n    </div>\n\n    <div class="pagination"></div>\n</div>');
}), define("framework/smartAppBanner/box", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<div id="smartAppBanner">\n    <div class="iconClose">\n        <a href="javascript:void(0);">\n            &times;\n        </a>\n    </div>\n    <div class="customerLogo">\n        <img src="{{artworkUrl512}}">\n    </div>\n    <div class="description">\n        <p>{{trackName}}</p>\n        <div class="starRating">\n        {{!-- Each loop times helper over rating Stars here --}}\n        {{#times averageUserRating}}\n            <span class="NnIcon starIcon {{isFilled}}"></span>\n        {{/times}}\n        </div>\n        <div class="price">{{translate "Preis"}} - {{formattedPrice}}</div>\n    </div>\n    <div class="linkStore">\n        <a href="{{trackViewUrl}}" target="_blank" >{{translate "\u00d6ffnen"}}</a>\n    </div>\n</div>    ');
}), define("framework/smartAppBanner/module", ["exports", "framework/config", "framework/browser", "framework/translations", "framework/LocalStorageQueue", "framework/handlebars/module", "framework/statistics"], function(eventHandle, data, b, self, dataAndEvents, $window, opt_user) {
    var createElements;
    var loop;
    var remove;
    var init;
    var fetch;
    var module;
    var closeLightbox;
    var destroy;
    var elem;
    var store;
    module = {};
    /** @type {null} */
    module.config = null;
    $window.handlebars.init();
    store = new dataAndEvents.LocalStorageQueue("Framework.smartAppBanner");
    /**
     * @param {string} element
     * @param {?} instance
     * @param {Function} callback
     * @return {?}
     */
    init = function(element, instance, callback) {
        var async;
        if (async = data.config.customers[data.config.currentCustomer].appleAppId, self.translations.configure({
                language : data.config.language
            }), destroy(async, instance.hoursUntilExpiration)) {
            return fetch(async).then(function(child) {
                var rvar;
                return opt_user.statistics.trackGtmEvent("smartAppBanner", {
                    isDisplayed : true
                }), rvar = require("framework/smartAppBanner/box").default(child.results[0]), $(element).before(rvar), createElements(async), callback();
            });
        }
    };
    /**
     * @param {string} async
     * @return {?}
     */
    fetch = function(async) {
        return new RSVP.Promise(function(next, done) {
            return $.ajax({
                url : "https://itunes.apple.com/ch/lookup?id=" + async + "&lang=" + data.config.language + "&callback=?",
                type : "get",
                dataType : "json",
                /**
                 * @param {string} name
                 * @param {Function} recurring
                 * @param {Object} deepDataAndEvents
                 * @return {?}
                 */
                error : function(name, recurring, deepDataAndEvents) {
                    return done();
                },
                /**
                 * @param {string} name
                 * @param {Function} recurring
                 * @param {Object} deepDataAndEvents
                 * @return {?}
                 */
                success : function(name, recurring, deepDataAndEvents) {
                    return next(name);
                }
            });
        });
    };
    /**
     * @param {string} id
     * @param {number} key
     * @return {?}
     */
    destroy = function(id, key) {
        var t;
        var camelKey;
        var n;
        return t = store.getQueue(), n = null, camelKey = 0, t.filter(function(map, dataAndEvents) {
            if (map.id === id) {
                return n = map, camelKey = dataAndEvents;
            }
        }), null == n || (null != key ? remove(key, n, camelKey) : !(id === n.id));
    };
    /**
     * @param {string} async
     * @return {?}
     */
    loop = function(async) {
        var data;
        var dateString;
        return dateString = (new Date).getTime(), data = {
            id : async,
            date : dateString
        }, store.add(data);
    };
    /**
     * @param {number} keepData
     * @param {Object} a
     * @param {(number|string)} key
     * @return {?}
     */
    remove = function(keepData, a, key) {
        var now;
        var high;
        var value;
        if (high = 60 * keepData * 60 * 1E3, now = (new Date).getTime(), value = now - a.date, value > high) {
            return store.removeItem(key), true;
        }
    };
    /**
     * @param {string} async
     * @return {?}
     */
    createElements = function(async) {
        return $(".iconClose").on("click", function(types) {
            return types.preventDefault(), opt_user.statistics.trackGtmEvent("smartAppBanner", {
                clickedClose : true
            }), loop(async), closeLightbox();
        }), $(".linkStore a").on("click", function(dataAndEvents) {
            return opt_user.statistics.trackGtmEvent("smartAppBanner", {
                clickedAppStore : true
            }), loop(async), closeLightbox();
        });
    };
    /**
     * @return {?}
     */
    closeLightbox = function() {
        return $("#smartAppBanner").remove(), "function" == typeof elem.afterRemove ? elem.afterRemove() : void 0;
    };
    elem = {
        afterRemove : null,
        /**
         * @param {string} element
         * @param {?} config
         * @param {Function} selector
         * @return {?}
         */
        init : function(element, config, selector) {
            if (b.browser.isiPhoneOriPod() && data.config.isNativeApp === false) {
                return null != config.afterRemove && (this.afterRemove = config.afterRemove), init(element, config, selector);
            }
        }
    };
    eventHandle.smartAppBanner = elem;
}), define("framework/socialMedia/socialMedia", ["exports", "framework/jquery", "framework/store", "framework/translations"], function(options, dataAndEvents, i18n, self) {
    var data;
    var app;
    data = {};
    data.config = {};
    app = {
        /**
         * @param {?} opt_attributes
         * @return {?}
         */
        configure : function(opt_attributes) {
            return $.extend(data.config, opt_attributes), self.translations.configure(data.config.language), i18n.store.configure({
                apiUrl : data.config.apiUrl
            });
        },
        /**
         * @param {Object} obj
         * @param {?} opt_attributes
         * @param {Object} options
         * @return {?}
         */
        insert : function(obj, opt_attributes, options) {
            return options = $.extend({}, options), ReactDOM.render(React.createElement(require("framework/socialMedia/SocialMediaContainer/component").SocialMediaContainer, {
                articleId : opt_attributes,
                isAggregated : options.isAggregated || false,
                dialogBox : options.dialogBox || null,
                layoutType : options.layoutType || "horizontal",
                articleType : options.articleType || "articles",
                env : data.config.env,
                apiUrl : data.config.apiUrl,
                customSocialInfo : options.customSocialInfo,
                router : options.router,
                legacyId : options.legacyId || void 0
            }), obj);
        },
        /**
         * @param {Object} obj
         * @param {?} props
         * @return {?}
         */
        insertLikeButton : function(obj, props) {
            return props = $.extend({}, props), ReactDOM.render(React.createElement(require("framework/socialMedia/SocialMediaLikeButton/component").SocialMediaLikeButton, {
                types : props.types,
                customerName : "Baslerzeitung" === data.config.fullName ? "Basler Zeitung" : data.config.fullName,
                facebookPageId : data.config.facebook.pageId,
                twitterName : data.config.twitter.accountName
            }), obj);
        }
    };
    options.socialMedia = app;
}), define("framework/socialMedia/SocialMediaBox/component", ["exports", "framework/string"], function(eventHandle) {
    var elem;
    elem = React.createClass({
        /**
         * @return {?}
         */
        getInitialState : function() {
            return{
                communities : [],
                layoutType : "horizontal"
            };
        },
        /**
         * @return {?}
         */
        componentWillMount : function() {
            return this.testingFeed = [{
                type : "comment",
                count : 9999
            }, {
                type : "dark",
                count : 0
            }, {
                type : "whatsapp",
                count : 9999
            }, {
                type : "share",
                count : 9999
            }, {
                type : "facebook",
                count : 9999
            }, {
                type : "twitter",
                count : 9999
            }];
        },
        /**
         * @return {?}
         */
        componentDidMount : function() {
            var value;
            var values;
            var SHIFT;
            var udataCur;
            return SHIFT = this.props.layoutType, udataCur = 0, values = this.props.communities.filter(function(test) {
                return function(collection) {
                    return "comment" !== collection.type && (udataCur += collection.count), collection.styledCount = test.kilonize(collection.count);
                };
            }(this)), this.props.isAggregated ? (values = this.props.communities.filter(function(statement) {
                if ("comment" === statement.type) {
                    return statement.styledCount > 0;
                }
            }), "comment" === this.props.communities[0].type && 1 === this.props.communities.length || (value = {
                type : "shareV",
                styledCount : this.kilonize(udataCur)
            }, values.push(value))) : (values = this.props.communities.filter(function(statement) {
                return "dark" !== statement.type;
            }), "desktop" === this.props.env && (values = values.filter(function(statement) {
                return "whatsapp" !== statement.type;
            }), "horizontal" === SHIFT && (values = values.filter(function(comment) {
                return "comment" !== comment.type;
            })))), this.setState({
                communities : values,
                layoutType : SHIFT
            });
        },
        /**
         * @return {?}
         */
        remove : function() {
            return ReactDOM.unmountComponentAtNode(ReactDOM.findDOMNode(this).parentNode);
        },
        /**
         * @param {number} value
         * @return {?}
         */
        kilonize : function(value) {
            return value >= 1E4 ? Math.round(value / 1E3) + "k" : value;
        },
        /**
         * @return {?}
         */
        render : function() {
            return require("framework/socialMedia/SocialMediaBox/template").default.apply(this);
        }
    });
    eventHandle.SocialMediaBox = elem;
}), define("framework/socialMedia/SocialMediaBox/template", ["exports", "framework/socialMedia/SocialMediaBoxItem/component"], function(obj, item) {
    /**
     * @param {Object} options
     * @param {string} context
     * @return {?}
     */
    function render(options, context) {
        return React.createElement(item.SocialMediaBoxItem, {
            name : options.name,
            count : options.styledCount,
            type : options.type,
            url : options.url,
            description : options.description,
            shareTypeId : options.share_type_id,
            title : options.title,
            via : options.via,
            articleId : this.props.articleId,
            legacyId : this.props.legacyId,
            articleType : this.props.articleType,
            customSocialInfo : this.props.customSocialInfo,
            dialogBox : this.props.dialogBox,
            shareBox : this.props.shareBox,
            layoutType : this.props.layoutType,
            isAggregated : this.props.isAggregated,
            apiUrl : this.props.apiUrl,
            env : this.props.env,
            router : this.props.router,
            key : context
        });
    }
    /**
     * @return {?}
     */
    obj.default = function() {
        return React.createElement("div", {
            className : "NnSocialMediaBox"
        }, React.createElement("div", {}, React.createElement.apply(this, ["ul", {
            className : this.state.layoutType + " " + this.props.env + " " + (this.props.isAggregated ? "aggregated" : "")
        }, _.map(this.state.communities, render.bind(this))])));
    };
}), define("framework/socialMedia/SocialMediaBoxItem/component", ["exports", "framework/facebook"], function(eventHandle, $scope) {
    var elem;
    elem = React.createClass({
        twitterUrl : "https://twitter.com/intent/tweet?",
        /**
         * @return {?}
         */
        componentDidMount : function() {
            var f;
            var $document;
            var e;
            var self;
            return e = $(ReactDOM.findDOMNode(this)), f = $(this.props.dialogBox), $document = $(this.props.shareBox), self = this, e.find("a").on("click", function(event) {
                return self.props.isAggregated ? (f.find(">div").html($document.find(">div").clone(true, true)), f.addClass("shareBox"), f.show(), event.stopPropagation(), $(this).trigger("openedShareDialog")) : (event.stopPropagation(), self.share($(event.delegateTarget), self.props.type, self.props.url));
            });
        },
        /**
         * @param {Object} $el
         * @param {string} req
         * @param {string} text
         * @return {?}
         */
        share : function($el, req, text) {
            var endCompositionString;
            var appFrontendUrl;
            var params;
            if (null != window.dataLayer && window.dataLayer.push({
                    event : "Social",
                    socialNetwork : "share" === req ? "mail" : req,
                    article_id : this.props.legacyId,
                    event_action : "comment" === this.props.type ? "view" : "share",
                    event_label : "mobile" === this.props.env ? location.protocol + "//" + location.hostname + "/articles/" + this.props.articleId : location.protocol + "//" + location.hostname + "/" + this.props.articleId
                }), "comment" === req) {
                if ("mobile" === this.props.env) {
                    $el.closest(".NnDialog").hide();
                    if (null != this.props.router) {
                        this.props.router.transitionTo("/articles/" + this.props.articleId + "/comments");
                    } else {
                        /** @type {string} */
                        text = "/articles/" + this.props.articleId + "/comments";
                    }
                } else {
                    /** @type {string} */
                    text = null == this.props.dialogBox ? "/" + this.props.articleId + "#mostPopularComment" : "#mostPopularComment";
                }
            } else {
                switch(appFrontendUrl = this.props.apiUrl + "/communities/" + this.props.articleId + "/counts/" + this.props.shareTypeId, "videos" === this.props.articleType && (appFrontendUrl = this.props.apiUrl + "/videos/" + this.props.articleId + "/communities/counts/" + this.props.shareTypeId), $.ajax({
                    url : appFrontendUrl,
                    type : "POST"
                }), req) {
                    case "share":
                        text = $("<textarea/>").html(text).text();
                        break;
                    case "whatsapp":
                        /** @type {string} */
                        text = "whatsapp://send?text=" + text;
                        break;
                    case "facebook":
                        return params = {
                            method : "share",
                            href : text
                        }, void $scope.facebook.init().then(function() {
                            return FB.ui(params);
                        });
                    case "twitter":
                        /** @type {string} */
                        endCompositionString = text;
                        text = this.twitterUrl;
                        text += "text=" + this.props.title + "&url=" + endCompositionString + "&via=" + this.props.via;
                        $el.attr("target", "blank");
                }
            }
            return $el.attr("href", text);
        },
        /**
         * @return {?}
         */
        render : function() {
            return require("framework/socialMedia/SocialMediaBoxItem/template").default.apply(this);
        }
    });
    eventHandle.SocialMediaBoxItem = elem;
}), define("framework/socialMedia/SocialMediaBoxItem/template", ["exports"], function(obj) {
    /**
     * @return {?}
     */
    obj.default = function() {
        return React.createElement("li", {}, React.createElement("a", {
            href : "javascript:void(0)",
            name : this.props.type
        }, React.createElement("span", {
            className : "button " + this.props.type
        }, React.createElement("span", {
            className : "NnIcon " + this.props.type + "Icon"
        }), React.createElement("span", {}, this.props.name), React.createElement("span", {}, this.props.count), React.createElement("span", {}, this.props.name)), React.createElement("span", {}, this.props.description)));
    };
}), define("framework/socialMedia/SocialMediaContainer/component", ["exports", "framework/store"], function(eventHandle, c) {
    var elem;
    elem = React.createClass({
        /**
         * @return {?}
         */
        getInitialState : function() {
            return{
                communities : [],
                isLoading : true,
                dialogBox : null,
                shareBox : null
            };
        },
        /**
         * @return {?}
         */
        componentDidMount : function() {
            var f;
            var e;
            var shareBox;
            return e = $(ReactDOM.findDOMNode(this)), f = $(this.props.dialogBox), shareBox = e.find(".shareBox"), c.store.load(this.props.articleType, {
                id : this.props.articleId,
                subkey : "communities"
            }).then(function(dataAndEvents) {
                return function(security_context) {
                    return dataAndEvents.setState({
                        communities : security_context.payload.communities,
                        dialogBox : f,
                        shareBox : shareBox
                    }, function() {
                        return this.setState({
                            isLoading : false
                        });
                    });
                };
            }(this));
        },
        /**
         * @return {?}
         */
        render : function() {
            return require("framework/socialMedia/SocialMediaContainer/template").default.apply(this);
        }
    });
    eventHandle.SocialMediaContainer = elem;
}), define("framework/socialMedia/SocialMediaContainer/template", ["exports", "framework/loader/bubbleLoader", "framework/socialMedia/SocialMediaBox/component"], function(obj, join, item) {
    /**
     * @return {?}
     */
    obj.default = function() {
        return React.createElement("div", {
            className : "NnSocialMediaContainer"
        }, this.state.isLoading ? React.createElement("div", {
            dangerouslySetInnerHTML : {
                __html : join.default()
            }
        }) : null, this.state.communities.length ? React.createElement(item.SocialMediaBox, {
            communities : this.state.communities,
            isAggregated : this.props.isAggregated,
            layoutType : this.props.layoutType,
            dialogBox : this.state.dialogBox,
            shareBox : this.state.shareBox,
            articleId : this.props.articleId,
            legacyId : this.props.legacyId,
            articleType : this.props.articleType,
            apiUrl : this.props.apiUrl,
            env : this.props.env,
            router : this.props.router
        }) : null, this.props.isAggregated ? React.createElement("div", {
            className : "shareBox"
        }, React.createElement("div", {}, React.createElement("a", {
            className : "iconClose"
        }, React.createElement("span", {
            className : "NnIcon closeIcon"
        })), React.createElement("div", {}, this.state.communities.length ? React.createElement(item.SocialMediaBox, {
            communities : this.state.communities,
            isAggregated : !this.props.isAggregated,
            layoutType : "vertical",
            articleId : this.props.articleId,
            legacyId : this.props.legacyId,
            apiUrl : this.props.apiUrl,
            env : this.props.env,
            router : this.props.router
        }) : null))) : null);
    };
}), define("framework/socialMedia/SocialMediaLikeButton/component", ["exports", "framework/translations"], function(eventHandle, dataAndEvents) {
    var elem;
    elem = React.createClass({
        /**
         * @return {?}
         */
        getInitialState : function() {
            return{
                types : []
            };
        },
        /**
         * @return {?}
         */
        componentDidMount : function() {
            var _i;
            var _len;
            var attributes;
            var arrayOutput;
            var xs;
            var x;
            /** @type {Array} */
            arrayOutput = [];
            xs = this.props.types;
            /** @type {number} */
            _i = 0;
            _len = xs.length;
            for (;_i < _len;_i++) {
                switch(x = xs[_i], attributes = {
                    name : x,
                    customerName : this.props.customerName
                }, x) {
                    case "facebook":
                        $.extend(attributes, {
                            facebookPageId : this.props.facebookPageId
                        });
                        arrayOutput.push(attributes);
                        break;
                    case "twitter":
                        $.extend(attributes, {
                            twitterName : this.props.twitterName
                        });
                        arrayOutput.push(attributes);
                }
            }
            return this.setState({
                types : arrayOutput
            });
        },
        /**
         * @return {?}
         */
        render : function() {
            return require("framework/socialMedia/SocialMediaLikeButton/template").default.apply(this);
        }
    });
    eventHandle.SocialMediaLikeButton = elem;
}), define("framework/socialMedia/SocialMediaLikeButton/template", ["exports", "framework/socialMedia/SocialMediaLikeButtonItem/component"], function(obj, item) {
    /**
     * @param {string} type
     * @param {string} name
     * @return {?}
     */
    function create(type, name) {
        return React.createElement(item.SocialMediaLikeButtonItem, {
            key : name,
            type : type
        });
    }
    /**
     * @return {?}
     */
    obj.default = function() {
        return React.createElement.apply(this, ["div", {}, _.map(this.state.types, create.bind(this))]);
    };
}), define("framework/socialMedia/SocialMediaLikeButtonItem/component", ["exports", "framework/translations"], function(eventHandle, self) {
    var elem;
    elem = React.createClass({
        /**
         * @return {?}
         */
        getInitialState : function() {
            return{
                description : "",
                link : ""
            };
        },
        /**
         * @return {?}
         */
        componentDidMount : function() {
            var groupDescription;
            var link;
            switch(this.props.type.name) {
                case "facebook":
                    groupDescription = this.props.type.customerName + " " + self.translations.translate("auf Facebook");
                    /** @type {string} */
                    link = "https://www.facebook.com/" + this.props.type.facebookPageId;
                    break;
                case "twitter":
                    groupDescription = this.props.type.customerName + " " + self.translations.translate("auf Twitter");
                    /** @type {string} */
                    link = "https://www.twitter.com/" + this.props.type.twitterName;
            }
            return this.setState({
                description : groupDescription,
                link : link
            });
        },
        /**
         * @return {?}
         */
        render : function() {
            return require("framework/socialMedia/SocialMediaLikeButtonItem/template").default.apply(this);
        }
    });
    eventHandle.SocialMediaLikeButtonItem = elem;
}), define("framework/socialMedia/SocialMediaLikeButtonItem/template", ["exports"], function(obj) {
    /**
     * @return {?}
     */
    obj.default = function() {
        return React.createElement("div", {
            className : "NnLikeButton"
        }, React.createElement("a", {
            href : this.state.link,
            target : "_blank"
        }, React.createElement("span", {
            className : "button " + this.props.type.name
        }, React.createElement("span", {
            className : "NnIcon " + this.props.type.name + "Icon"
        }), React.createElement("span", {}, this.state.description))));
    };
}), define("framework/statistics", ["exports", "framework/utils"], function($scope, gma) {
    var add;
    var resolver;
    var self;
    var data;
    var statistics;
    var update;
    var f;
    var init;
    self = {
        config : null,
        providersDefaultParams : null
    };
    resolver = RSVP.defer();
    data = {};
    /**
     * @param {string} value
     * @return {?}
     */
    add = function(value) {
        var obj;
        return obj = new Image, obj.src = gma.utils.addRnd(value);
    };
    /**
     * @param {Array} mod
     * @param {string} doc
     * @param {Object} options
     * @return {?}
     */
    update = function(mod, doc, options) {
        return null == options && (options = {}), mod.map(function(opts) {
            var cache;
            var attributes;
            var fnName;
            var config;
            switch(opts.provider) {
                case "gtm":
                    cache = {
                        event : "pageview",
                        premium : null != opts.premium ? +opts.premium : void 0
                    };
                    for (fnName in data) {
                        data[fnName] = void 0;
                    }
                    if (config = _.extend({}, data, opts), attributes = _.omit(opts, ["type", "provider"]), _.extend(attributes, config, cache, options), null != self.config.gtm && self.config.gtm.id) {
                        return window.dataLayer.push(attributes), data = attributes;
                    }
                    break;
                case "wemf":
                    return init(opts, doc);
                case "webseismo":
                    return f(opts);
            }
        });
    };
    /**
     * @param {Object} opts
     * @param {string} optgroup
     * @return {?}
     */
    init = function(opts, optgroup) {
        var m;
        return m = "desktop" === self.config.env ? opts.desktop_url : opts.webapp_url ? opts.webapp_url : opts.url, "string" === $.type(optgroup) && (optgroup && (m = m.slice(0, m.lastIndexOf("/")).concat("/", optgroup))), add(m);
    };
    /**
     * @param {Object} opts
     * @return {?}
     */
    f = function(opts) {
        var udataCur;
        return udataCur = "desktop" === self.config.env ? opts.url_desktop : opts.url_webapp ? opts.url_webapp : opts.url, add(udataCur);
    };
    statistics = {
        /**
         * @param {string} viewport
         * @param {?} position
         * @return {?}
         */
        init : function(viewport, position) {
            return self.config = viewport, self.providersDefaultParams = position, null != self.config.gtm && (self.config.gtm.id && !window.googleTagManagerStarted) ? ((null != window.dataLayer ? window.dataLayer : window.dataLayer = []).push({
                "gtm.start" : (new Date).getTime(),
                event : "gtm.js"
            }), $.loadExternalScript("//www.googletagmanager.com/gtm.js?id=" + self.config.gtm.id).then(function() {
                return resolver.resolve();
            })) : resolver.resolve();
        },
        /**
         * @param {?} pagePath
         * @param {?} model_
         * @param {string} key
         * @param {?} pageTitle
         * @return {?}
         */
        trackPageView : function(pagePath, model_, key, pageTitle) {
            return this.track("wemf", model_, key);
        },
        /**
         * @param {string} context
         * @param {?} model
         * @param {string} eventName
         * @param {Object} callback
         * @return {?}
         */
        track : function(context, model, eventName, callback) {
            return null == callback && (callback = {}), resolver.promise.then(function() {
                switch(context) {
                    case "wemf":
                        return model.map(function(opts) {
                            return "wemf" === opts.provider ? init(opts, eventName) : "webseismo" === opts.provider ? f(opts) : void 0;
                        });
                    case "pageview":
                        return update(model, null, callback);
                }
            });
        },
        /**
         * @param {string} e
         * @param {Object} opt_attributes
         * @return {?}
         */
        trackGtmEvent : function(e, opt_attributes) {
            return null == opt_attributes && (opt_attributes = {}), resolver.promise.then(function() {
                if (null != self.config.gtm && self.config.gtm.id) {
                    return window.dataLayer.push(_.extend({}, {
                        event : e
                    }, opt_attributes));
                }
            });
        },
        /**
         * @param {?} execResult
         * @param {Object} overwrite
         * @param {string} deepDataAndEvents
         * @param {boolean} all
         * @return {?}
         */
        trackSlideshowSwipe : function(execResult, overwrite, deepDataAndEvents, all) {
            var row;
            return row = execResult.find(function($provide) {
                return "gtm" === $provide.provider;
            }), this.trackGtmEvent(all ? "slideshow-ad" : row.category, {
                slideshow_id : row.slideshow_id,
                slideshow_title : row.slideshow_title,
                event_action : "swipe",
                event_label : deepDataAndEvents,
                page : all ? void 0 : overwrite
            });
        }
    };
    $scope.statistics = statistics;
}), define("framework/store", ["exports"], function(win) {
    var Stream;
    var args;
    var read;
    var self;
    var store;
    self = {};
    self.config = {
        apiUrl : "/api",
        requestTimeout : 5E3,
        stream : true
    };
    args = {
        fronts : "page_elements",
        lists : "page_elements",
        categories : "page_elements",
        page_elements : ["articles", "slideshow_overviews.slideshows"],
        articles : ["top_element.slideshow", "inline_elements.slideshow", "article_elements.slideshow"],
        articleElements : "slideshow"
    };
    /**
     * @param {string} fileName
     * @param {Object} obj
     * @param {?} callback
     * @return {?}
     */
    read = function(fileName, obj, callback) {
        var value;
        var j;
        var _i;
        var _len;
        var key;
        var keys;
        var _results;
        keys = fileName.split(".");
        /** @type {Array} */
        _results = [];
        /** @type {number} */
        j = _i = 0;
        _len = keys.length;
        for (;_i < _len;j = ++_i) {
            if (key = keys[j], null != obj) {
                if ($.isArray(obj[key])) {
                    _results.push(function() {
                        var _i;
                        var _len;
                        var _ref;
                        var _results;
                        _ref = obj[key];
                        /** @type {Array} */
                        _results = [];
                        /** @type {number} */
                        _i = 0;
                        _len = _ref.length;
                        for (;_i < _len;_i++) {
                            value = _ref[_i];
                            if (j < keys.length - 1) {
                                _results.push(read(keys.slice(j + 1).join("."), value, callback));
                            } else {
                                _results.push(callback(keys[keys.length - 1], value));
                            }
                        }
                        return _results;
                    }());
                } else {
                    if (null == obj[key]) {
                        break;
                    }
                    if (j === keys.length - 1) {
                        _results.push(callback(key, obj[key]));
                    } else {
                        _results.push(obj = obj[key]);
                    }
                }
            }
        }
        return _results;
    };
    Stream = function() {
        /**
         * @param {string} stream
         * @return {undefined}
         */
        function self(stream) {
            /** @type {string} */
            this.stream = stream;
        }
        return self.prototype.stream = null, self.prototype.events = {}, self.prototype.queue = {}, self.prototype.node = function(dataAndEvents, selector) {
            return this.on("node-" + dataAndEvents, selector);
        }, self.prototype.done = function(selector) {
            return this.on("done", selector);
        }, self.prototype.on = function(type, wait) {
            var _ref1;
            var type_tracker;
            for (;(null != (type_tracker = this.queue[type]) ? type_tracker.length : void 0) > 0;) {
                wait.apply(this, $.makeArray(this.queue[type].shift().args));
            }
            return(null != (_ref1 = this.events)[type] ? _ref1[type] : _ref1[type] = []).push({
                /** @type {Function} */
                fn : wait
            });
        }, self.prototype.trigger = function(type, data) {
            var queue;
            var listener;
            var _i;
            var _len;
            var _ref;
            var _results;
            if (null != this.events[type]) {
                _ref = this.events[type];
                /** @type {Array} */
                _results = [];
                /** @type {number} */
                _i = 0;
                _len = _ref.length;
                for (;_i < _len;_i++) {
                    listener = _ref[_i];
                    _results.push(listener.fn.apply(this, $.makeArray(data)));
                }
                return _results;
            }
            return(null != (queue = this.queue)[type] ? queue[type] : queue[type] = []).push({
                args : data
            });
        }, self;
    }();
    store = {
        /**
         * @param {?} opt_attributes
         * @return {?}
         */
        configure : function(opt_attributes) {
            return $.extend(self.config, opt_attributes);
        },
        /**
         * @param {string} elem
         * @param {string} value
         * @return {?}
         */
        get : function(elem, value) {
            var j;
            var subLn;
            var path;
            var styleSheets;
            if (this[elem]) {
                if (!value) {
                    return path = {}, path[elem] = this[elem], path;
                }
                styleSheets = this[elem];
                /** @type {number} */
                j = 0;
                subLn = styleSheets.length;
                for (;j < subLn;j++) {
                    if (path = styleSheets[j], path.id.toString() === value.toString()) {
                        return path;
                    }
                }
            }
        },
        /**
         * @param {Text} topic
         * @param {Element} data
         * @return {?}
         */
        reload : function(topic, data) {
            var i;
            var id;
            var _j;
            var _ref1;
            var dataText;
            var module;
            if (id = data.id, module = data.subkey, dataText = data.subid, null != module && (topic = (topic.singularize() + "_" + module).camelCase()), null != dataText) {
                throw "store.reload with subid's is not implemented yet.";
            }
            if (this[topic]) {
                /** @type {number} */
                i = _j = _ref1 = this[topic].length - 1;
                for (;_ref1 <= 0 ? _j <= 0 : _j >= 0;i = _ref1 <= 0 ? ++_j : --_j) {
                    if (!(null != id && this[topic][i].id !== id)) {
                        this[topic].splice(i, 1);
                    }
                }
            }
            return this.load.apply(this, arguments);
        },
        /**
         * @param {string} arg
         * @param {?} opt_attributes
         * @return {?}
         */
        load : function(arg, opt_attributes) {
            var val;
            var node;
            var path;
            var _ref1;
            var item;
            var space;
            var id;
            var ol;
            return item = null != opt_attributes ? opt_attributes : {}, val = item.id, id = item.subkey, space = item.subid, _ref1 = item.query, node = item.node, path = item.nodeCallback, null == val && (val = ""), null != id ? (ol = self.config.apiUrl + "/" + arg + "/" + val + "/" + id, null != space && (ol += "/" + space), arg = (arg.singularize() + "_" + id).camelCase()) : ol = val ? self.config.apiUrl + "/" + arg + "/" + val : self.config.apiUrl + "/" + arg, new RSVP.Promise(function(el) {
                return function($sanitize, cb) {
                    var result;
                    var m;
                    var handler;
                    var stream;
                    return result = el.get(arg, val), null != result && (val && null == _ref1 || null != _ref1 && !val) ? $sanitize({
                        payload : result
                    }) : (null != _ref1 && (ol += "?" + function() {
                        var key;
                        var value;
                        return function() {
                            var headers;
                            /** @type {Array} */
                            headers = [];
                            for (key in _ref1) {
                                value = _ref1[key];
                                headers.push(key + "=" + value);
                            }
                            return headers;
                        }().join("&");
                    }()), null != node && self.config.stream ? (m = false, stream = new Stream(handler = oboe(ol).node(node, function(res, target, data) {
                        var src;
                        var obj;
                        var id;
                        return src = target[target.length - 1], id = target[target.length - 2], 0 === src ? (m = true, el.save(data[0]), $sanitize({
                            payload : data[0][arg.singularize()],
                            stream : stream,
                            node : node
                        })) : (obj = {}, obj[id] = res, el.save(obj)), stream.trigger("node-" + node, [res, target, data]);
                    }).done(function(i) {
                        return stream.isDone = true, el.save(i), stream.trigger("done", [i]);
                    }).fail(function(attributes) {
                        return cb($.extend(attributes, {
                            message : 'Stream .node("' + node + '"): Status ' + attributes.statusCode + ' "' + attributes.body + '" on: ' + ol
                        }));
                    })), setTimeout(function() {
                        if (!m) {
                            return handler.abort(), cb('Stream .node("' + node + '"): Timeout ' + self.config.requestTimeout + "ms reached: " + ol);
                        }
                    }, self.config.requestTimeout)) : $.get(ol).then(function(a) {
                        var r;
                        var t;
                        return(null != id || null == a[arg.singularize()] && null == _ref1) && (r = Object.keys(a)[0], t = arg.singularize(), a[t] = {}, a[t][r] = a[r].splice(0, a[r].length), a[t].id = val, delete a[r]), el.save(a), null != _ref1 && "" === val ? $sanitize({
                            payload : a
                        }) : ("" !== val && (a = a[arg.singularize()]), $sanitize({
                            payload : a
                        }));
                    }, function(outErr) {
                        return cb(outErr);
                    }));
                };
            }(this));
        },
        /**
         * @param {Object} target
         * @return {?}
         */
        save : function(target) {
            var copy;
            var i;
            var paramName;
            var valsLength;
            var fileName;
            var name;
            var codeSegments;
            var removed;
            var paths;
            /** @type {Array} */
            removed = [];
            for (name in target) {
                if (paramName = name.pluralize(), paramName in args) {
                    codeSegments = $.makeArray(args[paramName]);
                    /** @type {number} */
                    i = 0;
                    valsLength = codeSegments.length;
                    for (;i < valsLength;i++) {
                        fileName = codeSegments[i];
                        read(fileName, target[name], function(init) {
                            return function(key, res) {
                                var obj;
                                return obj = {}, obj[key] = res, init.save(obj);
                            };
                        }(this));
                    }
                }
                if (null == this[paramName]) {
                    /** @type {Array} */
                    this[paramName] = [];
                }
                if ($.isArray(target[name])) {
                    removed.push(function() {
                        var _i;
                        var _len;
                        var src;
                        var rulesets;
                        src = target[name];
                        /** @type {Array} */
                        rulesets = [];
                        /** @type {number} */
                        _i = 0;
                        _len = src.length;
                        for (;_i < _len;_i++) {
                            copy = src[_i];
                            paths = {};
                            paths[name] = copy;
                            rulesets.push(this.save(paths));
                        }
                        return rulesets;
                    }.call(this));
                } else {
                    if (this.get(name.pluralize(), target[name].id)) {
                        removed.push(void 0);
                    } else {
                        removed.push(this[paramName].push(target[name]));
                    }
                }
            }
            return removed;
        },
        /**
         * @param {Object} o
         * @return {?}
         */
        materialize : function(o) {
            var pos;
            var id;
            var table;
            var result;
            return id = o.id, table = o.key.pluralize(), null != o.rootKey && (table = o.rootKey.pluralize()), pos = 0, result = {}, $.get(self.config.apiUrl + "/" + table + "/" + id).then(function(m) {
                var save;
                return result = m[table.singularize()], null != o.rootKey && (table = o.key.pluralize()), (save = function(item, key, callback) {
                    var text;
                    if (item[key] && ((text = item[key]).length && (pos += text.length, _.chunk(text, 50).reverse().forEach(function(namespaces) {
                            return $.get(self.config.apiUrl + "/" + key + "/" + namespaces.join(",")).then(function(response) {
                                return response[key] || (response[key] = [response[key.singularize()]]), _.forEach(response[key], function(h) {
                                    var key1;
                                    var a;
                                    return item[key][item[key].indexOf(h.id)] = h, h.type && (key1 = h.type.replace(/^element_/, "").camelCase(), store.save((a = {}, a["" + key1] = h, a))), pos--, save(h, key, callback);
                                });
                            });
                        }))), 0 === pos) {
                        return callback(result);
                    }
                })(result, table, o.callback);
            });
        }
    };
    win.store = store;
}), define("framework/string", function() {
    if (null == String.prototype.trim) {
        !function() {
            var r20;
            return r20 = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, String.prototype.trim = function() {
                return this.replace(r20, "");
            };
        }();
    }
    /**
     * @return {?}
     */
    String.prototype.singularize = function() {
        return "ies" === this.slice(-3) ? this.slice(0, -3).concat("y") : "s" === this.slice(-1) ? this.slice(0, -1) : this;
    };
    /**
     * @return {?}
     */
    String.prototype.pluralize = function() {
        return "y" === this.slice(-1) ? this.slice(0, -1).concat("ies") : "s" !== this.slice(-1) ? this + "s" : this;
    };
    /**
     * @param {boolean} keepData
     * @return {?}
     */
    String.prototype.camelCase = function(keepData) {
        var r20;
        return null == keepData && (keepData = false), r20 = keepData ? new RegExp("(([-_]|^)[a-z])", "g") : new RegExp("(([-_])[a-z])", "g"), this.replace(r20, function(letter) {
            return letter.toUpperCase().replace(/[-_]/, "");
        });
    };
    /**
     * @return {?}
     */
    String.prototype.replaceNewLine = function() {
        var messageFormat;
        return messageFormat = $("<div>" + this + "</div>").html(), messageFormat.replace(/<br>/g, " ");
    };
}), define("framework/translations", ["exports"], function(defaults) {
    var $scope;
    var options;
    $scope = {};
    $scope.config = {
        language : "de"
    };
    options = {
        texts : {
            Frontseite : "Au top",
            "letztes Update" : "derni\u00e8re mise \u00e0 jour",
            "Letztes Update" : "Derni\u00e8re mise \u00e0 jour",
            Kommentare : "Commentaires",
            "Zur\u00fcck" : "Retour",
            Bild : "Image",
            Bilder : "Images",
            Video : "Vid\u00e9o",
            "Artikel zur Bildstrecke" : "Un article est li\u00e9 \u00e0 cette galerie",
            "Alle Bildstrecken" : "Toutes les galeries de photos",
            von : "de",
            vor : "il y a",
            Vor : "Il y a",
            "wenigen Sek" : "quelques secondes",
            Min : "min",
            Minuten : "minutes",
            Tg : "jrs",
            Tagen : "jours",
            Std : "h",
            Stunden : "heures",
            Mnt : "mois",
            Monaten : "mois",
            Jahr : "an",
            Jahren : "ans",
            Mehr : "Plus",
            Artikel : "Articles",
            Mo : "Lu",
            Di : "Ma",
            Mi : "Me",
            Do : "Je",
            Fr : "Ve",
            Sa : "Sa",
            So : "Di",
            Montag : "Lundi",
            Dienstag : "Mardi",
            Mittwoch : "Mercredi",
            Donnerstag : "Jeudi",
            Freitag : "Vendredi",
            Samstag : "Samedi",
            Sonntag : "Dimanche",
            Januar : "Janvier",
            Februar : "F\u00e9vrier",
            "M\u00e4rz" : "Mars",
            April : "Avril",
            Mai : "Mai",
            Juni : "Juin",
            Juli : "Juillet",
            August : "Ao\u00fbt",
            September : "Septembre",
            Oktober : "Octobre",
            November : "Novembre",
            Dezember : "D\u00e9cembre",
            Kommentar : "Commentaire",
            Empfehlen : "Recommander",
            Antworten : "R\u00e9pondre",
            Melden : "Signaler",
            Senden : "Envoyer",
            "Unbekannter Autor" : "Auteur inconnu",
            "Schreiben Sie einen Kommentar..." : "Laisser un commentaire...",
            "Verbleibende Anzahl Zeichen" : "Nombre de signes disponible",
            Vorname : "Pr\u00e9nom",
            Name : "Nom",
            PLZ : "NPA",
            Wohnort : "Lieu d'habitation",
            "E-Mail-Adresse" : "Adresse E-Mail",
            Grund : "Raison",
            "Ich habe die" : "J'ai pris connaissance des",
            Regeln : "conditions d'utilisation",
            "gelesen und erkl\u00e4re mich einverstanden" : "et les accepte",
            fehlt : "manquant",
            "Bitte geben Sie eine korrekte E-Mail-Adresse ein" : "Veuillez donner une adresse e-mail valide",
            "Bitte lesen und akzeptieren Sie die Regeln" : "Pri\u00e8re de lire et d'accepter les r\u00e8gles",
            "Bitte f\u00fcllen Sie alle Felder korrekt aus." : "Veuillez Veuillez remplir tous les champs correctement.",
            "Bitte f\u00fcllen Sie alle Felder korrekt aus und akzeptieren Sie die Regeln." : "Veuillez remplir tous les champs correctement et accepter les conditions.",
            "Dieser Kommentar wurde wegen Regelverletzung gel\u00f6scht" : "Ce commentaire a \u00e9t\u00e9 supprim\u00e9 car il ne respectait pas notre charte",
            "Kommentar versandt" : "Commentaire envoy\u00e9",
            "Kommentar gemeldet" : "Commentaire pr\u00e9venu",
            "Kommentar bearbeiten" : "Modifier le commentaire",
            "Vielen Dank f\u00fcr Ihren Beitrag. Ihr Kommentar wurde versandt. Bis er von der Redaktion freigeschaltet wird, kann es eine gewisse Zeit dauern." : "Merci pour votre contribution. Votre commentaire a \u00e9t\u00e9 envoy\u00e9. Veuillez pr\u00e9voir un d\u00e9lai avant qu'il ne soit valid\u00e9 par la r\u00e9daction.",
            "Danke. Unsere Moderatoren pr\u00fcfen Ihren Hinweis so schnell wie m\u00f6glich." : "Votre annonce va \u00eatre \u00e9tudi\u00e9e.",
            "Senden fehlgeschlagen" : "Echec de l'envoi",
            "Ihr Kommentar konnte aus technischen Gr\u00fcnden nicht \u00fcbermittelt werden." : "Votre commentaire n'a pas pu \u00eatre envoy\u00e9 pour des raisons techniques.",
            "Ihre Meldung konnte aus technischen Gr\u00fcnden nicht \u00fcbermittelt werden." : "Votre signalement n'a pas pu \u00eatre envoy\u00e9 pour des raisons techniques.",
            Neuste : "Les plus r\u00e9cents",
            Neuster : "Le plus r\u00e9cent",
            Beliebteste : "Les plus lus",
            "Wahl der Redaktion" : "Choix de la r\u00e9daction",
            "\u00c4lteste" : "Les plus anciens",
            "Regelverstoss melden" : "Signaler un abus",
            "Sie sind der Meinung, dass dieser Kommentar gel\u00f6scht werden sollte? Dann f\u00fcllen Sie bitte dieses Formular aus" : "Vous pensez que ce commentaire devrait \u00eatre supprim\u00e9? Alors SVP remplissez ce formulaire",
            "Mit Facebook anmelden" : "Se connecter via Facebook",
            Abmelden : "D\u00e9connecter",
            "Kommentar auf Facebook teilen" : "Partager commentaire sur Facebook",
            Teilen : "Partager",
            "Alle Kommentare anzeigen" : "Afficher tous les commentaires",
            "Facebook Login Fehler" : "Facebook Login Erreur",
            "Ein Login-Fehler ist aufgetreten. Bitte laden Sie die Seite neu und versuchen Sie sich erneut bei Facebook anzumelden." : "Une erreur s'est produite lors de la connexion. Merci de rafraichir la page et d'essayer \u00e0 nouveau de vous connecter avec votre compte facebook.",
            "Die anderen Spiele" : "Autres matchs",
            Frage : "Question",
            "Ihre Frage..." : "Votre question...",
            "Der Live-Chat wird moderiert. Die Redaktion wird ausgew\u00e4hlte Einsendungen ver\u00f6ffentlichen." : "Le live chat est mod\u00e9r\u00e9. La r\u00e9daction s\u00e9lectionnera parmi les messages re\u00e7us.",
            "Nachricht versandt" : "Message envoy\u00e9",
            "Vielen Dank f\u00fcr Ihren Beitrag. Ihre Nachricht wurde versandt. Die Redaktion wird ausgew\u00e4hlte Einsendungen ver\u00f6ffentlichen." : "Merci pour votre commentaire. Il a bien \u00e9t\u00e9 envoy\u00e9. La r\u00e9daction s\u00e9lectionnera parmi les messages re\u00e7us.",
            "Ihre Nachricht konnte aus technischen Gr\u00fcnden nicht \u00fcbermittelt werden." : "Votre message n'a pas pu \u00eatre envoy\u00e9 pour des raisons techniques. ",
            "Liveticker aktualisiert automatisch" : "Le ticker s'actualise automatiquement",
            "letzte Meldung %s" : "derni\u00e8re nouvelle %s",
            "Liveticker wird geladen..." : "Live en cours de chargement...",
            "Mehr anzeigen..." : "Afficher plus...",
            Unterkategorien : "Sous-rubriques",
            "Verbindung fehlgeschlagen, erneuter Versuch..." : "Echec de la connexion, nouvelle tentative en cours...",
            "Verbindung fehlgeschlagen, bitte versuchen Sie es sp\u00e4ter erneut." : "Echec de la connexion, veuillez r\u00e9essayer plus tard.",
            "Artikel teilen" : "Partager l\u2019article",
            Mail : "Mail",
            Twitter : "Twitter",
            Facebook : "Facebook",
            "Zur Desktop-Ansicht wechseln" : "Afficher le site web classique",
            "\u00dcber diese Version" : "Sur cette version",
            Werbung : "Publicit\u00e9",
            WERBUNG : "PUBLICIT\u00c9",
            "Meine Abos" : "Mon abonnement",
            Preis : "Prix",
            "\u00d6ffnen" : "Ouvrir",
            "Video Empfehlungen" : "Vid\u00e9os recommand\u00e9es",
            "auf Facebook" : "sur Facebook",
            "auf Twitter" : "sur Twitter",
            "Jetzt testen und unbegrenzten Zugriff auf tagesanzeiger.ch und die mobilen Apps geniessen." : "",
            "Alle Angebote anzeigen" : "",
            "Digitale Abos ab" : "",
            "CHF 1.- im ersten Monat." : "",
            Abonnieren : "Abonnements",
            Login : "Login",
            "Guten Tag" : "Bonjour",
            "Mein Konto" : "Mon Compte",
            Logout : "D\u00e9connexion",
            "Kommentare k\u00f6nnen nur am Desktop eingegeben werden." : "Les commentaires ne peuvent \u00eatre saisis que sur ordinateur.",
            "Ihre E-Mail Adresse" : "Adresse e-mail",
            "Bitte geben Sie eine g\u00fcltige E-Mail Adresse an." : "Veuillez entrer une adresse email valide.",
            "Vielen Dank f\u00fcr Ihre Anmeldung." : "Merci beaucoup pour votre inscription.",
            "Zum heutigen Newsletter" : "Pour la Newsletter d'aujourd'hui.",
            "Ein Serverfehler ist aufgetreten, versuchen Sie es sp\u00e4ter noch einmal." : "Probl\u00e8me de serveur - merci de r\u00e9essayer plus tard"
        },
        /**
         * @param {string} opt_attributes
         * @return {?}
         */
        configure : function(opt_attributes) {
            var id;
            var items;
            var added;
            var item;
            if ("string" == typeof opt_attributes && (opt_attributes = {
                    language : opt_attributes
                }), null != opt_attributes.language && ($scope.config.language = opt_attributes.language), null != opt_attributes.texts) {
                items = opt_attributes.texts;
                /** @type {Array} */
                added = [];
                for (id in items) {
                    item = items[id];
                    if (opt_attributes.texts.hasOwnProperty(id)) {
                        added.push(options.texts[id] = item);
                    }
                }
                return added;
            }
        },
        /**
         * @param {string} name
         * @return {?}
         */
        translate : function(name) {
            return "de" === $scope.config.language ? name : this.texts[name];
        }
    };
    defaults.translations = options;
}), define("framework/utils", ["exports", "framework/translations", "framework/LocalStorageQueue"], function(module, self, dataAndEvents) {
    var container;
    var $scope;
    var utils;
    $scope = {};
    $scope.config = {
        language : "de"
    };
    container = new dataAndEvents.LocalStorageQueue("Mobile.articlesRead");
    utils = {
        /**
         * @param {?} opt_attributes
         * @return {?}
         */
        configure : function(opt_attributes) {
            return $.extend($scope.config, opt_attributes);
        },
        /**
         * @param {string} putativeSpy
         * @return {?}
         */
        addRnd : function(putativeSpy) {
            return putativeSpy + "?_=" + (new Date).getTime();
        },
        /**
         * @param {?} m1
         * @return {?}
         */
        checkIfOneHourPassed : function(m1) {
            return(new Date).getTime() <= parseInt(m1) + 36E5;
        },
        /**
         * @return {?}
         */
        isProduction : function() {
            return window.location.hostname.toLowerCase().indexOf("mobile2") > -1;
        },
        /**
         * @param {boolean} dataAndEvents
         * @param {boolean} not
         * @return {?}
         */
        isCommentingAllowed : function(dataAndEvents, not) {
            var pass;
            return pass = [0, 6].indexOf((new Date).getDay()) < 0, dataAndEvents && pass || not && !pass;
        },
        /**
         * @return {?}
         */
        hideAddressBar : function() {
            return null == this.windowOuterHeight && (this.windowOuterHeight = window.outerHeight), document.body.style.height = this.windowOuterHeight + 1 + "px", window.scrollTo(0, 1);
        },
        /**
         * @param {?} html
         * @param {string} optgroup
         * @param {string} rvar
         * @return {?}
         */
        showDialog : function(html, optgroup, rvar) {
            var el;
            return el = $(html), el.one("click", function(event) {
                return event.delegateTarget.style.display = "none";
            }), el.find("h1").text(optgroup), el.find("h2").text(rvar), el.find(">div>div").empty(), el.show();
        },
        /**
         * @return {?}
         */
        isDch : function() {
            return "de" === $scope.config.language;
        },
        /**
         * @return {?}
         */
        getArticlesReadQueue : function() {
            return container;
        },
        /**
         * @param {string} selector
         * @param {Array} contextElem
         * @return {?}
         */
        extractInlineElements : function(selector, contextElem) {
            var i;
            var match;
            var rquickExpr;
            var colNames;
            /** @type {Array} */
            colNames = [];
            /** @type {RegExp} */
            rquickExpr = /\x3c!--{{inline_element\(['"]?([a-fA-F0-9]+)['"]?\)}}--\x3e/g;
            /** @type {number} */
            i = 0;
            for (;match = rquickExpr.exec(selector);) {
                if (match.index > i) {
                    colNames.push(match.input.substring(i, match.index));
                }
                colNames.push(contextElem.filter(function(m) {
                    return m.id === match[1];
                })[0]);
                /** @type {number} */
                i = match.index + match[0].length;
            }
            return i < selector.length && colNames.push(selector.substring(i, selector.length)), colNames;
        },
        /**
         * @param {?} cursor
         * @param {boolean} dataAndEvents
         * @return {?}
         */
        calculateAndInsertTime : function(cursor, dataAndEvents) {
            var $;
            return $ = this, cursor.each(function() {
                return dataAndEvents ? this.innerHTML = $.date.formatRelative(this.getAttribute("data-timestamp")) : this.innerHTML = $.date.formatTime(this.getAttribute("data-timestamp"));
            });
        },
        /**
         * @param {string} value
         * @return {?}
         */
        stripHtml : function(value) {
            if (value) {
                return value.replace(/<[^>]+>/g, "");
            }
        },
        date : {
            /**
             * @param {Date} date
             * @return {?}
             */
            format : function(date) {
                var position;
                var x;
                return position = ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"], x = ["Januar", "Februar", "M\u00e4rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"], date = new Date(1E3 * date), self.translations.translate(position[date.getDay()]) + " " + date.getDate() + function() {
                    return utils.isDch() ? ". " : " ";
                }() + self.translations.translate(x[date.getMonth()]) + " " + date.getFullYear();
            },
            /**
             * @param {Date} timestamp
             * @return {?}
             */
            formatShort : function(timestamp) {
                var label;
                var str;
                return timestamp = new Date(1E3 * timestamp), label = timestamp.getDate(), 1 === label.toString().length && (label = "0" + label), str = timestamp.getMonth() + 1, 1 === str.toString().length && (str = "0" + str), label + "." + str + "." + timestamp.getFullYear();
            },
            /**
             * @param {number} year
             * @return {?}
             */
            formatRelative : function(year) {
                var sectionLength;
                var expires;
                return isNaN((new Date(year)).getTime()) && (year *= 1E3), sectionLength = Math.round(((new Date).getTime() - (new Date(year)).getTime()) / 6E4), expires = "", expires = sectionLength >= 1051200 ? Math.floor(sectionLength / 60 / 24 / 365) + " " + self.translations.translate("Jahren") + "." : sectionLength >= 525600 ? Math.floor(sectionLength / 60 / 24 / 365) + " " + self.translations.translate("Jahr") + "." : sectionLength >= 43200 ? Math.floor(sectionLength / 60 / 24 / 30) + " " + self.translations.translate("Mnt") +
                    "." : sectionLength >= 1440 ? Math.floor(sectionLength / 60 / 24) + " " + self.translations.translate("Tg") + "." : sectionLength >= 60 ? Math.floor(sectionLength / 60) + " " + self.translations.translate("Std") + "." : sectionLength >= 1 ? sectionLength + " " + self.translations.translate("Min") + "." : self.translations.translate("wenigen Sek") + ".";
            },
            /**
             * @param {Date} timestamp
             * @return {?}
             */
            formatTime : function(timestamp) {
                var label;
                var str;
                return timestamp = new Date(1E3 * timestamp), label = timestamp.getHours(), 1 === label.toString().length && (label = "0" + label), str = timestamp.getMinutes(), 1 === str.toString().length && (str = "0" + str), label + ":" + str;
            },
            /**
             * @param {Date} timestamp
             * @return {?}
             */
            calculateLastUpdatedAt : function(timestamp) {
                var b;
                var ms;
                var s;
                return b = new Date / 1E3, timestamp = new Date(timestamp), ms = (b - timestamp.getTime()) / 60, s = 1440 - (60 * timestamp.getHours() + timestamp.getMinutes()), ms > s ? this.formatShort(timestamp) : this.formatTime(timestamp);
            }
        },
        /**
         * @param {string} child
         * @return {?}
         */
        isInvalidPageElement : function(child) {
            var whitespace;
            switch(child.boxtype) {
                case "meteonews":
                    ;
                case "iframe":
                    ;
                case "socialmedia_like":
                    ;
                case "recommender":
                    return false;
                case "articles":
                    return whitespace = [null, "analyse", "breaking-news", "collection", "front", "horizontal-slide", "multimedia", "publireportage", "storybundle"], null != child.layout_type && whitespace.indexOf(child.layout_type) < 0;
                default:
                    return true;
            }
        },
        /**
         * @param {Object} arr
         * @param {?} html
         * @param {Object} opt_attributes
         * @return {?}
         */
        loopThroughArticlePreviews : function(arr, html, opt_attributes) {
            var element;
            var item;
            var color;
            var i;
            var _i;
            var _len;
            var aDecl;
            var suiteView;
            if (null == opt_attributes) {
                opt_attributes = {};
            }
            /** @type {Array} */
            aDecl = [];
            /** @type {number} */
            i = _i = 0;
            _len = arr.length;
            for (;_i < _len;i = ++_i) {
                item = arr[i];
                if (opt_attributes.specialIndex) {
                    i += opt_attributes.specialIndex;
                }
                element = $(html).eq(i);
                if (null != opt_attributes.trackingInfo) {
                    element.on("click", {
                        index : i
                    }, function(e) {
                        var element_position_relative;
                        var attributes;
                        return element_position_relative = e.data.index + 1, attributes = {
                            page_element : opt_attributes.trackingInfo.page_element,
                            element_position_relative : element_position_relative,
                            element_position_absolute : opt_attributes.trackingInfo.element_position_offset + element_position_relative
                        }, opt_attributes.router.setTrackingInfo(attributes);
                    });
                }
                if (null != opt_attributes.articlesRead) {
                    if (container.contains(item.id)) {
                        $(html).find("a[href*='" + item.id + "']").addClass("read");
                    }
                }
                if (null != opt_attributes.socialCounter) {
                    suiteView = element.find(".socialCounter")[0];
                    if (null != suiteView) {
                        opt_attributes.socialMedia.insert(suiteView, item.id, {
                            isAggregated : true,
                            dialogBox : "#shareDialog",
                            router : opt_attributes.router,
                            legacyId : item.legacy_id
                        });
                    }
                }
                if (null != opt_attributes.colorize) {
                    if (opt_attributes.colorize.color) {
                        color = opt_attributes.colorize.color;
                    } else {
                        if ("front" === opt_attributes.colorize.type) {
                            color = item.category_for_site.color;
                        }
                    }
                    if ("category" === opt_attributes.colorize.type && element.hasClass("featured") || "front" === opt_attributes.colorize.type) {
                        element.css("background-color", "#" + color);
                    } else {
                        element.find(".keyword").css("color", "#" + color);
                    }
                    aDecl.push(element.find(".socialCounter").css("background-color", "#" + color));
                } else {
                    aDecl.push(void 0);
                }
            }
            return aDecl;
        },
        /**
         * @param {?} data
         * @param {string} text
         * @param {string} style
         * @param {string} color
         * @return {?}
         */
        colorize : function(data, text, style, color) {
            return $(data).find(text).css(style, "#" + color);
        },
        /**
         * @param {string} header
         * @return {?}
         */
        markArticleAsRead : function(header) {
            return $("a[href*='" + header + "']").addClass("read"), container.add(header);
        }
    };
    module.utils = utils;
}), define("framework/uuid", ["exports"], function(base) {
    /**
     * @return {?}
     */
    function Mash() {
        /** @type {number} */
        var n = 4022871197;
        /**
         * @param {string} data
         * @return {?}
         */
        var mash = function(data) {
            data = data.toString();
            /** @type {number} */
            var i = 0;
            for (;i < data.length;i++) {
                n += data.charCodeAt(i);
                /** @type {number} */
                var h = 0.02519603282416938 * n;
                /** @type {number} */
                n = h >>> 0;
                h -= n;
                h *= n;
                /** @type {number} */
                n = h >>> 0;
                h -= n;
                n += 4294967296 * h;
            }
            return 2.3283064365386963E-10 * (n >>> 0);
        };
        return mash.version = "Mash 0.9", mash;
    }
    /**
     * @return {?}
     */
    function Alea() {
        return function(args) {
            /** @type {number} */
            var s0 = 0;
            /** @type {number} */
            var s1 = 0;
            /** @type {number} */
            var s2 = 0;
            /** @type {number} */
            var c = 1;
            /** @type {Array} */
            var matches = [];
            /** @type {number} */
            var idx = 0;
            var mash = Mash();
            s0 = mash(" ");
            s1 = mash(" ");
            s2 = mash(" ");
            /** @type {number} */
            var sel = 0;
            for (;sel < 8;sel++) {
                matches[sel] = mash(" ");
            }
            if (0 == args.length) {
                /** @type {Array} */
                args = [+new Date];
            }
            /** @type {number} */
            var i = 0;
            for (;i < args.length;i++) {
                s0 -= mash(args[i]);
                if (s0 < 0) {
                    s0 += 1;
                }
                s1 -= mash(args[i]);
                if (s1 < 0) {
                    s1 += 1;
                }
                s2 -= mash(args[i]);
                if (s2 < 0) {
                    s2 += 1;
                }
                /** @type {number} */
                sel = 0;
                for (;sel < 8;sel++) {
                    matches[sel] -= mash(args[i]);
                    if (matches[sel] < 0) {
                        matches[sel] += 1;
                    }
                }
            }
            /**
             * @return {?}
             */
            var random = function() {
                /** @type {number} */
                var a01 = 2091639;
                /** @type {number} */
                idx = 8 * matches[idx] | 0;
                var filename = matches[idx];
                /** @type {number} */
                var t = a01 * s0 + 2.3283064365386963E-10 * c;
                return s0 = s1, s1 = s2, s2 = t - (c = 0 | t), matches[idx] -= s2, matches[idx] < 0 && (matches[idx] += 1), filename;
            };
            return random.uint32 = function() {
                return 4294967296 * random();
            }, random.fract53 = function() {
                return random() + 1.1102230246251565E-16 * (2097152 * random() | 0);
            }, random.addNoise = function() {
                /** @type {number} */
                var i = arguments.length - 1;
                for (;i >= 0;i--) {
                    /** @type {number} */
                    sel = 0;
                    for (;sel < 8;sel++) {
                        matches[sel] -= mash(arguments[i]);
                        if (matches[sel] < 0) {
                            matches[sel] += 1;
                        }
                    }
                }
            }, random.version = "Kybos 0.9", random.args = args, random;
        }(Array.prototype.slice.call(arguments));
    }
    var floor = Alea();
    var options = {
        empty : "00000000-0000-0000-0000-000000000000",
        /**
         * @param {?} string
         * @return {?}
         */
        parse : function(string) {
            var result = string.toString().trim().toLowerCase().replace(/^[\s\r\n]+|[\{\}]|[\s\r\n]+$/g, "");
            if (/[a-f0-9]{8}\-[a-f0-9]{4}\-[a-f0-9]{4}\-[a-f0-9]{4}\-[a-f0-9]{12}/.test(result)) {
                return result;
            }
            throw new Error("Unable to parse UUID");
        },
        /**
         * @return {?}
         */
        createSequential : function() {
            /** @type {string} */
            var hex = (new Date).valueOf().toString(16).replace("-", "");
            for (;hex.length < 12;hex = "0" + hex) {
            }
            /** @type {string} */
            hex = hex.substr(hex.length - 12, 12);
            for (;hex.length < 32;hex += Math.floor(4294967295 * floor()).toString(16)) {
            }
            return[hex.substr(0, 8), hex.substr(8, 4), "4" + hex.substr(12, 3), "89AB"[Math.floor(4 * Math.random())] + hex.substr(16, 3), hex.substr(20, 12)].join("-");
        },
        /**
         * @return {?}
         */
        create : function() {
            /** @type {string} */
            var headBuffer = "";
            for (;headBuffer.length < 32;headBuffer += Math.floor(4294967295 * floor()).toString(16)) {
            }
            return[headBuffer.substr(0, 8), headBuffer.substr(8, 4), "4" + headBuffer.substr(12, 3), "89AB"[Math.floor(4 * Math.random())] + headBuffer.substr(16, 3), headBuffer.substr(20, 12)].join("-");
        },
        /**
         * @return {?}
         */
        random : function() {
            return floor();
        },
        /**
         * @param {?} source
         * @return {?}
         */
        tryParse : function(source) {
            try {
                return options.parse(source);
            } catch (b) {
                return options.empty;
            }
        }
    };
    /** @type {function (): ?} */
    options.new = options.create;
    base.UUID = options;
}), define("framework/viewManager", ["exports"], function(eventHandle) {
    var elem;
    elem = {
        /**
         * @param {string} str
         * @param {string} optgroup
         * @param {string} name
         * @return {?}
         */
        renderTemplate : function(str, optgroup, name) {
            return null == name && (name = str), $("#" + str).html(require("app/templates/" + name).default(optgroup));
        },
        /**
         * @param {string} x
         * @param {?} positions
         * @return {?}
         */
        show : function(x, positions) {
            return new RSVP.Promise(function(dataAndEvents) {
                return function($sanitize) {
                    return $("section").hide(), $("#" + x).css("zIndex", 3).show(), $sanitize();
                };
            }(this));
        }
    };
    eventHandle.viewManager = elem;
}), define("app/app", ["app/config", "framework/jquery", "app/viewManager", "framework/dialog/dialog", "framework/handlebars/module", "framework/string", "framework/router", "framework/store", "framework/browser", "framework/utils", "framework/translations"], function(self, dataAndEvents, deepDataAndEvents, w, Client, ignoreMethodDoesntExist, app, i18n, row, Backbone, gyp) {
    var children;
    var $col;
    var pages;
    var m1;
    var irm;
    var vml;
    if (!row.browser.supportsRequirements(self.config.browserRequirements)) {
        throw "Browser not supported";
    }
    Client.handlebars.configure(self.config);
    Client.handlebars.init();
    i18n.store.configure({
        apiUrl : self.config.apiUrl,
        requestTimeout : self.config.requestTimeout,
        stream : self.config.stream
    });
    gyp.translations.configure(self.config.language);
    Backbone.utils.configure(self.config);
    if (self.config.internalConsole) {
        /**
         * @return {?}
         */
        console.log = function() {
            var args;
            return args = [].splice.call(arguments, 0), $("#log").show().prepend("<div>" + args.join("::") + "</div>");
        };
    }
    $(document.body).on("touchstart", function() {
        if (row.browser.isDefaultAndroid()) {
            return Backbone.utils.hideAddressBar();
        }
    });
    Handlebars.registerPartial("ad", function(optgroup) {
        return require("app/templates/ad").default(optgroup);
    });
    Handlebars.registerPartial("contextBox", function(optgroup) {
        return require("app/templates/contextBox").default(optgroup);
    });
    Handlebars.registerPartial("pollBox", function(optgroup) {
        return require("app/templates/pollBox").default(optgroup);
    });
    Handlebars.registerPartial("iframe", function(optgroup) {
        return require("app/templates/iframe").default(optgroup);
    });
    Handlebars.registerPartial("pageElement", function(optgroup) {
        return require("app/templates/pageElement").default(optgroup);
    });
    Handlebars.registerPartial("recommenderPageElement", function(optgroup) {
        return require("app/templates/recommenderPageElement").default(optgroup);
    });
    Handlebars.registerPartial("articlePreview", function(optgroup) {
        return require("app/templates/articlePreview").default(optgroup);
    });
    Handlebars.registerPartial("articlePreviews/teaser", function(optgroup) {
        return require("app/templates/articlePreviews/teaser").default(optgroup);
    });
    Handlebars.registerPartial("articlePreviews/teaserWide", function(optgroup) {
        return require("app/templates/articlePreviews/teaserWide").default(optgroup);
    });
    Handlebars.registerPartial("articlePreviews/teaserWideExtended", function(optgroup) {
        return require("app/templates/articlePreviews/teaserWideExtended").default(optgroup);
    });
    Handlebars.registerPartial("articlePreviews/teaserCollection", function(optgroup) {
        return require("app/templates/articlePreviews/teaserCollection").default(optgroup);
    });
    Handlebars.registerPartial("articlePreviews/teaserQuote", function(optgroup) {
        return require("app/templates/articlePreviews/teaserQuote").default(optgroup);
    });
    Handlebars.registerPartial("articlePreviews/teaserHtml", function(optgroup) {
        return require("app/templates/articlePreviews/teaserHtml").default(optgroup);
    });
    Handlebars.registerPartial("articlePreviews/teaserBreakingNews", function(optgroup) {
        return require("app/templates/articlePreviews/teaserBreakingNews").default(optgroup);
    });
    Handlebars.registerPartial("menuItem", function(optgroup) {
        return require("app/templates/menuItem").default(optgroup);
    });
    if (Backbone.utils.isProduction() && window.location.search.indexOf("activateDeveloperMode") > -1 || !Backbone.utils.isProduction()) {
        /** @type {boolean} */
        self.config.isDebugMode = true;
    }
    if (window.location.search.indexOf("noNavigation") > -1) {
        /** @type {boolean} */
        self.config.noNavigation = true;
    }
    if (window.location.search.indexOf("enableDFPAds") > -1) {
        localStorage.setItem("dfp_ads_enabled", true);
    }
    RSVP.on("error", function(optgroup) {
        if (null != ("undefined" != typeof console && null !== console ? console.error : void 0) && optgroup) {
            return null != optgroup.stack ? console.error(optgroup.stack) : console.error(optgroup);
        }
    });
    if (self.config.isDebugMode) {
        if (!row.browser.isLocalhost()) {
            $(window).on("error", function(event) {
                return alert("Script Error in " + event.originalEvent.filename + ":" + event.originalEvent.lineno + ":" + event.originalEvent.colno + " " + event.originalEvent.message);
            });
        }
    }
    $(document.body).on("click", function(evt) {
        var groups;
        if (groups = $(evt.target).closest("a[data-isLinkTo='true']") || $(evt.target).closest("a[data-islinkto='true']"), groups.length) {
            return evt.preventDefault(), app.router.transitionTo(groups.attr("href"));
        }
    });
    if (self.config.noNavigation) {
        $("html").addClass("noNavigation");
    }
    if (self.config.noHeader) {
        $("html").addClass("noHeader");
    }
    if (self.config.isNativeApp) {
        $("html").addClass("noSharing");
    }
    $col = $("#" + self.config.shortName + "homescreen");
    if ($col.length) {
        $("head").append($col.html().replace(/\/\*|\*\/|\*|\n/g, "").trim());
    }
    pages = $("meta[name=apple-mobile-web-app-title]");
    if (pages.length) {
        pages[0].content = self.config.customers[self.config.currentCustomer].shortName;
    }
    if ("12app" === self.config.customer) {
        if (self.config.appleAppId) {
            if ((children = $("meta[name=apple-itunes-app]")).length) {
                vml = app.router.getRouteInfo(row.browser.getPathname());
                if ("articles" === vml.path && vml.id) {
                    /** @type {string} */
                    children[0].content = "app-id=" + self.config.appleAppId + ", app-argument=app12://" + vml.id;
                } else {
                    /** @type {string} */
                    children[0].content = "app-id=" + self.config.appleAppId;
                }
            }
        }
    }
    try {
        if (m1 = localStorage.getItem("Tweak.ads.off")) {
            if (Backbone.utils.checkIfOneHourPassed(m1)) {
                /** @type {boolean} */
                self.config.ads.enabled = false;
            }
        }
    } catch (r) {
    }
    try {
        if (irm = localStorage.getItem("Tweak.paywall.off")) {
            if (Backbone.utils.checkIfOneHourPassed(irm)) {
                /** @type {boolean} */
                self.config.paywall.enabled = false;
            }
        }
    } catch (r) {
    }
    if (!document.getElementsByTagName("body")[0]) {
        document.getElementsByTagName("html")[0].appendChild(document.createElement("body"));
    }
    FastClick.attach(document.body);
    app.router.configure(self.config);
    ["application", "front", "article", "slideshow", "category", "weather", "comment", "video"].forEach(function(path) {
        return app.router.register(path, require("app/routes/" + path).default);
    });
    $("body").append(require("app/templates/application").default());
    w.dialog.init();
    app.router.init();
}), define("app/config", ["exports"], function(__exports__) {
    var config;
    config = require("framework/config").config;
    config.configure({
        env : "mobile",
        appId : "TamediaAG; Newsnet; Webapp; 1.322.0-23",
        browserRequirements : {
            MSIE : "10",
            Android : "4"
        },
        ads : {
            enabled : true
        }
    });
    __exports__.config = config;
}), define("app/routes/application", ["exports", "framework/browser", "framework/utils", "framework/store", "framework/statistics", "framework/ads/ads", "framework/paywallInterface", "framework/paywallEventHandler", "framework/viewManager", "framework/translations", "framework/socialMedia/socialMedia", "app/config"], function(param, b, gma, ignoreMethodDoesntExist, $scope, self, $window, deepDataAndEvents, $z, textAlt, i18n, module) {
    var supersurface;
    var dataAndEvents;
    var enabled;
    var render;
    var def;
    $window.paywallInterface.configure(module.config);
    i18n.socialMedia.configure(module.config);
    /** @type {boolean} */
    supersurface = true;
    /** @type {null} */
    enabled = null;
    /**
     * @param {Object} options
     * @return {?}
     */
    render = function(options) {
        var $document;
        return $document = $("#leftMenu"), $z.viewManager.renderTemplate("leftMenu", {
            config : module.config,
            site : this.store.get("sites", "default"),
            navigations : this.store.get("navigations").navigations
        }), module.config.paywall.enabled && (enabled = ReactDOM.render(React.createElement(require("framework/paywallUserNavigation/PaywallUserNavigation/component").default, {
            interface : $window.paywallInterface,
            eventHandler : deepDataAndEvents.paywallEventHandler
        }), $document.find(".paywallUserNavigation")[0])), $document.find("a.category").on("click", function(dataAndEvents) {
            return function(types) {
                var rvar;
                return rvar = types.delegateTarget.pathname, types.preventDefault(), $document.find("a.category").removeClass("active"), $document.find("a.category[href='" + rvar + "']").addClass("active"), dataAndEvents.router.transitionTo(rvar);
            };
        }(this)), $document.find("a.category").removeClass("active"), $document.find("a.category[href='" + options.to.pathname + "']").addClass("active"), $document.find("a[name='disableAds']").on("click", function(dataAndEvents) {
            try {
                localStorage.setItem("Tweak.ads.off", (new Date).getTime());
            } catch (b) {
            }
            return location.reload();
        }), $document.find("a[name='disablePaywall']").on("click", function(dataAndEvents) {
            try {
                localStorage.removeItem("Tweak.paywall.on");
                localStorage.setItem("Tweak.paywall.off", (new Date).getTime());
            } catch (b) {
            }
            return location.reload();
        }), $document.find("a[name='enablePaywall']").on("click", function(dataAndEvents) {
            try {
                localStorage.removeItem("Tweak.paywall.off");
                localStorage.setItem("Tweak.paywall.on", (new Date).getTime());
            } catch (b) {
            }
            return location.reload();
        });
    };
    /** @type {boolean} */
    dataAndEvents = true;
    setInterval(function() {
        return "lematin" === module.config.currentCustomer && (dataAndEvents = false), gma.utils.calculateAndInsertTime($("#viewport time[data-timestamp]"), dataAndEvents);
    }, 1E3);
    def = {
        /**
         * @return {?}
         */
        loadData : function() {
            var eventPath;
            return eventPath = [], eventPath.push(this.store.load("sites", {
                id : "default"
            }).then(function(security_context) {
                var m1;
                try {
                    if (m1 = localStorage.getItem("Tweak.paywall.on")) {
                        if (gma.utils.checkIfOneHourPassed(m1)) {
                            /** @type {number} */
                            security_context.payload.paywall_status = 2;
                        }
                    }
                } catch (d) {
                }
                if (0 === security_context.payload.paywall_status) {
                    return module.config.paywall.enabled = false;
                }
            })), module.config.isDebugMode ? eventPath.push(this.store.load("navigations", {
                query : {
                    client : "webapp",
                    test : "true"
                }
            })) : eventPath.push(this.store.load("navigations", {
                query : {
                    client : "webapp"
                }
            })), eventPath;
        },
        /**
         * @param {Object} options
         * @param {?} _xhr
         * @return {?}
         */
        afterRerender : function(options, _xhr) {
            return $("#" + options.to.routeName + " .fullscreenLoader").hide(), $("#" + options.to.routeName + " header .left .back").on("click", function(self) {
                return function(types) {
                    return types.preventDefault(), self.router.back();
                };
            }(this)), $("#" + options.to.routeName + " header .left .toggle").on("click", function(dataAndEvents) {
                return function(types) {
                    return types.preventDefault(), $z.viewManager.toggleLeftMenu(options.to.routeName).then(function() {
                        return $scope.statistics.track("wemf", _xhr.external_services.statistics, "menu");
                    });
                };
            }(this)), $("#" + options.to.routeName + " header .customerLogo").on("click", function(dataAndEvents) {
                return function(types) {
                    return types.preventDefault(), dataAndEvents.router.transitionTo("/").then(function(script) {
                        return b.browser.scrollTop($("#" + script.to.routeName + " article"));
                    });
                };
            }(this)), $("#" + options.to.routeName + " article iframe").on("contentResize", function(deepDataAndEvents, ignoreMethodDoesntExist, optgroup, textAlt, dataAndEvents) {
                if (optgroup !== dataAndEvents) {
                    return $(this).height(optgroup);
                }
            });
        },
        /**
         * @param {Object} options
         * @return {?}
         */
        afterStream : function(options) {
            return b.browser.addAndroidScrollFix($("#" + options.to.routeName + " article"));
        },
        /**
         * @param {Object} data
         * @param {string} user
         * @return {?}
         */
        enter : function(data, user) {
            var container;
            var returnStr;
            var app;
            var ads;
            var sub_channel;
            var userRole;
            var results;
            var duration;
            return render.call(this, data), app = new Ghostbuster, returnStr = null != (ads = user.external_services.ads) ? ads.main_channel : void 0, null != (null != (sub_channel = user.external_services.ads) ? sub_channel.sub_channel : void 0) && (returnStr += "/" + user.external_services.ads.sub_channel), self.ads.configure(module.config), self.ads.configure({
                scrollContainer : $("#" + data.to.routeName + " article")[0],
                debugMode : false,
                adInfo : {
                    adUnitId : returnStr
                }
            }), null != user.legacy_id && (container = {
                storyid : user.legacy_id
            }), supersurface ? (self.ads.configure({
                siteId : this.store.get("sites", "default").dfp_site_identifier
            }), self.ads.init(container), self.ads.addCustomParam("userloggedin", "" + (null != $window.paywallInterface.getPaywallUserData())), duration = {
                gtm : {
                    id : this.store.get("sites", "default").gtm_id
                }
            }, $scope.statistics.init(duration, {}), b.browser.isDefaultAndroid() && gma.utils.hideAddressBar(), $window.paywallInterface.configure($.extend({}, module.config, {
                paywall_status : this.store.get("sites", "default").paywall_status,
                eventHandler : deepDataAndEvents.paywallEventHandler
            })), $window.paywallInterface.init().then(function(elems) {
                return function(dataAndEvents) {
                    var survey;
                    if (render.call(elems, data), app.run(function(dataAndEvents) {
                            if (dataAndEvents) {
                                return $scope.statistics.trackGtmEvent("Adblocker", {
                                    action : "detection"
                                });
                            }
                        }), null != (null != (survey = module.config.wemf) ? survey.survey : void 0)) {
                        return window.szmvars = module.config.wemf.survey.szmvars, window.szmopt = {
                            mobile : true
                        }, $.loadExternalScript(module.config.wemf.survey.url);
                    }
                };
            }(this))) : self.ads.updateView(container), self.ads.registerAds([{
                adUnitName : "overlay",
                targetContainerId : "ad-overlay-" + data.to.routeName
            }, {
                adUnitName : "inside-full-top",
                targetContainerId : "ad-inside-full-top-" + data.to.routeName,
                adHeader : require("app/templates/adTitle").default()
            }]), self.ads.displayAds(), null != (null != user && null != (userRole = user.external_services) ? userRole.paywall : void 0) && ($window.paywallInterface.track(user.external_services.paywall), app.run(function(ignore) {
                return $window.paywallInterface.track_pagecomplete($.extend({}, user.external_services.paywall, {
                    adblock : ignore ? "full" : "no"
                }));
            })), "comment" !== data.to.routeName && ("slideshow" !== data.to.routeName && (null != (null != user ? user.external_services : void 0) && $scope.statistics.track("pageview", user.external_services.statistics, null, {
                uid : null != (results = $window.paywallInterface.getPaywallUserData()) ? results.user_id : void 0,
                page_element : this.router.getTrackingInfo().page_element,
                element_position_relative : this.router.getTrackingInfo().element_position_relative,
                element_position_absolute : this.router.getTrackingInfo().element_position_absolute
            }))), this.router.setTrackingInfo({}), supersurface = false;
        }
    };
    param.default = def;
}), define("app/routes/article", ["exports", "app/config", "framework/browser", "framework/utils", "framework/statistics", "framework/ads/ads", "framework/viewManager", "framework/translations", "framework/poll/module", "framework/slideshow/slideshow", "framework/scoreboard/scoreboard", "framework/liveticker/liveticker", "framework/listicles/listicle", "framework/smartAppBanner/module", "framework/socialMedia/socialMedia", "framework/newsletter/newsletter", "framework/paywallInterface"], function(param,
data, b, gma, opt_user, $scope, $z, a, Router, nv, DE, lang, DreamE, $window, locale, i18n, dataAndEvents) {
    var self;
    var destroy;
    var getTemplate;
    var feed;
    var selector;
    var find;
    var init;
    var def;
    var vec;
    var bucket;
    var resolver;
    Router.poll.configure(data.config.apiUrl);
    /** @type {Array} */
    bucket = [];
    /** @type {null} */
    vec = null;
    /** @type {null} */
    feed = null;
    resolver = RSVP.defer();
    /**
     * @return {?}
     */
    getTemplate = function() {
        switch(data.config.currentCustomer) {
            case "12app":
                return "articles/" + data.config.currentCustomer + "Article";
            default:
                return "articles/article";
        }
    };
    /**
     * @param {boolean} isXML
     * @param {?} seed
     * @param {?} results
     * @return {?}
     */
    find = function(isXML, seed, results) {
        return this.store.load("polls", {
            id : results.poll_id
        }).then(function(dataAndEvents) {
            return function(container) {
                return Router.poll.init(container, container.payload.id, seed.external_services.statistics, isXML);
            };
        }(this));
    };
    /**
     * @param {string} bindingContext
     * @return {?}
     */
    init = function(bindingContext) {
        return RSVP.all([$.loadExternalScript("https://platform.twitter.com/widgets.js"), $.loadExternalScript("https://platform.instagram.com/" + data.config.locale + "/embeds.js"), $.loadExternalScript("https://connect.facebook.net/" + data.config.locale + "/sdk.js#xfbml=1&version=v2.3&appId=" + data.config.facebook.init.appId)]).then(function() {
            return resolver.resolve();
        }), (init = function(source) {
            return resolver.promise.then(function() {
                if (null == source && (source = $("#article article").get(0)), null != source) {
                    return twttr.widgets.load(source), instgrm.Embeds.process(), FB.XFBML.parse(source);
                }
            });
        })();
    };
    /**
     * @param {Array} worlds
     * @param {?} err
     * @return {?}
     */
    self = function(worlds, err) {
        var i;
        var max;
        var rulesets;
        var paths;
        /** @type {Array} */
        rulesets = [];
        /** @type {number} */
        i = 0;
        max = worlds.length;
        for (;i < max;i++) {
            paths = worlds[i];
            rulesets.push(function(server) {
                return function(elem) {
                    var value;
                    var data;
                    var camelKey;
                    return camelKey = elem.getAttribute("data-id"), data = server.store.get("slideshows", camelKey), value = new nv.Slideshow(elem, data.pictures, {
                        ads : false,
                        pagination : true,
                        /**
                         * @param {Object} photo
                         * @param {?} extent
                         * @return {?}
                         */
                        getImageUrl : function(photo, extent) {
                            return photo.url;
                        },
                        /**
                         * @param {Object} options
                         * @param {number} el
                         * @param {?} callback
                         * @return {?}
                         */
                        getImageCaption : function(options, el, callback) {
                            return $(callback({
                                slideshowTitle : data.title,
                                title : options.title,
                                caption : options.caption,
                                annotation : function() {
                                    var image;
                                    var herecomment;
                                    if ("picture" === options.annotation_type && (options.photographer || options.provider)) {
                                        return a.translations.translate("Bild") + ": " + (null != (image = options.photographer) ? image : "") + (options.photographer && options.provider ? "/" : "") + (null != (herecomment = options.provider) ? herecomment : "");
                                    }
                                }(),
                                isFirstPicture : 0 === el,
                                imageCount : this.getImageCount(),
                                linkUrl : options.link_url,
                                linkText : options.link_title
                            })).applyTargetToLinks("_blank");
                        },
                        /**
                         * @return {?}
                         */
                        getRenderMode : function() {
                            return "mobile";
                        }
                    }), $(value).on("beforeTransition", function(m, dataAndEvents, overwrite, deepDataAndEvents) {
                        if ("fullscreen" === deepDataAndEvents) {
                            return m.cancelTransition = true, server.router.transitionTo("/slideshows/" + camelKey + "/image/" + (overwrite + 1)).then(function(dataAndEvents) {
                                return opt_user.statistics.trackSlideshowSwipe(data.external_services.statistics, overwrite, deepDataAndEvents);
                            });
                        }
                    }).on("afterSlide", function(deepDataAndEvents, dataAndEvents, overwrite, ignoreMethodDoesntExist) {
                        return opt_user.statistics.trackSlideshowSwipe(data.external_services.statistics, overwrite, "embedded", !dataAndEvents), opt_user.statistics.track("wemf", data.external_services.statistics);
                    }), value.show(), bucket.push(value);
                };
            }(this)(paths));
        }
        return rulesets;
    };
    /**
     * @param {Object} full
     * @return {?}
     */
    destroy = function(full) {
        var returnElement;
        var i;
        var cacheIndex;
        var target;
        var cache;
        var _results;
        cache = full.find(".NnSlideshow");
        /** @type {Array} */
        _results = [];
        /** @type {number} */
        cacheIndex = 0;
        target = cache.length;
        for (;cacheIndex < target;cacheIndex++) {
            returnElement = cache[cacheIndex];
            _results.push(function() {
                var _i;
                var _ref;
                var _results2;
                /** @type {Array} */
                _results2 = [];
                /** @type {number} */
                i = _i = _ref = bucket.length - 1;
                for (;_i >= 0;i = _i += -1) {
                    if (bucket[i].getDomNode() === returnElement) {
                        bucket[i].destroy();
                        _results2.push(bucket.splice(i, 1));
                    } else {
                        _results2.push(void 0);
                    }
                }
                return _results2;
            }());
        }
        return _results;
    };
    selector = function(opt_attributes) {
        return function(dataAndEvents) {
            if (!feed.isLimitReached() && $("#article article .livetickerContainer .footer .loader").isInViewport()) {
                return feed.increaseLimit();
            }
        };
    }(void 0);
    def = {
        urlPattern : "/articles/[id]",
        animationDirection : "rightToLeft",
        /**
         * @return {?}
         */
        enter : function() {
            return null != feed && $("#article article").on("scroll", selector), null != feed && feed.resume(), $scope.ads.registerAds([{
                adUnitName : "inside-full-pos1",
                targetContainerId : "ad-inside-full-pos1-article",
                adHeader : require("app/templates/adTitle").default()
            }, {
                adUnitName : "inside-full-pos2",
                targetContainerId : "ad-inside-full-pos2-article",
                adHeader : require("app/templates/adTitle").default()
            }]);
        },
        /**
         * @return {?}
         */
        exit : function() {
            var world;
            var i;
            var max;
            var worlds;
            var exit;
            if (null != feed) {
                feed.pause();
            }
            worlds = $("#article article video");
            /** @type {Array} */
            exit = [];
            /** @type {number} */
            i = 0;
            max = worlds.length;
            for (;i < max;i++) {
                world = worlds[i];
                exit.push(world.pause());
            }
            return exit;
        },
        /**
         * @param {Object} options
         * @return {?}
         */
        loadData : function(options) {
            return new RSVP.Promise(function(_this) {
                return function(cb) {
                    return _this.store.load("articles", {
                        id : options.to.id
                    }).then(function(evt) {
                        var pluginMap;
                        return evt.payload.layout_type_external_url && null == evt.payload.label_type ? window.location.replace(evt.payload.layout_type_external_url) : "category" === evt.payload.layout_type && null != (null != (pluginMap = evt.payload.category_preview) ? pluginMap.id : void 0) ? window.location.replace("/categories/" + evt.payload.category_preview.id) : cb(evt);
                    });
                };
            }(this));
        },
        /**
         * @param {Object} other
         * @return {?}
         */
        beforeTransition : function(other) {
            return "article" === other.to.routeName && gma.utils.markArticleAsRead(other.to.id), "slideshow" === other.from.routeName || "comment" === other.from.routeName ? this.animationDirection = "leftToRight" : this.animationDirection = "rightToLeft";
        },
        /**
         * @return {?}
         */
        beforeRender : function() {
            return null != feed && (feed.destroy(), feed = null), destroy($("#article article .slideshow"));
        },
        /**
         * @param {Object} options
         * @return {?}
         */
        renderTemplate : function(options) {
            return $z.viewManager.renderTemplate(options.to.routeName, {
                config : data.config
            }, getTemplate());
        },
        /**
         * @param {Object} options
         * @param {string} data
         * @return {?}
         */
        rerenderTemplate : function(options, data) {
            var $e;
            return $e = $("<div>" + data.text.trim() + "</div>"), "listicle" !== data.layout_type && $e.find(">*").first().after(require("app/templates/ad").default({
                adType : "ad-inside-full-pos1-article",
                title : a.translations.translate("Werbung"),
                additionalClassNames : "contentAd"
            })), data.textParts = gma.utils.extractInlineElements($e.html(), data.inline_elements), $z.viewManager.renderTemplate(options.to.routeName, data, getTemplate());
        },
        /**
         * @param {Object} options
         * @param {Element} message
         * @return {?}
         */
        afterRerender : function(options, message) {
            var snippet;
            var t;
            var part;
            var hoursUntilExpiration;
            var item;
            var j;
            var i;
            var subLn;
            var valsLength;
            var deferred;
            var args;
            var parts;
            var queue;
            var result;
            var suiteView;
            if (args = [], init(), hoursUntilExpiration = "12app" === data.config.currentCustomer ? 48 : null, $window.smartAppBanner.init("#viewport", {
                    hoursUntilExpiration : hoursUntilExpiration,
                    /**
                     * @return {?}
                     */
                    afterRemove : function() {
                        return $("#viewport").css("top", "0px");
                    }
                }, function() {
                    return $("#viewport").css("top", "66px");
                }), suiteView = $("#article article .socialCounter")[0], null != suiteView && (locale.socialMedia.insert(suiteView, message.id, {
                    isAggregated : true,
                    dialogBox : "#shareDialog",
                    router : this.router,
                    legacyId : message.legacy_id
                }), $(".socialCounter").on("openedShareDialog", function() {
                    return opt_user.statistics.track("wemf", message.external_services.statistics, "socialMediaDialog");
                })), self.call(this, $("#article article .slideshow .slideshowContainer"), options), null != message.scoreboard_id && (vec = new DE.Scoreboard("#article article .scoreboardContainer", {
                    id : message.scoreboard_id,
                    baseUrl : data.config.apiUrl,
                    /**
                     * @return {?}
                     */
                    getRenderMode : function() {
                        return "mobile";
                    }
                })), null != message.liveticker_id && (null != message.scribble_element && (t = $("#article article .livetickerTabs li").on("click", function(dataAndEvents) {
                    var element;
                    return t.removeClass("active"), $(this).addClass("active"), t.first().hasClass("active") ? ($("#article article .livetickerContainer").show(), $("#article article .scribbleContainer").hide()) : ($("#article article .livetickerContainer").hide(), $("#article article .scribbleContainer").show(), element = $("#article article .scribbleContainer iframe"), element.attr("src") !== element.attr("data-url") ? element.attr("src", element.attr("data-url")) : void 0);
                })), args.push((deferred = RSVP.defer()).promise), feed = new lang.Liveticker("#article article .livetickerContainer", {
                    id : message.liveticker_id,
                    http : {
                        baseUrl : data.config.apiUrl
                    },
                    lang : data.config.language,
                    loadingCaption : a.translations.translate("Liveticker wird geladen..."),
                    activeCaption : a.translations.translate("Liveticker aktualisiert automatisch"),
                    lastUpdatedAtText : a.translations.translate("letzte Meldung %s"),
                    initialLimit : 10,
                    limitIncreaseValue : 10,
                    limitStyle : "scroller",
                    afterFetchMessageUpdates : function(dataAndEvents) {
                        return function(dataAndEvents, deepDataAndEvents) {
                            if (null != message.scoreboard_id && deepDataAndEvents) {
                                return vec.update();
                            }
                        };
                    }(this),
                    renderInlineElement : function(that) {
                        return function(dataAndEvents, obj, deepDataAndEvents) {
                            return that.store.save({
                                articleElement : obj
                            }), function() {
                                var rule;
                                switch(rule = $("#inlineElement_" + obj.id).html(require("app/templates/contextBox").default($.extend({}, obj, {
                                    renderContext : "inlineElement"
                                }))), obj.boxtype) {
                                    case "slideshow":
                                        return self.call(that, rule.find(".slideshow .slideshowContainer"), options);
                                    case "poll":
                                        return find.call(that, options.to.pathname, message, obj);
                                }
                            };
                        };
                    }(this),
                    beforeDestroyInlineElement : function(dataAndEvents) {
                        return function(dataAndEvents, ch, deepDataAndEvents) {
                            switch(ch.boxtype) {
                                case "slideshow":
                                    return destroy($("#inlineElement_" + ch.id + " .slideshow"));
                                case "poll":
                                    return Router.poll.destroy(ch.poll_id);
                            }
                        };
                    }(this),
                    afterRenderMessage : function(dataAndEvents) {
                        return function(dataAndEvents, data, deepDataAndEvents) {
                            return init(data), $(data).find("iframe").on("contentResize", function(deepDataAndEvents, ignoreMethodDoesntExist, optgroup, textAlt, dataAndEvents) {
                                if (optgroup !== dataAndEvents) {
                                    return $(this).height(optgroup);
                                }
                            }), $(data).find(".picture").on("click", function() {
                                return $(this).toggleClass("zoom");
                            });
                        };
                    }(this),
                    beforeDestroyMessage : function(dataAndEvents) {
                        return function(dataAndEvents, sourceContainer) {
                            return $(sourceContainer).find("iframe").off("contentResize"), $(sourceContainer).find(".picture").off("click");
                        };
                    }(this),
                    afterRender : function(dataAndEvents) {
                        return function() {
                            if (b.browser.addAndroidScrollFix($("#article article")), deferred) {
                                return deferred.resolve(), deferred = null;
                            }
                        };
                    }(this)
                })), args.push(new RSVP.Promise(function(_this) {
                    return function($sanitize) {
                        var i;
                        var il;
                        var key;
                        var tmp_keys;
                        var optgroup;
                        if (optgroup = [], null != message.auto_stock_exchange_element) {
                            tmp_keys = message.auto_stock_exchange_element.organizations;
                            /** @type {number} */
                            i = 0;
                            il = tmp_keys.length;
                            for (;i < il;i++) {
                                key = tmp_keys[i];
                                optgroup.push(_this.store.load("stock_exchange_trends", {
                                    id : key.isin
                                }).then(function(security_context) {
                                    return $("#stockExchangeTrends").append(require("app/templates/stockExchangeTrend").default(security_context.payload));
                                }));
                            }
                        }
                        return RSVP.all(optgroup).then(function() {
                            return $sanitize();
                        });
                    };
                }(this))), $(".socialMedia.box .loader").show(), args.push(new RSVP.Promise(function(dataAndEvents) {
                    return function($sanitize) {
                        var suiteView;
                        return suiteView = $(".socialMedia.box")[0], locale.socialMedia.insert(suiteView, message.id, {
                            isAggregated : false,
                            legacyId : message.legacy_id,
                            router : dataAndEvents.router
                        }), $sanitize();
                    };
                }(this))), args.push(new RSVP.Promise(function(self) {
                    return function($sanitize) {
                        var x;
                        var name;
                        var i;
                        var _i;
                        var ln;
                        var _len;
                        var optgroup;
                        var configList;
                        var xs;
                        if (optgroup = [], null != message.inline_elements) {
                            configList = message.inline_elements;
                            /** @type {number} */
                            i = 0;
                            ln = configList.length;
                            for (;i < ln;i++) {
                                name = configList[i];
                                if ("poll" === name.boxtype) {
                                    optgroup.push(find.call(self, options.to.pathname, message, name));
                                }
                            }
                        }
                        if (null != message.article_elements) {
                            xs = message.article_elements;
                            /** @type {number} */
                            _i = 0;
                            _len = xs.length;
                            for (;_i < _len;_i++) {
                                x = xs[_i];
                                if ("poll" === x.boxtype) {
                                    optgroup.push(find.call(self, options.to.pathname, message, x));
                                }
                            }
                        }
                        return RSVP.all(optgroup).then(function() {
                            return $sanitize();
                        });
                    };
                }(this))), message.is_rate_active && $.get(data.config.apiUrl + "/articles/" + message.id + "/rates").then(function(dataAndEvents) {
                    return function(waypoint) {
                        var m;
                        if (m = new Router.Poll($(".rateBox")[0], waypoint.element, data.config), m.show(), $(m.getContainer()).find(".poll").length) {
                            return $(m.getContainer()).isInViewport() ? opt_user.statistics.trackGtmEvent("rating_visible") : $("#article article").on("scroll", function() {
                                if ($(m.getContainer()).isInViewport()) {
                                    return opt_user.statistics.trackGtmEvent("rating_visible"), $("#article article").off("scroll");
                                }
                            });
                        }
                    };
                }(this)), null != message.inline_elements && args.push.apply(args, function() {
                    var i;
                    var valsLength;
                    var queue;
                    var eventPath;
                    queue = message.inline_elements;
                    /** @type {Array} */
                    eventPath = [];
                    /** @type {number} */
                    i = 0;
                    valsLength = queue.length;
                    for (;i < valsLength;i++) {
                        item = queue[i];
                        if ("element" === item.boxtype) {
                            if ("element_listicle" === item.element.type) {
                                eventPath.push(new DreamE.Listicle("#article article .listicle", {
                                    id : item.element.id,
                                    apiUrl : data.config.apiUrl,
                                    floatingNavStyle : DreamE.Listicle.FLOATING_NAV_STYLE_TINY,
                                    hasAnimations : false,
                                    renderElement : function(bind) {
                                        return function(v, form) {
                                            switch(v.type) {
                                                case "element_slideshow":
                                                    return self.call(bind, $(form).data("id", v.legacy_id), options);
                                            }
                                        };
                                    }(this)
                                }));
                            }
                        }
                    }
                    return eventPath;
                }.call(this)), null != message.article_elements) {
                parts = message.article_elements;
                /** @type {number} */
                j = 0;
                subLn = parts.length;
                for (;j < subLn;j++) {
                    part = parts[j];
                    if ("articles" === part.boxtype) {
                        snippet = $("#article article .contextBox.articleElement.articles .articlePreview");
                        gma.utils.loopThroughArticlePreviews(part.article_previews, snippet, {
                            articlesRead : true,
                            socialCounter : true,
                            legacyId : message.legacy_id,
                            socialMedia : locale.socialMedia,
                            router : this.router
                        });
                    }
                }
            }
            if (null != message.inline_elements) {
                queue = message.inline_elements;
                /** @type {number} */
                i = 0;
                valsLength = queue.length;
                for (;i < valsLength;i++) {
                    item = queue[i];
                    if ("newsletter" === item.boxtype) {
                        i18n.newsletter.configure(data.config);
                        i18n.newsletter.insert($("#article article .newsletterSubscriptionBox")[0], {
                            paywallUserEmail : null != (result = dataAndEvents.paywallInterface.getPaywallUserData()) ? result.email : void 0,
                            optinId : item.optin_id,
                            serviceId : item.service_id,
                            title : item.title,
                            lead : item.lead,
                            disclaimer : item.disclaimer,
                            template : item.template,
                            listInfos : ["20 TA-Journalisten analysieren und kuratieren abwechselnd", "Einordnung und \u00dcberblick bereits am Fr\u00fchst\u00fcckstisch", "kurz, b\u00fcndig, \u00fcbersichtlich"]
                        });
                    }
                }
            }
            return "lematin" === data.config.currentCustomer && (this.store.load(options.to.routeName.pluralize(), {
                id : options.to.id,
                subkey : "comments/?sort=best"
            }).then(function(res) {
                var message;
                var ret;
                var left;
                if (null != res && (null != (ret = res.payload) && null != (left = ret.comments)) ? left.length : void 0) {
                    return message = res.payload.comments[0].message, $("#article article .bestCommentBox .message").append(message), $("#article article .bestCommentBox").show();
                }
            }), args.push(new RSVP.Promise(function(_this) {
                return function($sanitize) {
                    var msg;
                    return msg = $("#article article .categoryBox"), "publireportage" === message.layout_type ? (msg.find(".loader").hide(), $sanitize()) : null != message.category_for_site ? _this.store.load("categories", {
                        id : message.category_for_site.id
                    }).then(function(json) {
                        var optgroup;
                        var requires;
                        var i;
                        var ln;
                        var mod;
                        if (mod = json.payload.page_elements, requires = [], msg.find(">div").addClass("loaded"), msg.find(">div h3").html(json.payload.title), gma.utils.colorize(msg, "h3", "color", json.payload.color), null != mod) {
                            mod.map(function(body) {
                                if ("articles" === body.boxtype) {
                                    return body.articles.map(function(value) {
                                        return requires.push(value);
                                    });
                                }
                            });
                            /** @type {number} */
                            i = 0;
                            /** @type {number} */
                            ln = requires.length;
                            for (;i < ln;i++) {
                                optgroup = requires[i];
                                msg.find(">ul").append(require("app/templates/articlePreview").default(optgroup));
                                gma.utils.loopThroughArticlePreviews(requires, msg.find(".pageElement").eq(0).find(".articlePreview"), {
                                    articlesRead : true,
                                    socialCounter : true,
                                    socialMedia : locale.socialMedia,
                                    colorize : {
                                        color : json.payload.color,
                                        type : "category"
                                    }
                                });
                            }
                            return msg.find(".pageElement").eq(0).find(".articlePreview .socialCounter").on("openedShareDialog", function() {
                                return opt_user.statistics.track("wemf", json.external_services.statistics, "socialMediaDialog");
                            }), msg.find(".loader").hide(), $sanitize();
                        }
                    }) : void 0;
                };
            }(this)))), args;
        }
    };
    param.default = def;
}), define("app/routes/category", ["exports", "framework/utils", "framework/statistics", "framework/socialMedia/socialMedia", "framework/ads/ads"], function(param, dd, data, dataAndEvents, $scope) {
    var adUnitName;
    var attributes;
    var def;
    /** @type {Array} */
    attributes = [];
    /** @type {number} */
    adUnitName = 1;
    def = {
        urlPattern : "/categories/[id]",
        animationDirection : "rightToLeft",
        /**
         * @param {?} project
         * @return {?}
         */
        enter : function(project) {
            return $scope.ads.registerAds(attributes), attributes = [], adUnitName = 1;
        },
        /**
         * @param {Object} options
         * @return {?}
         */
        exit : function(options) {
            if ("article" === options.to.routeName) {
                return dd.utils.markArticleAsRead(options.to.id);
            }
        },
        /**
         * @param {(Object|string)} b
         * @return {?}
         */
        beforeTransition : function(b) {
            return "article" === b.from.routeName || "slideshow" === b.from.routeName ? this.animationDirection = "leftToRight" : this.animationDirection = "rightToLeft";
        },
        /**
         * @param {?} optionsString
         * @param {?} models
         * @return {?}
         */
        afterRerender : function(optionsString, models) {
            var $e;
            var stringBuffer;
            var targetContainerId;
            var statsTemplate;
            var i;
            var _i;
            var _len;
            var optgroup;
            var lineSeparator;
            var l;
            var eventPath;
            /** @type {string} */
            statsTemplate = "#category article";
            $e = $(statsTemplate);
            stringBuffer = $e.find("nav >div.categoryPageElements").first();
            $e.find(".lastUpdated >span").html("" + dd.utils.date.calculateLastUpdatedAt(models.last_updated_at));
            $e.find("a[href*='/articles']").on("click", function(dataAndEvents) {
                return function(types) {
                    return types.preventDefault(), dataAndEvents.router.transitionTo(types.delegateTarget.pathname);
                };
            }(this));
            $e.find("select").on("change", function(dataAndEvents) {
                return function(event) {
                    return dataAndEvents.router.transitionTo("/categories/" + event.delegateTarget.value);
                };
            }(this));
            l = models.page_elements;
            /** @type {Array} */
            eventPath = [];
            /** @type {number} */
            i = _i = 0;
            _len = l.length;
            for (;_i < _len;i = ++_i) {
                optgroup = l[i];
                lineSeparator = require("app/templates/pageElement").default(optgroup);
                if ("smartad" === optgroup.boxtype || "ad" === optgroup.boxtype) {
                    /** @type {string} */
                    targetContainerId = "ad-inside-full-pos" + adUnitName + "-category";
                    attributes.push({
                        adUnitName : "inside-full-pos" + adUnitName,
                        targetContainerId : targetContainerId,
                        adHeader : require("app/templates/adTitle").default({
                            getTitleFromFeed : true,
                            title : optgroup.title
                        })
                    });
                    stringBuffer.append(require("app/templates/ad").default({
                        adType : targetContainerId
                    }));
                    adUnitName++;
                } else {
                    stringBuffer.append(lineSeparator);
                }
                if ("articles" === optgroup.boxtype) {
                    dd.utils.colorize($e, "h2", "color", optgroup.color);
                    dd.utils.loopThroughArticlePreviews(optgroup.articles, $e.find(".pageElement").eq(i).find(".articlePreview"), {
                        articlesRead : true,
                        socialCounter : true,
                        socialMedia : dataAndEvents.socialMedia,
                        router : this.router,
                        colorize : {
                            color : optgroup.color,
                            type : "category"
                        }
                    });
                }
                eventPath.push($e.find(".pageElement").eq(i).find(".articlePreview .socialCounter").on("openedShareDialog", function() {
                    return data.statistics.track("wemf", models.external_services.statistics, "socialMediaDialog");
                }));
            }
            return eventPath;
        }
    };
    param.default = def;
}), define("app/routes/comment", ["exports", "framework/viewManager", "framework/statistics", "framework/comments/comments", "app/config"], function(param, dataAndEvents, data, self, App) {
    var def;
    self.comments.configure(App.config);
    self.comments.configure({
        globalDialogSelector : "#dialog",
        globalFullscreenLoaderSelector : "#comment .fullscreenLoader",
        env : "mobile"
    });
    def = {
        urlPattern : "/articles/[id]/comments",
        animationDirection : "rightToLeft",
        /**
         * @param {Object} options
         * @return {?}
         */
        getTitle : function(options) {
            var msg;
            var suite;
            var html;
            return html = "", (msg = null != (suite = this.store.get("articles", options.to.parentId)) ? suite.title : void 0) && (html += msg + " - "), html += this.store.get("sites", "default").title;
        },
        /**
         * @param {Object} options
         * @return {?}
         */
        loadData : function(options) {
            return this.store.load("articles", {
                id : options.to.parentId
            });
        },
        /**
         * @return {?}
         */
        beforeRender : function() {
            if (null != document.getElementById("comments")) {
                return self.comments.remove(document.getElementById("comments"));
            }
        },
        /**
         * @param {Object} res
         * @param {?} _xhr
         * @return {?}
         */
        afterRerender : function(res, _xhr) {
            var loading;
            return loading = $("#comment .fullscreenLoader"), App.config.isNativeApp || loading.show(), new RSVP.Promise(function(dataAndEvents) {
                return function(done) {
                    return self.comments.insert(document.getElementById("comments"), res.to.parentId, {
                        wemfUrls : _xhr.external_services.statistics.filter(function($provide) {
                            return "wemf" === $provide.provider;
                        }).map(function($location) {
                            return $location.url;
                        }),
                        /**
                         * @return {?}
                         */
                        callback : function() {
                            return loading.hide(), done();
                        }
                    });
                };
            }(this));
        },
        /**
         * @param {?} project
         * @param {Object} e
         * @return {?}
         */
        enter : function(project, e) {
            return data.statistics.track("wemf", e.external_services.statistics, "article/comments");
        }
    };
    param.default = def;
}), define("app/routes/front", ["exports", "framework/browser", "framework/statistics", "framework/ads/ads", "framework/utils", "framework/LocalStorageQueue", "framework/slideshow/slideshow", "framework/categorySlider/categorySlider", "framework/socialMedia/socialMedia", "framework/recommender/recommender", "app/config"], function(param, b, data, $scope, dd, dataAndEvents, ymaps, session, locale, Router, App) {
    var adUnitName;
    var attributes;
    var configList;
    var start;
    var success;
    var def;
    Router.recommender.configure(App.config);
    /** @type {Array} */
    configList = [];
    /** @type {Array} */
    attributes = [];
    /** @type {number} */
    adUnitName = 1;
    /**
     * @param {Element} data
     * @param {?} textStatus
     * @return {?}
     */
    success = function(data, textStatus) {
        var config;
        var name;
        var options;
        var _i;
        var _len;
        var attributes;
        var _ref;
        var value;
        name = $("#front article .slideshow[data-id=" + data.id + "]");
        config = {
            id : data.id,
            pictures : []
        };
        _ref = data.articles;
        /** @type {number} */
        _i = 0;
        _len = _ref.length;
        for (;_i < _len;_i++) {
            switch(options = _ref[_i], attributes = {
                id : options.id,
                url : options.picture_medium_url,
                title : options.title,
                statistics : options.external_services.statistics,
                mediatype : options.mediatype ? options.mediatype : "slideshow"
            }, options.mediatype) {
                case "slideshow":
                    attributes.id = options.top_element.slideshow.id;
                    break;
                case "video":
                    $.extend(attributes, {
                        mediatype : options.mediatype,
                        videoLink : options.top_element.video.url,
                        videoId : options.top_element.video.id
                    });
                    break;
                default:
                    $.extend(attributes, {
                        keyword : options.keyword,
                        decoration : options.decoration,
                        genre : options.genre
                    });
            }
            config.pictures.push(attributes);
        }
        return value = new ymaps.Slideshow(name, config.pictures, {
            footerTemplate : require("framework/slideshow/templates/twistedFooter").default,
            pagination : true,
            /**
             * @param {Object} photo
             * @param {?} extent
             * @return {?}
             */
            getImageUrl : function(photo, extent) {
                return photo.url;
            },
            /**
             * @param {Element} obj
             * @param {?} dataAndEvents
             * @param {?} el
             * @return {?}
             */
            getImageCaption : function(obj, dataAndEvents, el) {
                return el({
                    slideshowTitle : obj.title,
                    mediatype : obj.mediatype,
                    keyword : obj.keyword,
                    decoration : obj.decoration,
                    genre : obj.genre
                });
            },
            /**
             * @return {?}
             */
            getRenderMode : function() {
                return "mobile";
            }
        }), $(value).on("beforeTransition", function(dataAndEvents) {
            return function(m, article, deepDataAndEvents, ignoreMethodDoesntExist) {
                var activity;
                var contextElem;
                var doneResults;
                if ("fullscreen" === ignoreMethodDoesntExist) {
                    switch(m.cancelTransition = true, article.mediatype) {
                        case "slideshow":
                            dataAndEvents.router.transitionTo("/slideshows/" + article.id + "/image/1");
                            break;
                        case "video":
                            dataAndEvents.router.transitionTo("/video/" + article.videoId);
                            break;
                        default:
                            dataAndEvents.router.transitionTo("/articles/" + article.id);
                    }
                    return doneResults = null, null != (activity = data.external_services) && (null != (contextElem = activity.statistics) && contextElem.filter(function(data) {
                        if ("gtm" === data.provider) {
                            return doneResults = data;
                        }
                    })), dataAndEvents.router.setTrackingInfo({
                        page_element : doneResults.page_element,
                        element_position_relative : deepDataAndEvents + 1,
                        element_position_absolute : doneResults.element_position_offset + 1
                    });
                }
            };
        }(this)).on("afterSlide", function(dataAndEvents) {
            return function(dataAndEvents, opt_user, deepDataAndEvents, ignoreMethodDoesntExist) {
                return data.statistics.track("wemf", opt_user.statistics, "slideshow");
            };
        }(this)), value.show(), configList.push(value);
    };
    /**
     * @param {?} ui
     * @param {string} optgroup
     * @param {Object} args
     * @param {number} index
     * @param {string} from
     * @param {(number|string)} onFailed
     * @return {?}
     */
    start = function(ui, optgroup, args, index, from, onFailed) {
        var ancestor;
        var ret;
        var targetContainerId;
        var statsTemplate;
        var html;
        var data;
        var el;
        var lastVisitedTS;
        var rreturn;
        var protoProps;
        var child;
        var $scope;
        var s;
        var doneResults;
        if (null == onFailed && (onFailed = 0), rreturn = require("app/templates/pageElement").default(optgroup), ret = $("#front article #" + from).find("div").first(), "smartad" !== optgroup.boxtype && "ad" !== optgroup.boxtype || (targetContainerId = "ad-inside-full-pos" + adUnitName + "-front", attributes.push({
                adUnitName : "inside-full-pos" + adUnitName,
                targetContainerId : targetContainerId,
                adHeader : require("app/templates/adTitle").default({
                    getTitleFromFeed : true,
                    title : optgroup.title
                })
            }), ret.append(require("app/templates/ad").default({
                adType : targetContainerId
            })), adUnitName++), "recommender" === optgroup.boxtype) {
            rreturn = require("app/templates/recommenderPageElement").default({
                title : optgroup.title
            });
            ret.append(rreturn);
            /** @type {null} */
            doneResults = null;
            if (null != (protoProps = optgroup.external_services)) {
                if (null != (child = protoProps.statistics)) {
                    child.filter(function(data) {
                        if ("gtm" === data.provider) {
                            return doneResults = data;
                        }
                    });
                }
            }
            /** @type {number} */
            lastVisitedTS = 0;
            try {
                if (localStorage.getItem("Recommender.lastVisitedTimestamp")) {
                    lastVisitedTS = localStorage.getItem("Recommender.lastVisitedTimestamp");
                }
            } catch (D) {
            }
            el = ret.find(".pageElement").eq(index);
            if (el.hasClass("recommender")) {
                Router.recommender.insert(el.find("div")[0], {
                    lastVisitedTS : lastVisitedTS,
                    /**
                     * @param {Array} item
                     * @param {?} insert
                     * @return {?}
                     */
                    renderSocialMedia : function(item, insert) {
                        return locale.socialMedia.insert(item[0], insert.legacy_id, {
                            isAggregated : true,
                            dialogBox : "#dialog"
                        });
                    },
                    onArticleClick : function(dataAndEvents) {
                        return function(deepDataAndEvents, mid) {
                            var low;
                            return low = mid + 1, dataAndEvents.router.setTrackingInfo({
                                page_element : doneResults.page_element,
                                element_position_relative : low,
                                element_position_absolute : doneResults.element_position_offset + low
                            });
                        };
                    }(this),
                    /**
                     * @return {?}
                     */
                    ifNoRecommendationsFound : function() {
                        return el.hide();
                    }
                });
            }
            try {
                localStorage.setItem("Recommender.lastVisitedTimestamp", Math.floor((new Date).getTime() / 1E3));
            } catch (D) {
            }
        } else {
            ret.append(rreturn);
        }
        if ("iframe" === optgroup.boxtype && ret.find(".pageElement").last().find("iframe").on("contentResize", function(deepDataAndEvents, ignoreMethodDoesntExist, optgroup, textAlt, dataAndEvents) {
                if (optgroup !== dataAndEvents) {
                    return $(this).height(optgroup);
                }
            }), "horizontal-slide" === optgroup.layout_type && success.call(this, optgroup, args.to.pathname), null != optgroup.meteonews && (ancestor = $("#front .right"), "lematin" === App.config.currentCustomer && (ancestor = $("#frontFeedSwitcher .right")), ancestor.empty().append(require("app/templates/weatherObservation").default(optgroup.meteonews.observation))), "socialmedia_like" === optgroup.boxtype && locale.socialMedia.insertLikeButton(ret.find(".pageElement").eq(index)[0], {
                types : ["facebook"]
            }), null != optgroup.articles && (doneResults = null, null != ($scope = optgroup.external_services) && (null != (s = $scope.statistics) && s.filter(function(data) {
                if ("gtm" === data.provider) {
                    return doneResults = data;
                }
            }))), "lematin" === App.config.currentCustomer ? ("category" === optgroup.linked_object_type && ("publireportage" !== optgroup.layout_type && (ret.find(".pageElement").eq(index).addClass("slider"), html = ret.find(".pageElement").eq(index).find(".categorySlider")[0], session.categorySlider.insert(html, optgroup, {
                socialMedia : locale.socialMedia
            }), $(html).on("clickedArticle", function(dataAndEvents) {
                return function(article) {
                    return dataAndEvents.router.transitionTo("/articles/" + article.id);
                };
            }(this)))), null != optgroup.articles && (statsTemplate = $("#default").find(".pageElement").eq(index).find(".articlePreview"), data = {
                color : optgroup.color,
                type : "front"
            }, 0 === index && ("breaking-news" !== optgroup.layout_type && (data.color = null)), dd.utils.colorize(ret.find(".pageElement").eq(index), "h2", "color", optgroup.color), dd.utils.colorize(ret.find(".pageElement").eq(index), ".categorySlider .paginationProgress", "background-color", optgroup.color), dd.utils.loopThroughArticlePreviews(optgroup.articles, statsTemplate, {
                articlesRead : true,
                socialCounter : true,
                socialMedia : locale.socialMedia,
                router : this.router,
                colorize : data,
                trackingInfo : doneResults
            }))) : null != optgroup.articles && (statsTemplate = ret.find(".pageElement").eq(index).find(".articlePreview"), dd.utils.loopThroughArticlePreviews(optgroup.articles, statsTemplate, {
                articlesRead : true,
                socialCounter : true,
                socialMedia : locale.socialMedia,
                router : this.router,
                legacyId : statsTemplate.legacy_id,
                trackingInfo : doneResults
            })), ret.find(".pageElement").eq(index).find(".articlePreview .socialCounter").on("openedShareDialog", function() {
                return data.statistics.track("wemf", ui.external_services.statistics, "socialMediaDialog");
            }), dd.utils.isInvalidPageElement(optgroup)) {
            return ret.find(".pageElement").eq(index).hide();
        }
    };
    def = {
        urlPattern : "/",
        animationDirection : "leftToRight",
        /**
         * @return {?}
         */
        getTitle : function() {
            return this.store.get("sites", "default").title;
        },
        /**
         * @param {Object} options
         * @return {?}
         */
        exit : function(options) {
            if ("article" === options.to.routeName) {
                return dd.utils.markArticleAsRead(options.to.id);
            }
        },
        /**
         * @param {?} optionsString
         * @return {?}
         */
        loadData : function(optionsString) {
            return b.browser.isIE10() || "local" === window.api ? this.store.load("fronts", {
                id : "mobile"
            }) : this.store.load("fronts", {
                id : "mobile",
                node : "page_elements.*"
            });
        },
        /**
         * @param {?} list
         * @param {string} e
         * @return {?}
         */
        rerenderTemplate : function(list, e) {
            var i;
            var _i;
            var _len;
            var a;
            var _ref;
            var results;
            _ref = e.page_elements;
            /** @type {Array} */
            results = [];
            /** @type {number} */
            i = _i = 0;
            _len = _ref.length;
            for (;_i < _len;i = ++_i) {
                a = _ref[i];
                results.push(start.call(this, e, a, list, i, "default"));
            }
            return results;
        },
        /**
         * @param {?} direction
         * @param {?} opt_coordHeight
         * @param {?} list
         * @param {string} expr
         * @return {?}
         */
        streamNode : function(direction, opt_coordHeight, list, expr) {
            var defs;
            return defs = $("#front article"), start.call(this, expr, direction, list, opt_coordHeight, "default"), defs.find("#default .loader").show(), b.browser.addAndroidScrollFix(defs);
        },
        /**
         * @param {?} optionsString
         * @param {?} _xhr
         * @return {?}
         */
        afterRerender : function(optionsString, _xhr) {
            return $("#front article .lastUpdated >span").html("" + dd.utils.date.calculateLastUpdatedAt(_xhr.last_updated_at)), $("#front .forceDesktop").on("click", function(dataAndEvents) {
                return window.location.replace("https://" + App.config.currentCustomer + ".ch?force_desktop=true");
            });
        },
        /**
         * @return {?}
         */
        afterStream : function() {
            var defs;
            return defs = $("#front article"), defs.find("#default .loader").hide(), b.browser.addAndroidScrollFix(defs), $scope.ads.registerAds(attributes);
        },
        /**
         * @param {(Object|string)} v
         * @return {?}
         */
        enter : function(v) {
            var i;
            var ln;
            var expr;
            var target;
            if ("article" === v.from.routeName && dd.utils.markArticleAsRead(v.from.id), "video" === v.from.routeName) {
                /** @type {Array} */
                expr = [];
                /** @type {number} */
                i = 0;
                ln = configList.length;
                for (;i < ln;i++) {
                    target = configList[i];
                    expr.push(target.refresh());
                }
                return expr;
            }
        }
    };
    param.default = def;
}), define("app/routes/slideshow", ["exports", "framework/statistics", "framework/translations", "framework/slideshow/slideshow"], function(param, data, self, Effect) {
    var def;
    var target;
    /** @type {null} */
    target = null;
    def = {
        urlPattern : "/slideshows/[id]/image/[index]",
        animationDirection : "rightToLeft",
        /**
         * @param {Object} options
         * @return {?}
         */
        beforeTransition : function(options) {
            if (target) {
                return setTimeout(function(dataAndEvents) {
                    return function() {
                        return target.refresh(options.to.subRouteId - 1);
                    };
                }(this), 0);
            }
        },
        /**
         * @return {?}
         */
        beforeRender : function() {
            if (target) {
                return target.destroy(), target = null;
            }
        },
        /**
         * @param {Object} options
         * @param {(Function|string)} expr
         * @return {?}
         */
        afterRerender : function(options, expr) {
            var old;
            var element;
            return element = $("#slideshow article .slideshow")[0], old = expr, target = new Effect.Slideshow(element, old.pictures, {
                ads : false,
                /**
                 * @return {?}
                 */
                getTitle : function() {
                    return old.title;
                },
                /**
                 * @return {?}
                 */
                getSubtitle : function() {
                    return old.lead;
                },
                /**
                 * @param {Object} photo
                 * @param {?} extent
                 * @return {?}
                 */
                getImageUrl : function(photo, extent) {
                    return photo.url;
                },
                /**
                 * @param {Object} options
                 * @param {number} el
                 * @param {?} template
                 * @return {?}
                 */
                getImageCaption : function(options, el, template) {
                    return $(template({
                        title : options.title,
                        caption : options.caption,
                        annotation : function() {
                            var image;
                            var herecomment;
                            if ("picture" === options.annotation_type && (options.photographer || options.provider)) {
                                return self.translations.translate("Bild") + ": " + (null != (image = options.photographer) ? image : "") + (options.photographer && options.provider ? "/" : "") + (null != (herecomment = options.provider) ? herecomment : "");
                            }
                        }(),
                        isFirstPicture : 0 === el,
                        imageCount : this.getImageCount(),
                        linkUrl : options.link_url,
                        linkText : options.link_title
                    })).applyTargetToLinks("_blank");
                },
                /**
                 * @return {?}
                 */
                getRenderMode : function() {
                    return "mobile";
                }
            }), $(target).on("beforeTransition", function(self) {
                return function(m, deepDataAndEvents, ignoreMethodDoesntExist, dataAndEvents) {
                    if ("inline" === dataAndEvents) {
                        return m.cancelTransition = true, self.router.back();
                    }
                };
            }(this)).on("afterSlide", function(dataAndEvents) {
                return function(deepDataAndEvents, dataAndEvents, offset, ignoreMethodDoesntExist) {
                    var index;
                    var rulesets;
                    if (data.statistics.trackSlideshowSwipe(old.external_services.statistics, offset, "fullscreen", !dataAndEvents), data.statistics.track("wemf", expr.external_services.statistics, "slideshow"), index = offset + 1, Number.isInteger(index)) {
                        return rulesets = location.href.split("/"), rulesets[rulesets.length - 1] = index, history.replaceState(null, null, rulesets.join("/")), options.to.subRouteId = index;
                    }
                };
            }(this)), target.show({
                fullscreen : true,
                pageIndex : options.to.subRouteId - 1
            });
        }
    };
    param.default = def;
}), define("app/routes/video", ["exports"], function(param) {
    var def;
    def = {
        urlPattern : "/videos/[id]",
        animationDirection : "rightToLeft",
        /**
         * @param {?} optionsString
         * @param {?} _xhr
         * @return {?}
         */
        afterRerender : function(optionsString, _xhr) {
            return $(".backButton").on("click", function(self) {
                return function() {
                    return self.router.back();
                };
            }(this));
        },
        /**
         * @return {?}
         */
        exit : function() {
            return $("#video").find(".body iframe").remove();
        },
        /**
         * @param {Object} v
         * @param {string} e
         * @return {?}
         */
        enter : function(v, e) {
            var optgroup;
            return optgroup = {
                boxtype : "video",
                video : e
            }, $("#video").find(".body").html(require("app/templates/contextBox").default(optgroup)), $("#" + v.to.routeName + " article iframe").on("contentResize", function(deepDataAndEvents, ignoreMethodDoesntExist, optgroup, textAlt, dataAndEvents) {
                if (optgroup !== dataAndEvents) {
                    return $(this).height(optgroup);
                }
            });
        }
    };
    param.default = def;
}), define("app/routes/weather", ["exports"], function(param) {
    var def;
    def = {
        urlPattern : "/weather",
        animationDirection : "rightToLeft",
        /**
         * @return {?}
         */
        loadData : function() {
            return this.store.load("weathers", {
                id : "default"
            });
        }
    };
    param.default = def;
}), define("app/templates/ad", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<div id="{{ adType }}" class="centerAd {{ additionalClassNames }}"></div>');
}), define("app/templates/adTitle", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<span class="adLabel">\n    {{#if getTitleFromFeed}}\n        {{ title }}\n    {{else}}\n        {{ translate "Werbung" }}\n    {{/if}}\n</span>');
}), define("app/templates/application", ["exports"], function(obj) {
    obj.default = Handlebars.compile('{{!\n    TODO: Use the more semantic HTML5 <main> tag instead of div#viewport,\n    after it is supported on WP8 (reverting the scrollstate doesn\'t work)\n}}\n<div id="viewport" class="{{getCustomerShortName}}"> \n    <section id="front"></section>\n    <section id="category"></section>\n    <section id="article"></section>\n    <section id="slideshow" class="noHeader"></section>\n    <section id="weather"></section>\n    <section id="comment"></section>\n    <section id="video" class="noHeader"></section>\n\n    <aside id="leftMenu"></aside>\n\n    {{> dialog id="dialog"}}\n    {{> dialog id="shareDialog"}}\n\n    <div id="blocker"></div>\n    <div id="log"></div>\n</div>');
}), define("app/templates/articlePreview", ["exports"], function(obj) {
    obj.default = Handlebars.compile('{{#isEmptyArticle}}\n    <li class="articlePreview\n        {{#if featured}}featured{{/if}}\n        {{layout_type}}\n        {{#isTeaser}}\n            {{!--\n            Normal teasers within collections also get the teaserWideExtended layout\n            This is a bit ugly, but the NN1 placing tool requires it like that\n            --}}\n            {{#isLayoutTypeCollection}}\n                teaserWideExtended\n            {{else}}\n                {{#isLayoutTypeBreakingNews}}\n                    teaserBreakingNews\n                {{else}}\n                    teaser\n                {{/isLayoutTypeBreakingNews}}\n            {{/isLayoutTypeCollection}}\n        {{else}}\n            {{#isTeaserWide}}teaserWide{{/isTeaserWide}}\n            {{#isTeaserWideExtended}}teaserWideExtended{{/isTeaserWideExtended}}\n            {{#isTeaserCollection}}teaserCollection{{/isTeaserCollection}}\n            {{#isTeaserQuote}}teaserQuote{{/isTeaserQuote}}\n        {{/isTeaser}}\n    ">\n\n        {{!-- TODO: Can\'t use the linkTo helper here because the dynamic href, make better solution --}}\n        <a\n            data-isLinkTo="true"\n\n            {{!-- Disable links for quote teasers --}}\n            {{#isTeaserQuote}}\n                {{!--\n                Natively, this works in IE only, but in CSS we\'ll set "pointer-events: none"\n                for all links with the "disabled" attribute\n                --}}\n                disabled\n            {{/isTeaserQuote}}\n\n            {{!--\n            Article previews with the layout_type "category"\n            link to categories instead of articles\n            --}}\n            {{#isLayoutTypeCategory}}\n                {{!-- \n                Don\'t link to other categories within collections (otherwise the "title" of\n                the collection, which is just another article preview with layout type\n                "category" will link to itself)\n                --}}\n                {{#isLayoutTypeCollection}}\n                    disabled\n                {{else}}\n                    href="/categories/{{category_preview.id}}"\n                {{/isLayoutTypeCollection}}\n            {{else}}\n                {{!--\n                Article previews with the layout_type "slideshow"\n                link to slideshows instead of articles\n                --}}\n                {{#isLayoutTypeMultimedia}}\n                    {{#isLayoutTypeSlideshow}}\n                        href="/slideshows/{{top_element.slideshow.id}}"\n                    {{else}}\n                        href="/videos/{{top_element.video.id}}"\n                    {{/isLayoutTypeSlideshow}}\n                {{else}}\n                    href="/articles/{{id}}"\n                {{/isLayoutTypeMultimedia}}\n            {{/isLayoutTypeCategory}}\n        >\n                <div>\n                    <time data-timestamp="{{timestamp_updated_at}}">...</time>\n                </div>\n\n                <div>\n                    {{#isTeaser}}\n                        {{!--\n                        Normal teasers within collections also get the teaserWideExtended layout.\n                        This is a bit ugly, but the NN1 placing tool requires it like that\n                        --}}\n                        {{#isLayoutTypeCollection}}\n                            {{> articlePreviews/teaserWideExtended}}\n                        {{else}}\n                            {{#isLayoutTypeBreakingNews}}\n                                {{> articlePreviews/teaserBreakingNews}}\n                            {{else}}\n                                {{> articlePreviews/teaser}}\n                            {{/isLayoutTypeBreakingNews}}\n                        {{/isLayoutTypeCollection}}\n                    {{else}}\n                        {{#isTeaserWide}}\n                            {{> articlePreviews/teaserWide}}\n                        {{/isTeaserWide}}\n\n                        {{#isTeaserWideExtended}}\n                            {{> articlePreviews/teaserWideExtended}}\n                        {{/isTeaserWideExtended}}\n\n                        {{#isTeaserCollection}}\n                            {{> articlePreviews/teaserCollection}}\n                        {{/isTeaserCollection}}\n\n                        {{#isTeaserQuote}}\n                            {{> articlePreviews/teaserQuote}}\n                        {{/isTeaserQuote}}\n\n                        {{#isTeaserHtml}}\n                            {{> articlePreviews/teaserHtml}}\n                        {{/isTeaserHtml}}\n                    {{/isTeaser}}\n                </div>\n        </a>\n    </li>\n{{/isEmptyArticle}}');
}), define("app/templates/articlePreviews/teaser", ["exports"], function(obj) {
    obj.default = Handlebars.compile('{{#isPublireportage}}\n    <span class="decoration publireportage">Paid Post</span>\n{{/isPublireportage}}\n\n<div class="imageContainer">\n    {{#isLematin}}\n        <div class="socialCounter"></div>\n    {{/isLematin}}\n\n    {{#if featured}}\n        <img src="{{picture_medium_url}}">\n\n        {{#isLayoutTypeStoryBundle}}\n            {{#if keyword}}\n                <p class="topLine">{{keyword}}</p>\n            {{/if}}\n        {{/isLayoutTypeStoryBundle}}\n    {{else}}\n        <img src="{{picture_small_url}}">\n    {{/if}}\n\n    {{#isLematin}}\n        {{tamediaIcon mediatype}}\n    {{/isLematin}}\n</div>\n\n{{#isTopDecoration}}\n    <span class="decoration" style="color: #{{decoration.color}};">{{decoration.name}}</span>\n{{/isTopDecoration}}\n\n<h5>\n    {{#isLematin}}\n        <span class="keyword">{{keyword}}</span>\n    {{/isLematin}}\n\n    {{{title}}}\n</h5>\n\n<div class="lead">\n{{#isLayoutTypeListicle}}\n    <span class="listicleTitle">{{getFirstListicleTitle}}</span>\n{{/isLayoutTypeListicle}}\n    <h6>\n        {{#if genre}}\n            <span class="decoration" style="color: #{{genre.color}}">{{genre.name}}</span>\n        {{else}}\n            {{#isLeadDecoration}}\n                <span class="decoration" style="color: #{{decoration.color}};">{{decoration.name}}</span>\n            {{/isLeadDecoration}}\n        {{/if}}\n        \n        {{#isLayoutTypeStoryBundle}}\n            {{#if featured}}\n                {{{stripAndTrimHtml lead}}}\n            {{/if}}\n        {{else}}\n            <span class="keyword">{{keyword}}</span> {{{stripAndTrimHtml lead}}}\n        {{/isLayoutTypeStoryBundle}}\n    </h6>\n\n    <span>\n        {{#hasPremiumDecoration}}\n            <span class="premium">ABO+</span>\n        {{/hasPremiumDecoration}}\n\n        {{#displayMediaType}}\n            {{tamediaIcon mediatype}}\n        {{/displayMediaType}}\n\n        {{#if authors.length}}\n            <span class="authors">\n                    {{author_annotation_prefix}} {{{join authors "name"}}}.\n            </span>\n        {{/if}}\n\n        <span {{#isBottomDecoration}}style="color: #{{decoration.color}};"{{/isBottomDecoration}}>\n            {{translate "Vor"}} <time data-timestamp="{{timestamp_updated_at}}">...</time>\n\n            {{#isBottomDecoration}}\n                &ndash; {{decoration.name}}\n            {{/isBottomDecoration}}\n        </span>\n        \n        <span class="socialCounter"></span>\n    </span>\n</div>');
}), define("app/templates/articlePreviews/teaserBreakingNews", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<h5>\n    <span class="label">{{decoration.name}}</span>\n    {{{title}}}\n</h5>');
}), define("app/templates/articlePreviews/teaserCollection", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<img src="{{picture_square_url}}">\n<h5>{{title}}</h5>\n<div class="lead">\n    <h6>{{stripHtml lead}} <span>{{translate "Mehr"}}...</span></h6>\n    <span class="date">{{formatDateShort timestamp_updated_at}}</span>\n</div>\n<span class="count">({{getArticlesCount}} {{translate "Artikel"}})</span>');
}), define("app/templates/articlePreviews/teaserHtml", ["exports"], function(obj) {
    obj.default = Handlebars.compile("{{!-- For power users, e.g. for Infografik, etc. see Der Bund /categories/92496267 --}}\n{{{text}}}");
}), define("app/templates/articlePreviews/teaserQuote", ["exports"], function(obj) {
    obj.default = Handlebars.compile("{{!--\nNote that articles can also have quotes, see local feed\n/articles/53cfd8921f291db1ca000001.json for example\n--}}\n{{{text}}}");
}), define("app/templates/articlePreviews/teaserWide", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<img src="{{picture_big_url}}" class="teaser">');
}), define("app/templates/articlePreviews/teaserWideExtended", ["exports"], function(obj) {
    obj.default = Handlebars.compile('{{!-- This template is used for longform previews, collection articles and slideshow previews --}}\n\n<img src="{{picture_big_url}}" class="teaser">\n\n<div class="container {{#isLayoutTypeSlideshow}}slideshow{{/isLayoutTypeSlideshow}}" style="color: #{{font_color}}; background-color: #{{background_color}};">\n\n    {{#if keyword}}\n        <span class="keyword">{{keyword}}</span>\n    {{/if}}\n\n    <span class="date">{{formatDateShort timestamp_updated_at}}</span>\n\n    <h5>\n        {{#isLayoutTypeSlideshow}}\n            {{tamediaIcon "slideshow"}}\n        {{/isLayoutTypeSlideshow}}\n        \n        {{title}}\n    </h5>\n\n    <p>{{stripHtml lead}}</p>\n</div>');
}), define("app/templates/articles/12appArticle", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<header></header>\n\n<article class="{{layout_type}} {{#isExternalArticle}}blog{{/isExternalArticle}}">    \n    {{#isExternalArticle}}\n        {{> iframe url=layout_type_external_url className="blog" height="100%" scrolling="yes" appifiedUrl=true}}\n    {{else}}\n        {{!-- Disabled temporarely because feeds are not ready --}}\n        {{!-- <div class="iconShare">{{tamediaIcon "shareThin"}}</div> --}}\n        <div class="adInfo top">\n            <span>\n                <div class="sprite-logos-BOA"></div>\n                <h5>Die Storys </br>des Tages.</h5>\n            </span>\n        </div>\n        \x3c!-- <div id="ad-inside-full-top-article" class="centerAd"></div> --\x3e\n        \n        <h1>{{{title}}}</h1>\n\n        <h2>\n            {{#if genre}}\n                <span class="decoration">{{genre.name}}</span>\n            {{else}}\n                {{#isLeadDecoration}}\n                    <span class="decoration">{{decoration.name}}</span>\n                {{/isLeadDecoration}}\n            {{/if}}\n\n            {{{stripHtml lead}}}\n        </h2>\n\n        {{! Author }}\n        <div id="authors">\n            {{#unless authors.length}}\n                <div class="clear"></div>\n            {{/unless}}\n\n            {{#isWertend}}\n                {{#each authors}}\n                    <div class="author">\n                        {{#if picture}}\n                            <div class="picture">\n                                <img src="{{picture}}">\n                            </div>\n                        {{/if}}\n\n                        {{author_annotation_prefix}} {{name}}\n\n                        {{#if twitter}}\n                            <br><a href="https://twitter.com/{{twitter}}" target="_blank">@{{twitter}}</a>\n                        {{/if}}\n                    </div>\n\n                    <div class="clear"></div>\n                {{/each}}\n            {{else}}\n                {{#each authors}}\n                    <div class="author">\n                        {{author_annotation_prefix}} {{name}}\n\n                        {{#if twitter}}\n                            <br><a href="https://twitter.com/{{twitter}}" target="_blank">@{{twitter}}</a>\n                        {{/if}}\n                    </div>\n\n                    <div class="clear"></div>\n                {{/each}}\n            {{/isWertend}}\n        </div>\n\n        {{! Top element }}\n        {{#if top_element}}\n            {{> contextBox top_element renderContext="topElement"}}\n        {{/if}}\n\n        <div class="adInfo middle">\n            <h5>T\u00e4glich um 12 Uhr. <br />In einer App.</h5>\n            <h6>Jetzt kostenlos herunterladen:</h6>\n            \n            <a href="{{getItunesAppStoreUrl}}" target="_blank" class="sprite-buttons-downloadOnAppStore"></a>\n            <a href="{{getGooglePlayStoreUrl}}" target="_blank" class="sprite-buttons-downloadOnGooglePlayStore"></a>\n        </div>\n\n\n        {{#if scoreboard_id}}\n            <div class="scoreboardContainer"></div>\n        {{/if}}\n\n        {{#if liveticker_id}}\n            {{#if scribble_element}}\n                <div class="livetickerTabs">\n                    <ul>\n                        <li class="active">\n                            {{!-- to do {{tamediaIcon "clock"}} --}}\n                            <span class="sprite-icons-livetickerActive"></span>\n                            <span class="sprite-icons-livetickerInactive"></span>\n                            {{translate "Liveticker"}}\n                        </li>\n\n                        <li>\n                            {{!-- to do {{tamediaIcon "socialView"}} --}}\n                            <span class="sprite-icons-socialViewActive"></span>\n                            <span class="sprite-icons-socialViewInactive"></span>\n                            {{scribble_element.title}}\n                        </li>\n                    </ul>\n                </div>\n\n                <div class="scribbleContainer">\n                    {{#with scribble_element}}\n                        {{> iframe dataUrl=iframe_url height="100%"}}\n                    {{/with}}\n                </div>\n            {{/if}}\n\n            <div class="livetickerContainer"></div>\n        {{/if}}\n\n        {{!--\n            Use this class "text" here, to be able to apply stylings in the css file to the html\n            elements withing the article text only\n        --}}\n        \n        \x3c!-- <div id="ad-inside-full-pos1-article" class="centerAd"></div> --\x3e\n\n        <div class="text">\n            {{! Inline elements }}\n            {{#each textParts}}\n                {{#isString this}}\n                    {{{this}}}\n                {{else}}\n                    {{> contextBox this renderContext="inlineElement"}}\n                {{/isString}}\n            {{/each}}\n\n            {{#if source}}\n                <p id="sourceAnnotation">{{source}}</p>\n            {{/if}}\n\n            {{#each cotext_element.article_previews}}\n                <div class="coText">\n                    <p class="keyword">{{keyword}}</p>\n                    <p class="title">{{title}}</p>\n                    {{{text}}}\n                </div>\n            {{/each}}\n        </div>\n\n        <div class="contextBoxes">\n            <div class="adInfo bottom">\n                <h5>M\u00f6chten Sie noch mehr spannende Artikel lesen?</h5>\n                <div class="adinfo-text">\n                    <p>Jetzt kostenlos herunterladen</p>\n                </div>\n                <a href="{{getItunesAppStoreUrl}}" target="_blank" class="sprite-buttons-downloadOnAppStore"></a>\n                <a href="{{getGooglePlayStoreUrl}}" target="_blank" class="sprite-buttons-downloadOnGooglePlayStore"></a>\n                <br />\n                <div class="sprite-logos-BOA"></div>\n                <div class="ad-icons">\n                </div>   \n            </div>\n        </div>\n    {{/isExternalArticle}}\n    \n    {{> fullscreenLoader}}\n</article>\n\n<div>\n    <div class="socialMedia box">\n        {{> loader}}\n    </div>\n</div>');
}), define("app/templates/articles/article", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<header>\n    <div class="left">\n        <a href="/" class="back">\n            {{tamediaIcon "backward"}}\n        </a>\n    </div>\n\n    <div class="center">\n        <a href="/" class="customerLogo sprite-logos-{{getCustomerShortName}}"></a>\n    </div>\n\n    <div class="right">\n    </div>\n</header>\n\n<div id="ad-overlay-article"></div>\n\n<article class="{{layout_type}} {{#isExternalArticle}}blog{{/isExternalArticle}}">    \n    {{#isExternalArticle}}\n        {{> iframe url=layout_type_external_url className="blog" height="100%" scrolling="yes" appifiedUrl=true}}\n    {{else}}\n        {{> ad adType="ad-inside-full-top-article"}}\n\n        <div id="publireportage">Paid Post</div>\n\n        {{! Due to the order of title, lead and topelement need a div, which displays flex }}\n        <div class="storyHeader">\n            <div id="timestamp">\n                {{#hasPremiumDecoration}}\n                    <span class="premium">ABO+</span>\n                {{/hasPremiumDecoration}}\n\n                {{! In mobile, there\'s no difference between "top" or "bottom" decoration }}\n                {{#isTopDecoration}}\n                    <span class="decoration" style="color: #{{decoration.color}};">\n                        <span>{{decoration.name}}</span>\n                        {{translate "Vor"}} <time data-timestamp="{{timestamp_updated_at}}">...</time>\n                    </span>\n                {{else}}\n                    {{#isBottomDecoration}}\n                        <span class="decoration" style="color: #{{decoration.color}};">\n                            {{translate "Vor"}} <time data-timestamp="{{timestamp_updated_at}}">...</time>\n                            &ndash; {{decoration.name}}\n                        </span>\n                    {{else}}\n                        {{#if timestamp_updated_at}}\n                            <span>{{formatDate timestamp_updated_at}}</span>\n                            <span>{{formatTime timestamp_updated_at}}</span>\n                        {{/if}}\n                    {{/isBottomDecoration}}\n                {{/isTopDecoration}}\n            </div>\n            <h1>\n                {{#isLematin}}\n                    {{#if keyword}}\n                        <span class="keyword">{{keyword}}</span>\n                    {{/if}}\n                {{/isLematin}}\n                \n                {{{title}}}\n            </h1>\n            <h2>\n                {{#if genre}}\n                    <span class="decoration" style="color: #{{genre.color}}">{{genre.name}}</span>\n                {{else}}\n                    {{#isLeadDecoration}}\n                        <span class="decoration" style="color: #{{decoration.color}};">{{decoration.name}}</span>\n                    {{/isLeadDecoration}}\n                {{/if}}\n\n                {{#if keyword}}\n                    <span class="keyword">{{keyword}}</span>\n                {{/if}}\n\n                {{{stripHtml lead}}}\n            </h2>\n\n\n            {{! To Do Find a solution to display the order of tile, lead and top element}}\n            {{! Top element }}\n            {{#if top_element}}\n                {{> contextBox top_element renderContext="topElement"}}\n            {{/if}}\n        </div>\n\n        {{!-- leMatin special author SM box --}}\n        {{#isLematin}}\n            <div class="authorBox">\n                <span class="authors">\n                    {{#if authors}}\n                        {{#each authors}}\n                            {{author_annotation_prefix}} {{name}}\n                        {{/each}}    \n                    {{/if}}\n                    <div id="timestamp">\n                        <span class="decoration" style="color: #{{decoration.color}};">\n                            <span>{{decoration.name}}</span>\n                            {{translate "Vor"}} <time data-timestamp="{{timestamp_updated_at}}">...</time>\n                        </span>\n                    </div>    \n                </span>\n                <div class="socialCounter"></div>\n            </div>    \n        {{else}}\n            {{! Author }}\n            <div class="authorBox">\n                <div id="authors">\n                    {{#unless authors.length}}\n                        <div class="clear"></div>\n                    {{/unless}}\n\n                    {{#isWertend}}\n                        {{#each authors}}\n                            <div class="author">\n                                {{#if picture}}\n                                    <div class="picture">\n                                        <img src="{{picture}}">\n                                    </div>\n                                {{/if}}\n\n                                {{author_annotation_prefix}} {{name}}\n\n                                {{#if twitter}}\n                                    <br><a href="https://twitter.com/{{twitter}}" target="_blank">@{{twitter}}</a>\n                                {{/if}}\n                            </div>\n                            <div class="clear"></div>\n                        {{/each}}\n                    {{else}}\n                        {{#each authors}}\n                            <div class="author">\n                                {{author_annotation_prefix}} {{name}}\n\n                                {{#if twitter}}\n                                    <br><a href="https://twitter.com/{{twitter}}" target="_blank">@{{twitter}}</a>\n                                {{/if}}\n                            </div>\n                            <div class="clear"></div>\n                        {{/each}}\n                    {{/isWertend}}\n                </div>\n                <div class="socialCounter"></div>\n            </div>\n        {{/isLematin}}\n\n        {{! Stock exchange trends }}\n        <div id="stockExchangeTrends"></div>\n\n        {{#if scoreboard_id}}\n            <div class="scoreboardContainer"></div>\n        {{/if}}\n\n        {{#if liveticker_id}}\n            {{#if scribble_element}}\n                <div class="livetickerTabs">\n                    <ul>\n                        <li class="active">\n                            {{!-- to do {{tamediaIcon "clock"}} --}}\n                            <span class="sprite-icons-livetickerActive"></span>\n                            <span class="sprite-icons-livetickerInactive"></span>\n                            {{translate "Liveticker"}}\n                        </li>\n\n                        <li>\n                            {{!-- to do {{tamediaIcon "socialView"}} --}}\n                            <span class="sprite-icons-socialViewActive"></span>\n                            <span class="sprite-icons-socialViewInactive"></span>\n                            {{scribble_element.title}}\n                        </li>\n                    </ul>\n                </div>\n\n                <div class="scribbleContainer">\n                    {{#with scribble_element}}\n                        {{> iframe dataUrl=iframe_url height="100%"}}\n                    {{/with}}\n                </div>\n            {{/if}}\n\n            <div class="livetickerContainer"></div>\n        {{/if}}\n\n        {{!--\n            Use this class "text" here, to be able to apply stylings in the css file to the html\n            elements withing the article text only\n        --}}\n        <div class="text">\n            {{! Inline elements }}\n            {{#each textParts}}\n                {{#isString this}}\n                    {{{this}}}\n                {{else}}\n                    {{> contextBox this renderContext="inlineElement"}}\n                {{/isString}}\n            {{/each}}      \n        </div>\n\n        <div class="listicle mobile"></div>\n\n        {{#if is_rate_active}}\n            <div class="rateBox"></div>\n        {{/if}}\n        \n        {{!-- source after listicle --}}\n        <div class="text">\n            {{#if source_annotation}}\n                <p id="sourceAnnotation">{{source_annotation}}</p>\n            {{/if}}\n\n            {{#each cotext_element.article_previews}}\n                <div class="coText">\n                    <p class="keyword">{{keyword}}</p>\n                    <p class="title">{{title}}</p>\n                    {{{text}}}\n                </div>\n            {{/each}}\n\n\n        </div>\n        {{> ad adType="ad-inside-full-pos2-article"}}\n\n        <div class="contextBoxes">\n        {{!-- new element best Comment Box --}}\n            {{#isLematin}}\n                <div class="contextBox bestCommentBox">\n                    <div class="bestComment">\n                        <span class="NnIcon quoteIcon commentIcon"></span>\n                        <p class="message"></p>\n                        {{#linkTo "/articles/%id%/comments" id=id class="bestCommentLink"}}Commenter{{/linkTo}}\n                    </div>\n                </div>\n            {{/isLematin}}\n\n            {{! Stock exchange info }}\n            {{#if auto_stock_exchange_element}}\n                <div class="contextBox articleElement stockExchangeInfo">\n                    {{#each auto_stock_exchange_element.organizations}}\n                        <h3>{{name}}</h3>\n\n                        {{> iframe url=chart_url className="stockExchangeInfo" height=200}}\n                    {{/each}}\n                </div>\n            {{/if}}\n\n            {{! Article elements}}   \n            {{#if article_elements.length}}\n                {{#each article_elements}}\n                    {{#isSupportedBoxtype}}\n                        {{> contextBox this renderContext="articleElement"}}\n                    {{/isSupportedBoxtype}}\n                {{/each}}\n            {{/if}}\n\n            {{#isLematin}}\n                <div class="contextBox articleElement categoryBox">\n                    <div>\n                        <h3></h3>\n                        <span>\n                            {{translate "letztes Update"}} {{#isLematin}} \u00e0 {{else}} {{translate "vor"}} {{/isLematin}}\n                            <time data-timestamp="{{getTimestamp}}">{{translate "wenigen Sek"}}.</time>\n                        </span>\n                    </div>\n                    <ul class="pageElement"></ul>\n                    {{> loader visible=true}}\n                </div>\n            {{/isLematin}}\n\n        </div>\n    {{/isExternalArticle}}\n    \n    {{> fullscreenLoader}}\n</article>\n\n{{!-- Social Media Box must be placed outside of article because it is sticky --}}\n<div>\n    <div class="socialMedia box">\n        {{> loader}}\n    </div>\n</div>');
}), define("app/templates/category", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<header>\n    <div class="left">\n        <a href="/" class="toggle">\n            {{tamediaIcon "leftMenu"}}\n        </a>\n    </div>\n\n    <div class="center">\n        <a href="/" class="customerLogo sprite-logos-{{getCustomerShortName}}"></a>\n    </div>\n\n    <div class="right"></div>\n</header>\n\n<div id="ad-overlay-category"></div>\n\n<article>\n    {{> ad adType="ad-inside-full-top-category"}}\n    <div class="lastUpdated">{{translate "Letztes Update"}}: <span></span></div>\n\n    {{#if sub_category_previews.length}}\n        <table class="subCategorySelection">\n            <tr>\n                <td>\n                    {{tamediaIcon "down"}}\n                </td>\n                <td>\n                    <select>\n                        <option disabled selected>{{translate "Unterkategorien"}}</option>\n\n                        {{#each sub_category_previews}}\n                            <option value="{{id}}">{{title}}</option>\n                        {{/each}}\n                    </select>\n                </td>\n            </tr>\n        </table>\n    {{/if}}\n\n    <nav>\n        <div class="categoryPageElements"></div>\n    </nav>\n\n    {{> fullscreenLoader}}\n</article>');
}), define("app/templates/comment", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<header>\n    <div class="left">\n        <a href="/" class="back">\n            {{tamediaIcon "backward"}}\n        </a>\n    </div>\n\n    <div class="center">\n        <a href="/" class="customerLogo sprite-logos-{{getCustomerShortName}}"></a>\n    </div>\n\n    <div class="right"></div>\n</header>\n\n<article class="{{layout_type}}">\n    <div id="timestamp">\n        {{! In mobile, there\'s no difference between "top" or "bottom" decoration }}\n        {{#isTopOrBottomDecoration}}\n            <span class="decoration" style="color: #{{decoration.color}};">\n                {{translate "Vor"}} <time data-timestamp="{{timestamp_updated_at}}">...</time>\n                &ndash; {{decoration.name}}\n            </span>\n        {{else}}\n            {{#if timestamp_updated_at}}\n                <span>{{formatDate timestamp_updated_at}}</span>\n                <span>{{formatTime timestamp_updated_at}}</span>\n            {{/if}}\n        {{/isTopOrBottomDecoration}}\n    </div>\n\n    {{#if title}}\n        <h1>{{{title}}}</h1>\n\n        <div class="separator"></div>\n    {{/if}}\n\n    <div id="comments"></div>\n\n    {{> fullscreenLoader}}\n</article>');
}), define("app/templates/contextBox", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<div class="contextBox {{renderContext}} {{boxtype}} {{#isPollBox}}NnPollBox{{/isPollBox}}">\n    {{#if title}}\n        <h3>{{title}}</h3>\n    {{/if}}\n    {{!-- related articles --}}\n    {{#isArticlesBox}}\n        <ul>\n            {{#each article_previews}}\n                {{> articlePreview}}\n            {{/each}}\n        </ul>\n    {{/isArticlesBox}}\n\n    {{#isPictureBox}}\n        {{#if picture_zoomable_url}}\n            <a href="{{picture_zoomable_url}}" target="_blank">\n                <img src="{{picture_url}}">\n\n                <div class="enlarge">\n                    {{tamediaIcon "enlarge"}}\n                </div>\n            </a>\n        {{else}}\n            <img src="{{picture_url}}">\n        {{/if}}\n    {{/isPictureBox}}\n\n    {{#isAudioBox}}\n        <audio controls src="{{audio.url}}">\n    {{/isAudioBox}}\n\n    {{#isVideoBox}}\n        <iframe src="//{{getCustomerDomain}}.ch/extern/videoplayer/videoplayer-nn.html?params=client@{{getCustomerDomain}}|videoId@{{video.id}}|platform@webapp" allowfullscreen></iframe>\n    {{/isVideoBox}}\n\n    {{#isLinkBox}}\n        {{#each links}}\n            <a href="{{url}}" target="_blank">{{name}}</a>\n        {{/each}}\n    {{/isLinkBox}}\n\n    {{#isInfoBox}}\n        {{{html}}}\n    {{/isInfoBox}}\n\n    {{#isYouTubeBox}}\n        {{> iframe url=url className="youtube" height=200}}\n    {{/isYouTubeBox}}\n\n    {{#isLiveStreamBox}}\n        {{> iframe url=url className="liveStream" height=300}}\n    {{/isLiveStreamBox}}\n\n    {{#isPictureVotingBox}}\n        {{> iframe url=url className="pictureVoting"}}\n    {{/isPictureVotingBox}}\n\n    {{#isQuizBox}}\n        {{> iframe url=url className="quiz" height=2000}}\n    {{/isQuizBox}}\n\n    {{#isChartBox}}\n        {{> iframe url=chart.url className="chart" height=400}}\n    {{/isChartBox}}\n\n    {{#isChartMapBox}}\n        <a href="{{chart_map.url}}" target="_blank"></a>\n    {{/isChartMapBox}}\n\n    {{#isStockExchangeChartBox}}\n        {{> iframe url=iframe_url className="stock_exchange_chart" height=200}}\n    {{/isStockExchangeChartBox}}\n\n    {{#isPollBox}}\n        <div data-pollId="{{poll_id}}">\n            {{!-- will be dynamically added in the article --}}\n        </div>\n    {{/isPollBox}}\n\n    {{#isSlideshowBox}}\n        <div class="slideshowContainer" data-id="{{slideshow.id}}"></div>\n    {{/isSlideshowBox}}\n\n    {{#isIframeBoxMap}}\n        {{> iframe url=iframe_url className=iframe_class_name urlParams="keepSize=width"}}\n    {{else}}\n        {{#isIframeBox}}\n            {{> iframe url=iframe_url className=iframe_class_name}}\n        {{/isIframeBox}}\n    {{/isIframeBoxMap}}\n\n    {{#isNewsletterSubscriptionBox}}\n        <div class="newsletterSubscriptionBox"></div>\n    {{/isNewsletterSubscriptionBox}}    \n    \n    {{#if caption}}\n        <div class="caption">\n            {{{caption}}}\n            {{#if picture_source_annotation}}\n                <span class="picture_source_annotation">\n                    {{picture_source_annotation}}\n                </span>\n            {{/if}}\n        </div>\n    {{/if}}\n</div>');
}), define("app/templates/front", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<header>\n    <div class="left">\n        <a href="/" class="toggle">\n            <div class="NnIcon leftMenuIcon"></div>\n        </a>\n    </div>\n\n    <div class="center">\n        <a href="/" class="customerLogo sprite-logos-{{getCustomerShortName}}"></a>\n    </div>\n\n    <div class="right"></div>\n</header>\n<div id="ad-overlay-front"></div>\n\n<article>\n    {{> ad adType="ad-inside-full-top-front"}}\n    <div class="lastUpdated">{{translate "Letztes Update"}}: <span></span></div>\n\n    <nav id="default">\n        <div></div>\n        {{> loader}}\n\n        <a href="javascript:void(0);" class="forceDesktop">\n            {{translate "Zur Desktop-Ansicht wechseln"}}\n        </a>\n    </nav>\n\n    {{> fullscreenLoader}}\n</article>\n');
}), define("app/templates/iframe", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<div class="iframeContainer {{className}}">\n    <iframe\n        allowfullscreen\n\n        {{!-- If wanted, append appId (needed for blogs for hiding their header) --}}\n        {{#if appifiedUrl}}\n            src="{{appifyUrl url urlParams}}"\n        {{else}}\n            src="{{url}}"\n        {{/if}}\n\n        {{!-- The clients "scrolling" attribute should be stronger than the servers --}}\n        {{#if scrolling}}\n            scrolling="yes"\n        {{else}}\n            {{#if iframe_scrolling}}\n                scrolling="yes"\n            {{else}}\n                scrolling="no"\n\n                {{!-- This cute little chap is for Safari --}}\n                {{!-- Without this, the iframe gets as wide as its content, see 26372008 --}}\n                {{!-- http://stackoverflow.com/questions/20123960/how-to-get-iframe-width-100-in-iphone-portrait-view --}}\n                style="min-width: 100%; width: 100px; *width: 100%;"\n            {{/if}}\n        {{/if}}\n\n        {{#if dataUrl}}\n            data-url="{{appifyUrl dataUrl urlParams}}"\n        {{/if}}\n\n        {{!--\n            TODO: Refactor as soon as the API refactored their iframe logic\n            Check following articles (also on the desktop):\n            - 18810858\n            - 14216796\n        --}}\n        {{#hasIframeHeight}}\n            {{#if iframe_height}}\n                height="{{iframe_height}}"\n            {{else}}\n                height="300"\n            {{/if}}\n        {{else}}\n            {{#if height}}\n                height="{{height}}"\n            {{else}}\n                height="200"\n            {{/if}}\n        {{/hasIframeHeight}}\n    ></iframe>\n</div>');
}), define("app/templates/leftMenu", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<ul>\n    {{#isPaywallEnabled}}\n        <li class="paywallUserNavigation"></li>\n    {{/isPaywallEnabled}}\n\n    {{#each navigations}}\n        {{> menuItem}}\n    {{/each}}\n\n    <li><a href="{{site.feedback_url}}">Feedback</a></li>\n\n    {{#isDebugMode}}\n        <li><a href="javascript:void(0);" name="disableAds">Tweak: No Ads for 1h</a></li>\n        <li><a href="javascript:void(0);" name="disablePaywall">Tweak: No Paywall for 1h</a></li>\n        <li><a href="javascript:void(0);" name="enablePaywall">Tweak: Paywall on for 1h</a></li>\n        <li>\n            <a>\n                {{translate "\u00dcber diese Version"}}\n                <p id="revision">\n                    33453a2 (HEAD -> master, origin/master, origin/HEAD), Disable ads in the slideshow, Roy Holliger, 2017-09-20\n                </p>\n            </a>\n        </li>\n    {{/isDebugMode}}\n</ul>');
}), define("app/templates/menuItem", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<li class="{{navigation_type}}">\n    {{#isNavigationTypeTitle}}\n        <h3>{{name}}</h3>\n    {{else}}\n        {{#isInternalUrl}}\n            {{#isFrontPath}}\n                {{! Front }}\n                <a class="category" href="/">{{name}}</a>\n            {{/isFrontPath}}\n\n            {{#isWeatherPath}}\n                {{! Weather }}\n                <a class="category" href="/weather">{{name}}</a>\n            {{/isWeatherPath}}\n        {{else}}\n            {{#isNavigationTypeCategory}}\n                <a class="category" href="/categories/{{category_preview.id}}">{{name}}</a>\n            {{else}}\n                <a href="{{path}}">{{name}}</a>\n            {{/isNavigationTypeCategory}}\n        {{/isInternalUrl}}\n    {{/isNavigationTypeTitle}}\n\n    {{#if sub_navigations.length}}\n        <ul>\n            {{#each sub_navigations}}\n                {{> menuItem}}\n            {{/each}}\n        </ul>\n    {{/if}}\n</li>');
}), define("app/templates/pageElement", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<ul class="pageElement {{boxtype}} {{layout_type}}">\n    <li>\n        {{#if title}}\n            {{#isCategoryLink}}\n                {{#linkTo "/categories/%id%?placement_type=%placementType%" id=linked_object_id placementType=linked_object_placement_type}}\n                    <h2>{{title}}<span class="NnIcon fowardIcon"></span></h2>\n                {{/linkTo}}\n            {{else}}\n                {{#isWeatherLink}}\n                    {{#linkTo "/weather"}}\n                        <h2>{{title}}<span class="NnIcon fowardIcon"></span></h2>\n                    {{/linkTo}}\n                {{else}}\n                    <h2>{{title}}</h2>\n                {{/isWeatherLink}}\n            {{/isCategoryLink}}\n        {{/if}}\n\n        {{#isLematinCategorySlider}}\n            <div class="categorySlider"></div>\n        {{else}}\n            {{#isArticlesBox}}\n                <ul>\n                    {{#each articles}}\n                        {{> articlePreview pageElementLayoutType=../layout_type articles=../articles}}\n                    {{/each}}\n                </ul>\n            {{/isArticlesBox}}\n        {{/isLematinCategorySlider}}\n\n        {{#isSlideshowOverviewBox}}\n            <ul>\n                <li class="contextBox slideshow" data-id="{{id}}"></li>\n            </ul>\n        {{/isSlideshowOverviewBox}}\n\n        {{#isIframeBox}}\n            <ul>\n                <li>\n                    {{> iframe url=iframe_url className=iframe_class_name}}\n                </li>\n            </ul>\n        {{/isIframeBox}}\n\n        {{#isMeteonewsBox}}\n            <ul>\n                <li class="forecast">\n                    {{#each meteonews.forecasts}}\n                        <div class="day">\n                            {{#isLematin}}\n                                <div class="sprite-meteonews-lm-{{symbol_code}}b meteolm"></div>\n                            {{else}}\n                                <div class="sprite-meteonews-{{symbol_code}}"></div>\n                            {{/isLematin}}\n                            <div class="weekDay">{{formatMeteonewsDay end_timestamp}}</div>\n                            <div class="temperature">{{temperature_avg}}{{temperature_avg_unit}}</div>\n                        </div>\n                    {{/each}}\n                </li>\n            </ul>\n            {{#isLematin}}\n                <div class="weatherprovider">\n                    <span>m\u00e9t\u00e9osuisse</span>\n                </div>\n            {{/isLematin}}\n        {{/isMeteonewsBox}}\n    </li>\n</ul>');
}), define("app/templates/recommenderPageElement", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<ul class="pageElement recommender">\n    <li>\n        <h2>{{ title }}</h2>\n\n        <div class="articlePreview"></div>\n    </li>\n</ul>');
}), define("app/templates/scoreboard", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<div class="scoreboard">\n    {{#with tennis_result}}\n        <table class="tennis">\n            <tbody>\n                <tr>\n                    <td></td>\n                    {{#forEachSet}}\n                        <td>{{set_number}}. S</td>\n                    {{/forEachSet}}\n                </tr>\n                <tr>\n                    <td>\n                        {{player_left}}\n\n                        {{#isLeftPlayersTurn}}\n                            <span class="sprite-icons-tennisRacket"></span>\n                        {{/isLeftPlayersTurn}}\n                    </td>\n\n                    {{#forEachSet}}\n                        <td {{#hasLeftPlayerWon}}class="winner"{{/hasLeftPlayerWon}}>{{score_left}}</td>\n                    {{/forEachSet}}\n                </tr>\n                <tr>\n                    <td>\n                        {{player_right}}\n\n                        {{#isRightPlayersTurn}}\n                            <span class="sprite-icons-tennisRacket"></span>\n                        {{/isRightPlayersTurn}}\n                    </td>\n\n                    {{#forEachSet}}\n                        <td {{#hasRightPlayerWon}}class="winner"{{/hasRightPlayerWon}}>{{score_right}}</td>\n                    {{/forEachSet}}\n                </tr>\n            </tbody>\n        </table>\n    {{/with}}\n\n    {{#with teamsport_result}}\n        <table class="teamsport">\n            <tr>\n                <td>\n                    {{#if icon_home}}\n                        <img src="{{icon_home}}"><br>\n                    {{/if}}\n\n                    {{name_home}}\n                </td>\n                <td>{{score_home}} : {{score_visitor}}</td>\n                <td>\n                    {{#if icon_visitor}}\n                        <img src="{{icon_visitor}}"><br>\n                    {{/if}}\n\n                    {{name_visitor}}\n                </td>\n            </tr>\n        </table>\n    {{/with}}\n</div>');
}), define("app/templates/slideshow", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<article class="noScrollbars">\n    <div class="slideshow"></div>\n\n    {{> fullscreenLoader style="black"}}\n</article>');
}), define("app/templates/stockExchangeTrend", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<a href="{{url}}" target="_blank">\n    <div class="sprite-stockExchange inlineBlock"></div>\n\n    <span>{{symbol}}</span>\n    <span>{{price}}</span>\n    <span class="{{getStockPerformanceColor performance_pct}}">{{toTwoDecimals performance_pct}}%</span>\n</a>');
}), define("app/templates/video", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<article class="noScrollbars">\n    <div class="video">\n        <div class="NnVideoContainer">\n            <div class="header">\n                <div class="backButton"><a>{{translate "Zur\u00fcck"}}</a></div>\n\n                <div class="row title">\n                    <h1>{{title}}</h1>\n                </div>\n\n                <div class="row spacer"></div>\n            </div>\n\n            <div class="body">\n                {{> fullscreenLoader style="transparent" visible="true"}}\n                {{!-- will be appended dynamically --}}\n            </div>\n\n            <div class="row footerContainer">\n                <div class="footer cell">\n                    <div class="footerWrapper">\n                        <div class="caption">{{lead}}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</article>');
}), define("app/templates/weather", ["exports"], function(obj) {
    obj.default = Handlebars.compile('<header>\n    <div class="left">\n        <a href="/" class="back">\n            {{tamediaIcon "backward"}}\n        </a>\n    </div>\n\n    <div class="center">\n        <a href="/" class="customerLogo sprite-logos-{{getCustomerShortName}}"></a>\n    </div>\n\n    <div class="right"></div>\n</header>\n\n<div id="adbanner-weather-interstitial"></div>\n\n<article>\n    <div id="adbanner-weather-top-banner"></div>\n\n    {{> iframe url=url height=1500}}\n\n    {{> fullscreenLoader}}\n</article>');
}), define("app/templates/weatherObservation", ["exports"], function(obj) {
    obj.default = Handlebars.compile('{{#linkTo "/weather" class="meteonews"}}\n    {{!-- exception for leMatin diva due to different icons --}}\n    {{#isLematin}}\n    <div class="sprite-meteonews-lm-small-{{symbol_code}}b"></div>\n    {{else}}\n    <div class="sprite-meteonews-small-{{symbol_code}}"></div>\n    {{/isLematin}}\n    <div>{{temperature}} {{temperature_unit}}</div>\n{{/linkTo}}');
}), define("app/viewManager", ["framework/viewManager", "framework/browser"], function(api, b) {
    var show;
    var activate;
    var err;
    var callback;
    var p;
    /** @type {boolean} */
    err = false;
    p = {
        property : "transform",
        duration : "0.3s",
        timingFn : "ease-in-out"
    };
    if (b.browser.isWebKit()) {
        /** @type {string} */
        p.property = "-webkit-transform";
    }
    /**
     * @param {string} id
     * @param {string} pos
     * @param {?} content
     * @return {?}
     */
    show = function(id, pos, content) {
        var element;
        var self;
        var optgroup;
        switch(optgroup = [], element = $("#" + pos).show(), self = $("#" + id).show(), $("#blocker").show(), content) {
            case "rightToLeft":
                element.attr("data-scrollstate", element.find("article").scrollTop());
                self.css("zIndex", 3);
                optgroup.push(element.NnTransit(p.property, "translateX(0)", "translateX(-50px)", p.duration, p.timingFn, function() {
                    return element.hide();
                }));
                optgroup.push(self.NnTransit(p.property, "translateX(100%)", "translateX(0)", p.duration, p.timingFn));
                break;
            case "leftToRight":
                element.find("article").scrollTop(element.attr("data-scrollstate"));
                optgroup.push(element.NnTransit(p.property, "translateX(-50px)", "translateX(0)", p.duration, p.timingFn, function() {
                    return element.css("zIndex", 3), self.hide();
                }));
                optgroup.push(self.NnTransit(p.property, "translateX(0)", "translateX(100%)", p.duration, p.timingFn));
        }
        return RSVP.all(optgroup).then(function() {
            return $("#blocker").hide();
        });
    };
    /**
     * @param {string} label
     * @return {?}
     */
    callback = function(label) {
        return new RSVP.Promise(function(done) {
            var self;
            return err ? done() : (err = true, $("aside").show(), self = $("#" + label), self.NnTransit(p.property, "translateX(0)", "translateX(85%)", p.duration, p.timingFn, function() {
                return done();
            }));
        });
    };
    /**
     * @param {string} container
     * @return {?}
     */
    activate = function(container) {
        return new RSVP.Promise(function(callback) {
            var self;
            return err ? (err = false, self = $("#" + container), self.NnTransit(p.property, "translateX(85%)", "translateX(0)", p.duration, p.timingFn, function() {
                return $("aside").hide(), callback();
            })) : callback();
        });
    };
    /**
     * @param {string} item
     * @return {?}
     */
    api.viewManager.toggleLeftMenu = function(item) {
        return err ? activate(item) : callback(item);
    };
    /**
     * @param {string} target
     * @param {string} node
     * @param {?} content
     * @return {?}
     */
    api.viewManager.show = function(target, node, content) {
        return new RSVP.Promise(function($sanitize) {
            return activate(node).then(function() {
                if ($("aside").hide().css("zIndex", 1), $("section").hide().css("zIndex", 2), $("#blocker").css("zIndex", 4), null == node || node === target) {
                    return $("#" + target).css("zIndex", 3).show(), $sanitize();
                }
                switch(content) {
                    case "rightToLeft":
                        return b.browser.isAndroid() || (b.browser.isWP() || $sanitize()), show(target, node, content).then(function() {
                            return $sanitize();
                        });
                    case "leftToRight":
                        return b.browser.isAndroid() || (b.browser.isWP() || $sanitize()), show(node, target, content).then(function() {
                            return $sanitize();
                        });
                }
            });
        });
    };
});
