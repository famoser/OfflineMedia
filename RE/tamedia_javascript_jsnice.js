window.defaultCustomer = "tagesanzeiger", window.api = "local", function(global) {
  var __define_;
  var __require_;
  !function() {
    var registry = {};
    var globStoredOptions = {};
    /**
     * @param {string} name
     * @param {Array} opt_attributes
     * @param {Function} callback
     * @return {undefined}
     */
    __define_ = function(name, opt_attributes, callback) {
      registry[name] = {
        deps : opt_attributes,
        /** @type {Function} */
        callback : callback
      };
    };
    /**
     * @param {string} name
     * @return {?}
     */
    __require_ = function(name) {
      /**
       * @param {string} child
       * @return {?}
       */
      function resolve(child) {
        if ("." !== child.charAt(0)) {
          return child;
        }
        var values = child.split("/");
        var pieces = name.split("/").slice(0, -1);
        /** @type {number} */
        var css = 0;
        var valuesLen = values.length;
        for (;valuesLen > css;css++) {
          var value = values[css];
          if (".." === value) {
            pieces.pop();
          } else {
            if ("." === value) {
              continue;
            }
            pieces.push(value);
          }
        }
        return pieces.join("/");
      }
      if (globStoredOptions[name]) {
        return globStoredOptions[name];
      }
      if (globStoredOptions[name] = {}, !registry[name]) {
        throw new Error("Could not find module " + name);
      }
      var data;
      var mod = registry[name];
      var deps = mod.deps;
      var callback = mod.callback;
      /** @type {Array} */
      var args = [];
      /** @type {number} */
      var i = 0;
      var l = deps.length;
      for (;l > i;i++) {
        if ("exports" === deps[i]) {
          args.push(data = {});
        } else {
          args.push(__require_(resolve(deps[i])));
        }
      }
      var params = callback.apply(this, args);
      return globStoredOptions[name] = data || params;
    };
    __require_.entries = registry;
  }();
  __define_("rsvp/all-settled", ["./promise", "./utils", "exports"], function(__dependency8__, __dependency1__, __exports__) {
    /**
     * @param {?} value
     * @return {?}
     */
    function fulfilled(value) {
      return{
        state : "fulfilled",
        value : value
      };
    }
    /**
     * @param {?} reason
     * @return {?}
     */
    function rejected(reason) {
      return{
        state : "rejected",
        reason : reason
      };
    }
    var defer = __dependency8__["default"];
    var isArray = __dependency1__.isArray;
    var isNonThenable = __dependency1__.isNonThenable;
    /**
     * @param {string} elements
     * @param {Object} dataAndEvents
     * @return {?}
     */
    __exports__["default"] = function(elements, dataAndEvents) {
      return new defer(function(resolve, dataAndEvents) {
        /**
         * @param {number} index
         * @return {?}
         */
        function fulfilledResolver(index) {
          return function(value) {
            resolveAll(index, fulfilled(value));
          };
        }
        /**
         * @param {number} index
         * @return {?}
         */
        function rejectedResolver(index) {
          return function(reason) {
            resolveAll(index, rejected(reason));
          };
        }
        /**
         * @param {number} property
         * @param {?} value
         * @return {undefined}
         */
        function resolveAll(property, value) {
          values[property] = value;
          if (0 === --length) {
            resolve(values);
          }
        }
        if (!isArray(elements)) {
          throw new TypeError("You must pass an array to allSettled.");
        }
        var value;
        var length = elements.length;
        if (0 === length) {
          return void resolve([]);
        }
        /** @type {Array} */
        var values = new Array(length);
        /** @type {number} */
        var index = 0;
        for (;index < elements.length;index++) {
          value = elements[index];
          if (isNonThenable(value)) {
            resolveAll(index, fulfilled(value));
          } else {
            defer.resolve(value).then(fulfilledResolver(index), rejectedResolver(index));
          }
        }
      }, dataAndEvents);
    };
  });
  __define_("rsvp/all", ["./promise", "exports"], function(__exports__, dataAndEvents) {
    var $q = __exports__["default"];
    /**
     * @param {?} res
     * @param {?} isXML
     * @return {?}
     */
    dataAndEvents["default"] = function(res, isXML) {
      return $q.all(res, isXML);
    };
  });
  __define_("rsvp/asap", ["exports"], function(__exports__) {
    /**
     * @return {?}
     */
    function accountGeneric() {
      return function() {
        process.nextTick(next);
      };
    }
    /**
     * @return {?}
     */
    function useMutationObserver() {
      /** @type {number} */
      var data = 0;
      /** @type {MutationObserver} */
      var s = new Some(next);
      /** @type {Text} */
      var link = document.createTextNode("");
      return s.observe(link, {
        characterData : true
      }), function() {
        /** @type {number} */
        link.data = data = ++data % 2;
      };
    }
    /**
     * @return {?}
     */
    function wrapListener() {
      return function() {
        setTimeout(next, 1);
      };
    }
    /**
     * @return {undefined}
     */
    function next() {
      /** @type {number} */
      var i = 0;
      for (;i < files.length;i++) {
        var val = files[i];
        var isUndefined = val[0];
        var suiteView = val[1];
        isUndefined(suiteView);
      }
      /** @type {number} */
      files.length = 0;
    }
    /**
     * @param {?} field
     * @param {?} file
     * @return {undefined}
     */
    __exports__["default"] = function(field, file) {
      /** @type {number} */
      var c = files.push([field, file]);
      if (1 === c) {
        throttledUpdate();
      }
    };
    var throttledUpdate;
    /** @type {(Window|{})} */
    var browserGlobal = "undefined" != typeof window ? window : {};
    var Some = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
    /** @type {Array} */
    var files = [];
    throttledUpdate = "undefined" != typeof process && "[object process]" === {}.toString.call(process) ? accountGeneric() : Some ? useMutationObserver() : wrapListener();
  });
  __define_("rsvp/config", ["./events", "exports"], function(__dependency2__, __exports__) {
    /**
     * @param {?} desiredNonCommentArgIndex
     * @param {Object} val
     * @return {?}
     */
    function configure(desiredNonCommentArgIndex, val) {
      return "onerror" === desiredNonCommentArgIndex ? void config.on("error", val) : 2 !== arguments.length ? config[desiredNonCommentArgIndex] : void(config[desiredNonCommentArgIndex] = val);
    }
    var EventTarget = __dependency2__["default"];
    var config = {
      instrument : false
    };
    EventTarget.mixin(config);
    __exports__.config = config;
    /** @type {function (?, Object): ?} */
    __exports__.configure = configure;
  });
  __define_("rsvp/defer", ["./promise", "exports"], function(__dependency1__, __exports__) {
    var Promise = __dependency1__["default"];
    /**
     * @param {Object} label
     * @return {?}
     */
    __exports__["default"] = function(label) {
      var deferred = {};
      return deferred.promise = new Promise(function(resolve, reject) {
        deferred.resolve = resolve;
        /** @type {Function} */
        deferred.reject = reject;
      }, label), deferred;
    };
  });
  __define_("rsvp/events", ["exports"], function(__exports__) {
    /**
     * @param {(Array|NodeList)} arr
     * @param {Function} obj
     * @return {?}
     */
    function indexOf(arr, obj) {
      /** @type {number} */
      var i = 0;
      var l = arr.length;
      for (;l > i;i++) {
        if (arr[i] === obj) {
          return i;
        }
      }
      return-1;
    }
    /**
     * @param {Object} object
     * @return {?}
     */
    function callbacksFor(object) {
      var events = object._promiseCallbacks;
      return events || (events = object._promiseCallbacks = {}), events;
    }
    __exports__["default"] = {
      /**
       * @param {Object} object
       * @return {?}
       */
      mixin : function(object) {
        return object.on = this.on, object.off = this.off, object.trigger = this.trigger, object._promiseCallbacks = void 0, object;
      },
      /**
       * @param {string} type
       * @param {Function} value
       * @return {undefined}
       */
      on : function(type, value) {
        var seen;
        var special = callbacksFor(this);
        seen = special[type];
        if (!seen) {
          /** @type {Array} */
          seen = special[type] = [];
        }
        if (-1 === indexOf(seen, value)) {
          seen.push(value);
        }
      },
      /**
       * @param {string} type
       * @param {Function} target
       * @return {?}
       */
      off : function(type, target) {
        var listeners;
        var index;
        var data = callbacksFor(this);
        return target ? (listeners = data[type], index = indexOf(listeners, target), void(-1 !== index && listeners.splice(index, 1))) : void(data[type] = []);
      },
      /**
       * @param {string} type
       * @param {?} data
       * @return {undefined}
       */
      trigger : function(type, data) {
        var codeSegments;
        var part;
        var special = callbacksFor(this);
        if (codeSegments = special[type]) {
          /** @type {number} */
          var i = 0;
          for (;i < codeSegments.length;i++) {
            (part = codeSegments[i])(data);
          }
        }
      }
    };
  });
  __define_("rsvp/filter", ["./promise", "./utils", "exports"], function(__dependency1__, __dependency3__, __exports__) {
    var Handlebars = __dependency1__["default"];
    var isFunction = __dependency3__.isFunction;
    /**
     * @param {?} input
     * @param {string} optgroup
     * @param {?} context
     * @return {?}
     */
    __exports__["default"] = function(input, optgroup, context) {
      return Handlebars.all(input, context).then(function(data) {
        if (!isFunction(optgroup)) {
          throw new TypeError("You must pass a function as filter's second argument.");
        }
        var a = data.length;
        /** @type {Array} */
        var input = new Array(a);
        /** @type {number} */
        var b = 0;
        for (;a > b;b++) {
          input[b] = optgroup(data[b]);
        }
        return Handlebars.all(input, context).then(function(paramNames) {
          /** @type {Array} */
          var out = new Array(a);
          /** @type {number} */
          var i = 0;
          /** @type {number} */
          var p = 0;
          for (;a > p;p++) {
            if (paramNames[p] === true) {
              out[i] = data[p];
              i++;
            }
          }
          return out.length = i, out;
        });
      });
    };
  });
  __define_("rsvp/hash-settled", ["./promise", "./utils", "exports"], function($cookies, __dependency2__, __exports__) {
    /**
     * @param {?} to
     * @return {?}
     */
    function compute(to) {
      return{
        state : "fulfilled",
        value : to
      };
    }
    /**
     * @param {?} error
     * @return {?}
     */
    function rejected(error) {
      return{
        state : "rejected",
        reason : error
      };
    }
    var value = $cookies["default"];
    var isNonThenable = __dependency2__.isNonThenable;
    var keysOf = __dependency2__.keysOf;
    /**
     * @param {Object} variables
     * @param {?} dataAndEvents
     * @return {?}
     */
    __exports__["default"] = function(variables, dataAndEvents) {
      return new value(function(fire, dataAndEvents) {
        /**
         * @param {?} index
         * @return {?}
         */
        function fulfillmentAt(index) {
          return function(from) {
            fn(index, compute(from));
          };
        }
        /**
         * @param {?} index
         * @return {?}
         */
        function rejectedResolver(index) {
          return function(result) {
            fn(index, rejected(result));
          };
        }
        /**
         * @param {?} key
         * @param {?} value
         * @return {undefined}
         */
        function fn(key, value) {
          memory[key] = value;
          if (0 === --cnl) {
            fire(memory);
          }
        }
        var from;
        var index;
        var memory = {};
        var codeSegments = keysOf(variables);
        var cnl = codeSegments.length;
        if (0 === cnl) {
          return void fire(memory);
        }
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          index = codeSegments[i];
          from = variables[index];
          if (isNonThenable(from)) {
            fn(index, compute(from));
          } else {
            value.resolve(from).then(fulfillmentAt(index), rejectedResolver(index));
          }
        }
      });
    };
  });
  __define_("rsvp/hash", ["./promise", "./utils", "exports"], function(handlers, __dependency2__, __exports__) {
    var handler = handlers["default"];
    var isNonThenable = __dependency2__.isNonThenable;
    var keysOf = __dependency2__.keysOf;
    /**
     * @param {Object} object
     * @param {?} dataAndEvents
     * @return {?}
     */
    __exports__["default"] = function(object, dataAndEvents) {
      return new handler(function(callback, done) {
        /**
         * @param {?} key
         * @return {?}
         */
        function check(key) {
          return function(value) {
            flags[key] = value;
            if (0 === --il) {
              callback(flags);
            }
          };
        }
        /**
         * @param {?} error
         * @return {undefined}
         */
        function rejected(error) {
          /** @type {number} */
          il = 0;
          done(error);
        }
        var value;
        var key;
        var flags = {};
        var keys = keysOf(object);
        var il = keys.length;
        if (0 === il) {
          return void callback(flags);
        }
        /** @type {number} */
        var i = 0;
        for (;i < keys.length;i++) {
          key = keys[i];
          value = object[key];
          if (isNonThenable(value)) {
            flags[key] = value;
            if (0 === --il) {
              callback(flags);
            }
          } else {
            handler.resolve(value).then(check(key), rejected);
          }
        }
      });
    };
  });
  __define_("rsvp/instrument", ["./config", "./utils", "exports"], function(__dependency1__, Time, __exports__) {
    var config = __dependency1__.config;
    var now = Time.now;
    /**
     * @param {string} type
     * @param {Object} promise
     * @param {Object} child
     * @return {undefined}
     */
    __exports__["default"] = function(type, promise, child) {
      try {
        config.trigger(type, {
          guid : promise._guidKey + promise._id,
          eventName : type,
          detail : promise._detail,
          childGuid : child && promise._guidKey + child._id,
          label : promise._label,
          timeStamp : now(),
          stack : (new Error(promise._label)).stack
        });
      } catch (f) {
        setTimeout(function() {
          throw f;
        }, 0);
      }
    };
  });
  __define_("rsvp/map", ["./promise", "./utils", "exports"], function(__dependency1__, __dependency3__, __exports__) {
    var Handlebars = __dependency1__["default"];
    var compiled = (__dependency3__.isArray, __dependency3__.isFunction);
    /**
     * @param {?} input
     * @param {?} mod
     * @param {?} context
     * @return {?}
     */
    __exports__["default"] = function(input, mod, context) {
      return Handlebars.all(input, context).then(function(employees) {
        if (!compiled(mod)) {
          throw new TypeError("You must pass a function as map's second argument.");
        }
        var l = employees.length;
        /** @type {Array} */
        var res = new Array(l);
        /** @type {number} */
        var i = 0;
        for (;l > i;i++) {
          res[i] = mod(employees[i]);
        }
        return Handlebars.all(res, context);
      });
    };
  });
  __define_("rsvp/node", ["./promise", "./utils", "exports"], function(__exports__, __dependency3__, dataAndEvents) {
    var $q = __exports__["default"];
    var isArray = __dependency3__.isArray;
    /**
     * @param {Function} context
     * @param {Object} deps
     * @return {?}
     */
    dataAndEvents["default"] = function(context, deps) {
      /**
       * @return {?}
       */
      function initialize() {
        /** @type {number} */
        var l = arguments.length;
        /** @type {Array} */
        var res = new Array(l);
        /** @type {number} */
        var i = 0;
        for (;l > i;i++) {
          res[i] = arguments[i];
        }
        var config;
        return err || (obj || !deps) ? config = this : (console.warn('Deprecation: RSVP.denodeify() doesn\'t allow setting the "this" binding anymore. Use yourFunction.bind(yourThis) instead.'), config = deps), $q.all(res).then(function(args) {
          /**
           * @param {?} each
           * @param {?} callback
           * @return {undefined}
           */
          function map(each, callback) {
            /**
             * @return {undefined}
             */
            function options() {
              /** @type {number} */
              var $_len = arguments.length;
              /** @type {Array} */
              var args = new Array($_len);
              /** @type {number} */
              var $_i = 0;
              for (;$_len > $_i;$_i++) {
                args[$_i] = arguments[$_i];
              }
              var actual = args[0];
              var funcs = args[1];
              if (actual) {
                callback(actual);
              } else {
                if (err) {
                  each(args.slice(1));
                } else {
                  if (obj) {
                    var prop;
                    var i;
                    var base = {};
                    /** @type {Array.<?>} */
                    var source = args.slice(1);
                    /** @type {number} */
                    i = 0;
                    for (;i < deps.length;i++) {
                      prop = deps[i];
                      base[prop] = source[i];
                    }
                    each(base);
                  } else {
                    each(funcs);
                  }
                }
              }
            }
            args.push(options);
            context.apply(config, args);
          }
          return new $q(map);
        });
      }
      /** @type {boolean} */
      var err = deps === true;
      var obj = isArray(deps);
      return initialize.__proto__ = context, initialize;
    };
  });
  __define_("rsvp/promise", ["./config", "./events", "./instrument", "./utils", "./promise/cast", "./promise/all", "./promise/race", "./promise/resolve", "./promise/reject", "exports"], function(__dependency1__, __exports__, dataAndEvents, __dependency4__, __dependency5__, __dependency2__, __dependency7__, __dependency8__, __dependency9__, column) {
    /**
     * @return {undefined}
     */
    function noop() {
    }
    /**
     * @param {string} name
     * @param {Object} value
     * @return {undefined}
     */
    function Promise(name, value) {
      if (!isFunction(name)) {
        throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
      }
      if (!(this instanceof Promise)) {
        throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
      }
      /** @type {number} */
      this._id = counter++;
      /** @type {Object} */
      this._label = value;
      /** @type {Array} */
      this._subscribers = [];
      if (config.instrument) {
        instrument("created", this);
      }
      if (noop !== name) {
        map(name, this);
      }
    }
    /**
     * @param {string} func
     * @param {Object} promise
     * @return {undefined}
     */
    function map(func, promise) {
      /**
       * @param {?} val
       * @return {undefined}
       */
      function done(val) {
        resolve(promise, val);
      }
      /**
       * @param {number} value
       * @return {undefined}
       */
      function emit(value) {
        reject(promise, value);
      }
      try {
        func(done, emit);
      } catch (udataCur) {
        emit(udataCur);
      }
    }
    /**
     * @param {?} parent
     * @param {?} child
     * @param {Function} onFulfillment
     * @param {Function} fn
     * @return {undefined}
     */
    function subscribe(parent, child, onFulfillment, fn) {
      var subscribers = parent._subscribers;
      var length = subscribers.length;
      subscribers[length] = child;
      /** @type {Function} */
      subscribers[length + FULFILLED] = onFulfillment;
      /** @type {Function} */
      subscribers[length + REJECTED] = fn;
    }
    /**
     * @param {Object} promise
     * @param {number} settled
     * @return {undefined}
     */
    function publish(promise, settled) {
      var child;
      var rvar;
      var subscribers = promise._subscribers;
      var detail = promise._detail;
      if (config.instrument) {
        instrument(settled === FULFILLED ? "fulfilled" : "rejected", promise);
      }
      /** @type {number} */
      var i = 0;
      for (;i < subscribers.length;i += 3) {
        child = subscribers[i];
        rvar = subscribers[i + settled];
        invokeCallback(settled, child, rvar, detail);
      }
      /** @type {null} */
      promise._subscribers = null;
    }
    /**
     * @param {number} settled
     * @param {?} promise
     * @param {string} name
     * @param {number} detail
     * @return {undefined}
     */
    function invokeCallback(settled, promise, name, detail) {
      var value;
      var error;
      var entries;
      var h;
      var func = isFunction(name);
      if (func) {
        try {
          value = name(detail);
          /** @type {boolean} */
          entries = true;
        } catch (err) {
          /** @type {boolean} */
          h = true;
          error = err;
        }
      } else {
        /** @type {number} */
        value = detail;
        /** @type {boolean} */
        entries = true;
      }
      if (!handleThenable(promise, value)) {
        if (func && entries) {
          resolve(promise, value);
        } else {
          if (h) {
            reject(promise, error);
          } else {
            if (settled === FULFILLED) {
              resolve(promise, value);
            } else {
              if (settled === REJECTED) {
                reject(promise, value);
              }
            }
          }
        }
      }
    }
    /**
     * @param {?} value
     * @param {?} promise
     * @return {?}
     */
    function handleThenable(value, promise) {
      var c;
      /** @type {null} */
      var optgroup = null;
      try {
        if (value === promise) {
          throw new TypeError("A promises callback cannot return that same promise.");
        }
        if (objectOrFunction(promise) && (optgroup = promise.then, isFunction(optgroup))) {
          return optgroup.call(promise, function(val) {
            return c ? true : (c = true, void(promise !== val ? resolve(value, val) : fulfill(value, val)));
          }, function(isXML) {
            return c ? true : (c = true, void reject(value, isXML));
          }, "Settle: " + (value._label || " unknown promise")), true;
        }
      } catch (udataCur) {
        return c ? true : (reject(value, udataCur), true);
      }
      return false;
    }
    /**
     * @param {?} promise
     * @param {?} value
     * @return {undefined}
     */
    function resolve(promise, value) {
      if (promise === value) {
        fulfill(promise, value);
      } else {
        if (!handleThenable(promise, value)) {
          fulfill(promise, value);
        }
      }
    }
    /**
     * @param {Object} promise
     * @param {Function} value
     * @return {undefined}
     */
    function fulfill(promise, value) {
      if (promise._state === PENDING) {
        /** @type {number} */
        promise._state = SEALED;
        /** @type {Function} */
        promise._detail = value;
        config.async(publishFulfillment, promise);
      }
    }
    /**
     * @param {Object} promise
     * @param {number} value
     * @return {undefined}
     */
    function reject(promise, value) {
      if (promise._state === PENDING) {
        /** @type {number} */
        promise._state = SEALED;
        /** @type {number} */
        promise._detail = value;
        config.async(publishRejection, promise);
      }
    }
    /**
     * @param {Object} promise
     * @return {undefined}
     */
    function publishFulfillment(promise) {
      publish(promise, promise._state = FULFILLED);
    }
    /**
     * @param {Object} promise
     * @return {undefined}
     */
    function publishRejection(promise) {
      if (promise._onerror) {
        promise._onerror(promise._detail);
      }
      publish(promise, promise._state = REJECTED);
    }
    var config = __dependency1__.config;
    var instrument = (__exports__["default"], dataAndEvents["default"]);
    var objectOrFunction = __dependency4__.objectOrFunction;
    var isFunction = __dependency4__.isFunction;
    var now = __dependency4__.now;
    var cast = __dependency5__["default"];
    var all = __dependency2__["default"];
    var race = __dependency7__["default"];
    var Resolve = __dependency8__["default"];
    var Reject = __dependency9__["default"];
    /** @type {string} */
    var guidKey = "rsvp_" + now() + "-";
    /** @type {number} */
    var counter = 0;
    /** @type {function (string, Object): undefined} */
    column["default"] = Promise;
    Promise.cast = cast;
    Promise.all = all;
    Promise.race = race;
    Promise.resolve = Resolve;
    Promise.reject = Reject;
    var PENDING = void 0;
    /** @type {number} */
    var SEALED = 0;
    /** @type {number} */
    var FULFILLED = 1;
    /** @type {number} */
    var REJECTED = 2;
    Promise.prototype = {
      /** @type {function (string, Object): undefined} */
      constructor : Promise,
      _id : void 0,
      _guidKey : guidKey,
      _label : void 0,
      _state : void 0,
      _detail : void 0,
      _subscribers : void 0,
      /**
       * @param {?} msgs
       * @return {undefined}
       */
      _onerror : function(msgs) {
        config.trigger("error", msgs);
      },
      /**
       * @param {Function} onFulfillment
       * @param {Function} rejected
       * @param {Object} label
       * @return {?}
       */
      then : function(onFulfillment, rejected, label) {
        var promise = this;
        /** @type {null} */
        this._onerror = null;
        var thenPromise = new this.constructor(noop, label);
        if (this._state) {
          /** @type {Arguments} */
          var callbacks = arguments;
          config.async(function() {
            invokeCallback(promise._state, thenPromise, callbacks[promise._state - 1], promise._detail);
          });
        } else {
          subscribe(this, thenPromise, onFulfillment, rejected);
        }
        return config.instrument && instrument("chained", promise, thenPromise), thenPromise;
      },
      /**
       * @param {Function} rejected
       * @param {Object} label
       * @return {?}
       */
      "catch" : function(rejected, label) {
        return this.then(null, rejected, label);
      },
      /**
       * @param {?} callback
       * @param {Object} label
       * @return {?}
       */
      "finally" : function(callback, label) {
        var constructor = this.constructor;
        return this.then(function(dataAndEvents) {
          return constructor.resolve(callback()).then(function() {
            return dataAndEvents;
          });
        }, function(dataAndEvents) {
          return constructor.resolve(callback()).then(function() {
            throw dataAndEvents;
          });
        }, label);
      }
    };
  });
  __define_("rsvp/promise/all", ["../utils", "exports"], function(__dependency1__, __exports__) {
    var isArray = __dependency1__.isArray;
    var traverseNode = __dependency1__.isNonThenable;
    /**
     * @param {string} elements
     * @param {Object} dataAndEvents
     * @return {?}
     */
    __exports__["default"] = function(elements, dataAndEvents) {
      var dfd = this;
      return new dfd(function(callback, reject) {
        /**
         * @param {number} next
         * @return {?}
         */
        function check(next) {
          return function(response) {
            responses[next] = response;
            if (0 === --remaining) {
              callback(responses);
            }
          };
        }
        /**
         * @param {?} reason
         * @return {undefined}
         */
        function rejected(reason) {
          /** @type {number} */
          remaining = 0;
          reject(reason);
        }
        if (!isArray(elements)) {
          throw new TypeError("You must pass an array to all.");
        }
        var node;
        var remaining = elements.length;
        /** @type {Array} */
        var responses = new Array(remaining);
        if (0 === remaining) {
          return void callback(responses);
        }
        /** @type {number} */
        var next = 0;
        for (;next < elements.length;next++) {
          node = elements[next];
          if (traverseNode(node)) {
            responses[next] = node;
            if (0 === --remaining) {
              callback(responses);
            }
          } else {
            dfd.resolve(node).then(check(next), rejected);
          }
        }
      }, dataAndEvents);
    };
  });
  __define_("rsvp/promise/cast", ["exports"], function(__exports__) {
    /**
     * @param {(Object|string)} arg
     * @param {Object} green
     * @return {?}
     */
    __exports__["default"] = function(arg, green) {
      var Color = this;
      return arg && ("object" == typeof arg && arg.constructor === Color) ? arg : new Color(function(add) {
        add(arg);
      }, green);
    };
  });
  __define_("rsvp/promise/race", ["../utils", "exports"], function(__dependency1__, __exports__) {
    var isArray = __dependency1__.isArray;
    var hasKey = (__dependency1__.isFunction, __dependency1__.isNonThenable);
    /**
     * @param {string} names
     * @param {Object} dataAndEvents
     * @return {?}
     */
    __exports__["default"] = function(names, dataAndEvents) {
      var result;
      var results = this;
      return new results(function(resolve, done) {
        /**
         * @param {?} value
         * @return {undefined}
         */
        function onFulfillment(value) {
          if (j) {
            /** @type {boolean} */
            j = false;
            resolve(value);
          }
        }
        /**
         * @param {?} error
         * @return {undefined}
         */
        function rejected(error) {
          if (j) {
            /** @type {boolean} */
            j = false;
            done(error);
          }
        }
        if (!isArray(names)) {
          throw new TypeError("You must pass an array to race.");
        }
        /** @type {boolean} */
        var j = true;
        /** @type {number} */
        var i = 0;
        for (;i < names.length;i++) {
          if (result = names[i], hasKey(result)) {
            return j = false, void resolve(result);
          }
          results.resolve(result).then(onFulfillment, rejected);
        }
      }, dataAndEvents);
    };
  });
  __define_("rsvp/promise/reject", ["exports"], function(__exports__) {
    /**
     * @param {?} outErr
     * @param {Object} fn
     * @return {?}
     */
    __exports__["default"] = function(outErr, fn) {
      var Hook = this;
      return new Hook(function(dataAndEvents, cb) {
        cb(outErr);
      }, fn);
    };
  });
  __define_("rsvp/promise/resolve", ["exports"], function(__exports__) {
    /**
     * @param {(Object|string)} arg
     * @param {Object} green
     * @return {?}
     */
    __exports__["default"] = function(arg, green) {
      var Color = this;
      return arg && ("object" == typeof arg && arg.constructor === Color) ? arg : new Color(function(add) {
        add(arg);
      }, green);
    };
  });
  __define_("rsvp/race", ["./promise", "exports"], function(__dependency1__, __exports__) {
    var Promise = __dependency1__["default"];
    /**
     * @param {?} array
     * @param {?} label
     * @return {?}
     */
    __exports__["default"] = function(array, label) {
      return Promise.race(array, label);
    };
  });
  __define_("rsvp/reject", ["./promise", "exports"], function(events, __exports__) {
    var list = events["default"];
    /**
     * @param {string} value
     * @param {Object} context
     * @return {?}
     */
    __exports__["default"] = function(value, context) {
      return list.reject(value, context);
    };
  });
  __define_("rsvp/resolve", ["./promise", "exports"], function(__dependency8__, __exports__) {
    var defer = __dependency8__["default"];
    /**
     * @param {?} val
     * @param {?} letter
     * @return {?}
     */
    __exports__["default"] = function(val, letter) {
      return defer.resolve(val, letter);
    };
  });
  __define_("rsvp/rethrow", ["exports"], function(__exports__) {
    /**
     * @param {?} dataAndEvents
     * @return {?}
     */
    __exports__["default"] = function(dataAndEvents) {
      throw setTimeout(function() {
        throw dataAndEvents;
      }), dataAndEvents;
    };
  });
  __define_("rsvp/utils", ["exports"], function(__exports__) {
    /**
     * @param {Object} arg
     * @return {?}
     */
    function objectOrFunction(arg) {
      return "function" == typeof arg || "object" == typeof arg && null !== arg;
    }
    /**
     * @param {string} name
     * @return {?}
     */
    function isFunction(name) {
      return "function" == typeof name;
    }
    /**
     * @param {Error} x
     * @return {?}
     */
    function isNonThenable(x) {
      return!objectOrFunction(x);
    }
    /** @type {function (Object): ?} */
    __exports__.objectOrFunction = objectOrFunction;
    /** @type {function (string): ?} */
    __exports__.isFunction = isFunction;
    /** @type {function (Error): ?} */
    __exports__.isNonThenable = isNonThenable;
    var e;
    /** @type {Function} */
    e = Array.isArray ? Array.isArray : function(name) {
      return "[object Array]" === Object.prototype.toString.call(name);
    };
    /** @type {Function} */
    var isArray = e;
    /** @type {Function} */
    __exports__.isArray = isArray;
    /** @type {function (): number} */
    var now = Date.now || function() {
      return(new Date).getTime();
    };
    /** @type {function (): number} */
    __exports__.now = now;
    /** @type {function (Object): Array.<string>} */
    var keysOf = Object.keys || function(object) {
      /** @type {Array} */
      var bucket = [];
      var value;
      for (value in object) {
        bucket.push(value);
      }
      return bucket;
    };
    /** @type {function (Object): Array.<string>} */
    __exports__.keysOf = keysOf;
  });
  __define_("rsvp", ["./rsvp/promise", "./rsvp/events", "./rsvp/node", "./rsvp/all", "./rsvp/all-settled", "./rsvp/race", "./rsvp/hash", "./rsvp/hash-settled", "./rsvp/rethrow", "./rsvp/defer", "./rsvp/config", "./rsvp/map", "./rsvp/resolve", "./rsvp/reject", "./rsvp/filter", "./rsvp/asap", "exports"], function(__dependency1__, __dependency2__, __dependency3__, __dependency6__, __dependency5__, __dependency7__, map, i, __dependency8__, dataAndEvents, __dependency9__, __dependency12__, __dependency11__, 
  deepDataAndEvents, __dependency14__, __dependency13__, __exports__) {
    /**
     * @param {Function} callback
     * @param {Object} arg
     * @return {undefined}
     */
    function async(callback, arg) {
      config.async(callback, arg);
    }
    /**
     * @return {undefined}
     */
    function on() {
      config.on.apply(config, arguments);
    }
    /**
     * @return {undefined}
     */
    function off() {
      config.off.apply(config, arguments);
    }
    var Promise = __dependency1__["default"];
    var EventTarget = __dependency2__["default"];
    var denodeify = __dependency3__["default"];
    var all = __dependency6__["default"];
    var allSettled = __dependency5__["default"];
    var race = __dependency7__["default"];
    var hash = map["default"];
    var parser = i["default"];
    var rethrow = __dependency8__["default"];
    var defer = dataAndEvents["default"];
    var config = __dependency9__.config;
    var configure = __dependency9__.configure;
    var reject = __dependency12__["default"];
    var resolve = __dependency11__["default"];
    var cast = deepDataAndEvents["default"];
    var filter = __dependency14__["default"];
    var asap = __dependency13__["default"];
    if (config.async = asap, "undefined" != typeof window && "object" == typeof window.__PROMISE_INSTRUMENTATION__) {
      var callbacks = window.__PROMISE_INSTRUMENTATION__;
      configure("instrument", true);
      var fix;
      for (fix in callbacks) {
        if (callbacks.hasOwnProperty(fix)) {
          on(fix, callbacks[fix]);
        }
      }
    }
    __exports__.Promise = Promise;
    __exports__.EventTarget = EventTarget;
    __exports__.all = all;
    __exports__.allSettled = allSettled;
    __exports__.race = race;
    __exports__.hash = hash;
    __exports__.hashSettled = parser;
    __exports__.rethrow = rethrow;
    __exports__.defer = defer;
    __exports__.denodeify = denodeify;
    __exports__.configure = configure;
    /** @type {function (): undefined} */
    __exports__.on = on;
    /** @type {function (): undefined} */
    __exports__.off = off;
    __exports__.resolve = resolve;
    __exports__.reject = cast;
    /** @type {function (Function, Object): undefined} */
    __exports__.async = async;
    __exports__.map = reject;
    __exports__.filter = filter;
  });
  global.RSVP = __require_("rsvp");
}(window), function() {
  /**
   * @param {Object} layer
   * @param {Object} handler
   * @return {undefined}
   */
  function FastClick(layer, handler) {
    /**
     * @param {Function} fn
     * @param {?} me
     * @return {?}
     */
    function __bind(fn, me) {
      return function() {
        return fn.apply(me, arguments);
      };
    }
    var oldOnClick;
    if (handler = handler || {}, this.trackingClick = false, this.trackingClickStart = 0, this.targetElement = null, this.touchStartX = 0, this.touchStartY = 0, this.lastTouchIdentifier = 0, this.touchBoundary = handler.touchBoundary || 10, this.layer = layer, this.tapDelay = handler.tapDelay || 200, this.tapTimeout = handler.tapTimeout || 700, !FastClick.notNeeded(layer)) {
      /** @type {Array} */
      var employees = ["onMouse", "onClick", "onTouchStart", "onTouchMove", "onTouchEnd", "onTouchCancel"];
      var root = this;
      /** @type {number} */
      var i = 0;
      /** @type {number} */
      var l = employees.length;
      for (;l > i;i++) {
        root[employees[i]] = __bind(root[employees[i]], root);
      }
      if (mousedown) {
        layer.addEventListener("mouseover", this.onMouse, true);
        layer.addEventListener("mousedown", this.onMouse, true);
        layer.addEventListener("mouseup", this.onMouse, true);
      }
      layer.addEventListener("click", this.onClick, true);
      layer.addEventListener("touchstart", this.onTouchStart, false);
      layer.addEventListener("touchmove", this.onTouchMove, false);
      layer.addEventListener("touchend", this.onTouchEnd, false);
      layer.addEventListener("touchcancel", this.onTouchCancel, false);
      if (!Event.prototype.stopImmediatePropagation) {
        /**
         * @param {string} event
         * @param {string} type
         * @param {boolean} recurring
         * @return {undefined}
         */
        layer.removeEventListener = function(event, type, recurring) {
          /** @type {function (this:Node, string, (EventListener|function ((Event|null)): (boolean|undefined)|null), boolean): undefined} */
          var callback = Node.prototype.removeEventListener;
          if ("click" === event) {
            callback.call(layer, event, type.hijacked || type, recurring);
          } else {
            callback.call(layer, event, type, recurring);
          }
        };
        /**
         * @param {string} event
         * @param {string} data
         * @param {boolean} recurring
         * @return {undefined}
         */
        layer.addEventListener = function(event, data, recurring) {
          /** @type {function (this:Node, string, (EventListener|function ((Event|null)): (boolean|undefined)|null), boolean): undefined} */
          var callback = Node.prototype.addEventListener;
          if ("click" === event) {
            callback.call(layer, event, data.hijacked || (data.hijacked = function(event) {
              if (!event.propagationStopped) {
                data(event);
              }
            }), recurring);
          } else {
            callback.call(layer, event, data, recurring);
          }
        };
      }
      if ("function" == typeof layer.onclick) {
        /** @type {Function} */
        oldOnClick = layer.onclick;
        layer.addEventListener("click", function(event) {
          oldOnClick(event);
        }, false);
        /** @type {null} */
        layer.onclick = null;
      }
    }
  }
  /** @type {boolean} */
  var b = navigator.userAgent.indexOf("Windows Phone") >= 0;
  /** @type {boolean} */
  var mousedown = navigator.userAgent.indexOf("Android") > 0 && !b;
  /** @type {boolean} */
  var value = /iP(ad|hone|od)/.test(navigator.userAgent) && !b;
  /** @type {boolean} */
  var parsedValue = value && /OS 4_\d(_\d)?/.test(navigator.userAgent);
  /** @type {boolean} */
  var attrNames = value && /OS [6-7]_\d/.test(navigator.userAgent);
  /** @type {boolean} */
  var g = navigator.userAgent.indexOf("BB10") > 0;
  /**
   * @param {Element} elem
   * @return {?}
   */
  FastClick.prototype.needsClick = function(elem) {
    switch(elem.nodeName.toLowerCase()) {
      case "button":
      ;
      case "select":
      ;
      case "textarea":
        if (elem.disabled) {
          return true;
        }
        break;
      case "input":
        if (value && "file" === elem.type || elem.disabled) {
          return true;
        }
        break;
      case "label":
      ;
      case "iframe":
      ;
      case "video":
        return true;
    }
    return/\bneedsclick\b/.test(elem.className);
  };
  /**
   * @param {Object} target
   * @return {?}
   */
  FastClick.prototype.needsFocus = function(target) {
    switch(target.nodeName.toLowerCase()) {
      case "textarea":
        return true;
      case "select":
        return!mousedown;
      case "input":
        switch(target.type) {
          case "button":
          ;
          case "checkbox":
          ;
          case "file":
          ;
          case "image":
          ;
          case "radio":
          ;
          case "submit":
            return false;
        }
        return!target.disabled && !target.readOnly;
      default:
        return/\bneedsfocus\b/.test(target.className);
    }
  };
  /**
   * @param {Object} targetElement
   * @param {Event} event
   * @return {undefined}
   */
  FastClick.prototype.sendClick = function(targetElement, event) {
    var clickEvent;
    var touch;
    if (document.activeElement) {
      if (document.activeElement !== targetElement) {
        document.activeElement.blur();
      }
    }
    touch = event.changedTouches[0];
    /** @type {(Event|null)} */
    clickEvent = document.createEvent("MouseEvents");
    clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
    /** @type {boolean} */
    clickEvent.forwardedTouchEvent = true;
    targetElement.dispatchEvent(clickEvent);
  };
  /**
   * @param {Node} targetElement
   * @return {?}
   */
  FastClick.prototype.determineEventType = function(targetElement) {
    return mousedown && "select" === targetElement.tagName.toLowerCase() ? "mousedown" : "click";
  };
  /**
   * @param {string} name
   * @return {undefined}
   */
  FastClick.prototype.focus = function(name) {
    var qualifier;
    if (value && (name.setSelectionRange && (0 !== name.type.indexOf("date") && ("time" !== name.type && "month" !== name.type)))) {
      qualifier = name.value.length;
      name.setSelectionRange(qualifier, qualifier);
    } else {
      name.focus();
    }
  };
  /**
   * @param {EventTarget} targetElement
   * @return {undefined}
   */
  FastClick.prototype.updateScrollParent = function(targetElement) {
    var scrollParent;
    var parentElement;
    if (scrollParent = targetElement.fastClickScrollParent, !scrollParent || !scrollParent.contains(targetElement)) {
      /** @type {EventTarget} */
      parentElement = targetElement;
      do {
        if (parentElement.scrollHeight > parentElement.offsetHeight) {
          scrollParent = parentElement;
          targetElement.fastClickScrollParent = parentElement;
          break;
        }
        parentElement = parentElement.parentElement;
      } while (parentElement);
    }
    if (scrollParent) {
      scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
    }
  };
  /**
   * @param {Object} eventTarget
   * @return {?}
   */
  FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {
    return eventTarget.nodeType === Node.TEXT_NODE ? eventTarget.parentNode : eventTarget;
  };
  /**
   * @param {Event} event
   * @return {?}
   */
  FastClick.prototype.onTouchStart = function(event) {
    var targetElement;
    var touch;
    var selection;
    if (event.targetTouches.length > 1) {
      return true;
    }
    if (targetElement = this.getTargetElementFromEventTarget(event.target), touch = event.targetTouches[0], value) {
      if (selection = window.getSelection(), selection.rangeCount && !selection.isCollapsed) {
        return true;
      }
      if (!parsedValue) {
        if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
          return event.preventDefault(), false;
        }
        this.lastTouchIdentifier = touch.identifier;
        this.updateScrollParent(targetElement);
      }
    }
    return this.trackingClick = true, this.trackingClickStart = event.timeStamp, this.targetElement = targetElement, this.touchStartX = touch.pageX, this.touchStartY = touch.pageY, event.timeStamp - this.lastClickTime < this.tapDelay && event.preventDefault(), true;
  };
  /**
   * @param {Event} event
   * @return {?}
   */
  FastClick.prototype.touchHasMoved = function(event) {
    var touch = event.changedTouches[0];
    var boundary = this.touchBoundary;
    return Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary ? true : false;
  };
  /**
   * @param {Event} event
   * @return {?}
   */
  FastClick.prototype.onTouchMove = function(event) {
    return this.trackingClick ? ((this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) && (this.trackingClick = false, this.targetElement = null), true) : true;
  };
  /**
   * @param {HTMLLabelElement} labelElement
   * @return {?}
   */
  FastClick.prototype.findControl = function(labelElement) {
    return void 0 !== labelElement.control ? labelElement.control : labelElement.htmlFor ? document.getElementById(labelElement.htmlFor) : labelElement.querySelector("button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea");
  };
  /**
   * @param {Event} event
   * @return {?}
   */
  FastClick.prototype.onTouchEnd = function(event) {
    var forElement;
    var trackingClickStart;
    var C;
    var scrollParent;
    var touch;
    var optgroup = this.targetElement;
    if (!this.trackingClick) {
      return true;
    }
    if (event.timeStamp - this.lastClickTime < this.tapDelay) {
      return this.cancelNextClick = true, true;
    }
    if (event.timeStamp - this.trackingClickStart > this.tapTimeout) {
      return true;
    }
    if (this.cancelNextClick = false, this.lastClickTime = event.timeStamp, trackingClickStart = this.trackingClickStart, this.trackingClick = false, this.trackingClickStart = 0, attrNames && (touch = event.changedTouches[0], optgroup = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || optgroup, optgroup.fastClickScrollParent = this.targetElement.fastClickScrollParent), C = optgroup.tagName.toLowerCase(), "label" === C) {
      if (forElement = this.findControl(optgroup)) {
        if (this.focus(optgroup), mousedown) {
          return false;
        }
        optgroup = forElement;
      }
    } else {
      if (this.needsFocus(optgroup)) {
        return event.timeStamp - trackingClickStart > 100 || value && (window.top !== window && "input" === C) ? (this.targetElement = null, false) : (this.focus(optgroup), this.sendClick(optgroup, event), value && "select" === C || (this.targetElement = null, event.preventDefault()), false);
      }
    }
    return value && (!parsedValue && (scrollParent = optgroup.fastClickScrollParent, scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop)) ? true : (this.needsClick(optgroup) || (event.preventDefault(), this.sendClick(optgroup, event)), false);
  };
  /**
   * @return {undefined}
   */
  FastClick.prototype.onTouchCancel = function() {
    /** @type {boolean} */
    this.trackingClick = false;
    /** @type {null} */
    this.targetElement = null;
  };
  /**
   * @param {Event} event
   * @return {?}
   */
  FastClick.prototype.onMouse = function(event) {
    return this.targetElement ? event.forwardedTouchEvent ? true : event.cancelable && (!this.needsClick(this.targetElement) || this.cancelNextClick) ? (event.stopImmediatePropagation ? event.stopImmediatePropagation() : event.propagationStopped = true, event.stopPropagation(), event.preventDefault(), false) : true : true;
  };
  /**
   * @param {Event} event
   * @return {?}
   */
  FastClick.prototype.onClick = function(event) {
    var permitted;
    return this.trackingClick ? (this.targetElement = null, this.trackingClick = false, true) : "submit" === event.target.type && 0 === event.detail ? true : (permitted = this.onMouse(event), permitted || (this.targetElement = null), permitted);
  };
  /**
   * @return {undefined}
   */
  FastClick.prototype.destroy = function() {
    var layer = this.layer;
    if (mousedown) {
      layer.removeEventListener("mouseover", this.onMouse, true);
      layer.removeEventListener("mousedown", this.onMouse, true);
      layer.removeEventListener("mouseup", this.onMouse, true);
    }
    layer.removeEventListener("click", this.onClick, true);
    layer.removeEventListener("touchstart", this.onTouchStart, false);
    layer.removeEventListener("touchmove", this.onTouchMove, false);
    layer.removeEventListener("touchend", this.onTouchEnd, false);
    layer.removeEventListener("touchcancel", this.onTouchCancel, false);
  };
  /**
   * @param {Node} layer
   * @return {?}
   */
  FastClick.notNeeded = function(layer) {
    var a;
    var d;
    var e;
    var f;
    if ("undefined" == typeof window.ontouchstart) {
      return true;
    }
    if (d = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [, 0])[1]) {
      if (!mousedown) {
        return true;
      }
      if (a = document.querySelector("meta[name=viewport]")) {
        if (-1 !== a.content.indexOf("user-scalable=no")) {
          return true;
        }
        if (d > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
          return true;
        }
      }
    }
    if (g && (e = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/), e[1] >= 10 && (e[2] >= 3 && (a = document.querySelector("meta[name=viewport]"))))) {
      if (-1 !== a.content.indexOf("user-scalable=no")) {
        return true;
      }
      if (document.documentElement.scrollWidth <= window.outerWidth) {
        return true;
      }
    }
    return "none" === layer.style.msTouchAction || "manipulation" === layer.style.touchAction ? true : (f = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [, 0])[1], f >= 27 && (a = document.querySelector("meta[name=viewport]"), a && (-1 !== a.content.indexOf("user-scalable=no") || document.documentElement.scrollWidth <= window.outerWidth)) ? true : "none" === layer.style.touchAction || "manipulation" === layer.style.touchAction ? true : false);
  };
  /**
   * @param {string} name
   * @param {Object} value
   * @return {?}
   */
  FastClick.attach = function(name, value) {
    return new FastClick(name, value);
  };
  if ("function" == typeof define && ("object" == typeof define.amd && define.amd)) {
    define(function() {
      return FastClick;
    });
  } else {
    if ("undefined" != typeof module && module.exports) {
      /** @type {function (string, Object): ?} */
      module.exports = FastClick.attach;
      /** @type {function (Object, Object): undefined} */
      module.exports.FastClick = FastClick;
    } else {
      /** @type {function (Object, Object): undefined} */
      window.FastClick = FastClick;
    }
  }
}(), function(dataAndEvents, factory) {
  if ("function" == typeof define && define.amd) {
    define([], factory);
  } else {
    if ("object" == typeof exports) {
      module.exports = factory();
    } else {
      dataAndEvents.Handlebars = dataAndEvents.Handlebars || factory();
    }
  }
}(this, function() {
  var pdataOld = function() {
    /**
     * @param {string} string
     * @return {undefined}
     */
    function SafeString(string) {
      /** @type {string} */
      this.string = string;
    }
    var __exports__;
    return SafeString.prototype.toString = function() {
      return "" + this.string;
    }, __exports__ = SafeString;
  }();
  var __module2__ = function(value) {
    /**
     * @param {?} off
     * @return {?}
     */
    function t(off) {
      return buf[off];
    }
    /**
     * @param {?} opt_attributes
     * @return {?}
     */
    function extend(opt_attributes) {
      /** @type {number} */
      var i = 1;
      for (;i < arguments.length;i++) {
        var j;
        for (j in arguments[i]) {
          if (Object.prototype.hasOwnProperty.call(arguments[i], j)) {
            opt_attributes[j] = arguments[i][j];
          }
        }
      }
      return opt_attributes;
    }
    /**
     * @param {string} n
     * @return {?}
     */
    function template(n) {
      return n instanceof color ? n.toString() : null == n ? "" : n ? (n = "" + n, numbers.test(n) ? n.replace(r20, t) : n) : n + "";
    }
    /**
     * @param {string} value
     * @return {?}
     */
    function isEmpty(value) {
      return value || 0 === value ? isArray(value) && 0 === value.length ? true : false : true;
    }
    /**
     * @param {boolean} parent
     * @param {string} item
     * @return {?}
     */
    function parse(parent, item) {
      return(parent ? parent + "." : "") + item;
    }
    var __exports__ = {};
    /** @type {string} */
    var color = value;
    var buf = {
      "&" : "&amp;",
      "<" : "&lt;",
      ">" : "&gt;",
      '"' : "&quot;",
      "'" : "&#x27;",
      "`" : "&#x60;"
    };
    /** @type {RegExp} */
    var r20 = /[&<>"'`]/g;
    /** @type {RegExp} */
    var numbers = /[&<>"'`]/;
    /** @type {function (?): ?} */
    __exports__.extend = extend;
    /** @type {function (this:*): string} */
    var toString = Object.prototype.toString;
    /** @type {function (this:*): string} */
    __exports__.toString = toString;
    /**
     * @param {string} name
     * @return {?}
     */
    var isFunction = function(name) {
      return "function" == typeof name;
    };
    if (isFunction(/x/)) {
      /**
       * @param {string} name
       * @return {?}
       */
      isFunction = function(name) {
        return "function" == typeof name && "[object Function]" === toString.call(name);
      };
    }
    /** @type {function (string): ?} */
    __exports__.isFunction = isFunction;
    /** @type {function (*): boolean} */
    var isArray = Array.isArray || function(name) {
      return name && "object" == typeof name ? "[object Array]" === toString.call(name) : false;
    };
    return __exports__.isArray = isArray, __exports__.escapeExpression = template, __exports__.isEmpty = isEmpty, __exports__.appendContextPath = parse, __exports__;
  }(pdataOld);
  var udataCur = function() {
    /**
     * @param {string} message
     * @param {Object} node
     * @return {undefined}
     */
    function Exception(message, node) {
      var line;
      if (node) {
        if (node.firstLine) {
          line = node.firstLine;
          message += " - " + line + ":" + node.firstColumn;
        }
      }
      var tmp = Error.prototype.constructor.call(this, message);
      /** @type {number} */
      var idx = 0;
      for (;idx < errorProps.length;idx++) {
        this[errorProps[idx]] = tmp[errorProps[idx]];
      }
      if (line) {
        this.lineNumber = line;
        this.column = node.firstColumn;
      }
    }
    var __exports__;
    /** @type {Array} */
    var errorProps = ["description", "fileName", "lineNumber", "message", "name", "number", "stack"];
    return Exception.prototype = new Error, __exports__ = Exception;
  }();
  var __module1__ = function(__dependency1__, value) {
    /**
     * @param {string} name
     * @param {Object} value
     * @return {undefined}
     */
    function HandlebarsEnvironment(name, value) {
      this.helpers = name || {};
      this.partials = value || {};
      registerDefaultHelpers(this);
    }
    /**
     * @param {Object} instance
     * @return {undefined}
     */
    function registerDefaultHelpers(instance) {
      instance.registerHelper("helperMissing", function() {
        if (1 === arguments.length) {
          return void 0;
        }
        throw new Exception("Missing helper: '" + arguments[arguments.length - 1].name + "'");
      });
      instance.registerHelper("blockHelperMissing", function(elements, options) {
        var inverse = options.inverse;
        var fn = options.fn;
        if (elements === true) {
          return fn(this);
        }
        if (elements === false || null == elements) {
          return inverse(this);
        }
        if (isArray(elements)) {
          return elements.length > 0 ? (options.ids && (options.ids = [options.name]), instance.helpers.each(elements, options)) : inverse(this);
        }
        if (options.data && options.ids) {
          var frame = createFrame(options.data);
          frame.contextPath = Utils.appendContextPath(options.data.contextPath, options.name);
          options = {
            data : frame
          };
        }
        return fn(elements, options);
      });
      instance.registerHelper("each", function(names, options) {
        if (!options) {
          throw new Exception("Must pass iterator to #each");
        }
        var data;
        var offset;
        var fn = options.fn;
        var inverse = options.inverse;
        /** @type {number} */
        var i = 0;
        /** @type {string} */
        var ret = "";
        if (options.data && (options.ids && (offset = Utils.appendContextPath(options.data.contextPath, options.ids[0]) + ".")), isFunction(names) && (names = names.call(this)), options.data && (data = createFrame(options.data)), names && "object" == typeof names) {
          if (isArray(names)) {
            var len = names.length;
            for (;len > i;i++) {
              if (data) {
                /** @type {number} */
                data.index = i;
                /** @type {boolean} */
                data.first = 0 === i;
                /** @type {boolean} */
                data.last = i === names.length - 1;
                if (offset) {
                  data.contextPath = offset + i;
                }
              }
              ret += fn(names[i], {
                data : data
              });
            }
          } else {
            var key;
            for (key in names) {
              if (names.hasOwnProperty(key)) {
                if (data) {
                  /** @type {string} */
                  data.key = key;
                  /** @type {number} */
                  data.index = i;
                  /** @type {boolean} */
                  data.first = 0 === i;
                  if (offset) {
                    /** @type {string} */
                    data.contextPath = offset + key;
                  }
                }
                ret += fn(names[key], {
                  data : data
                });
                i++;
              }
            }
          }
        }
        return 0 === i && (ret = inverse(this)), ret;
      });
      instance.registerHelper("if", function(conditional, options) {
        return isFunction(conditional) && (conditional = conditional.call(this)), !options.hash.includeZero && !conditional || Utils.isEmpty(conditional) ? options.inverse(this) : options.fn(this);
      });
      instance.registerHelper("unless", function(mapper, options) {
        return instance.helpers["if"].call(this, mapper, {
          fn : options.inverse,
          inverse : options.fn,
          hash : options.hash
        });
      });
      instance.registerHelper("with", function(name, options) {
        if (isFunction(name)) {
          name = name.call(this);
        }
        var fn = options.fn;
        if (Utils.isEmpty(name)) {
          return options.inverse(this);
        }
        if (options.data && options.ids) {
          var frame = createFrame(options.data);
          frame.contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]);
          options = {
            data : frame
          };
        }
        return fn(name, options);
      });
      instance.registerHelper("log", function(error, options) {
        /** @type {number} */
        var level = options.data && null != options.data.level ? parseInt(options.data.level, 10) : 1;
        instance.log(level, error);
      });
      instance.registerHelper("lookup", function(escaped, key) {
        return escaped && escaped[key];
      });
    }
    var __exports__ = {};
    /** @type {Object} */
    var Utils = __dependency1__;
    var Exception = value;
    /** @type {string} */
    var VERSION = "2.0.0";
    /** @type {string} */
    __exports__.VERSION = VERSION;
    /** @type {number} */
    var COMPILER_REVISION = 6;
    /** @type {number} */
    __exports__.COMPILER_REVISION = COMPILER_REVISION;
    var REVISION_CHANGES = {
      1 : "<= 1.0.rc.2",
      2 : "== 1.0.0-rc.3",
      3 : "== 1.0.0-rc.4",
      4 : "== 1.x.x",
      5 : "== 2.0.0-alpha.x",
      6 : ">= 2.0.0-beta.1"
    };
    __exports__.REVISION_CHANGES = REVISION_CHANGES;
    var isArray = Utils.isArray;
    var isFunction = Utils.isFunction;
    var toString = Utils.toString;
    /** @type {string} */
    var objectType = "[object Object]";
    /** @type {function (string, Object): undefined} */
    __exports__.HandlebarsEnvironment = HandlebarsEnvironment;
    HandlebarsEnvironment.prototype = {
      /** @type {function (string, Object): undefined} */
      constructor : HandlebarsEnvironment,
      logger : logger,
      log : log,
      /**
       * @param {string} name
       * @param {Function} helper
       * @return {undefined}
       */
      registerHelper : function(name, helper) {
        if (toString.call(name) === objectType) {
          if (helper) {
            throw new Exception("Arg not supported with multiple helpers");
          }
          Utils.extend(this.helpers, name);
        } else {
          /** @type {Function} */
          this.helpers[name] = helper;
        }
      },
      /**
       * @param {?} name
       * @return {undefined}
       */
      unregisterHelper : function(name) {
        delete this.helpers[name];
      },
      /**
       * @param {string} name
       * @param {Function} str
       * @return {undefined}
       */
      registerPartial : function(name, str) {
        if (toString.call(name) === objectType) {
          Utils.extend(this.partials, name);
        } else {
          /** @type {Function} */
          this.partials[name] = str;
        }
      },
      /**
       * @param {?} name
       * @return {undefined}
       */
      unregisterPartial : function(name) {
        delete this.partials[name];
      }
    };
    var logger = {
      methodMap : {
        0 : "debug",
        1 : "info",
        2 : "warn",
        3 : "error"
      },
      DEBUG : 0,
      INFO : 1,
      WARN : 2,
      ERROR : 3,
      level : 3,
      /**
       * @param {number} level
       * @param {?} msg
       * @return {undefined}
       */
      log : function(level, msg) {
        if (logger.level <= level) {
          var method = logger.methodMap[level];
          if ("undefined" != typeof console) {
            if (console[method]) {
              console[method].call(console, msg);
            }
          }
        }
      }
    };
    __exports__.logger = logger;
    /** @type {function (number, ?): undefined} */
    var log = logger.log;
    /** @type {function (number, ?): undefined} */
    __exports__.log = log;
    /**
     * @param {Object} object
     * @return {?}
     */
    var createFrame = function(object) {
      var item = Utils.extend({}, object);
      return item._parent = object, item;
    };
    return __exports__.createFrame = createFrame, __exports__;
  }(__module2__, udataCur);
  var rreturn = function(__dependency1__, value, __dependency3__) {
    /**
     * @param {Object} compilerInfo
     * @return {undefined}
     */
    function checkRevision(compilerInfo) {
      var unlock = compilerInfo && compilerInfo[0] || 1;
      var revision = COMPILER_REVISION;
      if (unlock !== revision) {
        if (revision > unlock) {
          var versions = REVISION_CHANGES[revision];
          var cache = REVISION_CHANGES[unlock];
          throw new Exception("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version (" + versions + ") or downgrade your runtime to an older version (" + cache + ").");
        }
        throw new Exception("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version (" + compilerInfo[1] + ").");
      }
    }
    /**
     * @param {Object} options
     * @param {Object} env
     * @return {?}
     */
    function template(options, env) {
      if (!env) {
        throw new Exception("No environment passed to template");
      }
      if (!options || !options.main) {
        throw new Exception("Unknown template object: " + typeof options);
      }
      env.VM.checkRevision(options.compiler);
      /**
       * @param {string} partial
       * @param {?} prefix
       * @param {string} name
       * @param {?} data
       * @param {string} context
       * @param {Object} d
       * @param {Object} partials
       * @param {Object} f
       * @param {Array} r
       * @return {?}
       */
      var template = function(partial, prefix, name, data, context, d, partials, f, r) {
        if (context) {
          data = Utils.extend({}, data, context);
        }
        var result = env.VM.invokePartial.call(this, partial, name, data, d, partials, f, r);
        if (null == result && env.compile) {
          var value = {
            helpers : d,
            partials : partials,
            data : f,
            depths : r
          };
          partials[name] = env.compile(partial, {
            data : void 0 !== f,
            compat : options.compat
          }, env);
          result = partials[name](data, value);
        }
        if (null != result) {
          if (prefix) {
            var args = result.split("\n");
            /** @type {number} */
            var i = 0;
            var len = args.length;
            for (;len > i && (args[i] || i + 1 !== len);i++) {
              args[i] = prefix + args[i];
            }
            result = args.join("\n");
          }
          return result;
        }
        throw new Exception("The partial " + name + " could not be compiled when running in runtime-only mode");
      };
      var self = {
        /**
         * @param {Array} keys
         * @param {?} y
         * @return {?}
         */
        lookup : function(keys, y) {
          var len = keys.length;
          /** @type {number} */
          var x = 0;
          for (;len > x;x++) {
            if (keys[x] && null != keys[x][y]) {
              return keys[x][y];
            }
          }
        },
        /**
         * @param {(Function|string)} next_callback
         * @param {?} next_scope
         * @return {?}
         */
        lambda : function(next_callback, next_scope) {
          return "function" == typeof next_callback ? next_callback.call(next_scope) : next_callback;
        },
        escapeExpression : Utils.escapeExpression,
        /** @type {function (string, ?, string, ?, string, Object, Object, Object, Array): ?} */
        invokePartial : template,
        /**
         * @param {string} event
         * @return {?}
         */
        fn : function(event) {
          return options[event];
        },
        programs : [],
        /**
         * @param {Object} fn
         * @param {Object} options
         * @param {undefined} data
         * @return {?}
         */
        program : function(fn, options, data) {
          var programWrapper = this.programs[fn];
          var type = this.fn(fn);
          return options || data ? programWrapper = program(this, fn, type, options, data) : programWrapper || (programWrapper = this.programs[fn] = program(this, fn, type)), programWrapper;
        },
        /**
         * @param {string} name
         * @param {Object} value
         * @return {?}
         */
        data : function(name, value) {
          for (;name && value--;) {
            name = name._parent;
          }
          return name;
        },
        /**
         * @param {Object} first
         * @param {?} second
         * @return {?}
         */
        merge : function(first, second) {
          var result = first || second;
          return first && (second && (first !== second && (result = Utils.extend({}, second, first)))), result;
        },
        noop : env.VM.noop,
        compilerInfo : options.compiler
      };
      /**
       * @param {string} evt
       * @param {Object} data
       * @return {?}
       */
      var emit = function(evt, data) {
        data = data || {};
        var params = data.data;
        emit._setup(data);
        if (!data.partial) {
          if (options.useData) {
            params = extend(evt, params);
          }
        }
        var t;
        return options.useDepths && (t = data.depths ? [evt].concat(data.depths) : [evt]), options.main.call(self, evt, self.helpers, self.partials, params, t);
      };
      return emit.isTop = true, emit._setup = function(data) {
        if (data.partial) {
          self.helpers = data.helpers;
          self.partials = data.partials;
        } else {
          self.helpers = self.merge(data.helpers, env.helpers);
          if (options.usePartial) {
            self.partials = self.merge(data.partials, env.partials);
          }
        }
      }, emit._child = function(fn, isXML, deepDataAndEvents) {
        if (options.useDepths && !deepDataAndEvents) {
          throw new Exception("must pass parent depths");
        }
        return program(self, fn, options[fn], isXML, deepDataAndEvents);
      }, emit;
    }
    /**
     * @param {Object} obj
     * @param {Object} options
     * @param {Function} context
     * @param {?} value
     * @param {boolean} data
     * @return {?}
     */
    function program(obj, options, context, value, data) {
      /**
       * @param {?} item
       * @param {Object} results
       * @return {?}
       */
      var result = function(item, results) {
        return results = results || {}, context.call(obj, item, obj.helpers, obj.partials, results.data || value, data && [item].concat(data));
      };
      return result.program = options, result.depth = data ? data.length : 0, result;
    }
    /**
     * @param {number} partial
     * @param {string} name
     * @param {?} context
     * @param {Object} helpers
     * @param {?} partials
     * @param {Object} data
     * @param {Array} dataAndEvents
     * @return {?}
     */
    function invokePartial(partial, name, context, helpers, partials, data, dataAndEvents) {
      var options = {
        partial : true,
        helpers : helpers,
        partials : partials,
        data : data,
        depths : dataAndEvents
      };
      if (void 0 === partial) {
        throw new Exception("The partial " + name + " could not be found");
      }
      return partial instanceof Function ? partial(context, options) : void 0;
    }
    /**
     * @return {?}
     */
    function noop() {
      return "";
    }
    /**
     * @param {string} o
     * @param {Object} target
     * @return {?}
     */
    function extend(o, target) {
      return target && "root" in target || (target = target ? isFunction(target) : {}, target.root = o), target;
    }
    var __exports__ = {};
    /** @type {string} */
    var Utils = __dependency1__;
    var Exception = value;
    var COMPILER_REVISION = __dependency3__.COMPILER_REVISION;
    var REVISION_CHANGES = __dependency3__.REVISION_CHANGES;
    var isFunction = __dependency3__.createFrame;
    return __exports__.checkRevision = checkRevision, __exports__.template = template, __exports__.program = program, __exports__.invokePartial = invokePartial, __exports__.noop = noop, __exports__;
  }(__module2__, udataCur, __module1__);
  var r20 = function(actualObject, value, data, __dependency1__, regex) {
    var __exports__;
    var object = actualObject;
    var SafeString = value;
    var Exception = data;
    /** @type {string} */
    var Utils = __dependency1__;
    /** @type {Object} */
    var runtime = regex;
    /**
     * @return {?}
     */
    var create = function() {
      var hb = new object.HandlebarsEnvironment;
      return Utils.extend(hb, object), hb.SafeString = SafeString, hb.Exception = Exception, hb.Utils = Utils, hb.escapeExpression = Utils.escapeExpression, hb.VM = runtime, hb.template = function(name) {
        return runtime.template(name, hb);
      }, hb;
    };
    var Handlebars = create();
    return Handlebars.create = create, Handlebars["default"] = Handlebars, __exports__ = Handlebars;
  }(__module1__, pdataOld, udataCur, __module2__, rreturn);
  var __module7__ = function(value) {
    /**
     * @param {Object} locInfo
     * @return {undefined}
     */
    function LocationInfo(locInfo) {
      locInfo = locInfo || {};
      this.firstLine = locInfo.first_line;
      this.firstColumn = locInfo.first_column;
      this.lastColumn = locInfo.last_column;
      this.lastLine = locInfo.last_line;
    }
    var __exports__;
    var Exception = value;
    var AST = {
      /**
       * @param {Array} statements
       * @param {?} strip
       * @param {?} locInfo
       * @return {undefined}
       */
      ProgramNode : function(statements, strip, locInfo) {
        LocationInfo.call(this, locInfo);
        /** @type {string} */
        this.type = "program";
        /** @type {Array} */
        this.statements = statements;
        this.strip = strip;
      },
      /**
       * @param {Object} rawParams
       * @param {Array} hash
       * @param {string} open
       * @param {?} strip
       * @param {?} locInfo
       * @return {undefined}
       */
      MustacheNode : function(rawParams, hash, open, strip, locInfo) {
        if (LocationInfo.call(this, locInfo), this.type = "mustache", this.strip = strip, null != open && open.charAt) {
          var code = open.charAt(3) || open.charAt(2);
          /** @type {boolean} */
          this.escaped = "{" !== code && "&" !== code;
        } else {
          /** @type {boolean} */
          this.escaped = !!open;
        }
        if (rawParams instanceof AST.SexprNode) {
          /** @type {Object} */
          this.sexpr = rawParams;
        } else {
          this.sexpr = new AST.SexprNode(rawParams, hash);
        }
        this.id = this.sexpr.id;
        this.params = this.sexpr.params;
        this.hash = this.sexpr.hash;
        this.eligibleHelper = this.sexpr.eligibleHelper;
        this.isHelper = this.sexpr.isHelper;
      },
      /**
       * @param {string} rawParams
       * @param {string} hash
       * @param {?} locInfo
       * @return {undefined}
       */
      SexprNode : function(rawParams, hash, locInfo) {
        LocationInfo.call(this, locInfo);
        /** @type {string} */
        this.type = "sexpr";
        /** @type {string} */
        this.hash = hash;
        var id = this.id = rawParams[0];
        var params = this.params = rawParams.slice(1);
        /** @type {boolean} */
        this.isHelper = !(!params.length && !hash);
        this.eligibleHelper = this.isHelper || id.isSimple;
      },
      /**
       * @param {?} partialName
       * @param {?} context
       * @param {string} h
       * @param {?} strip
       * @param {?} locInfo
       * @return {undefined}
       */
      PartialNode : function(partialName, context, h, strip, locInfo) {
        LocationInfo.call(this, locInfo);
        /** @type {string} */
        this.type = "partial";
        this.partialName = partialName;
        this.context = context;
        /** @type {string} */
        this.hash = h;
        this.strip = strip;
        /** @type {boolean} */
        this.strip.inlineStandalone = true;
      },
      /**
       * @param {?} mustache
       * @param {Object} program
       * @param {Function} inverse
       * @param {?} strip
       * @param {?} locInfo
       * @return {undefined}
       */
      BlockNode : function(mustache, program, inverse, strip, locInfo) {
        LocationInfo.call(this, locInfo);
        /** @type {string} */
        this.type = "block";
        this.mustache = mustache;
        /** @type {Object} */
        this.program = program;
        /** @type {Function} */
        this.inverse = inverse;
        this.strip = strip;
        if (inverse) {
          if (!program) {
            /** @type {boolean} */
            this.isInverse = true;
          }
        }
      },
      /**
       * @param {?} mustache
       * @param {Element} child
       * @param {string} input
       * @param {number} name
       * @return {undefined}
       */
      RawBlockNode : function(mustache, child, input, name) {
        if (LocationInfo.call(this, name), mustache.sexpr.id.original !== input) {
          throw new Exception(mustache.sexpr.id.original + " doesn't match " + input, this);
        }
        child = new AST.ContentNode(child, name);
        /** @type {string} */
        this.type = "block";
        this.mustache = mustache;
        this.program = new AST.ProgramNode([child], {}, name);
      },
      /**
       * @param {string} string
       * @param {?} locInfo
       * @return {undefined}
       */
      ContentNode : function(string, locInfo) {
        LocationInfo.call(this, locInfo);
        /** @type {string} */
        this.type = "content";
        this.original = this.string = string;
      },
      /**
       * @param {string} pairs
       * @param {?} locInfo
       * @return {undefined}
       */
      HashNode : function(pairs, locInfo) {
        LocationInfo.call(this, locInfo);
        /** @type {string} */
        this.type = "hash";
        /** @type {string} */
        this.pairs = pairs;
      },
      /**
       * @param {Array} parts
       * @param {?} locInfo
       * @return {undefined}
       */
      IdNode : function(parts, locInfo) {
        LocationInfo.call(this, locInfo);
        /** @type {string} */
        this.type = "ID";
        /** @type {string} */
        var original = "";
        /** @type {Array} */
        var dig = [];
        /** @type {number} */
        var depth = 0;
        /** @type {string} */
        var optsData = "";
        /** @type {number} */
        var i = 0;
        var l = parts.length;
        for (;l > i;i++) {
          var part = parts[i].part;
          if (original += (parts[i].separator || "") + part, ".." === part || ("." === part || "this" === part)) {
            if (dig.length > 0) {
              throw new Exception("Invalid path: " + original, this);
            }
            if (".." === part) {
              depth++;
              optsData += "../";
            } else {
              /** @type {boolean} */
              this.isScoped = true;
            }
          } else {
            dig.push(part);
          }
        }
        /** @type {string} */
        this.original = original;
        /** @type {Array} */
        this.parts = dig;
        /** @type {string} */
        this.string = dig.join(".");
        /** @type {number} */
        this.depth = depth;
        /** @type {string} */
        this.idName = optsData + this.string;
        /** @type {boolean} */
        this.isSimple = 1 === parts.length && (!this.isScoped && 0 === depth);
        /** @type {string} */
        this.stringModeValue = this.string;
      },
      /**
       * @param {string} name
       * @param {?} locInfo
       * @return {undefined}
       */
      PartialNameNode : function(name, locInfo) {
        LocationInfo.call(this, locInfo);
        /** @type {string} */
        this.type = "PARTIAL_NAME";
        this.name = name.original;
      },
      /**
       * @param {?} id
       * @param {?} locInfo
       * @return {undefined}
       */
      DataNode : function(id, locInfo) {
        LocationInfo.call(this, locInfo);
        /** @type {string} */
        this.type = "DATA";
        this.id = id;
        this.stringModeValue = id.stringModeValue;
        /** @type {string} */
        this.idName = "@" + id.stringModeValue;
      },
      /**
       * @param {string} string
       * @param {?} locInfo
       * @return {undefined}
       */
      StringNode : function(string, locInfo) {
        LocationInfo.call(this, locInfo);
        /** @type {string} */
        this.type = "STRING";
        this.original = this.string = this.stringModeValue = string;
      },
      /**
       * @param {number} integer
       * @param {?} mapper
       * @return {undefined}
       */
      NumberNode : function(integer, mapper) {
        LocationInfo.call(this, mapper);
        /** @type {string} */
        this.type = "NUMBER";
        this.original = this.number = integer;
        /** @type {number} */
        this.stringModeValue = Number(integer);
      },
      /**
       * @param {string} bool
       * @param {?} locInfo
       * @return {undefined}
       */
      BooleanNode : function(bool, locInfo) {
        LocationInfo.call(this, locInfo);
        /** @type {string} */
        this.type = "BOOLEAN";
        /** @type {string} */
        this.bool = bool;
        /** @type {boolean} */
        this.stringModeValue = "true" === bool;
      },
      /**
       * @param {string} comment
       * @param {?} locInfo
       * @return {undefined}
       */
      CommentNode : function(comment, locInfo) {
        LocationInfo.call(this, locInfo);
        /** @type {string} */
        this.type = "comment";
        /** @type {string} */
        this.comment = comment;
        this.strip = {
          inlineStandalone : true
        };
      }
    };
    return __exports__ = AST;
  }(udataCur);
  var suiteView = function() {
    var bulk;
    var fn = function() {
      /**
       * @return {undefined}
       */
      function Parser() {
        this.yy = {};
      }
      var parser = {
        /**
         * @return {undefined}
         */
        trace : function() {
        },
        yy : {},
        symbols_ : {
          error : 2,
          root : 3,
          program : 4,
          EOF : 5,
          program_repetition0 : 6,
          statement : 7,
          mustache : 8,
          block : 9,
          rawBlock : 10,
          partial : 11,
          CONTENT : 12,
          COMMENT : 13,
          openRawBlock : 14,
          END_RAW_BLOCK : 15,
          OPEN_RAW_BLOCK : 16,
          sexpr : 17,
          CLOSE_RAW_BLOCK : 18,
          openBlock : 19,
          block_option0 : 20,
          closeBlock : 21,
          openInverse : 22,
          block_option1 : 23,
          OPEN_BLOCK : 24,
          CLOSE : 25,
          OPEN_INVERSE : 26,
          inverseAndProgram : 27,
          INVERSE : 28,
          OPEN_ENDBLOCK : 29,
          path : 30,
          OPEN : 31,
          OPEN_UNESCAPED : 32,
          CLOSE_UNESCAPED : 33,
          OPEN_PARTIAL : 34,
          partialName : 35,
          param : 36,
          partial_option0 : 37,
          partial_option1 : 38,
          sexpr_repetition0 : 39,
          sexpr_option0 : 40,
          dataName : 41,
          STRING : 42,
          NUMBER : 43,
          BOOLEAN : 44,
          OPEN_SEXPR : 45,
          CLOSE_SEXPR : 46,
          hash : 47,
          hash_repetition_plus0 : 48,
          hashSegment : 49,
          ID : 50,
          EQUALS : 51,
          DATA : 52,
          pathSegments : 53,
          SEP : 54,
          $accept : 0,
          $end : 1
        },
        terminals_ : {
          2 : "error",
          5 : "EOF",
          12 : "CONTENT",
          13 : "COMMENT",
          15 : "END_RAW_BLOCK",
          16 : "OPEN_RAW_BLOCK",
          18 : "CLOSE_RAW_BLOCK",
          24 : "OPEN_BLOCK",
          25 : "CLOSE",
          26 : "OPEN_INVERSE",
          28 : "INVERSE",
          29 : "OPEN_ENDBLOCK",
          31 : "OPEN",
          32 : "OPEN_UNESCAPED",
          33 : "CLOSE_UNESCAPED",
          34 : "OPEN_PARTIAL",
          42 : "STRING",
          43 : "NUMBER",
          44 : "BOOLEAN",
          45 : "OPEN_SEXPR",
          46 : "CLOSE_SEXPR",
          50 : "ID",
          51 : "EQUALS",
          52 : "DATA",
          54 : "SEP"
        },
        productions_ : [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [10, 3], [14, 3], [9, 4], [9, 4], [19, 3], [22, 3], [27, 2], [21, 3], [8, 3], [8, 3], [11, 5], [11, 4], [17, 3], [17, 1], [36, 1], [36, 1], [36, 1], [36, 1], [36, 1], [36, 3], [47, 1], [49, 3], [35, 1], [35, 1], [35, 1], [41, 2], [30, 1], [53, 3], [53, 1], [6, 0], [6, 2], [20, 0], [20, 1], [23, 0], [23, 1], [37, 0], [37, 1], [38, 0], [38, 1], [39, 0], [39, 2], [40, 0], [40, 1], [48, 1], [48, 2]],
        /**
         * @param {?} deltaTime
         * @param {?} stat
         * @param {?} file
         * @param {?} yy
         * @param {?} frameActionId
         * @param {(Array|Int8Array|Uint8Array)} $$
         * @param {?} dataAndEvents
         * @return {?}
         */
        performAction : function(deltaTime, stat, file, yy, frameActionId, $$, dataAndEvents) {
          /** @type {number} */
          var $0 = $$.length - 1;
          switch(frameActionId) {
            case 1:
              return yy.prepareProgram($$[$0 - 1].statements, true), $$[$0 - 1];
            case 2:
              this.$ = new yy.ProgramNode(yy.prepareProgram($$[$0]), {}, this._$);
              break;
            case 3:
              this.$ = $$[$0];
              break;
            case 4:
              this.$ = $$[$0];
              break;
            case 5:
              this.$ = $$[$0];
              break;
            case 6:
              this.$ = $$[$0];
              break;
            case 7:
              this.$ = new yy.ContentNode($$[$0], this._$);
              break;
            case 8:
              this.$ = new yy.CommentNode($$[$0], this._$);
              break;
            case 9:
              this.$ = new yy.RawBlockNode($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
              break;
            case 10:
              this.$ = new yy.MustacheNode($$[$0 - 1], null, "", "", this._$);
              break;
            case 11:
              this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
              break;
            case 12:
              this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
              break;
            case 13:
              this.$ = new yy.MustacheNode($$[$0 - 1], null, $$[$0 - 2], yy.stripFlags($$[$0 - 2], $$[$0]), this._$);
              break;
            case 14:
              this.$ = new yy.MustacheNode($$[$0 - 1], null, $$[$0 - 2], yy.stripFlags($$[$0 - 2], $$[$0]), this._$);
              break;
            case 15:
              this.$ = {
                strip : yy.stripFlags($$[$0 - 1], $$[$0 - 1]),
                program : $$[$0]
              };
              break;
            case 16:
              this.$ = {
                path : $$[$0 - 1],
                strip : yy.stripFlags($$[$0 - 2], $$[$0])
              };
              break;
            case 17:
              this.$ = new yy.MustacheNode($$[$0 - 1], null, $$[$0 - 2], yy.stripFlags($$[$0 - 2], $$[$0]), this._$);
              break;
            case 18:
              this.$ = new yy.MustacheNode($$[$0 - 1], null, $$[$0 - 2], yy.stripFlags($$[$0 - 2], $$[$0]), this._$);
              break;
            case 19:
              this.$ = new yy.PartialNode($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
              break;
            case 20:
              this.$ = new yy.PartialNode($$[$0 - 2], void 0, $$[$0 - 1], yy.stripFlags($$[$0 - 3], $$[$0]), this._$);
              break;
            case 21:
              this.$ = new yy.SexprNode([$$[$0 - 2]].concat($$[$0 - 1]), $$[$0], this._$);
              break;
            case 22:
              this.$ = new yy.SexprNode([$$[$0]], null, this._$);
              break;
            case 23:
              this.$ = $$[$0];
              break;
            case 24:
              this.$ = new yy.StringNode($$[$0], this._$);
              break;
            case 25:
              this.$ = new yy.NumberNode($$[$0], this._$);
              break;
            case 26:
              this.$ = new yy.BooleanNode($$[$0], this._$);
              break;
            case 27:
              this.$ = $$[$0];
              break;
            case 28:
              /** @type {boolean} */
              $$[$0 - 1].isHelper = true;
              this.$ = $$[$0 - 1];
              break;
            case 29:
              this.$ = new yy.HashNode($$[$0], this._$);
              break;
            case 30:
              /** @type {Array} */
              this.$ = [$$[$0 - 2], $$[$0]];
              break;
            case 31:
              this.$ = new yy.PartialNameNode($$[$0], this._$);
              break;
            case 32:
              this.$ = new yy.PartialNameNode(new yy.StringNode($$[$0], this._$), this._$);
              break;
            case 33:
              this.$ = new yy.PartialNameNode(new yy.NumberNode($$[$0], this._$));
              break;
            case 34:
              this.$ = new yy.DataNode($$[$0], this._$);
              break;
            case 35:
              this.$ = new yy.IdNode($$[$0], this._$);
              break;
            case 36:
              $$[$0 - 2].push({
                part : $$[$0],
                separator : $$[$0 - 1]
              });
              this.$ = $$[$0 - 2];
              break;
            case 37:
              /** @type {Array} */
              this.$ = [{
                part : $$[$0]
              }];
              break;
            case 38:
              /** @type {Array} */
              this.$ = [];
              break;
            case 39:
              $$[$0 - 1].push($$[$0]);
              break;
            case 48:
              /** @type {Array} */
              this.$ = [];
              break;
            case 49:
              $$[$0 - 1].push($$[$0]);
              break;
            case 52:
              /** @type {Array} */
              this.$ = [$$[$0]];
              break;
            case 53:
              $$[$0 - 1].push($$[$0]);
          }
        },
        table : [{
          3 : 1,
          4 : 2,
          5 : [2, 38],
          6 : 3,
          12 : [2, 38],
          13 : [2, 38],
          16 : [2, 38],
          24 : [2, 38],
          26 : [2, 38],
          31 : [2, 38],
          32 : [2, 38],
          34 : [2, 38]
        }, {
          1 : [3]
        }, {
          5 : [1, 4]
        }, {
          5 : [2, 2],
          7 : 5,
          8 : 6,
          9 : 7,
          10 : 8,
          11 : 9,
          12 : [1, 10],
          13 : [1, 11],
          14 : 16,
          16 : [1, 20],
          19 : 14,
          22 : 15,
          24 : [1, 18],
          26 : [1, 19],
          28 : [2, 2],
          29 : [2, 2],
          31 : [1, 12],
          32 : [1, 13],
          34 : [1, 17]
        }, {
          1 : [2, 1]
        }, {
          5 : [2, 39],
          12 : [2, 39],
          13 : [2, 39],
          16 : [2, 39],
          24 : [2, 39],
          26 : [2, 39],
          28 : [2, 39],
          29 : [2, 39],
          31 : [2, 39],
          32 : [2, 39],
          34 : [2, 39]
        }, {
          5 : [2, 3],
          12 : [2, 3],
          13 : [2, 3],
          16 : [2, 3],
          24 : [2, 3],
          26 : [2, 3],
          28 : [2, 3],
          29 : [2, 3],
          31 : [2, 3],
          32 : [2, 3],
          34 : [2, 3]
        }, {
          5 : [2, 4],
          12 : [2, 4],
          13 : [2, 4],
          16 : [2, 4],
          24 : [2, 4],
          26 : [2, 4],
          28 : [2, 4],
          29 : [2, 4],
          31 : [2, 4],
          32 : [2, 4],
          34 : [2, 4]
        }, {
          5 : [2, 5],
          12 : [2, 5],
          13 : [2, 5],
          16 : [2, 5],
          24 : [2, 5],
          26 : [2, 5],
          28 : [2, 5],
          29 : [2, 5],
          31 : [2, 5],
          32 : [2, 5],
          34 : [2, 5]
        }, {
          5 : [2, 6],
          12 : [2, 6],
          13 : [2, 6],
          16 : [2, 6],
          24 : [2, 6],
          26 : [2, 6],
          28 : [2, 6],
          29 : [2, 6],
          31 : [2, 6],
          32 : [2, 6],
          34 : [2, 6]
        }, {
          5 : [2, 7],
          12 : [2, 7],
          13 : [2, 7],
          16 : [2, 7],
          24 : [2, 7],
          26 : [2, 7],
          28 : [2, 7],
          29 : [2, 7],
          31 : [2, 7],
          32 : [2, 7],
          34 : [2, 7]
        }, {
          5 : [2, 8],
          12 : [2, 8],
          13 : [2, 8],
          16 : [2, 8],
          24 : [2, 8],
          26 : [2, 8],
          28 : [2, 8],
          29 : [2, 8],
          31 : [2, 8],
          32 : [2, 8],
          34 : [2, 8]
        }, {
          17 : 21,
          30 : 22,
          41 : 23,
          50 : [1, 26],
          52 : [1, 25],
          53 : 24
        }, {
          17 : 27,
          30 : 22,
          41 : 23,
          50 : [1, 26],
          52 : [1, 25],
          53 : 24
        }, {
          4 : 28,
          6 : 3,
          12 : [2, 38],
          13 : [2, 38],
          16 : [2, 38],
          24 : [2, 38],
          26 : [2, 38],
          28 : [2, 38],
          29 : [2, 38],
          31 : [2, 38],
          32 : [2, 38],
          34 : [2, 38]
        }, {
          4 : 29,
          6 : 3,
          12 : [2, 38],
          13 : [2, 38],
          16 : [2, 38],
          24 : [2, 38],
          26 : [2, 38],
          28 : [2, 38],
          29 : [2, 38],
          31 : [2, 38],
          32 : [2, 38],
          34 : [2, 38]
        }, {
          12 : [1, 30]
        }, {
          30 : 32,
          35 : 31,
          42 : [1, 33],
          43 : [1, 34],
          50 : [1, 26],
          53 : 24
        }, {
          17 : 35,
          30 : 22,
          41 : 23,
          50 : [1, 26],
          52 : [1, 25],
          53 : 24
        }, {
          17 : 36,
          30 : 22,
          41 : 23,
          50 : [1, 26],
          52 : [1, 25],
          53 : 24
        }, {
          17 : 37,
          30 : 22,
          41 : 23,
          50 : [1, 26],
          52 : [1, 25],
          53 : 24
        }, {
          25 : [1, 38]
        }, {
          18 : [2, 48],
          25 : [2, 48],
          33 : [2, 48],
          39 : 39,
          42 : [2, 48],
          43 : [2, 48],
          44 : [2, 48],
          45 : [2, 48],
          46 : [2, 48],
          50 : [2, 48],
          52 : [2, 48]
        }, {
          18 : [2, 22],
          25 : [2, 22],
          33 : [2, 22],
          46 : [2, 22]
        }, {
          18 : [2, 35],
          25 : [2, 35],
          33 : [2, 35],
          42 : [2, 35],
          43 : [2, 35],
          44 : [2, 35],
          45 : [2, 35],
          46 : [2, 35],
          50 : [2, 35],
          52 : [2, 35],
          54 : [1, 40]
        }, {
          30 : 41,
          50 : [1, 26],
          53 : 24
        }, {
          18 : [2, 37],
          25 : [2, 37],
          33 : [2, 37],
          42 : [2, 37],
          43 : [2, 37],
          44 : [2, 37],
          45 : [2, 37],
          46 : [2, 37],
          50 : [2, 37],
          52 : [2, 37],
          54 : [2, 37]
        }, {
          33 : [1, 42]
        }, {
          20 : 43,
          27 : 44,
          28 : [1, 45],
          29 : [2, 40]
        }, {
          23 : 46,
          27 : 47,
          28 : [1, 45],
          29 : [2, 42]
        }, {
          15 : [1, 48]
        }, {
          25 : [2, 46],
          30 : 51,
          36 : 49,
          38 : 50,
          41 : 55,
          42 : [1, 52],
          43 : [1, 53],
          44 : [1, 54],
          45 : [1, 56],
          47 : 57,
          48 : 58,
          49 : 60,
          50 : [1, 59],
          52 : [1, 25],
          53 : 24
        }, {
          25 : [2, 31],
          42 : [2, 31],
          43 : [2, 31],
          44 : [2, 31],
          45 : [2, 31],
          50 : [2, 31],
          52 : [2, 31]
        }, {
          25 : [2, 32],
          42 : [2, 32],
          43 : [2, 32],
          44 : [2, 32],
          45 : [2, 32],
          50 : [2, 32],
          52 : [2, 32]
        }, {
          25 : [2, 33],
          42 : [2, 33],
          43 : [2, 33],
          44 : [2, 33],
          45 : [2, 33],
          50 : [2, 33],
          52 : [2, 33]
        }, {
          25 : [1, 61]
        }, {
          25 : [1, 62]
        }, {
          18 : [1, 63]
        }, {
          5 : [2, 17],
          12 : [2, 17],
          13 : [2, 17],
          16 : [2, 17],
          24 : [2, 17],
          26 : [2, 17],
          28 : [2, 17],
          29 : [2, 17],
          31 : [2, 17],
          32 : [2, 17],
          34 : [2, 17]
        }, {
          18 : [2, 50],
          25 : [2, 50],
          30 : 51,
          33 : [2, 50],
          36 : 65,
          40 : 64,
          41 : 55,
          42 : [1, 52],
          43 : [1, 53],
          44 : [1, 54],
          45 : [1, 56],
          46 : [2, 50],
          47 : 66,
          48 : 58,
          49 : 60,
          50 : [1, 59],
          52 : [1, 25],
          53 : 24
        }, {
          50 : [1, 67]
        }, {
          18 : [2, 34],
          25 : [2, 34],
          33 : [2, 34],
          42 : [2, 34],
          43 : [2, 34],
          44 : [2, 34],
          45 : [2, 34],
          46 : [2, 34],
          50 : [2, 34],
          52 : [2, 34]
        }, {
          5 : [2, 18],
          12 : [2, 18],
          13 : [2, 18],
          16 : [2, 18],
          24 : [2, 18],
          26 : [2, 18],
          28 : [2, 18],
          29 : [2, 18],
          31 : [2, 18],
          32 : [2, 18],
          34 : [2, 18]
        }, {
          21 : 68,
          29 : [1, 69]
        }, {
          29 : [2, 41]
        }, {
          4 : 70,
          6 : 3,
          12 : [2, 38],
          13 : [2, 38],
          16 : [2, 38],
          24 : [2, 38],
          26 : [2, 38],
          29 : [2, 38],
          31 : [2, 38],
          32 : [2, 38],
          34 : [2, 38]
        }, {
          21 : 71,
          29 : [1, 69]
        }, {
          29 : [2, 43]
        }, {
          5 : [2, 9],
          12 : [2, 9],
          13 : [2, 9],
          16 : [2, 9],
          24 : [2, 9],
          26 : [2, 9],
          28 : [2, 9],
          29 : [2, 9],
          31 : [2, 9],
          32 : [2, 9],
          34 : [2, 9]
        }, {
          25 : [2, 44],
          37 : 72,
          47 : 73,
          48 : 58,
          49 : 60,
          50 : [1, 74]
        }, {
          25 : [1, 75]
        }, {
          18 : [2, 23],
          25 : [2, 23],
          33 : [2, 23],
          42 : [2, 23],
          43 : [2, 23],
          44 : [2, 23],
          45 : [2, 23],
          46 : [2, 23],
          50 : [2, 23],
          52 : [2, 23]
        }, {
          18 : [2, 24],
          25 : [2, 24],
          33 : [2, 24],
          42 : [2, 24],
          43 : [2, 24],
          44 : [2, 24],
          45 : [2, 24],
          46 : [2, 24],
          50 : [2, 24],
          52 : [2, 24]
        }, {
          18 : [2, 25],
          25 : [2, 25],
          33 : [2, 25],
          42 : [2, 25],
          43 : [2, 25],
          44 : [2, 25],
          45 : [2, 25],
          46 : [2, 25],
          50 : [2, 25],
          52 : [2, 25]
        }, {
          18 : [2, 26],
          25 : [2, 26],
          33 : [2, 26],
          42 : [2, 26],
          43 : [2, 26],
          44 : [2, 26],
          45 : [2, 26],
          46 : [2, 26],
          50 : [2, 26],
          52 : [2, 26]
        }, {
          18 : [2, 27],
          25 : [2, 27],
          33 : [2, 27],
          42 : [2, 27],
          43 : [2, 27],
          44 : [2, 27],
          45 : [2, 27],
          46 : [2, 27],
          50 : [2, 27],
          52 : [2, 27]
        }, {
          17 : 76,
          30 : 22,
          41 : 23,
          50 : [1, 26],
          52 : [1, 25],
          53 : 24
        }, {
          25 : [2, 47]
        }, {
          18 : [2, 29],
          25 : [2, 29],
          33 : [2, 29],
          46 : [2, 29],
          49 : 77,
          50 : [1, 74]
        }, {
          18 : [2, 37],
          25 : [2, 37],
          33 : [2, 37],
          42 : [2, 37],
          43 : [2, 37],
          44 : [2, 37],
          45 : [2, 37],
          46 : [2, 37],
          50 : [2, 37],
          51 : [1, 78],
          52 : [2, 37],
          54 : [2, 37]
        }, {
          18 : [2, 52],
          25 : [2, 52],
          33 : [2, 52],
          46 : [2, 52],
          50 : [2, 52]
        }, {
          12 : [2, 13],
          13 : [2, 13],
          16 : [2, 13],
          24 : [2, 13],
          26 : [2, 13],
          28 : [2, 13],
          29 : [2, 13],
          31 : [2, 13],
          32 : [2, 13],
          34 : [2, 13]
        }, {
          12 : [2, 14],
          13 : [2, 14],
          16 : [2, 14],
          24 : [2, 14],
          26 : [2, 14],
          28 : [2, 14],
          29 : [2, 14],
          31 : [2, 14],
          32 : [2, 14],
          34 : [2, 14]
        }, {
          12 : [2, 10]
        }, {
          18 : [2, 21],
          25 : [2, 21],
          33 : [2, 21],
          46 : [2, 21]
        }, {
          18 : [2, 49],
          25 : [2, 49],
          33 : [2, 49],
          42 : [2, 49],
          43 : [2, 49],
          44 : [2, 49],
          45 : [2, 49],
          46 : [2, 49],
          50 : [2, 49],
          52 : [2, 49]
        }, {
          18 : [2, 51],
          25 : [2, 51],
          33 : [2, 51],
          46 : [2, 51]
        }, {
          18 : [2, 36],
          25 : [2, 36],
          33 : [2, 36],
          42 : [2, 36],
          43 : [2, 36],
          44 : [2, 36],
          45 : [2, 36],
          46 : [2, 36],
          50 : [2, 36],
          52 : [2, 36],
          54 : [2, 36]
        }, {
          5 : [2, 11],
          12 : [2, 11],
          13 : [2, 11],
          16 : [2, 11],
          24 : [2, 11],
          26 : [2, 11],
          28 : [2, 11],
          29 : [2, 11],
          31 : [2, 11],
          32 : [2, 11],
          34 : [2, 11]
        }, {
          30 : 79,
          50 : [1, 26],
          53 : 24
        }, {
          29 : [2, 15]
        }, {
          5 : [2, 12],
          12 : [2, 12],
          13 : [2, 12],
          16 : [2, 12],
          24 : [2, 12],
          26 : [2, 12],
          28 : [2, 12],
          29 : [2, 12],
          31 : [2, 12],
          32 : [2, 12],
          34 : [2, 12]
        }, {
          25 : [1, 80]
        }, {
          25 : [2, 45]
        }, {
          51 : [1, 78]
        }, {
          5 : [2, 20],
          12 : [2, 20],
          13 : [2, 20],
          16 : [2, 20],
          24 : [2, 20],
          26 : [2, 20],
          28 : [2, 20],
          29 : [2, 20],
          31 : [2, 20],
          32 : [2, 20],
          34 : [2, 20]
        }, {
          46 : [1, 81]
        }, {
          18 : [2, 53],
          25 : [2, 53],
          33 : [2, 53],
          46 : [2, 53],
          50 : [2, 53]
        }, {
          30 : 51,
          36 : 82,
          41 : 55,
          42 : [1, 52],
          43 : [1, 53],
          44 : [1, 54],
          45 : [1, 56],
          50 : [1, 26],
          52 : [1, 25],
          53 : 24
        }, {
          25 : [1, 83]
        }, {
          5 : [2, 19],
          12 : [2, 19],
          13 : [2, 19],
          16 : [2, 19],
          24 : [2, 19],
          26 : [2, 19],
          28 : [2, 19],
          29 : [2, 19],
          31 : [2, 19],
          32 : [2, 19],
          34 : [2, 19]
        }, {
          18 : [2, 28],
          25 : [2, 28],
          33 : [2, 28],
          42 : [2, 28],
          43 : [2, 28],
          44 : [2, 28],
          45 : [2, 28],
          46 : [2, 28],
          50 : [2, 28],
          52 : [2, 28]
        }, {
          18 : [2, 30],
          25 : [2, 30],
          33 : [2, 30],
          46 : [2, 30],
          50 : [2, 30]
        }, {
          5 : [2, 16],
          12 : [2, 16],
          13 : [2, 16],
          16 : [2, 16],
          24 : [2, 16],
          26 : [2, 16],
          28 : [2, 16],
          29 : [2, 16],
          31 : [2, 16],
          32 : [2, 16],
          34 : [2, 16]
        }],
        defaultActions : {
          4 : [2, 1],
          44 : [2, 41],
          47 : [2, 43],
          57 : [2, 47],
          63 : [2, 10],
          70 : [2, 15],
          73 : [2, 45]
        },
        /**
         * @param {string} str
         * @param {?} hash
         * @return {?}
         */
        parseError : function(str, hash) {
          throw new Error(str);
        },
        /**
         * @param {?} input
         * @return {?}
         */
        parse : function(input) {
          /**
           * @return {?}
           */
          function lex() {
            var token;
            return token = self.lexer.lex() || 1, "number" != typeof token && (token = self.symbols_[token] || token), token;
          }
          var self = this;
          /** @type {Array} */
          var stack = [0];
          /** @type {Array} */
          var vstack = [null];
          /** @type {Array} */
          var lstack = [];
          var table = this.table;
          /** @type {string} */
          var yytext = "";
          /** @type {number} */
          var yylineno = 0;
          /** @type {number} */
          var yyleng = 0;
          /** @type {number} */
          var k = 0;
          this.lexer.setInput(input);
          this.lexer.yy = this.yy;
          this.yy.lexer = this.lexer;
          this.yy.parser = this;
          if ("undefined" == typeof this.lexer.yylloc) {
            this.lexer.yylloc = {};
          }
          var yyloc = this.lexer.yylloc;
          lstack.push(yyloc);
          var m = this.lexer.options && this.lexer.options.ranges;
          if ("function" == typeof this.yy.parseError) {
            /** @type {Function} */
            this.parseError = this.yy.parseError;
          }
          var symbol;
          var preErrorSymbol;
          var state;
          var action;
          var r;
          var p;
          var len;
          var value;
          var expected;
          var yyval = {};
          for (;;) {
            if (state = stack[stack.length - 1], this.defaultActions[state] ? action = this.defaultActions[state] : ((null === symbol || "undefined" == typeof symbol) && (symbol = lex()), action = table[state] && table[state][symbol]), "undefined" == typeof action || (!action.length || !action[0])) {
              /** @type {string} */
              var errStr = "";
              if (!k) {
                /** @type {Array} */
                expected = [];
                for (p in table[state]) {
                  if (this.terminals_[p]) {
                    if (p > 2) {
                      expected.push("'" + this.terminals_[p] + "'");
                    }
                  }
                }
                /** @type {string} */
                errStr = this.lexer.showPosition ? "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'" : "Parse error on line " + (yylineno + 1) + ": Unexpected " + (1 == symbol ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
                this.parseError(errStr, {
                  text : this.lexer.match,
                  token : this.terminals_[symbol] || symbol,
                  line : this.lexer.yylineno,
                  loc : yyloc,
                  expected : expected
                });
              }
            }
            if (action[0] instanceof Array && action.length > 1) {
              throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
            }
            switch(action[0]) {
              case 1:
                stack.push(symbol);
                vstack.push(this.lexer.yytext);
                lstack.push(this.lexer.yylloc);
                stack.push(action[1]);
                /** @type {null} */
                symbol = null;
                if (preErrorSymbol) {
                  symbol = preErrorSymbol;
                  /** @type {null} */
                  preErrorSymbol = null;
                } else {
                  yyleng = this.lexer.yyleng;
                  yytext = this.lexer.yytext;
                  yylineno = this.lexer.yylineno;
                  yyloc = this.lexer.yylloc;
                  if (k > 0) {
                    k--;
                  }
                }
                break;
              case 2:
                if (len = this.productions_[action[1]][1], yyval.$ = vstack[vstack.length - len], yyval._$ = {
                  first_line : lstack[lstack.length - (len || 1)].first_line,
                  last_line : lstack[lstack.length - 1].last_line,
                  first_column : lstack[lstack.length - (len || 1)].first_column,
                  last_column : lstack[lstack.length - 1].last_column
                }, m && (yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]]), r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack), "undefined" != typeof r) {
                  return r;
                }
                if (len) {
                  /** @type {Array.<?>} */
                  stack = stack.slice(0, -1 * len * 2);
                  /** @type {Array.<?>} */
                  vstack = vstack.slice(0, -1 * len);
                  /** @type {Array.<?>} */
                  lstack = lstack.slice(0, -1 * len);
                }
                stack.push(this.productions_[action[1]][0]);
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                value = table[stack[stack.length - 2]][stack[stack.length - 1]];
                stack.push(value);
                break;
              case 3:
                return true;
            }
          }
          return true;
        }
      };
      var lexer = function() {
        var lexer = {
          EOF : 1,
          /**
           * @param {string} str
           * @param {?} hash
           * @return {undefined}
           */
          parseError : function(str, hash) {
            if (!this.yy.parser) {
              throw new Error(str);
            }
            this.yy.parser.parseError(str, hash);
          },
          /**
           * @param {string} input
           * @return {?}
           */
          setInput : function(input) {
            return this._input = input, this._more = this._less = this.done = false, this.yylineno = this.yyleng = 0, this.yytext = this.matched = this.match = "", this.conditionStack = ["INITIAL"], this.yylloc = {
              first_line : 1,
              first_column : 0,
              last_line : 1,
              last_column : 0
            }, this.options.ranges && (this.yylloc.range = [0, 0]), this.offset = 0, this;
          },
          /**
           * @return {?}
           */
          input : function() {
            var ch = this._input[0];
            this.yytext += ch;
            this.yyleng++;
            this.offset++;
            this.match += ch;
            this.matched += ch;
            var b = ch.match(/(?:\r\n?|\n).*/g);
            return b ? (this.yylineno++, this.yylloc.last_line++) : this.yylloc.last_column++, this.options.ranges && this.yylloc.range[1]++, this._input = this._input.slice(1), ch;
          },
          /**
           * @param {string} ch
           * @return {?}
           */
          unput : function(ch) {
            var len = ch.length;
            var lines = ch.split(/(?:\r\n?|\n)/g);
            this._input = ch + this._input;
            this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
            this.offset -= len;
            var oldLines = this.match.split(/(?:\r\n?|\n)/g);
            this.match = this.match.substr(0, this.match.length - 1);
            this.matched = this.matched.substr(0, this.matched.length - 1);
            if (lines.length - 1) {
              this.yylineno -= lines.length - 1;
            }
            var r = this.yylloc.range;
            return this.yylloc = {
              first_line : this.yylloc.first_line,
              last_line : this.yylineno + 1,
              first_column : this.yylloc.first_column,
              last_column : lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
            }, this.options.ranges && (this.yylloc.range = [r[0], r[0] + this.yyleng - len]), this;
          },
          /**
           * @return {?}
           */
          more : function() {
            return this._more = true, this;
          },
          /**
           * @param {number} recurring
           * @return {undefined}
           */
          less : function(recurring) {
            this.unput(this.match.slice(recurring));
          },
          /**
           * @return {?}
           */
          pastInput : function() {
            var headBuffer = this.matched.substr(0, this.matched.length - this.match.length);
            return(headBuffer.length > 20 ? "..." : "") + headBuffer.substr(-20).replace(/\n/g, "");
          },
          /**
           * @return {?}
           */
          upcomingInput : function() {
            var next = this.match;
            return next.length < 20 && (next += this._input.substr(0, 20 - next.length)), (next.substr(0, 20) + (next.length > 20 ? "..." : "")).replace(/\n/g, "");
          },
          /**
           * @return {?}
           */
          showPosition : function() {
            var pre = this.pastInput();
            /** @type {string} */
            var buf = (new Array(pre.length + 1)).join("-");
            return pre + this.upcomingInput() + "\n" + buf + "^";
          },
          /**
           * @return {?}
           */
          next : function() {
            if (this.done) {
              return this.EOF;
            }
            if (!this._input) {
              /** @type {boolean} */
              this.done = true;
            }
            var token;
            var match;
            var parent;
            var index;
            var lines;
            if (!this._more) {
              /** @type {string} */
              this.yytext = "";
              /** @type {string} */
              this.match = "";
            }
            var rules = this._currentRules();
            /** @type {number} */
            var i = 0;
            for (;i < rules.length && (parent = this._input.match(this.rules[rules[i]]), !parent || (match && !(parent[0].length > match[0].length) || (match = parent, index = i, this.options.flex)));i++) {
            }
            return match ? (lines = match[0].match(/(?:\r\n?|\n).*/g), lines && (this.yylineno += lines.length), this.yylloc = {
              first_line : this.yylloc.last_line,
              last_line : this.yylineno + 1,
              first_column : this.yylloc.last_column,
              last_column : lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
            }, this.yytext += match[0], this.match += match[0], this.matches = match, this.yyleng = this.yytext.length, this.options.ranges && (this.yylloc.range = [this.offset, this.offset += this.yyleng]), this._more = false, this._input = this._input.slice(match[0].length), this.matched += match[0], token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]), this.done && (this._input && (this.done = false)), token ? token : void 0) : 
            "" === this._input ? this.EOF : this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), {
              text : "",
              token : null,
              line : this.yylineno
            });
          },
          /**
           * @return {?}
           */
          lex : function() {
            var io = this.next();
            return "undefined" != typeof io ? io : this.lex();
          },
          /**
           * @param {string} condition
           * @return {undefined}
           */
          begin : function(condition) {
            this.conditionStack.push(condition);
          },
          /**
           * @return {?}
           */
          popState : function() {
            return this.conditionStack.pop();
          },
          /**
           * @return {?}
           */
          _currentRules : function() {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
          },
          /**
           * @return {?}
           */
          topState : function() {
            return this.conditionStack[this.conditionStack.length - 2];
          },
          /**
           * @param {string} condition
           * @return {undefined}
           */
          pushState : function(condition) {
            this.begin(condition);
          }
        };
        return lexer.options = {}, lexer.performAction = function(deltaTime, yy_, stat, file) {
          /**
           * @param {number} recurring
           * @param {number} expectedNumberOfNonCommentArgs
           * @return {?}
           */
          function strip(recurring, expectedNumberOfNonCommentArgs) {
            return yy_.yytext = yy_.yytext.substr(recurring, yy_.yyleng - expectedNumberOfNonCommentArgs);
          }
          switch(stat) {
            case 0:
              if ("\\\\" === yy_.yytext.slice(-2) ? (strip(0, 1), this.begin("mu")) : "\\" === yy_.yytext.slice(-1) ? (strip(0, 1), this.begin("emu")) : this.begin("mu"), yy_.yytext) {
                return 12;
              }
              break;
            case 1:
              return 12;
            case 2:
              return this.popState(), 12;
            case 3:
              return yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9), this.popState(), 15;
            case 4:
              return 12;
            case 5:
              return strip(0, 4), this.popState(), 13;
            case 6:
              return 45;
            case 7:
              return 46;
            case 8:
              return 16;
            case 9:
              return this.popState(), this.begin("raw"), 18;
            case 10:
              return 34;
            case 11:
              return 24;
            case 12:
              return 29;
            case 13:
              return this.popState(), 28;
            case 14:
              return this.popState(), 28;
            case 15:
              return 26;
            case 16:
              return 26;
            case 17:
              return 32;
            case 18:
              return 31;
            case 19:
              this.popState();
              this.begin("com");
              break;
            case 20:
              return strip(3, 5), this.popState(), 13;
            case 21:
              return 31;
            case 22:
              return 51;
            case 23:
              return 50;
            case 24:
              return 50;
            case 25:
              return 54;
            case 26:
              break;
            case 27:
              return this.popState(), 33;
            case 28:
              return this.popState(), 25;
            case 29:
              return yy_.yytext = strip(1, 2).replace(/\\"/g, '"'), 42;
            case 30:
              return yy_.yytext = strip(1, 2).replace(/\\'/g, "'"), 42;
            case 31:
              return 52;
            case 32:
              return 44;
            case 33:
              return 44;
            case 34:
              return 43;
            case 35:
              return 50;
            case 36:
              return yy_.yytext = strip(1, 2), 50;
            case 37:
              return "INVALID";
            case 38:
              return 5;
          }
        }, lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]*?(?=(\{\{\{\{\/)))/, /^(?:[\s\S]*?--\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, 
        /^(?:\{\{!--)/, /^(?:\{\{![\s\S]*?\}\})/, /^(?:\{\{(~)?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)]))))/, /^(?:\[[^\]]*\])/, /^(?:.)/, /^(?:$)/], lexer.conditions = {
          mu : {
            rules : [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38],
            inclusive : false
          },
          emu : {
            rules : [2],
            inclusive : false
          },
          com : {
            rules : [5],
            inclusive : false
          },
          raw : {
            rules : [3, 4],
            inclusive : false
          },
          INITIAL : {
            rules : [0, 1, 38],
            inclusive : true
          }
        }, lexer;
      }();
      return parser.lexer = lexer, Parser.prototype = parser, parser.Parser = Parser, new Parser;
    }();
    return bulk = fn;
  }();
  var pdataCur = function(value) {
    /**
     * @param {string} str
     * @param {string} txt
     * @return {?}
     */
    function log(str, txt) {
      return{
        left : "~" === str.charAt(2),
        right : "~" === txt.charAt(txt.length - 3)
      };
    }
    /**
     * @param {string} mustache
     * @param {(Function|string)} data
     * @param {Object} statement
     * @param {string} close
     * @param {boolean} recurring
     * @param {?} inverse
     * @return {?}
     */
    function BlockNode(mustache, data, statement, close, recurring, inverse) {
      if (mustache.sexpr.id.original !== close.path.original) {
        throw new color(mustache.sexpr.id.original + " doesn't match " + close.path.original, mustache);
      }
      var self = statement && statement.program;
      var button = {
        left : mustache.strip.left,
        right : close.strip.right,
        openStandalone : fn(data.statements),
        closeStandalone : callback((self || data).statements)
      };
      if (mustache.strip.right && init(data.statements, null, true), self) {
        var strip = statement.strip;
        if (strip.left) {
          _(data.statements, null, true);
        }
        if (strip.right) {
          init(self.statements, null, true);
        }
        if (close.strip.left) {
          _(self.statements, null, true);
        }
        if (callback(data.statements)) {
          if (fn(self.statements)) {
            _(data.statements);
            init(self.statements);
          }
        }
      } else {
        if (close.strip.left) {
          _(data.statements, null, true);
        }
      }
      return recurring ? new this.BlockNode(mustache, self, data, button, inverse) : new this.BlockNode(mustache, data, self, button, inverse);
    }
    /**
     * @param {Array} el
     * @param {boolean} next
     * @return {?}
     */
    function show(el, next) {
      /** @type {number} */
      var i = 0;
      var len = el.length;
      for (;len > i;i++) {
        var options = el[i];
        var strip = options.strip;
        if (strip) {
          var value = callback(el, i, next, "partial" === options.type);
          var res = fn(el, i, next);
          var proceed = strip.openStandalone && value;
          var n = strip.closeStandalone && res;
          var o = strip.inlineStandalone && (value && res);
          if (strip.right) {
            init(el, i, true);
          }
          if (strip.left) {
            _(el, i, true);
          }
          if (o) {
            init(el, i);
            if (_(el, i)) {
              if ("partial" === options.type) {
                /** @type {string} */
                options.indent = /([ \t]+$)/.exec(el[i - 1].original) ? RegExp.$1 : "";
              }
            }
          }
          if (proceed) {
            init((options.program || options.inverse).statements);
            _(el, i);
          }
          if (n) {
            init(el, i);
            _((options.inverse || options.program).statements);
          }
        }
      }
      return el;
    }
    /**
     * @param {Array} s
     * @param {number} i
     * @param {boolean} index
     * @return {?}
     */
    function callback(s, i, index) {
      if (void 0 === i) {
        i = s.length;
      }
      var src = s[i - 1];
      var k = s[i - 2];
      return src ? "content" === src.type ? (k || !index ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(src.original) : void 0 : index;
    }
    /**
     * @param {Array} args
     * @param {number} key
     * @param {boolean} item
     * @return {?}
     */
    function fn(args, key, item) {
      if (void 0 === key) {
        /** @type {number} */
        key = -1;
      }
      var parent = args[key + 1];
      var pageY = args[key + 2];
      return parent ? "content" === parent.type ? (pageY || !item ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(parent.original) : void 0 : item;
    }
    /**
     * @param {?} elements
     * @param {number} depMaps
     * @param {boolean} dataAndEvents
     * @return {undefined}
     */
    function init(elements, depMaps, dataAndEvents) {
      var me = elements[null == depMaps ? 0 : depMaps + 1];
      if (me && ("content" === me.type && (dataAndEvents || !me.rightStripped))) {
        var value = me.string;
        me.string = me.string.replace(dataAndEvents ? /^\s+/ : /^[ \t]*\r?\n?/, "");
        /** @type {boolean} */
        me.rightStripped = me.string !== value;
      }
    }
    /**
     * @param {Array} obj
     * @param {number} recurring
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    function _(obj, recurring, dataAndEvents) {
      var prop = obj[null == recurring ? obj.length - 1 : recurring - 1];
      if (prop && ("content" === prop.type && (dataAndEvents || !prop.leftStripped))) {
        var start = prop.string;
        return prop.string = prop.string.replace(dataAndEvents ? /\s+$/ : /[ \t]+$/, ""), prop.leftStripped = prop.string !== start, prop.leftStripped;
      }
    }
    var __exports__ = {};
    var color = value;
    return __exports__.stripFlags = log, __exports__.prepareBlock = BlockNode, __exports__.prepareProgram = show, __exports__;
  }(udataCur);
  var __module8__ = function(obj, __dependency2__, value, _) {
    /**
     * @param {?} input
     * @return {?}
     */
    function parse(input) {
      return input.constructor === AST.ProgramNode ? input : (parser.yy = attributes, parser.parse(input));
    }
    var __exports__ = {};
    var parser = obj;
    var AST = __dependency2__;
    var v = value;
    var _extend = _.extend;
    __exports__.parser = parser;
    var attributes = {};
    return _extend(attributes, v, AST), __exports__.parse = parse, __exports__;
  }(suiteView, __module7__, pdataCur, __module2__);
  var __module10__ = function(value, __dependency3__) {
    /**
     * @return {undefined}
     */
    function Compiler() {
    }
    /**
     * @param {?} input
     * @param {Object} options
     * @param {JSONType} env
     * @return {?}
     */
    function precompile(input, options, env) {
      if (null == input || "string" != typeof input && input.constructor !== env.AST.ProgramNode) {
        throw new Exception("You must pass a string or Handlebars AST to Handlebars.precompile. You passed " + input);
      }
      options = options || {};
      if (!("data" in options)) {
        /** @type {boolean} */
        options.data = true;
      }
      if (options.compat) {
        /** @type {boolean} */
        options.useDepths = true;
      }
      var ast = env.parse(input);
      var environment = (new env.Compiler).compile(ast, options);
      return(new env.JavaScriptCompiler).compile(environment, options);
    }
    /**
     * @param {string} input
     * @param {Object} options
     * @param {Object} env
     * @return {?}
     */
    function compile(input, options, env) {
      /**
       * @return {?}
       */
      function compile() {
        var ast = env.parse(input);
        var environment = (new env.Compiler).compile(ast, options);
        var name = (new env.JavaScriptCompiler).compile(environment, options, void 0, true);
        return env.template(name);
      }
      if (null == input || "string" != typeof input && input.constructor !== env.AST.ProgramNode) {
        throw new Exception("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input);
      }
      options = options || {};
      if (!("data" in options)) {
        /** @type {boolean} */
        options.data = true;
      }
      if (options.compat) {
        /** @type {boolean} */
        options.useDepths = true;
      }
      var fn;
      /**
       * @param {?} i
       * @param {?} cb
       * @return {?}
       */
      var forEach = function(i, cb) {
        return fn || (fn = compile()), fn.call(this, i, cb);
      };
      return forEach._setup = function(data) {
        return fn || (fn = compile()), fn._setup(data);
      }, forEach._child = function(scope, isXML, deepDataAndEvents) {
        return fn || (fn = compile()), fn._child(scope, isXML, deepDataAndEvents);
      }, forEach;
    }
    /**
     * @param {string} a
     * @param {string} b
     * @return {?}
     */
    function cmp(a, b) {
      if (a === b) {
        return true;
      }
      if (isArray(a) && (isArray(b) && a.length === b.length)) {
        /** @type {number} */
        var i = 0;
        for (;i < a.length;i++) {
          if (!cmp(a[i], b[i])) {
            return false;
          }
        }
        return true;
      }
    }
    var __exports__ = {};
    var Exception = value;
    var isArray = __dependency3__.isArray;
    /** @type {function (this:(Array.<T>|string|{length: number}), *=, *=): Array.<T>} */
    var __slice = [].slice;
    return __exports__.Compiler = Compiler, Compiler.prototype = {
      /** @type {function (): undefined} */
      compiler : Compiler,
      /**
       * @param {Object} other
       * @return {?}
       */
      equals : function(other) {
        var len = this.opcodes.length;
        if (other.opcodes.length !== len) {
          return false;
        }
        /** @type {number} */
        var i = 0;
        for (;len > i;i++) {
          var opcode = this.opcodes[i];
          var otherOpcode = other.opcodes[i];
          if (opcode.opcode !== otherOpcode.opcode || !cmp(opcode.args, otherOpcode.args)) {
            return false;
          }
        }
        len = this.children.length;
        /** @type {number} */
        i = 0;
        for (;len > i;i++) {
          if (!this.children[i].equals(other.children[i])) {
            return false;
          }
        }
        return true;
      },
      guid : 0,
      /**
       * @param {string} program
       * @param {Object} options
       * @return {?}
       */
      compile : function(program, options) {
        /** @type {Array} */
        this.opcodes = [];
        /** @type {Array} */
        this.children = [];
        this.depths = {
          list : []
        };
        /** @type {Object} */
        this.options = options;
        this.stringParams = options.stringParams;
        this.trackIds = options.trackIds;
        var knownHelpers = this.options.knownHelpers;
        if (this.options.knownHelpers = {
          helperMissing : true,
          blockHelperMissing : true,
          each : true,
          "if" : true,
          unless : true,
          "with" : true,
          log : true,
          lookup : true
        }, knownHelpers) {
          var name;
          for (name in knownHelpers) {
            this.options.knownHelpers[name] = knownHelpers[name];
          }
        }
        return this.accept(program);
      },
      /**
       * @param {Object} node
       * @return {?}
       */
      accept : function(node) {
        return this[node.type](node);
      },
      /**
       * @param {Object} fn
       * @return {?}
       */
      program : function(fn) {
        var statements = fn.statements;
        /** @type {number} */
        var i = 0;
        var l = statements.length;
        for (;l > i;i++) {
          this.accept(statements[i]);
        }
        return this.isSimple = 1 === l, this.depths.list = this.depths.list.sort(function(far, near) {
          return far - near;
        }), this;
      },
      /**
       * @param {string} program
       * @return {?}
       */
      compileProgram : function(program) {
        var depth;
        var result = (new this.compiler).compile(program, this.options);
        /** @type {number} */
        var guid = this.guid++;
        this.usePartial = this.usePartial || result.usePartial;
        this.children[guid] = result;
        /** @type {number} */
        var i = 0;
        var l = result.depths.list.length;
        for (;l > i;i++) {
          depth = result.depths.list[i];
          if (!(2 > depth)) {
            this.addDepth(depth - 1);
          }
        }
        return guid;
      },
      /**
       * @param {?} block
       * @return {undefined}
       */
      block : function(block) {
        var mustache = block.mustache;
        var program = block.program;
        var inverse = block.inverse;
        if (program) {
          program = this.compileProgram(program);
        }
        if (inverse) {
          inverse = this.compileProgram(inverse);
        }
        var sexpr = mustache.sexpr;
        var type = this.classifySexpr(sexpr);
        if ("helper" === type) {
          this.helperSexpr(sexpr, program, inverse);
        } else {
          if ("simple" === type) {
            this.simpleSexpr(sexpr);
            this.opcode("pushProgram", program);
            this.opcode("pushProgram", inverse);
            this.opcode("emptyHash");
            this.opcode("blockValue", sexpr.id.original);
          } else {
            this.ambiguousSexpr(sexpr, program, inverse);
            this.opcode("pushProgram", program);
            this.opcode("pushProgram", inverse);
            this.opcode("emptyHash");
            this.opcode("ambiguousBlockValue");
          }
        }
        this.opcode("append");
      },
      /**
       * @param {?} hash
       * @return {undefined}
       */
      hash : function(hash) {
        var pname;
        var _len2;
        var pairs = hash.pairs;
        this.opcode("pushHash");
        /** @type {number} */
        pname = 0;
        _len2 = pairs.length;
        for (;_len2 > pname;pname++) {
          this.pushParam(pairs[pname][1]);
        }
        for (;pname--;) {
          this.opcode("assignToHash", pairs[pname][0]);
        }
        this.opcode("popHash");
      },
      /**
       * @param {Object} o
       * @return {undefined}
       */
      partial : function(o) {
        var content = o.partialName;
        /** @type {boolean} */
        this.usePartial = true;
        if (o.hash) {
          this.accept(o.hash);
        } else {
          this.opcode("push", "undefined");
        }
        if (o.context) {
          this.accept(o.context);
        } else {
          this.opcode("getContext", 0);
          this.opcode("pushContext");
        }
        this.opcode("invokePartial", content.name, o.indent || "");
        this.opcode("append");
      },
      /**
       * @param {string} content
       * @return {undefined}
       */
      content : function(content) {
        if (content.string) {
          this.opcode("appendContent", content.string);
        }
      },
      /**
       * @param {?} mustache
       * @return {undefined}
       */
      mustache : function(mustache) {
        this.sexpr(mustache.sexpr);
        if (mustache.escaped && !this.options.noEscape) {
          this.opcode("appendEscaped");
        } else {
          this.opcode("append");
        }
      },
      /**
       * @param {Element} sexpr
       * @param {string} program
       * @param {string} inverse
       * @return {undefined}
       */
      ambiguousSexpr : function(sexpr, program, inverse) {
        var id = sexpr.id;
        var name = id.parts[0];
        /** @type {boolean} */
        var isBlock = null != program || null != inverse;
        this.opcode("getContext", id.depth);
        this.opcode("pushProgram", program);
        this.opcode("pushProgram", inverse);
        this.ID(id);
        this.opcode("invokeAmbiguous", name, isBlock);
      },
      /**
       * @param {Element} sexpr
       * @return {undefined}
       */
      simpleSexpr : function(sexpr) {
        var id = sexpr.id;
        if ("DATA" === id.type) {
          this.DATA(id);
        } else {
          if (id.parts.length) {
            this.ID(id);
          } else {
            this.addDepth(id.depth);
            this.opcode("getContext", id.depth);
            this.opcode("pushContext");
          }
        }
        this.opcode("resolvePossibleLambda");
      },
      /**
       * @param {Object} sexpr
       * @param {?} program
       * @param {?} inverse
       * @return {undefined}
       */
      helperSexpr : function(sexpr, program, inverse) {
        var params = this.setupFullMustacheParams(sexpr, program, inverse);
        var id = sexpr.id;
        var name = id.parts[0];
        if (this.options.knownHelpers[name]) {
          this.opcode("invokeKnownHelper", params.length, name);
        } else {
          if (this.options.knownHelpersOnly) {
            throw new Exception("You specified knownHelpersOnly, but used the unknown helper " + name, sexpr);
          }
          /** @type {boolean} */
          id.falsy = true;
          this.ID(id);
          this.opcode("invokeHelper", params.length, id.original, id.isSimple);
        }
      },
      /**
       * @param {string} sexpr
       * @return {undefined}
       */
      sexpr : function(sexpr) {
        var type = this.classifySexpr(sexpr);
        if ("simple" === type) {
          this.simpleSexpr(sexpr);
        } else {
          if ("helper" === type) {
            this.helperSexpr(sexpr);
          } else {
            this.ambiguousSexpr(sexpr);
          }
        }
      },
      /**
       * @param {?} id
       * @return {undefined}
       */
      ID : function(id) {
        this.addDepth(id.depth);
        this.opcode("getContext", id.depth);
        var b = id.parts[0];
        if (b) {
          this.opcode("lookupOnContext", id.parts, id.falsy, id.isScoped);
        } else {
          this.opcode("pushContext");
        }
      },
      /**
       * @param {Element} data
       * @return {undefined}
       */
      DATA : function(data) {
        /** @type {boolean} */
        this.options.data = true;
        this.opcode("lookupData", data.id.depth, data.id.parts);
      },
      /**
       * @param {string} string
       * @return {undefined}
       */
      STRING : function(string) {
        this.opcode("pushString", string.string);
      },
      /**
       * @param {string} data
       * @return {undefined}
       */
      NUMBER : function(data) {
        this.opcode("pushLiteral", data.number);
      },
      /**
       * @param {?} bool
       * @return {undefined}
       */
      BOOLEAN : function(bool) {
        this.opcode("pushLiteral", bool.bool);
      },
      /**
       * @return {undefined}
       */
      comment : function() {
      },
      /**
       * @param {string} name
       * @return {undefined}
       */
      opcode : function(name) {
        this.opcodes.push({
          opcode : name,
          args : __slice.call(arguments, 1)
        });
      },
      /**
       * @param {number} depth
       * @return {undefined}
       */
      addDepth : function(depth) {
        if (0 !== depth) {
          if (!this.depths[depth]) {
            /** @type {boolean} */
            this.depths[depth] = true;
            this.depths.list.push(depth);
          }
        }
      },
      /**
       * @param {Element} sexpr
       * @return {?}
       */
      classifySexpr : function(sexpr) {
        var isHelper = sexpr.isHelper;
        var isEligible = sexpr.eligibleHelper;
        var options = this.options;
        if (isEligible && !isHelper) {
          var name = sexpr.id.parts[0];
          if (options.knownHelpers[name]) {
            /** @type {boolean} */
            isHelper = true;
          } else {
            if (options.knownHelpersOnly) {
              /** @type {boolean} */
              isEligible = false;
            }
          }
        }
        return isHelper ? "helper" : isEligible ? "ambiguous" : "simple";
      },
      /**
       * @param {Array} params
       * @return {undefined}
       */
      pushParams : function(params) {
        /** @type {number} */
        var max = 0;
        var len = params.length;
        for (;len > max;max++) {
          this.pushParam(params[max]);
        }
      },
      /**
       * @param {Object} val
       * @return {undefined}
       */
      pushParam : function(val) {
        if (this.stringParams) {
          if (val.depth) {
            this.addDepth(val.depth);
          }
          this.opcode("getContext", val.depth || 0);
          this.opcode("pushStringParam", val.stringModeValue, val.type);
          if ("sexpr" === val.type) {
            this.sexpr(val);
          }
        } else {
          if (this.trackIds) {
            this.opcode("pushId", val.type, val.idName || val.stringModeValue);
          }
          this.accept(val);
        }
      },
      /**
       * @param {Object} sexpr
       * @param {?} inverse
       * @param {?} program
       * @return {?}
       */
      setupFullMustacheParams : function(sexpr, inverse, program) {
        var params = sexpr.params;
        return this.pushParams(params), this.opcode("pushProgram", inverse), this.opcode("pushProgram", program), sexpr.hash ? this.hash(sexpr.hash) : this.opcode("emptyHash"), params;
      }
    }, __exports__.precompile = precompile, __exports__.compile = compile, __exports__;
  }(udataCur, __module2__);
  var failuresLink = function(__dependency3__, value) {
    /**
     * @param {?} v
     * @return {undefined}
     */
    function HookerOverride(v) {
      this.value = v;
    }
    /**
     * @return {undefined}
     */
    function JavaScriptCompiler() {
    }
    var __exports__;
    var COMPILER_REVISION = __dependency3__.COMPILER_REVISION;
    var REVISION_CHANGES = __dependency3__.REVISION_CHANGES;
    var Exception = value;
    JavaScriptCompiler.prototype = {
      /**
       * @param {string} parent
       * @param {string} name
       * @return {?}
       */
      nameLookup : function(parent, name) {
        return JavaScriptCompiler.isValidJavaScriptVariableName(name) ? parent + "." + name : parent + "['" + name + "']";
      },
      /**
       * @param {string} dataAndEvents
       * @return {?}
       */
      depthedLookup : function(dataAndEvents) {
        return this.aliases.lookup = "this.lookup", 'lookup(depths, "' + dataAndEvents + '")';
      },
      /**
       * @return {?}
       */
      compilerInfo : function() {
        var revision = COMPILER_REVISION;
        var versions = REVISION_CHANGES[revision];
        return[revision, versions];
      },
      /**
       * @param {string} string
       * @return {?}
       */
      appendToBuffer : function(string) {
        return this.environment.isSimple ? "return " + string + ";" : {
          appendToBuffer : true,
          content : string,
          /**
           * @return {?}
           */
          toString : function() {
            return "buffer += " + string + ";";
          }
        };
      },
      /**
       * @return {?}
       */
      initializeBuffer : function() {
        return this.quotedString("");
      },
      namespace : "Handlebars",
      /**
       * @param {string} environment
       * @param {Object} options
       * @param {Node} context
       * @param {boolean} deepDataAndEvents
       * @return {?}
       */
      compile : function(environment, options, context, deepDataAndEvents) {
        /** @type {string} */
        this.environment = environment;
        /** @type {Object} */
        this.options = options;
        this.stringParams = this.options.stringParams;
        this.trackIds = this.options.trackIds;
        /** @type {boolean} */
        this.precompile = !deepDataAndEvents;
        this.name = this.environment.name;
        /** @type {boolean} */
        this.isChild = !!context;
        this.context = context || {
          programs : [],
          environments : []
        };
        this.preamble();
        /** @type {number} */
        this.stackSlot = 0;
        /** @type {Array} */
        this.stackVars = [];
        this.aliases = {};
        this.registers = {
          list : []
        };
        /** @type {Array} */
        this.hashes = [];
        /** @type {Array} */
        this.compileStack = [];
        /** @type {Array} */
        this.inlineStack = [];
        this.compileChildren(environment, options);
        this.useDepths = this.useDepths || (environment.depths.list.length || this.options.compat);
        var opcode;
        var i;
        var l;
        var opcodes = environment.opcodes;
        /** @type {number} */
        i = 0;
        l = opcodes.length;
        for (;l > i;i++) {
          opcode = opcodes[i];
          this[opcode.opcode].apply(this, opcode.args);
        }
        if (this.pushSource(""), this.stackSlot || (this.inlineStack.length || this.compileStack.length)) {
          throw new Exception("Compile completed with content left on stack");
        }
        var js = this.createFunctionContext(deepDataAndEvents);
        if (this.isChild) {
          return js;
        }
        var result = {
          compiler : this.compilerInfo(),
          main : js
        };
        /** @type {Array} */
        var data = this.context.programs;
        /** @type {number} */
        i = 0;
        /** @type {number} */
        l = data.length;
        for (;l > i;i++) {
          if (data[i]) {
            result[i] = data[i];
          }
        }
        return this.environment.usePartial && (result.usePartial = true), this.options.data && (result.useData = true), this.useDepths && (result.useDepths = true), this.options.compat && (result.compat = true), deepDataAndEvents || (result.compiler = JSON.stringify(result.compiler), result = this.objectLiteral(result)), result;
      },
      /**
       * @return {undefined}
       */
      preamble : function() {
        /** @type {number} */
        this.lastContext = 0;
        /** @type {Array} */
        this.source = [];
      },
      /**
       * @param {boolean} deepDataAndEvents
       * @return {?}
       */
      createFunctionContext : function(deepDataAndEvents) {
        /** @type {string} */
        var later = "";
        var dig = this.stackVars.concat(this.registers.list);
        if (dig.length > 0) {
          later += ", " + dig.join(", ");
        }
        var alias;
        for (alias in this.aliases) {
          if (this.aliases.hasOwnProperty(alias)) {
            later += ", " + alias + "=" + this.aliases[alias];
          }
        }
        /** @type {Array} */
        var params = ["depth0", "helpers", "partials", "data"];
        if (this.useDepths) {
          params.push("depths");
        }
        var options = this.mergeSource(later);
        return deepDataAndEvents ? (params.push(options), Function.apply(this, params)) : "function(" + params.join(",") + ") {\n  " + options + "}";
      },
      /**
       * @param {string} key
       * @return {?}
       */
      mergeSource : function(key) {
        var buffer;
        var isSym;
        /** @type {string} */
        var data = "";
        /** @type {boolean} */
        var e = !this.forceBuffer;
        /** @type {number} */
        var i = 0;
        var len = this.source.length;
        for (;len > i;i++) {
          var line = this.source[i];
          if (line.appendToBuffer) {
            buffer = buffer ? buffer + "\n    + " + line.content : line.content;
          } else {
            if (buffer) {
              if (data) {
                data += "buffer += " + buffer + ";\n  ";
              } else {
                /** @type {boolean} */
                isSym = true;
                /** @type {string} */
                data = buffer + ";\n  ";
              }
              buffer = void 0;
            }
            data += line + "\n  ";
            if (!this.environment.isSimple) {
              /** @type {boolean} */
              e = false;
            }
          }
        }
        return e ? (buffer || !data) && (data += "return " + (buffer || '""') + ";\n") : (key += ", buffer = " + (isSym ? "" : this.initializeBuffer()), data += buffer ? "return buffer + " + buffer + ";\n" : "return buffer;\n"), key && (data = "var " + key.substring(2) + (isSym ? "" : ";\n  ") + data), data;
      },
      /**
       * @param {string} walkers
       * @return {undefined}
       */
      blockValue : function(walkers) {
        /** @type {string} */
        this.aliases.blockHelperMissing = "helpers.blockHelperMissing";
        /** @type {Array} */
        var params = [this.contextName(0)];
        this.setupParams(walkers, 0, params);
        var current = this.popStack();
        params.splice(1, 0, current);
        this.push("blockHelperMissing.call(" + params.join(", ") + ")");
      },
      /**
       * @return {undefined}
       */
      ambiguousBlockValue : function() {
        /** @type {string} */
        this.aliases.blockHelperMissing = "helpers.blockHelperMissing";
        /** @type {Array} */
        var params = [this.contextName(0)];
        this.setupParams("", 0, params, true);
        this.flushInline();
        var current = this.topStack();
        params.splice(1, 0, current);
        this.pushSource("if (!" + this.lastHelper + ") { " + current + " = blockHelperMissing.call(" + params.join(", ") + "); }");
      },
      /**
       * @param {Function} content
       * @return {undefined}
       */
      appendContent : function(content) {
        if (this.pendingContent) {
          content = this.pendingContent + content;
        }
        /** @type {Function} */
        this.pendingContent = content;
      },
      /**
       * @return {undefined}
       */
      append : function() {
        this.flushInline();
        var local = this.popStack();
        this.pushSource("if (" + local + " != null) { " + this.appendToBuffer(local) + " }");
        if (this.environment.isSimple) {
          this.pushSource("else { " + this.appendToBuffer("''") + " }");
        }
      },
      /**
       * @return {undefined}
       */
      appendEscaped : function() {
        /** @type {string} */
        this.aliases.escapeExpression = "this.escapeExpression";
        this.pushSource(this.appendToBuffer("escapeExpression(" + this.popStack() + ")"));
      },
      /**
       * @param {Node} depth
       * @return {undefined}
       */
      getContext : function(depth) {
        /** @type {Node} */
        this.lastContext = depth;
      },
      /**
       * @return {undefined}
       */
      pushContext : function() {
        this.pushStackLiteral(this.contextName(this.lastContext));
      },
      /**
       * @param {(Array|number)} second
       * @param {boolean} name
       * @param {boolean} dataAndEvents
       * @return {undefined}
       */
      lookupOnContext : function(second, name, dataAndEvents) {
        /** @type {number} */
        var i = 0;
        var l = second.length;
        if (dataAndEvents || (!this.options.compat || this.lastContext)) {
          this.pushContext();
        } else {
          this.push(this.depthedLookup(second[i++]));
        }
        for (;l > i;i++) {
          this.replaceStack(function(current) {
            var key = this.nameLookup(current, second[i], "context");
            return name ? " && " + key : " != null ? " + key + " : " + current;
          });
        }
      },
      /**
       * @param {string} id
       * @param {Array} classNames
       * @return {undefined}
       */
      lookupData : function(id, classNames) {
        if (id) {
          this.pushStackLiteral("this.data(data, " + id + ")");
        } else {
          this.pushStackLiteral("data");
        }
        var cnl = classNames.length;
        /** @type {number} */
        var c = 0;
        for (;cnl > c;c++) {
          this.replaceStack(function(current) {
            return " && " + this.nameLookup(current, classNames[c], "data");
          });
        }
      },
      /**
       * @return {undefined}
       */
      resolvePossibleLambda : function() {
        /** @type {string} */
        this.aliases.lambda = "this.lambda";
        this.push("lambda(" + this.popStack() + ", " + this.contextName(0) + ")");
      },
      /**
       * @param {string} type
       * @param {string} string
       * @return {undefined}
       */
      pushStringParam : function(type, string) {
        this.pushContext();
        this.pushString(string);
        if ("sexpr" !== string) {
          if ("string" == typeof type) {
            this.pushString(type);
          } else {
            this.pushStackLiteral(type);
          }
        }
      },
      /**
       * @return {undefined}
       */
      emptyHash : function() {
        this.pushStackLiteral("{}");
        if (this.trackIds) {
          this.push("{}");
        }
        if (this.stringParams) {
          this.push("{}");
          this.push("{}");
        }
      },
      /**
       * @return {undefined}
       */
      pushHash : function() {
        if (this.hash) {
          this.hashes.push(this.hash);
        }
        this.hash = {
          values : [],
          types : [],
          contexts : [],
          ids : []
        };
      },
      /**
       * @return {undefined}
       */
      popHash : function() {
        var hash = this.hash;
        this.hash = this.hashes.pop();
        if (this.trackIds) {
          this.push("{" + hash.ids.join(",") + "}");
        }
        if (this.stringParams) {
          this.push("{" + hash.contexts.join(",") + "}");
          this.push("{" + hash.types.join(",") + "}");
        }
        this.push("{\n    " + hash.values.join(",\n    ") + "\n  }");
      },
      /**
       * @param {string} string
       * @return {undefined}
       */
      pushString : function(string) {
        this.pushStackLiteral(this.quotedString(string));
      },
      /**
       * @param {string} replacementHash
       * @return {?}
       */
      push : function(replacementHash) {
        return this.inlineStack.push(replacementHash), replacementHash;
      },
      /**
       * @param {string} value
       * @return {undefined}
       */
      pushLiteral : function(value) {
        this.pushStackLiteral(value);
      },
      /**
       * @param {string} guid
       * @return {undefined}
       */
      pushProgram : function(guid) {
        if (null != guid) {
          this.pushStackLiteral(this.programExpression(guid));
        } else {
          this.pushStackLiteral(null);
        }
      },
      /**
       * @param {number} paramSize
       * @param {string} name
       * @param {boolean} isRoot
       * @return {undefined}
       */
      invokeHelper : function(paramSize, name, isRoot) {
        /** @type {string} */
        this.aliases.helperMissing = "helpers.helperMissing";
        var value = this.popStack();
        var helper = this.setupHelper(paramSize, name);
        /** @type {string} */
        var f = (isRoot ? helper.name + " || " : "") + value + " || helperMissing";
        this.push("((" + f + ").call(" + helper.callParams + "))");
      },
      /**
       * @param {number} paramSize
       * @param {string} name
       * @return {undefined}
       */
      invokeKnownHelper : function(paramSize, name) {
        var helper = this.setupHelper(paramSize, name);
        this.push(helper.name + ".call(" + helper.callParams + ")");
      },
      /**
       * @param {string} name
       * @param {boolean} deepDataAndEvents
       * @return {undefined}
       */
      invokeAmbiguous : function(name, deepDataAndEvents) {
        /** @type {string} */
        this.aliases.functionType = '"function"';
        /** @type {string} */
        this.aliases.helperMissing = "helpers.helperMissing";
        this.useRegister("helper");
        var value = this.popStack();
        this.emptyHash();
        var helper = this.setupHelper(0, name, deepDataAndEvents);
        var helperName = this.lastHelper = this.nameLookup("helpers", name, "helper");
        this.push("((helper = (helper = " + helperName + " || " + value + ") != null ? helper : helperMissing" + (helper.paramsInit ? "),(" + helper.paramsInit : "") + "),(typeof helper === functionType ? helper.call(" + helper.callParams + ") : helper))");
      },
      /**
       * @param {string} name
       * @param {string} context
       * @return {undefined}
       */
      invokePartial : function(name, context) {
        /** @type {Array} */
        var accumulator = [this.nameLookup("partials", name, "partial"), "'" + context + "'", "'" + name + "'", this.popStack(), this.popStack(), "helpers", "partials"];
        if (this.options.data) {
          accumulator.push("data");
        } else {
          if (this.options.compat) {
            accumulator.push("undefined");
          }
        }
        if (this.options.compat) {
          accumulator.push("depths");
        }
        this.push("this.invokePartial(" + accumulator.join(", ") + ")");
      },
      /**
       * @param {string} key
       * @return {undefined}
       */
      assignToHash : function(key) {
        var type;
        var inverse;
        var context;
        var value = this.popStack();
        if (this.trackIds) {
          context = this.popStack();
        }
        if (this.stringParams) {
          inverse = this.popStack();
          type = this.popStack();
        }
        var hash = this.hash;
        if (type) {
          hash.contexts.push("'" + key + "': " + type);
        }
        if (inverse) {
          hash.types.push("'" + key + "': " + inverse);
        }
        if (context) {
          hash.ids.push("'" + key + "': " + context);
        }
        hash.values.push("'" + key + "': (" + value + ")");
      },
      /**
       * @param {string} dataAndEvents
       * @param {string} string
       * @return {undefined}
       */
      pushId : function(dataAndEvents, string) {
        if ("ID" === dataAndEvents || "DATA" === dataAndEvents) {
          this.pushString(string);
        } else {
          if ("sexpr" === dataAndEvents) {
            this.pushStackLiteral("true");
          } else {
            this.pushStackLiteral("null");
          }
        }
      },
      /** @type {function (): undefined} */
      compiler : JavaScriptCompiler,
      /**
       * @param {Object} environment
       * @param {Object} options
       * @return {undefined}
       */
      compileChildren : function(environment, options) {
        var child;
        var compiler;
        var children = environment.children;
        /** @type {number} */
        var i = 0;
        var l = children.length;
        for (;l > i;i++) {
          child = children[i];
          compiler = new this.compiler;
          var index = this.matchExistingProgram(child);
          if (null == index) {
            this.context.programs.push("");
            index = this.context.programs.length;
            child.index = index;
            /** @type {string} */
            child.name = "program" + index;
            this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
            this.context.environments[index] = child;
            this.useDepths = this.useDepths || compiler.useDepths;
          } else {
            child.index = index;
            /** @type {string} */
            child.name = "program" + index;
          }
        }
      },
      /**
       * @param {Error} child
       * @return {?}
       */
      matchExistingProgram : function(child) {
        /** @type {number} */
        var i = 0;
        var l = this.context.environments.length;
        for (;l > i;i++) {
          var environment = this.context.environments[i];
          if (environment && environment.equals(child)) {
            return i;
          }
        }
      },
      /**
       * @param {string} guid
       * @return {?}
       */
      programExpression : function(guid) {
        var child = this.environment.children[guid];
        var depths = (child.depths.list, this.useDepths);
        /** @type {Array} */
        var tagNameArr = [child.index, "data"];
        return depths && tagNameArr.push("depths"), "this.program(" + tagNameArr.join(", ") + ")";
      },
      /**
       * @param {string} name
       * @return {undefined}
       */
      useRegister : function(name) {
        if (!this.registers[name]) {
          /** @type {boolean} */
          this.registers[name] = true;
          this.registers.list.push(name);
        }
      },
      /**
       * @param {string} value
       * @return {?}
       */
      pushStackLiteral : function(value) {
        return this.push(new HookerOverride(value));
      },
      /**
       * @param {string} value
       * @return {undefined}
       */
      pushSource : function(value) {
        if (this.pendingContent) {
          this.source.push(this.appendToBuffer(this.quotedString(this.pendingContent)));
          this.pendingContent = void 0;
        }
        if (value) {
          this.source.push(value);
        }
      },
      /**
       * @param {?} elems
       * @return {?}
       */
      pushStack : function(elems) {
        this.flushInline();
        var value = this.incrStack();
        return this.pushSource(value + " = " + elems + ";"), this.compileStack.push(value), value;
      },
      /**
       * @param {Function} callback
       * @return {undefined}
       */
      replaceStack : function(callback) {
        var stack;
        var object;
        var e;
        /** @type {string} */
        var list = "";
        this.isInline();
        if (!this.isInline()) {
          throw new Exception("replaceStack on non-inline");
        }
        var top = this.popStack(true);
        if (top instanceof HookerOverride) {
          list = stack = top.value;
          /** @type {boolean} */
          e = true;
        } else {
          /** @type {boolean} */
          object = !this.stackSlot;
          var value = object ? this.incrStack() : this.topStackName();
          /** @type {string} */
          list = "(" + this.push(value) + " = " + top + ")";
          stack = this.topStack();
        }
        var inStack = callback.call(this, stack);
        if (!e) {
          this.popStack();
        }
        if (object) {
          this.stackSlot--;
        }
        this.push("(" + list + inStack + ")");
      },
      /**
       * @return {?}
       */
      incrStack : function() {
        return this.stackSlot++, this.stackSlot > this.stackVars.length && this.stackVars.push("stack" + this.stackSlot), this.topStackName();
      },
      /**
       * @return {?}
       */
      topStackName : function() {
        return "stack" + this.stackSlot;
      },
      /**
       * @return {undefined}
       */
      flushInline : function() {
        var inlineStack = this.inlineStack;
        if (inlineStack.length) {
          /** @type {Array} */
          this.inlineStack = [];
          /** @type {number} */
          var i = 0;
          var len = inlineStack.length;
          for (;len > i;i++) {
            var ret = inlineStack[i];
            if (ret instanceof HookerOverride) {
              this.compileStack.push(ret);
            } else {
              this.pushStack(ret);
            }
          }
        }
      },
      /**
       * @return {?}
       */
      isInline : function() {
        return this.inlineStack.length;
      },
      /**
       * @param {boolean} dataAndEvents
       * @return {?}
       */
      popStack : function(dataAndEvents) {
        var inline = this.isInline();
        var v = (inline ? this.inlineStack : this.compileStack).pop();
        if (!dataAndEvents && v instanceof HookerOverride) {
          return v.value;
        }
        if (!inline) {
          if (!this.stackSlot) {
            throw new Exception("Invalid stack pop");
          }
          this.stackSlot--;
        }
        return v;
      },
      /**
       * @return {?}
       */
      topStack : function() {
        var resultItems = this.isInline() ? this.inlineStack : this.compileStack;
        var result = resultItems[resultItems.length - 1];
        return result instanceof HookerOverride ? result.value : result;
      },
      /**
       * @param {number} recurring
       * @return {?}
       */
      contextName : function(recurring) {
        return this.useDepths && recurring ? "depths[" + recurring + "]" : "depth" + recurring;
      },
      /**
       * @param {string} str
       * @return {?}
       */
      quotedString : function(str) {
        return'"' + str.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029") + '"';
      },
      /**
       * @param {Object} info
       * @return {?}
       */
      objectLiteral : function(info) {
        /** @type {Array} */
        var tagNameArr = [];
        var name;
        for (name in info) {
          if (info.hasOwnProperty(name)) {
            tagNameArr.push(this.quotedString(name) + ":" + info[name]);
          }
        }
        return "{" + tagNameArr.join(",") + "}";
      },
      /**
       * @param {number} paramSize
       * @param {string} name
       * @param {boolean} deepDataAndEvents
       * @return {?}
       */
      setupHelper : function(paramSize, name, deepDataAndEvents) {
        /** @type {Array} */
        var params = [];
        var code = this.setupParams(name, paramSize, params, deepDataAndEvents);
        var foundHelper = this.nameLookup("helpers", name, "helper");
        return{
          params : params,
          paramsInit : code,
          name : foundHelper,
          callParams : [this.contextName(0)].concat(params).join(", ")
        };
      },
      /**
       * @param {string} name
       * @param {(Function|number)} recurring
       * @param {Array} params
       * @return {?}
       */
      setupOptions : function(name, recurring, params) {
        var param;
        var inverse;
        var program;
        var options = {};
        /** @type {Array} */
        var coordsAsInts = [];
        /** @type {Array} */
        var qs = [];
        /** @type {Array} */
        var contexts = [];
        options.name = this.quotedString(name);
        options.hash = this.popStack();
        if (this.trackIds) {
          options.hashIds = this.popStack();
        }
        if (this.stringParams) {
          options.hashTypes = this.popStack();
          options.hashContexts = this.popStack();
        }
        inverse = this.popStack();
        program = this.popStack();
        if (program || inverse) {
          if (!program) {
            /** @type {string} */
            program = "this.noop";
          }
          if (!inverse) {
            /** @type {string} */
            inverse = "this.noop";
          }
          options.fn = program;
          options.inverse = inverse;
        }
        /** @type {(Function|number)} */
        var i = recurring;
        for (;i--;) {
          param = this.popStack();
          params[i] = param;
          if (this.trackIds) {
            contexts[i] = this.popStack();
          }
          if (this.stringParams) {
            qs[i] = this.popStack();
            coordsAsInts[i] = this.popStack();
          }
        }
        return this.trackIds && (options.ids = "[" + contexts.join(",") + "]"), this.stringParams && (options.types = "[" + qs.join(",") + "]", options.contexts = "[" + coordsAsInts.join(",") + "]"), this.options.data && (options.data = "data"), options;
      },
      /**
       * @param {string} obj
       * @param {number} recurring
       * @param {Array} params
       * @param {boolean} deepDataAndEvents
       * @return {?}
       */
      setupParams : function(obj, recurring, params, deepDataAndEvents) {
        var options = this.objectLiteral(this.setupOptions(obj, recurring, params));
        return deepDataAndEvents ? (this.useRegister("options"), params.push("options"), "options=" + options) : (params.push(options), "");
      }
    };
    /** @type {Array.<string>} */
    var reservedWords = "break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield".split(" ");
    var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};
    /** @type {number} */
    var i = 0;
    /** @type {number} */
    var l = reservedWords.length;
    for (;l > i;i++) {
      /** @type {boolean} */
      compilerWords[reservedWords[i]] = true;
    }
    return JavaScriptCompiler.isValidJavaScriptVariableName = function(name) {
      return!JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
    }, __exports__ = JavaScriptCompiler;
  }(__module1__, udataCur);
  var __module0__ = function(regex, __dependency2__, __dependency3__, __dependency4__, el) {
    var __exports__;
    /** @type {Object} */
    var Handlebars = regex;
    var AST = __dependency2__;
    var Parser = __dependency3__.parser;
    var parse = __dependency3__.parse;
    var Compiler = __dependency4__.Compiler;
    var compile = __dependency4__.compile;
    var precompile = __dependency4__.precompile;
    var JavaScriptCompiler = el;
    var _create = Handlebars.create;
    /**
     * @return {?}
     */
    var create = function() {
      var hb = _create();
      return hb.compile = function(input, options) {
        return compile(input, options, hb);
      }, hb.precompile = function(input, options) {
        return precompile(input, options, hb);
      }, hb.AST = AST, hb.Compiler = Compiler, hb.JavaScriptCompiler = JavaScriptCompiler, hb.Parser = Parser, hb.parse = parse, hb;
    };
    return Handlebars = create(), Handlebars.create = create, Handlebars["default"] = Handlebars, __exports__ = Handlebars;
  }(r20, __module7__, __module8__, __module10__, failuresLink);
  return __module0__;
}), function(obj, func) {
  if ("object" == typeof module && "object" == typeof module.exports) {
    module.exports = obj.document ? func(obj, true) : function(name) {
      if (!name.document) {
        throw new Error("jQuery requires a window with a document");
      }
      return func(name);
    };
  } else {
    func(obj);
  }
}("undefined" != typeof window ? window : this, function(win, dataAndEvents) {
  /**
   * @param {string} optgroup
   * @return {?}
   */
  function isArraylike(optgroup) {
    var len = optgroup.length;
    var type = jQuery.type(optgroup);
    return "function" === type || jQuery.isWindow(optgroup) ? false : 1 === optgroup.nodeType && len ? true : "array" === type || (0 === len || "number" == typeof len && (len > 0 && len - 1 in optgroup));
  }
  /**
   * @param {Object} pdataOld
   * @param {string} optgroup
   * @param {boolean} fix
   * @return {?}
   */
  function winnow(pdataOld, optgroup, fix) {
    if (jQuery.isFunction(optgroup)) {
      return jQuery.grep(pdataOld, function(opt_obj, mapper) {
        return!!optgroup.call(opt_obj, mapper, opt_obj) !== fix;
      });
    }
    if (optgroup.nodeType) {
      return jQuery.grep(pdataOld, function(templateName) {
        return templateName === optgroup !== fix;
      });
    }
    if ("string" == typeof optgroup) {
      if (rhtml.test(optgroup)) {
        return jQuery.filter(optgroup, pdataOld, fix);
      }
      optgroup = jQuery.filter(optgroup, pdataOld);
    }
    return jQuery.grep(pdataOld, function(elem) {
      return core_indexOf.call(optgroup, elem) >= 0 !== fix;
    });
  }
  /**
   * @param {Object} cur
   * @param {string} dir
   * @return {?}
   */
  function sibling(cur, dir) {
    for (;(cur = cur[dir]) && 1 !== cur.nodeType;) {
    }
    return cur;
  }
  /**
   * @param {string} options
   * @return {?}
   */
  function createOptions(options) {
    var buf = optionsCache[options] = {};
    return jQuery.each(options.match(vvarText) || [], function(dataAndEvents, off) {
      /** @type {boolean} */
      buf[off] = true;
    }), buf;
  }
  /**
   * @return {undefined}
   */
  function Data() {
    Object.defineProperty(this.cache = {}, 0, {
      /**
       * @return {?}
       */
      get : function() {
        return{};
      }
    });
    this.expando = jQuery.expando + Data.uid++;
  }
  /**
   * @param {?} elem
   * @param {string} camelKey
   * @param {Object} data
   * @return {?}
   */
  function dataAttr(elem, camelKey, data) {
    var optgroup;
    if (void 0 === data && 1 === elem.nodeType) {
      if (optgroup = "data-" + camelKey.replace(f, "-$&").toLowerCase(), data = elem.getAttribute(optgroup), "string" == typeof data) {
        try {
          data = "true" === data ? true : "false" === data ? false : "null" === data ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
        } catch (e) {
        }
        data_user.set(elem, camelKey, data);
      } else {
        data = void 0;
      }
    }
    return data;
  }
  /**
   * @return {?}
   */
  function returnTrue() {
    return true;
  }
  /**
   * @return {?}
   */
  function returnFalse() {
    return false;
  }
  /**
   * @return {?}
   */
  function safeActiveElement() {
    try {
      return rvar.activeElement;
    } catch (a) {
    }
  }
  /**
   * @param {Node} elem
   * @param {Object} content
   * @return {?}
   */
  function manipulationTarget(elem, content) {
    return jQuery.nodeName(elem, "table") && jQuery.nodeName(11 !== content.nodeType ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
  }
  /**
   * @param {Element} elem
   * @return {?}
   */
  function restoreScript(elem) {
    return elem.type = (null !== elem.getAttribute("type")) + "/" + elem.type, elem;
  }
  /**
   * @param {Element} s
   * @return {?}
   */
  function fn(s) {
    /** @type {(Array.<string>|null)} */
    var l = re.exec(s.type);
    return l ? s.type = l[1] : s.removeAttribute("type"), s;
  }
  /**
   * @param {(Array|NodeList)} elems
   * @param {Array} refElements
   * @return {undefined}
   */
  function setGlobalEval(elems, refElements) {
    /** @type {number} */
    var i = 0;
    var l = elems.length;
    for (;l > i;i++) {
      data_priv.set(elems[i], "globalEval", !refElements || data_priv.get(refElements[i], "globalEval"));
    }
  }
  /**
   * @param {string} src
   * @param {string} dest
   * @return {undefined}
   */
  function cloneCopyEvent(src, dest) {
    var i;
    var ilen;
    var type;
    var pdataOld;
    var pdataCur;
    var udataOld;
    var udataCur;
    var events;
    if (1 === dest.nodeType) {
      if (data_priv.hasData(src) && (pdataOld = data_priv.access(src), pdataCur = data_priv.set(dest, pdataOld), events = pdataOld.events)) {
        delete pdataCur.handle;
        pdataCur.events = {};
        for (type in events) {
          /** @type {number} */
          i = 0;
          ilen = events[type].length;
          for (;ilen > i;i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
      if (data_user.hasData(src)) {
        udataOld = data_user.access(src);
        udataCur = jQuery.extend({}, udataOld);
        data_user.set(dest, udataCur);
      }
    }
  }
  /**
   * @param {Node} context
   * @param {string} tag
   * @return {?}
   */
  function getAll(context, tag) {
    var ret = "undefined" != typeof context.getElementsByTagName ? context.getElementsByTagName(tag || "*") : "undefined" != typeof context.querySelectorAll ? context.querySelectorAll(tag || "*") : [];
    return void 0 === tag || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
  }
  /**
   * @param {Element} src
   * @param {Element} dest
   * @return {undefined}
   */
  function fixInput(src, dest) {
    var name = dest.nodeName.toLowerCase();
    if ("input" === name && manipulation_rcheckableType.test(src.type)) {
      dest.checked = src.checked;
    } else {
      if ("input" === name || "textarea" === name) {
        dest.defaultValue = src.defaultValue;
      }
    }
  }
  /**
   * @param {string} name
   * @param {Document} doc
   * @return {?}
   */
  function actualDisplay(name, doc) {
    var el = jQuery(doc.createElement(name)).appendTo(doc.body);
    var displayStyle = jQuery.css(el[0], "display");
    return el.detach(), displayStyle;
  }
  /**
   * @param {string} nodeName
   * @return {?}
   */
  function defaultDisplay(nodeName) {
    var doc = rvar;
    var display = elemdisplay[nodeName];
    return display || (display = actualDisplay(nodeName, doc), "none" !== display && display || (iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement), doc = iframe[0].contentDocument, doc.write(), doc.close(), display = actualDisplay(nodeName, doc), iframe.detach()), elemdisplay[nodeName] = display), display;
  }
  /**
   * @param {Object} node
   * @param {string} prop
   * @param {Object} styles
   * @return {?}
   */
  function curCSS(node, prop, styles) {
    var val;
    return styles = styles || getStyles(node), styles && (val = styles.getPropertyValue(prop) || styles[prop]), styles && ("" !== val || (jQuery.contains(node.ownerDocument, node) || (val = jQuery.style(node, prop)))), void 0 !== val ? val + "" : val;
  }
  /**
   * @param {?} $timeout
   * @param {Function} hookFn
   * @return {?}
   */
  function addGetHookIf($timeout, hookFn) {
    return{
      /**
       * @return {?}
       */
      get : function() {
        return $timeout() ? void delete this.get : (this.get = hookFn).apply(this, arguments);
      }
    };
  }
  /**
   * @param {Object} style
   * @param {string} name
   * @return {?}
   */
  function vendorPropName(style, name) {
    if (name in style) {
      return name;
    }
    var capitalized = name[0].toUpperCase() + name.slice(1);
    /** @type {string} */
    var origName = name;
    /** @type {number} */
    var length = VENDOR_PREFIXES.length;
    for (;length--;) {
      if (name = VENDOR_PREFIXES[length] + capitalized, name in style) {
        return name;
      }
    }
    return origName;
  }
  /**
   * @param {?} elem
   * @param {string} value
   * @param {boolean} keepData
   * @return {?}
   */
  function setPositiveNumber(elem, value, keepData) {
    /** @type {(Array.<string>|null)} */
    var iterator = rrelNum.exec(value);
    return iterator ? Math.max(0, iterator[1] - (keepData || 0)) + (iterator[2] || "px") : value;
  }
  /**
   * @param {string} elem
   * @param {string} prop
   * @param {string} extra
   * @param {boolean} isBorderBox
   * @param {?} styles
   * @return {?}
   */
  function augmentWidthOrHeight(elem, prop, extra, isBorderBox, styles) {
    /** @type {number} */
    var i = extra === (isBorderBox ? "border" : "content") ? 4 : "width" === prop ? 1 : 0;
    /** @type {number} */
    var val = 0;
    for (;4 > i;i += 2) {
      if ("margin" === extra) {
        val += jQuery.css(elem, extra + cssExpand[i], true, styles);
      }
      if (isBorderBox) {
        if ("content" === extra) {
          val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
        }
        if ("margin" !== extra) {
          val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }
      } else {
        val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
        if ("padding" !== extra) {
          val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }
      }
    }
    return val;
  }
  /**
   * @param {Object} elem
   * @param {string} name
   * @param {string} extra
   * @return {?}
   */
  function getWidthOrHeight(elem, name, extra) {
    /** @type {boolean} */
    var valueIsBorderBox = true;
    var val = "width" === name ? elem.offsetWidth : elem.offsetHeight;
    var styles = getStyles(elem);
    /** @type {boolean} */
    var isBorderBox = "border-box" === jQuery.css(elem, "boxSizing", false, styles);
    if (0 >= val || null == val) {
      if (val = curCSS(elem, name, styles), (0 > val || null == val) && (val = elem.style[name]), regexp.test(val)) {
        return val;
      }
      valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
      /** @type {number} */
      val = parseFloat(val) || 0;
    }
    return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
  }
  /**
   * @param {Array} elements
   * @param {boolean} show
   * @return {?}
   */
  function showHide(elements, show) {
    var display;
    var elem;
    var hidden;
    /** @type {Array} */
    var values = [];
    /** @type {number} */
    var index = 0;
    var length = elements.length;
    for (;length > index;index++) {
      elem = elements[index];
      if (elem.style) {
        values[index] = data_priv.get(elem, "olddisplay");
        display = elem.style.display;
        if (show) {
          if (!values[index]) {
            if (!("none" !== display)) {
              /** @type {string} */
              elem.style.display = "";
            }
          }
          if ("" === elem.style.display) {
            if (isHidden(elem)) {
              values[index] = data_priv.access(elem, "olddisplay", defaultDisplay(elem.nodeName));
            }
          }
        } else {
          hidden = isHidden(elem);
          if (!("none" === display && hidden)) {
            data_priv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
          }
        }
      }
    }
    /** @type {number} */
    index = 0;
    for (;length > index;index++) {
      elem = elements[index];
      if (elem.style) {
        if (!(show && ("none" !== elem.style.display && "" !== elem.style.display))) {
          elem.style.display = show ? values[index] || "" : "none";
        }
      }
    }
    return elements;
  }
  /**
   * @param {string} prefix
   * @param {string} optgroup
   * @param {boolean} traditional
   * @param {Function} add
   * @return {undefined}
   */
  function buildParams(prefix, optgroup, traditional, add) {
    var name;
    if (jQuery.isArray(optgroup)) {
      jQuery.each(optgroup, function(i, v) {
        if (traditional || rbracket.test(prefix)) {
          add(prefix, v);
        } else {
          buildParams(prefix + "[" + ("object" == typeof v ? i : "") + "]", v, traditional, add);
        }
      });
    } else {
      if (traditional || "object" !== jQuery.type(optgroup)) {
        add(prefix, optgroup);
      } else {
        for (name in optgroup) {
          buildParams(prefix + "[" + name + "]", optgroup[name], traditional, add);
        }
      }
    }
  }
  /**
   * @param {Object} element
   * @return {?}
   */
  function getWindow(element) {
    return jQuery.isWindow(element) ? element : 9 === element.nodeType && element.defaultView;
  }
  /** @type {Array} */
  var core_deletedIds = [];
  var rvar = win.document;
  /** @type {function (this:(Array.<T>|string|{length: number}), *=, *=): Array.<T>} */
  var core_slice = core_deletedIds.slice;
  /** @type {function (this:*, ...[*]): Array} */
  var core_concat = core_deletedIds.concat;
  /** @type {function (this:(Array.<T>|{length: number}), ...[T]): number} */
  var core_push = core_deletedIds.push;
  /** @type {function (this:(Array.<T>|string|{length: number}), T, number=): number} */
  var core_indexOf = core_deletedIds.indexOf;
  var class2type = {};
  /** @type {function (this:*): string} */
  var core_toString = class2type.toString;
  /** @type {function (this:Object, *): boolean} */
  var core_hasOwn = class2type.hasOwnProperty;
  var support = {};
  /** @type {string} */
  var core_version = "3.0.0-pre -deferred,-ajax,-ajax/jsonp,-ajax/load,-ajax/parseJSON,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/Tween,-effects/animatedSelector,-core/ready,-deprecated,-exports/amd";
  /**
   * @param {string} name
   * @param {Object} value
   * @return {?}
   */
  var jQuery = function(name, value) {
    return new jQuery.fn.init(name, value);
  };
  /** @type {RegExp} */
  var r20 = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
  /** @type {RegExp} */
  var rmsPrefix = /^-ms-/;
  /** @type {RegExp} */
  var emptyParagraphRegexp = /-([\da-z])/gi;
  /**
   * @param {?} all
   * @param {string} letter
   * @return {?}
   */
  var fcamelCase = function(all, letter) {
    return letter.toUpperCase();
  };
  jQuery.fn = jQuery.prototype = {
    jquery : core_version,
    /** @type {function (string, Object): ?} */
    constructor : jQuery,
    selector : "",
    length : 0,
    /**
     * @return {?}
     */
    toArray : function() {
      return core_slice.call(this);
    },
    /**
     * @param {string} name
     * @return {?}
     */
    get : function(name) {
      return null != name ? 0 > name ? this[name + this.length] : this[name] : core_slice.call(this);
    },
    /**
     * @param {Array} elems
     * @return {?}
     */
    pushStack : function(elems) {
      var ret = jQuery.merge(this.constructor(), elems);
      return ret.prevObject = this, ret.context = this.context, ret;
    },
    /**
     * @param {Function} callback
     * @param {Function} args
     * @return {?}
     */
    each : function(callback, args) {
      return jQuery.each(this, callback, args);
    },
    /**
     * @param {Function} elems
     * @return {?}
     */
    map : function(elems) {
      return this.pushStack(jQuery.map(this, function(elem, mapper) {
        return elems.call(elem, mapper, elem);
      }));
    },
    /**
     * @return {?}
     */
    slice : function() {
      return this.pushStack(core_slice.apply(this, arguments));
    },
    /**
     * @return {?}
     */
    first : function() {
      return this.eq(0);
    },
    /**
     * @return {?}
     */
    last : function() {
      return this.eq(-1);
    },
    /**
     * @param {number} y
     * @return {?}
     */
    eq : function(y) {
      var l = this.length;
      var i = +y + (0 > y ? l : 0);
      return this.pushStack(i >= 0 && l > i ? [this[i]] : []);
    },
    /**
     * @return {?}
     */
    end : function() {
      return this.prevObject || this.constructor(null);
    },
    /** @type {function (this:(Array.<T>|{length: number}), ...[T]): number} */
    push : core_push,
    /** @type {function (this:(Array.<T>|{length: number}), function (T, T): number=): ?} */
    sort : core_deletedIds.sort,
    /** @type {function (this:(Array.<T>|{length: number}), *=, *=, ...[T]): Array.<T>} */
    splice : core_deletedIds.splice
  };
  /** @type {function (): ?} */
  jQuery.extend = jQuery.fn.extend = function() {
    var options;
    var name;
    var src;
    var copy;
    var copyIsArray;
    var clone;
    var target = arguments[0] || {};
    /** @type {number} */
    var i = 1;
    /** @type {number} */
    var l = arguments.length;
    /** @type {boolean} */
    var deep = false;
    if ("boolean" == typeof target) {
      /** @type {boolean} */
      deep = target;
      target = arguments[i] || {};
      i++;
    }
    if (!("object" == typeof target)) {
      if (!jQuery.isFunction(target)) {
        target = {};
      }
    }
    if (i === l) {
      target = this;
      i--;
    }
    for (;l > i;i++) {
      if (null != (options = arguments[i])) {
        for (name in options) {
          src = target[name];
          copy = options[name];
          if (target !== copy) {
            if (deep && (copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy))))) {
              if (copyIsArray) {
                /** @type {boolean} */
                copyIsArray = false;
                clone = src && jQuery.isArray(src) ? src : [];
              } else {
                clone = src && jQuery.isPlainObject(src) ? src : {};
              }
              target[name] = jQuery.extend(deep, clone, copy);
            } else {
              if (void 0 !== copy) {
                target[name] = copy;
              }
            }
          }
        }
      }
    }
    return target;
  };
  jQuery.extend({
    expando : "jQuery" + (core_version + Math.random()).replace(/\D/g, ""),
    isReady : true,
    /**
     * @param {string} msg
     * @return {?}
     */
    error : function(msg) {
      throw new Error(msg);
    },
    /**
     * @return {undefined}
     */
    noop : function() {
    },
    /**
     * @param {string} optgroup
     * @return {?}
     */
    isFunction : function(optgroup) {
      return "function" === jQuery.type(optgroup);
    },
    /** @type {function (*): boolean} */
    isArray : Array.isArray,
    /**
     * @param {string} obj
     * @return {?}
     */
    isWindow : function(obj) {
      return null != obj && obj === obj.window;
    },
    /**
     * @param {string} obj
     * @return {?}
     */
    isNumeric : function(obj) {
      return!jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;
    },
    /**
     * @param {string} optgroup
     * @return {?}
     */
    isPlainObject : function(optgroup) {
      return "object" !== jQuery.type(optgroup) || (optgroup.nodeType || jQuery.isWindow(optgroup)) ? false : optgroup.constructor && !core_hasOwn.call(optgroup.constructor.prototype, "isPrototypeOf") ? false : true;
    },
    /**
     * @param {?} obj
     * @return {?}
     */
    isEmptyObject : function(obj) {
      var prop;
      for (prop in obj) {
        return false;
      }
      return true;
    },
    /**
     * @param {string} name
     * @return {?}
     */
    type : function(name) {
      return null == name ? name + "" : "object" == typeof name || "function" == typeof name ? class2type[core_toString.call(name)] || "object" : typeof name;
    },
    /**
     * @param {?} data
     * @return {undefined}
     */
    globalEval : function(data) {
      var script = rvar.createElement("script");
      script.text = data;
      rvar.head.appendChild(script).parentNode.removeChild(script);
    },
    /**
     * @param {string} string
     * @return {?}
     */
    camelCase : function(string) {
      return string.replace(rmsPrefix, "ms-").replace(emptyParagraphRegexp, fcamelCase);
    },
    /**
     * @param {Node} elem
     * @param {string} name
     * @return {?}
     */
    nodeName : function(elem, name) {
      return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    },
    /**
     * @param {Function} obj
     * @param {Function} callback
     * @param {Object} args
     * @return {?}
     */
    each : function(obj, callback, args) {
      /** @type {number} */
      var i = 0;
      var l = obj.length;
      var isArray = isArraylike(obj);
      if (args) {
        if (isArray) {
          for (;l > i && callback.apply(obj[i], args) !== false;i++) {
          }
        } else {
          for (i in obj) {
            if (callback.apply(obj[i], args) === false) {
              break;
            }
          }
        }
      } else {
        if (isArray) {
          for (;l > i && callback.call(obj[i], i, obj[i]) !== false;i++) {
          }
        } else {
          for (i in obj) {
            if (callback.call(obj[i], i, obj[i]) === false) {
              break;
            }
          }
        }
      }
      return obj;
    },
    /**
     * @param {(number|string)} text
     * @return {?}
     */
    trim : function(text) {
      return null == text ? "" : (text + "").replace(r20, "");
    },
    /**
     * @param {?} arr
     * @param {Array} results
     * @return {?}
     */
    makeArray : function(arr, results) {
      var ret = results || [];
      return null != arr && (isArraylike(Object(arr)) ? jQuery.merge(ret, "string" == typeof arr ? [arr] : arr) : core_push.call(ret, arr)), ret;
    },
    /**
     * @param {?} elem
     * @param {?} arr
     * @param {?} i
     * @return {?}
     */
    inArray : function(elem, arr, i) {
      return null == arr ? -1 : core_indexOf.call(arr, elem, i);
    },
    /**
     * @param {Array} first
     * @param {?} second
     * @return {?}
     */
    merge : function(first, second) {
      /** @type {number} */
      var jlen = +second.length;
      /** @type {number} */
      var j = 0;
      var i = first.length;
      for (;jlen > j;j++) {
        first[i++] = second[j];
      }
      return first.length = i, first;
    },
    /**
     * @param {Array} elems
     * @param {Function} callback
     * @param {?} inv
     * @return {?}
     */
    grep : function(elems, callback, inv) {
      var val;
      /** @type {Array} */
      var ret = [];
      /** @type {number} */
      var i = 0;
      var l = elems.length;
      /** @type {boolean} */
      var skip = !inv;
      for (;l > i;i++) {
        /** @type {boolean} */
        val = !callback(elems[i], i);
        if (val !== skip) {
          ret.push(elems[i]);
        }
      }
      return ret;
    },
    /**
     * @param {Function} elems
     * @param {Function} callback
     * @param {string} arg
     * @return {?}
     */
    map : function(elems, callback, arg) {
      var value;
      /** @type {number} */
      var i = 0;
      var l = elems.length;
      var isArray = isArraylike(elems);
      /** @type {Array} */
      var args = [];
      if (isArray) {
        for (;l > i;i++) {
          value = callback(elems[i], i, arg);
          if (null != value) {
            args.push(value);
          }
        }
      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);
          if (null != value) {
            args.push(value);
          }
        }
      }
      return core_concat.apply([], args);
    },
    guid : 1,
    /**
     * @param {Object} fn
     * @param {string} context
     * @return {?}
     */
    proxy : function(fn, context) {
      var tmp;
      var args;
      var proxy;
      return "string" == typeof context && (tmp = fn[context], context = fn, fn = tmp), jQuery.isFunction(fn) ? (args = core_slice.call(arguments, 2), proxy = function() {
        return fn.apply(context || this, args.concat(core_slice.call(arguments)));
      }, proxy.guid = fn.guid = fn.guid || jQuery.guid++, proxy) : void 0;
    },
    /** @type {function (): number} */
    now : Date.now,
    support : support
  });
  jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(dataAndEvents, m3) {
    class2type["[object " + m3 + "]"] = m3.toLowerCase();
  });
  var Sizzle = function(win) {
    /**
     * @param {string} selector
     * @param {Node} context
     * @param {Array} results
     * @param {Array} seed
     * @return {?}
     */
    function Sizzle(selector, context, results, seed) {
      var match;
      var elem;
      var m;
      var type;
      var i;
      var groups;
      var old;
      var nid;
      var newContext;
      var optgroup;
      if ((context ? context.ownerDocument || context : preferredDoc) !== doc && setDocument(context), context = context || doc, results = results || [], !selector || "string" != typeof selector) {
        return results;
      }
      if (1 !== (type = context.nodeType) && (9 !== type && 11 !== type)) {
        return[];
      }
      if (documentIsHTML && !seed) {
        if (11 !== type && (match = rquickExpr.exec(selector))) {
          if (m = match[1]) {
            if (9 === type) {
              if (elem = context.getElementById(m), !elem || !elem.parentNode) {
                return results;
              }
              if (elem.id === m) {
                return results.push(elem), results;
              }
            } else {
              if (context.ownerDocument && ((elem = context.ownerDocument.getElementById(m)) && (contains(context, elem) && elem.id === m))) {
                return results.push(elem), results;
              }
            }
          } else {
            if (match[2]) {
              return push.apply(results, context.getElementsByTagName(selector)), results;
            }
            if ((m = match[3]) && support.getElementsByClassName) {
              return push.apply(results, context.getElementsByClassName(m)), results;
            }
          }
        }
        if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
          if (nid = old = expando, newContext = context, optgroup = 1 !== type && selector, 1 === type && "object" !== context.nodeName.toLowerCase()) {
            groups = tokenize(selector);
            if (old = context.getAttribute("id")) {
              nid = old.replace(r20, "\\$&");
            } else {
              context.setAttribute("id", nid);
            }
            /** @type {string} */
            nid = "[id='" + nid + "'] ";
            i = groups.length;
            for (;i--;) {
              /** @type {string} */
              groups[i] = nid + toSelector(groups[i]);
            }
            newContext = namespace.test(selector) && testContext(context.parentNode) || context;
            optgroup = groups.join(",");
          }
          if (optgroup) {
            try {
              return push.apply(results, newContext.querySelectorAll(optgroup)), results;
            } catch (q) {
            } finally {
              if (!old) {
                context.removeAttribute("id");
              }
            }
          }
        }
      }
      return select(selector.replace(rtrim, "$1"), context, results, seed);
    }
    /**
     * @return {?}
     */
    function createCache() {
      /**
       * @param {string} key
       * @param {?} value
       * @return {?}
       */
      function cache(key, value) {
        return buf.push(key + " ") > Expr.cacheLength && delete cache[buf.shift()], cache[key + " "] = value;
      }
      /** @type {Array} */
      var buf = [];
      return cache;
    }
    /**
     * @param {Object} fn
     * @return {?}
     */
    function markFunction(fn) {
      return fn[expando] = true, fn;
    }
    /**
     * @param {Function} fn
     * @return {?}
     */
    function assert(fn) {
      var t = doc.createElement("div");
      try {
        return!!fn(t);
      } catch (c) {
        return false;
      } finally {
        if (t.parentNode) {
          t.parentNode.removeChild(t);
        }
        /** @type {null} */
        t = null;
      }
    }
    /**
     * @param {string} attrs
     * @param {Function} handler
     * @return {undefined}
     */
    function addHandle(attrs, handler) {
      var arr = attrs.split("|");
      var i = attrs.length;
      for (;i--;) {
        /** @type {Function} */
        Expr.attrHandle[arr[i]] = handler;
      }
    }
    /**
     * @param {Object} a
     * @param {Object} b
     * @return {?}
     */
    function siblingCheck(a, b) {
      var cur = b && a;
      var diff = cur && (1 === a.nodeType && (1 === b.nodeType && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE)));
      if (diff) {
        return diff;
      }
      if (cur) {
        for (;cur = cur.nextSibling;) {
          if (cur === b) {
            return-1;
          }
        }
      }
      return a ? 1 : -1;
    }
    /**
     * @param {?} type
     * @return {?}
     */
    function createInputPseudo(type) {
      return function(elem) {
        var b = elem.nodeName.toLowerCase();
        return "input" === b && elem.type === type;
      };
    }
    /**
     * @param {?} type
     * @return {?}
     */
    function createButtonPseudo(type) {
      return function(elem) {
        var NULL = elem.nodeName.toLowerCase();
        return("input" === NULL || "button" === NULL) && elem.type === type;
      };
    }
    /**
     * @param {Function} fn
     * @return {?}
     */
    function createPositionalPseudo(fn) {
      return markFunction(function(argument) {
        return argument = +argument, markFunction(function(seed, matches) {
          var j;
          var matchIndexes = fn([], seed.length, argument);
          var i = matchIndexes.length;
          for (;i--;) {
            if (seed[j = matchIndexes[i]]) {
              /** @type {boolean} */
              seed[j] = !(matches[j] = seed[j]);
            }
          }
        });
      });
    }
    /**
     * @param {Object} context
     * @return {?}
     */
    function testContext(context) {
      return context && ("undefined" != typeof context.getElementsByTagName && context);
    }
    /**
     * @return {undefined}
     */
    function setFilters() {
    }
    /**
     * @param {Array} tokens
     * @return {?}
     */
    function toSelector(tokens) {
      /** @type {number} */
      var i = 0;
      var nTokens = tokens.length;
      /** @type {string} */
      var selector = "";
      for (;nTokens > i;i++) {
        selector += tokens[i].value;
      }
      return selector;
    }
    /**
     * @param {Function} matcher
     * @param {Object} combinator
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    function addCombinator(matcher, combinator, dataAndEvents) {
      var dir = combinator.dir;
      var e = dataAndEvents && "parentNode" === dir;
      /** @type {number} */
      var doneName = done++;
      return combinator.first ? function(elem, context, xml) {
        for (;elem = elem[dir];) {
          if (1 === elem.nodeType || e) {
            return matcher(elem, context, xml);
          }
        }
      } : function(elem, context, xml) {
        var oldCache;
        var outerCache;
        /** @type {Array} */
        var newCache = [dirruns, doneName];
        if (xml) {
          for (;elem = elem[dir];) {
            if ((1 === elem.nodeType || e) && matcher(elem, context, xml)) {
              return true;
            }
          }
        } else {
          for (;elem = elem[dir];) {
            if (1 === elem.nodeType || e) {
              if (outerCache = elem[expando] || (elem[expando] = {}), (oldCache = outerCache[dir]) && (oldCache[0] === dirruns && oldCache[1] === doneName)) {
                return newCache[2] = oldCache[2];
              }
              if (outerCache[dir] = newCache, newCache[2] = matcher(elem, context, xml)) {
                return true;
              }
            }
          }
        }
      };
    }
    /**
     * @param {Object} matchers
     * @return {?}
     */
    function elementMatcher(matchers) {
      return matchers.length > 1 ? function(elem, context, xml) {
        var i = matchers.length;
        for (;i--;) {
          if (!matchers[i](elem, context, xml)) {
            return false;
          }
        }
        return true;
      } : matchers[0];
    }
    /**
     * @param {string} selector
     * @param {Array} contexts
     * @param {?} results
     * @return {?}
     */
    function multipleContexts(selector, contexts, results) {
      /** @type {number} */
      var i = 0;
      var len = contexts.length;
      for (;len > i;i++) {
        Sizzle(selector, contexts[i], results);
      }
      return results;
    }
    /**
     * @param {Array} arr
     * @param {Object} map
     * @param {Object} filter
     * @param {Object} context
     * @param {string} xml
     * @return {?}
     */
    function condense(arr, map, filter, context, xml) {
      var value;
      /** @type {Array} */
      var bucket = [];
      /** @type {number} */
      var i = 0;
      var l = arr.length;
      /** @type {boolean} */
      var e = null != map;
      for (;l > i;i++) {
        if (value = arr[i]) {
          if (!filter || filter(value, context, xml)) {
            bucket.push(value);
            if (e) {
              map.push(i);
            }
          }
        }
      }
      return bucket;
    }
    /**
     * @param {Object} preFilter
     * @param {string} selector
     * @param {boolean} callback
     * @param {Object} postFilter
     * @param {Object} postFinder
     * @param {string} postSelector
     * @return {?}
     */
    function setMatcher(preFilter, selector, callback, postFilter, postFinder, postSelector) {
      return postFilter && (!postFilter[expando] && (postFilter = setMatcher(postFilter))), postFinder && (!postFinder[expando] && (postFinder = setMatcher(postFinder, postSelector))), markFunction(function(seed, pdataOld, fix, xml) {
        var optgroup;
        var i;
        var item;
        /** @type {Array} */
        var preMap = [];
        /** @type {Array} */
        var postMap = [];
        var preexisting = pdataOld.length;
        var elems = seed || multipleContexts(selector || "*", fix.nodeType ? [fix] : fix, []);
        var context = !preFilter || !seed && selector ? elems : condense(elems, preMap, preFilter, fix, xml);
        var cycle = callback ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : pdataOld : context;
        if (callback && callback(context, cycle, fix, xml), postFilter) {
          optgroup = condense(cycle, postMap);
          postFilter(optgroup, [], fix, xml);
          i = optgroup.length;
          for (;i--;) {
            if (item = optgroup[i]) {
              /** @type {boolean} */
              cycle[postMap[i]] = !(context[postMap[i]] = item);
            }
          }
        }
        if (seed) {
          if (postFinder || preFilter) {
            if (postFinder) {
              /** @type {Array} */
              optgroup = [];
              i = cycle.length;
              for (;i--;) {
                if (item = cycle[i]) {
                  optgroup.push(context[i] = item);
                }
              }
              postFinder(null, cycle = [], optgroup, xml);
            }
            i = cycle.length;
            for (;i--;) {
              if (item = cycle[i]) {
                if ((optgroup = postFinder ? getDistance(seed, item) : preMap[i]) > -1) {
                  /** @type {boolean} */
                  seed[optgroup] = !(pdataOld[optgroup] = item);
                }
              }
            }
          }
        } else {
          cycle = condense(cycle === pdataOld ? cycle.splice(preexisting, cycle.length) : cycle);
          if (postFinder) {
            postFinder(null, pdataOld, cycle, xml);
          } else {
            push.apply(pdataOld, cycle);
          }
        }
      });
    }
    /**
     * @param {Object} tokens
     * @return {?}
     */
    function matcherFromTokens(tokens) {
      var target;
      var matcher;
      var j;
      var len = tokens.length;
      var leadingRelative = Expr.relative[tokens[0].type];
      var implicitRelative = leadingRelative || Expr.relative[" "];
      /** @type {number} */
      var i = leadingRelative ? 1 : 0;
      var matchContext = addCombinator(function(value) {
        return value === target;
      }, implicitRelative, true);
      var matchAnyContext = addCombinator(function(walkers) {
        return getDistance(target, walkers) > -1;
      }, implicitRelative, true);
      /** @type {Array} */
      var matchers = [function(elem, context, xml) {
        var e = !leadingRelative && (xml || context !== outermostContext) || ((target = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
        return target = null, e;
      }];
      for (;len > i;i++) {
        if (matcher = Expr.relative[tokens[i].type]) {
          /** @type {Array} */
          matchers = [addCombinator(elementMatcher(matchers), matcher)];
        } else {
          if (matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches), matcher[expando]) {
            /** @type {number} */
            j = ++i;
            for (;len > j && !Expr.relative[tokens[j].type];j++) {
            }
            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({
              value : " " === tokens[i - 2].type ? "*" : ""
            })).replace(rtrim, "$1"), matcher, j > i && matcherFromTokens(tokens.slice(i, j)), len > j && matcherFromTokens(tokens = tokens.slice(j)), len > j && toSelector(tokens));
          }
          matchers.push(matcher);
        }
      }
      return elementMatcher(matchers);
    }
    /**
     * @param {Array} elementMatchers
     * @param {Array} setMatchers
     * @return {?}
     */
    function matcherFromGroupMatchers(elementMatchers, setMatchers) {
      /** @type {boolean} */
      var bySet = setMatchers.length > 0;
      /** @type {boolean} */
      var byElement = elementMatchers.length > 0;
      /**
       * @param {HTMLElement} seed
       * @param {string} context
       * @param {?} xml
       * @param {Object} results
       * @param {Element} child
       * @return {?}
       */
      var superMatcher = function(seed, context, xml, results, child) {
        var value;
        var j;
        var matcher;
        /** @type {number} */
        var matchedCount = 0;
        /** @type {string} */
        var i = "0";
        var bucket = seed && [];
        /** @type {Array} */
        var setMatched = [];
        var contextBackup = outermostContext;
        var self = seed || byElement && Expr.find.TAG("*", child);
        var dirrunsUnique = dirruns += null == contextBackup ? 1 : Math.random() || 0.1;
        var len = self.length;
        if (child) {
          outermostContext = context !== doc && context;
        }
        for (;i !== len && null != (value = self[i]);i++) {
          if (byElement && value) {
            /** @type {number} */
            j = 0;
            for (;matcher = elementMatchers[j++];) {
              if (matcher(value, context, xml)) {
                results.push(value);
                break;
              }
            }
            if (child) {
              dirruns = dirrunsUnique;
            }
          }
          if (bySet) {
            if (value = !matcher && value) {
              matchedCount--;
            }
            if (seed) {
              bucket.push(value);
            }
          }
        }
        if (matchedCount += i, bySet && i !== matchedCount) {
          /** @type {number} */
          j = 0;
          for (;matcher = setMatchers[j++];) {
            matcher(bucket, setMatched, context, xml);
          }
          if (seed) {
            if (matchedCount > 0) {
              for (;i--;) {
                if (!bucket[i]) {
                  if (!setMatched[i]) {
                    setMatched[i] = pop.call(results);
                  }
                }
              }
            }
            setMatched = condense(setMatched);
          }
          push.apply(results, setMatched);
          if (child) {
            if (!seed) {
              if (setMatched.length > 0) {
                if (matchedCount + setMatchers.length > 1) {
                  Sizzle.uniqueSort(results);
                }
              }
            }
          }
        }
        return child && (dirruns = dirrunsUnique, outermostContext = contextBackup), bucket;
      };
      return bySet ? markFunction(superMatcher) : superMatcher;
    }
    var i;
    var support;
    var Expr;
    var getText;
    var objectToString;
    var tokenize;
    var compile;
    var select;
    var outermostContext;
    var sortInput;
    var stability;
    var setDocument;
    var doc;
    var docElem;
    var documentIsHTML;
    var rbuggyQSA;
    var rbuggyMatches;
    var matches;
    var contains;
    /** @type {string} */
    var expando = "sizzle" + 1 * new Date;
    var preferredDoc = win.document;
    /** @type {number} */
    var dirruns = 0;
    /** @type {number} */
    var done = 0;
    var classCache = createCache();
    var tokenCache = createCache();
    var compilerCache = createCache();
    /**
     * @param {?} type
     * @param {?} code
     * @return {?}
     */
    var a = function(type, code) {
      return type === code && (stability = true), 0;
    };
    /** @type {number} */
    var MAX_NEGATIVE = 1 << 31;
    /** @type {function (this:Object, *): boolean} */
    var hasOwn = {}.hasOwnProperty;
    /** @type {Array} */
    var arr = [];
    /** @type {function (this:(Array.<T>|{length: number})): T} */
    var pop = arr.pop;
    /** @type {function (this:(Array.<T>|{length: number}), ...[T]): number} */
    var __method = arr.push;
    /** @type {function (this:(Array.<T>|{length: number}), ...[T]): number} */
    var push = arr.push;
    /** @type {function (this:(Array.<T>|string|{length: number}), *=, *=): Array.<T>} */
    var slice = arr.slice;
    /**
     * @param {Array} a
     * @param {Object} obj
     * @return {?}
     */
    var getDistance = function(a, obj) {
      /** @type {number} */
      var i = 0;
      var l = a.length;
      for (;l > i;i++) {
        if (a[i] === obj) {
          return i;
        }
      }
      return-1;
    };
    /** @type {string} */
    var booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped";
    /** @type {string} */
    var whitespace = "[\\x20\\t\\r\\n\\f]";
    /** @type {string} */
    var ele = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+";
    /** @type {string} */
    var attributes = "\\[" + whitespace + "*(" + ele + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + ele + "))|)" + whitespace + "*\\]";
    /** @type {string} */
    var pseudos = ":(" + ele + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|.*)\\)|)";
    /** @type {RegExp} */
    var rclass = new RegExp(whitespace + "+", "g");
    /** @type {RegExp} */
    var rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g");
    /** @type {RegExp} */
    var rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*");
    /** @type {RegExp} */
    var rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*");
    /** @type {RegExp} */
    var rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g");
    /** @type {RegExp} */
    var rpseudo = new RegExp(pseudos);
    /** @type {RegExp} */
    var ridentifier = new RegExp("^" + ele + "$");
    var matchExpr = {
      ID : new RegExp("^#(" + ele + ")"),
      CLASS : new RegExp("^\\.(" + ele + ")"),
      TAG : new RegExp("^(" + ele + "|[*])"),
      ATTR : new RegExp("^" + attributes),
      PSEUDO : new RegExp("^" + pseudos),
      CHILD : new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
      bool : new RegExp("^(?:" + booleans + ")$", "i"),
      needsContext : new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
    };
    /** @type {RegExp} */
    var rinputs = /^(?:input|select|textarea|button)$/i;
    /** @type {RegExp} */
    var rchecked = /^h\d$/i;
    /** @type {RegExp} */
    var rnative = /^[^{]+\{\s*\[native \w/;
    /** @type {RegExp} */
    var rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/;
    /** @type {RegExp} */
    var namespace = /[+~]/;
    /** @type {RegExp} */
    var r20 = /'|\\/g;
    /** @type {RegExp} */
    var runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig");
    /**
     * @param {?} _
     * @param {(number|string)} escaped
     * @param {boolean} escapedWhitespace
     * @return {?}
     */
    var funescape = function(_, escaped, escapedWhitespace) {
      /** @type {number} */
      var high = "0x" + escaped - 65536;
      return high !== high || escapedWhitespace ? escaped : 0 > high ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, 1023 & high | 56320);
    };
    /**
     * @return {undefined}
     */
    var pdataOld = function() {
      setDocument();
    };
    try {
      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
      arr[preferredDoc.childNodes.length].nodeType;
    } catch (xa) {
      push = {
        /** @type {function (?, ?): undefined} */
        apply : arr.length ? function(object, args) {
          __method.apply(object, slice.call(args));
        } : function(object, var_args) {
          var length = object.length;
          /** @type {number} */
          var i = 0;
          for (;object[length++] = var_args[i++];) {
          }
          /** @type {number} */
          object.length = length - 1;
        }
      };
    }
    support = Sizzle.support = {};
    /** @type {function (?): ?} */
    objectToString = Sizzle.isXML = function(elem) {
      var node = elem && (elem.ownerDocument || elem).documentElement;
      return node ? "HTML" !== node.nodeName : false;
    };
    /** @type {function (Node): ?} */
    setDocument = Sizzle.setDocument = function(node) {
      var n;
      var parent;
      var d = node ? node.ownerDocument || node : preferredDoc;
      return d !== doc && (9 === d.nodeType && d.documentElement) ? (doc = d, docElem = d.documentElement, parent = d.defaultView, parent && (parent !== parent.top && (parent.addEventListener ? parent.addEventListener("unload", pdataOld, false) : parent.attachEvent && parent.attachEvent("onunload", pdataOld))), documentIsHTML = !objectToString(d), support.attributes = assert(function(div) {
        return div.className = "i", !div.getAttribute("className");
      }), support.getElementsByTagName = assert(function(div) {
        return div.appendChild(d.createComment("")), !div.getElementsByTagName("*").length;
      }), support.getElementsByClassName = rnative.test(d.getElementsByClassName), support.getById = assert(function(div) {
        return docElem.appendChild(div).id = expando, !d.getElementsByName || !d.getElementsByName(expando).length;
      }), support.getById ? (Expr.find.ID = function(id, context) {
        if ("undefined" != typeof context.getElementById && documentIsHTML) {
          var m = context.getElementById(id);
          return m && m.parentNode ? [m] : [];
        }
      }, Expr.filter.ID = function(id) {
        var attrId = id.replace(runescape, funescape);
        return function(elem) {
          return elem.getAttribute("id") === attrId;
        };
      }) : (delete Expr.find.ID, Expr.filter.ID = function(id) {
        var attrId = id.replace(runescape, funescape);
        return function(elem) {
          var node = "undefined" != typeof elem.getAttributeNode && elem.getAttributeNode("id");
          return node && node.value === attrId;
        };
      }), Expr.find.TAG = support.getElementsByTagName ? function(optgroup, doc) {
        return "undefined" != typeof doc.getElementsByTagName ? doc.getElementsByTagName(optgroup) : support.qsa ? doc.querySelectorAll(optgroup) : void 0;
      } : function(tag, root) {
        var value;
        /** @type {Array} */
        var bucket = [];
        /** @type {number} */
        var index = 0;
        var results = root.getElementsByTagName(tag);
        if ("*" === tag) {
          for (;value = results[index++];) {
            if (1 === value.nodeType) {
              bucket.push(value);
            }
          }
          return bucket;
        }
        return results;
      }, Expr.find.CLASS = support.getElementsByClassName && function(m, c) {
        return documentIsHTML ? c.getElementsByClassName(m) : void 0;
      }, rbuggyMatches = [], rbuggyQSA = [], (support.qsa = rnative.test(d.querySelectorAll)) && (assert(function(div) {
        /** @type {string} */
        docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a><select id='" + expando + "-\f]' msallowcapture=''><option selected=''></option></select>";
        if (div.querySelectorAll("[msallowcapture^='']").length) {
          rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
        }
        if (!div.querySelectorAll("[selected]").length) {
          rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
        }
        if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
          rbuggyQSA.push("~=");
        }
        if (!div.querySelectorAll(":checked").length) {
          rbuggyQSA.push(":checked");
        }
        if (!div.querySelectorAll("a#" + expando + "+*").length) {
          rbuggyQSA.push(".#.+[+~]");
        }
      }), assert(function(div) {
        var input = d.createElement("input");
        input.setAttribute("type", "hidden");
        div.appendChild(input).setAttribute("name", "D");
        if (div.querySelectorAll("[name=d]").length) {
          rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
        }
        if (!div.querySelectorAll(":enabled").length) {
          rbuggyQSA.push(":enabled", ":disabled");
        }
        div.querySelectorAll("*,:x");
        rbuggyQSA.push(",.*:");
      })), (support.matchesSelector = rnative.test(matches = docElem.matches || (docElem.webkitMatchesSelector || (docElem.mozMatchesSelector || (docElem.oMatchesSelector || docElem.msMatchesSelector))))) && assert(function(div) {
        support.disconnectedMatch = matches.call(div, "div");
        matches.call(div, "[s!='']:x");
        rbuggyMatches.push("!=", pseudos);
      }), rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|")), rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|")), n = rnative.test(docElem.compareDocumentPosition), contains = n || rnative.test(docElem.contains) ? function(a, b) {
        var adown = 9 === a.nodeType ? a.documentElement : a;
        var bup = b && b.parentNode;
        return a === bup || !(!bup || (1 !== bup.nodeType || !(adown.contains ? adown.contains(bup) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(bup))));
      } : function(a, b) {
        if (b) {
          for (;b = b.parentNode;) {
            if (b === a) {
              return true;
            }
          }
        }
        return false;
      }, a = n ? function(a, b) {
        if (a === b) {
          return stability = true, 0;
        }
        /** @type {number} */
        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
        return compare ? compare : (compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & compare || !support.sortDetached && b.compareDocumentPosition(a) === compare ? a === d || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ? -1 : b === d || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ? 1 : sortInput ? getDistance(sortInput, a) - getDistance(sortInput, b) : 0 : 4 & compare ? -1 : 1);
      } : function(a, b) {
        if (a === b) {
          return stability = true, 0;
        }
        var cur;
        /** @type {number} */
        var i = 0;
        var aup = a.parentNode;
        var bup = b.parentNode;
        /** @type {Array} */
        var ap = [a];
        /** @type {Array} */
        var bp = [b];
        if (!aup || !bup) {
          return a === d ? -1 : b === d ? 1 : aup ? -1 : bup ? 1 : sortInput ? getDistance(sortInput, a) - getDistance(sortInput, b) : 0;
        }
        if (aup === bup) {
          return siblingCheck(a, b);
        }
        /** @type {string} */
        cur = a;
        for (;cur = cur.parentNode;) {
          ap.unshift(cur);
        }
        /** @type {string} */
        cur = b;
        for (;cur = cur.parentNode;) {
          bp.unshift(cur);
        }
        for (;ap[i] === bp[i];) {
          i++;
        }
        return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
      }, d) : doc;
    };
    /**
     * @param {string} expr
     * @param {Array} elements
     * @return {?}
     */
    Sizzle.matches = function(expr, elements) {
      return Sizzle(expr, null, null, elements);
    };
    /**
     * @param {HTMLElement} elem
     * @param {string} expr
     * @return {?}
     */
    Sizzle.matchesSelector = function(elem, expr) {
      if ((elem.ownerDocument || elem) !== doc && setDocument(elem), expr = expr.replace(rattributeQuotes, "='$1']"), !(!support.matchesSelector || (!documentIsHTML || (rbuggyMatches && rbuggyMatches.test(expr) || rbuggyQSA && rbuggyQSA.test(expr))))) {
        try {
          var ret = matches.call(elem, expr);
          if (ret || (support.disconnectedMatch || elem.document && 11 !== elem.document.nodeType)) {
            return ret;
          }
        } catch (e) {
        }
      }
      return Sizzle(expr, doc, null, [elem]).length > 0;
    };
    /**
     * @param {Node} context
     * @param {Object} b
     * @return {?}
     */
    Sizzle.contains = function(context, b) {
      return(context.ownerDocument || context) !== doc && setDocument(context), contains(context, b);
    };
    /**
     * @param {Node} elem
     * @param {string} optgroup
     * @return {?}
     */
    Sizzle.attr = function(elem, optgroup) {
      if ((elem.ownerDocument || elem) !== doc) {
        setDocument(elem);
      }
      var fn = Expr.attrHandle[optgroup.toLowerCase()];
      var val = fn && hasOwn.call(Expr.attrHandle, optgroup.toLowerCase()) ? fn(elem, optgroup, !documentIsHTML) : void 0;
      return void 0 !== val ? val : support.attributes || !documentIsHTML ? elem.getAttribute(optgroup) : (val = elem.getAttributeNode(optgroup)) && val.specified ? val.value : null;
    };
    /**
     * @param {string} msg
     * @return {?}
     */
    Sizzle.error = function(msg) {
      throw new Error("Syntax error, unrecognized expression: " + msg);
    };
    /**
     * @param {Array} results
     * @return {?}
     */
    Sizzle.uniqueSort = function(results) {
      var elem;
      /** @type {Array} */
      var duplicates = [];
      /** @type {number} */
      var j = 0;
      /** @type {number} */
      var i = 0;
      if (stability = !support.detectDuplicates, sortInput = !support.sortStable && results.slice(0), results.sort(a), stability) {
        for (;elem = results[i++];) {
          if (elem === results[i]) {
            /** @type {number} */
            j = duplicates.push(i);
          }
        }
        for (;j--;) {
          results.splice(duplicates[j], 1);
        }
      }
      return sortInput = null, results;
    };
    /** @type {function (string): ?} */
    getText = Sizzle.getText = function(name) {
      var cur;
      /** @type {string} */
      var ret = "";
      /** @type {number} */
      var d = 0;
      var type = name.nodeType;
      if (type) {
        if (1 === type || (9 === type || 11 === type)) {
          if ("string" == typeof name.textContent) {
            return name.textContent;
          }
          name = name.firstChild;
          for (;name;name = name.nextSibling) {
            ret += getText(name);
          }
        } else {
          if (3 === type || 4 === type) {
            return name.nodeValue;
          }
        }
      } else {
        for (;cur = name[d++];) {
          ret += getText(cur);
        }
      }
      return ret;
    };
    Expr = Sizzle.selectors = {
      cacheLength : 50,
      /** @type {function (Object): ?} */
      createPseudo : markFunction,
      match : matchExpr,
      attrHandle : {},
      find : {},
      relative : {
        ">" : {
          dir : "parentNode",
          first : true
        },
        " " : {
          dir : "parentNode"
        },
        "+" : {
          dir : "previousSibling",
          first : true
        },
        "~" : {
          dir : "previousSibling"
        }
      },
      preFilter : {
        /**
         * @param {Array} match
         * @return {?}
         */
        ATTR : function(match) {
          return match[1] = match[1].replace(runescape, funescape), match[3] = (match[3] || (match[4] || (match[5] || ""))).replace(runescape, funescape), "~=" === match[2] && (match[3] = " " + match[3] + " "), match.slice(0, 4);
        },
        /**
         * @param {Array} match
         * @return {?}
         */
        CHILD : function(match) {
          return match[1] = match[1].toLowerCase(), "nth" === match[1].slice(0, 3) ? (match[3] || Sizzle.error(match[0]), match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * ("even" === match[3] || "odd" === match[3])), match[5] = +(match[7] + match[8] || "odd" === match[3])) : match[3] && Sizzle.error(match[0]), match;
        },
        /**
         * @param {Array} match
         * @return {?}
         */
        PSEUDO : function(match) {
          var excess;
          var unquoted = !match[6] && match[2];
          return matchExpr.CHILD.test(match[0]) ? null : (match[3] ? match[2] = match[4] || (match[5] || "") : unquoted && (rpseudo.test(unquoted) && ((excess = tokenize(unquoted, true)) && ((excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length) && (match[0] = match[0].slice(0, excess), match[2] = unquoted.slice(0, excess))))), match.slice(0, 3));
        }
      },
      filter : {
        /**
         * @param {string} nodeNameSelector
         * @return {?}
         */
        TAG : function(nodeNameSelector) {
          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
          return "*" === nodeNameSelector ? function() {
            return true;
          } : function(elem) {
            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
          };
        },
        /**
         * @param {string} className
         * @return {?}
         */
        CLASS : function(className) {
          var pattern = classCache[className + " "];
          return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
            return pattern.test("string" == typeof elem.className && elem.className || ("undefined" != typeof elem.getAttribute && elem.getAttribute("class") || ""));
          });
        },
        /**
         * @param {string} name
         * @param {string} not
         * @param {string} b
         * @return {?}
         */
        ATTR : function(name, not, b) {
          return function(elem) {
            var a = Sizzle.attr(elem, name);
            return null == a ? "!=" === not : not ? (a += "", "=" === not ? a === b : "!=" === not ? a !== b : "^=" === not ? b && 0 === a.indexOf(b) : "*=" === not ? b && a.indexOf(b) > -1 : "$=" === not ? b && a.slice(-b.length) === b : "~=" === not ? (" " + a.replace(rclass, " ") + " ").indexOf(b) > -1 : "|=" === not ? a === b || a.slice(0, b.length + 1) === b + "-" : false) : true;
          };
        },
        /**
         * @param {string} type
         * @param {string} argument
         * @param {?} dataAndEvents
         * @param {number} first
         * @param {number} last
         * @return {?}
         */
        CHILD : function(type, argument, dataAndEvents, first, last) {
          /** @type {boolean} */
          var simple = "nth" !== type.slice(0, 3);
          /** @type {boolean} */
          var forward = "last" !== type.slice(-4);
          /** @type {boolean} */
          var ofType = "of-type" === argument;
          return 1 === first && 0 === last ? function(contestant) {
            return!!contestant.parentNode;
          } : function(elem, deepDataAndEvents, dataAndEvents) {
            var cache;
            var outerCache;
            var node;
            var diff;
            var nodeIndex;
            var eventPath;
            /** @type {string} */
            var which = simple !== forward ? "nextSibling" : "previousSibling";
            var parent = elem.parentNode;
            var name = ofType && elem.nodeName.toLowerCase();
            /** @type {boolean} */
            var useCache = !dataAndEvents && !ofType;
            if (parent) {
              if (simple) {
                for (;which;) {
                  /** @type {Object} */
                  node = elem;
                  for (;node = node[which];) {
                    if (ofType ? node.nodeName.toLowerCase() === name : 1 === node.nodeType) {
                      return false;
                    }
                  }
                  /** @type {(boolean|string)} */
                  eventPath = which = "only" === type && (!eventPath && "nextSibling");
                }
                return true;
              }
              if (eventPath = [forward ? parent.firstChild : parent.lastChild], forward && useCache) {
                outerCache = parent[expando] || (parent[expando] = {});
                cache = outerCache[type] || [];
                nodeIndex = cache[0] === dirruns && cache[1];
                diff = cache[0] === dirruns && cache[2];
                node = nodeIndex && parent.childNodes[nodeIndex];
                for (;node = ++nodeIndex && (node && node[which]) || ((diff = nodeIndex = 0) || eventPath.pop());) {
                  if (1 === node.nodeType && (++diff && node === elem)) {
                    /** @type {Array} */
                    outerCache[type] = [dirruns, nodeIndex, diff];
                    break;
                  }
                }
              } else {
                if (useCache && ((cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns)) {
                  diff = cache[1];
                } else {
                  for (;(node = ++nodeIndex && (node && node[which]) || ((diff = nodeIndex = 0) || eventPath.pop())) && ((ofType ? node.nodeName.toLowerCase() !== name : 1 !== node.nodeType) || (!++diff || (useCache && ((node[expando] || (node[expando] = {}))[type] = [dirruns, diff]), node !== elem)));) {
                  }
                }
              }
              return diff -= last, diff === first || diff % first === 0 && diff / first >= 0;
            }
          };
        },
        /**
         * @param {string} pseudo
         * @param {?} context
         * @return {?}
         */
        PSEUDO : function(pseudo, context) {
          var args;
          var fn = Expr.pseudos[pseudo] || (Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo));
          return fn[expando] ? fn(context) : fn.length > 1 ? (args = [pseudo, pseudo, "", context], Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(el, event) {
            var id;
            var ret = fn(el, context);
            var i = ret.length;
            for (;i--;) {
              id = getDistance(el, ret[i]);
              /** @type {boolean} */
              el[id] = !(event[id] = ret[i]);
            }
          }) : function(err) {
            return fn(err, 0, args);
          }) : fn;
        }
      },
      pseudos : {
        not : markFunction(function(selector) {
          /** @type {Array} */
          var elem = [];
          /** @type {Array} */
          var memory = [];
          var matcher = compile(selector.replace(rtrim, "$1"));
          return matcher[expando] ? markFunction(function(seed, qs, dataAndEvents, xml) {
            var val;
            var unmatched = matcher(seed, null, xml, []);
            var i = seed.length;
            for (;i--;) {
              if (val = unmatched[i]) {
                /** @type {boolean} */
                seed[i] = !(qs[i] = val);
              }
            }
          }) : function(value, dataAndEvents, xml) {
            return elem[0] = value, matcher(elem, null, xml, memory), elem[0] = null, !memory.pop();
          };
        }),
        has : markFunction(function(selector) {
          return function(elem) {
            return Sizzle(selector, elem).length > 0;
          };
        }),
        contains : markFunction(function(klass) {
          return klass = klass.replace(runescape, funescape), function(elem) {
            return(elem.textContent || (elem.innerText || getText(elem))).indexOf(klass) > -1;
          };
        }),
        lang : markFunction(function(lang) {
          return ridentifier.test(lang || "") || Sizzle.error("unsupported lang: " + lang), lang = lang.replace(runescape, funescape).toLowerCase(), function(elem) {
            var elemLang;
            do {
              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                return elemLang = elemLang.toLowerCase(), elemLang === lang || 0 === elemLang.indexOf(lang + "-");
              }
            } while ((elem = elem.parentNode) && 1 === elem.nodeType);
            return false;
          };
        }),
        /**
         * @param {string} name
         * @return {?}
         */
        target : function(name) {
          var models = win.location && win.location.hash;
          return models && models.slice(1) === name.id;
        },
        /**
         * @param {string} name
         * @return {?}
         */
        root : function(name) {
          return name === docElem;
        },
        /**
         * @param {string} name
         * @return {?}
         */
        focus : function(name) {
          return name === doc.activeElement && ((!doc.hasFocus || doc.hasFocus()) && !!(name.type || (name.href || ~name.tabIndex)));
        },
        /**
         * @param {EventTarget} a
         * @return {?}
         */
        enabled : function(a) {
          return a.disabled === false;
        },
        /**
         * @param {Object} event
         * @return {?}
         */
        disabled : function(event) {
          return event.disabled === true;
        },
        /**
         * @param {string} name
         * @return {?}
         */
        checked : function(name) {
          var b = name.nodeName.toLowerCase();
          return "input" === b && !!name.checked || "option" === b && !!name.selected;
        },
        /**
         * @param {Node} elem
         * @return {?}
         */
        selected : function(elem) {
          return elem.parentNode && elem.parentNode.selectedIndex, elem.selected === true;
        },
        /**
         * @param {Object} elem
         * @return {?}
         */
        empty : function(elem) {
          elem = elem.firstChild;
          for (;elem;elem = elem.nextSibling) {
            if (elem.nodeType < 6) {
              return false;
            }
          }
          return true;
        },
        /**
         * @param {Object} elem
         * @return {?}
         */
        parent : function(elem) {
          return!Expr.pseudos.empty(elem);
        },
        /**
         * @param {string} name
         * @return {?}
         */
        header : function(name) {
          return rchecked.test(name.nodeName);
        },
        /**
         * @param {Node} elem
         * @return {?}
         */
        input : function(elem) {
          return rinputs.test(elem.nodeName);
        },
        /**
         * @param {string} name
         * @return {?}
         */
        button : function(name) {
          var b = name.nodeName.toLowerCase();
          return "input" === b && "button" === name.type || "button" === b;
        },
        /**
         * @param {string} name
         * @return {?}
         */
        text : function(name) {
          var evt;
          return "input" === name.nodeName.toLowerCase() && ("text" === name.type && (null == (evt = name.getAttribute("type")) || "text" === evt.toLowerCase()));
        },
        first : createPositionalPseudo(function() {
          return[0];
        }),
        last : createPositionalPseudo(function(dataAndEvents, deepDataAndEvents) {
          return[deepDataAndEvents - 1];
        }),
        eq : createPositionalPseudo(function(dataAndEvents, length, index) {
          return[0 > index ? index + length : index];
        }),
        even : createPositionalPseudo(function(bucket, accumulator) {
          /** @type {number} */
          var value = 0;
          for (;accumulator > value;value += 2) {
            bucket.push(value);
          }
          return bucket;
        }),
        odd : createPositionalPseudo(function(bucket, accumulator) {
          /** @type {number} */
          var value = 1;
          for (;accumulator > value;value += 2) {
            bucket.push(value);
          }
          return bucket;
        }),
        lt : createPositionalPseudo(function(bucket, length, index) {
          var value = 0 > index ? index + length : index;
          for (;--value >= 0;) {
            bucket.push(value);
          }
          return bucket;
        }),
        gt : createPositionalPseudo(function(bucket, length, index) {
          var value = 0 > index ? index + length : index;
          for (;++value < length;) {
            bucket.push(value);
          }
          return bucket;
        })
      }
    };
    Expr.pseudos.nth = Expr.pseudos.eq;
    for (i in{
      radio : true,
      checkbox : true,
      file : true,
      password : true,
      image : true
    }) {
      Expr.pseudos[i] = createInputPseudo(i);
    }
    for (i in{
      submit : true,
      reset : true
    }) {
      Expr.pseudos[i] = createButtonPseudo(i);
    }
    return setFilters.prototype = Expr.filters = Expr.pseudos, Expr.setFilters = new setFilters, tokenize = Sizzle.tokenize = function(selector, parseOnly) {
      var matched;
      var match;
      var tokens;
      var type;
      var soFar;
      var groups;
      var preFilters;
      var cached = tokenCache[selector + " "];
      if (cached) {
        return parseOnly ? 0 : cached.slice(0);
      }
      /** @type {string} */
      soFar = selector;
      /** @type {Array} */
      groups = [];
      preFilters = Expr.preFilter;
      for (;soFar;) {
        if (!matched || (match = rcomma.exec(soFar))) {
          if (match) {
            soFar = soFar.slice(match[0].length) || soFar;
          }
          groups.push(tokens = []);
        }
        /** @type {boolean} */
        matched = false;
        if (match = rcombinators.exec(soFar)) {
          /** @type {string} */
          matched = match.shift();
          tokens.push({
            value : matched,
            type : match[0].replace(rtrim, " ")
          });
          soFar = soFar.slice(matched.length);
        }
        for (type in Expr.filter) {
          if (!!(match = matchExpr[type].exec(soFar))) {
            if (!(preFilters[type] && !(match = preFilters[type](match)))) {
              matched = match.shift();
              tokens.push({
                value : matched,
                type : type,
                matches : match
              });
              soFar = soFar.slice(matched.length);
            }
          }
        }
        if (!matched) {
          break;
        }
      }
      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
    }, compile = Sizzle.compile = function(program, args) {
      var i;
      /** @type {Array} */
      var setMatchers = [];
      /** @type {Array} */
      var elementMatchers = [];
      var cached = compilerCache[program + " "];
      if (!cached) {
        if (!args) {
          args = tokenize(program);
        }
        i = args.length;
        for (;i--;) {
          cached = matcherFromTokens(args[i]);
          if (cached[expando]) {
            setMatchers.push(cached);
          } else {
            elementMatchers.push(cached);
          }
        }
        cached = compilerCache(program, matcherFromGroupMatchers(elementMatchers, setMatchers));
        /** @type {string} */
        cached.selector = program;
      }
      return cached;
    }, select = Sizzle.select = function(name, pdataOld, results, optgroup) {
      var i;
      var tokens;
      var token;
      var type;
      var find;
      /** @type {(Function|boolean)} */
      var compiled = "function" == typeof name && name;
      var match = !optgroup && tokenize(name = compiled.selector || name);
      if (results = results || [], 1 === match.length) {
        if (tokens = match[0] = match[0].slice(0), tokens.length > 2 && ("ID" === (token = tokens[0]).type && (support.getById && (9 === pdataOld.nodeType && (documentIsHTML && Expr.relative[tokens[1].type]))))) {
          if (pdataOld = (Expr.find.ID(token.matches[0].replace(runescape, funescape), pdataOld) || [])[0], !pdataOld) {
            return results;
          }
          if (compiled) {
            pdataOld = pdataOld.parentNode;
          }
          name = name.slice(tokens.shift().value.length);
        }
        i = matchExpr.needsContext.test(name) ? 0 : tokens.length;
        for (;i-- && (token = tokens[i], !Expr.relative[type = token.type]);) {
          if ((find = Expr.find[type]) && (optgroup = find(token.matches[0].replace(runescape, funescape), namespace.test(tokens[0].type) && testContext(pdataOld.parentNode) || pdataOld))) {
            if (tokens.splice(i, 1), name = optgroup.length && toSelector(tokens), !name) {
              return push.apply(results, optgroup), results;
            }
            break;
          }
        }
      }
      return(compiled || compile(name, match))(optgroup, pdataOld, !documentIsHTML, results, namespace.test(name) && testContext(pdataOld.parentNode) || pdataOld), results;
    }, support.sortStable = expando.split("").sort(a).join("") === expando, support.detectDuplicates = !!stability, setDocument(), support.sortDetached = assert(function(div1) {
      return 1 & div1.compareDocumentPosition(doc.createElement("div"));
    }), assert(function(div) {
      return div.innerHTML = "<a href='#'></a>", "#" === div.firstChild.getAttribute("href");
    }) || addHandle("type|href|height|width", function(elem, optgroup, dataAndEvents) {
      return dataAndEvents ? void 0 : elem.getAttribute(optgroup, "type" === optgroup.toLowerCase() ? 1 : 2);
    }), support.attributes && assert(function(div) {
      return div.innerHTML = "<input/>", div.firstChild.setAttribute("value", ""), "" === div.firstChild.getAttribute("value");
    }) || addHandle("value", function(target, dataAndEvents, defaultValue) {
      return defaultValue || "input" !== target.nodeName.toLowerCase() ? void 0 : target.defaultValue;
    }), assert(function(div) {
      return null == div.getAttribute("disabled");
    }) || addHandle(booleans, function(elem, name, dataAndEvents) {
      var val;
      return dataAndEvents ? void 0 : elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
    }), Sizzle;
  }(win);
  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors;
  jQuery.expr[":"] = jQuery.expr.pseudos;
  jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;
  var rneedsContext = jQuery.expr.match.needsContext;
  /** @type {RegExp} */
  var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
  /** @type {RegExp} */
  var rhtml = /^.[^:#\[\.,]*$/;
  /**
   * @param {string} name
   * @param {Object} value
   * @param {boolean} type
   * @return {?}
   */
  jQuery.filter = function(name, value, type) {
    var elem = value[0];
    return type && (name = ":not(" + name + ")"), 1 === value.length && 1 === elem.nodeType ? jQuery.find.matchesSelector(elem, name) ? [elem] : [] : jQuery.find.matches(name, jQuery.grep(value, function(dest) {
      return 1 === dest.nodeType;
    }));
  };
  jQuery.fn.extend({
    /**
     * @param {string} optgroup
     * @return {?}
     */
    find : function(optgroup) {
      var i;
      var len = this.length;
      /** @type {Array} */
      var ret = [];
      var self = this;
      if ("string" != typeof optgroup) {
        return this.pushStack(jQuery(optgroup).filter(function() {
          /** @type {number} */
          i = 0;
          for (;len > i;i++) {
            if (jQuery.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }
      /** @type {number} */
      i = 0;
      for (;len > i;i++) {
        jQuery.find(optgroup, self[i], ret);
      }
      return ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret), ret.selector = this.selector ? this.selector + " " + optgroup : optgroup, ret;
    },
    /**
     * @param {string} name
     * @return {?}
     */
    filter : function(name) {
      return this.pushStack(winnow(this, name || [], false));
    },
    /**
     * @param {Array} selector
     * @return {?}
     */
    not : function(selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    /**
     * @param {string} optgroup
     * @return {?}
     */
    is : function(optgroup) {
      return!!winnow(this, "string" == typeof optgroup && rneedsContext.test(optgroup) ? jQuery(optgroup) : optgroup || [], false).length;
    }
  });
  var rootjQuery;
  /** @type {RegExp} */
  var rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
  /** @type {function (string, string): ?} */
  var init = jQuery.fn.init = function(selector, optgroup) {
    var match;
    var length;
    if (!selector) {
      return this;
    }
    if ("string" == typeof selector) {
      if (match = "<" === selector[0] && (">" === selector[selector.length - 1] && selector.length >= 3) ? [null, selector, null] : rquickExpr.exec(selector), !match || !match[1] && optgroup) {
        return!optgroup || optgroup.jquery ? (optgroup || rootjQuery).find(selector) : this.constructor(optgroup).find(selector);
      }
      if (match[1]) {
        if (optgroup = optgroup instanceof jQuery ? optgroup[0] : optgroup, jQuery.merge(this, jQuery.parseHTML(match[1], optgroup && optgroup.nodeType ? optgroup.ownerDocument || optgroup : rvar, true)), rsingleTag.test(match[1]) && jQuery.isPlainObject(optgroup)) {
          for (match in optgroup) {
            if (jQuery.isFunction(this[match])) {
              this[match](optgroup[match]);
            } else {
              this.attr(match, optgroup[match]);
            }
          }
        }
        return this;
      }
      return length = rvar.getElementById(match[2]), length && (this.length = 1, this[0] = length), this.context = rvar, this.selector = selector, this;
    }
    return selector.nodeType ? (this.context = this[0] = selector, this.length = 1, this) : jQuery.isFunction(selector) ? void 0 !== rootjQuery.ready ? rootjQuery.ready(selector) : selector(jQuery) : (void 0 !== selector.selector && (this.selector = selector.selector, this.context = selector.context), jQuery.makeArray(selector, this));
  };
  init.prototype = jQuery.fn;
  rootjQuery = jQuery(rvar);
  /** @type {RegExp} */
  var $ = /^(?:parents|prev(?:Until|All))/;
  var _ = {
    children : true,
    contents : true,
    next : true,
    prev : true
  };
  jQuery.extend({
    /**
     * @param {string} optgroup
     * @param {string} dir
     * @param {string} until
     * @return {?}
     */
    dir : function(optgroup, dir, until) {
      /** @type {Array} */
      var matched = [];
      /** @type {boolean} */
      var truncate = void 0 !== until;
      for (;(optgroup = optgroup[dir]) && 9 !== optgroup.nodeType;) {
        if (1 === optgroup.nodeType) {
          if (truncate && jQuery(optgroup).is(until)) {
            break;
          }
          matched.push(optgroup);
        }
      }
      return matched;
    },
    /**
     * @param {Object} n
     * @param {Object} elem
     * @return {?}
     */
    sibling : function(n, elem) {
      /** @type {Array} */
      var r = [];
      for (;n;n = n.nextSibling) {
        if (1 === n.nodeType) {
          if (n !== elem) {
            r.push(n);
          }
        }
      }
      return r;
    }
  });
  jQuery.fn.extend({
    /**
     * @param {string} optgroup
     * @return {?}
     */
    has : function(optgroup) {
      var targets = jQuery(optgroup, this);
      var l = targets.length;
      return this.filter(function() {
        /** @type {number} */
        var i = 0;
        for (;l > i;i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },
    /**
     * @param {string} rvar
     * @param {Node} context
     * @return {?}
     */
    closest : function(rvar, context) {
      var optgroup;
      /** @type {number} */
      var i = 0;
      var l = this.length;
      /** @type {Array} */
      var matched = [];
      var options = rneedsContext.test(rvar) || "string" != typeof rvar ? jQuery(rvar, context || this.context) : 0;
      for (;l > i;i++) {
        optgroup = this[i];
        for (;optgroup && optgroup !== context;optgroup = optgroup.parentNode) {
          if (optgroup.nodeType < 11 && (options ? options.index(optgroup) > -1 : 1 === optgroup.nodeType && jQuery.find.matchesSelector(optgroup, rvar))) {
            matched.push(optgroup);
            break;
          }
        }
      }
      return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
    },
    /**
     * @param {string} name
     * @return {?}
     */
    index : function(name) {
      return name ? "string" == typeof name ? core_indexOf.call(jQuery(name), this[0]) : core_indexOf.call(this, name.jquery ? name[0] : name) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
    },
    /**
     * @param {string} optgroup
     * @param {Object} pdataOld
     * @return {?}
     */
    add : function(optgroup, pdataOld) {
      return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(optgroup, pdataOld))));
    },
    /**
     * @param {string} optgroup
     * @return {?}
     */
    addBack : function(optgroup) {
      return this.add(null == optgroup ? this.prevObject : this.prevObject.filter(optgroup));
    }
  });
  jQuery.each({
    /**
     * @param {Node} elem
     * @return {?}
     */
    parent : function(elem) {
      var parent = elem.parentNode;
      return parent && 11 !== parent.nodeType ? parent : null;
    },
    /**
     * @param {string} elem
     * @return {?}
     */
    parents : function(elem) {
      return jQuery.dir(elem, "parentNode");
    },
    /**
     * @param {string} elem
     * @param {?} i
     * @param {string} until
     * @return {?}
     */
    parentsUntil : function(elem, i, until) {
      return jQuery.dir(elem, "parentNode", until);
    },
    /**
     * @param {Object} elem
     * @return {?}
     */
    next : function(elem) {
      return sibling(elem, "nextSibling");
    },
    /**
     * @param {Object} elem
     * @return {?}
     */
    prev : function(elem) {
      return sibling(elem, "previousSibling");
    },
    /**
     * @param {string} elem
     * @return {?}
     */
    nextAll : function(elem) {
      return jQuery.dir(elem, "nextSibling");
    },
    /**
     * @param {string} elem
     * @return {?}
     */
    prevAll : function(elem) {
      return jQuery.dir(elem, "previousSibling");
    },
    /**
     * @param {string} elem
     * @param {?} i
     * @param {string} until
     * @return {?}
     */
    nextUntil : function(elem, i, until) {
      return jQuery.dir(elem, "nextSibling", until);
    },
    /**
     * @param {string} elem
     * @param {?} i
     * @param {string} until
     * @return {?}
     */
    prevUntil : function(elem, i, until) {
      return jQuery.dir(elem, "previousSibling", until);
    },
    /**
     * @param {HTMLElement} elem
     * @return {?}
     */
    siblings : function(elem) {
      return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
    },
    /**
     * @param {Element} elem
     * @return {?}
     */
    children : function(elem) {
      return jQuery.sibling(elem.firstChild);
    },
    /**
     * @param {Element} elem
     * @return {?}
     */
    contents : function(elem) {
      return elem.contentDocument || jQuery.merge([], elem.childNodes);
    }
  }, function(name, restoreScript) {
    /**
     * @param {string} until
     * @param {string} optgroup
     * @return {?}
     */
    jQuery.fn[name] = function(until, optgroup) {
      var pdataOld = jQuery.map(this, restoreScript, until);
      return "Until" !== name.slice(-5) && (optgroup = until), optgroup && ("string" == typeof optgroup && (pdataOld = jQuery.filter(optgroup, pdataOld))), this.length > 1 && (_[name] || jQuery.unique(pdataOld), $.test(name) && pdataOld.reverse()), this.pushStack(pdataOld);
    };
  });
  /** @type {RegExp} */
  var vvarText = /\S+/g;
  var optionsCache = {};
  /**
   * @param {Object} options
   * @return {?}
   */
  jQuery.Callbacks = function(options) {
    options = "string" == typeof options ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
    var memory;
    var c;
    var r;
    var firingStart;
    var i;
    var firingIndex;
    /** @type {Array} */
    var list = [];
    /** @type {(Array|boolean)} */
    var stack = !options.once && [];
    /**
     * @param {Array} data
     * @return {undefined}
     */
    var fire = function(data) {
      memory = options.memory && data;
      /** @type {boolean} */
      c = true;
      firingIndex = firingStart || 0;
      /** @type {number} */
      firingStart = 0;
      i = list.length;
      /** @type {boolean} */
      r = true;
      for (;list && i > firingIndex;firingIndex++) {
        if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
          /** @type {boolean} */
          memory = false;
          break;
        }
      }
      /** @type {boolean} */
      r = false;
      if (list) {
        if (stack) {
          if (stack.length) {
            fire(stack.shift());
          }
        } else {
          if (memory) {
            /** @type {Array} */
            list = [];
          } else {
            self.disable();
          }
        }
      }
    };
    var self = {
      /**
       * @return {?}
       */
      add : function() {
        if (list) {
          var start = list.length;
          !function add(args) {
            jQuery.each(args, function(dataAndEvents, optgroup) {
              var type = jQuery.type(optgroup);
              if ("function" === type) {
                if (!(options.unique && self.has(optgroup))) {
                  list.push(optgroup);
                }
              } else {
                if (optgroup) {
                  if (optgroup.length) {
                    if ("string" !== type) {
                      add(optgroup);
                    }
                  }
                }
              }
            });
          }(arguments);
          if (r) {
            i = list.length;
          } else {
            if (memory) {
              firingStart = start;
              fire(memory);
            }
          }
        }
        return this;
      },
      /**
       * @return {?}
       */
      remove : function() {
        return list && jQuery.each(arguments, function(dataAndEvents, arg) {
          var index;
          for (;(index = jQuery.inArray(arg, list, index)) > -1;) {
            list.splice(index, 1);
            if (r) {
              if (i >= index) {
                i--;
              }
              if (firingIndex >= index) {
                firingIndex--;
              }
            }
          }
        }), this;
      },
      /**
       * @param {string} name
       * @return {?}
       */
      has : function(name) {
        return name ? jQuery.inArray(name, list) > -1 : !(!list || !list.length);
      },
      /**
       * @return {?}
       */
      empty : function() {
        return list && (list = [], i = 0), this;
      },
      /**
       * @return {?}
       */
      disable : function() {
        return list = stack = memory = void 0, this;
      },
      /**
       * @return {?}
       */
      disabled : function() {
        return!list;
      },
      /**
       * @return {?}
       */
      lock : function() {
        return stack = void 0, memory || self.disable(), this;
      },
      /**
       * @return {?}
       */
      locked : function() {
        return!stack;
      },
      /**
       * @param {?} context
       * @param {Object} args
       * @return {?}
       */
      fireWith : function(context, args) {
        return!list || (c && !stack || (args = args || [], args = [context, args.slice ? args.slice() : args], r ? stack.push(args) : fire(args))), this;
      },
      /**
       * @return {?}
       */
      fire : function() {
        return self.fireWith(this, arguments), this;
      },
      /**
       * @return {?}
       */
      fired : function() {
        return!!c;
      }
    };
    return self;
  };
  /** @type {function (string, Function, string, string, boolean, string, boolean): ?} */
  var access = jQuery.access = function(elems, fn, optgroup, value, chainable, emptyGet, raw) {
    /** @type {number} */
    var i = 0;
    var length = elems.length;
    /** @type {boolean} */
    var bulk = null == optgroup;
    if ("object" === jQuery.type(optgroup)) {
      /** @type {boolean} */
      chainable = true;
      for (i in optgroup) {
        access(elems, fn, i, optgroup[i], true, emptyGet, raw);
      }
    } else {
      if (void 0 !== value && (chainable = true, jQuery.isFunction(value) || (raw = true), bulk && (raw ? (fn.call(elems, value), fn = null) : (bulk = fn, fn = function(optgroup, name, value) {
        return bulk.call(jQuery(optgroup), value);
      })), fn)) {
        for (;length > i;i++) {
          fn(elems[i], optgroup, raw ? value : value.call(elems[i], i, fn(elems[i], optgroup)));
        }
      }
    }
    return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], optgroup) : emptyGet;
  };
  /**
   * @param {?} name
   * @return {?}
   */
  jQuery.acceptData = function(name) {
    return 1 === name.nodeType || (9 === name.nodeType || !+name.nodeType);
  };
  /** @type {number} */
  Data.uid = 1;
  /** @type {function (?): ?} */
  Data.accepts = jQuery.acceptData;
  Data.prototype = {
    /**
     * @param {string} name
     * @return {?}
     */
    key : function(name) {
      if (!Data.accepts(name)) {
        return 0;
      }
      var descriptor = {};
      var unlock = name[this.expando];
      if (!unlock) {
        /** @type {number} */
        unlock = Data.uid++;
        try {
          descriptor[this.expando] = {
            value : unlock
          };
          Object.defineProperties(name, descriptor);
        } catch (d) {
          /** @type {number} */
          descriptor[this.expando] = unlock;
          jQuery.extend(name, descriptor);
        }
      }
      return this.cache[unlock] || (this.cache[unlock] = {}), unlock;
    },
    /**
     * @param {string} elem
     * @param {string} data
     * @param {boolean} keepData
     * @return {?}
     */
    set : function(elem, data, keepData) {
      var prop;
      var unlock = this.key(elem);
      var cache = this.cache[unlock];
      if ("string" == typeof data) {
        /** @type {boolean} */
        cache[data] = keepData;
      } else {
        if (jQuery.isEmptyObject(cache)) {
          jQuery.extend(this.cache[unlock], data);
        } else {
          for (prop in data) {
            cache[prop] = data[prop];
          }
        }
      }
      return cache;
    },
    /**
     * @param {string} name
     * @param {string} value
     * @return {?}
     */
    get : function(name, value) {
      var cache = this.cache[this.key(name)];
      return void 0 === value ? cache : cache[value];
    },
    /**
     * @param {string} elem
     * @param {string} value
     * @param {boolean} key
     * @return {?}
     */
    access : function(elem, value, key) {
      var ret;
      return void 0 === value || value && ("string" == typeof value && void 0 === key) ? (ret = this.get(elem, value), void 0 !== ret ? ret : this.get(elem, jQuery.camelCase(value))) : (this.set(elem, value, key), void 0 !== key ? key : value);
    },
    /**
     * @param {string} optgroup
     * @param {Object} key
     * @return {undefined}
     */
    remove : function(optgroup, key) {
      var i;
      var name;
      var camel;
      var unlock = this.key(optgroup);
      var cache = this.cache[unlock];
      if (void 0 === key) {
        this.cache[unlock] = {};
      } else {
        if (jQuery.isArray(key)) {
          name = key.concat(key.map(jQuery.camelCase));
        } else {
          camel = jQuery.camelCase(key);
          if (key in cache) {
            /** @type {Array} */
            name = [key, camel];
          } else {
            name = camel;
            name = name in cache ? [name] : name.match(vvarText) || [];
          }
        }
        i = name.length;
        for (;i--;) {
          delete cache[name[i]];
        }
      }
    },
    /**
     * @param {string} owner
     * @return {?}
     */
    hasData : function(owner) {
      return!jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
    },
    /**
     * @param {?} owner
     * @return {undefined}
     */
    discard : function(owner) {
      if (owner[this.expando]) {
        delete this.cache[owner[this.expando]];
      }
    }
  };
  var data_priv = new Data;
  var data_user = new Data;
  /** @type {RegExp} */
  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/;
  /** @type {RegExp} */
  var f = /[A-Z]/g;
  jQuery.extend({
    /**
     * @param {string} elem
     * @return {?}
     */
    hasData : function(elem) {
      return data_user.hasData(elem) || data_priv.hasData(elem);
    },
    /**
     * @param {string} name
     * @param {Object} value
     * @param {boolean} type
     * @return {?}
     */
    data : function(name, value, type) {
      return data_user.access(name, value, type);
    },
    /**
     * @param {string} elem
     * @param {Object} key
     * @return {undefined}
     */
    removeData : function(elem, key) {
      data_user.remove(elem, key);
    },
    /**
     * @param {string} elem
     * @param {Object} name
     * @param {Object} data
     * @return {?}
     */
    _data : function(elem, name, data) {
      return data_priv.access(elem, name, data);
    },
    /**
     * @param {string} elem
     * @param {Object} name
     * @return {undefined}
     */
    _removeData : function(elem, name) {
      data_priv.remove(elem, name);
    }
  });
  jQuery.fn.extend({
    /**
     * @param {string} name
     * @param {Object} value
     * @return {?}
     */
    data : function(name, value) {
      var len;
      var attributeName;
      var data;
      var elem = this[0];
      var attrs = elem && elem.attributes;
      if (void 0 === name) {
        if (this.length && (data = data_user.get(elem), 1 === elem.nodeType && !data_priv.get(elem, "hasDataAttrs"))) {
          len = attrs.length;
          for (;len--;) {
            if (attrs[len]) {
              attributeName = attrs[len].name;
              if (0 === attributeName.indexOf("data-")) {
                attributeName = jQuery.camelCase(attributeName.slice(5));
                dataAttr(elem, attributeName, data[attributeName]);
              }
            }
          }
          data_priv.set(elem, "hasDataAttrs", true);
        }
        return data;
      }
      return "object" == typeof name ? this.each(function() {
        data_user.set(this, name);
      }) : access(this, function(key) {
        var data;
        var camelKey;
        if (elem && void 0 === key) {
          if (data = data_user.get(elem, name), void 0 !== data) {
            return data;
          }
          if (camelKey = jQuery.camelCase(name), data = data_user.get(elem, camelKey), void 0 !== data) {
            return data;
          }
          if (data = dataAttr(elem, camelKey, void 0), void 0 !== data) {
            return data;
          }
        } else {
          camelKey = jQuery.camelCase(name);
          this.each(function() {
            var data = data_user.get(this, camelKey);
            data_user.set(this, camelKey, key);
            if (-1 !== name.indexOf("-")) {
              if (void 0 !== data) {
                data_user.set(this, name, key);
              }
            }
          });
        }
      }, null, value, arguments.length > 1, null, true);
    },
    /**
     * @param {Object} name
     * @return {?}
     */
    removeData : function(name) {
      return this.each(function() {
        data_user.remove(this, name);
      });
    }
  });
  jQuery.extend({
    /**
     * @param {string} elem
     * @param {string} type
     * @param {string} data
     * @return {?}
     */
    queue : function(elem, type, data) {
      var queue;
      return elem ? (type = (type || "fx") + "queue", queue = data_priv.get(elem, type), data && (!queue || jQuery.isArray(data) ? queue = data_priv.access(elem, type, jQuery.makeArray(data)) : queue.push(data)), queue || []) : void 0;
    },
    /**
     * @param {string} elem
     * @param {string} type
     * @return {undefined}
     */
    dequeue : function(elem, type) {
      type = type || "fx";
      var queue = jQuery.queue(elem, type);
      var ln = queue.length;
      var fn = queue.shift();
      var hooks = jQuery._queueHooks(elem, type);
      /**
       * @return {undefined}
       */
      var next = function() {
        jQuery.dequeue(elem, type);
      };
      if ("inprogress" === fn) {
        fn = queue.shift();
        ln--;
      }
      if (fn) {
        if ("fx" === type) {
          queue.unshift("inprogress");
        }
        delete hooks.stop;
        fn.call(elem, next, hooks);
      }
      if (!ln) {
        if (hooks) {
          hooks.empty.fire();
        }
      }
    },
    /**
     * @param {string} elem
     * @param {string} type
     * @return {?}
     */
    _queueHooks : function(elem, type) {
      /** @type {string} */
      var key = type + "queueHooks";
      return data_priv.get(elem, key) || data_priv.access(elem, key, {
        empty : jQuery.Callbacks("once memory").add(function() {
          data_priv.remove(elem, [type + "queue", key]);
        })
      });
    }
  });
  jQuery.fn.extend({
    /**
     * @param {string} type
     * @param {string} data
     * @return {?}
     */
    queue : function(type, data) {
      /** @type {number} */
      var setter = 2;
      return "string" != typeof type && (data = type, type = "fx", setter--), arguments.length < setter ? jQuery.queue(this[0], type) : void 0 === data ? this : this.each(function() {
        var queue = jQuery.queue(this, type, data);
        jQuery._queueHooks(this, type);
        if ("fx" === type) {
          if ("inprogress" !== queue[0]) {
            jQuery.dequeue(this, type);
          }
        }
      });
    },
    /**
     * @param {string} type
     * @return {?}
     */
    dequeue : function(type) {
      return this.each(function() {
        jQuery.dequeue(this, type);
      });
    },
    /**
     * @param {string} type
     * @return {?}
     */
    clearQueue : function(type) {
      return this.queue(type || "fx", []);
    },
    /**
     * @param {string} type
     * @param {string} obj
     * @return {?}
     */
    promise : function(type, obj) {
      var body;
      /** @type {number} */
      var d = 1;
      var defer = jQuery.Deferred();
      var elements = this;
      var i = this.length;
      /**
       * @return {undefined}
       */
      var resolve = function() {
        if (!--d) {
          defer.resolveWith(elements, [elements]);
        }
      };
      if ("string" != typeof type) {
        /** @type {string} */
        obj = type;
        type = void 0;
      }
      type = type || "fx";
      for (;i--;) {
        body = data_priv.get(elements[i], type + "queueHooks");
        if (body) {
          if (body.empty) {
            d++;
            body.empty.add(resolve);
          }
        }
      }
      return resolve(), defer.promise(obj);
    }
  });
  /** @type {string} */
  var core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
  /** @type {Array} */
  var cssExpand = ["Top", "Right", "Bottom", "Left"];
  /**
   * @param {Object} node
   * @param {Function} context
   * @return {?}
   */
  var isHidden = function(node, context) {
    return node = context || node, "none" === jQuery.css(node, "display") || !jQuery.contains(node.ownerDocument, node);
  };
  /** @type {RegExp} */
  var manipulation_rcheckableType = /^(?:checkbox|radio)$/i;
  !function() {
    var fragment = rvar.createDocumentFragment();
    var form = fragment.appendChild(rvar.createElement("div"));
    var input = rvar.createElement("input");
    input.setAttribute("type", "radio");
    input.setAttribute("checked", "checked");
    input.setAttribute("name", "t");
    form.appendChild(input);
    support.checkClone = form.cloneNode(true).cloneNode(true).lastChild.checked;
    /** @type {string} */
    form.innerHTML = "<textarea>x</textarea>";
    /** @type {boolean} */
    support.noCloneChecked = !!form.cloneNode(true).lastChild.defaultValue;
  }();
  /** @type {boolean} */
  support.focusinBubbles = "onfocusin" in win;
  /** @type {RegExp} */
  var rmouseEvent = /^key/;
  /** @type {RegExp} */
  var rkeyEvent = /^(?:mouse|pointer|contextmenu|drag)|click/;
  /** @type {RegExp} */
  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
  /** @type {RegExp} */
  var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
  jQuery.event = {
    global : {},
    /**
     * @param {string} elem
     * @param {Object} types
     * @param {Function} handler
     * @param {Object} e
     * @param {Object} selector
     * @return {undefined}
     */
    add : function(elem, types, handler, e, selector) {
      var handleObjIn;
      var eventHandle;
      var segmentMatch;
      var events;
      var t;
      var handleObj;
      var special;
      var handlers;
      var type;
      var namespaces;
      var origType;
      var elemData = data_priv.get(elem);
      if (elemData) {
        if (handler.handler) {
          /** @type {Function} */
          handleObjIn = handler;
          handler = handleObjIn.handler;
          selector = handleObjIn.selector;
        }
        if (!handler.guid) {
          /** @type {number} */
          handler.guid = jQuery.guid++;
        }
        if (!(events = elemData.events)) {
          events = elemData.events = {};
        }
        if (!(eventHandle = elemData.handle)) {
          /** @type {function (Event): ?} */
          eventHandle = elemData.handle = function(event) {
            return "undefined" != typeof jQuery && jQuery.event.triggered !== event.type ? jQuery.event.dispatch.apply(elem, arguments) : void 0;
          };
        }
        types = (types || "").match(vvarText) || [""];
        t = types.length;
        for (;t--;) {
          /** @type {Array} */
          segmentMatch = rtypenamespace.exec(types[t]) || [];
          type = origType = segmentMatch[1];
          namespaces = (segmentMatch[2] || "").split(".").sort();
          if (type) {
            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            special = jQuery.event.special[type] || {};
            handleObj = jQuery.extend({
              type : type,
              origType : origType,
              data : e,
              /** @type {Function} */
              handler : handler,
              guid : handler.guid,
              selector : selector,
              needsContext : selector && jQuery.expr.match.needsContext.test(selector),
              namespace : namespaces.join(".")
            }, handleObjIn);
            if (!(handlers = events[type])) {
              /** @type {Array} */
              handlers = events[type] = [];
              /** @type {number} */
              handlers.delegateCount = 0;
              if (!(special.setup && special.setup.call(elem, e, namespaces, eventHandle) !== false)) {
                if (elem.addEventListener) {
                  elem.addEventListener(type, eventHandle, false);
                }
              }
            }
            if (special.add) {
              special.add.call(elem, handleObj);
              if (!handleObj.handler.guid) {
                handleObj.handler.guid = handler.guid;
              }
            }
            if (selector) {
              handlers.splice(handlers.delegateCount++, 0, handleObj);
            } else {
              handlers.push(handleObj);
            }
            /** @type {boolean} */
            jQuery.event.global[type] = true;
          }
        }
      }
    },
    /**
     * @param {string} elem
     * @param {Object} types
     * @param {Function} handler
     * @param {string} selector
     * @param {boolean} keepData
     * @return {undefined}
     */
    remove : function(elem, types, handler, selector, keepData) {
      var j;
      var origCount;
      var tmp;
      var events;
      var t;
      var handleObj;
      var special;
      var handlers;
      var type;
      var namespaces;
      var origType;
      var elemData = data_priv.hasData(elem) && data_priv.get(elem);
      if (elemData && (events = elemData.events)) {
        types = (types || "").match(vvarText) || [""];
        t = types.length;
        for (;t--;) {
          if (tmp = rtypenamespace.exec(types[t]) || [], type = origType = tmp[1], namespaces = (tmp[2] || "").split(".").sort(), type) {
            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            handlers = events[type] || [];
            tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
            origCount = j = handlers.length;
            for (;j--;) {
              handleObj = handlers[j];
              if (!(!keepData && origType !== handleObj.origType)) {
                if (!(handler && handler.guid !== handleObj.guid)) {
                  if (!(tmp && !tmp.test(handleObj.namespace))) {
                    if (!(selector && (selector !== handleObj.selector && ("**" !== selector || !handleObj.selector)))) {
                      handlers.splice(j, 1);
                      if (handleObj.selector) {
                        handlers.delegateCount--;
                      }
                      if (special.remove) {
                        special.remove.call(elem, handleObj);
                      }
                    }
                  }
                }
              }
            }
            if (origCount) {
              if (!handlers.length) {
                if (!(special.teardown && special.teardown.call(elem, namespaces, elemData.handle) !== false)) {
                  jQuery.removeEvent(elem, type, elemData.handle);
                }
                delete events[type];
              }
            }
          } else {
            for (type in events) {
              jQuery.event.remove(elem, type + types[t], handler, selector, true);
            }
          }
        }
        if (jQuery.isEmptyObject(events)) {
          delete elemData.handle;
          data_priv.remove(elem, "events");
        }
      }
    },
    /**
     * @param {Object} event
     * @param {?} data
     * @param {Object} elem
     * @param {boolean} onlyHandlers
     * @return {?}
     */
    trigger : function(event, data, elem, onlyHandlers) {
      var i;
      var optgroup;
      var tmp;
      var bubbleType;
      var ontype;
      var handle;
      var special;
      /** @type {Array} */
      var eventPath = [elem || rvar];
      var type = core_hasOwn.call(event, "type") ? event.type : event;
      var namespaces = core_hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
      if (optgroup = tmp = elem = elem || rvar, 3 !== elem.nodeType && (8 !== elem.nodeType && (!rfocusMorph.test(type + jQuery.event.triggered) && (type.indexOf(".") >= 0 && (namespaces = type.split("."), type = namespaces.shift(), namespaces.sort()), ontype = type.indexOf(":") < 0 && "on" + type, event = event[jQuery.expando] ? event : new jQuery.Event(type, "object" == typeof event && event), event.isTrigger = onlyHandlers ? 2 : 3, event.namespace = namespaces.join("."), event.rnamespace = event.namespace ? 
      new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, event.result = void 0, event.target || (event.target = elem), data = null == data ? [event] : jQuery.makeArray(data, [event]), special = jQuery.event.special[type] || {}, onlyHandlers || (!special.trigger || special.trigger.apply(elem, data) !== false))))) {
        if (!onlyHandlers && (!special.noBubble && !jQuery.isWindow(elem))) {
          bubbleType = special.delegateType || type;
          if (!rfocusMorph.test(bubbleType + type)) {
            optgroup = optgroup.parentNode;
          }
          for (;optgroup;optgroup = optgroup.parentNode) {
            eventPath.push(optgroup);
            tmp = optgroup;
          }
          if (tmp === (elem.ownerDocument || rvar)) {
            eventPath.push(tmp.defaultView || (tmp.parentWindow || win));
          }
        }
        /** @type {number} */
        i = 0;
        for (;(optgroup = eventPath[i++]) && !event.isPropagationStopped();) {
          event.type = i > 1 ? bubbleType : special.bindType || type;
          handle = (data_priv.get(optgroup, "events") || {})[event.type] && data_priv.get(optgroup, "handle");
          if (handle) {
            handle.apply(optgroup, data);
          }
          handle = ontype && optgroup[ontype];
          if (handle) {
            if (handle.apply) {
              if (jQuery.acceptData(optgroup)) {
                event.result = handle.apply(optgroup, data);
                if (event.result === false) {
                  event.preventDefault();
                }
              }
            }
          }
        }
        return event.type = type, onlyHandlers || (event.isDefaultPrevented() || (special._default && special._default.apply(eventPath.pop(), data) !== false || (!jQuery.acceptData(elem) || ontype && (jQuery.isFunction(elem[type]) && (!jQuery.isWindow(elem) && (tmp = elem[ontype], tmp && (elem[ontype] = null), jQuery.event.triggered = type, elem[type](), jQuery.event.triggered = void 0, tmp && (elem[ontype] = tmp))))))), event.result;
      }
    },
    /**
     * @param {Object} event
     * @return {?}
     */
    dispatch : function(event) {
      event = jQuery.event.fix(event);
      var i;
      var j;
      var ret;
      var matched;
      var handleObj;
      /** @type {Array} */
      var handlerQueue = [];
      /** @type {Array.<?>} */
      var args = core_slice.call(arguments);
      var handlers = (data_priv.get(this, "events") || {})[event.type] || [];
      var special = jQuery.event.special[event.type] || {};
      if (args[0] = event, event.delegateTarget = this, !special.preDispatch || special.preDispatch.call(this, event) !== false) {
        handlerQueue = jQuery.event.handlers.call(this, event, handlers);
        /** @type {number} */
        i = 0;
        for (;(matched = handlerQueue[i++]) && !event.isPropagationStopped();) {
          event.currentTarget = matched.elem;
          /** @type {number} */
          j = 0;
          for (;(handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped();) {
            if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {
              event.handleObj = handleObj;
              event.data = handleObj.data;
              ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
              if (void 0 !== ret) {
                if ((event.result = ret) === false) {
                  event.preventDefault();
                  event.stopPropagation();
                }
              }
            }
          }
        }
        return special.postDispatch && special.postDispatch.call(this, event), event.result;
      }
    },
    /**
     * @param {Event} event
     * @param {Object} handlers
     * @return {?}
     */
    handlers : function(event, handlers) {
      var target;
      var bucket;
      var rvar;
      var value;
      /** @type {Array} */
      var handlerQueue = [];
      var delegateCount = handlers.delegateCount;
      var optgroup = event.target;
      if (delegateCount && (optgroup.nodeType && (!event.button || "click" !== event.type))) {
        for (;optgroup !== this;optgroup = optgroup.parentNode || this) {
          if (optgroup.disabled !== true || "click" !== event.type) {
            /** @type {Array} */
            bucket = [];
            /** @type {number} */
            target = 0;
            for (;delegateCount > target;target++) {
              value = handlers[target];
              /** @type {string} */
              rvar = value.selector + " ";
              if (void 0 === bucket[rvar]) {
                bucket[rvar] = value.needsContext ? jQuery(rvar, this).index(optgroup) >= 0 : jQuery.find(rvar, this, null, [optgroup]).length;
              }
              if (bucket[rvar]) {
                bucket.push(value);
              }
            }
            if (bucket.length) {
              handlerQueue.push({
                elem : optgroup,
                handlers : bucket
              });
            }
          }
        }
      }
      return delegateCount < handlers.length && handlerQueue.push({
        elem : this,
        handlers : handlers.slice(delegateCount)
      }), handlerQueue;
    },
    props : "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
    fixHooks : {},
    keyHooks : {
      props : "char charCode key keyCode".split(" "),
      /**
       * @param {string} name
       * @param {Object} value
       * @return {?}
       */
      filter : function(name, value) {
        return null == name.which && (name.which = null != value.charCode ? value.charCode : value.keyCode), name;
      }
    },
    mouseHooks : {
      props : "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
      /**
       * @param {string} name
       * @param {Object} value
       * @return {?}
       */
      filter : function(name, value) {
        var eventDoc;
        var doc;
        var body;
        var old = value.button;
        return null == name.pageX && (null != value.clientX && (eventDoc = name.target.ownerDocument || rvar, doc = eventDoc.documentElement, body = eventDoc.body, name.pageX = value.clientX + (doc && doc.scrollLeft || (body && body.scrollLeft || 0)) - (doc && doc.clientLeft || (body && body.clientLeft || 0)), name.pageY = value.clientY + (doc && doc.scrollTop || (body && body.scrollTop || 0)) - (doc && doc.clientTop || (body && body.clientTop || 0)))), name.which || (void 0 === old || (name.which = 
        1 & old ? 1 : 2 & old ? 3 : 4 & old ? 2 : 0)), name;
      }
    },
    /**
     * @param {string} optgroup
     * @return {?}
     */
    fix : function(optgroup) {
      if (optgroup[jQuery.expando]) {
        return optgroup;
      }
      var i;
      var prop;
      var copy;
      var type = optgroup.type;
      /** @type {string} */
      var pdataOld = optgroup;
      var fixHook = this.fixHooks[type];
      if (!fixHook) {
        this.fixHooks[type] = fixHook = rkeyEvent.test(type) ? this.mouseHooks : rmouseEvent.test(type) ? this.keyHooks : {};
      }
      copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
      optgroup = new jQuery.Event(pdataOld);
      i = copy.length;
      for (;i--;) {
        prop = copy[i];
        optgroup[prop] = pdataOld[prop];
      }
      return 3 === optgroup.target.nodeType && (optgroup.target = optgroup.target.parentNode), fixHook.filter ? fixHook.filter(optgroup, pdataOld) : optgroup;
    },
    special : {
      load : {
        noBubble : true
      },
      focus : {
        /**
         * @return {?}
         */
        trigger : function() {
          return this !== safeActiveElement() && this.focus ? (this.focus(), false) : void 0;
        },
        delegateType : "focusin"
      },
      blur : {
        /**
         * @return {?}
         */
        trigger : function() {
          return this === safeActiveElement() && this.blur ? (this.blur(), false) : void 0;
        },
        delegateType : "focusout"
      },
      click : {
        /**
         * @return {?}
         */
        trigger : function() {
          return "checkbox" === this.type && (this.click && jQuery.nodeName(this, "input")) ? (this.click(), false) : void 0;
        },
        /**
         * @param {Event} event
         * @return {?}
         */
        _default : function(event) {
          return jQuery.nodeName(event.target, "a");
        }
      },
      beforeunload : {
        /**
         * @param {Object} event
         * @return {undefined}
         */
        postDispatch : function(event) {
          if (void 0 !== event.result) {
            if (event.originalEvent) {
              event.originalEvent.returnValue = event.result;
            }
          }
        }
      }
    },
    /**
     * @param {string} type
     * @param {Object} elem
     * @param {Object} event
     * @param {boolean} dataAndEvents
     * @return {undefined}
     */
    simulate : function(type, elem, event, dataAndEvents) {
      var e = jQuery.extend(new jQuery.Event, event, {
        type : type,
        isSimulated : true,
        originalEvent : {}
      });
      if (dataAndEvents) {
        jQuery.event.trigger(e, null, elem);
      } else {
        jQuery.event.dispatch.call(elem, e);
      }
      if (e.isDefaultPrevented()) {
        event.preventDefault();
      }
    }
  };
  /**
   * @param {?} elem
   * @param {string} type
   * @param {string} handle
   * @return {undefined}
   */
  jQuery.removeEvent = function(elem, type, handle) {
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle, false);
    }
  };
  /**
   * @param {string} name
   * @param {Object} data
   * @return {?}
   */
  jQuery.Event = function(name, data) {
    return this instanceof jQuery.Event ? (name && name.type ? (this.originalEvent = name, this.type = name.type, this.isDefaultPrevented = name.defaultPrevented || void 0 === name.defaultPrevented && name.returnValue === false ? returnTrue : returnFalse) : this.type = name, data && jQuery.extend(this, data), this.timeStamp = name && name.timeStamp || jQuery.now(), void(this[jQuery.expando] = true)) : new jQuery.Event(name, data);
  };
  jQuery.Event.prototype = {
    /** @type {function (string, Object): ?} */
    constructor : jQuery.Event,
    /** @type {function (): ?} */
    isDefaultPrevented : returnFalse,
    /** @type {function (): ?} */
    isPropagationStopped : returnFalse,
    /** @type {function (): ?} */
    isImmediatePropagationStopped : returnFalse,
    /**
     * @return {undefined}
     */
    preventDefault : function() {
      var e = this.originalEvent;
      /** @type {function (): ?} */
      this.isDefaultPrevented = returnTrue;
      if (e) {
        if (e.preventDefault) {
          e.preventDefault();
        }
      }
    },
    /**
     * @return {undefined}
     */
    stopPropagation : function() {
      var e = this.originalEvent;
      /** @type {function (): ?} */
      this.isPropagationStopped = returnTrue;
      if (e) {
        if (e.stopPropagation) {
          e.stopPropagation();
        }
      }
    },
    /**
     * @return {undefined}
     */
    stopImmediatePropagation : function() {
      var e = this.originalEvent;
      /** @type {function (): ?} */
      this.isImmediatePropagationStopped = returnTrue;
      if (e) {
        if (e.stopImmediatePropagation) {
          e.stopImmediatePropagation();
        }
      }
      this.stopPropagation();
    }
  };
  jQuery.each({
    mouseenter : "mouseover",
    mouseleave : "mouseout",
    pointerenter : "pointerover",
    pointerleave : "pointerout"
  }, function(orig, fix) {
    jQuery.event.special[orig] = {
      delegateType : fix,
      bindType : fix,
      /**
       * @param {Event} event
       * @return {?}
       */
      handle : function(event) {
        var returnValue;
        var target = this;
        var related = event.relatedTarget;
        var handleObj = event.handleObj;
        return(!related || related !== target && !jQuery.contains(target, related)) && (event.type = handleObj.origType, returnValue = handleObj.handler.apply(this, arguments), event.type = fix), returnValue;
      }
    };
  });
  if (!support.focusinBubbles) {
    jQuery.each({
      focus : "focusin",
      blur : "focusout"
    }, function(event, name) {
      /**
       * @param {(Object|string)} event
       * @return {undefined}
       */
      var handler = function(event) {
        jQuery.event.simulate(name, event.target, jQuery.event.fix(event), true);
      };
      jQuery.event.special[name] = {
        /**
         * @return {undefined}
         */
        setup : function() {
          var node = this.ownerDocument || this;
          var descriptor = data_priv.access(node, name);
          if (!descriptor) {
            node.addEventListener(event, handler, true);
          }
          data_priv.access(node, name, (descriptor || 0) + 1);
        },
        /**
         * @return {undefined}
         */
        teardown : function() {
          var elem = this.ownerDocument || this;
          /** @type {number} */
          var data = data_priv.access(elem, name) - 1;
          if (data) {
            data_priv.access(elem, name, data);
          } else {
            elem.removeEventListener(event, handler, true);
            data_priv.remove(elem, name);
          }
        }
      };
    });
  }
  jQuery.fn.extend({
    /**
     * @param {string} type
     * @param {Function} selector
     * @param {Function} data
     * @param {Function} fn
     * @param {(number|string)} one
     * @return {?}
     */
    on : function(type, selector, data, fn, one) {
      var origFn;
      var fix;
      if ("object" == typeof type) {
        if ("string" != typeof selector) {
          data = data || selector;
          selector = void 0;
        }
        for (fix in type) {
          this.on(fix, selector, data, type[fix], one);
        }
        return this;
      }
      if (null == data && null == fn ? (fn = selector, data = selector = void 0) : null == fn && ("string" == typeof selector ? (fn = data, data = void 0) : (fn = data, data = selector, selector = void 0)), fn === false) {
        /** @type {function (): ?} */
        fn = returnFalse;
      } else {
        if (!fn) {
          return this;
        }
      }
      return 1 === one && (origFn = fn, fn = function(event) {
        return jQuery().off(event), origFn.apply(this, arguments);
      }, fn.guid = origFn.guid || (origFn.guid = jQuery.guid++)), this.each(function() {
        jQuery.event.add(this, type, fn, data, selector);
      });
    },
    /**
     * @param {string} type
     * @param {Function} selector
     * @param {Object} data
     * @param {Function} fn
     * @return {?}
     */
    one : function(type, selector, data, fn) {
      return this.on(type, selector, data, fn, 1);
    },
    /**
     * @param {Object} types
     * @param {Function} selector
     * @param {Function} fn
     * @return {?}
     */
    off : function(types, selector, fn) {
      var handleObj;
      var type;
      if (types && (types.preventDefault && types.handleObj)) {
        return handleObj = types.handleObj, jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler), this;
      }
      if ("object" == typeof types) {
        for (type in types) {
          this.off(type, selector, types[type]);
        }
        return this;
      }
      return(selector === false || "function" == typeof selector) && (fn = selector, selector = void 0), fn === false && (fn = returnFalse), this.each(function() {
        jQuery.event.remove(this, types, fn, selector);
      });
    },
    /**
     * @param {string} type
     * @param {?} data
     * @return {?}
     */
    trigger : function(type, data) {
      return this.each(function() {
        jQuery.event.trigger(type, data, this);
      });
    },
    /**
     * @param {string} type
     * @param {?} data
     * @return {?}
     */
    triggerHandler : function(type, data) {
      var parent = this[0];
      return parent ? jQuery.event.trigger(type, data, parent, true) : void 0;
    }
  });
  /** @type {RegExp} */
  var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;
  /** @type {RegExp} */
  var rtagName = /<([\w:]+)/;
  /** @type {RegExp} */
  var reWhitespace = /<|&#?\w+;/;
  /** @type {RegExp} */
  var rchecked = /<(?:script|style|link)/i;
  /** @type {RegExp} */
  var exclude = /checked\s*(?:[^=]|=\s*.checked.)/i;
  /** @type {RegExp} */
  var stopParent = /^$|\/(?:java|ecma)script/i;
  /** @type {RegExp} */
  var re = /^true\/(.*)/;
  /** @type {RegExp} */
  var rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
  var wrapMap = {
    option : [1, "<select multiple='multiple'>", "</select>"],
    thead : [1, "<table>", "</table>"],
    col : [2, "<table><colgroup>", "</colgroup></table>"],
    tr : [2, "<table><tbody>", "</tbody></table>"],
    td : [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default : [0, "", ""]
  };
  /** @type {Array} */
  wrapMap.optgroup = wrapMap.option;
  /** @type {Array} */
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  /** @type {Array} */
  wrapMap.th = wrapMap.td;
  jQuery.extend({
    /**
     * @param {Object} elem
     * @param {boolean} dataAndEvents
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    clone : function(elem, dataAndEvents, deepDataAndEvents) {
      var i;
      var l;
      var srcElements;
      var destElements;
      var clone = elem.cloneNode(true);
      var inPage = jQuery.contains(elem.ownerDocument, elem);
      if (!(support.noCloneChecked || (1 !== elem.nodeType && 11 !== elem.nodeType || jQuery.isXMLDoc(elem)))) {
        destElements = getAll(clone);
        srcElements = getAll(elem);
        /** @type {number} */
        i = 0;
        l = srcElements.length;
        for (;l > i;i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      }
      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);
          /** @type {number} */
          i = 0;
          l = srcElements.length;
          for (;l > i;i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      }
      return destElements = getAll(clone, "script"), destElements.length > 0 && setGlobalEval(destElements, !inPage && getAll(elem, "script")), clone;
    },
    /**
     * @param {Array} elems
     * @param {Document} doc
     * @param {boolean} selection
     * @param {?} values
     * @return {?}
     */
    buildFragment : function(elems, doc, selection, values) {
      var optgroup;
      var tmp;
      var tag;
      var wrap;
      var i;
      var j;
      var fragment = doc.createDocumentFragment();
      /** @type {Array} */
      var scripts = [];
      /** @type {number} */
      var index = 0;
      var length = elems.length;
      for (;length > index;index++) {
        if (optgroup = elems[index], optgroup || 0 === optgroup) {
          if ("object" === jQuery.type(optgroup)) {
            jQuery.merge(scripts, optgroup.nodeType ? [optgroup] : optgroup);
          } else {
            if (reWhitespace.test(optgroup)) {
              tmp = tmp || fragment.appendChild(doc.createElement("div"));
              tag = (rtagName.exec(optgroup) || ["", ""])[1].toLowerCase();
              wrap = wrapMap[tag] || wrapMap._default;
              tmp.innerHTML = wrap[1] + optgroup.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
              j = wrap[0];
              for (;j--;) {
                tmp = tmp.lastChild;
              }
              jQuery.merge(scripts, tmp.childNodes);
              tmp = fragment.firstChild;
              /** @type {string} */
              tmp.textContent = "";
            } else {
              scripts.push(doc.createTextNode(optgroup));
            }
          }
        }
      }
      /** @type {string} */
      fragment.textContent = "";
      /** @type {number} */
      index = 0;
      for (;optgroup = scripts[index++];) {
        if ((!values || -1 === jQuery.inArray(optgroup, values)) && (i = jQuery.contains(optgroup.ownerDocument, optgroup), tmp = getAll(fragment.appendChild(optgroup), "script"), i && setGlobalEval(tmp), selection)) {
          /** @type {number} */
          j = 0;
          for (;optgroup = tmp[j++];) {
            if (stopParent.test(optgroup.type || "")) {
              selection.push(optgroup);
            }
          }
        }
      }
      return fragment;
    },
    /**
     * @param {?} elems
     * @return {undefined}
     */
    cleanData : function(elems) {
      var data;
      var elem;
      var type;
      var key;
      var special = jQuery.event.special;
      /** @type {number} */
      var i = 0;
      for (;void 0 !== (elem = elems[i]);i++) {
        if (jQuery.acceptData(elem) && (key = elem[data_priv.expando], key && (data = data_priv.cache[key]))) {
          if (data.events) {
            for (type in data.events) {
              if (special[type]) {
                jQuery.event.remove(elem, type);
              } else {
                jQuery.removeEvent(elem, type, data.handle);
              }
            }
          }
          if (data_priv.cache[key]) {
            delete data_priv.cache[key];
          }
        }
        delete data_user.cache[elem[data_user.expando]];
      }
    }
  });
  jQuery.fn.extend({
    /**
     * @param {string} name
     * @return {?}
     */
    text : function(name) {
      return access(this, function(textString) {
        return void 0 === textString ? jQuery.text(this) : this.empty().each(function() {
          if (1 === this.nodeType || (11 === this.nodeType || 9 === this.nodeType)) {
            /** @type {string} */
            this.textContent = textString;
          }
        });
      }, null, name, arguments.length);
    },
    /**
     * @return {?}
     */
    append : function() {
      return this.domManip(arguments, function(elem) {
        if (1 === this.nodeType || (11 === this.nodeType || 9 === this.nodeType)) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },
    /**
     * @return {?}
     */
    prepend : function() {
      return this.domManip(arguments, function(elem) {
        if (1 === this.nodeType || (11 === this.nodeType || 9 === this.nodeType)) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },
    /**
     * @return {?}
     */
    before : function() {
      return this.domManip(arguments, function(elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },
    /**
     * @return {?}
     */
    after : function() {
      return this.domManip(arguments, function(elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },
    /**
     * @param {string} optgroup
     * @param {Object} keepData
     * @return {?}
     */
    remove : function(optgroup, keepData) {
      var elem;
      var curLoop = optgroup ? jQuery.filter(optgroup, this) : this;
      /** @type {number} */
      var i = 0;
      for (;null != (elem = curLoop[i]);i++) {
        if (!keepData) {
          if (!(1 !== elem.nodeType)) {
            jQuery.cleanData(getAll(elem));
          }
        }
        if (elem.parentNode) {
          if (keepData) {
            if (jQuery.contains(elem.ownerDocument, elem)) {
              setGlobalEval(getAll(elem, "script"));
            }
          }
          elem.parentNode.removeChild(elem);
        }
      }
      return this;
    },
    /**
     * @return {?}
     */
    empty : function() {
      var elem;
      /** @type {number} */
      var unlock = 0;
      for (;null != (elem = this[unlock]);unlock++) {
        if (1 === elem.nodeType) {
          jQuery.cleanData(getAll(elem, false));
          /** @type {string} */
          elem.textContent = "";
        }
      }
      return this;
    },
    /**
     * @param {boolean} dataAndEvents
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    clone : function(dataAndEvents, deepDataAndEvents) {
      return dataAndEvents = null == dataAndEvents ? false : dataAndEvents, deepDataAndEvents = null == deepDataAndEvents ? dataAndEvents : deepDataAndEvents, this.map(function() {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },
    /**
     * @param {string} value
     * @return {?}
     */
    html : function(value) {
      return access(this, function(value) {
        var elem = this[0] || {};
        /** @type {number} */
        var i = 0;
        var l = this.length;
        if (void 0 === value && 1 === elem.nodeType) {
          return elem.innerHTML;
        }
        if ("string" == typeof value && (!rchecked.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()])) {
          /** @type {string} */
          value = value.replace(rxhtmlTag, "<$1></$2>");
          try {
            for (;l > i;i++) {
              elem = this[i] || {};
              if (1 === elem.nodeType) {
                jQuery.cleanData(getAll(elem, false));
                /** @type {string} */
                elem.innerHTML = value;
              }
            }
            /** @type {number} */
            elem = 0;
          } catch (e) {
          }
        }
        if (elem) {
          this.empty().append(value);
        }
      }, null, value, arguments.length);
    },
    /**
     * @return {?}
     */
    replaceWith : function() {
      var arg = arguments[0];
      return this.domManip(arguments, function(s) {
        arg = this.parentNode;
        jQuery.cleanData(getAll(this));
        if (arg) {
          arg.replaceChild(s, this);
        }
      }), arg && (arg.length || arg.nodeType) ? this : this.remove();
    },
    /**
     * @param {string} optgroup
     * @return {?}
     */
    detach : function(optgroup) {
      return this.remove(optgroup, true);
    },
    /**
     * @param {Object} args
     * @param {Function} callback
     * @return {?}
     */
    domManip : function(args, callback) {
      /** @type {Array} */
      args = core_concat.apply([], args);
      var fragment;
      var first;
      var scripts;
      var _len;
      var node;
      var doc;
      /** @type {number} */
      var i = 0;
      var l = this.length;
      var set = this;
      /** @type {number} */
      var iNoClone = l - 1;
      var html = args[0];
      var isFunction = jQuery.isFunction(html);
      if (isFunction || l > 1 && ("string" == typeof html && (!support.checkClone && exclude.test(html)))) {
        return this.each(function(index) {
          var self = set.eq(index);
          if (isFunction) {
            args[0] = html.call(this, index, self.html());
          }
          self.domManip(args, callback);
        });
      }
      if (l && (fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this), first = fragment.firstChild, 1 === fragment.childNodes.length && (fragment = first), first)) {
        scripts = jQuery.map(getAll(fragment, "script"), restoreScript);
        _len = scripts.length;
        for (;l > i;i++) {
          node = fragment;
          if (i !== iNoClone) {
            node = jQuery.clone(node, true, true);
            if (_len) {
              jQuery.merge(scripts, getAll(node, "script"));
            }
          }
          callback.call(this[i], node, i);
        }
        if (_len) {
          doc = scripts[scripts.length - 1].ownerDocument;
          jQuery.map(scripts, fn);
          /** @type {number} */
          i = 0;
          for (;_len > i;i++) {
            node = scripts[i];
            if (stopParent.test(node.type || "")) {
              if (!data_priv.access(node, "globalEval")) {
                if (jQuery.contains(doc, node)) {
                  if (node.src) {
                    if (jQuery._evalUrl) {
                      jQuery._evalUrl(node.src);
                    }
                  } else {
                    jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
                  }
                }
              }
            }
          }
        }
      }
      return this;
    }
  });
  jQuery.each({
    appendTo : "append",
    prependTo : "prepend",
    insertBefore : "before",
    insertAfter : "after",
    replaceAll : "replaceWith"
  }, function(original, method) {
    /**
     * @param {string} optgroup
     * @return {?}
     */
    jQuery.fn[original] = function(optgroup) {
      var resp;
      /** @type {Array} */
      var ret = [];
      var insert = jQuery(optgroup);
      /** @type {number} */
      var segments = insert.length - 1;
      /** @type {number} */
      var i = 0;
      for (;segments >= i;i++) {
        resp = i === segments ? this : this.clone(true);
        jQuery(insert[i])[method](resp);
        core_push.apply(ret, resp.get());
      }
      return this.pushStack(ret);
    };
  });
  var iframe;
  var elemdisplay = {
    HTML : "block",
    BODY : "block"
  };
  /** @type {RegExp} */
  var rmargin = /^margin/;
  /** @type {RegExp} */
  var regexp = new RegExp("^(" + core_pnum + ")(?!px)[a-z%]+$", "i");
  /**
   * @param {Node} elem
   * @return {?}
   */
  var getStyles = function(elem) {
    return elem.ownerDocument.defaultView.opener ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : win.getComputedStyle(elem, null);
  };
  var docElem = rvar.documentElement;
  !function() {
    /**
     * @return {undefined}
     */
    function computePixelPositionAndBoxSizingReliable() {
      /** @type {string} */
      div.style.cssText = "-webkit-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute";
      /** @type {string} */
      div.innerHTML = "";
      docElem.appendChild(container);
      var divStyle = win.getComputedStyle(div, null);
      /** @type {boolean} */
      c = "1%" !== divStyle.top;
      /** @type {boolean} */
      d = "4px" === divStyle.width;
      docElem.removeChild(container);
    }
    var c;
    var d;
    var container = rvar.createElement("div");
    var div = rvar.createElement("div");
    if (div.style) {
      /** @type {string} */
      div.style.backgroundClip = "content-box";
      /** @type {string} */
      div.cloneNode(true).style.backgroundClip = "";
      /** @type {boolean} */
      support.clearCloneStyle = "content-box" === div.style.backgroundClip;
      /** @type {string} */
      container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute";
      container.appendChild(div);
      if (win.getComputedStyle) {
        jQuery.extend(support, {
          /**
           * @return {?}
           */
          pixelPosition : function() {
            return computePixelPositionAndBoxSizingReliable(), c;
          },
          /**
           * @return {?}
           */
          boxSizingReliable : function() {
            return null == d && computePixelPositionAndBoxSizingReliable(), d;
          },
          /**
           * @return {?}
           */
          reliableMarginRight : function() {
            var b;
            var marginDiv = div.appendChild(rvar.createElement("div"));
            return marginDiv.style.cssText = div.style.cssText = "-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", marginDiv.style.marginRight = marginDiv.style.width = "0", div.style.width = "1px", docElem.appendChild(container), b = !parseFloat(win.getComputedStyle(marginDiv, null).marginRight), docElem.removeChild(container), div.removeChild(marginDiv), b;
          }
        });
      }
    }
  }();
  /**
   * @param {Element} elem
   * @param {Object} options
   * @param {Function} callback
   * @param {Array} args
   * @return {?}
   */
  jQuery.swap = function(elem, options, callback, args) {
    var ret;
    var name;
    var old = {};
    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }
    ret = callback.apply(elem, args || []);
    for (name in options) {
      elem.style[name] = old[name];
    }
    return ret;
  };
  /** @type {RegExp} */
  var rdisplayswap = /^(none|table(?!-c[ea]).+)/;
  /** @type {RegExp} */
  var rrelNum = new RegExp("^(" + core_pnum + ")(.*)$", "i");
  /** @type {RegExp} */
  var rnumsplit = new RegExp("^([+-])=(" + core_pnum + ")", "i");
  var props = {
    position : "absolute",
    visibility : "hidden",
    display : "block"
  };
  var cssNormalTransform = {
    letterSpacing : "0",
    fontWeight : "400"
  };
  /** @type {Array} */
  var VENDOR_PREFIXES = ["Webkit", "Moz", "ms"];
  jQuery.extend({
    cssHooks : {
      opacity : {
        /**
         * @param {string} name
         * @param {string} value
         * @return {?}
         */
        get : function(name, value) {
          if (value) {
            var ret = curCSS(name, "opacity");
            return "" === ret ? "1" : ret;
          }
        }
      }
    },
    cssNumber : {
      columnCount : true,
      fillOpacity : true,
      flexGrow : true,
      flexShrink : true,
      fontWeight : true,
      lineHeight : true,
      opacity : true,
      order : true,
      orphans : true,
      widows : true,
      zIndex : true,
      zoom : true
    },
    cssProps : {
      "float" : "cssFloat"
    },
    /**
     * @param {string} elem
     * @param {string} name
     * @param {string} value
     * @param {boolean} key
     * @return {?}
     */
    style : function(elem, name, value, key) {
      if (elem && (3 !== elem.nodeType && (8 !== elem.nodeType && elem.style))) {
        var ret;
        var type;
        var hooks;
        var origName = jQuery.camelCase(name);
        var style = elem.style;
        return name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName)), hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName], void 0 === value ? hooks && ("get" in hooks && void 0 !== (ret = hooks.get(elem, false, key))) ? ret : style[name] : (type = typeof value, "string" === type && ((ret = rnumsplit.exec(value)) && (value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name)), type = "number")), null != value && (value === value && ("number" !== 
        type || (jQuery.cssNumber[origName] || (value += "px")), support.clearCloneStyle || ("" !== value || (0 !== name.indexOf("background") || (style[name] = "inherit"))), hooks && ("set" in hooks && void 0 === (value = hooks.set(elem, value, key))) || (style[name] = value))), void 0);
      }
    },
    /**
     * @param {string} name
     * @param {string} prop
     * @param {boolean} recurring
     * @param {?} styles
     * @return {?}
     */
    css : function(name, prop, recurring, styles) {
      var val;
      var html;
      var property;
      var origName = jQuery.camelCase(prop);
      return prop = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(name.style, origName)), property = jQuery.cssHooks[prop] || jQuery.cssHooks[origName], property && ("get" in property && (val = property.get(name, true, recurring))), void 0 === val && (val = curCSS(name, prop, styles)), "normal" === val && (prop in cssNormalTransform && (val = cssNormalTransform[prop])), "" === recurring || recurring ? (html = parseFloat(val), recurring === true || jQuery.isNumeric(html) ? 
      html || 0 : val) : val;
    }
  });
  jQuery.each(["height", "width"], function(dataAndEvents, prop) {
    jQuery.cssHooks[prop] = {
      /**
       * @param {string} name
       * @param {string} value
       * @param {boolean} extra
       * @return {?}
       */
      get : function(name, value, extra) {
        return value ? rdisplayswap.test(jQuery.css(name, "display")) && 0 === name.offsetWidth ? jQuery.swap(name, props, function() {
          return getWidthOrHeight(name, prop, extra);
        }) : getWidthOrHeight(name, prop, extra) : void 0;
      },
      /**
       * @param {?} elem
       * @param {string} value
       * @param {boolean} keepData
       * @return {?}
       */
      set : function(elem, value, keepData) {
        var styles = keepData && getStyles(elem);
        return setPositiveNumber(elem, value, keepData ? augmentWidthOrHeight(elem, prop, keepData, "border-box" === jQuery.css(elem, "boxSizing", false, styles), styles) : 0);
      }
    };
  });
  jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function(cur, value) {
    return value ? jQuery.swap(cur, {
      display : "inline-block"
    }, curCSS, [cur, "marginRight"]) : void 0;
  });
  jQuery.each({
    margin : "",
    padding : "",
    border : "Width"
  }, function(prefix, suffix) {
    jQuery.cssHooks[prefix + suffix] = {
      /**
       * @param {string} line
       * @return {?}
       */
      expand : function(line) {
        /** @type {number} */
        var i = 0;
        var expanded = {};
        /** @type {Array} */
        var tokens = "string" == typeof line ? line.split(" ") : [line];
        for (;4 > i;i++) {
          expanded[prefix + cssExpand[i] + suffix] = tokens[i] || (tokens[i - 2] || tokens[0]);
        }
        return expanded;
      }
    };
    if (!rmargin.test(prefix)) {
      /** @type {function (?, string, boolean): ?} */
      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    }
  });
  jQuery.fn.extend({
    /**
     * @param {string} name
     * @param {string} value
     * @return {?}
     */
    css : function(name, value) {
      return access(this, function(elem, prop, value) {
        var styles;
        var _len;
        var map = {};
        /** @type {number} */
        var name = 0;
        if (jQuery.isArray(prop)) {
          styles = getStyles(elem);
          _len = prop.length;
          for (;_len > name;name++) {
            map[prop[name]] = jQuery.css(elem, prop[name], false, styles);
          }
          return map;
        }
        return void 0 !== value ? jQuery.style(elem, prop, value) : jQuery.css(elem, prop);
      }, name, value, arguments.length > 1);
    },
    /**
     * @return {?}
     */
    show : function() {
      return showHide(this, true);
    },
    /**
     * @return {?}
     */
    hide : function() {
      return showHide(this);
    },
    /**
     * @param {?} state
     * @return {?}
     */
    toggle : function(state) {
      return "boolean" == typeof state ? state ? this.show() : this.hide() : this.each(function() {
        if (isHidden(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    }
  });
  /**
   * @param {?} time
   * @param {string} type
   * @return {?}
   */
  jQuery.fn.delay = function(time, type) {
    return time = jQuery.fx ? jQuery.fx.speeds[time] || time : time, type = type || "fx", this.queue(type, function(next, event) {
      /** @type {number} */
      var timeout = setTimeout(next, time);
      /**
       * @return {undefined}
       */
      event.stop = function() {
        clearTimeout(timeout);
      };
    });
  };
  (function() {
    var input = rvar.createElement("input");
    var select = rvar.createElement("select");
    var opt = select.appendChild(rvar.createElement("option"));
    /** @type {string} */
    input.type = "checkbox";
    /** @type {boolean} */
    support.checkOn = "" !== input.value;
    support.optSelected = opt.selected;
    /** @type {boolean} */
    select.disabled = true;
    /** @type {boolean} */
    support.optDisabled = !opt.disabled;
    input = rvar.createElement("input");
    /** @type {string} */
    input.value = "t";
    /** @type {string} */
    input.type = "radio";
    /** @type {boolean} */
    support.radioValue = "t" === input.value;
  })();
  var nodeHook;
  var boolHook;
  var values = jQuery.expr.attrHandle;
  jQuery.fn.extend({
    /**
     * @param {string} value
     * @param {string} val
     * @return {?}
     */
    attr : function(value, val) {
      return access(this, jQuery.attr, value, val, arguments.length > 1);
    },
    /**
     * @param {string} name
     * @return {?}
     */
    removeAttr : function(name) {
      return this.each(function() {
        jQuery.removeAttr(this, name);
      });
    }
  });
  jQuery.extend({
    /**
     * @param {string} elem
     * @param {Object} name
     * @param {string} value
     * @return {?}
     */
    attr : function(elem, name, value) {
      var hooks;
      var ret;
      var nodeType = elem.nodeType;
      if (elem && (3 !== nodeType && (8 !== nodeType && 2 !== nodeType))) {
        return "undefined" == typeof elem.getAttribute ? jQuery.prop(elem, name, value) : (1 === nodeType && jQuery.isXMLDoc(elem) || (name = name.toLowerCase(), hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook)), void 0 === value ? hooks && ("get" in hooks && null !== (ret = hooks.get(elem, name))) ? ret : (ret = jQuery.find.attr(elem, name), null == ret ? void 0 : ret) : null !== value ? hooks && ("set" in hooks && void 0 !== (ret = hooks.set(elem, value, 
        name))) ? ret : (elem.setAttribute(name, value + ""), value) : void jQuery.removeAttr(elem, name));
      }
    },
    /**
     * @param {Object} elem
     * @param {string} value
     * @return {undefined}
     */
    removeAttr : function(elem, value) {
      var name;
      var propName;
      /** @type {number} */
      var i = 0;
      var attrNames = value && value.match(vvarText);
      if (attrNames && 1 === elem.nodeType) {
        for (;name = attrNames[i++];) {
          propName = jQuery.propFix[name] || name;
          if (jQuery.expr.match.bool.test(name)) {
            /** @type {boolean} */
            elem[propName] = false;
          }
          elem.removeAttribute(name);
        }
      }
    },
    attrHooks : {
      type : {
        /**
         * @param {?} elem
         * @param {string} value
         * @return {?}
         */
        set : function(elem, value) {
          if (!support.radioValue && ("radio" === value && jQuery.nodeName(elem, "input"))) {
            var val = elem.value;
            return elem.setAttribute("type", value), val && (elem.value = val), value;
          }
        }
      }
    }
  });
  boolHook = {
    /**
     * @param {?} elem
     * @param {string} value
     * @param {boolean} keepData
     * @return {?}
     */
    set : function(elem, value, keepData) {
      return value === false ? jQuery.removeAttr(elem, keepData) : elem.setAttribute(keepData, keepData), keepData;
    }
  };
  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(dataAndEvents, name) {
    var callback = values[name] || jQuery.find.attr;
    /**
     * @param {string} arg
     * @param {string} key
     * @param {string} common
     * @return {?}
     */
    values[name] = function(arg, key, common) {
      var result;
      var value;
      return common || (value = values[key], values[key] = result, result = null != callback(arg, key, common) ? key.toLowerCase() : null, values[key] = value), result;
    };
  });
  /** @type {RegExp} */
  var R_FOCUSABLE = /^(?:input|select|textarea|button)$/i;
  jQuery.fn.extend({
    /**
     * @param {string} name
     * @param {string} value
     * @return {?}
     */
    prop : function(name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },
    /**
     * @param {?} name
     * @return {?}
     */
    removeProp : function(name) {
      return this.each(function() {
        delete this[jQuery.propFix[name] || name];
      });
    }
  });
  jQuery.extend({
    propFix : {
      "for" : "htmlFor",
      "class" : "className"
    },
    /**
     * @param {string} elem
     * @param {Object} name
     * @param {string} value
     * @return {?}
     */
    prop : function(elem, name, value) {
      var ret;
      var hooks;
      var n;
      var nodeType = elem.nodeType;
      if (elem && (3 !== nodeType && (8 !== nodeType && 2 !== nodeType))) {
        return n = 1 !== nodeType || !jQuery.isXMLDoc(elem), n && (name = jQuery.propFix[name] || name, hooks = jQuery.propHooks[name]), void 0 !== value ? hooks && ("set" in hooks && void 0 !== (ret = hooks.set(elem, value, name))) ? ret : elem[name] = value : hooks && ("get" in hooks && null !== (ret = hooks.get(elem, name))) ? ret : elem[name];
      }
    },
    propHooks : {
      tabIndex : {
        /**
         * @param {string} name
         * @return {?}
         */
        get : function(name) {
          return name.hasAttribute("tabindex") || (R_FOCUSABLE.test(name.nodeName) || name.href) ? name.tabIndex : -1;
        }
      }
    }
  });
  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      /**
       * @param {string} name
       * @return {?}
       */
      get : function(name) {
        var parent = name.parentNode;
        return parent && (parent.parentNode && parent.parentNode.selectedIndex), null;
      }
    };
  }
  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
    jQuery.propFix[this.toLowerCase()] = this;
  });
  /** @type {RegExp} */
  var rclass = /[\t\r\n\f]/g;
  jQuery.fn.extend({
    /**
     * @param {string} value
     * @return {?}
     */
    addClass : function(value) {
      var classes;
      var elem;
      var cur;
      var clazz;
      var j;
      var finalValue;
      /** @type {(boolean|string)} */
      var proceed = "string" == typeof value && value;
      /** @type {number} */
      var i = 0;
      var l = this.length;
      if (jQuery.isFunction(value)) {
        return this.each(function(j) {
          jQuery(this).addClass(value.call(this, j, this.className));
        });
      }
      if (proceed) {
        classes = (value || "").match(vvarText) || [];
        for (;l > i;i++) {
          if (elem = this[i], cur = 1 === elem.nodeType && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ")) {
            /** @type {number} */
            j = 0;
            for (;clazz = classes[j++];) {
              if (cur.indexOf(" " + clazz + " ") < 0) {
                cur += clazz + " ";
              }
            }
            finalValue = jQuery.trim(cur);
            if (elem.className !== finalValue) {
              elem.className = finalValue;
            }
          }
        }
      }
      return this;
    },
    /**
     * @param {string} value
     * @return {?}
     */
    removeClass : function(value) {
      var res;
      var elem;
      var cur;
      var apn;
      var resLength;
      var finalValue;
      /** @type {(boolean|string)} */
      var h = 0 === arguments.length || "string" == typeof value && value;
      /** @type {number} */
      var i = 0;
      var l = this.length;
      if (jQuery.isFunction(value)) {
        return this.each(function(j) {
          jQuery(this).removeClass(value.call(this, j, this.className));
        });
      }
      if (h) {
        res = (value || "").match(vvarText) || [];
        for (;l > i;i++) {
          if (elem = this[i], cur = 1 === elem.nodeType && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "")) {
            /** @type {number} */
            resLength = 0;
            for (;apn = res[resLength++];) {
              for (;cur.indexOf(" " + apn + " ") >= 0;) {
                /** @type {string} */
                cur = cur.replace(" " + apn + " ", " ");
              }
            }
            finalValue = value ? jQuery.trim(cur) : "";
            if (elem.className !== finalValue) {
              elem.className = finalValue;
            }
          }
        }
      }
      return this;
    },
    /**
     * @param {string} value
     * @param {?} stateVal
     * @return {?}
     */
    toggleClass : function(value, stateVal) {
      /** @type {string} */
      var type = typeof value;
      return "boolean" == typeof stateVal && "string" === type ? stateVal ? this.addClass(value) : this.removeClass(value) : jQuery.isFunction(value) ? this.each(function(i) {
        jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
      }) : this.each(function() {
        if ("string" === type) {
          var klass;
          /** @type {number} */
          var resLength = 0;
          var $this = jQuery(this);
          var res = value.match(vvarText) || [];
          for (;klass = res[resLength++];) {
            if ($this.hasClass(klass)) {
              $this.removeClass(klass);
            } else {
              $this.addClass(klass);
            }
          }
        } else {
          if (void 0 === value || "boolean" === type) {
            if (this.className) {
              data_priv.set(this, "__className__", this.className);
            }
            this.className = this.className || value === false ? "" : data_priv.get(this, "__className__") || "";
          }
        }
      });
    },
    /**
     * @param {string} name
     * @return {?}
     */
    hasClass : function(name) {
      /** @type {string} */
      var cookieName = " " + name + " ";
      /** @type {number} */
      var i = 0;
      var l = this.length;
      for (;l > i;i++) {
        if (1 === this[i].nodeType && (" " + this[i].className + " ").replace(rclass, " ").indexOf(cookieName) >= 0) {
          return true;
        }
      }
      return false;
    }
  });
  /** @type {RegExp} */
  var rreturn = /\r/g;
  jQuery.fn.extend({
    /**
     * @param {string} value
     * @return {?}
     */
    val : function(value) {
      var hooks;
      var ret;
      var isFunction;
      var elem = this[0];
      if (arguments.length) {
        return isFunction = jQuery.isFunction(value), this.each(function(i) {
          var val;
          if (1 === this.nodeType) {
            val = isFunction ? value.call(this, i, jQuery(this).val()) : value;
            if (null == val) {
              /** @type {string} */
              val = "";
            } else {
              if ("number" == typeof val) {
                val += "";
              } else {
                if (jQuery.isArray(val)) {
                  val = jQuery.map(val, function(month) {
                    return null == month ? "" : month + "";
                  });
                }
              }
            }
            hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
            if (!(hooks && ("set" in hooks && void 0 !== hooks.set(this, val, "value")))) {
              this.value = val;
            }
          }
        });
      }
      if (elem) {
        return hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()], hooks && ("get" in hooks && void 0 !== (ret = hooks.get(elem, "value"))) ? ret : (ret = elem.value, "string" == typeof ret ? ret.replace(rreturn, "") : null == ret ? "" : ret);
      }
    }
  });
  jQuery.extend({
    valHooks : {
      option : {
        /**
         * @param {string} name
         * @return {?}
         */
        get : function(name) {
          return jQuery.trim(name.value);
        }
      },
      select : {
        /**
         * @param {string} name
         * @return {?}
         */
        get : function(name) {
          var value;
          var optgroup;
          var codeSegments = name.options;
          var selected = name.selectedIndex;
          /** @type {boolean} */
          var isArr = "select-one" === name.type || 0 > selected;
          /** @type {(Array|null)} */
          var result = isArr ? null : [];
          var j = isArr ? selected + 1 : codeSegments.length;
          var i = 0 > selected ? j : isArr ? selected : 0;
          for (;j > i;i++) {
            if (optgroup = codeSegments[i], !(!optgroup.selected && i !== selected || ((support.optDisabled ? optgroup.disabled : null !== optgroup.getAttribute("disabled")) || optgroup.parentNode.disabled && jQuery.nodeName(optgroup.parentNode, "optgroup")))) {
              if (value = jQuery(optgroup).val(), isArr) {
                return value;
              }
              result.push(value);
            }
          }
          return result;
        },
        /**
         * @param {?} elem
         * @param {string} value
         * @return {?}
         */
        set : function(elem, value) {
          var c;
          var optgroup;
          var options = elem.options;
          var values = jQuery.makeArray(value);
          var i = options.length;
          for (;i--;) {
            optgroup = options[i];
            if (optgroup.selected = jQuery.inArray(jQuery.valHooks.option.get(optgroup), values) >= 0) {
              /** @type {boolean} */
              c = true;
            }
          }
          return c || (elem.selectedIndex = -1), values;
        }
      }
    }
  });
  jQuery.each(["radio", "checkbox"], function() {
    jQuery.valHooks[this] = {
      /**
       * @param {string} elem
       * @param {string} value
       * @return {?}
       */
      set : function(elem, value) {
        return jQuery.isArray(value) ? elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0 : void 0;
      }
    };
    if (!support.checkOn) {
      /**
       * @param {string} name
       * @return {?}
       */
      jQuery.valHooks[this].get = function(name) {
        return null === name.getAttribute("value") ? "on" : name.value;
      };
    }
  });
  jQuery.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(dataAndEvents, fix) {
    /**
     * @param {Object} data
     * @param {Function} fn
     * @return {?}
     */
    jQuery.fn[fix] = function(data, fn) {
      return arguments.length > 0 ? this.on(fix, null, data, fn) : this.trigger(fix);
    };
  });
  jQuery.fn.extend({
    /**
     * @param {undefined} fnOver
     * @param {Object} fnOut
     * @return {?}
     */
    hover : function(fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    },
    /**
     * @param {string} type
     * @param {Object} object
     * @param {Function} fn
     * @return {?}
     */
    bind : function(type, object, fn) {
      return this.on(type, null, object, fn);
    },
    /**
     * @param {string} type
     * @param {Object} fn
     * @return {?}
     */
    unbind : function(type, fn) {
      return this.off(type, null, fn);
    },
    /**
     * @param {Function} selector
     * @param {string} fix
     * @param {Object} data
     * @param {Function} fn
     * @return {?}
     */
    delegate : function(selector, fix, data, fn) {
      return this.on(fix, selector, data, fn);
    },
    /**
     * @param {string} selector
     * @param {string} event
     * @param {Object} fn
     * @return {?}
     */
    undelegate : function(selector, event, fn) {
      return 1 === arguments.length ? this.off(selector, "**") : this.off(event, selector || "**", fn);
    }
  });
  jQuery.fn.extend({
    /**
     * @param {string} optgroup
     * @return {?}
     */
    wrapAll : function(optgroup) {
      var wrap;
      return this[0] && (jQuery.isFunction(optgroup) && (optgroup = optgroup.call(this[0])), wrap = jQuery(optgroup, this[0].ownerDocument).eq(0).clone(true), this[0].parentNode && wrap.insertBefore(this[0]), wrap.map(function() {
        var elem = this;
        for (;elem.firstElementChild;) {
          elem = elem.firstElementChild;
        }
        return elem;
      }).append(this)), this;
    },
    /**
     * @param {string} html
     * @return {?}
     */
    wrapInner : function(html) {
      return jQuery.isFunction(html) ? this.each(function(i) {
        jQuery(this).wrapInner(html.call(this, i));
      }) : this.each(function() {
        var self = jQuery(this);
        var contents = self.contents();
        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },
    /**
     * @param {string} html
     * @return {?}
     */
    wrap : function(html) {
      var isFunction = jQuery.isFunction(html);
      return this.each(function(i) {
        jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
      });
    },
    /**
     * @return {?}
     */
    unwrap : function() {
      return this.parent().each(function() {
        if (!jQuery.nodeName(this, "body")) {
          jQuery(this).replaceWith(this.childNodes);
        }
      }).end();
    }
  });
  /**
   * @param {HTMLElement} elem
   * @return {?}
   */
  jQuery.expr.filters.hidden = function(elem) {
    return!elem.offsetWidth || !elem.offsetHeight;
  };
  /**
   * @param {undefined} elem
   * @return {?}
   */
  jQuery.expr.filters.visible = function(elem) {
    return!jQuery.expr.filters.hidden(elem);
  };
  /** @type {RegExp} */
  var badChars = /%20/g;
  /** @type {RegExp} */
  var rbracket = /\[\]$/;
  /** @type {RegExp} */
  var rCRLF = /\r?\n/g;
  /** @type {RegExp} */
  var mouseTypeRegex = /^(?:submit|button|image|reset|file)$/i;
  /** @type {RegExp} */
  var rsubmittable = /^(?:input|select|textarea|keygen)/i;
  /**
   * @param {Object} a
   * @param {Function} traditional
   * @return {?}
   */
  jQuery.param = function(a, traditional) {
    var prefix;
    /** @type {Array} */
    var klass = [];
    /**
     * @param {?} key
     * @param {string} value
     * @return {undefined}
     */
    var add = function(key, value) {
      value = jQuery.isFunction(value) ? value() : null == value ? "" : value;
      /** @type {string} */
      klass[klass.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
    };
    if (void 0 === traditional && (traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional), jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
      jQuery.each(a, function() {
        add(this.name, this.value);
      });
    } else {
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    }
    return klass.join("&").replace(badChars, "+");
  };
  jQuery.fn.extend({
    /**
     * @return {?}
     */
    serialize : function() {
      return jQuery.param(this.serializeArray());
    },
    /**
     * @return {?}
     */
    serializeArray : function() {
      return this.map(function() {
        var elements = jQuery.prop(this, "elements");
        return elements ? jQuery.makeArray(elements) : this;
      }).filter(function() {
        var type = this.type;
        return this.name && (!jQuery(this).is(":disabled") && (rsubmittable.test(this.nodeName) && (!mouseTypeRegex.test(type) && (this.checked || !manipulation_rcheckableType.test(type)))));
      }).map(function(dataAndEvents, elem) {
        var val = jQuery(this).val();
        return null == val ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
          return{
            name : elem.name,
            value : val.replace(rCRLF, "\r\n")
          };
        }) : {
          name : elem.name,
          value : val.replace(rCRLF, "\r\n")
        };
      }).get();
    }
  });
  support.createHTMLDocument = function() {
    var doc = rvar.implementation.createHTMLDocument("");
    return doc.body ? (doc.body.innerHTML = "<form></form><form></form>", 2 === doc.body.childNodes.length) : false;
  }();
  /**
   * @param {string} data
   * @param {boolean} doc
   * @param {boolean} dataAndEvents
   * @return {?}
   */
  jQuery.parseHTML = function(data, doc, dataAndEvents) {
    if (!data || "string" != typeof data) {
      return null;
    }
    if ("boolean" == typeof doc) {
      /** @type {boolean} */
      dataAndEvents = doc;
      /** @type {boolean} */
      doc = false;
    }
    doc = doc || (support.createHTMLDocument ? rvar.implementation.createHTMLDocument("") : rvar);
    /** @type {(Array.<string>|null)} */
    var options = rsingleTag.exec(data);
    /** @type {(Array|boolean)} */
    var optgroup = !dataAndEvents && [];
    return options ? [doc.createElement(options[1])] : (options = jQuery.buildFragment([data], doc, optgroup), optgroup && (optgroup.length && jQuery(optgroup).remove()), jQuery.merge([], options.childNodes));
  };
  jQuery.offset = {
    /**
     * @param {string} optgroup
     * @param {Object} options
     * @param {?} i
     * @return {undefined}
     */
    setOffset : function(optgroup, options, i) {
      var curPosition;
      var curLeft;
      var curCSSTop;
      var curTop;
      var op;
      var curCSSLeft;
      var j;
      var first = jQuery.css(optgroup, "position");
      var curElem = jQuery(optgroup);
      var props = {};
      if ("static" === first) {
        /** @type {string} */
        optgroup.style.position = "relative";
      }
      op = curElem.offset();
      curCSSTop = jQuery.css(optgroup, "top");
      curCSSLeft = jQuery.css(optgroup, "left");
      /** @type {boolean} */
      j = ("absolute" === first || "fixed" === first) && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
      if (j) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        /** @type {number} */
        curTop = parseFloat(curCSSTop) || 0;
        /** @type {number} */
        curLeft = parseFloat(curCSSLeft) || 0;
      }
      if (jQuery.isFunction(options)) {
        options = options.call(optgroup, i, jQuery.extend({}, op));
      }
      if (null != options.top) {
        /** @type {number} */
        props.top = options.top - op.top + curTop;
      }
      if (null != options.left) {
        /** @type {number} */
        props.left = options.left - op.left + curLeft;
      }
      if ("using" in options) {
        options.using.call(optgroup, props);
      } else {
        curElem.css(props);
      }
    }
  };
  jQuery.fn.extend({
    /**
     * @param {string} name
     * @return {?}
     */
    offset : function(name) {
      if (arguments.length) {
        return void 0 === name ? this : this.each(function(dataName) {
          jQuery.offset.setOffset(this, name, dataName);
        });
      }
      var doc;
      var win;
      var node = this[0];
      var box = {
        top : 0,
        left : 0
      };
      var element = node && node.ownerDocument;
      if (element) {
        return doc = element.documentElement, jQuery.contains(doc, node) ? (box = node.getBoundingClientRect(), win = getWindow(element), {
          top : box.top + win.pageYOffset - doc.clientTop,
          left : box.left + win.pageXOffset - doc.clientLeft
        }) : box;
      }
    },
    /**
     * @return {?}
     */
    position : function() {
      if (this[0]) {
        var offsetParent;
        var offset;
        var which = this[0];
        var parentOffset = {
          top : 0,
          left : 0
        };
        return "fixed" === jQuery.css(which, "position") ? offset = which.getBoundingClientRect() : (offsetParent = this.offsetParent(), offset = this.offset(), jQuery.nodeName(offsetParent[0], "html") || (parentOffset = offsetParent.offset()), parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true), parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true)), {
          top : offset.top - parentOffset.top - jQuery.css(which, "marginTop", true),
          left : offset.left - parentOffset.left - jQuery.css(which, "marginLeft", true)
        };
      }
    },
    /**
     * @return {?}
     */
    offsetParent : function() {
      return this.map(function() {
        var offsetParent = this.offsetParent || docElem;
        for (;offsetParent && (!jQuery.nodeName(offsetParent, "html") && "static" === jQuery.css(offsetParent, "position"));) {
          offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || docElem;
      });
    }
  });
  jQuery.each({
    scrollLeft : "pageXOffset",
    scrollTop : "pageYOffset"
  }, function(name, prop) {
    /** @type {boolean} */
    var top = "pageYOffset" === prop;
    /**
     * @param {string} isXML
     * @return {?}
     */
    jQuery.fn[name] = function(isXML) {
      return access(this, function(elem, method, val) {
        var win = getWindow(elem);
        return void 0 === val ? win ? win[prop] : elem[method] : void(win ? win.scrollTo(top ? win.pageXOffset : val, top ? val : win.pageYOffset) : elem[method] = val);
      }, name, isXML, arguments.length, null);
    };
  });
  jQuery.each(["top", "left"], function(dataAndEvents, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(optgroup, val) {
      return val ? (val = curCSS(optgroup, prop), regexp.test(val) ? jQuery(optgroup).position()[prop] + "px" : val) : void 0;
    });
  });
  jQuery.each({
    Height : "height",
    Width : "width"
  }, function(name, type) {
    jQuery.each({
      padding : "inner" + name,
      content : type,
      "" : "outer" + name
    }, function(defaultExtra, original) {
      /**
       * @param {?} margin
       * @param {boolean} dataAndEvents
       * @return {?}
       */
      jQuery.fn[original] = function(margin, dataAndEvents) {
        var chainable = arguments.length && (defaultExtra || "boolean" != typeof margin);
        var value = defaultExtra || (margin === true || dataAndEvents === true ? "margin" : "border");
        return access(this, function(elem, prop, args) {
          var doc;
          return jQuery.isWindow(elem) ? elem.document.documentElement["client" + name] : 9 === elem.nodeType ? (doc = elem.documentElement, Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name])) : void 0 === args ? jQuery.css(elem, prop, value) : jQuery.style(elem, prop, args, value);
        }, type, chainable ? margin : void 0, chainable, null);
      };
    });
  });
  var _jQuery = win.jQuery;
  var _$ = win.$;
  return jQuery.noConflict = function(deep) {
    return win.$ === jQuery && (win.$ = _$), deep && (win.jQuery === jQuery && (win.jQuery = _jQuery)), jQuery;
  }, dataAndEvents || (win.jQuery = win.$ = jQuery), jQuery;
}), function($) {
  $.simplePlaceholder = {
    placeholderClass : null,
    /**
     * @return {undefined}
     */
    hidePlaceholder : function() {
      var $el = $(this);
      if ($el.val() == $el.attr("placeholder")) {
        if ($el.data($.simplePlaceholder.placeholderData)) {
          $el.val("").removeClass($.simplePlaceholder.placeholderClass).data($.simplePlaceholder.placeholderData, false);
        }
      }
    },
    /**
     * @return {undefined}
     */
    showPlaceholder : function() {
      var input = $(this);
      if ("" == input.val()) {
        input.val(input.attr("placeholder")).addClass($.simplePlaceholder.placeholderClass).data($.simplePlaceholder.placeholderData, true);
      }
    },
    /**
     * @return {?}
     */
    preventPlaceholderSubmit : function() {
      return $(this).find(".simple-placeholder").each(function(dataAndEvents) {
        var $el = $(this);
        if ($el.val() == $el.attr("placeholder")) {
          if ($el.data($.simplePlaceholder.placeholderData)) {
            $el.val("");
          }
        }
      }), true;
    }
  };
  /**
   * @param {?} act
   * @return {?}
   */
  $.fn.simplePlaceholder = function(act) {
    if (void 0 == document.createElement("input").placeholder) {
      var attributes = {
        placeholderClass : "placeholding",
        placeholderData : "simplePlaceholder.placeholding"
      };
      if (act) {
        $.extend(attributes, act);
      }
      $.extend($.simplePlaceholder, attributes);
      this.each(function() {
        var input = $(this);
        input.focus($.simplePlaceholder.hidePlaceholder);
        input.blur($.simplePlaceholder.showPlaceholder);
        input.data($.simplePlaceholder.placeholderData, false);
        if ("" == input.val()) {
          input.val(input.attr("placeholder"));
          input.addClass($.simplePlaceholder.placeholderClass);
          input.data($.simplePlaceholder.placeholderData, true);
        }
        input.addClass("simple-placeholder");
        $(this.form).submit($.simplePlaceholder.preventPlaceholderSubmit);
      });
    }
    return this;
  };
}(jQuery), function($, doc, name, originalModel) {
  /**
   * @param {Function} element
   * @param {?} step
   * @param {string} root
   * @return {?}
   */
  function range(element, step, root) {
    return setTimeout(__bind(element, root), step);
  }
  /**
   * @param {string} obj
   * @param {string} sType
   * @param {Object} fn
   * @return {?}
   */
  function apply(obj, sType, fn) {
    return Array.isArray(obj) ? (each(obj, fn[sType], fn), true) : false;
  }
  /**
   * @param {Function} obj
   * @param {Function} iterator
   * @param {Function} context
   * @return {undefined}
   */
  function each(obj, iterator, context) {
    var i;
    if (obj) {
      if (obj.forEach) {
        obj.forEach(iterator, context);
      } else {
        if (obj.length !== originalModel) {
          /** @type {number} */
          i = 0;
          for (;i < obj.length;) {
            iterator.call(context, obj[i], i, obj);
            i++;
          }
        } else {
          for (i in obj) {
            if (obj.hasOwnProperty(i)) {
              iterator.call(context, obj[i], i, obj);
            }
          }
        }
      }
    }
  }
  /**
   * @param {?} opt_attributes
   * @param {?} object
   * @param {string} obj
   * @return {?}
   */
  function equal(opt_attributes, object, obj) {
    /** @type {Array.<string>} */
    var codeSegments = Object.keys(object);
    /** @type {number} */
    var i = 0;
    for (;i < codeSegments.length;) {
      if (!obj || obj && opt_attributes[codeSegments[i]] === originalModel) {
        opt_attributes[codeSegments[i]] = object[codeSegments[i]];
      }
      i++;
    }
    return opt_attributes;
  }
  /**
   * @param {?} first
   * @param {?} second
   * @return {?}
   */
  function extend(first, second) {
    return equal(first, second, true);
  }
  /**
   * @param {Function} child
   * @param {Function} method
   * @param {?} replacementHash
   * @return {undefined}
   */
  function inherit(child, method, replacementHash) {
    var self;
    var parent = method.prototype;
    /** @type {Object} */
    self = child.prototype = Object.create(parent);
    /** @type {Function} */
    self.constructor = child;
    self._super = parent;
    if (replacementHash) {
      equal(self, replacementHash);
    }
  }
  /**
   * @param {Function} fn
   * @param {?} me
   * @return {?}
   */
  function __bind(fn, me) {
    return function() {
      return fn.apply(me, arguments);
    };
  }
  /**
   * @param {?} callback
   * @param {?} args
   * @return {?}
   */
  function swap(callback, args) {
    return typeof callback == string ? callback.apply(args ? args[0] || originalModel : originalModel, args) : callback;
  }
  /**
   * @param {?} model
   * @param {?} resp
   * @return {?}
   */
  function callback(model, resp) {
    return model === originalModel ? resp : model;
  }
  /**
   * @param {string} type
   * @param {Function} value
   * @param {Object} data
   * @return {undefined}
   */
  function addListener(type, value, data) {
    each(trim(value), function(event) {
      type.addEventListener(event, data, false);
    });
  }
  /**
   * @param {string} event
   * @param {string} node
   * @param {string} fn
   * @return {undefined}
   */
  function off(event, node, fn) {
    each(trim(node), function(type) {
      event.removeEventListener(type, fn, false);
    });
  }
  /**
   * @param {Object} pn
   * @param {Object} dataAndEvents
   * @return {?}
   */
  function query(pn, dataAndEvents) {
    for (;pn;) {
      if (pn == dataAndEvents) {
        return true;
      }
      pn = pn.parentNode;
    }
    return false;
  }
  /**
   * @param {string} arg
   * @param {string} name
   * @return {?}
   */
  function require(arg, name) {
    return arg.indexOf(name) > -1;
  }
  /**
   * @param {string} string
   * @return {?}
   */
  function trim(string) {
    return string.trim().split(/\s+/g);
  }
  /**
   * @param {Array} arr
   * @param {string} o
   * @param {boolean} j
   * @return {?}
   */
  function indexOf(arr, o, j) {
    if (arr.indexOf && !j) {
      return arr.indexOf(o);
    }
    /** @type {number} */
    var i = 0;
    for (;i < arr.length;) {
      if (j && arr[i][j] == o || !j && arr[i] === o) {
        return i;
      }
      i++;
    }
    return-1;
  }
  /**
   * @param {?} obj
   * @return {?}
   */
  function toArray(obj) {
    return Array.prototype.slice.call(obj, 0);
  }
  /**
   * @param {Array} array
   * @param {string} key
   * @param {boolean} dataAndEvents
   * @return {?}
   */
  function unique(array, key, dataAndEvents) {
    /** @type {Array} */
    var results = [];
    /** @type {Array} */
    var output = [];
    /** @type {number} */
    var i = 0;
    for (;i < array.length;) {
      var value = key ? array[i][key] : array[i];
      if (indexOf(output, value) < 0) {
        results.push(array[i]);
      }
      output[i] = value;
      i++;
    }
    return dataAndEvents && (results = key ? results.sort(function(a, b) {
      return a[key] > b[key];
    }) : results.sort()), results;
  }
  /**
   * @param {Object} target
   * @param {string} p
   * @return {?}
   */
  function camelize(target, p) {
    var prefix;
    var key;
    var SEPARATOR = p[0].toUpperCase() + p.slice(1);
    /** @type {number} */
    var i = 0;
    for (;i < prefixes.length;) {
      if (prefix = prefixes[i], key = prefix ? prefix + SEPARATOR : p, key in target) {
        return key;
      }
      i++;
    }
    return originalModel;
  }
  /**
   * @return {?}
   */
  function parent() {
    return oa++;
  }
  /**
   * @param {Node} element
   * @return {?}
   */
  function emit(element) {
    var doc = element.ownerDocument;
    return doc.defaultView || doc.parentWindow;
  }
  /**
   * @param {Element} options
   * @param {Function} callback
   * @return {undefined}
   */
  function init(options, callback) {
    var core_indexOf = this;
    /** @type {Element} */
    this.manager = options;
    /** @type {Function} */
    this.callback = callback;
    this.element = options.element;
    this.target = options.options.inputTarget;
    /**
     * @param {Event} qualifier
     * @return {undefined}
     */
    this.domHandler = function(qualifier) {
      if (swap(options.options.enable, [options])) {
        core_indexOf.handler(qualifier);
      }
    };
    this.init();
  }
  /**
   * @param {string} attr
   * @return {?}
   */
  function escape(attr) {
    var finalError;
    var err = attr.options.inputClass;
    return new (finalError = err ? err : hasSuccess ? onSuccess : isMultiLineStringOrPolygon ? Scene : isMultiPointOrLineString ? Game : Model)(attr, finish);
  }
  /**
   * @param {Object} req
   * @param {number} type
   * @param {Object} data
   * @return {undefined}
   */
  function finish(req, type, data) {
    var right = data.pointers.length;
    var left = data.changedPointers.length;
    /** @type {(boolean|number)} */
    var f = type & y && right - left === 0;
    /** @type {(boolean|number)} */
    var g = type & (NUMBER | PERCENT) && right - left === 0;
    /** @type {boolean} */
    data.isFirst = !!f;
    /** @type {boolean} */
    data.isFinal = !!g;
    if (f) {
      req.session = {};
    }
    /** @type {number} */
    data.eventType = type;
    update(req, data);
    req.emit("hammer.input", data);
    req.recognize(data);
    /** @type {Object} */
    req.session.prevInput = data;
  }
  /**
   * @param {Object} req
   * @param {Object} e
   * @return {undefined}
   */
  function update(req, e) {
    var options = req.session;
    var key = e.pointers;
    var ll = key.length;
    if (!options.firstInput) {
      options.firstInput = handler(e);
    }
    if (ll > 1 && !options.firstMultiple) {
      options.firstMultiple = handler(e);
    } else {
      if (1 === ll) {
        /** @type {boolean} */
        options.firstMultiple = false;
      }
    }
    var self = options.firstInput;
    var data = options.firstMultiple;
    var point = data ? data.center : self.center;
    var y1 = e.center = f(key);
    /** @type {number} */
    e.timeStamp = now();
    /** @type {number} */
    e.deltaTime = e.timeStamp - self.timeStamp;
    e.angle = angle(point, y1);
    e.distance = distance(point, y1);
    setData(options, e);
    e.offsetDirection = move(e.deltaX, e.deltaY);
    e.scale = data ? func(data.pointers, key) : 1;
    e.rotation = data ? fn(data.pointers, key) : 0;
    start(options, e);
    var node = req.element;
    if (query(e.srcEvent.target, node)) {
      node = e.srcEvent.target;
    }
    e.target = node;
  }
  /**
   * @param {?} value
   * @param {Object} e
   * @return {undefined}
   */
  function setData(value, e) {
    var center = e.center;
    var lastCenter = value.offsetDelta || {};
    var offsetCoordinate = value.prevDelta || {};
    var ev = value.prevInput || {};
    if (e.eventType === y || ev.eventType === NUMBER) {
      offsetCoordinate = value.prevDelta = {
        x : ev.deltaX || 0,
        y : ev.deltaY || 0
      };
      lastCenter = value.offsetDelta = {
        x : center.x,
        y : center.y
      };
    }
    e.deltaX = offsetCoordinate.x + (center.x - lastCenter.x);
    e.deltaY = offsetCoordinate.y + (center.y - lastCenter.y);
  }
  /**
   * @param {?} dir
   * @param {Object} e
   * @return {undefined}
   */
  function start(dir, e) {
    var velocity;
    var newX;
    var y;
    var value;
    var that = dir.lastInterval || e;
    /** @type {number} */
    var c = e.timeStamp - that.timeStamp;
    if (e.eventType != PERCENT && (c > time || that.velocity === originalModel)) {
      /** @type {number} */
      var index = that.deltaX - e.deltaX;
      /** @type {number} */
      var width = that.deltaY - e.deltaY;
      var pos = cb(c, index, width);
      newX = pos.x;
      y = pos.y;
      velocity = abs(pos.x) > abs(pos.y) ? pos.x : pos.y;
      value = move(index, width);
      /** @type {Object} */
      dir.lastInterval = e;
    } else {
      velocity = that.velocity;
      newX = that.velocityX;
      y = that.velocityY;
      value = that.direction;
    }
    e.velocity = velocity;
    e.velocityX = newX;
    e.velocityY = y;
    e.direction = value;
  }
  /**
   * @param {Object} e
   * @return {?}
   */
  function handler(e) {
    /** @type {Array} */
    var touches = [];
    /** @type {number} */
    var i = 0;
    for (;i < e.pointers.length;) {
      touches[i] = {
        clientX : floor(e.pointers[i].clientX),
        clientY : floor(e.pointers[i].clientY)
      };
      i++;
    }
    return{
      timeStamp : now(),
      pointers : touches,
      center : f(touches),
      deltaX : e.deltaX,
      deltaY : e.deltaY
    };
  }
  /**
   * @param {Array} touches
   * @return {?}
   */
  function f(touches) {
    var l = touches.length;
    if (1 === l) {
      return{
        x : floor(touches[0].clientX),
        y : floor(touches[0].clientY)
      };
    }
    /** @type {number} */
    var x = 0;
    /** @type {number} */
    var y = 0;
    /** @type {number} */
    var i = 0;
    for (;l > i;) {
      x += touches[i].clientX;
      y += touches[i].clientY;
      i++;
    }
    return{
      x : floor(x / l),
      y : floor(y / l)
    };
  }
  /**
   * @param {number} res
   * @param {number} x
   * @param {number} y
   * @return {?}
   */
  function cb(res, x, y) {
    return{
      x : x / res || 0,
      y : y / res || 0
    };
  }
  /**
   * @param {number} x
   * @param {number} y
   * @return {?}
   */
  function move(x, y) {
    return x === y ? i : abs(x) >= abs(y) ? x > 0 ? right : left : y > 0 ? down : up;
  }
  /**
   * @param {?} b
   * @param {?} c
   * @param {Array} a
   * @return {?}
   */
  function distance(b, c, a) {
    if (!a) {
      /** @type {Array} */
      a = newList;
    }
    /** @type {number} */
    var z0 = c[a[0]] - b[a[0]];
    /** @type {number} */
    var z1 = c[a[1]] - b[a[1]];
    return Math.sqrt(z0 * z0 + z1 * z1);
  }
  /**
   * @param {?} obj
   * @param {?} end
   * @param {Array} items
   * @return {?}
   */
  function angle(obj, end, items) {
    if (!items) {
      /** @type {Array} */
      items = newList;
    }
    /** @type {number} */
    var dy = end[items[0]] - obj[items[0]];
    /** @type {number} */
    var sinAlpha = end[items[1]] - obj[items[1]];
    return 180 * Math.atan2(sinAlpha, dy) / Math.PI;
  }
  /**
   * @param {Array} points
   * @param {Array} event
   * @return {?}
   */
  function fn(points, event) {
    return angle(event[1], event[0], x3) - angle(points[1], points[0], x3);
  }
  /**
   * @param {Array} dataObj
   * @param {Array} keepData
   * @return {?}
   */
  function func(dataObj, keepData) {
    return distance(keepData[0], keepData[1], x3) / distance(dataObj[0], dataObj[1], x3);
  }
  /**
   * @return {undefined}
   */
  function Model() {
    /** @type {string} */
    this.evEl = mousedown;
    /** @type {string} */
    this.evWin = Oa;
    /** @type {boolean} */
    this.allow = true;
    /** @type {boolean} */
    this.pressed = false;
    init.apply(this, arguments);
  }
  /**
   * @return {undefined}
   */
  function onSuccess() {
    this.evEl = EVENT_START;
    this.evWin = evWin;
    init.apply(this, arguments);
    /** @type {Array} */
    this.store = this.manager.session.pointerEvents = [];
  }
  /**
   * @return {undefined}
   */
  function self() {
    /** @type {string} */
    this.evTarget = touchstart;
    /** @type {string} */
    this.evWin = Va;
    /** @type {boolean} */
    this.started = false;
    init.apply(this, arguments);
  }
  /**
   * @param {Event} e
   * @param {number} type
   * @return {?}
   */
  function listener(e, type) {
    var list = toArray(e.touches);
    var css = toArray(e.changedTouches);
    return type & (NUMBER | PERCENT) && (list = unique(list.concat(css), "identifier", true)), [list, css];
  }
  /**
   * @return {undefined}
   */
  function Scene() {
    /** @type {string} */
    this.evTarget = evTarget;
    this.targetIds = {};
    init.apply(this, arguments);
  }
  /**
   * @param {Event} e
   * @param {number} type
   * @return {?}
   */
  function delegate(e, type) {
    var list = toArray(e.touches);
    var validTouchIds = this.targetIds;
    if (type & (y | setValueFromPos) && 1 === list.length) {
      return validTouchIds[list[0].identifier] = true, [list, list];
    }
    var i;
    var codeSegments;
    var resultItems = toArray(e.changedTouches);
    /** @type {Array} */
    var links = [];
    var node = this.target;
    if (codeSegments = list.filter(function(evt) {
      return query(evt.target, node);
    }), type === y) {
      /** @type {number} */
      i = 0;
      for (;i < codeSegments.length;) {
        /** @type {boolean} */
        validTouchIds[codeSegments[i].identifier] = true;
        i++;
      }
    }
    /** @type {number} */
    i = 0;
    for (;i < resultItems.length;) {
      if (validTouchIds[resultItems[i].identifier]) {
        links.push(resultItems[i]);
      }
      if (type & (NUMBER | PERCENT)) {
        delete validTouchIds[resultItems[i].identifier];
      }
      i++;
    }
    return links.length ? [unique(codeSegments.concat(links), "identifier", true), links] : void 0;
  }
  /**
   * @return {undefined}
   */
  function Game() {
    init.apply(this, arguments);
    var gl = __bind(this.handler, this);
    this.touch = new Scene(this.manager, gl);
    this.mouse = new Model(this.manager, gl);
  }
  /**
   * @param {?} manager
   * @param {?} ol
   * @return {undefined}
   */
  function constructor(manager, ol) {
    this.manager = manager;
    this.set(ol);
  }
  /**
   * @param {string} env
   * @return {?}
   */
  function prepare(env) {
    if (require(env, obj)) {
      return obj;
    }
    var a = require(env, value);
    var b = require(env, options);
    return a && b ? value + " " + options : a || b ? a ? value : options : require(env, rvar) ? rvar : AUTO;
  }
  /**
   * @param {Object} config
   * @return {undefined}
   */
  function initialize(config) {
    this.id = parent();
    /** @type {null} */
    this.manager = null;
    this.options = extend(config || {}, this.defaults);
    this.options.enable = callback(this.options.enable, true);
    /** @type {number} */
    this.state = st;
    this.simultaneous = {};
    /** @type {Array} */
    this.requireFail = [];
  }
  /**
   * @param {number} n
   * @return {?}
   */
  function read(n) {
    return n & STATE_CANCELLED ? "cancel" : n & r ? "end" : n & STATE_CHANGED ? "move" : n & w_mask ? "start" : "";
  }
  /**
   * @param {number} dir
   * @return {?}
   */
  function setDirection(dir) {
    return dir == up ? "down" : dir == down ? "up" : dir == right ? "left" : dir == left ? "right" : "";
  }
  /**
   * @param {string} klass
   * @param {Object} child
   * @return {?}
   */
  function load(klass, child) {
    var manager = child.manager;
    return manager ? manager.get(klass) : klass;
  }
  /**
   * @return {undefined}
   */
  function template() {
    initialize.apply(this, arguments);
  }
  /**
   * @return {undefined}
   */
  function Sprite() {
    template.apply(this, arguments);
    /** @type {null} */
    this.pX = null;
    /** @type {null} */
    this.pY = null;
  }
  /**
   * @return {undefined}
   */
  function g() {
    template.apply(this, arguments);
  }
  /**
   * @return {undefined}
   */
  function Parser() {
    initialize.apply(this, arguments);
    /** @type {null} */
    this._timer = null;
    /** @type {null} */
    this._input = null;
  }
  /**
   * @return {undefined}
   */
  function SrcCell() {
    template.apply(this, arguments);
  }
  /**
   * @return {undefined}
   */
  function frag() {
    template.apply(this, arguments);
  }
  /**
   * @return {undefined}
   */
  function AnimatedSprite() {
    initialize.apply(this, arguments);
    /** @type {boolean} */
    this.pTime = false;
    /** @type {boolean} */
    this.pCenter = false;
    /** @type {null} */
    this._timer = null;
    /** @type {null} */
    this._input = null;
    /** @type {number} */
    this.count = 0;
  }
  /**
   * @param {string} name
   * @param {Object} value
   * @return {?}
   */
  function data(name, value) {
    return value = value || {}, value.recognizers = callback(value.recognizers, data.defaults.preset), new add(name, value);
  }
  /**
   * @param {?} element
   * @param {Object} options
   * @return {undefined}
   */
  function add(element, options) {
    options = options || {};
    this.options = extend(options, data.defaults);
    this.options.inputTarget = this.options.inputTarget || element;
    this.handlers = {};
    this.session = {};
    /** @type {Array} */
    this.recognizers = [];
    this.element = element;
    this.input = escape(this);
    this.touchAction = new constructor(this, this.options.touchAction);
    run(this, true);
    each(options.recognizers, function(duplicates) {
      var results = this.add(new duplicates[0](duplicates[1]));
      if (duplicates[2]) {
        results.recognizeWith(duplicates[2]);
      }
      if (duplicates[3]) {
        results.requireFailure(duplicates[3]);
      }
    }, this);
  }
  /**
   * @param {Element} spec
   * @param {boolean} optional
   * @return {undefined}
   */
  function run(spec, optional) {
    var element = spec.element;
    each(spec.options.cssProps, function(match, property) {
      element.style[camelize(element.style, property)] = optional ? match : "";
    });
  }
  /**
   * @param {string} type
   * @param {Object} e
   * @return {undefined}
   */
  function createEvent(type, e) {
    /** @type {(Event|null)} */
    var event = doc.createEvent("Event");
    event.initEvent(type, true, true);
    /** @type {Object} */
    event.gesture = e;
    e.target.dispatchEvent(event);
  }
  /** @type {Array} */
  var prefixes = ["", "webkit", "moz", "MS", "ms", "o"];
  /** @type {Element} */
  var element = doc.createElement("div");
  /** @type {string} */
  var string = "function";
  /** @type {function (*): number} */
  var floor = Math.round;
  /** @type {function (*): number} */
  var abs = Math.abs;
  /** @type {function (): number} */
  var now = Date.now;
  /** @type {number} */
  var oa = 1;
  /** @type {RegExp} */
  var regExp_appleDevice = /mobile|tablet|ip(ad|hone|od)|android/i;
  /** @type {boolean} */
  var isMultiPointOrLineString = "ontouchstart" in $;
  /** @type {boolean} */
  var hasSuccess = camelize($, "PointerEvent") !== originalModel;
  /** @type {boolean} */
  var isMultiLineStringOrPolygon = isMultiPointOrLineString && regExp_appleDevice.test(navigator.userAgent);
  /** @type {string} */
  var h = "touch";
  /** @type {string} */
  var POINTER_TYPE_PEN = "pen";
  /** @type {string} */
  var arrayClass = "mouse";
  /** @type {string} */
  var kinect = "kinect";
  /** @type {number} */
  var time = 25;
  /** @type {number} */
  var y = 1;
  /** @type {number} */
  var setValueFromPos = 2;
  /** @type {number} */
  var NUMBER = 4;
  /** @type {number} */
  var PERCENT = 8;
  /** @type {number} */
  var i = 1;
  /** @type {number} */
  var right = 2;
  /** @type {number} */
  var left = 4;
  /** @type {number} */
  var down = 8;
  /** @type {number} */
  var up = 16;
  /** @type {number} */
  var LENGTH_MASK = right | left;
  /** @type {number} */
  var LABEL_POINTER = down | up;
  /** @type {number} */
  var rev = LENGTH_MASK | LABEL_POINTER;
  /** @type {Array} */
  var newList = ["x", "y"];
  /** @type {Array} */
  var x3 = ["clientX", "clientY"];
  init.prototype = {
    /**
     * @return {undefined}
     */
    handler : function() {
    },
    /**
     * @return {undefined}
     */
    init : function() {
      if (this.evEl) {
        addListener(this.element, this.evEl, this.domHandler);
      }
      if (this.evTarget) {
        addListener(this.target, this.evTarget, this.domHandler);
      }
      if (this.evWin) {
        addListener(emit(this.element), this.evWin, this.domHandler);
      }
    },
    /**
     * @return {undefined}
     */
    destroy : function() {
      if (this.evEl) {
        off(this.element, this.evEl, this.domHandler);
      }
      if (this.evTarget) {
        off(this.target, this.evTarget, this.domHandler);
      }
      if (this.evWin) {
        off(emit(this.element), this.evWin, this.domHandler);
      }
    }
  };
  var events = {
    mousedown : y,
    mousemove : setValueFromPos,
    mouseup : NUMBER
  };
  /** @type {string} */
  var mousedown = "mousedown";
  /** @type {string} */
  var Oa = "mousemove mouseup";
  inherit(Model, init, {
    /**
     * @param {Event} event
     * @return {undefined}
     */
    handler : function(event) {
      var rvar = events[event.type];
      if (rvar & y) {
        if (0 === event.button) {
          /** @type {boolean} */
          this.pressed = true;
        }
      }
      if (rvar & setValueFromPos) {
        if (1 !== event.which) {
          /** @type {number} */
          rvar = NUMBER;
        }
      }
      if (this.pressed) {
        if (this.allow) {
          if (rvar & NUMBER) {
            /** @type {boolean} */
            this.pressed = false;
          }
          this.callback(this.manager, rvar, {
            pointers : [event],
            changedPointers : [event],
            pointerType : arrayClass,
            srcEvent : event
          });
        }
      }
    }
  });
  var handlers = {
    pointerdown : y,
    pointermove : setValueFromPos,
    pointerup : NUMBER,
    pointercancel : PERCENT,
    pointerout : PERCENT
  };
  var eventMapping = {
    2 : h,
    3 : POINTER_TYPE_PEN,
    4 : arrayClass,
    5 : kinect
  };
  /** @type {string} */
  var EVENT_START = "pointerdown";
  /** @type {string} */
  var evWin = "pointermove pointerup pointercancel";
  if ($.MSPointerEvent) {
    /** @type {string} */
    EVENT_START = "MSPointerDown";
    /** @type {string} */
    evWin = "MSPointerMove MSPointerUp MSPointerCancel";
  }
  inherit(onSuccess, init, {
    /**
     * @param {Event} event
     * @return {undefined}
     */
    handler : function(event) {
      var events = this.store;
      /** @type {boolean} */
      var c = false;
      var ext = event.type.toLowerCase().replace("ms", "");
      var type = handlers[ext];
      var orn = eventMapping[event.pointerType] || event.pointerType;
      /** @type {boolean} */
      var horizontal = orn == h;
      var index = indexOf(events, event.pointerId, "pointerId");
      if (type & y && (0 === event.button || horizontal)) {
        if (0 > index) {
          events.push(event);
          /** @type {number} */
          index = events.length - 1;
        }
      } else {
        if (type & (NUMBER | PERCENT)) {
          /** @type {boolean} */
          c = true;
        }
      }
      if (!(0 > index)) {
        /** @type {Event} */
        events[index] = event;
        this.callback(this.manager, type, {
          pointers : events,
          changedPointers : [event],
          pointerType : orn,
          srcEvent : event
        });
        if (c) {
          events.splice(index, 1);
        }
      }
    }
  });
  var touchEvents = {
    touchstart : y,
    touchmove : setValueFromPos,
    touchend : NUMBER,
    touchcancel : PERCENT
  };
  /** @type {string} */
  var touchstart = "touchstart";
  /** @type {string} */
  var Va = "touchstart touchmove touchend touchcancel";
  inherit(self, init, {
    /**
     * @param {Event} event
     * @return {undefined}
     */
    handler : function(event) {
      var res = touchEvents[event.type];
      if (res === y && (this.started = true), this.started) {
        var result = listener.call(this, event, res);
        if (res & (NUMBER | PERCENT)) {
          if (result[0].length - result[1].length === 0) {
            /** @type {boolean} */
            this.started = false;
          }
        }
        this.callback(this.manager, res, {
          pointers : result[0],
          changedPointers : result[1],
          pointerType : h,
          srcEvent : event
        });
      }
    }
  });
  var mouseEvents = {
    touchstart : y,
    touchmove : setValueFromPos,
    touchend : NUMBER,
    touchcancel : PERCENT
  };
  /** @type {string} */
  var evTarget = "touchstart touchmove touchend touchcancel";
  inherit(Scene, init, {
    /**
     * @param {Event} event
     * @return {undefined}
     */
    handler : function(event) {
      var i = mouseEvents[event.type];
      var ret = delegate.call(this, event, i);
      if (ret) {
        this.callback(this.manager, i, {
          pointers : ret[0],
          changedPointers : ret[1],
          pointerType : h,
          srcEvent : event
        });
      }
    }
  });
  inherit(Game, init, {
    /**
     * @param {Object} event
     * @param {number} type
     * @param {number} attributes
     * @return {undefined}
     */
    handler : function(event, type, attributes) {
      /** @type {boolean} */
      var horizontal = attributes.pointerType == h;
      /** @type {boolean} */
      var isArr = attributes.pointerType == arrayClass;
      if (horizontal) {
        /** @type {boolean} */
        this.mouse.allow = false;
      } else {
        if (isArr && !this.mouse.allow) {
          return;
        }
      }
      if (type & (NUMBER | PERCENT)) {
        /** @type {boolean} */
        this.mouse.allow = true;
      }
      this.callback(event, type, attributes);
    },
    /**
     * @return {undefined}
     */
    destroy : function() {
      this.touch.destroy();
      this.mouse.destroy();
    }
  });
  var transitionProp = camelize(element.style, "touchAction");
  /** @type {boolean} */
  var usingTransitions = transitionProp !== originalModel;
  /** @type {string} */
  var touchAction = "compute";
  /** @type {string} */
  var AUTO = "auto";
  /** @type {string} */
  var rvar = "manipulation";
  /** @type {string} */
  var obj = "none";
  /** @type {string} */
  var value = "pan-x";
  /** @type {string} */
  var options = "pan-y";
  constructor.prototype = {
    /**
     * @param {?} elem
     * @return {undefined}
     */
    set : function(elem) {
      if (elem == touchAction) {
        elem = this.compute();
      }
      if (usingTransitions) {
        this.manager.element.style[transitionProp] = elem;
      }
      this.actions = elem.toLowerCase().trim();
    },
    /**
     * @return {undefined}
     */
    update : function() {
      this.set(this.manager.options.touchAction);
    },
    /**
     * @return {?}
     */
    compute : function() {
      /** @type {Array} */
      var l = [];
      return each(this.manager.recognizers, function(map) {
        if (swap(map.options.enable, [map])) {
          l = l.concat(map.getTouchAction());
        }
      }), prepare(l.join(" "));
    },
    /**
     * @param {Object} e
     * @return {?}
     */
    preventDefaults : function(e) {
      if (!usingTransitions) {
        var originalEvent = e.srcEvent;
        var len = e.offsetDirection;
        if (this.manager.session.prevented) {
          return void originalEvent.preventDefault();
        }
        var url = this.actions;
        var i = require(url, obj);
        var target = require(url, options);
        var result = require(url, value);
        return i || (target && len & LENGTH_MASK || result && len & LABEL_POINTER) ? this.preventSrc(originalEvent) : void 0;
      }
    },
    /**
     * @param {?} e
     * @return {undefined}
     */
    preventSrc : function(e) {
      /** @type {boolean} */
      this.manager.session.prevented = true;
      e.preventDefault();
    }
  };
  /** @type {number} */
  var st = 1;
  /** @type {number} */
  var w_mask = 2;
  /** @type {number} */
  var STATE_CHANGED = 4;
  /** @type {number} */
  var r = 8;
  /** @type {number} */
  var state = r;
  /** @type {number} */
  var STATE_CANCELLED = 16;
  /** @type {number} */
  var getCurveIntersections = 32;
  initialize.prototype = {
    defaults : {},
    /**
     * @param {?} elem
     * @return {?}
     */
    set : function(elem) {
      return equal(this.options, elem), this.manager && this.manager.touchAction.update(), this;
    },
    /**
     * @param {Object} value
     * @return {?}
     */
    recognizeWith : function(value) {
      if (apply(value, "recognizeWith", this)) {
        return this;
      }
      var newDeviceListLookup = this.simultaneous;
      return value = load(value, this), newDeviceListLookup[value.id] || (newDeviceListLookup[value.id] = value, value.recognizeWith(this)), this;
    },
    /**
     * @param {Object} value
     * @return {?}
     */
    dropRecognizeWith : function(value) {
      return apply(value, "dropRecognizeWith", this) ? this : (value = load(value, this), delete this.simultaneous[value.id], this);
    },
    /**
     * @param {string} value
     * @return {?}
     */
    requireFailure : function(value) {
      if (apply(value, "requireFailure", this)) {
        return this;
      }
      var seen = this.requireFail;
      return value = load(value, this), -1 === indexOf(seen, value) && (seen.push(value), value.requireFailure(this)), this;
    },
    /**
     * @param {Text} value
     * @return {?}
     */
    dropRequireFailure : function(value) {
      if (apply(value, "dropRequireFailure", this)) {
        return this;
      }
      value = load(value, this);
      var index = indexOf(this.requireFail, value);
      return index > -1 && this.requireFail.splice(index, 1), this;
    },
    /**
     * @return {?}
     */
    hasRequireFailures : function() {
      return this.requireFail.length > 0;
    },
    /**
     * @param {Element} other
     * @return {?}
     */
    canRecognizeWith : function(other) {
      return!!this.simultaneous[other.id];
    },
    /**
     * @param {string} data
     * @return {undefined}
     */
    emit : function(data) {
      /**
       * @param {boolean} dataAndEvents
       * @return {undefined}
       */
      function handler(dataAndEvents) {
        self.manager.emit(self.options.event + (dataAndEvents ? read(l) : ""), data);
      }
      var self = this;
      var l = this.state;
      if (r > l) {
        handler(true);
      }
      handler();
      if (l >= r) {
        handler(true);
      }
    },
    /**
     * @param {string} memory
     * @return {?}
     */
    tryEmit : function(memory) {
      return this.canEmit() ? this.emit(memory) : void(this.state = getCurveIntersections);
    },
    /**
     * @return {?}
     */
    canEmit : function() {
      /** @type {number} */
      var j = 0;
      for (;j < this.requireFail.length;) {
        if (!(this.requireFail[j].state & (getCurveIntersections | st))) {
          return false;
        }
        j++;
      }
      return true;
    },
    /**
     * @param {Object} s
     * @return {?}
     */
    recognize : function(s) {
      var events = equal({}, s);
      return swap(this.options.enable, [this, events]) ? (this.state & (state | STATE_CANCELLED | getCurveIntersections) && (this.state = st), this.state = this.process(events), void(this.state & (w_mask | STATE_CHANGED | r | STATE_CANCELLED) && this.tryEmit(events))) : (this.reset(), void(this.state = getCurveIntersections));
    },
    /**
     * @param {?} ev
     * @return {undefined}
     */
    process : function(ev) {
    },
    /**
     * @return {undefined}
     */
    getTouchAction : function() {
    },
    /**
     * @return {undefined}
     */
    reset : function() {
    }
  };
  inherit(template, initialize, {
    defaults : {
      pointers : 1
    },
    /**
     * @param {Object} dest
     * @return {?}
     */
    attrTest : function(dest) {
      var value = this.options.pointers;
      return 0 === value || dest.pointers.length === value;
    },
    /**
     * @param {Object} ev
     * @return {?}
     */
    process : function(ev) {
      var state = this.state;
      var url = ev.eventType;
      /** @type {number} */
      var linear1 = state & (w_mask | STATE_CHANGED);
      var linear2 = this.attrTest(ev);
      return linear1 && (url & PERCENT || !linear2) ? state | STATE_CANCELLED : linear1 || linear2 ? url & NUMBER ? state | r : state & w_mask ? state | STATE_CHANGED : w_mask : getCurveIntersections;
    }
  });
  inherit(Sprite, template, {
    defaults : {
      event : "pan",
      threshold : 10,
      pointers : 1,
      direction : rev
    },
    /**
     * @return {?}
     */
    getTouchAction : function() {
      var len = this.options.direction;
      /** @type {Array} */
      var bucket = [];
      return len & LENGTH_MASK && bucket.push(options), len & LABEL_POINTER && bucket.push(value), bucket;
    },
    /**
     * @param {Object} options
     * @return {?}
     */
    directionTest : function(options) {
      var settings = this.options;
      /** @type {boolean} */
      var n = true;
      var distance = options.distance;
      var direction = options.direction;
      var item = options.deltaX;
      var to = options.deltaY;
      return direction & settings.direction || (settings.direction & LENGTH_MASK ? (direction = 0 === item ? i : 0 > item ? right : left, n = item != this.pX, distance = Math.abs(options.deltaX)) : (direction = 0 === to ? i : 0 > to ? down : up, n = to != this.pY, distance = Math.abs(options.deltaY))), options.direction = direction, n && (distance > settings.threshold && direction & settings.direction);
    },
    /**
     * @param {Object} ev
     * @return {?}
     */
    attrTest : function(ev) {
      return template.prototype.attrTest.call(this, ev) && (this.state & w_mask || !(this.state & w_mask) && this.directionTest(ev));
    },
    /**
     * @param {Object} data
     * @return {undefined}
     */
    emit : function(data) {
      this.pX = data.deltaX;
      this.pY = data.deltaY;
      var event = setDirection(data.direction);
      if (event) {
        this.manager.emit(this.options.event + event, data);
      }
      this._super.emit.call(this, data);
    }
  });
  inherit(g, template, {
    defaults : {
      event : "pinch",
      threshold : 0,
      pointers : 2
    },
    /**
     * @return {?}
     */
    getTouchAction : function() {
      return[obj];
    },
    /**
     * @param {Object} ev
     * @return {?}
     */
    attrTest : function(ev) {
      return this._super.attrTest.call(this, ev) && (Math.abs(ev.scale - 1) > this.options.threshold || this.state & w_mask);
    },
    /**
     * @param {?} data
     * @return {undefined}
     */
    emit : function(data) {
      if (this._super.emit.call(this, data), 1 !== data.scale) {
        /** @type {string} */
        var type = data.scale < 1 ? "in" : "out";
        this.manager.emit(this.options.event + type, data);
      }
    }
  });
  inherit(Parser, initialize, {
    defaults : {
      event : "press",
      pointers : 1,
      time : 500,
      threshold : 5
    },
    /**
     * @return {?}
     */
    getTouchAction : function() {
      return[AUTO];
    },
    /**
     * @param {string} ev
     * @return {?}
     */
    process : function(ev) {
      var options = this.options;
      /** @type {boolean} */
      var c = ev.pointers.length === options.pointers;
      /** @type {boolean} */
      var d = ev.distance < options.threshold;
      /** @type {boolean} */
      var f = ev.deltaTime > options.time;
      if (this._input = ev, !d || (!c || ev.eventType & (NUMBER | PERCENT) && !f)) {
        this.reset();
      } else {
        if (ev.eventType & y) {
          this.reset();
          this._timer = range(function() {
            /** @type {number} */
            this.state = state;
            this.tryEmit();
          }, options.time, this);
        } else {
          if (ev.eventType & NUMBER) {
            return state;
          }
        }
      }
      return getCurveIntersections;
    },
    /**
     * @return {undefined}
     */
    reset : function() {
      clearTimeout(this._timer);
    },
    /**
     * @param {?} data
     * @return {undefined}
     */
    emit : function(data) {
      if (this.state === state) {
        if (data && data.eventType & NUMBER) {
          this.manager.emit(this.options.event + "up", data);
        } else {
          /** @type {number} */
          this._input.timeStamp = now();
          this.manager.emit(this.options.event, this._input);
        }
      }
    }
  });
  inherit(SrcCell, template, {
    defaults : {
      event : "rotate",
      threshold : 0,
      pointers : 2
    },
    /**
     * @return {?}
     */
    getTouchAction : function() {
      return[obj];
    },
    /**
     * @param {Object} ev
     * @return {?}
     */
    attrTest : function(ev) {
      return this._super.attrTest.call(this, ev) && (Math.abs(ev.rotation) > this.options.threshold || this.state & w_mask);
    }
  });
  inherit(frag, template, {
    defaults : {
      event : "swipe",
      threshold : 10,
      velocity : 0.65,
      direction : LENGTH_MASK | LABEL_POINTER,
      pointers : 1
    },
    /**
     * @return {?}
     */
    getTouchAction : function() {
      return Sprite.prototype.getTouchAction.call(this);
    },
    /**
     * @param {Object} e
     * @return {?}
     */
    attrTest : function(e) {
      var distance;
      var len = this.options.direction;
      return len & (LENGTH_MASK | LABEL_POINTER) ? distance = e.velocity : len & LENGTH_MASK ? distance = e.velocityX : len & LABEL_POINTER && (distance = e.velocityY), this._super.attrTest.call(this, e) && (len & e.direction && (e.distance > this.options.threshold && (abs(distance) > this.options.velocity && e.eventType & NUMBER)));
    },
    /**
     * @param {?} data
     * @return {undefined}
     */
    emit : function(data) {
      var event = setDirection(data.direction);
      if (event) {
        this.manager.emit(this.options.event + event, data);
      }
      this.manager.emit(this.options.event, data);
    }
  });
  inherit(AnimatedSprite, initialize, {
    defaults : {
      event : "tap",
      pointers : 1,
      taps : 1,
      interval : 300,
      time : 250,
      threshold : 2,
      posThreshold : 10
    },
    /**
     * @return {?}
     */
    getTouchAction : function() {
      return[rvar];
    },
    /**
     * @param {string} ev
     * @return {?}
     */
    process : function(ev) {
      var options = this.options;
      /** @type {boolean} */
      var c = ev.pointers.length === options.pointers;
      /** @type {boolean} */
      var m = ev.distance < options.threshold;
      /** @type {boolean} */
      var k = ev.deltaTime < options.time;
      if (this.reset(), ev.eventType & y && 0 === this.count) {
        return this.failTimeout();
      }
      if (m && (k && c)) {
        if (ev.eventType != NUMBER) {
          return this.failTimeout();
        }
        /** @type {boolean} */
        var b = this.pTime ? ev.timeStamp - this.pTime < options.interval : true;
        /** @type {boolean} */
        var a = !this.pCenter || distance(this.pCenter, ev.center) < options.posThreshold;
        this.pTime = ev.timeStamp;
        this.pCenter = ev.center;
        if (a && b) {
          this.count += 1;
        } else {
          /** @type {number} */
          this.count = 1;
        }
        /** @type {string} */
        this._input = ev;
        /** @type {number} */
        var count = this.count % options.taps;
        if (0 === count) {
          return this.hasRequireFailures() ? (this._timer = range(function() {
            /** @type {number} */
            this.state = state;
            this.tryEmit();
          }, options.interval, this), w_mask) : state;
        }
      }
      return getCurveIntersections;
    },
    /**
     * @return {?}
     */
    failTimeout : function() {
      return this._timer = range(function() {
        /** @type {number} */
        this.state = getCurveIntersections;
      }, this.options.interval, this), getCurveIntersections;
    },
    /**
     * @return {undefined}
     */
    reset : function() {
      clearTimeout(this._timer);
    },
    /**
     * @return {undefined}
     */
    emit : function() {
      if (this.state == state) {
        this._input.tapCount = this.count;
        this.manager.emit(this.options.event, this._input);
      }
    }
  });
  /** @type {string} */
  data.VERSION = "2.0.4";
  data.defaults = {
    domEvents : false,
    touchAction : touchAction,
    enable : true,
    inputTarget : null,
    inputClass : null,
    preset : [[SrcCell, {
      enable : false
    }], [g, {
      enable : false
    }, ["rotate"]], [frag, {
      direction : LENGTH_MASK
    }], [Sprite, {
      direction : LENGTH_MASK
    }, ["swipe"]], [AnimatedSprite], [AnimatedSprite, {
      event : "doubletap",
      taps : 2
    }, ["tap"]], [Parser]],
    cssProps : {
      userSelect : "none",
      touchSelect : "none",
      touchCallout : "none",
      contentZooming : "none",
      userDrag : "none",
      tapHighlightColor : "rgba(0,0,0,0)"
    }
  };
  /** @type {number} */
  var id = 1;
  /** @type {number} */
  var EADDRINUSE = 2;
  add.prototype = {
    /**
     * @param {?} elem
     * @return {?}
     */
    set : function(elem) {
      return equal(this.options, elem), elem.touchAction && this.touchAction.update(), elem.inputTarget && (this.input.destroy(), this.input.target = elem.inputTarget, this.input.init()), this;
    },
    /**
     * @param {string} name
     * @return {undefined}
     */
    stop : function(name) {
      /** @type {number} */
      this.session.stopped = name ? EADDRINUSE : id;
    },
    /**
     * @param {Object} url
     * @return {undefined}
     */
    recognize : function(url) {
      var e = this.session;
      if (!e.stopped) {
        this.touchAction.preventDefaults(url);
        var child;
        var codeSegments = this.recognizers;
        var options = e.curRecognizer;
        if (!options || options && options.state & state) {
          /** @type {null} */
          options = e.curRecognizer = null;
        }
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;) {
          child = codeSegments[i];
          if (e.stopped === EADDRINUSE || options && (child != options && !child.canRecognizeWith(options))) {
            child.reset();
          } else {
            child.recognize(url);
          }
          if (!options) {
            if (child.state & (w_mask | STATE_CHANGED | r)) {
              options = e.curRecognizer = child;
            }
          }
          i++;
        }
      }
    },
    /**
     * @param {string} name
     * @return {?}
     */
    get : function(name) {
      if (name instanceof initialize) {
        return name;
      }
      var codeSegments = this.recognizers;
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        if (codeSegments[i].options.event == name) {
          return codeSegments[i];
        }
      }
      return null;
    },
    /**
     * @param {string} selector
     * @return {?}
     */
    add : function(selector) {
      if (apply(selector, "add", this)) {
        return this;
      }
      var optgroup = this.get(selector.options.event);
      return optgroup && this.remove(optgroup), this.recognizers.push(selector), selector.manager = this, this.touchAction.update(), selector;
    },
    /**
     * @param {string} name
     * @return {?}
     */
    remove : function(name) {
      if (apply(name, "remove", this)) {
        return this;
      }
      var listeners = this.recognizers;
      return name = this.get(name), listeners.splice(indexOf(listeners, name), 1), this.touchAction.update(), this;
    },
    /**
     * @param {string} type
     * @param {Function} value
     * @return {?}
     */
    on : function(type, value) {
      var handlers = this.handlers;
      return each(trim(type), function(event) {
        handlers[event] = handlers[event] || [];
        handlers[event].push(value);
      }), this;
    },
    /**
     * @param {string} type
     * @param {string} callback
     * @return {?}
     */
    off : function(type, callback) {
      var handlers = this.handlers;
      return each(trim(type), function(type) {
        if (callback) {
          handlers[type].splice(indexOf(handlers[type], callback), 1);
        } else {
          delete handlers[type];
        }
      }), this;
    },
    /**
     * @param {string} type
     * @param {Object} data
     * @return {undefined}
     */
    emit : function(type, data) {
      if (this.options.domEvents) {
        createEvent(type, data);
      }
      var listeners = this.handlers[type] && this.handlers[type].slice();
      if (listeners && listeners.length) {
        /** @type {string} */
        data.type = type;
        /**
         * @return {undefined}
         */
        data.preventDefault = function() {
          data.srcEvent.preventDefault();
        };
        /** @type {number} */
        var i = 0;
        for (;i < listeners.length;) {
          listeners[i](data);
          i++;
        }
      }
    },
    /**
     * @return {undefined}
     */
    destroy : function() {
      if (this.element) {
        run(this, false);
      }
      this.handlers = {};
      this.session = {};
      this.input.destroy();
      /** @type {null} */
      this.element = null;
    }
  };
  equal(data, {
    INPUT_START : y,
    INPUT_MOVE : setValueFromPos,
    INPUT_END : NUMBER,
    INPUT_CANCEL : PERCENT,
    STATE_POSSIBLE : st,
    STATE_BEGAN : w_mask,
    STATE_CHANGED : STATE_CHANGED,
    STATE_ENDED : r,
    STATE_RECOGNIZED : state,
    STATE_CANCELLED : STATE_CANCELLED,
    STATE_FAILED : getCurveIntersections,
    DIRECTION_NONE : i,
    DIRECTION_LEFT : right,
    DIRECTION_RIGHT : left,
    DIRECTION_UP : down,
    DIRECTION_DOWN : up,
    DIRECTION_HORIZONTAL : LENGTH_MASK,
    DIRECTION_VERTICAL : LABEL_POINTER,
    DIRECTION_ALL : rev,
    /** @type {function (?, Object): undefined} */
    Manager : add,
    /** @type {function (Element, Function): undefined} */
    Input : init,
    /** @type {function (?, ?): undefined} */
    TouchAction : constructor,
    /** @type {function (): undefined} */
    TouchInput : Scene,
    /** @type {function (): undefined} */
    MouseInput : Model,
    /** @type {function (): undefined} */
    PointerEventInput : onSuccess,
    /** @type {function (): undefined} */
    TouchMouseInput : Game,
    /** @type {function (): undefined} */
    SingleTouchInput : self,
    /** @type {function (Object): undefined} */
    Recognizer : initialize,
    /** @type {function (): undefined} */
    AttrRecognizer : template,
    /** @type {function (): undefined} */
    Tap : AnimatedSprite,
    /** @type {function (): undefined} */
    Pan : Sprite,
    /** @type {function (): undefined} */
    Swipe : frag,
    /** @type {function (): undefined} */
    Pinch : g,
    /** @type {function (): undefined} */
    Rotate : SrcCell,
    /** @type {function (): undefined} */
    Press : Parser,
    /** @type {function (string, Function, Object): undefined} */
    on : addListener,
    /** @type {function (string, string, string): undefined} */
    off : off,
    /** @type {function (Function, Function, Function): undefined} */
    each : each,
    /** @type {function (?, ?): ?} */
    merge : extend,
    /** @type {function (?, ?, string): ?} */
    extend : equal,
    /** @type {function (Function, Function, ?): undefined} */
    inherit : inherit,
    /** @type {function (Function, ?): ?} */
    bindFn : __bind,
    /** @type {function (Object, string): ?} */
    prefixed : camelize
  });
  if (typeof define == string && define.amd) {
    define(function() {
      return data;
    });
  } else {
    if ("undefined" != typeof module && module.exports) {
      /** @type {function (string, Object): ?} */
      module.exports = data;
    } else {
      /** @type {function (string, Object): ?} */
      $[name] = data;
    }
  }
}(window, document, "Hammer"), function(self, ctor, test, next, JSON, match) {
  /**
   * @param {Function} fn
   * @param {Function} callback
   * @return {?}
   */
  function map(fn, callback) {
    return function() {
      return fn.call(this, callback.apply(this, arguments));
    };
  }
  /**
   * @param {string} name
   * @return {?}
   */
  function attr(name) {
    return function(old) {
      return old[name];
    };
  }
  /**
   * @param {Object} args
   * @param {Function} fn
   * @return {?}
   */
  function apply(args, fn) {
    return fn.apply(match, args);
  }
  /**
   * @param {Function} fn
   * @return {?}
   */
  function varArgs(fn) {
    /** @type {number} */
    var index = fn.length - 1;
    /** @type {function (this:(Array.<T>|string|{length: number}), *=, *=): Array.<T>} */
    var __slice = test.prototype.slice;
    if (0 == index) {
      return function() {
        return fn.call(this, __slice.call(arguments));
      };
    }
    if (1 == index) {
      return function() {
        return fn.call(this, arguments[0], __slice.call(arguments, 1));
      };
    }
    /** @type {Array} */
    var args = test(fn.length);
    return function() {
      /** @type {number} */
      var i = 0;
      for (;index > i;i++) {
        args[i] = arguments[i];
      }
      return args[index] = __slice.call(arguments, index), fn.apply(this, args);
    };
  }
  /**
   * @param {Function} fn
   * @return {?}
   */
  function flip(fn) {
    return function(partials, err) {
      return fn(err, partials);
    };
  }
  /**
   * @param {Function} result
   * @param {?} callback
   * @return {?}
   */
  function cb(result, callback) {
    return function(i) {
      return result(i) && callback(i);
    };
  }
  /**
   * @return {undefined}
   */
  function noop() {
  }
  /**
   * @return {?}
   */
  function always() {
    return true;
  }
  /**
   * @param {?} val
   * @return {?}
   */
  function functor(val) {
    return function() {
      return val;
    };
  }
  /**
   * @param {Function} type
   * @param {Object} el
   * @return {?}
   */
  function is(type, el) {
    return el && el.constructor === type;
  }
  /**
   * @param {?} a
   * @return {?}
   */
  function defined(a) {
    return a !== match;
  }
  /**
   * @param {?} fieldList
   * @param {Object} o
   * @return {?}
   */
  function hasAllProperties(fieldList, o) {
    return o instanceof ctor && all(function(asset) {
      return asset in o;
    }, fieldList);
  }
  /**
   * @param {?} actual
   * @param {?} xs
   * @return {?}
   */
  function equal(actual, xs) {
    return[actual, xs];
  }
  /**
   * @param {Array} inputArray
   * @return {?}
   */
  function arrayAsList(inputArray) {
    return reverseList(inputArray.reduce(flip(equal), value));
  }
  /**
   * @param {boolean} deepDataAndEvents
   * @return {?}
   */
  function listAsArray(deepDataAndEvents) {
    return cleanUp(function(a, x) {
      return a.unshift(x), a;
    }, [], deepDataAndEvents);
  }
  /**
   * @param {?} fn
   * @param {?} list
   * @return {?}
   */
  function foldR1(fn, list) {
    return list ? equal(fn(head(list)), foldR1(fn, tail(list))) : value;
  }
  /**
   * @param {Function} done
   * @param {?} isXML
   * @param {boolean} deepDataAndEvents
   * @return {?}
   */
  function cleanUp(done, isXML, deepDataAndEvents) {
    return deepDataAndEvents ? done(cleanUp(done, isXML, tail(deepDataAndEvents)), head(deepDataAndEvents)) : isXML;
  }
  /**
   * @param {?} list
   * @param {Function} test
   * @param {string} removedFn
   * @return {?}
   */
  function without(list, test, removedFn) {
    /**
     * @param {?} list
     * @param {?} removedFn
     * @return {?}
     */
    function withoutInner(list, removedFn) {
      return list ? test(head(list)) ? (removedFn(head(list)), tail(list)) : equal(head(list), withoutInner(tail(list), removedFn)) : value;
    }
    return withoutInner(list, removedFn || noop);
  }
  /**
   * @param {Function} fn
   * @param {?} list
   * @return {?}
   */
  function all(fn, list) {
    return!list || fn(head(list)) && all(fn, tail(list));
  }
  /**
   * @param {?} fnList
   * @param {Object} args
   * @return {undefined}
   */
  function applyEach(fnList, args) {
    if (fnList) {
      head(fnList).apply(null, args);
      applyEach(tail(fnList), args);
    }
  }
  /**
   * @param {?} name
   * @return {?}
   */
  function reverseList(name) {
    /**
     * @param {?} actual
     * @param {?} obj
     * @return {?}
     */
    function expect(actual, obj) {
      return actual ? expect(tail(actual), equal(head(actual), obj)) : obj;
    }
    return expect(name, value);
  }
  /**
   * @param {?} test
   * @param {?} list
   * @return {?}
   */
  function first(test, list) {
    return list && (test(head(list)) ? head(list) : first(test, tail(list)));
  }
  /**
   * @param {?} oboeBus
   * @return {undefined}
   */
  function create(oboeBus) {
    /**
     * @return {undefined}
     */
    function log() {
      /** @type {number} */
      var min = 0;
      if (data.length > max) {
        done("Max buffer length exceeded: textNode");
        /** @type {number} */
        min = Math.max(min, data.length);
      }
      if (h.length > max) {
        done("Max buffer length exceeded: numberNode");
        /** @type {number} */
        min = Math.max(min, h.length);
      }
      x2 = max - min + x1;
    }
    /**
     * @param {string} total
     * @return {undefined}
     */
    function done(total) {
      if (data) {
        callback(data);
        /** @type {string} */
        data = "";
      }
      /** @type {Error} */
      e = next(total + "\nLn: " + i + "\nCol: " + isPlaceholderItem + "\nChr: " + undef);
      fail(errorReport(match, match, e));
    }
    /**
     * @return {undefined}
     */
    function ready() {
      if (method !== post || 0 !== $) {
        done("Unexpected end");
      }
      if (data) {
        callback(data);
        /** @type {string} */
        data = "";
      }
      /** @type {boolean} */
      V = true;
    }
    /**
     * @param {string} command
     * @return {?}
     */
    function clear(command) {
      return "\r" == command || ("\n" == command || (" " == command || "\t" == command));
    }
    /**
     * @param {string} text
     * @return {?}
     */
    function write(text) {
      if (!e) {
        if (V) {
          return done("Cannot write after close");
        }
        /** @type {number} */
        var index = 0;
        undef = text[0];
        for (;undef && (node = undef, undef = text[index++]);) {
          switch(x1++, "\n" == undef ? (i++, isPlaceholderItem = 0) : isPlaceholderItem++, method) {
            case fn:
              if ("{" === undef) {
                method = property;
              } else {
                if ("[" === undef) {
                  method = PUT;
                } else {
                  if (!clear(undef)) {
                    return done("Non-whitespace before {[.");
                  }
                }
              }
              continue;
            case del:
            ;
            case property:
              if (clear(undef)) {
                continue;
              }
              if (method === del) {
                ret.push(value);
              } else {
                if ("}" === undef) {
                  not();
                  _emit();
                  method = ret.pop() || post;
                  continue;
                }
                ret.push(options);
              }
              if ('"' !== undef) {
                return done('Malformed object key should start with " ');
              }
              method = target;
              continue;
            case value:
            ;
            case options:
              if (clear(undef)) {
                continue;
              }
              if (":" === undef) {
                if (method === options) {
                  ret.push(options);
                  if (data) {
                    not();
                    emit(data);
                    /** @type {string} */
                    data = "";
                  }
                  $++;
                } else {
                  if (data) {
                    emit(data);
                    /** @type {string} */
                    data = "";
                  }
                }
                method = post;
              } else {
                if ("}" === undef) {
                  if (data) {
                    callback(data);
                    /** @type {string} */
                    data = "";
                  }
                  _emit();
                  $--;
                  method = ret.pop() || post;
                } else {
                  if ("," !== undef) {
                    return done("Bad object");
                  }
                  if (method === options) {
                    ret.push(options);
                  }
                  if (data) {
                    callback(data);
                    /** @type {string} */
                    data = "";
                  }
                  method = del;
                }
              }
              continue;
            case PUT:
            ;
            case post:
              if (clear(undef)) {
                continue;
              }
              if (method === PUT) {
                if (xhr(), $++, method = post, "]" === undef) {
                  newTag();
                  $--;
                  method = ret.pop() || post;
                  continue;
                }
                ret.push(rreturn);
              }
              if ('"' === undef) {
                method = target;
              } else {
                if ("{" === undef) {
                  method = property;
                } else {
                  if ("[" === undef) {
                    method = PUT;
                  } else {
                    if ("t" === undef) {
                      method = after;
                    } else {
                      if ("f" === undef) {
                        method = methodIn;
                      } else {
                        if ("n" === undef) {
                          method = on;
                        } else {
                          if ("-" === undef) {
                            h += undef;
                          } else {
                            if ("0" === undef) {
                              h += undef;
                              method = object;
                            } else {
                              if (-1 === "123456789".indexOf(undef)) {
                                return done("Bad value");
                              }
                              h += undef;
                              method = object;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              continue;
            case rreturn:
              if ("," === undef) {
                ret.push(rreturn);
                if (data) {
                  callback(data);
                  /** @type {string} */
                  data = "";
                }
                method = post;
              } else {
                if ("]" !== undef) {
                  if (clear(undef)) {
                    continue;
                  }
                  return done("Bad array");
                }
                if (data) {
                  callback(data);
                  /** @type {string} */
                  data = "";
                }
                newTag();
                $--;
                method = ret.pop() || post;
              }
              continue;
            case target:
              /** @type {number} */
              var lastIndex = index - 1;
              a: for (;;) {
                for (;a > 0;) {
                  if (b += undef, undef = text.charAt(index++), 4 === a ? (data += String.fromCharCode(parseInt(b, 16)), a = 0, lastIndex = index - 1) : a++, !undef) {
                    break a;
                  }
                }
                if ('"' === undef && !elem) {
                  method = ret.pop() || post;
                  data += text.substring(lastIndex, index - 1);
                  if (!data) {
                    callback("");
                  }
                  break;
                }
                if ("\\" === undef && (!elem && (elem = true, data += text.substring(lastIndex, index - 1), undef = text.charAt(index++), !undef))) {
                  break;
                }
                if (elem) {
                  if (elem = false, "n" === undef ? data += "\n" : "r" === undef ? data += "\r" : "t" === undef ? data += "\t" : "f" === undef ? data += "\f" : "b" === undef ? data += "\b" : "u" === undef ? (a = 1, b = "") : data += undef, undef = text.charAt(index++), lastIndex = index - 1, undef) {
                    continue;
                  }
                  break;
                }
                re.lastIndex = index;
                /** @type {(Array.<string>|null)} */
                var pos = re.exec(text);
                if (!pos) {
                  index = text.length + 1;
                  data += text.substring(lastIndex, index - 1);
                  break;
                }
                if (index = pos.index + 1, undef = text.charAt(pos.index), !undef) {
                  data += text.substring(lastIndex, index - 1);
                  break;
                }
              }
              continue;
            case after:
              if (!undef) {
                continue;
              }
              if ("r" !== undef) {
                return done("Invalid true started with t" + undef);
              }
              method = last;
              continue;
            case last:
              if (!undef) {
                continue;
              }
              if ("u" !== undef) {
                return done("Invalid true started with tr" + undef);
              }
              method = thisMethod;
              continue;
            case thisMethod:
              if (!undef) {
                continue;
              }
              if ("e" !== undef) {
                return done("Invalid true started with tru" + undef);
              }
              callback(true);
              method = ret.pop() || post;
              continue;
            case methodIn:
              if (!undef) {
                continue;
              }
              if ("a" !== undef) {
                return done("Invalid false started with f" + undef);
              }
              method = _method;
              continue;
            case _method:
              if (!undef) {
                continue;
              }
              if ("l" !== undef) {
                return done("Invalid false started with fa" + undef);
              }
              method = requester;
              continue;
            case requester:
              if (!undef) {
                continue;
              }
              if ("s" !== undef) {
                return done("Invalid false started with fal" + undef);
              }
              method = scope;
              continue;
            case scope:
              if (!undef) {
                continue;
              }
              if ("e" !== undef) {
                return done("Invalid false started with fals" + undef);
              }
              callback(false);
              method = ret.pop() || post;
              continue;
            case on:
              if (!undef) {
                continue;
              }
              if ("u" !== undef) {
                return done("Invalid null started with n" + undef);
              }
              method = gzip;
              continue;
            case gzip:
              if (!undef) {
                continue;
              }
              if ("l" !== undef) {
                return done("Invalid null started with nu" + undef);
              }
              method = GET;
              continue;
            case GET:
              if (!undef) {
                continue;
              }
              if ("l" !== undef) {
                return done("Invalid null started with nul" + undef);
              }
              callback(null);
              method = ret.pop() || post;
              continue;
            case P:
              if ("." !== undef) {
                return done("Leading zero not followed by .");
              }
              h += undef;
              method = object;
              continue;
            case object:
              if (-1 !== "0123456789".indexOf(undef)) {
                h += undef;
              } else {
                if ("." === undef) {
                  if (-1 !== h.indexOf(".")) {
                    return done("Invalid number has two dots");
                  }
                  h += undef;
                } else {
                  if ("e" === undef || "E" === undef) {
                    if (-1 !== h.indexOf("e") || -1 !== h.indexOf("E")) {
                      return done("Invalid number has two exponential");
                    }
                    h += undef;
                  } else {
                    if ("+" === undef || "-" === undef) {
                      if ("e" !== node && "E" !== node) {
                        return done("Invalid symbol in number");
                      }
                      h += undef;
                    } else {
                      if (h) {
                        callback(parseFloat(h));
                        /** @type {string} */
                        h = "";
                      }
                      index--;
                      method = ret.pop() || post;
                    }
                  }
                }
              }
              continue;
            default:
              return done("Unknown state: " + method);
          }
        }
        if (x1 >= x2) {
          log();
        }
      }
    }
    var e;
    var undef;
    var node;
    var not = oboeBus(ext).emit;
    var _emit = oboeBus(id).emit;
    var xhr = oboeBus(paramName).emit;
    var newTag = oboeBus(eventName).emit;
    var emit = oboeBus(name).emit;
    var callback = oboeBus(key).emit;
    var fail = oboeBus(FAIL_EVENT).emit;
    /** @type {number} */
    var max = 65536;
    /** @type {RegExp} */
    var re = /[\\"\n]/g;
    /** @type {number} */
    var actualObject = 0;
    /** @type {number} */
    var fn = actualObject++;
    /** @type {number} */
    var post = actualObject++;
    /** @type {number} */
    var property = actualObject++;
    /** @type {number} */
    var options = actualObject++;
    /** @type {number} */
    var PUT = actualObject++;
    /** @type {number} */
    var rreturn = actualObject++;
    /** @type {number} */
    var target = actualObject++;
    /** @type {number} */
    var del = actualObject++;
    /** @type {number} */
    var value = actualObject++;
    /** @type {number} */
    var after = actualObject++;
    /** @type {number} */
    var last = actualObject++;
    /** @type {number} */
    var thisMethod = actualObject++;
    /** @type {number} */
    var methodIn = actualObject++;
    /** @type {number} */
    var _method = actualObject++;
    /** @type {number} */
    var requester = actualObject++;
    /** @type {number} */
    var scope = actualObject++;
    /** @type {number} */
    var on = actualObject++;
    /** @type {number} */
    var gzip = actualObject++;
    /** @type {number} */
    var GET = actualObject++;
    /** @type {number} */
    var P = actualObject++;
    /** @type {number} */
    var object = actualObject;
    /** @type {number} */
    var x2 = max;
    /** @type {string} */
    var data = "";
    /** @type {string} */
    var h = "";
    /** @type {boolean} */
    var elem = false;
    /** @type {boolean} */
    var V = false;
    /** @type {number} */
    var method = fn;
    /** @type {Array} */
    var ret = [];
    /** @type {null} */
    var b = null;
    /** @type {number} */
    var a = 0;
    /** @type {number} */
    var $ = 0;
    /** @type {number} */
    var x1 = 0;
    /** @type {number} */
    var isPlaceholderItem = 0;
    /** @type {number} */
    var i = 1;
    oboeBus(STREAM_DATA).on(write);
    oboeBus(ABORTING).on(ready);
  }
  /**
   * @param {?} oboeBus
   * @param {Object} a
   * @return {undefined}
   */
  function instanceController(oboeBus, a) {
    /**
     * @param {?} callback
     * @return {?}
     */
    function on(callback) {
      return function(mongoObject) {
        basis = callback(basis, mongoObject);
      };
    }
    var basis;
    var one = {};
    var prefix;
    for (prefix in a) {
      oboeBus(prefix).on(on(a[prefix]), one);
    }
    oboeBus(ROOT_FOUND).on(function() {
      var eventId;
      for (eventId in a) {
        oboeBus(eventId).un(one);
      }
    });
  }
  /**
   * @param {(Error|string)} headerStr
   * @return {?}
   */
  function parseResponseHeaders(headerStr) {
    var headers = {};
    return headerStr && headerStr.split("\r\n").forEach(function(part) {
      var index = part.indexOf(": ");
      headers[part.substring(0, index)] = part.substring(index + 2);
    }), headers;
  }
  /**
   * @param {Location} base
   * @param {Object} self
   * @return {?}
   */
  function callback(base, self) {
    /**
     * @param {string} key
     * @return {?}
     */
    function unlock(key) {
      return{
        "http:" : 80,
        "https:" : 443
      }[key];
    }
    /**
     * @param {string} uri
     * @return {?}
     */
    function cb(uri) {
      return uri.port || unlock(uri.protocol || base.protocol);
    }
    return!!(self.protocol && self.protocol != base.protocol || (self.host && self.host != base.host || self.host && cb(self) != cb(base)));
  }
  /**
   * @param {?} fn
   * @return {?}
   */
  function connect(fn) {
    /** @type {RegExp} */
    var reName = /(\w+:)?(?:\/\/)([\w.-]+)?(?::(\d+))?\/?/;
    /** @type {Array} */
    var segmentMatch = reName.exec(fn) || [];
    return{
      protocol : segmentMatch[1] || "",
      host : segmentMatch[2] || "",
      port : segmentMatch[3] || ""
    };
  }
  /**
   * @return {?}
   */
  function httpTransport() {
    return new XMLHttpRequest;
  }
  /**
   * @param {?} oboeBus
   * @param {Object} xhr
   * @param {?} method
   * @param {?} url
   * @param {string} data
   * @param {Object} headers
   * @param {boolean} withCredentials
   * @return {undefined}
   */
  function streamingHttp(oboeBus, xhr, method, url, data, headers, withCredentials) {
    /**
     * @return {undefined}
     */
    function handleProgress() {
      var textSoFar = xhr.responseText;
      var memory = textSoFar.substr(numberOfCharsAlreadyGivenToCallback);
      if (memory) {
        emitStreamData(memory);
      }
      numberOfCharsAlreadyGivenToCallback = len(textSoFar);
    }
    var emitStreamData = oboeBus(STREAM_DATA).emit;
    var emitFail = oboeBus(FAIL_EVENT).emit;
    /** @type {number} */
    var numberOfCharsAlreadyGivenToCallback = 0;
    /** @type {boolean} */
    var n = true;
    oboeBus(ROOT_FOUND).on(function() {
      /** @type {null} */
      xhr.onreadystatechange = null;
      xhr.abort();
    });
    if ("onprogress" in xhr) {
      /** @type {function (): undefined} */
      xhr.onprogress = handleProgress;
    }
    /**
     * @return {?}
     */
    xhr.onreadystatechange = function() {
      /**
       * @return {undefined}
       */
      function callback() {
        try {
          if (n) {
            oboeBus(HTTP_START).emit(xhr.status, parseResponseHeaders(xhr.getAllResponseHeaders()));
          }
          /** @type {boolean} */
          n = false;
        } catch (a) {
        }
      }
      switch(xhr.readyState) {
        case 2:
        ;
        case 3:
          return callback();
        case 4:
          callback();
          /** @type {boolean} */
          var d = 2 == String(xhr.status)[0];
          if (d) {
            handleProgress();
            oboeBus(ABORTING).emit();
          } else {
            emitFail(errorReport(xhr.status, xhr.responseText));
          }
        ;
      }
    };
    try {
      xhr.open(method, url, true);
      var headerName;
      for (headerName in headers) {
        xhr.setRequestHeader(headerName, headers[headerName]);
      }
      if (!callback(self.location, connect(url))) {
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
      }
      /** @type {boolean} */
      xhr.withCredentials = withCredentials;
      xhr.send(data);
    } catch (e) {
      self.setTimeout(partialComplete(emitFail, errorReport(match, match, e)), 0);
    }
  }
  /**
   * @param {string} name
   * @param {string} data
   * @return {?}
   */
  function func(name, data) {
    return{
      key : name,
      node : data
    };
  }
  /**
   * @param {?} oboeBus
   * @return {?}
   */
  function incrementalContentBuilder(oboeBus) {
    /**
     * @param {?} node
     * @param {string} inplace
     * @return {?}
     */
    function filter(node, inplace) {
      var failuresLink = nodeOf(head(node));
      return is(test, failuresLink) ? fn(node, len(failuresLink), inplace) : node;
    }
    /**
     * @param {?} ast
     * @param {string} inplace
     * @return {?}
     */
    function walk(ast, inplace) {
      if (!ast) {
        return _emit(inplace), fn(ast, ROOT_PATH, inplace);
      }
      var found = filter(ast, inplace);
      var value = tail(found);
      var key = keyOf(head(found));
      return callback(value, key, inplace), equal(func(key, inplace), value);
    }
    /**
     * @param {?} node
     * @param {string} key
     * @param {string} data
     * @return {undefined}
     */
    function callback(node, key, data) {
      /** @type {string} */
      nodeOf(head(node))[key] = data;
    }
    /**
     * @param {?} key
     * @param {string} k
     * @param {string} data
     * @return {?}
     */
    function fn(key, k, data) {
      if (key) {
        callback(key, k, data);
      }
      var memory = equal(func(k, data), key);
      return fire(memory), memory;
    }
    /**
     * @param {string} k
     * @return {?}
     */
    function value(k) {
      return func(k), tail(k) || white(nodeOf(head(k)));
    }
    var fire = oboeBus(PATH_FOUND).emit;
    var func = oboeBus(NODE_FOUND).emit;
    var _emit = oboeBus(STREAM_END).emit;
    var white = oboeBus(fullEventName).emit;
    var c = {};
    return c[ext] = function(conditional) {
      return walk(conditional, {});
    }, c[paramName] = function(conditional) {
      return walk(conditional, []);
    }, c[name] = fn, c[key] = map(value, walk), c[id] = value, c[eventName] = value, c;
  }
  /**
   * @param {string} eventType
   * @param {Object} newListener
   * @param {Object} removeListener
   * @return {?}
   */
  function singleEventPubSub(eventType, newListener, removeListener) {
    /**
     * @param {Function} id
     * @return {?}
     */
    function hasId(id) {
      return function(filter) {
        return filter.id == id;
      };
    }
    var listenerTupleList;
    var listenerList;
    return{
      /**
       * @param {string} type
       * @param {Function} fn
       * @return {?}
       */
      on : function(type, fn) {
        var tuple = {
          listener : type,
          id : fn || type
        };
        return newListener && newListener.emit(eventType, type, tuple.id), listenerTupleList = equal(tuple, listenerTupleList), listenerList = equal(type, listenerList), this;
      },
      /**
       * @return {undefined}
       */
      emit : function() {
        applyEach(listenerList, arguments);
      },
      /**
       * @param {Function} fn
       * @return {undefined}
       */
      un : function(fn) {
        var removed;
        listenerTupleList = without(listenerTupleList, hasId(fn), function(tuple) {
          /** @type {Object} */
          removed = tuple;
        });
        if (removed) {
          listenerList = without(listenerList, function(listener) {
            return listener == removed.listener;
          });
          if (removeListener) {
            removeListener.emit(eventType, removed.listener, removed.id);
          }
        }
      },
      /**
       * @return {?}
       */
      listeners : function() {
        return listenerList;
      },
      /**
       * @param {Object} listenerId
       * @return {?}
       */
      hasListener : function(listenerId) {
        var test = listenerId ? hasId(listenerId) : always;
        return defined(first(test, listenerTupleList));
      }
    };
  }
  /**
   * @return {?}
   */
  function pubSub() {
    /**
     * @param {string} eventName
     * @return {?}
     */
    function newSingle(eventName) {
      return singles[eventName] = singleEventPubSub(eventName, newListener, removeListener);
    }
    /**
     * @param {string} eventName
     * @return {?}
     */
    function pubSubInstance(eventName) {
      return singles[eventName] || newSingle(eventName);
    }
    var singles = {};
    var newListener = newSingle("newListener");
    var removeListener = newSingle("removeListener");
    return["emit", "on", "un"].forEach(function(methodName) {
      pubSubInstance[methodName] = varArgs(function(eventName, params) {
        apply(params, pubSubInstance(eventName)[methodName]);
      });
    }), pubSubInstance;
  }
  /**
   * @param {number} execResult
   * @param {?} string
   * @param {Error} error
   * @return {?}
   */
  function errorReport(execResult, string, error) {
    try {
      /** @type {*} */
      var ast = JSON.parse(string);
    } catch (f) {
    }
    return{
      statusCode : execResult,
      body : string,
      jsonBody : ast,
      thrown : error
    };
  }
  /**
   * @param {?} oboeBus
   * @param {?} jsonPathCompiler
   * @return {undefined}
   */
  function patternAdapter(oboeBus, jsonPathCompiler) {
    /**
     * @param {?} emitMatch
     * @param {?} node
     * @param {?} ascent
     * @return {undefined}
     */
    function emitMatchingNode(emitMatch, node, ascent) {
      var descent = reverseList(ascent);
      emitMatch(node, listAsArray(tail(foldR1(keyOf, descent))), listAsArray(foldR1(nodeOf, descent)));
    }
    /**
     * @param {Function} eventName
     * @param {Object} predicateEvent
     * @param {?} compiledJsonPath
     * @return {undefined}
     */
    function addUnderlyingListener(eventName, predicateEvent, compiledJsonPath) {
      var emitMatch = oboeBus(eventName).emit;
      predicateEvent.on(function(ascent) {
        var maybeMatchingMapping = compiledJsonPath(ascent);
        if (maybeMatchingMapping !== false) {
          emitMatchingNode(emitMatch, nodeOf(maybeMatchingMapping), ascent);
        }
      }, eventName);
      oboeBus("removeListener").on(function(removedEventName) {
        if (removedEventName == eventName) {
          if (!oboeBus(removedEventName).listeners()) {
            predicateEvent.un(eventName);
          }
        }
      });
    }
    var predicateEventMap = {
      node : oboeBus(NODE_FOUND),
      path : oboeBus(PATH_FOUND)
    };
    oboeBus("newListener").on(function(fullEventName) {
      /** @type {(Array.<string>|null)} */
      var match = /(node|path):(.*)/.exec(fullEventName);
      if (match) {
        var predicateEvent = predicateEventMap[match[1]];
        if (!predicateEvent.hasListener(fullEventName)) {
          addUnderlyingListener(fullEventName, predicateEvent, jsonPathCompiler(match[2]));
        }
      }
    });
  }
  /**
   * @param {Object} oboeBus
   * @param {string} deepDataAndEvents
   * @return {?}
   */
  function instanceApi(oboeBus, deepDataAndEvents) {
    /**
     * @param {?} eventName
     * @param {Function} one
     * @return {?}
     */
    function addProtectedCallback(eventName, one) {
      return oboeBus(eventName).on(protectedCallback(one), one), oboeApi;
    }
    /**
     * @param {?} event
     * @param {Function} one
     * @return {?}
     */
    function addForgettableCallback(event, one) {
      var safeCallback = protectedCallback(one);
      return event.on(function() {
        /** @type {boolean} */
        var d = false;
        /**
         * @return {undefined}
         */
        oboeApi.forget = function() {
          /** @type {boolean} */
          d = true;
        };
        apply(arguments, safeCallback);
        delete oboeApi.forget;
        if (d) {
          event.un(one);
        }
      }, one), oboeApi;
    }
    /**
     * @param {Function} one
     * @return {?}
     */
    function protectedCallback(one) {
      return function() {
        try {
          one.apply(oboeApi, arguments);
        } catch (e) {
          oboeBus(FAIL_EVENT).emit(errorReport(match, match, e));
        }
      };
    }
    /**
     * @param {string} type
     * @param {string} pattern
     * @return {?}
     */
    function fullyQualifiedPatternMatchEvent(type, pattern) {
      return oboeBus(type + ":" + pattern);
    }
    /**
     * @param {string} eventId
     * @param {Object} listenerMap
     * @return {undefined}
     */
    function addListenersMap(eventId, listenerMap) {
      var pattern;
      for (pattern in listenerMap) {
        addForgettableCallback(fullyQualifiedPatternMatchEvent(eventId, pattern), listenerMap[pattern]);
      }
    }
    /**
     * @param {string} eventId
     * @param {string} jsonPathOrListenerMap
     * @param {Function} one
     * @return {?}
     */
    function addNodeOrPathListenerApi(eventId, jsonPathOrListenerMap, one) {
      return isString(jsonPathOrListenerMap) ? addForgettableCallback(fullyQualifiedPatternMatchEvent(eventId, jsonPathOrListenerMap), one) : addListenersMap(eventId, jsonPathOrListenerMap), oboeApi;
    }
    var oboeApi;
    /** @type {RegExp} */
    var fullyQualifiedNamePattern = /^(node|path):./;
    var rootNodeFinishedEvent = oboeBus(fullEventName);
    var addListener = varArgs(function(eventId, params) {
      if (oboeApi[eventId]) {
        apply(params, oboeApi[eventId]);
      } else {
        var event = oboeBus(eventId);
        var ready = params[0];
        if (fullyQualifiedNamePattern.test(eventId)) {
          addForgettableCallback(event, ready);
        } else {
          event.on(ready);
        }
      }
      return oboeApi;
    });
    /**
     * @param {string} eventId
     * @param {Function} p2
     * @param {?} p3
     * @return {?}
     */
    var removeListener = function(eventId, p2, p3) {
      if ("done" == eventId) {
        rootNodeFinishedEvent.un(p2);
      } else {
        if ("node" == eventId || "path" == eventId) {
          oboeBus.un(eventId + ":" + p2, p3);
        } else {
          /** @type {Function} */
          var listener = p2;
          oboeBus(eventId).un(listener);
        }
      }
      return oboeApi;
    };
    return oboeBus(STREAM_END).on(function(root) {
      oboeApi.root = functor(root);
    }), oboeBus(HTTP_START).on(function(dataAndEvents, headers) {
      /**
       * @param {string} name
       * @return {?}
       */
      oboeApi.header = function(name) {
        return name ? headers[name] : headers;
      };
    }), oboeApi = {
      on : addListener,
      addListener : addListener,
      /** @type {function (string, Function, ?): ?} */
      removeListener : removeListener,
      emit : oboeBus.emit,
      node : partialComplete(addNodeOrPathListenerApi, "node"),
      path : partialComplete(addNodeOrPathListenerApi, "path"),
      done : partialComplete(addForgettableCallback, rootNodeFinishedEvent),
      start : partialComplete(addProtectedCallback, HTTP_START),
      fail : oboeBus(FAIL_EVENT).on,
      abort : oboeBus(ROOT_FOUND).emit,
      /** @type {function (): undefined} */
      header : noop,
      /** @type {function (): undefined} */
      root : noop,
      source : deepDataAndEvents
    };
  }
  /**
   * @param {?} httpMethodName
   * @param {undefined} deepDataAndEvents
   * @param {string} body
   * @param {Object} headers
   * @param {boolean} spec
   * @return {?}
   */
  function wire(httpMethodName, deepDataAndEvents, body, headers, spec) {
    var oboeBus = pubSub();
    return deepDataAndEvents && streamingHttp(oboeBus, httpTransport(), httpMethodName, deepDataAndEvents, body, headers, spec), create(oboeBus), instanceController(oboeBus, incrementalContentBuilder(oboeBus)), patternAdapter(oboeBus, jsonPathCompiler), instanceApi(oboeBus, deepDataAndEvents);
  }
  /**
   * @param {Function} callback
   * @param {string} id
   * @param {string} value
   * @param {string} arg
   * @param {?} options
   * @param {boolean} rez
   * @param {?} name
   * @return {?}
   */
  function url(callback, id, value, arg, options, rez, name) {
    /**
     * @param {string} fileName
     * @param {?} event
     * @return {?}
     */
    function onComplete(fileName, event) {
      return event === false && (fileName += -1 == fileName.indexOf("?") ? "?" : "&", fileName += "_=" + (new Date).getTime()), fileName;
    }
    return options = options ? JSON.parse(JSON.stringify(options)) : {}, arg ? isString(arg) || (arg = JSON.stringify(arg), options["Content-Type"] = options["Content-Type"] || "application/json") : arg = null, callback(value || "GET", onComplete(id, name), arg, options, rez || false);
  }
  /**
   * @param {Object} options
   * @return {?}
   */
  function init(options) {
    return options ? options.url ? url(wire, options.url, options.method, options.body, options.headers, options.withCredentials, options.cached) : url(wire, options) : wire();
  }
  var partialComplete = varArgs(function(wrapper, args) {
    var numBoundArgs = args.length;
    return varArgs(function(callArgs) {
      /** @type {number} */
      var i = 0;
      for (;i < callArgs.length;i++) {
        args[numBoundArgs + i] = callArgs[i];
      }
      return args.length = numBoundArgs + callArgs.length, wrapper.apply(this, args);
    });
  });
  var lazyUnion = (varArgs(function(fns) {
    /**
     * @param {Object} details
     * @param {Function} thisp
     * @return {?}
     */
    function on(details, thisp) {
      return[apply(details, thisp)];
    }
    var fnsList = arrayAsList(fns);
    return varArgs(function(isXML) {
      return cleanUp(on, isXML, fnsList)[0];
    });
  }), varArgs(function(fns) {
    return varArgs(function(params) {
      var maybeValue;
      /** @type {number} */
      var i = 0;
      for (;i < len(fns);i++) {
        if (maybeValue = apply(params, fns[i])) {
          return maybeValue;
        }
      }
    });
  }));
  var len = attr("length");
  var isString = partialComplete(is, String);
  /** @type {null} */
  var value = null;
  var head = attr(0);
  var tail = attr(1);
  var list = varArgs(arrayAsList);
  var jsonPathSyntax = function() {
    /**
     * @param {string} regex
     * @return {?}
     */
    var regexDescriptor = function(regex) {
      return regex.exec.bind(regex);
    };
    var jsonPathClause = varArgs(function(componentRegexes) {
      return componentRegexes.unshift(/^/), regexDescriptor(RegExp(componentRegexes.map(attr("source")).join("")));
    });
    /** @type {RegExp} */
    var possiblyCapturing = /(\$?)/;
    /** @type {RegExp} */
    var namedNode = /([\w-_]+|\*)/;
    /** @type {RegExp} */
    var namePlaceholder = /()/;
    /** @type {RegExp} */
    var nodeInArrayNotation = /\["([^"]+)"\]/;
    /** @type {RegExp} */
    var numberedNodeInArrayNotation = /\[(\d+|\*)\]/;
    /** @type {RegExp} */
    var fieldList = /{([\w ]*?)}/;
    /** @type {RegExp} */
    var optionalFieldList = /(?:{([\w ]*?)})?/;
    var jsonPathNamedNodeInObjectNotation = jsonPathClause(possiblyCapturing, namedNode, optionalFieldList);
    var jsonPathNamedNodeInArrayNotation = jsonPathClause(possiblyCapturing, nodeInArrayNotation, optionalFieldList);
    var jsonPathNumberedNodeInArrayNotation = jsonPathClause(possiblyCapturing, numberedNodeInArrayNotation, optionalFieldList);
    var jsonPathPureDuckTyping = jsonPathClause(possiblyCapturing, namePlaceholder, fieldList);
    var jsonPathDoubleDot = jsonPathClause(/\.\./);
    var jsonPathDot = jsonPathClause(/\./);
    var jsonPathBang = jsonPathClause(possiblyCapturing, /!/);
    var emptyString = jsonPathClause(/$/);
    return function(fn) {
      return fn(lazyUnion(jsonPathNamedNodeInObjectNotation, jsonPathNamedNodeInArrayNotation, jsonPathNumberedNodeInArrayNotation, jsonPathPureDuckTyping), jsonPathDoubleDot, jsonPathDot, jsonPathBang, emptyString);
    };
  }();
  var keyOf = attr("key");
  var nodeOf = attr("node");
  var ROOT_PATH = {};
  var jsonPathCompiler = jsonPathSyntax(function(pathNodeSyntax, doubleDotSyntax, dotSyntax, bangSyntax, emptySyntax) {
    /**
     * @param {?} results
     * @param {Array} def
     * @return {?}
     */
    function nameClause(results, def) {
      var name = def[n];
      /** @type {Function} */
      var expectationResult = name && "*" != name ? function(ascent) {
        return headKey(ascent) == name;
      } : always;
      return cb(expectationResult, results);
    }
    /**
     * @param {?} results
     * @param {Array} detection
     * @return {?}
     */
    function find(results, detection) {
      var fieldListStr = detection[FIELD_LIST_INDEX];
      if (!fieldListStr) {
        return results;
      }
      var nodes = partialComplete(hasAllProperties, arrayAsList(fieldListStr.split(/\W+/)));
      var result = map(nodes, args);
      return cb(result, results);
    }
    /**
     * @param {?} callback
     * @param {Array} done
     * @return {?}
     */
    function capture(callback, done) {
      /** @type {boolean} */
      var opt_scope = !!done[id];
      return opt_scope ? cb(callback, head) : callback;
    }
    /**
     * @param {Function} data
     * @return {?}
     */
    function skip1(data) {
      /**
       * @param {?} ascent
       * @return {?}
       */
      function notAtRoot(ascent) {
        return headKey(ascent) != ROOT_PATH;
      }
      return data == always ? always : cb(notAtRoot, map(data, tail));
    }
    /**
     * @param {Function} previousExpr
     * @return {?}
     */
    function skipMany(previousExpr) {
      if (previousExpr == always) {
        return always;
      }
      var terminalCaseWhenArrivingAtRoot = rootExpr();
      /** @type {Function} */
      var terminalCaseWhenPreviousExpressionIsSatisfied = previousExpr;
      var recursiveCase = skip1(function(section) {
        return cases(section);
      });
      var cases = lazyUnion(terminalCaseWhenArrivingAtRoot, terminalCaseWhenPreviousExpressionIsSatisfied, recursiveCase);
      return cases;
    }
    /**
     * @return {?}
     */
    function rootExpr() {
      return function(ascent) {
        return headKey(ascent) == ROOT_PATH;
      };
    }
    /**
     * @param {?} lastClause
     * @return {?}
     */
    function statementExpr(lastClause) {
      return function(ascent) {
        var exprMatch = lastClause(ascent);
        return exprMatch === true ? head(ascent) : exprMatch;
      };
    }
    /**
     * @param {boolean} deepDataAndEvents
     * @param {?} isXML
     * @param {?} mongoObject
     * @return {?}
     */
    function expressionsReader(deepDataAndEvents, isXML, mongoObject) {
      return cleanUp(function(basis, callback) {
        return callback(basis, mongoObject);
      }, isXML, deepDataAndEvents);
    }
    /**
     * @param {?} tokenDetector
     * @param {boolean} deepDataAndEvents
     * @param {string} jsonPath
     * @param {?} parserGeneratedSoFar
     * @param {?} onSuccess
     * @return {?}
     */
    function generateClauseReaderIfTokenFound(tokenDetector, deepDataAndEvents, jsonPath, parserGeneratedSoFar, onSuccess) {
      var detected = tokenDetector(jsonPath);
      if (detected) {
        var compiledParser = expressionsReader(deepDataAndEvents, parserGeneratedSoFar, detected);
        var rs = jsonPath.substr(len(detected[0]));
        return onSuccess(rs, compiledParser);
      }
    }
    /**
     * @param {?} tokenDetector
     * @param {?} exprs
     * @return {?}
     */
    function clauseMatcher(tokenDetector, exprs) {
      return partialComplete(generateClauseReaderIfTokenFound, tokenDetector, exprs);
    }
    /**
     * @param {(Object|string)} deepDataAndEvents
     * @param {Function} v
     * @return {?}
     */
    function value(deepDataAndEvents, v) {
      return v;
    }
    /**
     * @param {(Function|boolean)} iterator
     * @param {Function} thisObj
     * @return {?}
     */
    function reject(iterator, thisObj) {
      /** @type {function ((Function|boolean), Function): ?} */
      var computed = iterator ? reject : value;
      return makeIterator(iterator, thisObj, computed);
    }
    /** @type {number} */
    var id = 1;
    /** @type {number} */
    var n = 2;
    /** @type {number} */
    var FIELD_LIST_INDEX = 3;
    var headKey = map(keyOf, head);
    var args = map(nodeOf, head);
    var makeIterator = lazyUnion(clauseMatcher(pathNodeSyntax, list(capture, find, nameClause, skip1)), clauseMatcher(doubleDotSyntax, list(skipMany)), clauseMatcher(dotSyntax, list()), clauseMatcher(bangSyntax, list(capture, rootExpr)), clauseMatcher(emptySyntax, list(statementExpr)), function(dataAndEvents) {
      throw next('"' + dataAndEvents + '" could not be tokenised');
    });
    return function(deepDataAndEvents) {
      try {
        return reject(deepDataAndEvents, always);
      } catch (ex) {
        throw next('Could not compile "' + deepDataAndEvents + '" because ' + ex.message);
      }
    };
  });
  /** @type {number} */
  var _S = 1;
  /** @type {number} */
  var PATH_FOUND = _S++;
  /** @type {number} */
  var NODE_FOUND = _S++;
  /** @type {string} */
  var FAIL_EVENT = "fail";
  /** @type {number} */
  var fullEventName = _S++;
  /** @type {number} */
  var STREAM_END = _S++;
  /** @type {string} */
  var HTTP_START = "start";
  /** @type {string} */
  var STREAM_DATA = "data";
  /** @type {string} */
  var ABORTING = "end";
  /** @type {number} */
  var ROOT_FOUND = _S++;
  /** @type {number} */
  var key = _S++;
  /** @type {number} */
  var name = _S++;
  /** @type {number} */
  var ext = _S++;
  /** @type {number} */
  var id = _S++;
  /** @type {number} */
  var paramName = _S++;
  /** @type {number} */
  var eventName = _S++;
  if ("function" == typeof define && define.amd) {
    define("oboe", [], function() {
      return init;
    });
  } else {
    /** @type {function (Object): ?} */
    self.oboe = init;
  }
}(window, Object, Array, Error, JSON), function() {
  /**
   * @param {?} end
   * @param {?} start
   * @return {?}
   */
  function compare(end, start) {
    if (end !== start) {
      /** @type {boolean} */
      var supportsDisablingOfAutoLinking = end === end;
      /** @type {boolean} */
      var supportsAutoLinking = start === start;
      if (end > start || (!supportsDisablingOfAutoLinking || "undefined" == typeof end && supportsAutoLinking)) {
        return 1;
      }
      if (start > end || (!supportsAutoLinking || "undefined" == typeof start && supportsDisablingOfAutoLinking)) {
        return-1;
      }
    }
    return 0;
  }
  /**
   * @param {string} name
   * @param {number} recurring
   * @param {number} thisObj
   * @return {?}
   */
  function findIndex(name, recurring, thisObj) {
    if (recurring !== recurring) {
      return build(name, thisObj);
    }
    /** @type {number} */
    var i = (thisObj || 0) - 1;
    var size = name.length;
    for (;++i < size;) {
      if (name[i] === recurring) {
        return i;
      }
    }
    return-1;
  }
  /**
   * @param {Object} result
   * @param {Function} a
   * @return {?}
   */
  function equal(result, a) {
    var length = result.length;
    result.sort(a);
    for (;length--;) {
      result[length] = result[length].value;
    }
    return result;
  }
  /**
   * @param {string} str
   * @return {?}
   */
  function String(str) {
    return "string" == typeof str ? str : null == str ? "" : str + "";
  }
  /**
   * @param {string} a
   * @return {?}
   */
  function text(a) {
    return a.charCodeAt(0);
  }
  /**
   * @param {string} t
   * @param {string} r
   * @return {?}
   */
  function cb(t, r) {
    /** @type {number} */
    var x = -1;
    var end = t.length;
    for (;++x < end && r.indexOf(t.charAt(x)) > -1;) {
    }
    return x;
  }
  /**
   * @param {string} t
   * @param {string} s
   * @return {?}
   */
  function success(t, s) {
    var c = t.length;
    for (;c-- && s.indexOf(t.charAt(c)) > -1;) {
    }
    return c;
  }
  /**
   * @param {Object} a
   * @param {Object} b
   * @return {?}
   */
  function e(a, b) {
    return compare(a.criteria, b.criteria) || a.index - b.index;
  }
  /**
   * @param {Object} left
   * @param {Object} right
   * @return {?}
   */
  function merge(left, right) {
    /** @type {number} */
    var i = -1;
    var a = left.criteria;
    var b = right.criteria;
    var len = a.length;
    for (;++i < len;) {
      var result = compare(a[i], b[i]);
      if (result) {
        return result;
      }
    }
    return left.index - right.index;
  }
  /**
   * @param {?} root
   * @return {?}
   */
  function checked(root) {
    return item[root];
  }
  /**
   * @param {?} bits
   * @return {?}
   */
  function replaceToUpper(bits) {
    return maxBits[bits];
  }
  /**
   * @param {?} match
   * @return {?}
   */
  function escapeStringChar(match) {
    return "\\" + escapes[match];
  }
  /**
   * @param {Object} values
   * @param {number} var_args
   * @param {boolean} dataAndEvents
   * @return {?}
   */
  function build(values, var_args, dataAndEvents) {
    var valuesLen = values.length;
    var a = dataAndEvents ? var_args || valuesLen : (var_args || 0) - 1;
    for (;dataAndEvents ? a-- : ++a < valuesLen;) {
      var v = values[a];
      if (v !== v) {
        return a;
      }
    }
    return-1;
  }
  /**
   * @param {?} actual
   * @return {?}
   */
  function func(actual) {
    return actual && "object" == typeof actual || false;
  }
  /**
   * @param {number} no
   * @return {?}
   */
  function callback(no) {
    return 160 >= no && (no >= 9 && 13 >= no) || (32 == no || (160 == no || (5760 == no || (6158 == no || no >= 8192 && (8202 >= no || (8232 == no || (8233 == no || (8239 == no || (8287 == no || (12288 == no || 65279 == no))))))))));
  }
  /**
   * @param {Array} obj
   * @param {?} val
   * @return {?}
   */
  function toArray(obj, val) {
    /** @type {number} */
    var i = -1;
    var l = obj.length;
    /** @type {number} */
    var headNode = -1;
    /** @type {Array} */
    var array = [];
    for (;++i < l;) {
      if (obj[i] === val) {
        /** @type {string} */
        obj[i] = newVal;
        /** @type {number} */
        array[++headNode] = i;
      }
    }
    return array;
  }
  /**
   * @param {Array} array
   * @param {string} callback
   * @return {?}
   */
  function uniq(array, callback) {
    var type;
    /** @type {number} */
    var index = -1;
    var length = array.length;
    /** @type {number} */
    var resLength = -1;
    /** @type {Array} */
    var res = [];
    for (;++index < length;) {
      var val = array[index];
      var fx = callback ? callback(val, index, array) : val;
      if (!(index && type === fx)) {
        type = fx;
        res[++resLength] = val;
      }
    }
    return res;
  }
  /**
   * @param {string} args
   * @return {?}
   */
  function $(args) {
    /** @type {number} */
    var a = -1;
    var len = args.length;
    for (;++a < len && callback(args.charCodeAt(a));) {
    }
    return a;
  }
  /**
   * @param {string} string
   * @return {?}
   */
  function parse(string) {
    var pos = string.length;
    for (;pos-- && callback(string.charCodeAt(pos));) {
    }
    return pos;
  }
  /**
   * @param {?} off
   * @return {?}
   */
  function r(off) {
    return buf[off];
  }
  /**
   * @param {Object} global
   * @return {?}
   */
  function init(global) {
    /**
     * @param {string} name
     * @return {?}
     */
    function lodash(name) {
      if (func(name) && !isArray(name)) {
        if (name instanceof lodashWrapper) {
          return name;
        }
        if (hasOwnProperty.call(name, "__wrapped__")) {
          return new lodashWrapper(name.__wrapped__, name.__chain__, isClassOf(name.__actions__));
        }
      }
      return new lodashWrapper(name);
    }
    /**
     * @param {?} value
     * @param {?} dataAndEvents
     * @param {Array} chainAll
     * @return {undefined}
     */
    function lodashWrapper(value, dataAndEvents, chainAll) {
      this.__actions__ = chainAll || [];
      /** @type {boolean} */
      this.__chain__ = !!dataAndEvents;
      this.__wrapped__ = value;
    }
    /**
     * @param {(Object|boolean|number|string)} wrapped
     * @return {undefined}
     */
    function data(wrapped) {
      /** @type {null} */
      this.actions = null;
      /** @type {number} */
      this.dir = 1;
      /** @type {number} */
      this.dropCount = 0;
      /** @type {boolean} */
      this.filtered = false;
      /** @type {null} */
      this.iteratees = null;
      this.takeCount = text;
      /** @type {null} */
      this.views = null;
      /** @type {(Object|boolean|number|string)} */
      this.wrapped = wrapped;
    }
    /**
     * @return {?}
     */
    function reset() {
      var elements = this.actions;
      var value = this.iteratees;
      var name = this.views;
      var item = new data(this.wrapped);
      return item.actions = elements ? isClassOf(elements) : null, item.dir = this.dir, item.dropCount = this.dropCount, item.filtered = this.filtered, item.iteratees = value ? isClassOf(value) : null, item.takeCount = this.takeCount, item.views = name ? isClassOf(name) : null, item;
    }
    /**
     * @return {?}
     */
    function _get() {
      if (this.filtered) {
        var item = new data(this);
        /** @type {number} */
        item.dir = -1;
        /** @type {boolean} */
        item.filtered = true;
      } else {
        item = this.clone();
        item.dir *= -1;
      }
      return item;
    }
    /**
     * @return {?}
     */
    function add() {
      var attributes = this.wrapped.value();
      if (!isArray(attributes)) {
        return self(attributes, this.actions);
      }
      var dir = this.dir;
      /** @type {boolean} */
      var name = 0 > dir;
      var model = create(0, attributes.length, this.views);
      var start = model.start;
      var end = model.end;
      /** @type {number} */
      var duration = end - start;
      var dropCount = this.dropCount;
      var a = ok(duration, this.takeCount - dropCount);
      var index = name ? end : start - 1;
      var collection = this.iteratees;
      var length = collection ? collection.length : 0;
      /** @type {number} */
      var i = 0;
      /** @type {Array} */
      var res = [];
      a: for (;duration-- && a > i;) {
        index += dir;
        /** @type {number} */
        var j = -1;
        var val = attributes[index];
        for (;++j < length;) {
          var node = collection[j];
          var value = node.iteratee;
          var ret = value(val, index, attributes);
          var type = node.type;
          if (type == curCSS) {
            val = ret;
          } else {
            if (!ret) {
              if (type == wanted) {
                continue a;
              }
              break a;
            }
          }
        }
        if (dropCount) {
          dropCount--;
        } else {
          res[i++] = val;
        }
      }
      return res;
    }
    /**
     * @return {undefined}
     */
    function Map() {
      this.__data__ = {};
    }
    /**
     * @param {string} klass
     * @return {?}
     */
    function onMouseDown(klass) {
      return this.has(klass) && delete this.__data__[klass];
    }
    /**
     * @param {string} name
     * @return {?}
     */
    function click(name) {
      return "__proto__" == name ? val : this.__data__[name];
    }
    /**
     * @param {string} name
     * @return {?}
     */
    function hook(name) {
      return "__proto__" != name && hasOwnProperty.call(this.__data__, name);
    }
    /**
     * @param {?} elem
     * @param {string} value
     * @return {?}
     */
    function empty(elem, value) {
      return "__proto__" != elem && (this.__data__[elem] = value), this;
    }
    /**
     * @param {Object} collection
     * @return {undefined}
     */
    function Parser(collection) {
      var length = collection ? collection.length : 0;
      this.data = {
        hash : nativeCreate(null),
        set : new Set
      };
      for (;length--;) {
        this.push(collection[length]);
      }
    }
    /**
     * @param {Object} obj
     * @param {string} name
     * @return {?}
     */
    function store(obj, name) {
      var context = obj.data;
      var d = "string" == typeof name || func(name) ? context.set.has(name) : context.hash[name];
      return d ? 0 : -1;
    }
    /**
     * @param {string} replacementHash
     * @return {undefined}
     */
    function draw(replacementHash) {
      var data = this.data;
      if ("string" == typeof replacementHash || func(replacementHash)) {
        data.set.add(replacementHash);
      } else {
        /** @type {boolean} */
        data.hash[replacementHash] = true;
      }
    }
    /**
     * @param {Object} name
     * @param {Object} value
     * @return {?}
     */
    function isClassOf(name, value) {
      /** @type {number} */
      var i = -1;
      var size = name.length;
      if (!value) {
        value = String(size);
      }
      for (;++i < size;) {
        value[i] = name[i];
      }
      return value;
    }
    /**
     * @param {?} arr
     * @param {Function} fn
     * @return {?}
     */
    function each(arr, fn) {
      /** @type {number} */
      var i = -1;
      var size = arr.length;
      for (;++i < size && fn(arr[i], i, arr) !== false;) {
      }
      return arr;
    }
    /**
     * @param {Object} result
     * @param {Function} callback
     * @return {?}
     */
    function cleanup(result, callback) {
      var index = result.length;
      for (;index-- && callback(result[index], index, result) !== false;) {
      }
      return result;
    }
    /**
     * @param {Object} object
     * @param {Function} callback
     * @return {?}
     */
    function addEvent(object, callback) {
      /** @type {number} */
      var index = -1;
      var length = object.length;
      for (;++index < length;) {
        if (!callback(object[index], index, object)) {
          return false;
        }
      }
      return true;
    }
    /**
     * @param {Array} s
     * @param {Function} a
     * @return {?}
     */
    function val(s, a) {
      /** @type {number} */
      var j = -1;
      var length = s.length;
      /** @type {number} */
      var p = -1;
      /** @type {Array} */
      var out = [];
      for (;++j < length;) {
        var c = s[j];
        if (a(c, j, s)) {
          out[++p] = c;
        }
      }
      return out;
    }
    /**
     * @param {Array} arr
     * @param {?} callback
     * @return {?}
     */
    function pass(arr, callback) {
      /** @type {number} */
      var i = -1;
      var e = arr.length;
      var results = String(e);
      for (;++i < e;) {
        results[i] = callback(arr[i], i, arr);
      }
      return results;
    }
    /**
     * @param {Array} a
     * @return {?}
     */
    function equal(a) {
      /** @type {number} */
      var idx = -1;
      var al = a.length;
      var last = element;
      for (;++idx < al;) {
        var next = a[idx];
        if (next > last) {
          last = next;
        }
      }
      return last;
    }
    /**
     * @param {Array} prefixes
     * @return {?}
     */
    function prefix(prefixes) {
      /** @type {number} */
      var i = -1;
      var len = prefixes.length;
      var type = text;
      for (;++i < len;) {
        var fx = prefixes[i];
        if (type > fx) {
          type = fx;
        }
      }
      return type;
    }
    /**
     * @param {Array} name
     * @param {?} fn
     * @param {Array} value
     * @param {boolean} obj
     * @return {?}
     */
    function del(name, fn, value, obj) {
      /** @type {number} */
      var i = -1;
      var size = name.length;
      if (obj) {
        if (size) {
          value = name[++i];
        }
      }
      for (;++i < size;) {
        value = fn(value, name[i], i, name);
      }
      return value;
    }
    /**
     * @param {Object} name
     * @param {?} fn
     * @param {Array} value
     * @param {boolean} a
     * @return {?}
     */
    function param(name, fn, value, a) {
      var i = name.length;
      if (a) {
        if (i) {
          value = name[--i];
        }
      }
      for (;i--;) {
        value = fn(value, name[i], i, name);
      }
      return value;
    }
    /**
     * @param {Array} arr
     * @param {Object} fn
     * @return {?}
     */
    function arrayEvery(arr, fn) {
      /** @type {number} */
      var i = -1;
      var size = arr.length;
      for (;++i < size;) {
        if (fn(arr[i], i, arr)) {
          return true;
        }
      }
      return false;
    }
    /**
     * @param {?} io
     * @param {string} ref
     * @return {?}
     */
    function loader(io, ref) {
      return "undefined" == typeof io ? ref : io;
    }
    /**
     * @param {number} event
     * @param {number} err
     * @param {?} result
     * @param {?} value
     * @return {?}
     */
    function wrappedCallback(event, err, result, value) {
      return "undefined" != typeof event && hasOwnProperty.call(value, result) ? event : err;
    }
    /**
     * @param {?} obj
     * @param {string} object
     * @param {Function} callback
     * @return {?}
     */
    function extend(obj, object, callback) {
      var props = keys(object);
      if (!callback) {
        return _extend(object, obj, props);
      }
      /** @type {number} */
      var index = -1;
      var length = props.length;
      for (;++index < length;) {
        var key = props[index];
        var x = obj[key];
        var val = callback(x, object[key], key, obj, object);
        if (!((val === val ? val === x : x !== x) && ("undefined" != typeof x || key in obj))) {
          obj[key] = val;
        }
      }
      return obj;
    }
    /**
     * @param {string} options
     * @param {Array} data
     * @return {?}
     */
    function end(options, data) {
      /** @type {number} */
      var i = -1;
      var context = options.length;
      var key = done(context);
      var size = data.length;
      var ret = String(size);
      for (;++i < size;) {
        var prop = data[i];
        if (key) {
          /** @type {number} */
          prop = parseFloat(prop);
          ret[i] = jQuery(prop, context) ? options[prop] : val;
        } else {
          ret[i] = options[prop];
        }
      }
      return ret;
    }
    /**
     * @param {string} source
     * @param {?} target
     * @param {?} props
     * @return {?}
     */
    function _extend(source, target, props) {
      if (!props) {
        props = target;
        target = {};
      }
      /** @type {number} */
      var index = -1;
      var length = props.length;
      for (;++index < length;) {
        var prop = props[index];
        target[prop] = source[prop];
      }
      return target;
    }
    /**
     * @param {?} data
     * @param {Array} path
     * @return {?}
     */
    function search(data, path) {
      /** @type {number} */
      var i = -1;
      var len = path.length;
      for (;++i < len;) {
        var key = path[i];
        data[key] = f(data[key], mask, data);
      }
      return data;
    }
    /**
     * @param {string} item
     * @param {Object} name
     * @param {number} opt_attributes
     * @return {?}
     */
    function start(item, name, opt_attributes) {
      /** @type {string} */
      var type = typeof item;
      return "function" == type ? "undefined" != typeof name && set(item) ? parse(item, name, opt_attributes) : item : null == item ? identity : "object" == type ? delegate(item) : debug(item + "");
    }
    /**
     * @param {string} value
     * @param {boolean} deepDataAndEvents
     * @param {Object} callback
     * @param {?} docs
     * @param {boolean} raw
     * @param {Object} stack
     * @param {Object} tmpl
     * @return {?}
     */
    function process(value, deepDataAndEvents, callback, docs, raw, stack, tmpl) {
      var options;
      if (callback && (options = raw ? callback(value, docs, raw) : callback(value)), "undefined" != typeof options) {
        return options;
      }
      if (!func(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        if (options = next(value), !deepDataAndEvents) {
          return isClassOf(value, options);
        }
      } else {
        var type = result.call(value);
        /** @type {boolean} */
        var iterator = type == input;
        if (type != string && (type != prop && (!iterator || raw))) {
          return map[type] ? clone(value, type, deepDataAndEvents) : raw ? value : {};
        }
        if (options = successCallback(iterator ? {} : value), !deepDataAndEvents) {
          return _extend(value, options, keys(value));
        }
      }
      if (!stack) {
        /** @type {Array} */
        stack = [];
      }
      if (!tmpl) {
        /** @type {Array} */
        tmpl = [];
      }
      var i = stack.length;
      for (;i--;) {
        if (stack[i] == value) {
          return tmpl[i];
        }
      }
      return stack.push(value), tmpl.push(options), (isArr ? each : check)(value, function(val, key) {
        options[key] = process(val, deepDataAndEvents, callback, key, value, stack, tmpl);
      }), options;
    }
    /**
     * @param {string} node
     * @param {number} deepDataAndEvents
     * @param {Object} value
     * @param {number} recurring
     * @return {?}
     */
    function append(node, deepDataAndEvents, value, recurring) {
      if (!isFunction(node)) {
        throw new Stream(filename);
      }
      return dataAttr(function() {
        node.apply(val, call(value, recurring));
      }, deepDataAndEvents);
    }
    /**
     * @param {Object} array
     * @param {Object} start
     * @return {?}
     */
    function slice(array, start) {
      var length = array ? array.length : 0;
      /** @type {Array} */
      var ret = [];
      if (!length) {
        return ret;
      }
      /** @type {number} */
      var i = -1;
      var min = has();
      /** @type {boolean} */
      var elem = min == findIndex;
      var nType = elem && (start.length >= 200 && push(start));
      var startIndex = start.length;
      if (nType) {
        /** @type {function (Object, string): ?} */
        min = store;
        /** @type {boolean} */
        elem = false;
        start = nType;
      }
      a: for (;++i < length;) {
        var value = array[i];
        if (elem && value === value) {
          var index = startIndex;
          for (;index--;) {
            if (start[index] === value) {
              continue a;
            }
          }
          ret.push(value);
        } else {
          if (min(start, value) < 0) {
            ret.push(value);
          }
        }
      }
      return ret;
    }
    /**
     * @param {Object} value
     * @param {Function} callback
     * @return {?}
     */
    function resolve(value, callback) {
      var length = value ? value.length : 0;
      if (!done(length)) {
        return check(value, callback);
      }
      /** @type {number} */
      var index = -1;
      var collection = apply(value);
      for (;++index < length && callback(collection[index], index, collection) !== false;) {
      }
      return value;
    }
    /**
     * @param {boolean} name
     * @param {?} callback
     * @return {?}
     */
    function handler(name, callback) {
      var index = name ? name.length : 0;
      if (!done(index)) {
        return method(name, callback);
      }
      var array = apply(name);
      for (;index-- && callback(array[index], index, array) !== false;) {
      }
      return name;
    }
    /**
     * @param {Object} value
     * @param {Function} func
     * @return {?}
     */
    function onload(value, func) {
      /** @type {boolean} */
      var result = true;
      return resolve(value, function(name, i, ary) {
        return result = !!func(name, i, ary);
      }), result;
    }
    /**
     * @param {string} value
     * @param {Function} done
     * @return {?}
     */
    function enter(value, done) {
      /** @type {Array} */
      var bucket = [];
      return resolve(value, function(value, profile, code) {
        if (done(value, profile, code)) {
          bucket.push(value);
        }
      }), bucket;
    }
    /**
     * @param {string} x
     * @param {Object} callback
     * @param {Function} f
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    function test(x, callback, f, dataAndEvents) {
      var a;
      return f(x, function(basis, mongoObject, arg) {
        return callback(basis, mongoObject, arg) ? (a = dataAndEvents ? mongoObject : basis, false) : void 0;
      }), a;
    }
    /**
     * @param {Object} a
     * @param {boolean} recurring
     * @param {boolean} opt_isDefault
     * @param {number} dataAndEvents
     * @return {?}
     */
    function require(a, recurring, opt_isDefault, dataAndEvents) {
      /** @type {number} */
      var s = (dataAndEvents || 0) - 1;
      var al = a.length;
      /** @type {number} */
      var ri = -1;
      /** @type {Array} */
      var result = [];
      for (;++s < al;) {
        var value = a[s];
        if (func(value) && (done(value.length) && (isArray(value) || isArguments(value)))) {
          if (recurring) {
            value = require(value, recurring, opt_isDefault);
          }
          /** @type {number} */
          var valIndex = -1;
          var valLength = value.length;
          result.length += valLength;
          for (;++valIndex < valLength;) {
            result[++ri] = value[valIndex];
          }
        } else {
          if (!opt_isDefault) {
            result[++ri] = value;
          }
        }
      }
      return result;
    }
    /**
     * @param {?} object
     * @param {Function} func
     * @param {Function} fn
     * @return {?}
     */
    function walk(object, func, fn) {
      /** @type {number} */
      var index = -1;
      var obj = apply(object);
      var properties = fn(object);
      var length = properties.length;
      for (;++index < length;) {
        var prop = properties[index];
        if (func(obj[prop], prop, obj) === false) {
          break;
        }
      }
      return object;
    }
    /**
     * @param {string} name
     * @param {Function} callback
     * @param {Function} fn
     * @return {?}
     */
    function subscribe(name, callback, fn) {
      var collection = apply(name);
      var array = fn(name);
      var index = array.length;
      for (;index--;) {
        var prop = array[index];
        if (callback(collection[prop], prop, collection) === false) {
          break;
        }
      }
      return name;
    }
    /**
     * @param {?} source
     * @param {Function} cb
     * @return {?}
     */
    function show(source, cb) {
      return walk(source, cb, forEach);
    }
    /**
     * @param {?} replacementHash
     * @param {Function} cb
     * @return {?}
     */
    function check(replacementHash, cb) {
      return walk(replacementHash, cb, keys);
    }
    /**
     * @param {Object} o
     * @param {?} callback
     * @return {?}
     */
    function method(o, callback) {
      return subscribe(o, callback, keys);
    }
    /**
     * @param {string} object
     * @param {Array} attributes
     * @return {?}
     */
    function post(object, attributes) {
      /** @type {number} */
      var i = -1;
      var len = attributes.length;
      /** @type {number} */
      var resLength = -1;
      /** @type {Array} */
      var res = [];
      for (;++i < len;) {
        var key = attributes[i];
        if (isFunction(object[key])) {
          res[++resLength] = key;
        }
      }
      return res;
    }
    /**
     * @param {boolean} value
     * @param {string} name
     * @param {?} args
     * @return {?}
     */
    function wrapped(value, name, args) {
      /** @type {number} */
      var ri = -1;
      /** @type {boolean} */
      var hasCallback = "function" == typeof name;
      var data = value ? value.length : 0;
      var result = done(data) ? String(data) : [];
      return resolve(value, function(value) {
        var callback = hasCallback ? name : null != value && value[name];
        result[++ri] = callback ? callback.apply(value, args) : val;
      }), result;
    }
    /**
     * @param {?} a
     * @param {?} b
     * @param {boolean} result
     * @param {boolean} exception
     * @param {Object} obj
     * @param {Object} results
     * @return {?}
     */
    function log(a, b, result, exception, obj, results) {
      if (a === b) {
        return 0 !== a || 1 / a == 1 / b;
      }
      /** @type {string} */
      var atype = typeof a;
      /** @type {string} */
      var first = typeof b;
      return "function" != atype && ("object" != atype && ("function" != first && "object" != first)) || (null == a || null == b) ? a !== a && b !== b : value(a, b, log, result, exception, obj, results);
    }
    /**
     * @param {string} value
     * @param {string} options
     * @param {Function} callback
     * @param {boolean} obj
     * @param {boolean} error
     * @param {Array} values
     * @param {Object} elements
     * @return {?}
     */
    function value(value, options, callback, obj, error, values, elements) {
      var isFunction = isArray(value);
      var req = isArray(options);
      /** @type {string} */
      var type = s;
      /** @type {string} */
      var style = s;
      if (!isFunction) {
        type = result.call(value);
        if (type == prop) {
          /** @type {string} */
          type = string;
        } else {
          if (type != string) {
            isFunction = isString(value);
          }
        }
      }
      if (!req) {
        style = result.call(options);
        if (style == prop) {
          /** @type {string} */
          style = string;
        } else {
          if (style != string) {
            req = isString(options);
          }
        }
      }
      /** @type {boolean} */
      var propertyIsEnumerable = type == string;
      /** @type {boolean} */
      var methodInvoked = style == string;
      /** @type {boolean} */
      var isScale = type == style;
      if (isScale && (!isFunction && !propertyIsEnumerable)) {
        return register(value, options, type);
      }
      var err = propertyIsEnumerable && hasOwnProperty.call(value, "__wrapped__");
      var code = methodInvoked && hasOwnProperty.call(options, "__wrapped__");
      if (err || code) {
        return callback(err ? value.value() : value, code ? options.value() : options, obj, error, values, elements);
      }
      if (!isScale) {
        return false;
      }
      if (!values) {
        /** @type {Array} */
        values = [];
      }
      if (!elements) {
        /** @type {Array} */
        elements = [];
      }
      var i = values.length;
      for (;i--;) {
        if (values[i] == value) {
          return elements[i] == options;
        }
      }
      values.push(value);
      elements.push(options);
      var key = (isFunction ? insert : send)(value, options, callback, obj, error, values, elements);
      return values.pop(), elements.pop(), key;
    }
    /**
     * @param {number} object
     * @param {Array} params
     * @param {Array} obj
     * @param {Array} arr
     * @param {boolean} callback
     * @return {?}
     */
    function clear(object, params, obj, arr, callback) {
      var len = params.length;
      if (null == object) {
        return!len;
      }
      /** @type {number} */
      var i = -1;
      /** @type {boolean} */
      var gotArr = !callback;
      for (;++i < len;) {
        if (gotArr && arr[i] ? obj[i] !== object[params[i]] : !hasOwnProperty.call(object, params[i])) {
          return false;
        }
      }
      /** @type {number} */
      i = -1;
      for (;++i < len;) {
        var param = params[i];
        if (gotArr && arr[i]) {
          var ret = hasOwnProperty.call(object, param)
        } else {
          var value = object[param];
          var result = obj[i];
          ret = callback ? callback(value, result, param) : val;
          if ("undefined" == typeof ret) {
            ret = log(result, value, callback, true);
          }
        }
        if (!ret) {
          return false;
        }
      }
      return true;
    }
    /**
     * @param {Function} val
     * @param {?} callback
     * @return {?}
     */
    function onComplete(val, callback) {
      /** @type {Array} */
      var results = [];
      return resolve(val, function(value, i, a) {
        results.push(callback(value, i, a));
      }), results;
    }
    /**
     * @param {string} key
     * @return {?}
     */
    function delegate(key) {
      var props = keys(key);
      var k = props.length;
      if (1 == k) {
        var i = props[0];
        var v = key[i];
        if (parseFloat(v)) {
          return function(a) {
            return null != a && (v === a[i] && hasOwnProperty.call(a, i));
          };
        }
      }
      var cache = String(k);
      var ret = String(k);
      for (;k--;) {
        v = key[props[k]];
        cache[k] = v;
        ret[k] = parseFloat(v);
      }
      return function(tagName) {
        return clear(tagName, props, cache, ret);
      };
    }
    /**
     * @param {Array} data
     * @param {string} value
     * @param {boolean} next
     * @param {(Array|string)} args
     * @param {(Array|string)} s
     * @return {?}
     */
    function get(data, value, next, args, s) {
      var isArr = done(value.length) && (isArray(value) || isString(value));
      return(isArr ? each : check)(value, function(name, type, conf) {
        if (func(name)) {
          return args || (args = []), s || (s = []), error(data, conf, type, get, next, args, s);
        }
        var index = data[type];
        var method = next ? next(index, name, type, data, conf) : val;
        /** @type {boolean} */
        var warning_status = "undefined" == typeof method;
        if (warning_status) {
          method = name;
        }
        if (!(!isArr && "undefined" == typeof method)) {
          if (!(!warning_status && (method === method ? method === index : index !== index))) {
            data[type] = method;
          }
        }
      }), data;
    }
    /**
     * @param {Array} results
     * @param {Array} options
     * @param {number} key
     * @param {Function} func
     * @param {boolean} callback
     * @param {Object} data
     * @param {Array} object
     * @return {?}
     */
    function error(results, options, key, func, callback, data, object) {
      var k = data.length;
      var value = options[key];
      for (;k--;) {
        if (data[k] == value) {
          return void(results[key] = object[k]);
        }
      }
      var name = results[key];
      var args = callback ? callback(name, value, key, results, options) : val;
      /** @type {boolean} */
      var warning_status = "undefined" == typeof args;
      if (warning_status) {
        args = value;
        if (done(value.length) && (isArray(value) || isString(value))) {
          args = isArray(name) ? name : name ? isClassOf(name) : [];
        } else {
          if (expect(value) || isArguments(value)) {
            args = isArguments(name) ? removeListener(name) : expect(name) ? name : {};
          } else {
            /** @type {boolean} */
            warning_status = false;
          }
        }
      }
      data.push(value);
      object.push(args);
      if (warning_status) {
        results[key] = func(args, value, callback, data, object);
      } else {
        if (args === args ? args !== name : name === name) {
          results[key] = args;
        }
      }
    }
    /**
     * @param {string} key
     * @return {?}
     */
    function debug(key) {
      return function(object) {
        return null == object ? val : object[key];
      };
    }
    /**
     * @param {string} context
     * @param {Object} res
     * @return {?}
     */
    function close(context, res) {
      var j = res.length;
      var ret = end(context, res);
      res.sort(compare);
      for (;j--;) {
        /** @type {number} */
        var node = parseFloat(res[j]);
        if (node != root && jQuery(node)) {
          /** @type {number} */
          var root = node;
          block.call(context, node, 1);
        }
      }
      return ret;
    }
    /**
     * @param {number} name
     * @param {number} keepData
     * @return {?}
     */
    function hasOwn(name, keepData) {
      return name + floor(nativeRandom() * (keepData - name + 1));
    }
    /**
     * @param {string} name
     * @param {?} fail
     * @param {Array} value
     * @param {boolean} shallow
     * @param {Function} callback
     * @return {?}
     */
    function exports(name, fail, value, shallow, callback) {
      return callback(name, function(e, message, deepDataAndEvents) {
        value = shallow ? (shallow = false, e) : fail(value, e, message, deepDataAndEvents);
      }), value;
    }
    /**
     * @param {Object} array
     * @param {number} recurring
     * @param {number} index
     * @return {?}
     */
    function call(array, recurring, index) {
      /** @type {number} */
      var i = -1;
      var length = array.length;
      /** @type {number} */
      recurring = null == recurring ? 0 : +recurring || 0;
      if (0 > recurring) {
        recurring = -recurring > length ? 0 : length + recurring;
      }
      index = "undefined" == typeof index || index > length ? length : +index || 0;
      if (0 > index) {
        index += length;
      }
      /** @type {number} */
      length = recurring > index ? 0 : index - recurring >>> 0;
      recurring >>>= 0;
      var result = String(length);
      for (;++i < length;) {
        result[i] = array[i + recurring];
      }
      return result;
    }
    /**
     * @param {string} context
     * @param {Object} iterator
     * @return {?}
     */
    function detect(context, iterator) {
      var i;
      return resolve(context, function(x, opt_obj2, capture) {
        return i = iterator(x, opt_obj2, capture), !i;
      }), !!i;
    }
    /**
     * @param {Array} array
     * @param {boolean} callback
     * @return {?}
     */
    function baseUniq(array, callback) {
      /** @type {number} */
      var index = -1;
      var partial = has();
      var length = array.length;
      /** @type {boolean} */
      var elem = partial == findIndex;
      /** @type {boolean} */
      var nType = elem && length >= 200;
      var context = nType && push();
      /** @type {Array} */
      var result = [];
      if (context) {
        /** @type {function (Object, string): ?} */
        partial = store;
        /** @type {boolean} */
        elem = false;
      } else {
        /** @type {boolean} */
        nType = false;
        /** @type {Array} */
        context = callback ? [] : result;
      }
      a: for (;++index < length;) {
        var value = array[index];
        var options = callback ? callback(value, index, array) : value;
        if (elem && value === value) {
          var j = context.length;
          for (;j--;) {
            if (context[j] === options) {
              continue a;
            }
          }
          if (callback) {
            context.push(options);
          }
          result.push(value);
        } else {
          if (partial(context, options) < 0) {
            if (callback || nType) {
              context.push(options);
            }
            result.push(value);
          }
        }
      }
      return result;
    }
    /**
     * @param {string} object
     * @param {Array} props
     * @return {?}
     */
    function forOwn(object, props) {
      /** @type {number} */
      var index = -1;
      var length = props.length;
      var result = String(length);
      for (;++index < length;) {
        result[index] = object[props[index]];
      }
      return result;
    }
    /**
     * @param {Object} obj
     * @param {Array} ca
     * @return {?}
     */
    function self(obj, ca) {
      /** @type {Object} */
      var value = obj;
      if (value instanceof data) {
        value = value.value();
      }
      /** @type {number} */
      var i = -1;
      var len = ca.length;
      for (;++i < len;) {
        /** @type {Array} */
        var args = [value];
        var c = ca[i];
        dojo.apply(args, c.args);
        value = c.func.apply(c.thisArg, args);
      }
      return value;
    }
    /**
     * @param {Object} array
     * @param {?} recurring
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    function split(array, recurring, deepDataAndEvents) {
      /** @type {number} */
      var low = 0;
      var high = array ? array.length : low;
      if ("number" == typeof recurring && (recurring === recurring && halfSize >= high)) {
        for (;high > low;) {
          /** @type {number} */
          var mid = low + high >>> 1;
          var val = array[mid];
          if (deepDataAndEvents ? recurring >= val : recurring > val) {
            /** @type {number} */
            low = mid + 1;
          } else {
            /** @type {number} */
            high = mid;
          }
        }
        return high;
      }
      return write(array, recurring, identity, deepDataAndEvents);
    }
    /**
     * @param {Object} array
     * @param {?} recurring
     * @param {Function} callback
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    function write(array, recurring, callback, deepDataAndEvents) {
      recurring = callback(recurring);
      /** @type {number} */
      var low = 0;
      var high = array ? array.length : 0;
      /** @type {boolean} */
      var g = recurring !== recurring;
      /** @type {boolean} */
      var name = "undefined" == typeof recurring;
      for (;high > low;) {
        var mid = floor((low + high) / 2);
        var option = callback(array[mid]);
        /** @type {boolean} */
        var allOptions = option === option;
        if (g) {
          var names = allOptions || deepDataAndEvents
        } else {
          names = name ? allOptions && (deepDataAndEvents || "undefined" != typeof option) : deepDataAndEvents ? recurring >= option : recurring > option;
        }
        if (names) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return ok(high, why);
    }
    /**
     * @param {Function} fn
     * @param {?} scope
     * @param {number} expectedNumberOfNonCommentArgs
     * @return {?}
     */
    function parse(fn, scope, expectedNumberOfNonCommentArgs) {
      if ("function" != typeof fn) {
        return identity;
      }
      if ("undefined" == typeof scope) {
        return fn;
      }
      switch(expectedNumberOfNonCommentArgs) {
        case 1:
          return function(Class) {
            return fn.call(scope, Class);
          };
        case 3:
          return function(Class, index, computed) {
            return fn.call(scope, Class, index, computed);
          };
        case 4:
          return function(Class, index, computed, arr) {
            return fn.call(scope, Class, index, computed, arr);
          };
        case 5:
          return function(Class, index, computed, arr, filename) {
            return fn.call(scope, Class, index, computed, arr, filename);
          };
      }
      return function() {
        return fn.apply(scope, arguments);
      };
    }
    /**
     * @param {?} it
     * @return {?}
     */
    function isNode(it) {
      return ostring.call(it, 0);
    }
    /**
     * @param {(Array|Uint8Array)} o
     * @param {Array} data
     * @param {Array} s
     * @return {?}
     */
    function setter(o, data, s) {
      var n = s.length;
      /** @type {number} */
      var e = -1;
      var y = max(o.length - n, 0);
      /** @type {number} */
      var i = -1;
      var m = data.length;
      var r = String(y + m);
      for (;++i < m;) {
        r[i] = data[i];
      }
      for (;++e < n;) {
        r[s[e]] = o[e];
      }
      for (;y--;) {
        r[i++] = o[e++];
      }
      return r;
    }
    /**
     * @param {(Array|Uint8Array)} arr
     * @param {Array} value
     * @param {Array} config
     * @return {?}
     */
    function format(arr, value, config) {
      /** @type {number} */
      var t = -1;
      var offst = config.length;
      /** @type {number} */
      var i = -1;
      var y = max(arr.length - offst, 0);
      /** @type {number} */
      var id = -1;
      var len = value.length;
      var obj = String(y + len);
      for (;++i < y;) {
        obj[i] = arr[i];
      }
      /** @type {number} */
      var type = i;
      for (;++id < len;) {
        obj[type + id] = value[id];
      }
      for (;++t < offst;) {
        obj[type + config[t]] = arr[i++];
      }
      return obj;
    }
    /**
     * @param {Function} cb
     * @param {Object} filter
     * @return {?}
     */
    function read(cb, filter) {
      return function(names, value, key) {
        var er = filter ? filter() : {};
        if (value = callback(value, key, 3), isArray(names)) {
          /** @type {number} */
          var index = -1;
          var n = names.length;
          for (;++index < n;) {
            var data = names[index];
            cb(er, data, value(data, index, names), names);
          }
        } else {
          resolve(names, function(data, index, ref) {
            cb(er, data, value(data, index, ref), ref);
          });
        }
        return er;
      };
    }
    /**
     * @param {Function} callback
     * @return {?}
     */
    function setup(callback) {
      return function() {
        /** @type {number} */
        var argsLen = arguments.length;
        var template = arguments[0];
        if (2 > argsLen || null == template) {
          return template;
        }
        if (argsLen > 3 && (fn(arguments[1], arguments[2], arguments[3]) && (argsLen = 2)), argsLen > 3 && "function" == typeof arguments[argsLen - 2]) {
          var arg = parse(arguments[--argsLen - 1], arguments[argsLen--], 5)
        } else {
          if (argsLen > 2) {
            if ("function" == typeof arguments[argsLen - 1]) {
              arg = arguments[--argsLen];
            }
          }
        }
        /** @type {number} */
        var j = 0;
        for (;++j < argsLen;) {
          var arr = arguments[j];
          if (arr) {
            callback(template, arr, arg);
          }
        }
        return template;
      };
    }
    /**
     * @param {string} next
     * @param {?} object
     * @return {?}
     */
    function publish(next, object) {
      /**
       * @return {?}
       */
      function buffer() {
        return(this instanceof buffer ? on : next).apply(object, arguments);
      }
      var on = trigger(next);
      return buffer;
    }
    /**
     * @param {Function} callback
     * @return {?}
     */
    function interpolate(callback) {
      return function(fieldName) {
        /** @type {number} */
        var i = -1;
        var codeSegments = runTest(appendModelPrefix(fieldName));
        var charLen = codeSegments.length;
        /** @type {string} */
        var basis = "";
        for (;++i < charLen;) {
          basis = callback(basis, codeSegments[i], i);
        }
        return basis;
      };
    }
    /**
     * @param {Function} fn
     * @return {?}
     */
    function trigger(fn) {
      return function() {
        var obj = expression(fn.prototype);
        var child = fn.apply(obj, arguments);
        return func(child) ? child : obj;
      };
    }
    /**
     * @param {Function} name
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    function loop(name, deepDataAndEvents) {
      return function(res, key, index) {
        if (index) {
          if (fn(res, key, index)) {
            /** @type {null} */
            key = null;
          }
        }
        var action = callback();
        /** @type {boolean} */
        var flying = null == key;
        if (action === start && flying || (flying = false, key = action(key, index, 3)), flying) {
          var stream = isArray(res);
          if (stream || !update(res)) {
            return name(stream ? res : cb(res));
          }
          /** @type {function (string): ?} */
          key = text;
        }
        return addResult(res, key, deepDataAndEvents);
      };
    }
    /**
     * @param {string} el
     * @param {?} x
     * @param {Object} success
     * @param {Object} id
     * @param {Array} value
     * @param {Object} obj
     * @param {Array} config
     * @param {Object} name
     * @param {Array} position
     * @param {number} start
     * @return {?}
     */
    function hide(el, x, success, id, value, obj, config, name, position, start) {
      /**
       * @return {?}
       */
      function execute() {
        /** @type {number} */
        var len = arguments.length;
        /** @type {number} */
        var i = len;
        var args = String(len);
        for (;i--;) {
          args[i] = arguments[i];
        }
        if (id && (args = setter(args, id, value)), obj && (args = format(args, obj, config)), a || b) {
          var placeholder = execute.placeholder;
          var all = toArray(args, placeholder);
          if (len -= all.length, start > len) {
            var newName = name ? isClassOf(name) : null;
            var length = max(start - len, 0);
            var udataCur = a ? all : null;
            var spyCall = a ? null : all;
            var modId = a ? args : null;
            var suiteView = a ? null : args;
            x |= a ? c : more;
            x &= ~(a ? more : c);
            if (!q) {
              x &= ~(mask | mapSizeComparer);
            }
            var options = hide(el, x, success, modId, udataCur, suiteView, spyCall, newName, position, length);
            return options.placeholder = placeholder, options;
          }
        }
        var elems = result ? success : this;
        return overflowX && (el = elems[e]), name && (args = tokenize(args, name)), l && (position < args.length && (args.length = position)), (this instanceof execute ? precomputed || trigger(el) : el).apply(elems, args);
      }
      /** @type {number} */
      var l = x & j;
      /** @type {number} */
      var result = x & mask;
      /** @type {number} */
      var overflowX = x & mapSizeComparer;
      /** @type {number} */
      var a = x & y;
      /** @type {number} */
      var q = x & z;
      /** @type {number} */
      var b = x & step;
      var precomputed = !overflowX && trigger(el);
      var e = el;
      return execute;
    }
    /**
     * @param {string} input
     * @param {number} key
     * @param {string} str
     * @return {?}
     */
    function escape(input, key, str) {
      var il = input.length;
      if (key = +key, il >= key || !encodeURIComponent(key)) {
        return "";
      }
      /** @type {number} */
      var attributes = key - il;
      return str = null == str ? " " : str + "", repeat(str, ceil(attributes / str.length)).slice(0, attributes);
    }
    /**
     * @param {string} next
     * @param {number} i
     * @param {Object} obj
     * @param {Array} values
     * @return {?}
     */
    function refresh(next, i, obj, values) {
      /**
       * @return {?}
       */
      function finish() {
        /** @type {number} */
        var current = -1;
        /** @type {number} */
        var argLength = arguments.length;
        /** @type {number} */
        var i = -1;
        var valuesLen = values.length;
        var params = String(argLength + valuesLen);
        for (;++i < valuesLen;) {
          params[i] = values[i];
        }
        for (;argLength--;) {
          params[i++] = arguments[++current];
        }
        return(this instanceof finish ? on : next).apply(is_struct ? obj : this, params);
      }
      /** @type {number} */
      var is_struct = i & mask;
      var on = trigger(next);
      return finish;
    }
    /**
     * @param {string} name
     * @param {number} n
     * @param {Function} mayParseLabeledStatementInstead
     * @param {Object} items
     * @param {Object} b
     * @param {Array} recurring
     * @param {Function} method
     * @param {string} x
     * @return {?}
     */
    function f(name, n, mayParseLabeledStatementInstead, items, b, recurring, method, x) {
      /** @type {number} */
      var hasIndex = n & mapSizeComparer;
      if (!hasIndex && !isFunction(name)) {
        throw new Stream(filename);
      }
      var d = items ? items.length : 0;
      if (d || (n &= ~(c | more), items = b = null), d -= b ? b.length : 0, n & more) {
        /** @type {Object} */
        var resultItems = items;
        /** @type {Object} */
        var y = b;
        /** @type {null} */
        items = b = null;
      }
      var result = !hasIndex && ondata(name);
      /** @type {Array} */
      var args = [name, n, mayParseLabeledStatementInstead, items, b, resultItems, y, recurring, method, x];
      if (result && (result !== true && (print(args, result), n = args[1], x = args[9])), args[9] = null == x ? hasIndex ? 0 : name.length : max(x - d, 0) || 0, n == mask) {
        var clone = publish(args[0], args[2])
      } else {
        clone = n != c && n != (mask | c) || args[4].length ? hide.apply(null, args) : refresh.apply(null, args);
      }
      var callback = result ? group : failed;
      return callback(clone, args);
    }
    /**
     * @param {Array} values
     * @param {Object} list
     * @param {Function} fn
     * @param {boolean} callback
     * @param {boolean} text
     * @param {Array} cb
     * @param {Object} arr
     * @return {?}
     */
    function insert(values, list, fn, callback, text, cb, arr) {
      /** @type {number} */
      var i = -1;
      var len = values.length;
      var start = list.length;
      /** @type {boolean} */
      var cols = true;
      if (len != start && !(text && start > len)) {
        return false;
      }
      for (;cols && ++i < len;) {
        var value = values[i];
        var item = list[i];
        if (cols = val, callback && (cols = text ? callback(item, value, i) : callback(value, item, i)), "undefined" == typeof cols) {
          if (text) {
            var _i = start;
            for (;_i-- && (item = list[_i], !(cols = value && value === item || fn(value, item, callback, text, cb, arr)));) {
            }
          } else {
            cols = value && value === item || fn(value, item, callback, text, cb, arr);
          }
        }
      }
      return!!cols;
    }
    /**
     * @param {number} a
     * @param {number} b
     * @param {string} type
     * @return {?}
     */
    function register(a, b, type) {
      switch(type) {
        case m:
        ;
        case index:
          return+a == +b;
        case location:
          return a.name == b.name && a.message == b.message;
        case numberClass:
          return a != +a ? b != +b : 0 == a ? 1 / a == 1 / b : a == +b;
        case argsClass:
        ;
        case number:
          return a == b + "";
      }
      return false;
    }
    /**
     * @param {?} a
     * @param {?} b
     * @param {Function} callback
     * @param {boolean} next
     * @param {boolean} err
     * @param {Array} data
     * @param {Object} url
     * @return {?}
     */
    function send(a, b, callback, next, err, data, url) {
      var ka = keys(a);
      var charLen = ka.length;
      var kb = keys(b);
      var cnl = kb.length;
      if (charLen != cnl && !err) {
        return false;
      }
      var constructor;
      /** @type {number} */
      var i = -1;
      for (;++i < charLen;) {
        var property = ka[i];
        var index = hasOwnProperty.call(b, property);
        if (index) {
          var value = a[property];
          var result = b[property];
          index = val;
          if (next) {
            index = err ? next(result, value, property) : next(value, result, property);
          }
          if ("undefined" == typeof index) {
            index = value && value === result || callback(value, result, next, err, data, url);
          }
        }
        if (!index) {
          return false;
        }
        if (!constructor) {
          /** @type {boolean} */
          constructor = "constructor" == property;
        }
      }
      if (!constructor) {
        var ctorA = a.constructor;
        var ctorB = b.constructor;
        if (ctorA != ctorB && ("constructor" in a && ("constructor" in b && !("function" == typeof ctorA && (ctorA instanceof ctorA && ("function" == typeof ctorB && ctorB instanceof ctorB)))))) {
          return false;
        }
      }
      return true;
    }
    /**
     * @param {string} result
     * @param {Function} compareFn
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    function addResult(result, compareFn, deepDataAndEvents) {
      var value = deepDataAndEvents ? text : element;
      var fromIndex = value;
      var i = fromIndex;
      return resolve(result, function(dir, mid, gender) {
        var compare = compareFn(dir, mid, gender);
        if ((deepDataAndEvents ? fromIndex > compare : compare > fromIndex) || compare === value && compare === i) {
          fromIndex = compare;
          i = dir;
        }
      }), i;
    }
    /**
     * @param {Object} iterator
     * @param {boolean} key
     * @param {number} opt_attributes
     * @return {?}
     */
    function callback(iterator, key, opt_attributes) {
      /** @type {function (string, Object, Object): ?} */
      var emitEvent = lodash.callback || render;
      return emitEvent = emitEvent === render ? start : emitEvent, opt_attributes ? emitEvent(iterator, key, opt_attributes) : emitEvent;
    }
    /**
     * @param {(Object|string)} match
     * @param {number} recurring
     * @param {number} target
     * @return {?}
     */
    function has(match, recurring, target) {
      /** @type {function (string, number, number): ?} */
      var callback = lodash.indexOf || indexOf;
      return callback = callback === indexOf ? findIndex : callback, match ? callback(match, recurring, target) : callback;
    }
    /**
     * @param {number} top
     * @param {Object} size
     * @param {Object} collection
     * @return {?}
     */
    function create(top, size, collection) {
      /** @type {number} */
      var index = -1;
      var length = collection ? collection.length : 0;
      for (;++index < length;) {
        var node = collection[index];
        var height = node.size;
        switch(node.type) {
          case "drop":
            top += height;
            break;
          case "dropRight":
            size -= height;
            break;
          case "take":
            size = ok(size, top + height);
            break;
          case "takeRight":
            top = max(top, size - height);
        }
      }
      return{
        start : top,
        end : size
      };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function next(value) {
      var len = value.length;
      var result = new value.constructor(len);
      return len && ("string" == typeof value[0] && (hasOwnProperty.call(value, "index") && (result.index = value.index, result.input = value.input))), result;
    }
    /**
     * @param {(Array|string)} b
     * @return {?}
     */
    function successCallback(b) {
      var c = b.constructor;
      return "function" == typeof c && c instanceof c || (c = $), new c;
    }
    /**
     * @param {?} value
     * @param {?} keepData
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    function clone(value, keepData, deepDataAndEvents) {
      var ctor = value.constructor;
      switch(keepData) {
        case element:
          return isNode(value);
        case m:
        ;
        case index:
          return new ctor(+value);
        case objUid:
        ;
        case k:
        ;
        case letter:
        ;
        case selector:
        ;
        case provide:
        ;
        case key:
        ;
        case tag:
        ;
        case hash:
        ;
        case id:
          var b = value.buffer;
          return new ctor(deepDataAndEvents ? isNode(b) : b, value.byteOffset, value.length);
        case numberClass:
        ;
        case number:
          return new ctor(value);
        case argsClass:
          var result = new ctor(value.source, rtagName.exec(value));
          result.lastIndex = value.lastIndex;
      }
      return result;
    }
    /**
     * @param {(Error|string)} obj
     * @return {?}
     */
    function set(obj) {
      var support = lodash.support;
      /** @type {boolean} */
      var value = !(support.funcNames ? obj.name : support.funcDecomp);
      if (!value) {
        var type = core_toString.call(obj);
        if (!support.funcNames) {
          /** @type {boolean} */
          value = !manipulation_rcheckableType.test(type);
        }
        if (!value) {
          value = rmouseEvent.test(type) || map(obj);
          group(obj, value);
        }
      }
      return value;
    }
    /**
     * @param {number} b
     * @param {number} a
     * @return {?}
     */
    function jQuery(b, a) {
      return b = +b, a = null == a ? former : a, b > -1 && (b % 1 == 0 && a > b);
    }
    /**
     * @param {?} name
     * @param {?} string
     * @param {Object} array
     * @return {?}
     */
    function fn(name, string, array) {
      if (!func(array)) {
        return false;
      }
      /** @type {string} */
      var type = typeof string;
      if ("number" == type) {
        var count = array.length;
        var name2 = done(count) && jQuery(string, count);
      } else {
        /** @type {boolean} */
        name2 = "string" == type && string in array;
      }
      return name2 && array[string] === name;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function done(value) {
      return "number" == typeof value && (value > -1 && (value % 1 == 0 && former >= value));
    }
    /**
     * @param {?} val
     * @return {?}
     */
    function parseFloat(val) {
      return val === val && (0 === val ? 1 / val > 0 : !func(val));
    }
    /**
     * @param {Array} options
     * @param {Array} array
     * @return {?}
     */
    function print(options, array) {
      var i = options[1];
      var b = array[1];
      /** @type {number} */
      var ms = i | b;
      /** @type {number} */
      var sec = j | d;
      /** @type {number} */
      var limit = mask | mapSizeComparer;
      /** @type {number} */
      var h = sec | limit | z | step;
      /** @type {(boolean|number)} */
      var callback = i & j && !(b & j);
      /** @type {(boolean|number)} */
      var iterator = i & d && !(b & d);
      var joined = (iterator ? options : array)[7];
      var maxLen = (callback ? options : array)[8];
      /** @type {boolean} */
      var supports2DTransforms = !(i >= d && b > limit || i > limit && b >= d);
      /** @type {(boolean|number)} */
      var supports3DTransforms = ms >= sec && (h >= ms && (d > i || (iterator || callback) && joined.length <= maxLen));
      if (!supports2DTransforms && !supports3DTransforms) {
        return options;
      }
      if (b & mask) {
        options[2] = array[2];
        ms |= i & mask ? 0 : z;
      }
      var value = array[3];
      if (value) {
        var val = options[3];
        options[3] = val ? setter(val, value, array[4]) : isClassOf(value);
        options[4] = val ? toArray(options[3], newVal) : isClassOf(array[4]);
      }
      return value = array[5], value && (val = options[5], options[5] = val ? format(val, value, array[6]) : isClassOf(value), options[6] = val ? toArray(options[5], newVal) : isClassOf(array[6])), value = array[7], value && (options[7] = isClassOf(value)), b & j && (options[8] = null == options[8] ? array[8] : ok(options[8], array[8])), null == options[9] && (options[9] = array[9]), options[0] = array[0], options[1] = ms, options;
    }
    /**
     * @param {string} values
     * @param {Array} filters
     * @return {?}
     */
    function m(values, filters) {
      values = apply(values);
      /** @type {number} */
      var index = -1;
      var length = filters.length;
      var old = {};
      for (;++index < length;) {
        var name = filters[index];
        if (name in values) {
          old[name] = values[name];
        }
      }
      return old;
    }
    /**
     * @param {string} data
     * @param {Function} func
     * @return {?}
     */
    function message(data, func) {
      var flags = {};
      return show(data, function(value, key, ary) {
        if (func(value, key, ary)) {
          flags[key] = value;
        }
      }), flags;
    }
    /**
     * @param {string} value
     * @param {string} opts
     * @return {?}
     */
    function tokenize(value, opts) {
      var doc = value.length;
      var i = ok(opts.length, doc);
      var done = isClassOf(value);
      for (;i--;) {
        var id = opts[i];
        value[i] = jQuery(id, doc) ? done[id] : val;
      }
      return value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function select(value) {
      var ctor;
      lodash.support;
      if (!func(value) || (result.call(value) != string || !hasOwnProperty.call(value, "constructor") && (ctor = value.constructor, "function" == typeof ctor && !(ctor instanceof ctor)))) {
        return false;
      }
      var index;
      return show(value, function(dataAndEvents, restore) {
        index = restore;
      }), "undefined" == typeof index || hasOwnProperty.call(value, index);
    }
    /**
     * @param {string} object
     * @return {?}
     */
    function dispatch(object) {
      var properties = forEach(object);
      var length = properties.length;
      var context = length && object.length;
      var support = lodash.support;
      var propertyIsEnumerable = context && (done(context) && (isArray(object) || support.nonEnumArgs && isArguments(object)));
      /** @type {number} */
      var index = -1;
      /** @type {Array} */
      var bucket = [];
      for (;++index < length;) {
        var value = properties[index];
        if (propertyIsEnumerable && jQuery(value, context) || hasOwnProperty.call(object, value)) {
          bucket.push(value);
        }
      }
      return bucket;
    }
    /**
     * @param {string} optgroup
     * @return {?}
     */
    function cb(optgroup) {
      return null == optgroup ? [] : done(optgroup.length) ? func(optgroup) ? optgroup : $(optgroup) : bind(optgroup);
    }
    /**
     * @param {string} optgroup
     * @return {?}
     */
    function apply(optgroup) {
      return func(optgroup) ? optgroup : $(optgroup);
    }
    /**
     * @param {boolean} value
     * @param {number} prop
     * @param {boolean} index
     * @return {?}
     */
    function animate(value, prop, index) {
      prop = (index ? fn(value, prop, index) : null == prop) ? 1 : max(+prop || 1, 1);
      /** @type {number} */
      var recurring = 0;
      var height = value ? value.length : 0;
      /** @type {number} */
      var i = -1;
      var self = String(ceil(height / prop));
      for (;height > recurring;) {
        self[++i] = call(value, recurring, recurring += prop);
      }
      return self;
    }
    /**
     * @param {Object} collection
     * @return {?}
     */
    function some(collection) {
      /** @type {number} */
      var index = -1;
      var length = collection ? collection.length : 0;
      /** @type {number} */
      var resLength = -1;
      /** @type {Array} */
      var res = [];
      for (;++index < length;) {
        var val = collection[index];
        if (val) {
          res[++resLength] = val;
        }
      }
      return res;
    }
    /**
     * @return {?}
     */
    function win() {
      /** @type {number} */
      var index = -1;
      /** @type {number} */
      var length = arguments.length;
      for (;++index < length;) {
        var value = arguments[index];
        if (isArray(value) || isArguments(value)) {
          break;
        }
      }
      return slice(value, require(arguments, false, true, ++index));
    }
    /**
     * @param {boolean} set
     * @param {number} key
     * @param {boolean} data
     * @return {?}
     */
    function define(set, key, data) {
      var offsetY = set ? set.length : 0;
      return offsetY ? ((data ? fn(set, key, data) : null == key) && (key = 1), call(set, 0 > key ? 0 : key)) : [];
    }
    /**
     * @param {boolean} set
     * @param {number} n
     * @param {boolean} data
     * @return {?}
     */
    function partial(set, n, data) {
      var len = set ? set.length : 0;
      return len ? ((data ? fn(set, n, data) : null == n) && (n = 1), n = len - (+n || 0), call(set, 0, 0 > n ? 0 : n)) : [];
    }
    /**
     * @param {Object} array
     * @param {Error} iterator
     * @param {boolean} context
     * @return {?}
     */
    function sortedIndex(array, iterator, context) {
      var index = array ? array.length : 0;
      if (!index) {
        return[];
      }
      iterator = callback(iterator, context, 3);
      for (;index-- && iterator(array[index], index, array);) {
      }
      return call(array, 0, index + 1);
    }
    /**
     * @param {Object} array
     * @param {Error} value
     * @param {boolean} r
     * @return {?}
     */
    function initial(array, value, r) {
      var length = array ? array.length : 0;
      if (!length) {
        return[];
      }
      /** @type {number} */
      var index = -1;
      value = callback(value, r, 3);
      for (;++index < length && value(array[index], index, array);) {
      }
      return call(array, index);
    }
    /**
     * @param {Object} data
     * @param {Error} value
     * @param {boolean} key
     * @return {?}
     */
    function iterator(data, value, key) {
      /** @type {number} */
      var i = -1;
      var len = data ? data.length : 0;
      value = callback(value, key, 3);
      for (;++i < len;) {
        if (value(data[i], i, data)) {
          return i;
        }
      }
      return-1;
    }
    /**
     * @param {Object} array
     * @param {Error} value
     * @param {boolean} key
     * @return {?}
     */
    function index(array, value, key) {
      var index = array ? array.length : 0;
      value = callback(value, key, 3);
      for (;index--;) {
        if (value(array[index], index, array)) {
          return index;
        }
      }
      return-1;
    }
    /**
     * @param {Node} array
     * @return {?}
     */
    function first(array) {
      return array ? array[0] : val;
    }
    /**
     * @param {Object} elements
     * @param {boolean} key
     * @param {boolean} index
     * @return {?}
     */
    function constructor(elements, key, index) {
      var length = elements ? elements.length : 0;
      return index && (fn(elements, key, index) && (key = false)), length ? require(elements, key) : [];
    }
    /**
     * @param {boolean} elements
     * @return {?}
     */
    function concatCall(elements) {
      var elementCount = elements ? elements.length : 0;
      return elementCount ? require(elements, true) : [];
    }
    /**
     * @param {string} name
     * @param {number} recurring
     * @param {number} thisObj
     * @return {?}
     */
    function indexOf(name, recurring, thisObj) {
      var index = name ? name.length : 0;
      if (!index) {
        return-1;
      }
      if ("number" == typeof thisObj) {
        thisObj = 0 > thisObj ? max(index + thisObj, 0) : thisObj || 0;
      } else {
        if (thisObj) {
          var n = split(name, recurring);
          var type = name[n];
          return(recurring === recurring ? recurring === type : type !== type) ? n : -1;
        }
      }
      return findIndex(name, recurring, thisObj);
    }
    /**
     * @param {boolean} key
     * @return {?}
     */
    function removeData(key) {
      return partial(key, 1);
    }
    /**
     * @return {?}
     */
    function combine() {
      /** @type {Array} */
      var bucket = [];
      /** @type {number} */
      var key = -1;
      /** @type {number} */
      var i = arguments.length;
      /** @type {Array} */
      var vals = [];
      var indexOf = has();
      /** @type {boolean} */
      var msg = indexOf == findIndex;
      for (;++key < i;) {
        var value = arguments[key];
        if (isArray(value) || isArguments(value)) {
          bucket.push(value);
          vals.push(msg && (value.length >= 120 && push(key && value)));
        }
      }
      /** @type {number} */
      i = bucket.length;
      var collection = bucket[0];
      /** @type {number} */
      var index = -1;
      var length = collection ? collection.length : 0;
      /** @type {Array} */
      var seen = [];
      var cache = vals[0];
      a: for (;++index < length;) {
        if (value = collection[index], (cache ? store(cache, value) : indexOf(seen, value)) < 0) {
          /** @type {number} */
          key = i;
          for (;--key;) {
            var val = vals[key];
            if ((val ? store(val, value) : indexOf(bucket[key], value)) < 0) {
              continue a;
            }
          }
          if (cache) {
            cache.push(value);
          }
          seen.push(value);
        }
      }
      return seen;
    }
    /**
     * @param {boolean} array
     * @return {?}
     */
    function compact(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : val;
    }
    /**
     * @param {Object} value
     * @param {?} a
     * @param {number} start
     * @return {?}
     */
    function lastIndexOf(value, a, start) {
      var i = value ? value.length : 0;
      if (!i) {
        return-1;
      }
      var idx = i;
      if ("number" == typeof start) {
        idx = (0 > start ? max(i + start, 0) : ok(start || 0, i - 1)) + 1;
      } else {
        if (start) {
          /** @type {number} */
          idx = split(value, a, true) - 1;
          var b = value[idx];
          return(a === a ? a === b : b !== b) ? idx : -1;
        }
      }
      if (a !== a) {
        return build(value, idx, true);
      }
      for (;idx--;) {
        if (value[idx] === a) {
          return idx;
        }
      }
      return-1;
    }
    /**
     * @return {?}
     */
    function eq() {
      var thisp = arguments[0];
      if (!thisp || !thisp.length) {
        return thisp;
      }
      /** @type {number} */
      var elementArgumentPos = 0;
      var forOwn = has();
      /** @type {number} */
      var argLength = arguments.length;
      for (;++elementArgumentPos < argLength;) {
        /** @type {number} */
        var target = 0;
        var element = arguments[elementArgumentPos];
        for (;(target = forOwn(thisp, element, target)) > -1;) {
          block.call(thisp, target, 1);
        }
      }
      return thisp;
    }
    /**
     * @param {Array} evt
     * @return {?}
     */
    function onclick(evt) {
      return close(evt || [], require(arguments, false, false, 1));
    }
    /**
     * @param {Object} name
     * @param {Object} keepData
     * @param {Function} item
     * @return {?}
     */
    function activate(name, keepData, item) {
      /** @type {number} */
      var style = -1;
      var index = name ? name.length : 0;
      /** @type {Array} */
      var bucket = [];
      keepData = callback(keepData, item, 3);
      for (;++style < index;) {
        var value = name[style];
        if (keepData(value, style, name)) {
          bucket.push(value);
          block.call(name, style--, 1);
          index--;
        }
      }
      return bucket;
    }
    /**
     * @param {boolean} key
     * @return {?}
     */
    function rest(key) {
      return define(key, 1);
    }
    /**
     * @param {number} recurring
     * @param {number} opt_attributes
     * @param {Object} index
     * @return {?}
     */
    function validate(recurring, opt_attributes, index) {
      var restore = recurring ? recurring.length : 0;
      return restore ? (index && ("number" != typeof index && (fn(recurring, opt_attributes, index) && (opt_attributes = 0, index = restore))), call(recurring, opt_attributes, index)) : [];
    }
    /**
     * @param {Object} fn
     * @param {?} recurring
     * @param {Object} n
     * @param {?} options
     * @return {?}
     */
    function times(fn, recurring, n, options) {
      var t = callback(n);
      return t === start && null == n ? split(fn, recurring) : write(fn, recurring, t(n, options, 1));
    }
    /**
     * @param {Object} guesses
     * @param {?} recurring
     * @param {Object} e
     * @param {?} message
     * @return {?}
     */
    function onmessage(guesses, recurring, e, message) {
      var next = callback(e);
      return next === start && null == e ? split(guesses, recurring, true) : write(guesses, recurring, next(e, message, 1), true);
    }
    /**
     * @param {boolean} set
     * @param {number} key
     * @param {boolean} data
     * @return {?}
     */
    function range(set, key, data) {
      var offsetY = set ? set.length : 0;
      return offsetY ? ((data ? fn(set, key, data) : null == key) && (key = 1), call(set, 0, 0 > key ? 0 : key)) : [];
    }
    /**
     * @param {boolean} set
     * @param {number} key
     * @param {boolean} data
     * @return {?}
     */
    function restore(set, key, data) {
      var offsetY = set ? set.length : 0;
      return offsetY ? ((data ? fn(set, key, data) : null == key) && (key = 1), key = offsetY - (+key || 0), call(set, 0 > key ? 0 : key)) : [];
    }
    /**
     * @param {Object} buffer
     * @param {Error} next
     * @param {boolean} index
     * @return {?}
     */
    function execute(buffer, next, index) {
      var ii = buffer ? buffer.length : 0;
      if (!ii) {
        return[];
      }
      next = callback(next, index, 3);
      for (;ii-- && next(buffer[ii], ii, buffer);) {
      }
      return call(buffer, ii + 1);
    }
    /**
     * @param {Object} array
     * @param {Error} iterator
     * @param {boolean} context
     * @return {?}
     */
    function _each(array, iterator, context) {
      var length = array ? array.length : 0;
      if (!length) {
        return[];
      }
      /** @type {number} */
      var index = -1;
      iterator = callback(iterator, context, 3);
      for (;++index < length && iterator(array[index], index, array);) {
      }
      return call(array, 0, index);
    }
    /**
     * @return {?}
     */
    function union() {
      return baseUniq(require(arguments, false, true));
    }
    /**
     * @param {Object} array
     * @param {Object} key
     * @param {string} a
     * @param {string} index
     * @return {?}
     */
    function uniq(array, key, a, index) {
      var length = array ? array.length : 0;
      if (!length) {
        return[];
      }
      if ("boolean" != typeof key) {
        if (null != key) {
          /** @type {string} */
          index = a;
          a = fn(array, key, index) ? null : key;
          /** @type {boolean} */
          key = false;
        }
      }
      var number = callback();
      return(number !== start || null != a) && (a = number(a, index, 3)), key && has() == findIndex ? uniq(array, a) : baseUniq(array, a);
    }
    /**
     * @param {?} arr
     * @return {?}
     */
    function last(arr) {
      /** @type {number} */
      var key2 = -1;
      /** @type {number} */
      var buf = (arr && (arr.length && equal(pass(arr, which)))) >>> 0;
      var out = String(buf);
      for (;++key2 < buf;) {
        out[key2] = pass(arr, debug(key2));
      }
      return out;
    }
    /**
     * @param {Object} array
     * @return {?}
     */
    function without(array) {
      return slice(array, call(arguments, 1));
    }
    /**
     * @return {?}
     */
    function pick() {
      /** @type {number} */
      var i = -1;
      /** @type {number} */
      var len = arguments.length;
      for (;++i < len;) {
        var value = arguments[i];
        if (isArray(value) || isArguments(value)) {
          var index = index ? slice(index, value).concat(slice(value, index)) : value
        }
      }
      return index ? baseUniq(index) : [];
    }
    /**
     * @return {?}
     */
    function zip() {
      /** @type {number} */
      var n = arguments.length;
      var ret = String(n);
      for (;n--;) {
        ret[n] = arguments[n];
      }
      return last(ret);
    }
    /**
     * @param {Object} keys
     * @param {Array} values
     * @return {?}
     */
    function object(keys, values) {
      /** @type {number} */
      var index = -1;
      var length = keys ? keys.length : 0;
      var result = {};
      if (!!length) {
        if (!values) {
          if (!isArray(keys[0])) {
            /** @type {Array} */
            values = [];
          }
        }
      }
      for (;++index < length;) {
        var key = keys[index];
        if (values) {
          result[key] = values[index];
        } else {
          if (key) {
            result[key[0]] = key[1];
          }
        }
      }
      return result;
    }
    /**
     * @param {string} optgroup
     * @return {?}
     */
    function chain(optgroup) {
      var value = lodash(optgroup);
      return value.__chain__ = true, value;
    }
    /**
     * @param {?} arg
     * @param {Function} msg
     * @param {?} value
     * @return {?}
     */
    function isObject(arg, msg, value) {
      return msg.call(value, arg), arg;
    }
    /**
     * @param {Function} event
     * @param {Function} fn
     * @param {?} thisv
     * @return {?}
     */
    function focus(event, fn, thisv) {
      return fn.call(thisv, event);
    }
    /**
     * @return {?}
     */
    function handle_cancel() {
      return chain(this);
    }
    /**
     * @return {?}
     */
    function reverse() {
      var obj = this.__wrapped__;
      return obj instanceof data ? (this.__actions__.length && (obj = new data(this)), new lodashWrapper(obj.reverse())) : this.thru(function(matched) {
        return matched.reverse();
      });
    }
    /**
     * @return {?}
     */
    function randomString() {
      return this.value() + "";
    }
    /**
     * @return {?}
     */
    function intensity() {
      return self(this.__wrapped__, this.__actions__);
    }
    /**
     * @param {boolean} e
     * @return {?}
     */
    function onend(e) {
      var error = e ? e.length : 0;
      return done(error) && (e = cb(e)), end(e, require(arguments, false, false, 1));
    }
    /**
     * @param {string} a
     * @param {string} name
     * @param {number} recurring
     * @return {?}
     */
    function contains(a, name, recurring) {
      var i = a ? a.length : 0;
      return done(i) || (a = bind(a), i = a.length), i ? (recurring = "number" == typeof recurring ? 0 > recurring ? max(i + recurring, 0) : recurring || 0 : 0, "string" == typeof a || !isArray(a) && update(a) ? i > recurring && a.indexOf(name, recurring) > -1 : has(a, name, recurring) > -1) : false;
    }
    /**
     * @param {?} name
     * @param {?} value
     * @param {boolean} key
     * @return {?}
     */
    function every(name, value, key) {
      /** @type {function (Object, Function): ?} */
      var toString = isArray(name) ? addEvent : onload;
      return("function" != typeof value || "undefined" != typeof key) && (value = callback(value, key, 3)), toString(name, value);
    }
    /**
     * @param {string} name
     * @param {Object} value
     * @param {boolean} type
     * @return {?}
     */
    function configure(name, value, type) {
      /** @type {function (Array, Function): ?} */
      var str = isArray(name) ? val : enter;
      return value = callback(value, type, 3), str(name, value);
    }
    /**
     * @param {string} type
     * @param {Error} value
     * @param {Object} index
     * @return {?}
     */
    function find(type, value, index) {
      if (isArray(type)) {
        var key = iterator(type, value, index);
        return key > -1 ? type[key] : val;
      }
      return value = callback(value, index, 3), test(type, value, resolve);
    }
    /**
     * @param {string} next
     * @param {Object} value
     * @param {boolean} input
     * @return {?}
     */
    function url(next, value, input) {
      return value = callback(value, input, 3), test(next, value, handler);
    }
    /**
     * @param {string} event
     * @param {string} storageKey
     * @return {?}
     */
    function onblur(event, storageKey) {
      return find(event, delegate(storageKey));
    }
    /**
     * @param {Function} obj
     * @param {Function} fn
     * @param {Object} callback
     * @return {?}
     */
    function initialize(obj, fn, callback) {
      return "function" == typeof fn && ("undefined" == typeof callback && isArray(obj)) ? each(obj, fn) : resolve(obj, parse(fn, callback, 3));
    }
    /**
     * @param {string} res
     * @param {Function} name
     * @param {?} callback
     * @return {?}
     */
    function onError(res, name, callback) {
      return "function" == typeof name && ("undefined" == typeof callback && isArray(res)) ? cleanup(res, name) : handler(res, parse(name, callback, 3));
    }
    /**
     * @param {boolean} isXML
     * @param {string} collection
     * @return {?}
     */
    function invoke(isXML, collection) {
      return wrapped(isXML, collection, call(arguments, 2));
    }
    /**
     * @param {Function} obj
     * @param {Function} value
     * @param {Object} key
     * @return {?}
     */
    function setValue(obj, value, key) {
      /** @type {function (Array, ?): ?} */
      var group = isArray(obj) ? pass : onComplete;
      return value = callback(value, key, 3), group(obj, value);
    }
    /**
     * @param {Function} ret
     * @param {(number|string)} attr
     * @return {?}
     */
    function pluck(ret, attr) {
      return setValue(ret, debug(attr + ""));
    }
    /**
     * @param {string} optgroup
     * @param {Object} val
     * @param {Array} isXML
     * @param {boolean} key
     * @return {?}
     */
    function reduce(optgroup, val, isXML, key) {
      /** @type {Function} */
      var getter = isArray(optgroup) ? del : exports;
      return getter(optgroup, callback(val, key, 4), isXML, arguments.length < 3, resolve);
    }
    /**
     * @param {string} optgroup
     * @param {Object} obj
     * @param {Array} isXML
     * @param {boolean} i
     * @return {?}
     */
    function toArray(optgroup, obj, isXML, i) {
      /** @type {Function} */
      var getter = isArray(optgroup) ? param : exports;
      return getter(optgroup, callback(obj, i, 4), isXML, arguments.length < 3, handler);
    }
    /**
     * @param {string} name
     * @param {Object} iterator
     * @param {boolean} context
     * @return {?}
     */
    function reject(name, iterator, context) {
      /** @type {function (Array, Function): ?} */
      var ondata = isArray(name) ? val : enter;
      return iterator = callback(iterator, context, 3), ondata(name, function(x, index, list) {
        return!iterator(x, index, list);
      });
    }
    /**
     * @param {string} obj
     * @param {number} key
     * @param {boolean} data
     * @return {?}
     */
    function min(obj, key, data) {
      if (data ? fn(obj, key, data) : null == key) {
        obj = cb(obj);
        var ol = obj.length;
        return ol > 0 ? obj[hasOwn(0, ol - 1)] : val;
      }
      var x = values(obj);
      return x.length = ok(0 > key ? 0 : +key || 0, x.length), x;
    }
    /**
     * @param {(Array|string)} obj
     * @return {?}
     */
    function values(obj) {
      obj = cb(obj);
      /** @type {number} */
      var key = -1;
      var r = obj.length;
      var values = String(r);
      for (;++key < r;) {
        var k = hasOwn(0, key);
        if (key != k) {
          values[key] = values[k];
        }
        values[k] = obj[key];
      }
      return values;
    }
    /**
     * @param {boolean} collection
     * @return {?}
     */
    function size(collection) {
      var url = collection ? collection.length : 0;
      return done(url) ? url : keys(collection).length;
    }
    /**
     * @param {string} name
     * @param {Object} value
     * @param {boolean} type
     * @return {?}
     */
    function remove(name, value, type) {
      /** @type {function (Array, Object): ?} */
      var next = isArray(name) ? arrayEvery : detect;
      return("function" != typeof value || "undefined" != typeof type) && (value = callback(value, type, 3)), next(name, value);
    }
    /**
     * @param {string} name
     * @param {Object} value
     * @param {boolean} type
     * @return {?}
     */
    function loaded(name, value, type) {
      /** @type {number} */
      var idx = -1;
      var data = name ? name.length : 0;
      var result = done(data) ? String(data) : [];
      return type && (fn(name, value, type) && (value = null)), value = callback(value, type, 3), resolve(name, function(context, index, ref) {
        result[++idx] = {
          criteria : value(context, index, ref),
          index : idx,
          value : context
        };
      }), equal(result, e);
    }
    /**
     * @param {boolean} value
     * @return {?}
     */
    function complete(value) {
      /** @type {Arguments} */
      var a = arguments;
      if (a.length > 3) {
        if (fn(a[1], a[2], a[3])) {
          /** @type {Array} */
          a = [value, a[1]];
        }
      }
      /** @type {number} */
      var index = -1;
      var data = value ? value.length : 0;
      var keys = require(a, false, false, 1);
      var result = done(data) ? String(data) : [];
      return resolve(value, function(object, dataAndEvents, deepDataAndEvents) {
        var i = keys.length;
        var r = String(i);
        for (;i--;) {
          r[i] = null == object ? val : object[keys[i]];
        }
        result[++index] = {
          criteria : r,
          index : index,
          value : object
        };
      }), equal(result, merge);
    }
    /**
     * @param {string} optgroup
     * @param {string} key
     * @return {?}
     */
    function where(optgroup, key) {
      return configure(optgroup, delegate(key));
    }
    /**
     * @param {(number|string)} name
     * @param {(number|string)} klass
     * @return {?}
     */
    function after(name, klass) {
      if (!isFunction(klass)) {
        if (!isFunction(name)) {
          throw new Stream(filename);
        }
        var fullName = name;
        /** @type {(number|string)} */
        name = klass;
        klass = fullName;
      }
      return name = encodeURIComponent(name = +name) ? name : 0, function() {
        return--name < 1 ? klass.apply(this, arguments) : void 0;
      };
    }
    /**
     * @param {string} res
     * @param {Object} i
     * @param {Object} callback
     * @return {?}
     */
    function fail(res, i, callback) {
      return callback && (fn(res, i, callback) && (i = null)), i = res && null == i ? res.length : max(+i || 0, 0), f(res, j, null, null, null, null, i);
    }
    /**
     * @param {string} name
     * @param {Object} klass
     * @return {?}
     */
    function wrap(name, klass) {
      var returnValue;
      if (!isFunction(klass)) {
        if (!isFunction(name)) {
          throw new Stream(filename);
        }
        var fullName = name;
        name = klass;
        klass = fullName;
      }
      return function() {
        return--name > 0 ? returnValue = klass.apply(this, arguments) : klass = null, returnValue;
      };
    }
    /**
     * @param {string} value
     * @param {Object} object
     * @return {?}
     */
    function defaults(value, object) {
      /** @type {number} */
      var i = mask;
      if (arguments.length > 2) {
        var result = call(arguments, 2);
        var viewport = toArray(result, defaults.placeholder);
        i |= c;
      }
      return f(value, i, object, result, viewport);
    }
    /**
     * @param {string} obj
     * @return {?}
     */
    function bindAll(obj) {
      return search(obj, arguments.length > 1 ? require(arguments, false, false, 1) : functions(obj));
    }
    /**
     * @param {Function} name
     * @param {string} options
     * @return {?}
     */
    function noConflict(name, options) {
      /** @type {number} */
      var i = mask | mapSizeComparer;
      if (arguments.length > 2) {
        var result = call(arguments, 2);
        var viewport = toArray(result, noConflict.placeholder);
        i |= c;
      }
      return f(options, i, name, result, viewport);
    }
    /**
     * @param {string} res
     * @param {Object} key
     * @param {Object} value
     * @return {?}
     */
    function options(res, key, value) {
      if (value) {
        if (fn(res, key, value)) {
          /** @type {null} */
          key = null;
        }
      }
      var el = f(res, y, null, null, null, null, null, key);
      return el.placeholder = options.placeholder, el;
    }
    /**
     * @param {string} context
     * @param {Object} type
     * @param {Object} data
     * @return {?}
     */
    function fire(context, type, data) {
      if (data) {
        if (fn(context, type, data)) {
          /** @type {null} */
          type = null;
        }
      }
      var options = f(context, step, null, null, null, null, null, type);
      return options.placeholder = fire.placeholder, options;
    }
    /**
     * @param {string} name
     * @param {number} deepDataAndEvents
     * @param {Object} options
     * @return {?}
     */
    function debounce(name, deepDataAndEvents, options) {
      /**
       * @return {undefined}
       */
      function cancelFn() {
        if (timeoutId) {
          makeIterator(timeoutId);
        }
        if (callback) {
          makeIterator(callback);
        }
        callback = timeoutId = trailingCall = val;
      }
      /**
       * @return {undefined}
       */
      function delayed() {
        /** @type {number} */
        var camelKey = deepDataAndEvents - (now() - cur);
        if (0 >= camelKey || camelKey > deepDataAndEvents) {
          if (callback) {
            makeIterator(callback);
          }
          var isCalled = trailingCall;
          callback = timeoutId = trailingCall = val;
          if (isCalled) {
            prev = now();
            value = name.apply(self, args);
            if (!timeoutId) {
              if (!callback) {
                /** @type {null} */
                args = self = null;
              }
            }
          }
        } else {
          timeoutId = dataAttr(delayed, camelKey);
        }
      }
      /**
       * @return {undefined}
       */
      function maxDelayed() {
        if (timeoutId) {
          makeIterator(timeoutId);
        }
        callback = timeoutId = trailingCall = val;
        if (trailing || delay !== deepDataAndEvents) {
          prev = now();
          value = name.apply(self, args);
          if (!timeoutId) {
            if (!callback) {
              /** @type {null} */
              args = self = null;
            }
          }
        }
      }
      /**
       * @return {?}
       */
      function wrapped() {
        if (args = arguments, cur = now(), self = this, trailingCall = trailing && (timeoutId || !leading), delay === false) {
          var leadingCall = leading && !timeoutId
        } else {
          if (!callback) {
            if (!leading) {
              prev = cur;
            }
          }
          /** @type {number} */
          var camelKey = delay - (cur - prev);
          /** @type {boolean} */
          var isCalled = 0 >= camelKey || camelKey > delay;
          if (isCalled) {
            if (callback) {
              callback = makeIterator(callback);
            }
            prev = cur;
            value = name.apply(self, args);
          } else {
            if (!callback) {
              callback = dataAttr(maxDelayed, camelKey);
            }
          }
        }
        return isCalled && timeoutId ? timeoutId = makeIterator(timeoutId) : timeoutId || (deepDataAndEvents === delay || (timeoutId = dataAttr(delayed, deepDataAndEvents))), leadingCall && (isCalled = true, value = name.apply(self, args)), !isCalled || (timeoutId || (callback || (args = self = null))), value;
      }
      var args;
      var callback;
      var value;
      var cur;
      var self;
      var timeoutId;
      var trailingCall;
      /** @type {number} */
      var prev = 0;
      /** @type {boolean} */
      var delay = false;
      /** @type {boolean} */
      var trailing = true;
      if (!isFunction(name)) {
        throw new Stream(filename);
      }
      if (deepDataAndEvents = 0 > deepDataAndEvents ? 0 : deepDataAndEvents, options === true) {
        /** @type {boolean} */
        var leading = true;
        /** @type {boolean} */
        trailing = false;
      } else {
        if (func(options)) {
          leading = options.leading;
          delay = "maxWait" in options && max(+options.maxWait || 0, deepDataAndEvents);
          trailing = "trailing" in options ? options.trailing : trailing;
        }
      }
      return wrapped.cancel = cancelFn, wrapped;
    }
    /**
     * @param {Function} callback
     * @return {?}
     */
    function removeEventListener(callback) {
      return append(callback, 1, arguments, 1);
    }
    /**
     * @param {string} result
     * @param {number} deepDataAndEvents
     * @return {?}
     */
    function delay(result, deepDataAndEvents) {
      return append(result, deepDataAndEvents, arguments, 2);
    }
    /**
     * @return {?}
     */
    function Class() {
      /** @type {Arguments} */
      var b = arguments;
      /** @type {number} */
      var len = b.length;
      if (!len) {
        return function() {
        };
      }
      if (!addEvent(b, isFunction)) {
        throw new Stream(filename);
      }
      return function() {
        /** @type {number} */
        var i = 0;
        var msg = b[i].apply(this, arguments);
        for (;++i < len;) {
          msg = b[i].call(this, msg);
        }
        return msg;
      };
    }
    /**
     * @return {?}
     */
    function compose() {
      /** @type {Arguments} */
      var b = arguments;
      /** @type {number} */
      var queuedFn = b.length - 1;
      if (0 > queuedFn) {
        return function() {
        };
      }
      if (!addEvent(b, isFunction)) {
        throw new Stream(filename);
      }
      return function() {
        /** @type {number} */
        var fn = queuedFn;
        var result = b[fn].apply(this, arguments);
        for (;fn--;) {
          result = b[fn].call(this, result);
        }
        return result;
      };
    }
    /**
     * @param {string} optgroup
     * @param {string} resolver
     * @return {?}
     */
    function memoize(optgroup, resolver) {
      if (!isFunction(optgroup) || resolver && !isFunction(resolver)) {
        throw new Stream(filename);
      }
      /**
       * @return {?}
       */
      var require = function() {
        var data_user = require.cache;
        var elem = resolver ? resolver.apply(this, arguments) : arguments[0];
        if (data_user.has(elem)) {
          return data_user.get(elem);
        }
        var udataCur = optgroup.apply(this, arguments);
        return data_user.set(elem, udataCur), udataCur;
      };
      return require.cache = new memoize.Cache, require;
    }
    /**
     * @param {string} optgroup
     * @return {?}
     */
    function once(optgroup) {
      if (!isFunction(optgroup)) {
        throw new Stream(filename);
      }
      return function() {
        return!optgroup.apply(this, arguments);
      };
    }
    /**
     * @param {string} name
     * @return {?}
     */
    function atom(name) {
      return wrap(name, 2);
    }
    /**
     * @param {string} x
     * @return {?}
     */
    function highlight(x) {
      var result = call(arguments, 1);
      var viewport = toArray(result, highlight.placeholder);
      return f(x, c, null, result, viewport);
    }
    /**
     * @param {string} x
     * @return {?}
     */
    function use(x) {
      var result = call(arguments, 1);
      var viewport = toArray(result, use.placeholder);
      return f(x, more, null, result, viewport);
    }
    /**
     * @param {string} key
     * @return {?}
     */
    function a(key) {
      var nodes = require(arguments, false, false, 1);
      return f(key, d, null, null, null, nodes);
    }
    /**
     * @param {string} optgroup
     * @param {number} deepDataAndEvents
     * @param {Object} options
     * @return {?}
     */
    function throttle(optgroup, deepDataAndEvents, options) {
      /** @type {boolean} */
      var leading = true;
      /** @type {boolean} */
      var trailing = true;
      if (!isFunction(optgroup)) {
        throw new Stream(filename);
      }
      return options === false ? leading = false : func(options) && (leading = "leading" in options ? !!options.leading : leading, trailing = "trailing" in options ? !!options.trailing : trailing), debounceOptions.leading = leading, debounceOptions.maxWait = +deepDataAndEvents, debounceOptions.trailing = trailing, debounce(optgroup, deepDataAndEvents, debounceOptions);
    }
    /**
     * @param {?} throwable
     * @param {string} message
     * @return {?}
     */
    function warn(throwable, message) {
      return message = null == message ? identity : message, f(message, c, null, [throwable], []);
    }
    /**
     * @param {Object} path
     * @param {boolean} deepDataAndEvents
     * @param {?} options
     * @param {?} o
     * @return {?}
     */
    function compile(path, deepDataAndEvents, options, o) {
      return "boolean" != typeof deepDataAndEvents && (null != deepDataAndEvents && (o = options, options = fn(path, deepDataAndEvents, o) ? null : deepDataAndEvents, deepDataAndEvents = false)), options = "function" == typeof options && parse(options, o, 1), process(path, deepDataAndEvents, options);
    }
    /**
     * @param {string} event
     * @param {Object} v
     * @param {?} next_scope
     * @return {?}
     */
    function onreadystatechange(event, v, next_scope) {
      return v = "function" == typeof v && parse(v, next_scope, 1), process(event, true, v);
    }
    /**
     * @param {string} value
     * @return {?}
     */
    function isArguments(value) {
      var udataCur = func(value) ? value.length : val;
      return done(udataCur) && result.call(value) == prop || false;
    }
    /**
     * @param {boolean} value
     * @return {?}
     */
    function isBoolean(value) {
      return value === true || (value === false || (func(value) && result.call(value) == m || false));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isDate(value) {
      return func(value) && result.call(value) == index || false;
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    function addEventListener(elem) {
      return elem && (1 === elem.nodeType && (func(elem) && result.call(elem).indexOf("Element") > -1)) || false;
    }
    /**
     * @param {string} value
     * @return {?}
     */
    function isEmpty(value) {
      if (null == value) {
        return true;
      }
      var ctor = value.length;
      return done(ctor) && (isArray(value) || (update(value) || (isArguments(value) || func(value) && isFunction(value.splice)))) ? !ctor : !keys(value).length;
    }
    /**
     * @param {Object} x
     * @param {Object} y
     * @param {boolean} v
     * @param {?} input
     * @return {?}
     */
    function d(x, y, v, input) {
      if (v = "function" == typeof v && parse(v, input, 3), !v && (parseFloat(x) && parseFloat(y))) {
        return x === y;
      }
      var FnConstructor = v ? v(x, y) : val;
      return "undefined" == typeof FnConstructor ? log(x, y, v) : !!FnConstructor;
    }
    /**
     * @param {(Error|string)} n
     * @return {?}
     */
    function ready(n) {
      return func(n) && ("string" == typeof n.message && result.call(n) == location) || false;
    }
    /**
     * @param {string} name
     * @return {?}
     */
    function isFunction(name) {
      return "function" == typeof name || false;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    function func(name) {
      /** @type {string} */
      var $s = typeof name;
      return "function" == $s || (name && "object" == $s || false);
    }
    /**
     * @param {number} obj
     * @param {string} object
     * @param {Object} v
     * @param {?} options
     * @return {?}
     */
    function merge(obj, object, v, options) {
      var props = keys(object);
      var i = props.length;
      if (v = "function" == typeof v && parse(v, options, 3), !v && 1 == i) {
        var key = props[0];
        var val = object[key];
        if (parseFloat(val)) {
          return null != obj && (val === obj[key] && hasOwnProperty.call(obj, key));
        }
      }
      var result = String(i);
      var ret = String(i);
      for (;i--;) {
        val = result[i] = object[props[i]];
        ret[i] = parseFloat(val);
      }
      return clear(obj, props, result, ret, v);
    }
    /**
     * @param {number} obj
     * @return {?}
     */
    function isNaN(obj) {
      return isNumber(obj) && obj != +obj;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    function map(name) {
      return null == name ? false : result.call(name) == input ? regexp.test(core_toString.call(name)) : func(name) && exclude.test(name) || false;
    }
    /**
     * @param {number} obj
     * @return {?}
     */
    function isNull(obj) {
      return null === obj;
    }
    /**
     * @param {number} value
     * @return {?}
     */
    function isNumber(value) {
      return "number" == typeof value || (func(value) && result.call(value) == numberClass || false);
    }
    /**
     * @param {(Error|string)} value
     * @return {?}
     */
    function isRegExp(value) {
      return func(value) && result.call(value) == argsClass || false;
    }
    /**
     * @param {string} val
     * @return {?}
     */
    function update(val) {
      return "string" == typeof val || (func(val) && result.call(val) == number || false);
    }
    /**
     * @param {string} value
     * @return {?}
     */
    function isString(value) {
      return func(value) && (done(value.length) && cache[result.call(value)]) || false;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    function isUndefined(obj) {
      return "undefined" == typeof obj;
    }
    /**
     * @param {boolean} value
     * @return {?}
     */
    function onChange(value) {
      var json = value ? value.length : 0;
      return done(json) ? json ? isClassOf(value) : [] : bind(value);
    }
    /**
     * @param {string} name
     * @return {?}
     */
    function removeListener(name) {
      return _extend(name, forEach(name));
    }
    /**
     * @param {?} value
     * @param {Object} key
     * @param {Object} elems
     * @return {?}
     */
    function access(value, key, elems) {
      var obj = expression(value);
      return elems && (fn(value, key, elems) && (key = null)), key ? _extend(key, obj, keys(key)) : obj;
    }
    /**
     * @param {number} object
     * @return {?}
     */
    function assign(object) {
      if (null == object) {
        return object;
      }
      var args = isClassOf(arguments);
      return args.push(loader), wrapper.apply(val, args);
    }
    /**
     * @param {string} res
     * @param {Object} value
     * @param {boolean} context
     * @return {?}
     */
    function noop(res, value, context) {
      return value = callback(value, context, 3), test(res, value, check, true);
    }
    /**
     * @param {string} a
     * @param {Object} value
     * @param {boolean} key
     * @return {?}
     */
    function date(a, value, key) {
      return value = callback(value, key, 3), test(a, value, method, true);
    }
    /**
     * @param {?} hash
     * @param {Function} fn
     * @param {?} options
     * @return {?}
     */
    function onLoad(hash, fn, options) {
      return("function" != typeof fn || "undefined" != typeof options) && (fn = parse(fn, options, 3)), walk(hash, fn, forEach);
    }
    /**
     * @param {string} ev
     * @param {Function} url
     * @param {?} o
     * @return {?}
     */
    function onerror(ev, url, o) {
      return url = parse(url, o, 3), subscribe(ev, url, forEach);
    }
    /**
     * @param {?} value
     * @param {Function} fn
     * @param {?} options
     * @return {?}
     */
    function open(value, fn, options) {
      return("function" != typeof fn || "undefined" != typeof options) && (fn = parse(fn, options, 3)), check(value, fn);
    }
    /**
     * @param {string} o
     * @param {Function} url
     * @param {?} options
     * @return {?}
     */
    function play(o, url, options) {
      return url = parse(url, options, 3), subscribe(o, url, keys);
    }
    /**
     * @param {string} object
     * @return {?}
     */
    function functions(object) {
      return post(object, forEach(object));
    }
    /**
     * @param {string} object
     * @param {?} property
     * @return {?}
     */
    function serialize(object, property) {
      return object ? hasOwnProperty.call(object, property) : false;
    }
    /**
     * @param {string} item
     * @param {Object} key
     * @param {Object} callback
     * @return {?}
     */
    function save(item, key, callback) {
      if (callback) {
        if (fn(item, key, callback)) {
          /** @type {null} */
          key = null;
        }
      }
      /** @type {number} */
      var index = -1;
      var properties = keys(item);
      var length = properties.length;
      var result = {};
      for (;++index < length;) {
        var value = properties[index];
        var name = item[value];
        if (key) {
          if (hasOwnProperty.call(result, name)) {
            result[name].push(value);
          } else {
            /** @type {Array} */
            result[name] = [value];
          }
        } else {
          result[name] = value;
        }
      }
      return result;
    }
    /**
     * @param {string} optgroup
     * @return {?}
     */
    function forEach(optgroup) {
      if (null == optgroup) {
        return[];
      }
      if (!func(optgroup)) {
        optgroup = $(optgroup);
      }
      var context = optgroup.length;
      context = context && (done(context) && ((isArray(optgroup) || support.nonEnumArgs && isArguments(optgroup)) && context)) || 0;
      var c = optgroup.constructor;
      /** @type {number} */
      var i = -1;
      /** @type {boolean} */
      var e = "function" == typeof c && c.prototype == optgroup;
      var result = String(context);
      /** @type {boolean} */
      var propertyIsEnumerable = context > 0;
      for (;++i < context;) {
        /** @type {string} */
        result[i] = i + "";
      }
      var value;
      for (value in optgroup) {
        if (!(propertyIsEnumerable && jQuery(value, context))) {
          if (!("constructor" == value && (e || !hasOwnProperty.call(optgroup, value)))) {
            result.push(value);
          }
        }
      }
      return result;
    }
    /**
     * @param {?} options
     * @param {Error} value
     * @param {boolean} key
     * @return {?}
     */
    function sync(options, value, key) {
      var object = {};
      return value = callback(value, key, 3), check(options, function(el, property, logException) {
        object[property] = value(el, property, logException);
      }), object;
    }
    /**
     * @param {string} params
     * @param {?} fn
     * @param {?} options
     * @return {?}
     */
    function match(params, fn, options) {
      if (null == params) {
        return{};
      }
      if ("function" != typeof fn) {
        var start = pass(require(arguments, false, false, 1), restoreScript);
        return m(params, slice(forEach(params), start));
      }
      return fn = parse(fn, options, 3), message(params, function(err, partials, xs) {
        return!fn(err, partials, xs);
      });
    }
    /**
     * @param {string} object
     * @return {?}
     */
    function pairs(object) {
      /** @type {number} */
      var index = -1;
      var props = keys(object);
      var length = props.length;
      var result = String(length);
      for (;++index < length;) {
        var key = props[index];
        /** @type {Array} */
        result[index] = [key, object[key]];
      }
      return result;
    }
    /**
     * @param {string} value
     * @param {?} name
     * @param {?} next_scope
     * @return {?}
     */
    function errorCallback(value, name, next_scope) {
      return null == value ? {} : "function" == typeof name ? message(value, parse(name, next_scope, 3)) : m(value, require(arguments, false, false, 1));
    }
    /**
     * @param {Object} object
     * @param {string} variable
     * @param {?} obj
     * @return {?}
     */
    function isPlainObject(object, variable, obj) {
      var value = null == object ? val : object[variable];
      return "undefined" == typeof value && (value = obj), isFunction(value) ? value.call(object) : value;
    }
    /**
     * @param {string} name
     * @param {Object} value
     * @param {Object} type
     * @param {Object} parent
     * @return {?}
     */
    function filter(name, value, type, parent) {
      var usePrototypeKeys = isArray(name) || isString(name);
      if (value = callback(value, parent, 4), null == type) {
        if (usePrototypeKeys || func(name)) {
          var Kind = name.constructor;
          type = usePrototypeKeys ? isArray(name) ? new Kind : [] : expression("function" == typeof Kind && Kind.prototype);
        } else {
          type = {};
        }
      }
      return(usePrototypeKeys ? each : check)(name, function(index, ref, all_bindings_accessor) {
        return value(type, index, ref, all_bindings_accessor);
      }), type;
    }
    /**
     * @param {string} object
     * @return {?}
     */
    function bind(object) {
      return forOwn(object, keys(object));
    }
    /**
     * @param {string} obj
     * @return {?}
     */
    function shuffle(obj) {
      return forOwn(obj, forEach(obj));
    }
    /**
     * @param {number} obj
     * @param {number} key
     * @param {number} callback
     * @return {?}
     */
    function random(obj, key, callback) {
      if (callback) {
        if (fn(obj, key, callback)) {
          /** @type {null} */
          key = callback = null;
        }
      }
      /** @type {boolean} */
      var deep = null == obj;
      /** @type {boolean} */
      var copy = null == key;
      if (null == callback && (copy && "boolean" == typeof obj ? (callback = obj, obj = 1) : "boolean" == typeof key && (callback = key, copy = true)), deep && (copy && (key = 1, copy = false)), obj = +obj || 0, copy ? (key = obj, obj = 0) : key = +key || 0, callback || (obj % 1 || key % 1)) {
        var rand = nativeRandom();
        return ok(obj + rand * (key - obj + parseFloat("1e-" + ((rand + "").length - 1))), key);
      }
      return hasOwn(obj, key);
    }
    /**
     * @param {string} str
     * @return {?}
     */
    function capitalize(str) {
      return str = String(str), str && str.charAt(0).toUpperCase() + str.slice(1);
    }
    /**
     * @param {string} value
     * @return {?}
     */
    function appendModelPrefix(value) {
      return value = String(value), value && value.replace(core_rnotwhite, checked);
    }
    /**
     * @param {string} c
     * @param {string} res
     * @param {number} recurring
     * @return {?}
     */
    function destroy(c, res, recurring) {
      c = String(c);
      res += "";
      var cl = c.length;
      return recurring = ("undefined" == typeof recurring ? cl : ok(0 > recurring ? 0 : +recurring || 0, cl)) - res.length, recurring >= 0 && c.indexOf(res, recurring) == recurring;
    }
    /**
     * @param {string} name
     * @return {?}
     */
    function hasClass(name) {
      return name = String(name), name && rparentsprev.test(name) ? name.replace(rreturn, replaceToUpper) : name;
    }
    /**
     * @param {string} value
     * @return {?}
     */
    function trim(value) {
      return value = String(value), value && rchecked.test(value) ? value.replace(r20, "\\$&") : value;
    }
    /**
     * @param {string} content
     * @param {number} n
     * @param {string} data
     * @return {?}
     */
    function encode(content, n, data) {
      content = String(content);
      /** @type {number} */
      n = +n;
      var l = content.length;
      if (l >= n || !encodeURIComponent(n)) {
        return content;
      }
      /** @type {number} */
      var half = (n - l) / 2;
      var attributes = floor(half);
      var camelKey = ceil(half);
      return data = escape("", camelKey, data), data.slice(0, attributes) + content + data;
    }
    /**
     * @param {Object} string
     * @param {number} length
     * @param {string} date2
     * @return {?}
     */
    function compare(string, length, date2) {
      return string = String(string), string && escape(string, length, date2) + string;
    }
    /**
     * @param {Object} a
     * @param {number} input
     * @param {string} ret
     * @return {?}
     */
    function flatten(a, input, ret) {
      return a = String(a), a && a + escape(a, input, ret);
    }
    /**
     * @param {string} res
     * @param {number} key
     * @param {Object} index
     * @return {?}
     */
    function success(res, key, index) {
      return index && (fn(res, key, index) && (key = 0)), parseInt(res, key);
    }
    /**
     * @param {string} str
     * @param {number} value
     * @return {?}
     */
    function repeat(str, value) {
      /** @type {string} */
      var res = "";
      if (str = String(str), value = +value, 1 > value || (!str || !encodeURIComponent(value))) {
        return res;
      }
      do {
        if (value % 2) {
          res += str;
        }
        value = floor(value / 2);
        str += str;
      } while (value);
      return res;
    }
    /**
     * @param {string} a
     * @param {Object} obj
     * @param {number} b
     * @return {?}
     */
    function g(a, obj, b) {
      return a = String(a), b = null == b ? 0 : ok(0 > b ? 0 : +b || 0, a.length), a.lastIndexOf(obj, b) == b;
    }
    /**
     * @param {string} text
     * @param {Object} options
     * @param {Object} data
     * @return {?}
     */
    function template(text, options, data) {
      var settings = lodash.templateSettings;
      if (data) {
        if (fn(text, options, data)) {
          /** @type {null} */
          options = data = null;
        }
      }
      text = String(text);
      options = extend(extend({}, data || options), settings, wrappedCallback);
      var charset;
      var isEvaluating;
      var object = extend(extend({}, options.imports), settings.imports, wrappedCallback);
      var name = keys(object);
      var message = forOwn(object, name);
      /** @type {number} */
      var recurring = 0;
      var interpolate = options.interpolate || reNoMatch;
      /** @type {string} */
      var source = "__p += '";
      var regexp = (0,eval)((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
      /** @type {string} */
      var protocol = "//# sourceURL=" + ("sourceURL" in options ? options.sourceURL : "lodash.templateSources[" + ++Ia + "]") + "\n";
      text.replace(regexp, function(match, dataAndEvents, from, doc, deepDataAndEvents, offset) {
        return from || (from = doc), source += text.slice(recurring, offset).replace(rclass, escapeStringChar), dataAndEvents && (charset = true, source += "' +\n__e(" + dataAndEvents + ") +\n'"), deepDataAndEvents && (isEvaluating = true, source += "';\n" + deepDataAndEvents + ";\n__p += '"), from && (source += "' +\n((__t = (" + from + ")) == null ? '' : __t) +\n'"), recurring = offset + match.length, match;
      });
      source += "';\n";
      var async = options.variable;
      if (!async) {
        /** @type {string} */
        source = "with (obj) {\n" + source + "\n}\n";
      }
      source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(rSlash, "$1").replace(badChars, "$1;");
      /** @type {string} */
      source = "function(" + (async || "obj") + ") {\n" + (async ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (charset ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
      var e = tryIt(function() {
        return Benchmark(name, protocol + "return " + source).apply(val, message);
      });
      if (e.source = source, ready(e)) {
        throw e;
      }
      return e;
    }
    /**
     * @param {string} arg
     * @param {string} val
     * @param {boolean} data
     * @return {?}
     */
    function _parse(arg, val, data) {
      /** @type {string} */
      var ctx = arg;
      return(arg = String(arg)) ? (data ? fn(ctx, val, data) : null == val) ? arg.slice($(arg), parse(arg) + 1) : (val += "", arg.slice(cb(arg, val), success(arg, val) + 1)) : arg;
    }
    /**
     * @param {string} arg
     * @param {(number|string)} key
     * @param {boolean} data
     * @return {?}
     */
    function emit(arg, key, data) {
      /** @type {string} */
      var ctx = arg;
      return arg = String(arg), arg ? (data ? fn(ctx, key, data) : null == key) ? arg.slice($(arg)) : arg.slice(cb(arg, key + "")) : arg;
    }
    /**
     * @param {string} a
     * @param {(number|string)} key
     * @param {boolean} data
     * @return {?}
     */
    function listener(a, key, data) {
      /** @type {string} */
      var elements = a;
      return a = String(a), a ? (data ? fn(elements, key, data) : null == key) ? a.slice(0, parse(a) + 1) : a.slice(0, success(a, key + "") + 1) : a;
    }
    /**
     * @param {string} result
     * @param {Object} options
     * @param {Object} stack
     * @return {?}
     */
    function run(result, options, stack) {
      if (stack) {
        if (fn(result, options, stack)) {
          /** @type {null} */
          options = null;
        }
      }
      /** @type {number} */
      var j = lineStart;
      /** @type {string} */
      var object = actualObject;
      if (null != options) {
        if (func(options)) {
          var value = "separator" in options ? options.separator : value;
          /** @type {number} */
          j = "length" in options ? +options.length || 0 : j;
          object = "omission" in options ? String(options.omission) : object;
        } else {
          /** @type {number} */
          j = +options || 0;
        }
      }
      if (result = String(result), j >= result.length) {
        return result;
      }
      /** @type {number} */
      var recurring = j - object.length;
      if (1 > recurring) {
        return object;
      }
      var source = result.slice(0, recurring);
      if (null == value) {
        return source + object;
      }
      if (isRegExp(value)) {
        if (result.slice(recurring).search(value)) {
          var data;
          var pos;
          var elem = result.slice(0, recurring);
          if (!value.global) {
            value = (0,eval)(value.source, (rtagName.exec(value) || "") + "g");
          }
          /** @type {number} */
          value.lastIndex = 0;
          for (;data = value.exec(elem);) {
            pos = data.index;
          }
          source = source.slice(0, null == pos ? recurring : pos);
        }
      } else {
        if (result.indexOf(value, recurring) != recurring) {
          var n = source.lastIndexOf(value);
          if (n > -1) {
            source = source.slice(0, n);
          }
        }
      }
      return source + object;
    }
    /**
     * @param {string} s
     * @return {?}
     */
    function unescape(s) {
      return s = String(s), s && re.test(s) ? s.replace(trimReplace, r) : s;
    }
    /**
     * @param {string} style
     * @param {Object} type
     * @param {Object} index
     * @return {?}
     */
    function runTest(style, type, index) {
      return index && (fn(style, type, index) && (type = null)), style = String(style), style.match(type || fx) || [];
    }
    /**
     * @param {Function} f
     * @return {?}
     */
    function tryIt(f) {
      try {
        return f();
      } catch (node) {
        return ready(node) ? node : traverseNode(node);
      }
    }
    /**
     * @param {string} item
     * @param {Object} name
     * @param {Object} opt_attributes
     * @return {?}
     */
    function render(item, name, opt_attributes) {
      return opt_attributes && (fn(item, name, opt_attributes) && (name = null)), func(item) ? load(item) : start(item, name);
    }
    /**
     * @param {Array} recurring
     * @return {?}
     */
    function defer(recurring) {
      return function() {
        return recurring;
      };
    }
    /**
     * @param {?} dest
     * @return {?}
     */
    function identity(dest) {
      return dest;
    }
    /**
     * @param {string} node
     * @return {?}
     */
    function load(node) {
      return delegate(process(node, true));
    }
    /**
     * @param {Object} obj
     * @param {Object} object
     * @param {Object} o
     * @return {?}
     */
    function mixin(obj, object, o) {
      if (null == o) {
        var item = func(object);
        var params = item && keys(object);
        var ids = params && (params.length && post(object, params));
        if (!(ids ? ids.length : item)) {
          /** @type {boolean} */
          ids = false;
          /** @type {Object} */
          o = object;
          /** @type {Object} */
          object = obj;
          obj = this;
        }
      }
      if (!ids) {
        ids = post(object, keys(object));
      }
      /** @type {boolean} */
      var scope = true;
      /** @type {number} */
      var i = -1;
      var negate = isFunction(obj);
      var len = ids.length;
      if (o === false) {
        /** @type {boolean} */
        scope = false;
      } else {
        if (func(o)) {
          if ("chain" in o) {
            scope = o.chain;
          }
        }
      }
      for (;++i < len;) {
        var key = ids[i];
        var value = object[key];
        obj[key] = value;
        if (negate) {
          obj.prototype[key] = function(fn) {
            return function() {
              var e = this.__chain__;
              if (scope || e) {
                var result = obj(this.__wrapped__);
                return(result.__actions__ = isClassOf(this.__actions__)).push({
                  func : fn,
                  args : arguments,
                  thisArg : obj
                }), result.__chain__ = e, result;
              }
              /** @type {Array} */
              var r = [this.value()];
              return dojo.apply(r, arguments), fn.apply(obj, r);
            };
          }(value);
        }
      }
      return obj;
    }
    /**
     * @return {?}
     */
    function specFilter() {
      return global._ = _, this;
    }
    /**
     * @return {undefined}
     */
    function alertObject() {
    }
    /**
     * @param {(number|string)} o
     * @return {?}
     */
    function isEqual(o) {
      return debug(o + "");
    }
    /**
     * @param {Object} obj
     * @return {?}
     */
    function sortBy(obj) {
      return function(implementation) {
        return null == obj ? val : obj[implementation];
      };
    }
    /**
     * @param {number} elem
     * @param {number} selector
     * @param {number} index
     * @return {?}
     */
    function prev(elem, selector, index) {
      if (index) {
        if (fn(elem, selector, index)) {
          /** @type {null} */
          selector = index = null;
        }
      }
      /** @type {number} */
      elem = +elem || 0;
      /** @type {number} */
      index = null == index ? 1 : +index || 0;
      if (null == selector) {
        /** @type {number} */
        selector = elem;
        /** @type {number} */
        elem = 0;
      } else {
        /** @type {number} */
        selector = +selector || 0;
      }
      /** @type {number} */
      var idx = -1;
      var rendered = max(ceil((selector - elem) / (index || 1)), 0);
      var node = String(rendered);
      for (;++idx < rendered;) {
        /** @type {number} */
        node[idx] = elem;
        elem += index;
      }
      return node;
    }
    /**
     * @param {number} data
     * @param {?} fn
     * @param {?} options
     * @return {?}
     */
    function tick(data, fn, options) {
      if (data = +data, 1 > data || !encodeURIComponent(data)) {
        return[];
      }
      /** @type {number} */
      var i = -1;
      var result = String(ok(data, type));
      fn = parse(fn, options, 1);
      for (;++i < data;) {
        if (type > i) {
          result[i] = fn(i);
        } else {
          fn(i);
        }
      }
      return result;
    }
    /**
     * @param {string} str
     * @return {?}
     */
    function uniqueId(str) {
      /** @type {number} */
      var id = ++rightId;
      return String(str) + id;
    }
    global = global ? w.defaults(root.Object(), global, w.pick(root, contextProps)) : root;
    var String = global.Array;
    var Constuctor = global.Date;
    var traverseNode = global.Error;
    var Benchmark = global.Function;
    var Math = global.Math;
    var config = global.Number;
    var $ = global.Object;
    var eval = global.RegExp;
    var restoreScript = global.String;
    var Stream = global.TypeError;
    var proto = String.prototype;
    var ObjProto = $.prototype;
    var doc = (doc = global.window) && doc.document;
    var core_toString = Benchmark.prototype.toString;
    var which = debug("length");
    var hasOwnProperty = ObjProto.hasOwnProperty;
    /** @type {number} */
    var rightId = 0;
    var result = ObjProto.toString;
    var _ = global._;
    var regexp = (0,eval)("^" + trim(result).replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    var Buffer = map(Buffer = global.ArrayBuffer) && Buffer;
    var ostring = map(ostring = Buffer && (new Buffer(0)).slice) && ostring;
    var ceil = Math.ceil;
    var makeIterator = global.clearTimeout;
    var floor = Math.floor;
    var getPrototypeOf = map(getPrototypeOf = $.getPrototypeOf) && getPrototypeOf;
    var dojo = proto.push;
    var toString = ObjProto.propertyIsEnumerable;
    var Set = map(Set = global.Set) && Set;
    var dataAttr = global.setTimeout;
    var block = proto.splice;
    var optgroup = map(optgroup = global.Uint8Array) && optgroup;
    var WebSocket = (proto.unshift, map(WebSocket = global.WeakMap) && WebSocket);
    var array = function() {
      try {
        var Map = map(Map = global.Float64Array) && Map;
        var isBuggy = new Map(new Buffer(10), 0, 1) && Map;
      } catch (c) {
      }
      return isBuggy;
    }();
    var nativeIsArray = map(nativeIsArray = String.isArray) && nativeIsArray;
    var nativeCreate = map(nativeCreate = $.create) && nativeCreate;
    var encodeURIComponent = global.isFinite;
    var nativeKeys = map(nativeKeys = $.keys) && nativeKeys;
    var max = Math.max;
    var ok = Math.min;
    var opt_now = map(opt_now = Constuctor.now) && opt_now;
    var ln = map(ln = config.isFinite) && ln;
    var parseInt = global.parseInt;
    var nativeRandom = Math.random;
    var element = config.NEGATIVE_INFINITY;
    var text = config.POSITIVE_INFINITY;
    /** @type {number} */
    var type = Math.pow(2, 32) - 1;
    /** @type {number} */
    var why = type - 1;
    /** @type {number} */
    var halfSize = type >>> 1;
    var frame = array ? array.BYTES_PER_ELEMENT : 0;
    /** @type {number} */
    var former = Math.pow(2, 53) - 1;
    var data_user = WebSocket && new WebSocket;
    var support = lodash.support = {};
    !function(recurring) {
      /** @type {boolean} */
      support.funcDecomp = !map(global.WinRTError) && rmouseEvent.test(init);
      /** @type {boolean} */
      support.funcNames = "string" == typeof Benchmark.name;
      try {
        /** @type {boolean} */
        support.dom = 11 === doc.createDocumentFragment().nodeType;
      } catch (b) {
        /** @type {boolean} */
        support.dom = false;
      }
      try {
        /** @type {boolean} */
        support.nonEnumArgs = !toString.call(arguments, 1);
      } catch (b) {
        /** @type {boolean} */
        support.nonEnumArgs = true;
      }
    }(0, 0);
    lodash.templateSettings = {
      escape : reEscapeDelimiter,
      evaluate : reEvaluateDelimiter,
      interpolate : reInterpolate,
      variable : "",
      imports : {
        /** @type {function (string): ?} */
        _ : lodash
      }
    };
    var expression = function() {
      /**
       * @return {undefined}
       */
      function TemplateClass() {
      }
      return function(object) {
        if (func(object)) {
          /** @type {Object} */
          TemplateClass.prototype = object;
          var result = new TemplateClass;
          /** @type {null} */
          TemplateClass.prototype = null;
        }
        return result || global.Object();
      };
    }();
    /** @type {Function} */
    var group = data_user ? function(dest, udataCur) {
      return data_user.set(dest, udataCur), dest;
    } : identity;
    if (!ostring) {
      isNode = Buffer && optgroup ? function(buffer) {
        var l = buffer.byteLength;
        var length = array ? floor(l / frame) : 0;
        /** @type {number} */
        var offset = length * frame;
        var v = new Buffer(l);
        if (length) {
          var d = new array(v, 0, length);
          d.set(new array(buffer, 0, length));
        }
        return l != offset && (d = new optgroup(v, offset), d.set(new optgroup(buffer, offset))), v;
      } : defer(null);
    }
    var push = nativeCreate && Set ? function(str) {
      return new Parser(str);
    } : defer(null);
    /** @type {Function} */
    var ondata = data_user ? function(optgroup) {
      return data_user.get(optgroup);
    } : alertObject;
    var failed = function() {
      /** @type {number} */
      var index = 0;
      /** @type {number} */
      var aux = 0;
      return function(clone, value) {
        var max = now();
        /** @type {number} */
        var x = cnl - (max - aux);
        if (aux = max, x > 0) {
          if (++index >= length) {
            return clone;
          }
        } else {
          /** @type {number} */
          index = 0;
        }
        return group(clone, value);
      };
    }();
    var countBy = read(function(result, dataAndEvents, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        /** @type {number} */
        result[key] = 1;
      }
    });
    var groupBy = read(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        /** @type {Array} */
        result[key] = [value];
      }
    });
    var orig_code = read(function(qs, val, i) {
      qs[i] = val;
    });
    var invert = loop(equal);
    var testSource = loop(prefix, true);
    var buf2 = read(function(queues, value, dataAndEvents) {
      queues[dataAndEvents ? 0 : 1].push(value);
    }, function() {
      return[[], []];
    });
    var now = opt_now || function() {
      return(new Constuctor).getTime();
    };
    var isArray = nativeIsArray || function(name) {
      return func(name) && (done(name.length) && result.call(name) == s) || false;
    };
    if (!support.dom) {
      /**
       * @param {?} object
       * @return {?}
       */
      addEventListener = function(object) {
        return object && (1 === object.nodeType && (func(object) && !expect(object))) || false;
      };
    }
    var isFinite = ln || function(value) {
      return "number" == typeof value && encodeURIComponent(value);
    };
    if (isFunction(/x/) || optgroup && !isFunction(optgroup)) {
      /**
       * @param {string} name
       * @return {?}
       */
      isFunction = function(name) {
        return result.call(name) == input;
      };
    }
    /** @type {function (?): ?} */
    var expect = getPrototypeOf ? function(value) {
      if (!value || result.call(value) != string) {
        return false;
      }
      var valueOf = value.valueOf;
      var objProto = map(valueOf) && ((objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto));
      return objProto ? value == objProto || getPrototypeOf(value) == objProto : select(value);
    } : select;
    var wrapper = setup(extend);
    /** @type {function (?): ?} */
    var keys = nativeKeys ? function(object) {
      if (object) {
        var ctor = object.constructor;
        var actual = object.length;
      }
      return "function" == typeof ctor && ctor.prototype === object || "function" != typeof object && (actual && done(actual)) ? dispatch(object) : func(object) ? nativeKeys(object) : [];
    } : dispatch;
    var cy = setup(get);
    var i = interpolate(function(y, word, i) {
      return word = word.toLowerCase(), y + (i ? word.charAt(0).toUpperCase() + word.slice(1) : word);
    });
    var intersection = interpolate(function(_parentIdPrefix, m3, pos) {
      return _parentIdPrefix + (pos ? "-" : "") + m3.toLowerCase();
    });
    if (8 != parseInt(v + "08")) {
      /**
       * @param {string} s
       * @param {number} key
       * @param {boolean} data
       * @return {?}
       */
      success = function(s, key, data) {
        return(data ? fn(s, key, data) : null == key) ? key = 0 : key && (key = +key), s = _parse(s), parseInt(s, key || (hChars.test(s) ? 16 : 10));
      };
    }
    var e = interpolate(function(_parentIdPrefix, m3, pos) {
      return _parentIdPrefix + (pos ? "_" : "") + m3.toLowerCase();
    });
    var zipObject = interpolate(function(type, match, charset) {
      return type + (charset ? " " : "") + (match.charAt(0).toUpperCase() + match.slice(1));
    });
    return lodashWrapper.prototype = lodash.prototype, Map.prototype["delete"] = onMouseDown, Map.prototype.get = click, Map.prototype.has = hook, Map.prototype.set = empty, Parser.prototype.push = draw, memoize.Cache = Map, lodash.after = after, lodash.ary = fail, lodash.assign = wrapper, lodash.at = onend, lodash.before = wrap, lodash.bind = defaults, lodash.bindAll = bindAll, lodash.bindKey = noConflict, lodash.callback = render, lodash.chain = chain, lodash.chunk = animate, lodash.compact = some, 
    lodash.constant = defer, lodash.countBy = countBy, lodash.create = access, lodash.curry = options, lodash.curryRight = fire, lodash.debounce = debounce, lodash.defaults = assign, lodash.defer = removeEventListener, lodash.delay = delay, lodash.difference = win, lodash.drop = define, lodash.dropRight = partial, lodash.dropRightWhile = sortedIndex, lodash.dropWhile = initial, lodash.filter = configure, lodash.flatten = constructor, lodash.flattenDeep = concatCall, lodash.flow = Class, lodash.flowRight = 
    compose, lodash.forEach = initialize, lodash.forEachRight = onError, lodash.forIn = onLoad, lodash.forInRight = onerror, lodash.forOwn = open, lodash.forOwnRight = play, lodash.functions = functions, lodash.groupBy = groupBy, lodash.indexBy = orig_code, lodash.initial = removeData, lodash.intersection = combine, lodash.invert = save, lodash.invoke = invoke, lodash.keys = keys, lodash.keysIn = forEach, lodash.map = setValue, lodash.mapValues = sync, lodash.matches = load, lodash.memoize = memoize, 
    lodash.merge = cy, lodash.mixin = mixin, lodash.negate = once, lodash.omit = match, lodash.once = atom, lodash.pairs = pairs, lodash.partial = highlight, lodash.partialRight = use, lodash.partition = buf2, lodash.pick = errorCallback, lodash.pluck = pluck, lodash.property = isEqual, lodash.propertyOf = sortBy, lodash.pull = eq, lodash.pullAt = onclick, lodash.range = prev, lodash.rearg = a, lodash.reject = reject, lodash.remove = activate, lodash.rest = rest, lodash.shuffle = values, lodash.slice = 
    validate, lodash.sortBy = loaded, lodash.sortByAll = complete, lodash.take = range, lodash.takeRight = restore, lodash.takeRightWhile = execute, lodash.takeWhile = _each, lodash.tap = isObject, lodash.throttle = throttle, lodash.thru = focus, lodash.times = tick, lodash.toArray = onChange, lodash.toPlainObject = removeListener, lodash.transform = filter, lodash.union = union, lodash.uniq = uniq, lodash.unzip = last, lodash.values = bind, lodash.valuesIn = shuffle, lodash.where = where, lodash.without = 
    without, lodash.wrap = warn, lodash.xor = pick, lodash.zip = zip, lodash.zipObject = object, lodash.backflow = compose, lodash.collect = setValue, lodash.compose = compose, lodash.each = initialize, lodash.eachRight = onError, lodash.extend = wrapper, lodash.iteratee = render, lodash.methods = functions, lodash.object = object, lodash.select = configure, lodash.tail = rest, lodash.unique = uniq, mixin(lodash, lodash), lodash.attempt = tryIt, lodash.camelCase = i, lodash.capitalize = capitalize, 
    lodash.clone = compile, lodash.cloneDeep = onreadystatechange, lodash.deburr = appendModelPrefix, lodash.endsWith = destroy, lodash.escape = hasClass, lodash.escapeRegExp = trim, lodash.every = every, lodash.find = find, lodash.findIndex = iterator, lodash.findKey = noop, lodash.findLast = url, lodash.findLastIndex = index, lodash.findLastKey = date, lodash.findWhere = onblur, lodash.first = first, lodash.has = serialize, lodash.identity = identity, lodash.includes = contains, lodash.indexOf = 
    indexOf, lodash.isArguments = isArguments, lodash.isArray = isArray, lodash.isBoolean = isBoolean, lodash.isDate = isDate, lodash.isElement = addEventListener, lodash.isEmpty = isEmpty, lodash.isEqual = d, lodash.isError = ready, lodash.isFinite = isFinite, lodash.isFunction = isFunction, lodash.isMatch = merge, lodash.isNaN = isNaN, lodash.isNative = map, lodash.isNull = isNull, lodash.isNumber = isNumber, lodash.isObject = func, lodash.isPlainObject = expect, lodash.isRegExp = isRegExp, lodash.isString = 
    update, lodash.isTypedArray = isString, lodash.isUndefined = isUndefined, lodash.kebabCase = intersection, lodash.last = compact, lodash.lastIndexOf = lastIndexOf, lodash.max = invert, lodash.min = testSource, lodash.noConflict = specFilter, lodash.noop = alertObject, lodash.now = now, lodash.pad = encode, lodash.padLeft = compare, lodash.padRight = flatten, lodash.parseInt = success, lodash.random = random, lodash.reduce = reduce, lodash.reduceRight = toArray, lodash.repeat = repeat, lodash.result = 
    isPlainObject, lodash.runInContext = init, lodash.size = size, lodash.snakeCase = e, lodash.some = remove, lodash.sortedIndex = times, lodash.sortedLastIndex = onmessage, lodash.startCase = zipObject, lodash.startsWith = g, lodash.template = template, lodash.trim = _parse, lodash.trimLeft = emit, lodash.trimRight = listener, lodash.trunc = run, lodash.unescape = unescape, lodash.uniqueId = uniqueId, lodash.words = runTest, lodash.all = every, lodash.any = remove, lodash.contains = contains, lodash.detect = 
    find, lodash.foldl = reduce, lodash.foldr = toArray, lodash.head = first, lodash.include = contains, lodash.inject = reduce, mixin(lodash, function() {
      var target = {};
      return check(lodash, function(s, methodName) {
        if (!lodash.prototype[methodName]) {
          target[methodName] = s;
        }
      }), target;
    }(), false), lodash.sample = min, lodash.prototype.sample = function(obj) {
      return this.__chain__ || null != obj ? this.thru(function(walkers) {
        return min(walkers, obj);
      }) : min(this.value());
    }, lodash.VERSION = VERSION, each(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
      /** @type {function (string): ?} */
      lodash[methodName].placeholder = lodash;
    }), each(["filter", "map", "takeWhile"], function(m, type) {
      /** @type {boolean} */
      var isScale = type == wanted;
      /**
       * @param {Object} value
       * @param {boolean} feed
       * @return {?}
       */
      data.prototype[m] = function(value, feed) {
        var me = this.clone();
        var filtered = me.filtered;
        var eventStore = me.iteratees || (me.iteratees = []);
        return me.filtered = filtered || (isScale || type == CLEANUP && me.dir < 0), eventStore.push({
          iteratee : callback(value, feed, 3),
          type : type
        }), me;
      };
    }), each(["drop", "take"], function(type, collection) {
      /** @type {string} */
      var name = type + "Count";
      /** @type {string} */
      var key = type + "While";
      /**
       * @param {number} size
       * @return {?}
       */
      data.prototype[type] = function(size) {
        size = null == size ? 1 : max(+size || 0, 0);
        var item = this.clone();
        if (item.filtered) {
          var index = item[name];
          item[name] = collection ? ok(index, size) : index + size;
        } else {
          var worker = item.views || (item.views = []);
          worker.push({
            size : size,
            type : type + (item.dir < 0 ? "Right" : "")
          });
        }
        return item;
      };
      /**
       * @param {?} el
       * @return {?}
       */
      data.prototype[type + "Right"] = function(el) {
        return this.reverse()[type](el).reverse();
      };
      /**
       * @param {?} value
       * @param {?} evt
       * @return {?}
       */
      data.prototype[type + "RightWhile"] = function(value, evt) {
        return this.reverse()[key](value, evt).reverse();
      };
    }), each(["first", "last"], function(m, i) {
      /** @type {string} */
      var unlock = "take" + (i ? "Right" : "");
      /**
       * @return {?}
       */
      data.prototype[m] = function() {
        return this[unlock](1).value()[0];
      };
    }), each(["initial", "rest"], function(m, optional) {
      /** @type {string} */
      var unlock = "drop" + (optional ? "" : "Right");
      /**
       * @return {?}
       */
      data.prototype[m] = function() {
        return this[unlock](1);
      };
    }), each(["pluck", "where"], function(m, filter) {
      /** @type {string} */
      var items = filter ? "filter" : "map";
      /** @type {function (string): ?} */
      var method = filter ? delegate : debug;
      /**
       * @param {(number|string)} o
       * @return {?}
       */
      data.prototype[m] = function(o) {
        return this[items](method(filter ? o : o + ""));
      };
    }), data.prototype.dropWhile = function(value, key) {
      var r;
      var close;
      /** @type {boolean} */
      var findEndNotStart = this.dir < 0;
      return value = callback(value, key, 3), this.filter(function(el, open, ref) {
        return r = r && (findEndNotStart ? close > open : open > close), close = open, r || (r = !value(el, open, ref));
      });
    }, data.prototype.reject = function(iterator, context) {
      return iterator = callback(iterator, context, 3), this.filter(function(x, index, list) {
        return!iterator(x, index, list);
      });
    }, data.prototype.slice = function(recurring, opt_attributes) {
      /** @type {number} */
      recurring = null == recurring ? 0 : +recurring || 0;
      var duration = 0 > recurring ? this.takeRight(-recurring) : this.drop(recurring);
      return "undefined" != typeof opt_attributes && (opt_attributes = +opt_attributes || 0, duration = 0 > opt_attributes ? duration.dropRight(-opt_attributes) : duration.take(opt_attributes - recurring)), duration;
    }, check(data.prototype, function(fn, methodName) {
      var func = lodash[methodName];
      /** @type {boolean} */
      var spyObj = /^(?:first|last)$/.test(methodName);
      /**
       * @return {?}
       */
      lodash.prototype[methodName] = function() {
        var optgroup = this.__wrapped__;
        /** @type {Arguments} */
        var args = arguments;
        var chainAll = this.__chain__;
        /** @type {boolean} */
        var err = !!this.__actions__.length;
        /** @type {boolean} */
        var arrayLike = optgroup instanceof data;
        /** @type {boolean} */
        var jquery = arrayLike && !err;
        if (spyObj && !chainAll) {
          return jquery ? fn.call(optgroup) : func.call(lodash, this.value());
        }
        /**
         * @param {?} message
         * @return {?}
         */
        var endEvent = function(message) {
          /** @type {Array} */
          var params = [message];
          return dojo.apply(params, args), func.apply(lodash, params);
        };
        if (arrayLike || isArray(optgroup)) {
          var me = jquery ? optgroup : new data(this);
          var result = fn.apply(me, args);
          if (!spyObj && (err || result.actions)) {
            var queue = result.actions || (result.actions = []);
            queue.push({
              /** @type {function (Function, Function, ?): ?} */
              func : focus,
              args : [endEvent],
              /** @type {function (string): ?} */
              thisArg : lodash
            });
          }
          return new lodashWrapper(result, chainAll);
        }
        return this.thru(endEvent);
      };
    }), each(["concat", "join", "pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
      var method = proto[methodName];
      /** @type {string} */
      var unlock = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru";
      /** @type {boolean} */
      var spyObj = /^(?:join|pop|shift)$/.test(methodName);
      /**
       * @return {?}
       */
      lodash.prototype[methodName] = function() {
        /** @type {Arguments} */
        var args = arguments;
        return spyObj && !this.__chain__ ? method.apply(this.value(), args) : this[unlock](function(object) {
          return method.apply(object, args);
        });
      };
    }), data.prototype.clone = reset, data.prototype.reverse = _get, data.prototype.value = add, lodash.prototype.chain = handle_cancel, lodash.prototype.reverse = reverse, lodash.prototype.toString = randomString, lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = intensity, lodash.prototype.collect = lodash.prototype.map, lodash.prototype.head = lodash.prototype.first, lodash.prototype.select = lodash.prototype.filter, lodash.prototype.tail = lodash.prototype.rest, lodash;
  }
  var val;
  /** @type {string} */
  var VERSION = "3.1.0";
  /** @type {number} */
  var mask = 1;
  /** @type {number} */
  var mapSizeComparer = 2;
  /** @type {number} */
  var z = 4;
  /** @type {number} */
  var y = 8;
  /** @type {number} */
  var step = 16;
  /** @type {number} */
  var c = 32;
  /** @type {number} */
  var more = 64;
  /** @type {number} */
  var d = 128;
  /** @type {number} */
  var j = 256;
  /** @type {number} */
  var lineStart = 30;
  /** @type {string} */
  var actualObject = "...";
  /** @type {number} */
  var length = 150;
  /** @type {number} */
  var cnl = 16;
  /** @type {number} */
  var wanted = 0;
  /** @type {number} */
  var curCSS = 1;
  /** @type {number} */
  var CLEANUP = 2;
  /** @type {string} */
  var filename = "Expected a function";
  /** @type {string} */
  var newVal = "__lodash_placeholder__";
  /** @type {string} */
  var prop = "[object Arguments]";
  /** @type {string} */
  var s = "[object Array]";
  /** @type {string} */
  var m = "[object Boolean]";
  /** @type {string} */
  var index = "[object Date]";
  /** @type {string} */
  var location = "[object Error]";
  /** @type {string} */
  var input = "[object Function]";
  /** @type {string} */
  var t = "[object Map]";
  /** @type {string} */
  var numberClass = "[object Number]";
  /** @type {string} */
  var string = "[object Object]";
  /** @type {string} */
  var argsClass = "[object RegExp]";
  /** @type {string} */
  var eventName = "[object Set]";
  /** @type {string} */
  var number = "[object String]";
  /** @type {string} */
  var style = "[object WeakMap]";
  /** @type {string} */
  var element = "[object ArrayBuffer]";
  /** @type {string} */
  var objUid = "[object Float32Array]";
  /** @type {string} */
  var k = "[object Float64Array]";
  /** @type {string} */
  var letter = "[object Int8Array]";
  /** @type {string} */
  var selector = "[object Int16Array]";
  /** @type {string} */
  var provide = "[object Int32Array]";
  /** @type {string} */
  var key = "[object Uint8Array]";
  /** @type {string} */
  var tag = "[object Uint8ClampedArray]";
  /** @type {string} */
  var hash = "[object Uint16Array]";
  /** @type {string} */
  var id = "[object Uint32Array]";
  /** @type {RegExp} */
  var reEmptyStringLeading = /\b__p \+= '';/g;
  /** @type {RegExp} */
  var rSlash = /\b(__p \+=) '' \+/g;
  /** @type {RegExp} */
  var badChars = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
  /** @type {RegExp} */
  var trimReplace = /&(?:amp|lt|gt|quot|#39|#96);/g;
  /** @type {RegExp} */
  var rreturn = /[&<>"'`]/g;
  /** @type {RegExp} */
  var re = RegExp(trimReplace.source);
  /** @type {RegExp} */
  var rparentsprev = RegExp(rreturn.source);
  /** @type {RegExp} */
  var reEscapeDelimiter = /<%-([\s\S]+?)%>/g;
  /** @type {RegExp} */
  var reEvaluateDelimiter = /<%([\s\S]+?)%>/g;
  /** @type {RegExp} */
  var reInterpolate = /<%=([\s\S]+?)%>/g;
  /** @type {RegExp} */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
  /** @type {RegExp} */
  var rtagName = /\w*$/;
  /** @type {RegExp} */
  var manipulation_rcheckableType = /^\s*function[ \n\r\t]+\w/;
  /** @type {RegExp} */
  var hChars = /^0[xX]/;
  /** @type {RegExp} */
  var exclude = /^\[object .+?Constructor\]$/;
  /** @type {RegExp} */
  var core_rnotwhite = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;
  /** @type {RegExp} */
  var reNoMatch = /($^)/;
  /** @type {RegExp} */
  var r20 = /[.*+?^${}()|[\]\/\\]/g;
  /** @type {RegExp} */
  var rchecked = RegExp(r20.source);
  /** @type {RegExp} */
  var rmouseEvent = /\bthis\b/;
  /** @type {RegExp} */
  var rclass = /['\n\r\u2028\u2029\\]/g;
  var fx = function() {
    /** @type {string} */
    var r = "[A-Z\\xc0-\\xd6\\xd8-\\xde]";
    /** @type {string} */
    var g = "[a-z\\xdf-\\xf6\\xf8-\\xff]+";
    return RegExp(r + "{2,}(?=" + r + g + ")|" + r + "?" + g + "|" + r + "+|[0-9]+", "g");
  }();
  /** @type {string} */
  var v = " \t\x0B\f\u00a0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000";
  /** @type {Array} */
  var contextProps = ["Array", "ArrayBuffer", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Math", "Number", "Object", "RegExp", "Set", "String", "_", "clearTimeout", "document", "isFinite", "parseInt", "setTimeout", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap", "window", "WinRTError"];
  /** @type {number} */
  var Ia = -1;
  var cache = {};
  /** @type {boolean} */
  cache[objUid] = cache[k] = cache[letter] = cache[selector] = cache[provide] = cache[key] = cache[tag] = cache[hash] = cache[id] = true;
  /** @type {boolean} */
  cache[prop] = cache[s] = cache[element] = cache[m] = cache[index] = cache[location] = cache[input] = cache[t] = cache[numberClass] = cache[string] = cache[argsClass] = cache[eventName] = cache[number] = cache[style] = false;
  var map = {};
  /** @type {boolean} */
  map[prop] = map[s] = map[element] = map[m] = map[index] = map[objUid] = map[k] = map[letter] = map[selector] = map[provide] = map[numberClass] = map[string] = map[argsClass] = map[number] = map[key] = map[tag] = map[hash] = map[id] = true;
  /** @type {boolean} */
  map[location] = map[input] = map[t] = map[eventName] = map[style] = false;
  var debounceOptions = {
    leading : false,
    maxWait : 0,
    trailing : false
  };
  var item = {
    "\u00c0" : "A",
    "\u00c1" : "A",
    "\u00c2" : "A",
    "\u00c3" : "A",
    "\u00c4" : "A",
    "\u00c5" : "A",
    "\u00e0" : "a",
    "\u00e1" : "a",
    "\u00e2" : "a",
    "\u00e3" : "a",
    "\u00e4" : "a",
    "\u00e5" : "a",
    "\u00c7" : "C",
    "\u00e7" : "c",
    "\u00d0" : "D",
    "\u00f0" : "d",
    "\u00c8" : "E",
    "\u00c9" : "E",
    "\u00ca" : "E",
    "\u00cb" : "E",
    "\u00e8" : "e",
    "\u00e9" : "e",
    "\u00ea" : "e",
    "\u00eb" : "e",
    "\u00cc" : "I",
    "\u00cd" : "I",
    "\u00ce" : "I",
    "\u00cf" : "I",
    "\u00ec" : "i",
    "\u00ed" : "i",
    "\u00ee" : "i",
    "\u00ef" : "i",
    "\u00d1" : "N",
    "\u00f1" : "n",
    "\u00d2" : "O",
    "\u00d3" : "O",
    "\u00d4" : "O",
    "\u00d5" : "O",
    "\u00d6" : "O",
    "\u00d8" : "O",
    "\u00f2" : "o",
    "\u00f3" : "o",
    "\u00f4" : "o",
    "\u00f5" : "o",
    "\u00f6" : "o",
    "\u00f8" : "o",
    "\u00d9" : "U",
    "\u00da" : "U",
    "\u00db" : "U",
    "\u00dc" : "U",
    "\u00f9" : "u",
    "\u00fa" : "u",
    "\u00fb" : "u",
    "\u00fc" : "u",
    "\u00dd" : "Y",
    "\u00fd" : "y",
    "\u00ff" : "y",
    "\u00c6" : "Ae",
    "\u00e6" : "ae",
    "\u00de" : "Th",
    "\u00fe" : "th",
    "\u00df" : "ss"
  };
  var maxBits = {
    "&" : "&amp;",
    "<" : "&lt;",
    ">" : "&gt;",
    '"' : "&quot;",
    "'" : "&#39;",
    "`" : "&#96;"
  };
  var buf = {
    "&amp;" : "&",
    "&lt;" : "<",
    "&gt;" : ">",
    "&quot;" : '"',
    "&#39;" : "'",
    "&#96;" : "`"
  };
  var objectTypes = {
    "function" : true,
    object : true
  };
  var escapes = {
    "\\" : "\\",
    "'" : "'",
    "\n" : "n",
    "\r" : "r",
    "\u2028" : "u2028",
    "\u2029" : "u2029"
  };
  var root = objectTypes[typeof window] && window !== (this && this.window) ? window : this;
  var a = objectTypes[typeof exports] && (exports && (!exports.nodeType && exports));
  var b = objectTypes[typeof module] && (module && (!module.nodeType && module));
  var self = a && (b && ("object" == typeof global && global));
  if (!!self) {
    if (!(self.global !== self && (self.window !== self && self.self !== self))) {
      root = self;
    }
  }
  var bup = b && (b.exports === a && a);
  var w = init();
  if ("function" == typeof define && ("object" == typeof define.amd && define.amd)) {
    root._ = w;
    define(function() {
      return w;
    });
  } else {
    if (a && b) {
      if (bup) {
        (b.exports = w)._ = w;
      } else {
        a._ = w;
      }
    } else {
      root._ = w;
    }
  }
}.call(this), !function(factory) {
  if ("object" == typeof exports && "undefined" != typeof module) {
    module.exports = factory();
  } else {
    if ("function" == typeof define && define.amd) {
      define([], factory);
    } else {
      var root;
      if ("undefined" != typeof window) {
        /** @type {Window} */
        root = window;
      } else {
        if ("undefined" != typeof global) {
          root = global;
        } else {
          if ("undefined" != typeof self) {
            /** @type {Window} */
            root = self;
          }
        }
      }
      root.React = factory();
    }
  }
}(function() {
  return function e(t, n, r) {
    /**
     * @param {string} o
     * @param {?} dx
     * @return {?}
     */
    function s(o, dx) {
      if (!n[o]) {
        if (!t[o]) {
          var i = "function" == typeof require && require;
          if (!dx && i) {
            return i(o, true);
          }
          if (a) {
            return a(o, true);
          }
          /** @type {Error} */
          var err = new Error("Cannot find module '" + o + "'");
          throw err.code = "MODULE_NOT_FOUND", err;
        }
        var module_ = n[o] = {
          exports : {}
        };
        t[o][0].call(module_.exports, function(e) {
          var n = t[o][1][e];
          return s(n ? n : e);
        }, module_, module_.exports, e, t, n, r);
      }
      return n[o].exports;
    }
    var a = "function" == typeof require && require;
    /** @type {number} */
    var o = 0;
    for (;o < r.length;o++) {
      s(r[o]);
    }
    return s;
  }({
    1 : [function(require, module, dataAndEvents) {
      var helper = require("./LinkedStateMixin");
      var attr = require("./React");
      var nodes = require("./ReactComponentWithPureRenderMixin");
      var inspect = require("./ReactCSSTransitionGroup");
      var Block = require("./ReactTransitionGroup");
      var getActual = require("./ReactUpdates");
      var selfClosing = require("./cx");
      var assert = require("./cloneWithProps");
      var update = require("./update");
      attr.addons = {
        CSSTransitionGroup : inspect,
        LinkedStateMixin : helper,
        PureRenderMixin : nodes,
        TransitionGroup : Block,
        batchedUpdates : getActual.batchedUpdates,
        classSet : selfClosing,
        cloneWithProps : assert,
        update : update
      };
      attr.addons.Perf = require("./ReactDefaultPerf");
      attr.addons.TestUtils = require("./ReactTestUtils");
      module.exports = attr;
    }, {
      "./LinkedStateMixin" : 25,
      "./React" : 31,
      "./ReactCSSTransitionGroup" : 34,
      "./ReactComponentWithPureRenderMixin" : 39,
      "./ReactDefaultPerf" : 56,
      "./ReactTestUtils" : 86,
      "./ReactTransitionGroup" : 90,
      "./ReactUpdates" : 91,
      "./cloneWithProps" : 113,
      "./cx" : 118,
      "./update" : 159
    }],
    2 : [function(require, module, dataAndEvents) {
      var getActual = require("./focusNode");
      var JsDiff = {
        /**
         * @return {undefined}
         */
        componentDidMount : function() {
          if (this.props.autoFocus) {
            getActual(this.getDOMNode());
          }
        }
      };
      module.exports = JsDiff;
    }, {
      "./focusNode" : 125
    }],
    3 : [function(require, module, dataAndEvents) {
      /**
       * @return {?}
       */
      function c() {
        var data = window.opera;
        return "object" == typeof data && ("function" == typeof data.version && parseInt(data.version(), 10) <= 12);
      }
      /**
       * @param {Object} event
       * @return {?}
       */
      function clickHandler(event) {
        return(event.ctrlKey || (event.altKey || event.metaKey)) && !(event.ctrlKey && event.altKey);
      }
      var Block = require("./EventConstants");
      var assert = require("./EventPropagators");
      var nodes = require("./ExecutionEnvironment");
      var tree = require("./SyntheticInputEvent");
      var getActual = require("./keyOf");
      var k = nodes.canUseDOM && ("TextEvent" in window && !("documentMode" in document || c()));
      /** @type {number} */
      var lo = 32;
      /** @type {string} */
      var _ = String.fromCharCode(lo);
      var topLevelTypes = Block.topLevelTypes;
      var env = {
        beforeInput : {
          phasedRegistrationNames : {
            bubbled : getActual({
              onBeforeInput : null
            }),
            captured : getActual({
              onBeforeInputCapture : null
            })
          },
          dependencies : [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
        }
      };
      /** @type {null} */
      var type = null;
      /** @type {boolean} */
      var nondigit = false;
      var JsDiff = {
        eventTypes : env,
        /**
         * @param {string} topLevelType
         * @param {string} topLevelTarget
         * @param {Error} topLevelTargetID
         * @param {Event} event
         * @return {?}
         */
        extractEvents : function(topLevelType, topLevelTarget, topLevelTargetID, event) {
          var data;
          if (k) {
            switch(topLevelType) {
              case topLevelTypes.topKeyPress:
                var key = event.which;
                if (key !== lo) {
                  return;
                }
                /** @type {boolean} */
                nondigit = true;
                /** @type {string} */
                data = _;
                break;
              case topLevelTypes.topTextInput:
                if (data = event.data, data === _ && nondigit) {
                  return;
                }
                break;
              default:
                return;
            }
          } else {
            switch(topLevelType) {
              case topLevelTypes.topPaste:
                /** @type {null} */
                type = null;
                break;
              case topLevelTypes.topKeyPress:
                if (event.which) {
                  if (!clickHandler(event)) {
                    /** @type {string} */
                    type = String.fromCharCode(event.which);
                  }
                }
                break;
              case topLevelTypes.topCompositionEnd:
                type = event.data;
            }
            if (null === type) {
              return;
            }
            data = type;
          }
          if (data) {
            var d = tree.getPooled(env.beforeInput, topLevelTargetID, event);
            return d.data = data, type = null, assert.accumulateTwoPhaseDispatches(d), d;
          }
        }
      };
      module.exports = JsDiff;
    }, {
      "./EventConstants" : 17,
      "./EventPropagators" : 22,
      "./ExecutionEnvironment" : 23,
      "./SyntheticInputEvent" : 101,
      "./keyOf" : 147
    }],
    4 : [function($sanitize, module, dataAndEvents) {
      var hasClass = $sanitize("./invariant");
      var obj = {
        /**
         * @param {string} name
         * @param {string} className
         * @return {?}
         */
        addClass : function(name, className) {
          return hasClass(!/\s/.test(className), 'CSSCore.addClass takes only a single class name. "%s" contains multiple classes.', className), className && (name.classList ? name.classList.add(className) : obj.hasClass(name, className) || (name.className = name.className + " " + className)), name;
        },
        /**
         * @param {string} name
         * @param {string} className
         * @return {?}
         */
        removeClass : function(name, className) {
          return hasClass(!/\s/.test(className), 'CSSCore.removeClass takes only a single class name. "%s" contains multiple classes.', className), className && (name.classList ? name.classList.remove(className) : obj.hasClass(name, className) && (name.className = name.className.replace(new RegExp("(^|\\s)" + className + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, ""))), name;
        },
        /**
         * @param {string} checkSet
         * @param {string} className
         * @param {boolean} bool
         * @return {?}
         */
        conditionClass : function(checkSet, className, bool) {
          return(bool ? obj.addClass : obj.removeClass)(checkSet, className);
        },
        /**
         * @param {Node} name
         * @param {string} className
         * @return {?}
         */
        hasClass : function(name, className) {
          return hasClass(!/\s/.test(className), "CSS.hasClass takes only a single class name."), name.classList ? !!className && name.classList.contains(className) : (" " + name.className + " ").indexOf(" " + className + " ") > -1;
        }
      };
      module.exports = obj;
    }, {
      "./invariant" : 140
    }],
    5 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {?} deepDataAndEvents
       * @param {string} string
       * @return {?}
       */
      function format(deepDataAndEvents, string) {
        return deepDataAndEvents + string.charAt(0).toUpperCase() + string.substring(1);
      }
      var defaults = {
        columnCount : true,
        flex : true,
        flexGrow : true,
        flexShrink : true,
        fontWeight : true,
        lineClamp : true,
        lineHeight : true,
        opacity : true,
        order : true,
        orphans : true,
        widows : true,
        zIndex : true,
        zoom : true,
        fillOpacity : true,
        strokeOpacity : true
      };
      /** @type {Array} */
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(defaults).forEach(function(key) {
        prefixes.forEach(function(deepDataAndEvents) {
          defaults[format(deepDataAndEvents, key)] = defaults[key];
        });
      });
      var shorthandStyles = {
        background : {
          backgroundImage : true,
          backgroundPosition : true,
          backgroundRepeat : true,
          backgroundColor : true
        },
        border : {
          borderWidth : true,
          borderStyle : true,
          borderColor : true
        },
        borderBottom : {
          borderBottomWidth : true,
          borderBottomStyle : true,
          borderBottomColor : true
        },
        borderLeft : {
          borderLeftWidth : true,
          borderLeftStyle : true,
          borderLeftColor : true
        },
        borderRight : {
          borderRightWidth : true,
          borderRightStyle : true,
          borderRightColor : true
        },
        borderTop : {
          borderTopWidth : true,
          borderTopStyle : true,
          borderTopColor : true
        },
        font : {
          fontStyle : true,
          fontVariant : true,
          fontWeight : true,
          fontSize : true,
          lineHeight : true,
          fontFamily : true
        }
      };
      var JsDiff = {
        isUnitlessNumber : defaults,
        shorthandPropertyExpansions : shorthandStyles
      };
      module.exports = JsDiff;
    }, {}],
    6 : [function(require, module, dataAndEvents) {
      var Node = require("./CSSProperty");
      var Block = require("./ExecutionEnvironment");
      var extend = require("./camelizeStyleName");
      var callback = require("./dangerousStyleValue");
      var getActual = require("./hyphenateStyleName");
      var inspect = require("./memoizeStringOnly");
      var nodes = require("./warning");
      var str = inspect(function(obj) {
        return getActual(obj);
      });
      /** @type {string} */
      var name = "cssFloat";
      if (Block.canUseDOM) {
        if (void 0 === document.documentElement.style.cssFloat) {
          /** @type {string} */
          name = "styleFloat";
        }
      }
      var opt_tagWhitelist = {};
      /**
       * @param {string} tagName
       * @return {undefined}
       */
      var make = function(tagName) {
        if (!(opt_tagWhitelist.hasOwnProperty(tagName) && opt_tagWhitelist[tagName])) {
          /** @type {boolean} */
          opt_tagWhitelist[tagName] = true;
          nodes(false, "Unsupported style property " + tagName + ". Did you mean " + extend(tagName) + "?");
        }
      };
      var JsDiff = {
        /**
         * @param {Object} vals
         * @return {?}
         */
        createMarkupForStyles : function(vals) {
          /** @type {string} */
          var optsData = "";
          var i;
          for (i in vals) {
            if (vals.hasOwnProperty(i)) {
              if (i.indexOf("-") > -1) {
                make(i);
              }
              var val = vals[i];
              if (null != val) {
                optsData += str(i) + ":";
                optsData += callback(i, val) + ";";
              }
            }
          }
          return optsData || null;
        },
        /**
         * @param {Element} node
         * @param {Object} obj
         * @return {undefined}
         */
        setValueForStyles : function(node, obj) {
          var attrs = node.style;
          var key;
          for (key in obj) {
            if (obj.hasOwnProperty(key)) {
              if (key.indexOf("-") > -1) {
                make(key);
              }
              var value = callback(key, obj[key]);
              if ("float" === key && (key = name), value) {
                attrs[key] = value;
              } else {
                var elems = Node.shorthandPropertyExpansions[key];
                if (elems) {
                  var i;
                  for (i in elems) {
                    /** @type {string} */
                    attrs[i] = "";
                  }
                } else {
                  /** @type {string} */
                  attrs[key] = "";
                }
              }
            }
          }
        }
      };
      module.exports = JsDiff;
    }, {
      "./CSSProperty" : 5,
      "./ExecutionEnvironment" : 23,
      "./camelizeStyleName" : 112,
      "./dangerousStyleValue" : 119,
      "./hyphenateStyleName" : 138,
      "./memoizeStringOnly" : 149,
      "./warning" : 160
    }],
    7 : [function(require, module, dataAndEvents) {
      /**
       * @return {undefined}
       */
      function Class() {
        /** @type {null} */
        this._callbacks = null;
        /** @type {null} */
        this._contexts = null;
      }
      var util = require("./PooledClass");
      var Emitter = require("./Object.assign");
      var getActual = require("./invariant");
      Emitter(Class.prototype, {
        /**
         * @param {string} value
         * @param {string} options
         * @return {undefined}
         */
        enqueue : function(value, options) {
          this._callbacks = this._callbacks || [];
          this._contexts = this._contexts || [];
          this._callbacks.push(value);
          this._contexts.push(options);
        },
        /**
         * @return {undefined}
         */
        notifyAll : function() {
          var events = this._callbacks;
          var elements = this._contexts;
          if (events) {
            getActual(events.length === elements.length, "Mismatched list of contexts in callback queue");
            /** @type {null} */
            this._callbacks = null;
            /** @type {null} */
            this._contexts = null;
            /** @type {number} */
            var i = 0;
            var l = events.length;
            for (;l > i;i++) {
              events[i].call(elements[i]);
            }
            /** @type {number} */
            events.length = 0;
            /** @type {number} */
            elements.length = 0;
          }
        },
        /**
         * @return {undefined}
         */
        reset : function() {
          /** @type {null} */
          this._callbacks = null;
          /** @type {null} */
          this._contexts = null;
        },
        /**
         * @return {undefined}
         */
        destructor : function() {
          this.reset();
        }
      });
      util.addPoolingTo(Class);
      /** @type {function (): undefined} */
      module.exports = Class;
    }, {
      "./Object.assign" : 29,
      "./PooledClass" : 30,
      "./invariant" : 140
    }],
    8 : [function(require, module, dataAndEvents) {
      /**
       * @param {Node} elem
       * @return {?}
       */
      function update(elem) {
        return "SELECT" === elem.nodeName || "INPUT" === elem.nodeName && "file" === elem.type;
      }
      /**
       * @param {Object} nativeEvent
       * @return {undefined}
       */
      function pdataOld(nativeEvent) {
        var event = object.getPooled(result.change, doneResults, nativeEvent);
        fixHook.accumulateTwoPhaseDispatches(event);
        jQuery.batchedUpdates(which, event);
      }
      /**
       * @param {?} event
       * @return {undefined}
       */
      function which(event) {
        assert.enqueueEvents(event);
        assert.processEventQueue();
      }
      /**
       * @param {Function} value
       * @param {Function} data
       * @return {undefined}
       */
      function cb(value, data) {
        /** @type {Function} */
        element = value;
        /** @type {Function} */
        doneResults = data;
        element.attachEvent("onchange", pdataOld);
      }
      /**
       * @return {undefined}
       */
      function unbind() {
        if (element) {
          element.detachEvent("onchange", pdataOld);
          /** @type {null} */
          element = null;
          /** @type {null} */
          doneResults = null;
        }
      }
      /**
       * @param {string} topLevelType
       * @param {(Node|string)} elem
       * @param {Object} name
       * @return {?}
       */
      function nodeName(topLevelType, elem, name) {
        return topLevelType === topLevelTypes.topChange ? name : void 0;
      }
      /**
       * @param {string} topLevelType
       * @param {?} arg
       * @param {Function} chunk
       * @return {undefined}
       */
      function end(topLevelType, arg, chunk) {
        if (topLevelType === topLevelTypes.topFocus) {
          unbind();
          cb(arg, chunk);
        } else {
          if (topLevelType === topLevelTypes.topBlur) {
            unbind();
          }
        }
      }
      /**
       * @param {Object} obj
       * @param {Function} data
       * @return {undefined}
       */
      function init(obj, data) {
        /** @type {Object} */
        element = obj;
        /** @type {Function} */
        doneResults = data;
        id = obj.value;
        /** @type {(ObjectPropertyDescriptor|undefined)} */
        ret = Object.getOwnPropertyDescriptor(obj.constructor.prototype, "value");
        Object.defineProperty(element, "value", open_property);
        element.attachEvent("onpropertychange", udataCur);
      }
      /**
       * @return {undefined}
       */
      function fn() {
        if (element) {
          delete element.value;
          element.detachEvent("onpropertychange", udataCur);
          /** @type {null} */
          element = null;
          /** @type {null} */
          doneResults = null;
          /** @type {null} */
          id = null;
          /** @type {null} */
          ret = null;
        }
      }
      /**
       * @param {Object} nativeEvent
       * @return {undefined}
       */
      function udataCur(nativeEvent) {
        if ("value" === nativeEvent.propertyName) {
          var key = nativeEvent.srcElement.value;
          if (key !== id) {
            id = key;
            pdataOld(nativeEvent);
          }
        }
      }
      /**
       * @param {string} topLevelType
       * @param {(Node|string)} elem
       * @param {Object} chunk
       * @return {?}
       */
      function eq(topLevelType, elem, chunk) {
        return topLevelType === topLevelTypes.topInput ? chunk : void 0;
      }
      /**
       * @param {string} topLevelType
       * @param {HTMLElement} code
       * @param {Function} data
       * @return {undefined}
       */
      function done(topLevelType, code, data) {
        if (topLevelType === topLevelTypes.topFocus) {
          fn();
          init(code, data);
        } else {
          if (topLevelType === topLevelTypes.topBlur) {
            fn();
          }
        }
      }
      /**
       * @param {?} topLevelType
       * @param {(Node|string)} elem
       * @param {Object} array
       * @return {?}
       */
      function last(topLevelType, elem, array) {
        return topLevelType !== topLevelTypes.topSelectionChange && (topLevelType !== topLevelTypes.topKeyUp && topLevelType !== topLevelTypes.topKeyDown) || (!element || element.value === id) ? void 0 : (id = element.value, doneResults);
      }
      /**
       * @param {Node} elem
       * @return {?}
       */
      function getBindingType(elem) {
        return "INPUT" === elem.nodeName && ("checkbox" === elem.type || "radio" === elem.type);
      }
      /**
       * @param {string} topLevelType
       * @param {(Node|string)} elem
       * @param {Object} fn
       * @return {?}
       */
      function removeEvent(topLevelType, elem, fn) {
        return topLevelType === topLevelTypes.topClick ? fn : void 0;
      }
      var Block = require("./EventConstants");
      var assert = require("./EventPluginHub");
      var fixHook = require("./EventPropagators");
      var nodes = require("./ExecutionEnvironment");
      var jQuery = require("./ReactUpdates");
      var object = require("./SyntheticEvent");
      var filter = require("./isEventSupported");
      var inspect = require("./isTextInputElement");
      var getActual = require("./keyOf");
      var topLevelTypes = Block.topLevelTypes;
      var result = {
        change : {
          phasedRegistrationNames : {
            bubbled : getActual({
              onChange : null
            }),
            captured : getActual({
              onChangeCapture : null
            })
          },
          dependencies : [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
        }
      };
      /** @type {null} */
      var element = null;
      /** @type {null} */
      var doneResults = null;
      /** @type {null} */
      var id = null;
      /** @type {null} */
      var ret = null;
      /** @type {boolean} */
      var H = false;
      if (nodes.canUseDOM) {
        H = filter("change") && (!("documentMode" in document) || document.documentMode > 8);
      }
      /** @type {boolean} */
      var I = false;
      if (nodes.canUseDOM) {
        I = filter("input") && (!("documentMode" in document) || document.documentMode > 9);
      }
      var open_property = {
        /**
         * @return {?}
         */
        get : function() {
          return ret.get.call(this);
        },
        /**
         * @param {?} elem
         * @return {undefined}
         */
        set : function(elem) {
          /** @type {string} */
          id = "" + elem;
          ret.set.call(this, elem);
        }
      };
      var JsDiff = {
        eventTypes : result,
        /**
         * @param {string} topLevelType
         * @param {Node} chunk
         * @param {Object} files
         * @param {Event} nativeEvent
         * @return {?}
         */
        extractEvents : function(topLevelType, chunk, files, nativeEvent) {
          var getTargetIDFunc;
          var cb;
          if (update(chunk) ? H ? getTargetIDFunc = nodeName : cb = end : inspect(chunk) ? I ? getTargetIDFunc = eq : (getTargetIDFunc = last, cb = done) : getBindingType(chunk) && (getTargetIDFunc = removeEvent), getTargetIDFunc) {
            var targetID = getTargetIDFunc(topLevelType, chunk, files);
            if (targetID) {
              var event = object.getPooled(result.change, targetID, nativeEvent);
              return fixHook.accumulateTwoPhaseDispatches(event), event;
            }
          }
          if (cb) {
            cb(topLevelType, chunk, files);
          }
        }
      };
      module.exports = JsDiff;
    }, {
      "./EventConstants" : 17,
      "./EventPluginHub" : 19,
      "./EventPropagators" : 22,
      "./ExecutionEnvironment" : 23,
      "./ReactUpdates" : 91,
      "./SyntheticEvent" : 99,
      "./isEventSupported" : 141,
      "./isTextInputElement" : 143,
      "./keyOf" : 147
    }],
    9 : [function(dataAndEvents, module, deepDataAndEvents) {
      /** @type {number} */
      var d = 0;
      var JsDiff = {
        /**
         * @return {?}
         */
        createReactRootIndex : function() {
          return d++;
        }
      };
      module.exports = JsDiff;
    }, {}],
    10 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} topLevelType
       * @return {?}
       */
      function getTargetIDFunc(topLevelType) {
        switch(topLevelType) {
          case topLevelTypes.topCompositionStart:
            return eventTypes.compositionStart;
          case topLevelTypes.topCompositionEnd:
            return eventTypes.compositionEnd;
          case topLevelTypes.topCompositionUpdate:
            return eventTypes.compositionUpdate;
        }
      }
      /**
       * @param {string} topLevelType
       * @param {Event} nativeEvent
       * @return {?}
       */
      function isFallbackStart(topLevelType, nativeEvent) {
        return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === ENTER_KEY;
      }
      /**
       * @param {string} msg
       * @param {Event} e
       * @return {?}
       */
      function enter(msg, e) {
        switch(msg) {
          case topLevelTypes.topKeyUp:
            return-1 !== restricted.indexOf(e.keyCode);
          case topLevelTypes.topKeyDown:
            return e.keyCode !== ENTER_KEY;
          case topLevelTypes.topKeyPress:
          ;
          case topLevelTypes.topMouseDown:
          ;
          case topLevelTypes.topBlur:
            return true;
          default:
            return false;
        }
      }
      /**
       * @param {Object} root
       * @return {undefined}
       */
      function create(root) {
        /** @type {Object} */
        this.root = root;
        this.startSelection = _self.getSelection(root);
        this.startValue = this.getText();
      }
      var Block = require("./EventConstants");
      var assert = require("./EventPropagators");
      var nodes = require("./ExecutionEnvironment");
      var _self = require("./ReactInputSelection");
      var EventConstructor = require("./SyntheticCompositionEvent");
      var xhr = require("./getTextContentAccessor");
      var getActual = require("./keyOf");
      /** @type {Array} */
      var restricted = [9, 13, 27, 32];
      /** @type {number} */
      var ENTER_KEY = 229;
      var url = nodes.canUseDOM && "CompositionEvent" in window;
      /** @type {boolean} */
      var r = !url || "documentMode" in document && (document.documentMode > 8 && document.documentMode <= 11);
      var topLevelTypes = Block.topLevelTypes;
      /** @type {null} */
      var parent = null;
      var eventTypes = {
        compositionEnd : {
          phasedRegistrationNames : {
            bubbled : getActual({
              onCompositionEnd : null
            }),
            captured : getActual({
              onCompositionEndCapture : null
            })
          },
          dependencies : [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
        },
        compositionStart : {
          phasedRegistrationNames : {
            bubbled : getActual({
              onCompositionStart : null
            }),
            captured : getActual({
              onCompositionStartCapture : null
            })
          },
          dependencies : [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
        },
        compositionUpdate : {
          phasedRegistrationNames : {
            bubbled : getActual({
              onCompositionUpdate : null
            }),
            captured : getActual({
              onCompositionUpdateCapture : null
            })
          },
          dependencies : [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
        }
      };
      /**
       * @return {?}
       */
      create.prototype.getText = function() {
        return this.root.value || this.root[xhr()];
      };
      /**
       * @return {?}
       */
      create.prototype.getData = function() {
        var endValue = this.getText();
        var prefixLength = this.startSelection.start;
        /** @type {number} */
        var suffixLength = this.startValue.length - this.startSelection.end;
        return endValue.substr(prefixLength, endValue.length - suffixLength - prefixLength);
      };
      var JsDiff = {
        eventTypes : eventTypes,
        /**
         * @param {string} topLevelType
         * @param {string} topLevelTarget
         * @param {Error} topLevelTargetID
         * @param {Event} nativeEvent
         * @return {?}
         */
        extractEvents : function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {
          var eventType;
          var node;
          if (url ? eventType = getTargetIDFunc(topLevelType) : parent ? enter(topLevelType, nativeEvent) && (eventType = eventTypes.compositionEnd) : isFallbackStart(topLevelType, nativeEvent) && (eventType = eventTypes.compositionStart), r && (parent || eventType !== eventTypes.compositionStart ? eventType === eventTypes.compositionEnd && (parent && (node = parent.getData(), parent = null)) : parent = new create(topLevelTarget)), eventType) {
            var event = EventConstructor.getPooled(eventType, topLevelTargetID, nativeEvent);
            return node && (event.data = node), assert.accumulateTwoPhaseDispatches(event), event;
          }
        }
      };
      module.exports = JsDiff;
    }, {
      "./EventConstants" : 17,
      "./EventPropagators" : 22,
      "./ExecutionEnvironment" : 23,
      "./ReactInputSelection" : 65,
      "./SyntheticCompositionEvent" : 97,
      "./getTextContentAccessor" : 135,
      "./keyOf" : 147
    }],
    11 : [function(require, module, dataAndEvents) {
      /**
       * @param {Element} wrapper
       * @param {?} context
       * @param {?} num
       * @return {undefined}
       */
      function wrap(wrapper, context, num) {
        wrapper.insertBefore(context, wrapper.childNodes[num] || null);
      }
      var removeNode;
      var Block = require("./Danger");
      var Token = require("./ReactMultiChildUpdateTypes");
      var getActual = require("./getTextContentAccessor");
      var getName = require("./invariant");
      var actual = getActual();
      /** @type {function (Object, ?): undefined} */
      removeNode = "textContent" === actual ? function(elem, value) {
        elem.textContent = value;
      } : function(elem, v) {
        for (;elem.firstChild;) {
          elem.removeChild(elem.firstChild);
        }
        if (v) {
          var doc = elem.ownerDocument || document;
          elem.appendChild(doc.createTextNode(v));
        }
      };
      var JsDiff = {
        dangerouslyReplaceNodeWithMarkup : Block.dangerouslyReplaceNodeWithMarkup,
        /** @type {function (Object, ?): undefined} */
        updateTextContent : removeNode,
        /**
         * @param {Array} updates
         * @param {?} isXML
         * @return {undefined}
         */
        processUpdates : function(updates, isXML) {
          var update;
          /** @type {null} */
          var initialChildren = null;
          /** @type {null} */
          var items = null;
          /** @type {number} */
          var k = 0;
          for (;update = updates[k];k++) {
            if (update.type === Token.MOVE_EXISTING || update.type === Token.REMOVE_NODE) {
              var updatedIndex = update.fromIndex;
              var value = update.parentNode.childNodes[updatedIndex];
              var parentID = update.parentID;
              getName(value, "processUpdates(): Unable to find child %s of element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID `%s`.", updatedIndex, parentID);
              initialChildren = initialChildren || {};
              initialChildren[parentID] = initialChildren[parentID] || [];
              initialChildren[parentID][updatedIndex] = value;
              /** @type {Array} */
              items = items || [];
              items.push(value);
            }
          }
          var renderedMarkup = Block.dangerouslyRenderMarkup(isXML);
          if (items) {
            /** @type {number} */
            var i = 0;
            for (;i < items.length;i++) {
              items[i].parentNode.removeChild(items[i]);
            }
          }
          /** @type {number} */
          var element_id = 0;
          for (;update = updates[element_id];element_id++) {
            switch(update.type) {
              case Token.INSERT_MARKUP:
                wrap(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
                break;
              case Token.MOVE_EXISTING:
                wrap(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
                break;
              case Token.TEXT_CONTENT:
                removeNode(update.parentNode, update.textContent);
                break;
              case Token.REMOVE_NODE:
              ;
            }
          }
        }
      };
      module.exports = JsDiff;
    }, {
      "./Danger" : 14,
      "./ReactMultiChildUpdateTypes" : 72,
      "./getTextContentAccessor" : 135,
      "./invariant" : 140
    }],
    12 : [function($sanitize, mod, dataAndEvents) {
      /**
       * @param {number} bitFlag
       * @param {number} bit
       * @return {?}
       */
      function sub(bitFlag, bit) {
        return(bitFlag & bit) === bit;
      }
      var eventsApi = $sanitize("./invariant");
      var HAS_OVERLOADED_BOOLEAN_VALUE = {
        MUST_USE_ATTRIBUTE : 1,
        MUST_USE_PROPERTY : 2,
        HAS_SIDE_EFFECTS : 4,
        HAS_BOOLEAN_VALUE : 8,
        HAS_NUMERIC_VALUE : 16,
        HAS_POSITIVE_NUMERIC_VALUE : 48,
        HAS_OVERLOADED_BOOLEAN_VALUE : 64,
        /**
         * @param {Object} domPropertyConfig
         * @return {undefined}
         */
        injectDOMPropertyConfig : function(domPropertyConfig) {
          var testSource = domPropertyConfig.Properties || {};
          var meta = domPropertyConfig.DOMAttributeNames || {};
          var cfg = domPropertyConfig.DOMPropertyNames || {};
          var old = domPropertyConfig.DOMMutationMethods || {};
          if (domPropertyConfig.isCustomAttribute) {
            exports._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
          }
          var name;
          for (name in testSource) {
            eventsApi(!exports.isStandardName.hasOwnProperty(name), "injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.", name);
            /** @type {boolean} */
            exports.isStandardName[name] = true;
            /** @type {string} */
            var file = name.toLowerCase();
            if (exports.getPossibleStandardName[file] = name, meta.hasOwnProperty(name)) {
              var prop = meta[name];
              /** @type {string} */
              exports.getPossibleStandardName[prop] = name;
              exports.getAttributeName[name] = prop;
            } else {
              /** @type {string} */
              exports.getAttributeName[name] = file;
            }
            exports.getPropertyName[name] = cfg.hasOwnProperty(name) ? cfg[name] : name;
            if (old.hasOwnProperty(name)) {
              exports.getMutationMethod[name] = old[name];
            } else {
              /** @type {null} */
              exports.getMutationMethod[name] = null;
            }
            var ref = testSource[name];
            exports.mustUseAttribute[name] = sub(ref, HAS_OVERLOADED_BOOLEAN_VALUE.MUST_USE_ATTRIBUTE);
            exports.mustUseProperty[name] = sub(ref, HAS_OVERLOADED_BOOLEAN_VALUE.MUST_USE_PROPERTY);
            exports.hasSideEffects[name] = sub(ref, HAS_OVERLOADED_BOOLEAN_VALUE.HAS_SIDE_EFFECTS);
            exports.hasBooleanValue[name] = sub(ref, HAS_OVERLOADED_BOOLEAN_VALUE.HAS_BOOLEAN_VALUE);
            exports.hasNumericValue[name] = sub(ref, HAS_OVERLOADED_BOOLEAN_VALUE.HAS_NUMERIC_VALUE);
            exports.hasPositiveNumericValue[name] = sub(ref, HAS_OVERLOADED_BOOLEAN_VALUE.HAS_POSITIVE_NUMERIC_VALUE);
            exports.hasOverloadedBooleanValue[name] = sub(ref, HAS_OVERLOADED_BOOLEAN_VALUE.HAS_OVERLOADED_BOOLEAN_VALUE);
            eventsApi(!exports.mustUseAttribute[name] || !exports.mustUseProperty[name], "DOMProperty: Cannot require using both attribute and property: %s", name);
            eventsApi(exports.mustUseProperty[name] || !exports.hasSideEffects[name], "DOMProperty: Properties that have side effects must use property: %s", name);
            eventsApi(!!exports.hasBooleanValue[name] + !!exports.hasNumericValue[name] + !!exports.hasOverloadedBooleanValue[name] <= 1, "DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s", name);
          }
        }
      };
      var args = {};
      var exports = {
        ID_ATTRIBUTE_NAME : "data-reactid",
        isStandardName : {},
        getPossibleStandardName : {},
        getAttributeName : {},
        getPropertyName : {},
        getMutationMethod : {},
        mustUseAttribute : {},
        mustUseProperty : {},
        hasSideEffects : {},
        hasBooleanValue : {},
        hasNumericValue : {},
        hasPositiveNumericValue : {},
        hasOverloadedBooleanValue : {},
        _isCustomAttributeFunctions : [],
        /**
         * @param {string} keepData
         * @return {?}
         */
        isCustomAttribute : function(keepData) {
          /** @type {number} */
          var i = 0;
          for (;i < exports._isCustomAttributeFunctions.length;i++) {
            var seg = exports._isCustomAttributeFunctions[i];
            if (seg(keepData)) {
              return true;
            }
          }
          return false;
        },
        /**
         * @param {string} name
         * @param {string} prop
         * @return {?}
         */
        getDefaultValueForProperty : function(name, prop) {
          var originalEvent;
          var event = args[name];
          return event || (args[name] = event = {}), prop in event || (originalEvent = document.createElement(name), event[prop] = originalEvent[prop]), event[prop];
        },
        injection : HAS_OVERLOADED_BOOLEAN_VALUE
      };
      mod.exports = exports;
    }, {
      "./invariant" : 140
    }],
    13 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} name
       * @param {number} value
       * @return {?}
       */
      function addField(name, value) {
        return null == value || (elem.hasBooleanValue[name] && !value || (elem.hasNumericValue[name] && isNaN(value) || (elem.hasPositiveNumericValue[name] && 1 > value || elem.hasOverloadedBooleanValue[name] && value === false)));
      }
      var elem = require("./DOMProperty");
      var escapeTextForBrowser = require("./escapeTextForBrowser");
      var getActual = require("./memoizeStringOnly");
      var push = require("./warning");
      var processAttributeNameAndPrefix = getActual(function(deepDataAndEvents) {
        return escapeTextForBrowser(deepDataAndEvents) + '="';
      });
      var config = {
        children : true,
        dangerouslySetInnerHTML : true,
        key : true,
        ref : true
      };
      var prevChildren = {};
      /**
       * @param {string} name
       * @return {undefined}
       */
      var func = function(name) {
        if (!(config.hasOwnProperty(name) && config[name] || prevChildren.hasOwnProperty(name) && prevChildren[name])) {
          /** @type {boolean} */
          prevChildren[name] = true;
          var type = name.toLowerCase();
          var actual = elem.isCustomAttribute(type) ? type : elem.getPossibleStandardName.hasOwnProperty(type) ? elem.getPossibleStandardName[type] : null;
          push(null == actual, "Unknown DOM property " + name + ". Did you mean " + actual + "?");
        }
      };
      var JsDiff = {
        /**
         * @param {string} value
         * @return {?}
         */
        createMarkupForID : function(value) {
          return processAttributeNameAndPrefix(elem.ID_ATTRIBUTE_NAME) + escapeTextForBrowser(value) + '"';
        },
        /**
         * @param {string} name
         * @param {number} value
         * @return {?}
         */
        createMarkupForProperty : function(name, value) {
          if (elem.isStandardName.hasOwnProperty(name) && elem.isStandardName[name]) {
            if (addField(name, value)) {
              return "";
            }
            var attributeName = elem.getAttributeName[name];
            return elem.hasBooleanValue[name] || elem.hasOverloadedBooleanValue[name] && value === true ? escapeTextForBrowser(attributeName) : processAttributeNameAndPrefix(attributeName) + escapeTextForBrowser(value) + '"';
          }
          return elem.isCustomAttribute(name) ? null == value ? "" : processAttributeNameAndPrefix(name) + escapeTextForBrowser(value) + '"' : (func(name), null);
        },
        /**
         * @param {Element} node
         * @param {string} name
         * @param {string} value
         * @return {undefined}
         */
        setValueForProperty : function(node, name, value) {
          if (elem.isStandardName.hasOwnProperty(name) && elem.isStandardName[name]) {
            var mutationMethod = elem.getMutationMethod[name];
            if (mutationMethod) {
              mutationMethod(node, value);
            } else {
              if (addField(name, value)) {
                this.deleteValueForProperty(node, name);
              } else {
                if (elem.mustUseAttribute[name]) {
                  node.setAttribute(elem.getAttributeName[name], "" + value);
                } else {
                  var key = elem.getPropertyName[name];
                  if (!(elem.hasSideEffects[name] && "" + node[key] == "" + value)) {
                    /** @type {string} */
                    node[key] = value;
                  }
                }
              }
            }
          } else {
            if (elem.isCustomAttribute(name)) {
              if (null == value) {
                node.removeAttribute(name);
              } else {
                node.setAttribute(name, "" + value);
              }
            } else {
              func(name);
            }
          }
        },
        /**
         * @param {Element} node
         * @param {string} name
         * @return {undefined}
         */
        deleteValueForProperty : function(node, name) {
          if (elem.isStandardName.hasOwnProperty(name) && elem.isStandardName[name]) {
            var mutationMethod = elem.getMutationMethod[name];
            if (mutationMethod) {
              mutationMethod(node, void 0);
            } else {
              if (elem.mustUseAttribute[name]) {
                node.removeAttribute(elem.getAttributeName[name]);
              } else {
                var attr = elem.getPropertyName[name];
                var val = elem.getDefaultValueForProperty(node.nodeName, attr);
                if (!(elem.hasSideEffects[name] && "" + node[attr] === val)) {
                  node[attr] = val;
                }
              }
            }
          } else {
            if (elem.isCustomAttribute(name)) {
              node.removeAttribute(name);
            } else {
              func(name);
            }
          }
        }
      };
      module.exports = JsDiff;
    }, {
      "./DOMProperty" : 12,
      "./escapeTextForBrowser" : 123,
      "./memoizeStringOnly" : 149,
      "./warning" : 160
    }],
    14 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} actual
       * @return {?}
       */
      function expect(actual) {
        return actual.substring(1, actual.indexOf(" "));
      }
      var xhr = require("./ExecutionEnvironment");
      var $ = require("./createNodesFromMarkup");
      var Block = require("./emptyFunction");
      var inspect = require("./getMarkupWrap");
      var callback = require("./invariant");
      /** @type {RegExp} */
      var rreturn = /^(<[^ \/>]+)/;
      /** @type {string} */
      var optgroup = "data-danger-index";
      var JsDiff = {
        /**
         * @param {Array} value
         * @return {?}
         */
        dangerouslyRenderMarkup : function(value) {
          callback(xhr.canUseDOM, "dangerouslyRenderMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use React.renderToString for server rendering.");
          var name;
          var methods = {};
          /** @type {number} */
          var i = 0;
          for (;i < value.length;i++) {
            callback(value[i], "dangerouslyRenderMarkup(...): Missing markup.");
            name = expect(value[i]);
            name = inspect(name) ? name : "*";
            methods[name] = methods[name] || [];
            methods[name][i] = value[i];
          }
          /** @type {Array} */
          var node = [];
          /** @type {number} */
          var completed = 0;
          for (name in methods) {
            if (methods.hasOwnProperty(name)) {
              var obj = methods[name];
              var prop;
              for (prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                  var ret = obj[prop];
                  obj[prop] = ret.replace(rreturn, "$1 " + optgroup + '="' + prop + '" ');
                }
              }
              var codeSegments = $(obj.join(""), Block);
              /** @type {number} */
              i = 0;
              for (;i < codeSegments.length;++i) {
                var elem = codeSegments[i];
                if (elem.hasAttribute && elem.hasAttribute(optgroup)) {
                  /** @type {number} */
                  prop = +elem.getAttribute(optgroup);
                  elem.removeAttribute(optgroup);
                  callback(!node.hasOwnProperty(prop), "Danger: Assigning to an already-occupied result index.");
                  node[prop] = elem;
                  completed += 1;
                } else {
                  console.error("Danger: Discarding unexpected node:", elem);
                }
              }
            }
          }
          return callback(completed === node.length, "Danger: Did not assign to every index of resultList."), callback(node.length === value.length, "Danger: Expected markup to render %s nodes, but rendered %s.", value.length, node.length), node;
        },
        /**
         * @param {Node} el
         * @param {?} markup
         * @return {undefined}
         */
        dangerouslyReplaceNodeWithMarkup : function(el, markup) {
          callback(xhr.canUseDOM, "dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use React.renderToString for server rendering.");
          callback(markup, "dangerouslyReplaceNodeWithMarkup(...): Missing markup.");
          callback("html" !== el.tagName.toLowerCase(), "dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See renderComponentToString().");
          var backupText = $(markup, Block)[0];
          el.parentNode.replaceChild(backupText, el);
        }
      };
      module.exports = JsDiff;
    }, {
      "./ExecutionEnvironment" : 23,
      "./createNodesFromMarkup" : 117,
      "./emptyFunction" : 121,
      "./getMarkupWrap" : 132,
      "./invariant" : 140
    }],
    15 : [function(require, module, dataAndEvents) {
      var getActual = require("./keyOf");
      /** @type {Array} */
      var JsDiff = [getActual({
        ResponderEventPlugin : null
      }), getActual({
        SimpleEventPlugin : null
      }), getActual({
        TapEventPlugin : null
      }), getActual({
        EnterLeaveEventPlugin : null
      }), getActual({
        ChangeEventPlugin : null
      }), getActual({
        SelectEventPlugin : null
      }), getActual({
        CompositionEventPlugin : null
      }), getActual({
        BeforeInputEventPlugin : null
      }), getActual({
        AnalyticsEventPlugin : null
      }), getActual({
        MobileSafariClickEventPlugin : null
      })];
      /** @type {Array} */
      module.exports = JsDiff;
    }, {
      "./keyOf" : 147
    }],
    16 : [function(require, module, dataAndEvents) {
      var Block = require("./EventConstants");
      var api = require("./EventPropagators");
      var SyntheticMouseEvent = require("./SyntheticMouseEvent");
      var c = require("./ReactMount");
      var getActual = require("./keyOf");
      var topLevelTypes = Block.topLevelTypes;
      var cl = c.getFirstReactDOM;
      var $scope = {
        mouseEnter : {
          registrationName : getActual({
            onMouseEnter : null
          }),
          dependencies : [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
        },
        mouseLeave : {
          registrationName : getActual({
            onMouseLeave : null
          }),
          dependencies : [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
        }
      };
      /** @type {Array} */
      var events = [null, null];
      var JsDiff = {
        eventTypes : $scope,
        /**
         * @param {string} topLevelType
         * @param {(number|string)} node
         * @param {Error} topLevelTargetID
         * @param {Event} nativeEvent
         * @return {?}
         */
        extractEvents : function(topLevelType, node, topLevelTargetID, nativeEvent) {
          if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
            return null;
          }
          if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
            return null;
          }
          var target;
          if (node.window === node) {
            /** @type {(number|string)} */
            target = node;
          } else {
            var doc = node.ownerDocument;
            target = doc ? doc.defaultView || doc.parentWindow : window;
          }
          var el;
          var elem;
          if (topLevelType === topLevelTypes.topMouseOut ? (el = node, elem = cl(nativeEvent.relatedTarget || nativeEvent.toElement) || target) : (el = target, elem = node), el === elem) {
            return null;
          }
          var fromID = el ? c.getID(el) : "";
          var toID = elem ? c.getID(elem) : "";
          var event = SyntheticMouseEvent.getPooled($scope.mouseLeave, fromID, nativeEvent);
          /** @type {string} */
          event.type = "mouseleave";
          event.target = el;
          event.relatedTarget = elem;
          var evt = SyntheticMouseEvent.getPooled($scope.mouseEnter, toID, nativeEvent);
          return evt.type = "mouseenter", evt.target = elem, evt.relatedTarget = el, api.accumulateEnterLeaveDispatches(event, evt, fromID, toID), events[0] = event, events[1] = evt, events;
        }
      };
      module.exports = JsDiff;
    }, {
      "./EventConstants" : 17,
      "./EventPropagators" : 22,
      "./ReactMount" : 70,
      "./SyntheticMouseEvent" : 103,
      "./keyOf" : 147
    }],
    17 : [function($sanitize, module, dataAndEvents) {
      var throttledUpdate = $sanitize("./keyMirror");
      var PropagationPhases = throttledUpdate({
        bubbled : null,
        captured : null
      });
      var topLevelTypes = throttledUpdate({
        topBlur : null,
        topChange : null,
        topClick : null,
        topCompositionEnd : null,
        topCompositionStart : null,
        topCompositionUpdate : null,
        topContextMenu : null,
        topCopy : null,
        topCut : null,
        topDoubleClick : null,
        topDrag : null,
        topDragEnd : null,
        topDragEnter : null,
        topDragExit : null,
        topDragLeave : null,
        topDragOver : null,
        topDragStart : null,
        topDrop : null,
        topError : null,
        topFocus : null,
        topInput : null,
        topKeyDown : null,
        topKeyPress : null,
        topKeyUp : null,
        topLoad : null,
        topMouseDown : null,
        topMouseMove : null,
        topMouseOut : null,
        topMouseOver : null,
        topMouseUp : null,
        topPaste : null,
        topReset : null,
        topScroll : null,
        topSelectionChange : null,
        topSubmit : null,
        topTextInput : null,
        topTouchCancel : null,
        topTouchEnd : null,
        topTouchMove : null,
        topTouchStart : null,
        topWheel : null
      });
      var JsDiff = {
        topLevelTypes : topLevelTypes,
        PropagationPhases : PropagationPhases
      };
      module.exports = JsDiff;
    }, {
      "./keyMirror" : 146
    }],
    18 : [function(format, module, dataAndEvents) {
      var f = format("./emptyFunction");
      var obj = {
        /**
         * @param {Object} elem
         * @param {string} type
         * @param {Object} pdataOld
         * @return {?}
         */
        listen : function(elem, type, pdataOld) {
          return elem.addEventListener ? (elem.addEventListener(type, pdataOld, false), {
            /**
             * @return {undefined}
             */
            remove : function() {
              elem.removeEventListener(type, pdataOld, false);
            }
          }) : elem.attachEvent ? (elem.attachEvent("on" + type, pdataOld), {
            /**
             * @return {undefined}
             */
            remove : function() {
              elem.detachEvent("on" + type, pdataOld);
            }
          }) : void 0;
        },
        /**
         * @param {HTMLElement} element
         * @param {string} event
         * @param {string} action
         * @return {?}
         */
        capture : function(element, event, action) {
          return element.addEventListener ? (element.addEventListener(event, action, true), {
            /**
             * @return {undefined}
             */
            remove : function() {
              element.removeEventListener(event, action, true);
            }
          }) : (console.error("Attempted to listen to events during the capture phase on a browser that does not support the capture phase. Your application will not receive some events."), {
            remove : f
          });
        },
        /**
         * @return {undefined}
         */
        registerDefault : function() {
        }
      };
      module.exports = obj;
    }, {
      "./emptyFunction" : 121
    }],
    19 : [function(require, module, dataAndEvents) {
      /**
       * @return {undefined}
       */
      function parseError() {
        /** @type {boolean} */
        var a = !fragment || (!fragment.traverseTwoPhase || !fragment.traverseEnterLeave);
        if (a) {
          throw new Error("InstanceHandle not injected before use!");
        }
      }
      var EventPluginRegistry = require("./EventPluginRegistry");
      var EventPluginUtils = require("./EventPluginUtils");
      var callback = require("./accumulateInto");
      var indexOf = require("./forEachAccumulated");
      var forOwn = require("./invariant");
      var map = {};
      /** @type {null} */
      var basis = null;
      /**
       * @param {Object} event
       * @return {undefined}
       */
      var next = function(event) {
        if (event) {
          var executeDispatch = EventPluginUtils.executeDispatch;
          var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
          if (PluginModule) {
            if (PluginModule.executeDispatch) {
              executeDispatch = PluginModule.executeDispatch;
            }
          }
          EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);
          if (!event.isPersistent()) {
            event.constructor.release(event);
          }
        }
      };
      /** @type {null} */
      var fragment = null;
      var JsDiff = {
        injection : {
          injectMount : EventPluginUtils.injection.injectMount,
          /**
           * @param {?} first
           * @return {undefined}
           */
          injectInstanceHandle : function(first) {
            fragment = first;
            parseError();
          },
          /**
           * @return {?}
           */
          getInstanceHandle : function() {
            return parseError(), fragment;
          },
          injectEventPluginOrder : EventPluginRegistry.injectEventPluginOrder,
          injectEventPluginsByName : EventPluginRegistry.injectEventPluginsByName
        },
        eventNameDispatchConfigs : EventPluginRegistry.eventNameDispatchConfigs,
        registrationNameModules : EventPluginRegistry.registrationNameModules,
        /**
         * @param {?} id
         * @param {?} target
         * @param {?} listener
         * @return {undefined}
         */
        putListener : function(id, target, listener) {
          forOwn(!listener || "function" == typeof listener, "Expected %s listener to be a function, instead got type %s", target, typeof listener);
          var listeners = map[target] || (map[target] = {});
          listeners[id] = listener;
        },
        /**
         * @param {?} id
         * @param {?} elt
         * @return {?}
         */
        getListener : function(id, elt) {
          var item = map[elt];
          return item && item[id];
        },
        /**
         * @param {?} id
         * @param {?} name
         * @return {undefined}
         */
        deleteListener : function(id, name) {
          var old = map[name];
          if (old) {
            delete old[id];
          }
        },
        /**
         * @param {?} id
         * @return {undefined}
         */
        deleteAllListeners : function(id) {
          var letter;
          for (letter in map) {
            delete map[letter][id];
          }
        },
        /**
         * @param {string} topLevelType
         * @param {string} topLevelTarget
         * @param {Error} topLevelTargetID
         * @param {Event} nativeEvent
         * @return {?}
         */
        extractEvents : function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {
          var basis;
          var plugins = EventPluginRegistry.plugins;
          /** @type {number} */
          var i = 0;
          var len = plugins.length;
          for (;len > i;i++) {
            var possiblePlugin = plugins[i];
            if (possiblePlugin) {
              var events = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent);
              if (events) {
                basis = callback(basis, events);
              }
            }
          }
          return basis;
        },
        /**
         * @param {?} events
         * @return {undefined}
         */
        enqueueEvents : function(events) {
          if (events) {
            basis = callback(basis, events);
          }
        },
        /**
         * @return {undefined}
         */
        processEventQueue : function() {
          var dontCloseTags = basis;
          /** @type {null} */
          basis = null;
          indexOf(dontCloseTags, next);
          forOwn(!basis, "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
        },
        /**
         * @return {undefined}
         */
        __purge : function() {
          map = {};
        },
        /**
         * @return {?}
         */
        __getListenerBank : function() {
          return map;
        }
      };
      module.exports = JsDiff;
    }, {
      "./EventPluginRegistry" : 20,
      "./EventPluginUtils" : 21,
      "./accumulateInto" : 109,
      "./forEachAccumulated" : 126,
      "./invariant" : 140
    }],
    20 : [function($sanitize, module, dataAndEvents) {
      /**
       * @return {undefined}
       */
      function addPlugin() {
        if (ret) {
          var key;
          for (key in object) {
            var value = object[key];
            var name = ret.indexOf(key);
            if ($(name > -1, "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.", key), !api.plugins[name]) {
              $(value.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.", key);
              api.plugins[name] = value;
              var types = value.eventTypes;
              var type;
              for (type in types) {
                $(invoke(types[type], value, type), "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", type, key);
              }
            }
          }
        }
      }
      /**
       * @param {Object} func
       * @param {?} fn
       * @param {string} name
       * @return {?}
       */
      function invoke(func, fn, name) {
        $(!api.eventNameDispatchConfigs.hasOwnProperty(name), "EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.", name);
        /** @type {Object} */
        api.eventNameDispatchConfigs[name] = func;
        var constants = func.phasedRegistrationNames;
        if (constants) {
          var constant;
          for (constant in constants) {
            if (constants.hasOwnProperty(constant)) {
              var xdomain = constants[constant];
              request(xdomain, fn, name);
            }
          }
          return true;
        }
        return func.registrationName ? (request(func.registrationName, fn, name), true) : false;
      }
      /**
       * @param {?} method
       * @param {?} route
       * @param {string} name
       * @return {undefined}
       */
      function request(method, route, name) {
        $(!api.registrationNameModules[method], "EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.", method);
        api.registrationNameModules[method] = route;
        api.registrationNameDependencies[method] = route.eventTypes[name].dependencies;
      }
      var $ = $sanitize("./invariant");
      /** @type {null} */
      var ret = null;
      var object = {};
      var api = {
        plugins : [],
        eventNameDispatchConfigs : {},
        registrationNameModules : {},
        registrationNameDependencies : {},
        /**
         * @param {?} elems
         * @return {undefined}
         */
        injectEventPluginOrder : function(elems) {
          $(!ret, "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
          /** @type {Array.<?>} */
          ret = Array.prototype.slice.call(elems);
          addPlugin();
        },
        /**
         * @param {Object} methods
         * @return {undefined}
         */
        injectEventPluginsByName : function(methods) {
          /** @type {boolean} */
          var b = false;
          var property;
          for (property in methods) {
            if (methods.hasOwnProperty(property)) {
              var value = methods[property];
              if (!(object.hasOwnProperty(property) && object[property] === value)) {
                $(!object[property], "EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.", property);
                object[property] = value;
                /** @type {boolean} */
                b = true;
              }
            }
          }
          if (b) {
            addPlugin();
          }
        },
        /**
         * @param {Object} event
         * @return {?}
         */
        getPluginModuleForEvent : function(event) {
          var dispatchConfig = event.dispatchConfig;
          if (dispatchConfig.registrationName) {
            return api.registrationNameModules[dispatchConfig.registrationName] || null;
          }
          var phase;
          for (phase in dispatchConfig.phasedRegistrationNames) {
            if (dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
              var PluginModule = api.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
              if (PluginModule) {
                return PluginModule;
              }
            }
          }
          return null;
        },
        /**
         * @return {undefined}
         */
        _resetEventPlugins : function() {
          /** @type {null} */
          ret = null;
          var property;
          for (property in object) {
            if (object.hasOwnProperty(property)) {
              delete object[property];
            }
          }
          /** @type {number} */
          api.plugins.length = 0;
          var cache = api.eventNameDispatchConfigs;
          var id;
          for (id in cache) {
            if (cache.hasOwnProperty(id)) {
              delete cache[id];
            }
          }
          var files = api.registrationNameModules;
          var fileName;
          for (fileName in files) {
            if (files.hasOwnProperty(fileName)) {
              delete files[fileName];
            }
          }
        }
      };
      module.exports = api;
    }, {
      "./invariant" : 140
    }],
    21 : [function(extend, module, dataAndEvents) {
      /**
       * @param {?} topLevelType
       * @return {?}
       */
      function isEndish(topLevelType) {
        return topLevelType === topLevelTypes.topMouseUp || (topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel);
      }
      /**
       * @param {?} topLevelType
       * @return {?}
       */
      function isMoveish(topLevelType) {
        return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
      }
      /**
       * @param {?} topLevelType
       * @return {?}
       */
      function isStartish(topLevelType) {
        return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
      }
      /**
       * @param {string} event
       * @param {?} callback
       * @return {undefined}
       */
      function s(event, callback) {
        var names = event._dispatchListeners;
        var obj = event._dispatchIDs;
        if (fail(event), Array.isArray(names)) {
          /** @type {number} */
          var i = 0;
          for (;i < names.length && !event.isPropagationStopped();i++) {
            callback(event, names[i], obj[i]);
          }
        } else {
          if (names) {
            callback(event, names, obj);
          }
        }
      }
      /**
       * @param {Object} result
       * @param {?} callback
       * @param {?} event
       * @return {?}
       */
      function success(result, callback, event) {
        result.currentTarget = me.Mount.getNode(event);
        var ret = callback(result, event);
        return result.currentTarget = null, ret;
      }
      /**
       * @param {string} event
       * @param {?} a
       * @return {undefined}
       */
      function e(event, a) {
        s(event, a);
        /** @type {null} */
        event._dispatchListeners = null;
        /** @type {null} */
        event._dispatchIDs = null;
      }
      /**
       * @param {string} event
       * @return {?}
       */
      function ok(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchIDs = event._dispatchIDs;
        if (fail(event), Array.isArray(dispatchListeners)) {
          /** @type {number} */
          var i = 0;
          for (;i < dispatchListeners.length && !event.isPropagationStopped();i++) {
            if (dispatchListeners[i](event, dispatchIDs[i])) {
              return dispatchIDs[i];
            }
          }
        } else {
          if (dispatchListeners && dispatchListeners(event, dispatchIDs)) {
            return dispatchIDs;
          }
        }
        return null;
      }
      /**
       * @param {string} event
       * @return {?}
       */
      function f3(event) {
        var events = ok(event);
        return event._dispatchIDs = null, event._dispatchListeners = null, events;
      }
      /**
       * @param {?} event
       * @return {?}
       */
      function next(event) {
        fail(event);
        var match = event._dispatchListeners;
        var message = event._dispatchIDs;
        close(!Array.isArray(match), "executeDirectDispatch(...): Invalid `event`.");
        var count = match ? match(event, message) : null;
        return event._dispatchListeners = null, event._dispatchIDs = null, count;
      }
      /**
       * @param {?} event
       * @return {?}
       */
      function f2(event) {
        return!!event._dispatchListeners;
      }
      var fail;
      var oldconfig = extend("./EventConstants");
      var close = extend("./invariant");
      var me = {
        Mount : null,
        /**
         * @param {Function} b
         * @return {undefined}
         */
        injectMount : function(b) {
          /** @type {Function} */
          me.Mount = b;
          close(b && b.getNode, "EventPluginUtils.injection.injectMount(...): Injected Mount module is missing getNode.");
        }
      };
      var topLevelTypes = oldconfig.topLevelTypes;
      /**
       * @param {?} event
       * @return {undefined}
       */
      fail = function(event) {
        var header = event._dispatchListeners;
        var names = event._dispatchIDs;
        /** @type {boolean} */
        var object = Array.isArray(header);
        /** @type {boolean} */
        var a = Array.isArray(names);
        var b = a ? names.length : names ? 1 : 0;
        var type = object ? header.length : header ? 1 : 0;
        close(a === object && b === type, "EventPluginUtils: Invalid `event`.");
      };
      var JsDiff = {
        /** @type {function (?): ?} */
        isEndish : isEndish,
        /** @type {function (?): ?} */
        isMoveish : isMoveish,
        /** @type {function (?): ?} */
        isStartish : isStartish,
        /** @type {function (?): ?} */
        executeDirectDispatch : next,
        /** @type {function (Object, ?, ?): ?} */
        executeDispatch : success,
        /** @type {function (string, ?): undefined} */
        executeDispatchesInOrder : e,
        /** @type {function (string): ?} */
        executeDispatchesInOrderStopAtTrue : f3,
        /** @type {function (?): ?} */
        hasDispatches : f2,
        injection : me,
        useTouchEvents : false
      };
      module.exports = JsDiff;
    }, {
      "./EventConstants" : 17,
      "./invariant" : 140
    }],
    22 : [function(require, module, dataAndEvents) {
      /**
       * @param {?} id
       * @param {Object} event
       * @param {?} propagationPhase
       * @return {?}
       */
      function listenerAtPhase(id, event, propagationPhase) {
        var lowerTagName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
        return indexOf(id, lowerTagName);
      }
      /**
       * @param {?} id
       * @param {?} upwards
       * @param {Object} event
       * @return {undefined}
       */
      function cancel(id, upwards, event) {
        if (!id) {
          throw new Error("Dispatching id must not be null");
        }
        var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
        var listener = listenerAtPhase(id, event, phase);
        if (listener) {
          event._dispatchListeners = accumulate(event._dispatchListeners, listener);
          event._dispatchIDs = accumulate(event._dispatchIDs, id);
        }
      }
      /**
       * @param {Object} event
       * @return {undefined}
       */
      function f3(event) {
        if (event) {
          if (event.dispatchConfig.phasedRegistrationNames) {
            nodes.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, cancel, event);
          }
        }
      }
      /**
       * @param {?} id
       * @param {Array} async
       * @param {Object} event
       * @return {undefined}
       */
      function test(id, async, event) {
        if (event && event.dispatchConfig.registrationName) {
          var lowerTagName = event.dispatchConfig.registrationName;
          var listener = indexOf(id, lowerTagName);
          if (listener) {
            event._dispatchListeners = accumulate(event._dispatchListeners, listener);
            event._dispatchIDs = accumulate(event._dispatchIDs, id);
          }
        }
      }
      /**
       * @param {Object} event
       * @return {undefined}
       */
      function fix(event) {
        if (event) {
          if (event.dispatchConfig.registrationName) {
            test(event.dispatchMarker, null, event);
          }
        }
      }
      /**
       * @param {?} d
       * @return {undefined}
       */
      function val(d) {
        jQuery(d, f3);
      }
      /**
       * @param {?} value
       * @param {?} arg
       * @param {string} classProps
       * @param {string} protoProps
       * @return {undefined}
       */
      function extend(value, arg, classProps, protoProps) {
        nodes.injection.getInstanceHandle().traverseEnterLeave(classProps, protoProps, test, value, arg);
      }
      /**
       * @param {?} sel
       * @return {undefined}
       */
      function fn(sel) {
        jQuery(sel, fix);
      }
      var Block = require("./EventConstants");
      var nodes = require("./EventPluginHub");
      var accumulate = require("./accumulateInto");
      var jQuery = require("./forEachAccumulated");
      var PropagationPhases = Block.PropagationPhases;
      var indexOf = nodes.getListener;
      var JsDiff = {
        /** @type {function (?): undefined} */
        accumulateTwoPhaseDispatches : val,
        /** @type {function (?): undefined} */
        accumulateDirectDispatches : fn,
        /** @type {function (?, ?, string, string): undefined} */
        accumulateEnterLeaveDispatches : extend
      };
      module.exports = JsDiff;
    }, {
      "./EventConstants" : 17,
      "./EventPluginHub" : 19,
      "./accumulateInto" : 109,
      "./forEachAccumulated" : 126
    }],
    23 : [function(dataAndEvents, module, deepDataAndEvents) {
      /** @type {boolean} */
      var canUseEventListeners = !("undefined" == typeof window || (!window.document || !window.document.createElement));
      var JsDiff = {
        canUseDOM : canUseEventListeners,
        canUseWorkers : "undefined" != typeof Worker,
        canUseEventListeners : canUseEventListeners && !(!window.addEventListener && !window.attachEvent),
        canUseViewport : canUseEventListeners && !!window.screen,
        isInWorker : !canUseEventListeners
      };
      module.exports = JsDiff;
    }, {}],
    24 : [function(require, module, dataAndEvents) {
      var raw;
      var nodes = require("./DOMProperty");
      var Block = require("./ExecutionEnvironment");
      var value = nodes.injection.MUST_USE_ATTRIBUTE;
      var gid = nodes.injection.MUST_USE_PROPERTY;
      var defer = nodes.injection.HAS_BOOLEAN_VALUE;
      var flags = nodes.injection.HAS_SIDE_EFFECTS;
      var minIdx = nodes.injection.HAS_NUMERIC_VALUE;
      var span = nodes.injection.HAS_POSITIVE_NUMERIC_VALUE;
      var download = nodes.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
      if (Block.canUseDOM) {
        /** @type {(DOMImplementation|null)} */
        var implementation = document.implementation;
        /** @type {(boolean|null)} */
        raw = implementation && (implementation.hasFeature && implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1"));
      }
      var JsDiff = {
        isCustomAttribute : RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
        Properties : {
          accept : null,
          acceptCharset : null,
          accessKey : null,
          action : null,
          allowFullScreen : value | defer,
          allowTransparency : value,
          alt : null,
          async : defer,
          autoComplete : null,
          autoPlay : defer,
          cellPadding : null,
          cellSpacing : null,
          charSet : value,
          checked : gid | defer,
          classID : value,
          className : raw ? value : gid,
          cols : value | span,
          colSpan : null,
          content : null,
          contentEditable : null,
          contextMenu : value,
          controls : gid | defer,
          coords : null,
          crossOrigin : null,
          data : null,
          dateTime : value,
          defer : defer,
          dir : null,
          disabled : value | defer,
          download : download,
          draggable : null,
          encType : null,
          form : value,
          formAction : value,
          formEncType : value,
          formMethod : value,
          formNoValidate : defer,
          formTarget : value,
          frameBorder : value,
          height : value,
          hidden : value | defer,
          href : null,
          hrefLang : null,
          htmlFor : null,
          httpEquiv : null,
          icon : null,
          id : gid,
          label : null,
          lang : null,
          list : value,
          loop : gid | defer,
          manifest : value,
          marginHeight : null,
          marginWidth : null,
          max : null,
          maxLength : value,
          media : value,
          mediaGroup : null,
          method : null,
          min : null,
          multiple : gid | defer,
          muted : gid | defer,
          name : null,
          noValidate : defer,
          open : null,
          pattern : null,
          placeholder : null,
          poster : null,
          preload : null,
          radioGroup : null,
          readOnly : gid | defer,
          rel : null,
          required : defer,
          role : value,
          rows : value | span,
          rowSpan : null,
          sandbox : null,
          scope : null,
          scrolling : null,
          seamless : value | defer,
          selected : gid | defer,
          shape : null,
          size : value | span,
          sizes : value,
          span : span,
          spellCheck : null,
          src : null,
          srcDoc : gid,
          srcSet : value,
          start : minIdx,
          step : null,
          style : null,
          tabIndex : null,
          target : null,
          title : null,
          type : null,
          useMap : null,
          value : gid | flags,
          width : value,
          wmode : value,
          autoCapitalize : null,
          autoCorrect : null,
          itemProp : value,
          itemScope : value | defer,
          itemType : value,
          property : null
        },
        DOMAttributeNames : {
          acceptCharset : "accept-charset",
          className : "class",
          htmlFor : "for",
          httpEquiv : "http-equiv"
        },
        DOMPropertyNames : {
          autoCapitalize : "autocapitalize",
          autoComplete : "autocomplete",
          autoCorrect : "autocorrect",
          autoFocus : "autofocus",
          autoPlay : "autoplay",
          encType : "enctype",
          hrefLang : "hreflang",
          radioGroup : "radiogroup",
          spellCheck : "spellcheck",
          srcDoc : "srcdoc",
          srcSet : "srcset"
        }
      };
      module.exports = JsDiff;
    }, {
      "./DOMProperty" : 12,
      "./ExecutionEnvironment" : 23
    }],
    25 : [function(require, module, dataAndEvents) {
      var ReactLink = require("./ReactLink");
      var Hash = require("./ReactStateSetters");
      var JsDiff = {
        /**
         * @param {string} key
         * @return {?}
         */
        linkState : function(key) {
          return new ReactLink(this.state[key], Hash.createStateKeySetter(this, key));
        }
      };
      module.exports = JsDiff;
    }, {
      "./ReactLink" : 68,
      "./ReactStateSetters" : 85
    }],
    26 : [function(require, module, dataAndEvents) {
      /**
       * @param {?} obj
       * @return {undefined}
       */
      function set(obj) {
        hasOwnProperty(null == obj.props.checkedLink || null == obj.props.valueLink, "Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don't want to use valueLink and vice versa.");
      }
      /**
       * @param {?} obj
       * @return {undefined}
       */
      function getter(obj) {
        set(obj);
        hasOwnProperty(null == obj.props.value && null == obj.props.onChange, "Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don't want to use valueLink.");
      }
      /**
       * @param {?} self
       * @return {undefined}
       */
      function get(self) {
        set(self);
        hasOwnProperty(null == self.props.checked && null == self.props.onChange, "Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don't want to use checkedLink");
      }
      /**
       * @param {Event} css
       * @return {undefined}
       */
      function Tween(css) {
        this.props.valueLink.requestChange(css.target.value);
      }
      /**
       * @param {Event} el
       * @return {undefined}
       */
      function Constructor(el) {
        this.props.checkedLink.requestChange(el.target.checked);
      }
      var helper = require("./ReactPropTypes");
      var hasOwnProperty = require("./invariant");
      var noInputTypes = {
        button : true,
        checkbox : true,
        image : true,
        hidden : true,
        radio : true,
        reset : true,
        submit : true
      };
      var JsDiff = {
        Mixin : {
          propTypes : {
            /**
             * @param {string} name
             * @param {Object} value
             * @param {boolean} type
             * @return {?}
             */
            value : function(name, value, type) {
              return!name[value] || (noInputTypes[name.type] || (name.onChange || (name.readOnly || name.disabled))) ? void 0 : new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            },
            /**
             * @param {string} name
             * @param {Object} value
             * @param {boolean} type
             * @return {?}
             */
            checked : function(name, value, type) {
              return!name[value] || (name.onChange || (name.readOnly || name.disabled)) ? void 0 : new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            },
            onChange : helper.func
          }
        },
        /**
         * @param {?} list
         * @return {?}
         */
        getValue : function(list) {
          return list.props.valueLink ? (getter(list), list.props.valueLink.value) : list.props.value;
        },
        /**
         * @param {?} self
         * @return {?}
         */
        getChecked : function(self) {
          return self.props.checkedLink ? (get(self), self.props.checkedLink.value) : self.props.checked;
        },
        /**
         * @param {?} self
         * @return {?}
         */
        getOnChange : function(self) {
          return self.props.valueLink ? (getter(self), Tween) : self.props.checkedLink ? (get(self), Constructor) : self.props.onChange;
        }
      };
      module.exports = JsDiff;
    }, {
      "./ReactPropTypes" : 79,
      "./invariant" : 140
    }],
    27 : [function(require, module, dataAndEvents) {
      /**
       * @param {Node} n
       * @return {undefined}
       */
      function e(n) {
        n.remove();
      }
      var Token = require("./ReactBrowserEventEmitter");
      var hasOwn = require("./accumulateInto");
      var assert = require("./forEachAccumulated");
      var getActual = require("./invariant");
      var JsDiff = {
        /**
         * @param {?} element
         * @param {string} type
         * @return {undefined}
         */
        trapBubbledEvent : function(element, type) {
          getActual(this.isMounted(), "Must be mounted to trap events");
          var key = Token.trapBubbledEvent(element, type, this.getDOMNode());
          this._localEventListeners = hasOwn(this._localEventListeners, key);
        },
        /**
         * @return {undefined}
         */
        componentWillUnmount : function() {
          if (this._localEventListeners) {
            assert(this._localEventListeners, e);
          }
        }
      };
      module.exports = JsDiff;
    }, {
      "./ReactBrowserEventEmitter" : 33,
      "./accumulateInto" : 109,
      "./forEachAccumulated" : 126,
      "./invariant" : 140
    }],
    28 : [function(require, module, dataAndEvents) {
      var Block = require("./EventConstants");
      var callback = require("./emptyFunction");
      var topLevelTypes = Block.topLevelTypes;
      var JsDiff = {
        eventTypes : null,
        /**
         * @param {string} topLevelType
         * @param {string} topLevelTarget
         * @param {Error} topLevelTargetID
         * @param {Event} nativeEvent
         * @return {undefined}
         */
        extractEvents : function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {
          if (topLevelType === topLevelTypes.topTouchStart) {
            var target = nativeEvent.target;
            if (target) {
              if (!target.onclick) {
                target.onclick = callback;
              }
            }
          }
        }
      };
      module.exports = JsDiff;
    }, {
      "./EventConstants" : 17,
      "./emptyFunction" : 121
    }],
    29 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @return {?}
       */
      function filter(name, value) {
        if (null == name) {
          throw new TypeError("Object.assign target cannot be null or undefined");
        }
        var ret = Object(name);
        /** @type {function (this:Object, *): boolean} */
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        /** @type {number} */
        var j = 1;
        for (;j < arguments.length;j++) {
          var arr = arguments[j];
          if (null != arr) {
            var object = Object(arr);
            var key;
            for (key in object) {
              if (hasOwnProperty.call(object, key)) {
                ret[key] = object[key];
              }
            }
          }
        }
        return ret;
      }
      /** @type {function (string, Object): ?} */
      module.exports = filter;
    }, {}],
    30 : [function(require, module, dataAndEvents) {
      var assert = require("./invariant");
      /**
       * @param {Object} recurring
       * @return {?}
       */
      var map = function(recurring) {
        var Klass = this;
        if (Klass.instancePool.length) {
          var uniqs = Klass.instancePool.pop();
          return Klass.call(uniqs, recurring), uniqs;
        }
        return new Klass(recurring);
      };
      /**
       * @param {Array} a1
       * @param {Array} a2
       * @return {?}
       */
      var isEqual = function(a1, a2) {
        var Klass = this;
        if (Klass.instancePool.length) {
          var particle = Klass.instancePool.pop();
          return Klass.call(particle, a1, a2), particle;
        }
        return new Klass(a1, a2);
      };
      /**
       * @param {Array} a1
       * @param {Array} a2
       * @param {boolean} a3
       * @return {?}
       */
      var implement = function(a1, a2, a3) {
        var Klass = this;
        if (Klass.instancePool.length) {
          var uniqs = Klass.instancePool.pop();
          return Klass.call(uniqs, a1, a2, a3), uniqs;
        }
        return new Klass(a1, a2, a3);
      };
      /**
       * @param {?} a1
       * @param {?} a2
       * @param {?} a3
       * @param {?} a4
       * @param {?} a5
       * @return {?}
       */
      var init = function(a1, a2, a3, a4, a5) {
        var Klass = this;
        if (Klass.instancePool.length) {
          var uniqs = Klass.instancePool.pop();
          return Klass.call(uniqs, a1, a2, a3, a4, a5), uniqs;
        }
        return new Klass(a1, a2, a3, a4, a5);
      };
      /**
       * @param {string} value
       * @return {undefined}
       */
      var ok = function(value) {
        var Klass = this;
        assert(value instanceof Klass, "Trying to release an instance into a pool of a different type.");
        if (value.destructor) {
          value.destructor();
        }
        if (Klass.instancePool.length < Klass.poolSize) {
          Klass.instancePool.push(value);
        }
      };
      /** @type {number} */
      var poolSize = 10;
      /** @type {function (Object): ?} */
      var b = map;
      /**
       * @param {Function} child
       * @param {Function} a
       * @return {?}
       */
      var contains = function(child, a) {
        /** @type {Function} */
        var NewKlass = child;
        return NewKlass.instancePool = [], NewKlass.getPooled = a || b, NewKlass.poolSize || (NewKlass.poolSize = poolSize), NewKlass.release = ok, NewKlass;
      };
      var JsDiff = {
        /** @type {function (Function, Function): ?} */
        addPoolingTo : contains,
        /** @type {function (Object): ?} */
        oneArgumentPooler : map,
        /** @type {function (Array, Array): ?} */
        twoArgumentPooler : isEqual,
        /** @type {function (Array, Array, boolean): ?} */
        threeArgumentPooler : implement,
        /** @type {function (?, ?, ?, ?, ?): ?} */
        fiveArgumentPooler : init
      };
      module.exports = JsDiff;
    }, {
      "./invariant" : 140
    }],
    31 : [function(require, mod, dataAndEvents) {
      var Block = require("./DOMPropertyOperations");
      var ReactMount = require("./EventPluginUtils");
      var nodes = require("./ReactChildren");
      var Component = require("./ReactComponent");
      var BOOT = require("./ReactCompositeComponent");
      var lib = require("./ReactContext");
      var helper = require("./ReactCurrentOwner");
      var options = require("./ReactElement");
      var dom = require("./ReactElementValidator");
      var Dom = require("./ReactDOM");
      var inspect = require("./ReactDOMComponent");
      var css = require("./ReactDefaultInjection");
      var selfClosing = require("./ReactInstanceHandles");
      var _ = require("./ReactLegacyElement");
      var bar = require("./ReactMount");
      var getActual = require("./ReactMultiChild");
      var self = require("./ReactPerf");
      var assert = require("./ReactPropTypes");
      var should = require("./ReactServerRendering");
      var expect = require("./ReactTextComponent");
      var getName = require("./Object.assign");
      var sprintf = require("./deprecated");
      var base64 = require("./onlyChild");
      css.inject();
      var createElement = options.createElement;
      var bc = options.createFactory;
      createElement = dom.createElement;
      bc = dom.createFactory;
      createElement = _.wrapCreateElement(createElement);
      bc = _.wrapCreateFactory(bc);
      var mydiv = self.measure("React", "render", bar.render);
      var exports = {
        Children : {
          map : nodes.map,
          forEach : nodes.forEach,
          count : nodes.count,
          only : base64
        },
        DOM : Dom,
        PropTypes : assert,
        /**
         * @param {?} shouldUseTouch
         * @return {undefined}
         */
        initializeTouchEvents : function(shouldUseTouch) {
          ReactMount.useTouchEvents = shouldUseTouch;
        },
        createClass : BOOT.createClass,
        createElement : createElement,
        createFactory : bc,
        constructAndRenderComponent : bar.constructAndRenderComponent,
        constructAndRenderComponentByID : bar.constructAndRenderComponentByID,
        render : mydiv,
        renderToString : should.renderToString,
        renderToStaticMarkup : should.renderToStaticMarkup,
        unmountComponentAtNode : bar.unmountComponentAtNode,
        isValidClass : _.isValidClass,
        isValidElement : options.isValidElement,
        withContext : lib.withContext,
        __spread : getName,
        renderComponent : sprintf("React", "renderComponent", "render", this, mydiv),
        renderComponentToString : sprintf("React", "renderComponentToString", "renderToString", this, should.renderToString),
        renderComponentToStaticMarkup : sprintf("React", "renderComponentToStaticMarkup", "renderToStaticMarkup", this, should.renderToStaticMarkup),
        isValidComponent : sprintf("React", "isValidComponent", "isValidElement", this, options.isValidElement)
      };
      if ("undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
        if ("function" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject) {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
            Component : Component,
            CurrentOwner : helper,
            DOMComponent : inspect,
            DOMPropertyOperations : Block,
            InstanceHandles : selfClosing,
            Mount : bar,
            MultiChild : getActual,
            TextComponent : expect
          });
        }
      }
      var Attrs = require("./ExecutionEnvironment");
      if (Attrs.canUseDOM && window.top === window.self) {
        if (navigator.userAgent.indexOf("Chrome") > -1) {
          if ("undefined" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
            console.debug("Download the React DevTools for a better development experience: http://fb.me/react-devtools");
          }
        }
        /** @type {Array} */
        var codeSegments = [Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim, Object.create, Object.freeze];
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          if (!codeSegments[i]) {
            console.error("One or more ES5 shim/shams expected by React are not available: http://fb.me/react-warning-polyfills");
            break;
          }
        }
      }
      /** @type {string} */
      exports.version = "0.12.2";
      mod.exports = exports;
    }, {
      "./DOMPropertyOperations" : 13,
      "./EventPluginUtils" : 21,
      "./ExecutionEnvironment" : 23,
      "./Object.assign" : 29,
      "./ReactChildren" : 36,
      "./ReactComponent" : 37,
      "./ReactCompositeComponent" : 40,
      "./ReactContext" : 41,
      "./ReactCurrentOwner" : 42,
      "./ReactDOM" : 43,
      "./ReactDOMComponent" : 45,
      "./ReactDefaultInjection" : 55,
      "./ReactElement" : 58,
      "./ReactElementValidator" : 59,
      "./ReactInstanceHandles" : 66,
      "./ReactLegacyElement" : 67,
      "./ReactMount" : 70,
      "./ReactMultiChild" : 71,
      "./ReactPerf" : 75,
      "./ReactPropTypes" : 79,
      "./ReactServerRendering" : 83,
      "./ReactTextComponent" : 87,
      "./deprecated" : 120,
      "./onlyChild" : 151
    }],
    32 : [function(require, module, dataAndEvents) {
      var Block = require("./ReactEmptyComponent");
      var dom = require("./ReactMount");
      var getActual = require("./invariant");
      var JsDiff = {
        /**
         * @return {?}
         */
        getDOMNode : function() {
          return getActual(this.isMounted(), "getDOMNode(): A component must be mounted to have a DOM node."), Block.isNullComponentID(this._rootNodeID) ? null : dom.getNode(this._rootNodeID);
        }
      };
      module.exports = JsDiff;
    }, {
      "./ReactEmptyComponent" : 60,
      "./ReactMount" : 70,
      "./invariant" : 140
    }],
    33 : [function(h, module, dataAndEvents) {
      /**
       * @param {Object} obj
       * @return {?}
       */
      function hasOwn(obj) {
        return Object.prototype.hasOwnProperty.call(obj, key) || (obj[key] = val++, transposed[obj[key]] = {}), transposed[obj[key]];
      }
      var vdom = h("./EventConstants");
      var hello = h("./EventPluginHub");
      var elem = h("./EventPluginRegistry");
      var tel = h("./ReactEventEmitterMixin");
      var options = h("./ViewportMetrics");
      var node = h("./Object.assign");
      var addHandler = h("./isEventSupported");
      var transposed = {};
      /** @type {boolean} */
      var m = false;
      /** @type {number} */
      var val = 0;
      var keywords = {
        topBlur : "blur",
        topChange : "change",
        topClick : "click",
        topCompositionEnd : "compositionend",
        topCompositionStart : "compositionstart",
        topCompositionUpdate : "compositionupdate",
        topContextMenu : "contextmenu",
        topCopy : "copy",
        topCut : "cut",
        topDoubleClick : "dblclick",
        topDrag : "drag",
        topDragEnd : "dragend",
        topDragEnter : "dragenter",
        topDragExit : "dragexit",
        topDragLeave : "dragleave",
        topDragOver : "dragover",
        topDragStart : "dragstart",
        topDrop : "drop",
        topFocus : "focus",
        topInput : "input",
        topKeyDown : "keydown",
        topKeyPress : "keypress",
        topKeyUp : "keyup",
        topMouseDown : "mousedown",
        topMouseMove : "mousemove",
        topMouseOut : "mouseout",
        topMouseOver : "mouseover",
        topMouseUp : "mouseup",
        topPaste : "paste",
        topScroll : "scroll",
        topSelectionChange : "selectionchange",
        topTextInput : "textInput",
        topTouchCancel : "touchcancel",
        topTouchEnd : "touchend",
        topTouchMove : "touchmove",
        topTouchStart : "touchstart",
        topWheel : "wheel"
      };
      /** @type {string} */
      var key = "_reactListenersID" + String(Math.random()).slice(2);
      var a = node({}, tel, {
        ReactEventListener : null,
        injection : {
          /**
           * @param {?} e
           * @return {undefined}
           */
          injectReactEventListener : function(e) {
            e.setHandleTopLevel(a.handleTopLevel);
            a.ReactEventListener = e;
          }
        },
        /**
         * @param {boolean} enabled
         * @return {undefined}
         */
        setEnabled : function(enabled) {
          if (a.ReactEventListener) {
            a.ReactEventListener.setEnabled(enabled);
          }
        },
        /**
         * @return {?}
         */
        isEnabled : function() {
          return!(!a.ReactEventListener || !a.ReactEventListener.isEnabled());
        },
        /**
         * @param {string} name
         * @param {?} context
         * @return {undefined}
         */
        listenTo : function(name, context) {
          var obj = context;
          var values = hasOwn(obj);
          var set = elem.registrationNameDependencies[name];
          var topLevelTypes = vdom.topLevelTypes;
          /** @type {number} */
          var prop = 0;
          var oldLength = set.length;
          for (;oldLength > prop;prop++) {
            var value = set[prop];
            if (!(values.hasOwnProperty(value) && values[value])) {
              if (value === topLevelTypes.topWheel) {
                if (addHandler("wheel")) {
                  a.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, "wheel", obj);
                } else {
                  if (addHandler("mousewheel")) {
                    a.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, "mousewheel", obj);
                  } else {
                    a.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, "DOMMouseScroll", obj);
                  }
                }
              } else {
                if (value === topLevelTypes.topScroll) {
                  if (addHandler("scroll", true)) {
                    a.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, "scroll", obj);
                  } else {
                    a.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, "scroll", a.ReactEventListener.WINDOW_HANDLE);
                  }
                } else {
                  if (value === topLevelTypes.topFocus || value === topLevelTypes.topBlur) {
                    if (addHandler("focus", true)) {
                      a.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, "focus", obj);
                      a.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, "blur", obj);
                    } else {
                      if (addHandler("focusin")) {
                        a.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, "focusin", obj);
                        a.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, "focusout", obj);
                      }
                    }
                    /** @type {boolean} */
                    values[topLevelTypes.topBlur] = true;
                    /** @type {boolean} */
                    values[topLevelTypes.topFocus] = true;
                  } else {
                    if (keywords.hasOwnProperty(value)) {
                      a.ReactEventListener.trapBubbledEvent(value, keywords[value], obj);
                    }
                  }
                }
              }
              /** @type {boolean} */
              values[value] = true;
            }
          }
        },
        /**
         * @param {?} element
         * @param {string} type
         * @param {?} until
         * @return {?}
         */
        trapBubbledEvent : function(element, type, until) {
          return a.ReactEventListener.trapBubbledEvent(element, type, until);
        },
        /**
         * @param {Object} deepDataAndEvents
         * @param {string} func
         * @param {?} until
         * @return {?}
         */
        trapCapturedEvent : function(deepDataAndEvents, func, until) {
          return a.ReactEventListener.trapCapturedEvent(deepDataAndEvents, func, until);
        },
        /**
         * @return {undefined}
         */
        ensureScrollValueMonitoring : function() {
          if (!m) {
            var which = options.refreshScrollValues;
            a.ReactEventListener.monitorScrollValue(which);
            /** @type {boolean} */
            m = true;
          }
        },
        eventNameDispatchConfigs : hello.eventNameDispatchConfigs,
        registrationNameModules : hello.registrationNameModules,
        putListener : hello.putListener,
        getListener : hello.getListener,
        deleteListener : hello.deleteListener,
        deleteAllListeners : hello.deleteAllListeners
      });
      module.exports = a;
    }, {
      "./EventConstants" : 17,
      "./EventPluginHub" : 19,
      "./EventPluginRegistry" : 20,
      "./Object.assign" : 29,
      "./ReactEventEmitterMixin" : 62,
      "./ViewportMetrics" : 108,
      "./isEventSupported" : 141
    }],
    34 : [function($, module, dataAndEvents) {
      var self = $("./React");
      var tmpl = $("./Object.assign");
      var templateFunc = self.createFactory($("./ReactTransitionGroup"));
      var add = self.createFactory($("./ReactCSSTransitionGroupChild"));
      var JsDiff = self.createClass({
        displayName : "ReactCSSTransitionGroup",
        propTypes : {
          transitionName : self.PropTypes.string.isRequired,
          transitionEnter : self.PropTypes.bool,
          transitionLeave : self.PropTypes.bool
        },
        /**
         * @return {?}
         */
        getDefaultProps : function() {
          return{
            transitionEnter : true,
            transitionLeave : true
          };
        },
        /**
         * @param {Function} event
         * @return {?}
         */
        _wrapChild : function(event) {
          return add({
            name : this.props.transitionName,
            enter : this.props.transitionEnter,
            leave : this.props.transitionLeave
          }, event);
        },
        /**
         * @return {?}
         */
        render : function() {
          return templateFunc(tmpl({}, this.props, {
            childFactory : this._wrapChild
          }));
        }
      });
      module.exports = JsDiff;
    }, {
      "./Object.assign" : 29,
      "./React" : 31,
      "./ReactCSSTransitionGroupChild" : 35,
      "./ReactTransitionGroup" : 90
    }],
    35 : [function(createElement, module, dataAndEvents) {
      var o = createElement("./React");
      var span = createElement("./CSSCore");
      var elm = createElement("./ReactTransitionEvents");
      var fn = createElement("./onlyChild");
      /** @type {number} */
      var _nextPaint = 17;
      /** @type {number} */
      var POLL_INTERVAL = 5E3;
      /** @type {null} */
      var done = null;
      /**
       * @return {undefined}
       */
      done = function() {
        console.warn("transition(): tried to perform an animation without an animationend or transitionend event after timeout (" + POLL_INTERVAL + "ms). You should either disable this transition in JS or add a CSS animation/transition.");
      };
      var JsDiff = o.createClass({
        displayName : "ReactCSSTransitionGroupChild",
        /**
         * @param {string} animationType
         * @param {?} callback
         * @return {undefined}
         */
        transition : function(animationType, callback) {
          var node = this.getDOMNode();
          /** @type {string} */
          var className = this.props.name + "-" + animationType;
          /** @type {string} */
          var activeClassName = className + "-active";
          /** @type {null} */
          var timer = null;
          /**
           * @param {Object} e
           * @return {undefined}
           */
          var endListener = function(e) {
            if (!(e && e.target !== node)) {
              clearTimeout(timer);
              span.removeClass(node, className);
              span.removeClass(node, activeClassName);
              elm.removeEndEventListener(node, endListener);
              if (callback) {
                callback();
              }
            }
          };
          elm.addEndEventListener(node, endListener);
          span.addClass(node, className);
          this.queueClass(activeClassName);
          /** @type {number} */
          timer = setTimeout(done, POLL_INTERVAL);
        },
        /**
         * @param {string} className
         * @return {undefined}
         */
        queueClass : function(className) {
          this.classNameQueue.push(className);
          if (!this.timeout) {
            /** @type {number} */
            this.timeout = setTimeout(this.flushClassNameQueue, _nextPaint);
          }
        },
        /**
         * @return {undefined}
         */
        flushClassNameQueue : function() {
          if (this.isMounted()) {
            this.classNameQueue.forEach(span.addClass.bind(span, this.getDOMNode()));
          }
          /** @type {number} */
          this.classNameQueue.length = 0;
          /** @type {null} */
          this.timeout = null;
        },
        /**
         * @return {undefined}
         */
        componentWillMount : function() {
          /** @type {Array} */
          this.classNameQueue = [];
        },
        /**
         * @return {undefined}
         */
        componentWillUnmount : function() {
          if (this.timeout) {
            clearTimeout(this.timeout);
          }
        },
        /**
         * @param {?} callback
         * @return {undefined}
         */
        componentWillEnter : function(callback) {
          if (this.props.enter) {
            this.transition("enter", callback);
          } else {
            callback();
          }
        },
        /**
         * @param {?} callback
         * @return {undefined}
         */
        componentWillLeave : function(callback) {
          if (this.props.leave) {
            this.transition("leave", callback);
          } else {
            callback();
          }
        },
        /**
         * @return {?}
         */
        render : function() {
          return fn(this.props.children);
        }
      });
      module.exports = JsDiff;
    }, {
      "./CSSCore" : 4,
      "./React" : 31,
      "./ReactTransitionEvents" : 89,
      "./onlyChild" : 151
    }],
    36 : [function(require, module, dataAndEvents) {
      /**
       * @param {Function} var_args
       * @param {?} parent
       * @return {undefined}
       */
      function Class(var_args, parent) {
        /** @type {Function} */
        this.forEachFunction = var_args;
        this.forEachContext = parent;
      }
      /**
       * @param {?} obj
       * @param {?} a
       * @param {?} showHidden
       * @param {?} selection
       * @return {undefined}
       */
      function i(obj, a, showHidden, selection) {
        var forEachBookKeeping = obj;
        forEachBookKeeping.forEachFunction.call(forEachBookKeeping.forEachContext, a, selection);
      }
      /**
       * @param {Function} obj
       * @param {Function} object
       * @param {Function} key
       * @return {?}
       */
      function forEach(obj, object, key) {
        if (null == obj) {
          return obj;
        }
        var value = Class.getPooled(object, key);
        func(obj, i, value);
        Class.release(value);
      }
      /**
       * @param {?} mapResult
       * @param {Function} mapFunction
       * @param {?} mapContext
       * @return {undefined}
       */
      function self(mapResult, mapFunction, mapContext) {
        this.mapResult = mapResult;
        /** @type {Function} */
        this.mapFunction = mapFunction;
        this.mapContext = mapContext;
      }
      /**
       * @param {?} o
       * @param {?} val
       * @param {?} name
       * @param {?} v
       * @return {undefined}
       */
      function isArray(o, val, name, v) {
        var mapBookKeeping = o;
        var mapResult = mapBookKeeping.mapResult;
        /** @type {boolean} */
        var dontCloseTags = !mapResult.hasOwnProperty(name);
        if (indexOf(dontCloseTags, "ReactChildren.map(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.", name), dontCloseTags) {
          var ret = mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, val, v);
          mapResult[name] = ret;
        }
      }
      /**
       * @param {Function} elems
       * @param {Function} callback
       * @param {string} arg
       * @return {?}
       */
      function map(elems, callback, arg) {
        if (null == elems) {
          return elems;
        }
        var recurring = {};
        var value = self.getPooled(recurring, callback, arg);
        return func(elems, isArray, value), self.release(value), recurring;
      }
      /**
       * @param {?} x
       * @param {?} val
       * @param {?} accessor
       * @param {?} secret
       * @return {?}
       */
      function sign(x, val, accessor, secret) {
        return null;
      }
      /**
       * @param {?} name
       * @param {?} failing_message
       * @return {?}
       */
      function report(name, failing_message) {
        return func(name, sign, null);
      }
      var util = require("./PooledClass");
      var func = require("./traverseAllChildren");
      var indexOf = require("./warning");
      var merge = util.twoArgumentPooler;
      var string = util.threeArgumentPooler;
      util.addPoolingTo(Class, merge);
      util.addPoolingTo(self, string);
      var _ = {
        /** @type {function (Function, Function, Function): ?} */
        forEach : forEach,
        /** @type {function (Function, Function, string): ?} */
        map : map,
        /** @type {function (?, ?): ?} */
        count : report
      };
      module.exports = _;
    }, {
      "./PooledClass" : 30,
      "./traverseAllChildren" : 158,
      "./warning" : 160
    }],
    37 : [function(require, module, dataAndEvents) {
      var utils = require("./ReactElement");
      var t = require("./ReactOwner");
      var target = require("./ReactUpdates");
      var extendObject = require("./Object.assign");
      var assert = require("./invariant");
      var getActual = require("./keyMirror");
      var actual = getActual({
        MOUNTED : null,
        UNMOUNTED : null
      });
      /** @type {boolean} */
      var err = false;
      /** @type {null} */
      var i18n = null;
      /** @type {null} */
      var length = null;
      var parse = {
        injection : {
          /**
           * @param {?} object
           * @return {undefined}
           */
          injectEnvironment : function(object) {
            assert(!err, "ReactComponent: injectEnvironment() can only be called once.");
            length = object.mountImageIntoNode;
            i18n = object.unmountIDFromEnvironment;
            parse.BackendIDOperations = object.BackendIDOperations;
            /** @type {boolean} */
            err = true;
          }
        },
        LifeCycle : actual,
        BackendIDOperations : null,
        Mixin : {
          /**
           * @return {?}
           */
          isMounted : function() {
            return this._lifeCycleState === actual.MOUNTED;
          },
          /**
           * @param {?} dur
           * @param {string} callback
           * @return {undefined}
           */
          setProps : function(dur, callback) {
            var plugin = this._pendingElement || this._currentElement;
            this.replaceProps(extendObject({}, plugin.props, dur), callback);
          },
          /**
           * @param {Function} props
           * @param {string} callback
           * @return {undefined}
           */
          replaceProps : function(props, callback) {
            assert(this.isMounted(), "replaceProps(...): Can only update a mounted component.");
            assert(0 === this._mountDepth, "replaceProps(...): You called `setProps` or `replaceProps` on a component with a parent. This is an anti-pattern since props will get reactively updated when rendered. Instead, change the owner's `render` method to pass the correct value as props to the component where it is created.");
            this._pendingElement = utils.cloneAndReplaceProps(this._pendingElement || this._currentElement, props);
            target.enqueueUpdate(this, callback);
          },
          /**
           * @param {?} b
           * @param {string} callback
           * @return {undefined}
           */
          _setPropsInternal : function(b, callback) {
            var plugin = this._pendingElement || this._currentElement;
            this._pendingElement = utils.cloneAndReplaceProps(plugin, extendObject({}, plugin.props, b));
            target.enqueueUpdate(this, callback);
          },
          /**
           * @param {Object} props
           * @return {undefined}
           */
          construct : function(props) {
            this.props = props.props;
            this._owner = props._owner;
            this._lifeCycleState = actual.UNMOUNTED;
            /** @type {null} */
            this._pendingCallbacks = null;
            /** @type {Object} */
            this._currentElement = props;
            /** @type {null} */
            this._pendingElement = null;
          },
          /**
           * @param {string} transaction
           * @param {?} data
           * @param {number} recurring
           * @return {undefined}
           */
          mountComponent : function(transaction, data, recurring) {
            assert(!this.isMounted(), "mountComponent(%s, ...): Can only mount an unmounted component. Make sure to avoid storing components between renders or reusing a single component instance in multiple places.", transaction);
            var ref = this._currentElement.ref;
            if (null != ref) {
              var win = this._currentElement._owner;
              t.addComponentAsRefTo(this, ref, win);
            }
            /** @type {string} */
            this._rootNodeID = transaction;
            this._lifeCycleState = actual.MOUNTED;
            /** @type {number} */
            this._mountDepth = recurring;
          },
          /**
           * @return {undefined}
           */
          unmountComponent : function() {
            assert(this.isMounted(), "unmountComponent(): Can only unmount a mounted component.");
            var ref = this._currentElement.ref;
            if (null != ref) {
              t.removeComponentAsRefFrom(this, ref, this._owner);
            }
            i18n(this._rootNodeID);
            /** @type {null} */
            this._rootNodeID = null;
            this._lifeCycleState = actual.UNMOUNTED;
          },
          /**
           * @param {Object} nextComponent
           * @param {?} transaction
           * @return {undefined}
           */
          receiveComponent : function(nextComponent, transaction) {
            assert(this.isMounted(), "receiveComponent(...): Can only update a mounted component.");
            /** @type {Object} */
            this._pendingElement = nextComponent;
            this.performUpdateIfNecessary(transaction);
          },
          /**
           * @param {?} transaction
           * @return {undefined}
           */
          performUpdateIfNecessary : function(transaction) {
            if (null != this._pendingElement) {
              var prevProps = this._currentElement;
              var props = this._pendingElement;
              this._currentElement = props;
              this.props = props.props;
              this._owner = props._owner;
              /** @type {null} */
              this._pendingElement = null;
              this.updateComponent(transaction, prevProps);
            }
          },
          /**
           * @param {?} transaction
           * @param {Object} prevProps
           * @return {undefined}
           */
          updateComponent : function(transaction, prevProps) {
            var props = this._currentElement;
            if (props._owner !== prevProps._owner || props.ref !== prevProps.ref) {
              if (null != prevProps.ref) {
                t.removeComponentAsRefFrom(this, prevProps.ref, prevProps._owner);
              }
              if (null != props.ref) {
                t.addComponentAsRefTo(this, props.ref, props._owner);
              }
            }
          },
          /**
           * @param {string} isXML
           * @param {Node} container
           * @param {?} shouldReuseMarkup
           * @return {undefined}
           */
          mountComponentIntoNode : function(isXML, container, shouldReuseMarkup) {
            var transaction = target.ReactReconcileTransaction.getPooled();
            transaction.perform(this._mountComponentIntoNode, this, isXML, container, transaction, shouldReuseMarkup);
            target.ReactReconcileTransaction.release(transaction);
          },
          /**
           * @param {string} transaction
           * @param {Object} pdataOld
           * @param {?} inplace
           * @param {boolean} fix
           * @return {undefined}
           */
          _mountComponentIntoNode : function(transaction, pdataOld, inplace, fix) {
            var optgroup = this.mountComponent(transaction, inplace, 0);
            length(optgroup, pdataOld, fix);
          },
          /**
           * @param {?} dataAndEvents
           * @return {?}
           */
          isOwnedBy : function(dataAndEvents) {
            return this._owner === dataAndEvents;
          },
          /**
           * @param {?} ref
           * @return {?}
           */
          getSiblingByRef : function(ref) {
            var owner = this._owner;
            return owner && owner.refs ? owner.refs[ref] : null;
          }
        }
      };
      module.exports = parse;
    }, {
      "./Object.assign" : 29,
      "./ReactElement" : 58,
      "./ReactOwner" : 74,
      "./ReactUpdates" : 91,
      "./invariant" : 140,
      "./keyMirror" : 146
    }],
    38 : [function($, module, dataAndEvents) {
      var emptyJ = $("./ReactDOMIDOperations");
      var $this = $("./ReactMarkupChecksum");
      var selector = $("./ReactMount");
      var inp = $("./ReactPerf");
      var $spy = $("./ReactReconcileTransaction");
      var E = $("./getReactRootElementInContainer");
      var hidden = $("./invariant");
      var editor = $("./setInnerHTML");
      /** @type {number} */
      var ELEMENT_NODE_TYPE = 1;
      /** @type {number} */
      var nodeType = 9;
      var JsDiff = {
        ReactReconcileTransaction : $spy,
        BackendIDOperations : emptyJ,
        /**
         * @param {?} elem
         * @return {undefined}
         */
        unmountIDFromEnvironment : function(elem) {
          selector.purgeID(elem);
        },
        mountImageIntoNode : inp.measure("ReactComponentBrowserEnvironment", "mountImageIntoNode", function(markup, container, dataAndEvents) {
          if (hidden(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === nodeType), "mountComponentIntoNode(...): Target container is not valid."), dataAndEvents) {
            if ($this.canReuseMarkup(markup, E(container))) {
              return;
            }
            hidden(container.nodeType !== nodeType, "You're trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side.");
            console.warn("React attempted to use reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server.");
          }
          hidden(container.nodeType !== nodeType, "You're trying to render a component to the document but you didn't use server rendering. We can't do this without using server rendering due to cross-browser quirks. See renderComponentToString() for server rendering.");
          editor(container, markup);
        })
      };
      module.exports = JsDiff;
    }, {
      "./ReactDOMIDOperations" : 47,
      "./ReactMarkupChecksum" : 69,
      "./ReactMount" : 70,
      "./ReactPerf" : 75,
      "./ReactReconcileTransaction" : 81,
      "./getReactRootElementInContainer" : 134,
      "./invariant" : 140,
      "./setInnerHTML" : 154
    }],
    39 : [function(require, module, dataAndEvents) {
      var helper = require("./shallowEqual");
      var JsDiff = {
        /**
         * @param {Error} nextProps
         * @param {?} name
         * @return {?}
         */
        shouldComponentUpdate : function(nextProps, name) {
          return!helper(this.props, nextProps) || !helper(this.state, name);
        }
      };
      module.exports = JsDiff;
    }, {
      "./shallowEqual" : 155
    }],
    40 : [function(require, module, dataAndEvents) {
      /**
       * @param {Object} dataAndEvents
       * @return {?}
       */
      function ctor(dataAndEvents) {
        var component = dataAndEvents._owner || null;
        return component && (component.constructor && component.constructor.displayName) ? " Check the render method of `" + component.constructor.displayName + "`." : "";
      }
      /**
       * @param {Function} Constructor
       * @param {Object} typeDef
       * @param {?} key
       * @return {undefined}
       */
      function validateTypeDef(Constructor, typeDef, key) {
        var propName;
        for (propName in typeDef) {
          if (typeDef.hasOwnProperty(propName)) {
            isFunction("function" == typeof typeDef[propName], "%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.", Constructor.displayName || "ReactCompositeComponent", helper[key], propName);
          }
        }
      }
      /**
       * @param {?} obj
       * @param {string} name
       * @return {undefined}
       */
      function copy(obj, name) {
        var specPolicy = names.hasOwnProperty(name) ? names[name] : null;
        if (constants.hasOwnProperty(name)) {
          isFunction(specPolicy === SpecPolicy.OVERRIDE_BASE, "ReactCompositeComponentInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.", name);
        }
        if (obj.hasOwnProperty(name)) {
          isFunction(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED, "ReactCompositeComponentInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.", name);
        }
      }
      /**
       * @param {?} instance
       * @return {undefined}
       */
      function loop(instance) {
        var compositeLifeCycleState = instance._compositeLifeCycleState;
        isFunction(instance.isMounted() || compositeLifeCycleState === CompositeLifeCycle.MOUNTING, "replaceState(...): Can only update a mounted or mounting component.");
        isFunction(null == stream.current, "replaceState(...): Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
        isFunction(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING, "replaceState(...): Cannot update while unmounting component. This usually means you called setState() on an unmounted component.");
      }
      /**
       * @param {Function} Constructor
       * @param {Object} data
       * @return {undefined}
       */
      function mixin(Constructor, data) {
        if (data) {
          isFunction(!assert.isValidFactory(data), "ReactCompositeComponent: You're attempting to use a component class as a mixin. Instead, just use a regular object.");
          isFunction(!client.isValidElement(data), "ReactCompositeComponent: You're attempting to use a component as a mixin. Instead, just use a regular object.");
          var proto = Constructor.prototype;
          if (data.hasOwnProperty(id)) {
            element.mixins(Constructor, data.mixins);
          }
          var name;
          for (name in data) {
            if (data.hasOwnProperty(name) && name !== id) {
              var fn = data[name];
              if (copy(proto, name), element.hasOwnProperty(name)) {
                element[name](Constructor, fn);
              } else {
                /** @type {boolean} */
                var quoteNeeded = names.hasOwnProperty(name);
                var array = proto.hasOwnProperty(name);
                var call = fn && fn.__reactDontBind;
                /** @type {boolean} */
                var value = "function" == typeof fn;
                /** @type {boolean} */
                var attrNames = value && (!quoteNeeded && (!array && !call));
                if (attrNames) {
                  if (!proto.__reactAutoBindMap) {
                    proto.__reactAutoBindMap = {};
                  }
                  proto.__reactAutoBindMap[name] = fn;
                  proto[name] = fn;
                } else {
                  if (array) {
                    var specPolicy = names[name];
                    isFunction(quoteNeeded && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY), "ReactCompositeComponent: Unexpected spec policy %s for key %s when mixing in component specs.", specPolicy, name);
                    if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
                      proto[name] = callback(proto[name], fn);
                    } else {
                      if (specPolicy === SpecPolicy.DEFINE_MANY) {
                        proto[name] = wrap(proto[name], fn);
                      }
                    }
                  } else {
                    proto[name] = fn;
                    if ("function" == typeof fn) {
                      if (data.displayName) {
                        /** @type {string} */
                        proto[name].displayName = data.displayName + "_" + name;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      /**
       * @param {Object} values
       * @param {Object} object
       * @return {undefined}
       */
      function call(values, object) {
        if (object) {
          var name;
          for (name in object) {
            var value = object[name];
            if (object.hasOwnProperty(name)) {
              /** @type {boolean} */
              var isCompositeComponentMethod = name in element;
              isFunction(!isCompositeComponentMethod, 'ReactCompositeComponent: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name);
              /** @type {boolean} */
              var hasTexture = name in values;
              isFunction(!hasTexture, "ReactCompositeComponent: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.", name);
              values[name] = value;
            }
          }
        }
      }
      /**
       * @param {boolean} data
       * @param {boolean} arg
       * @return {?}
       */
      function done(data, arg) {
        return isFunction(data && (arg && ("object" == typeof data && "object" == typeof arg)), "mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects"), nodes(arg, function(value, option) {
          isFunction(void 0 === data[option], "mergeObjectsWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.", option);
          data[option] = value;
        }), data;
      }
      /**
       * @param {Function} matcherFunction
       * @param {Function} style
       * @return {?}
       */
      function callback(matcherFunction, style) {
        return function() {
          var x = matcherFunction.apply(this, arguments);
          var r = style.apply(this, arguments);
          return null == x ? r : null == r ? x : done(x, r);
        };
      }
      /**
       * @param {Function} matcherFunction
       * @param {Function} fn
       * @return {?}
       */
      function wrap(matcherFunction, fn) {
        return function() {
          matcherFunction.apply(this, arguments);
          fn.apply(this, arguments);
        };
      }
      var exports = require("./ReactComponent");
      var event = require("./ReactContext");
      var stream = require("./ReactCurrentOwner");
      var client = require("./ReactElement");
      var filter = require("./ReactElementValidator");
      var Block = require("./ReactEmptyComponent");
      var ch = require("./ReactErrorUtils");
      var assert = require("./ReactLegacyElement");
      var extend = require("./ReactOwner");
      var Element = require("./ReactPerf");
      var Tree = require("./ReactPropTransferer");
      var clone = require("./ReactPropTypeLocations");
      var helper = require("./ReactPropTypeLocationNames");
      var jQuery = require("./ReactUpdates");
      var Mixin = require("./Object.assign");
      var getActual = require("./instantiateReactComponent");
      var isFunction = require("./invariant");
      var inspect = require("./keyMirror");
      var requestAnimationFrame = require("./keyOf");
      var has = require("./monitorCodeUse");
      var nodes = require("./mapObject");
      var indexOf = require("./shouldUpdateReactComponent");
      var isObject = require("./warning");
      var id = requestAnimationFrame({
        mixins : null
      });
      var SpecPolicy = inspect({
        DEFINE_ONCE : null,
        DEFINE_MANY : null,
        OVERRIDE_BASE : null,
        DEFINE_MANY_MERGED : null
      });
      /** @type {Array} */
      var values = [];
      var names = {
        mixins : SpecPolicy.DEFINE_MANY,
        statics : SpecPolicy.DEFINE_MANY,
        propTypes : SpecPolicy.DEFINE_MANY,
        contextTypes : SpecPolicy.DEFINE_MANY,
        childContextTypes : SpecPolicy.DEFINE_MANY,
        getDefaultProps : SpecPolicy.DEFINE_MANY_MERGED,
        getInitialState : SpecPolicy.DEFINE_MANY_MERGED,
        getChildContext : SpecPolicy.DEFINE_MANY_MERGED,
        render : SpecPolicy.DEFINE_ONCE,
        componentWillMount : SpecPolicy.DEFINE_MANY,
        componentDidMount : SpecPolicy.DEFINE_MANY,
        componentWillReceiveProps : SpecPolicy.DEFINE_MANY,
        shouldComponentUpdate : SpecPolicy.DEFINE_ONCE,
        componentWillUpdate : SpecPolicy.DEFINE_MANY,
        componentDidUpdate : SpecPolicy.DEFINE_MANY,
        componentWillUnmount : SpecPolicy.DEFINE_MANY,
        updateComponent : SpecPolicy.OVERRIDE_BASE
      };
      var element = {
        /**
         * @param {string} name
         * @param {Object} value
         * @return {undefined}
         */
        displayName : function(name, value) {
          /** @type {Object} */
          name.displayName = value;
        },
        /**
         * @param {Function} Constructor
         * @param {(Array|NodeList)} mixins
         * @return {undefined}
         */
        mixins : function(Constructor, mixins) {
          if (mixins) {
            /** @type {number} */
            var i = 0;
            for (;i < mixins.length;i++) {
              mixin(Constructor, mixins[i]);
            }
          }
        },
        /**
         * @param {Function} Constructor
         * @param {number} childContextTypes
         * @return {undefined}
         */
        childContextTypes : function(Constructor, childContextTypes) {
          validateTypeDef(Constructor, childContextTypes, clone.childContext);
          Constructor.childContextTypes = Mixin({}, Constructor.childContextTypes, childContextTypes);
        },
        /**
         * @param {Function} Constructor
         * @param {number} contextTypes
         * @return {undefined}
         */
        contextTypes : function(Constructor, contextTypes) {
          validateTypeDef(Constructor, contextTypes, clone.context);
          Constructor.contextTypes = Mixin({}, Constructor.contextTypes, contextTypes);
        },
        /**
         * @param {?} xhr
         * @param {?} i
         * @return {undefined}
         */
        getDefaultProps : function(xhr, i) {
          if (xhr.getDefaultProps) {
            xhr.getDefaultProps = callback(xhr.getDefaultProps, i);
          } else {
            xhr.getDefaultProps = i;
          }
        },
        /**
         * @param {Function} Constructor
         * @param {number} propTypes
         * @return {undefined}
         */
        propTypes : function(Constructor, propTypes) {
          validateTypeDef(Constructor, propTypes, clone.prop);
          Constructor.propTypes = Mixin({}, Constructor.propTypes, propTypes);
        },
        /**
         * @param {Object} Constructor
         * @param {number} mixins
         * @return {undefined}
         */
        statics : function(Constructor, mixins) {
          call(Constructor, mixins);
        }
      };
      var CompositeLifeCycle = inspect({
        MOUNTING : null,
        UNMOUNTING : null,
        RECEIVING_PROPS : null
      });
      var constants = {
        /**
         * @param {string} keepData
         * @return {undefined}
         */
        construct : function(keepData) {
          exports.Mixin.construct.apply(this, arguments);
          extend.Mixin.construct.apply(this, arguments);
          /** @type {null} */
          this.state = null;
          /** @type {null} */
          this._pendingState = null;
          /** @type {null} */
          this.context = null;
          /** @type {null} */
          this._compositeLifeCycleState = null;
        },
        /**
         * @return {?}
         */
        isMounted : function() {
          return exports.Mixin.isMounted.call(this) && this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
        },
        mountComponent : Element.measure("ReactCompositeComponent", "mountComponent", function(transaction, data, mountDepth) {
          exports.Mixin.mountComponent.call(this, transaction, data, mountDepth);
          this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;
          if (this.__reactAutoBindMap) {
            this._bindAutoBindMethods();
          }
          this.context = this._processContext(this._currentElement._context);
          this.props = this._processProps(this.props);
          this.state = this.getInitialState ? this.getInitialState() : null;
          isFunction("object" == typeof this.state && !Array.isArray(this.state), "%s.getInitialState(): must return an object or null", this.constructor.displayName || "ReactCompositeComponent");
          /** @type {null} */
          this._pendingState = null;
          /** @type {boolean} */
          this._pendingForceUpdate = false;
          if (this.componentWillMount) {
            this.componentWillMount();
            if (this._pendingState) {
              this.state = this._pendingState;
              /** @type {null} */
              this._pendingState = null;
            }
          }
          this._renderedComponent = getActual(this._renderValidatedComponent(), this._currentElement.type);
          /** @type {null} */
          this._compositeLifeCycleState = null;
          var error = this._renderedComponent.mountComponent(transaction, data, mountDepth + 1);
          return this.componentDidMount && data.getReactMountReady().enqueue(this.componentDidMount, this), error;
        }),
        /**
         * @return {undefined}
         */
        unmountComponent : function() {
          this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
          if (this.componentWillUnmount) {
            this.componentWillUnmount();
          }
          /** @type {null} */
          this._compositeLifeCycleState = null;
          this._renderedComponent.unmountComponent();
          /** @type {null} */
          this._renderedComponent = null;
          exports.Mixin.unmountComponent.call(this);
        },
        /**
         * @param {?} opt_attributes
         * @param {Function} callback
         * @return {undefined}
         */
        setState : function(opt_attributes, callback) {
          isFunction("object" == typeof opt_attributes || null == opt_attributes, "setState(...): takes an object of state variables to update.");
          isObject(null != opt_attributes, "setState(...): You passed an undefined or null state object; instead, use forceUpdate().");
          this.replaceState(Mixin({}, this._pendingState || this.state, opt_attributes), callback);
        },
        /**
         * @param {number} state
         * @param {Function} callback
         * @return {undefined}
         */
        replaceState : function(state, callback) {
          loop(this);
          /** @type {number} */
          this._pendingState = state;
          if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
            jQuery.enqueueUpdate(this, callback);
          }
        },
        /**
         * @param {Object} context
         * @return {?}
         */
        _processContext : function(context) {
          /** @type {null} */
          var maskedContext = null;
          var contextTypes = this.constructor.contextTypes;
          if (contextTypes) {
            maskedContext = {};
            var contextName;
            for (contextName in contextTypes) {
              maskedContext[contextName] = context[contextName];
            }
            this._checkPropTypes(contextTypes, maskedContext, clone.context);
          }
          return maskedContext;
        },
        /**
         * @param {?} currentContext
         * @return {?}
         */
        _processChildContext : function(currentContext) {
          var childContext = this.getChildContext && this.getChildContext();
          var r20 = this.constructor.displayName || "ReactCompositeComponent";
          if (childContext) {
            isFunction("object" == typeof this.constructor.childContextTypes, "%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", r20);
            this._checkPropTypes(this.constructor.childContextTypes, childContext, clone.childContext);
            var name;
            for (name in childContext) {
              isFunction(name in this.constructor.childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', r20, name);
            }
            return Mixin({}, currentContext, childContext);
          }
          return currentContext;
        },
        /**
         * @param {?} props
         * @return {?}
         */
        _processProps : function(props) {
          var propTypes = this.constructor.propTypes;
          return propTypes && this._checkPropTypes(propTypes, props, clone.prop), props;
        },
        /**
         * @param {Object} propTypes
         * @param {?} props
         * @param {?} location
         * @return {undefined}
         */
        _checkPropTypes : function(propTypes, props, location) {
          var componentName = this.constructor.displayName;
          var propName;
          for (propName in propTypes) {
            if (propTypes.hasOwnProperty(propName)) {
              var error = propTypes[propName](props, propName, componentName, location);
              if (error instanceof Error) {
                var suffix = ctor(this);
                isObject(false, error.message + suffix);
              }
            }
          }
        },
        /**
         * @param {?} transaction
         * @return {undefined}
         */
        performUpdateIfNecessary : function(transaction) {
          var compositeLifeCycleState = this._compositeLifeCycleState;
          if (compositeLifeCycleState !== CompositeLifeCycle.MOUNTING && (compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_PROPS && (null != this._pendingElement || (null != this._pendingState || this._pendingForceUpdate)))) {
            var mixins = this.context;
            var nextProps = this.props;
            var _this = this._currentElement;
            if (null != this._pendingElement) {
              _this = this._pendingElement;
              mixins = this._processContext(_this._context);
              nextProps = this._processProps(_this.props);
              /** @type {null} */
              this._pendingElement = null;
              this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
              if (this.componentWillReceiveProps) {
                this.componentWillReceiveProps(nextProps, mixins);
              }
            }
            /** @type {null} */
            this._compositeLifeCycleState = null;
            var nextState = this._pendingState || this.state;
            /** @type {null} */
            this._pendingState = null;
            var io = this._pendingForceUpdate || (!this.shouldComponentUpdate || this.shouldComponentUpdate(nextProps, nextState, mixins));
            if ("undefined" == typeof io) {
              console.warn((this.constructor.displayName || "ReactCompositeComponent") + ".shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.");
            }
            if (io) {
              /** @type {boolean} */
              this._pendingForceUpdate = false;
              this._performComponentUpdate(_this, nextProps, nextState, mixins, transaction);
            } else {
              this._currentElement = _this;
              this.props = nextProps;
              this.state = nextState;
              this.context = mixins;
              this._owner = _this._owner;
            }
          }
        },
        /**
         * @param {Object} value
         * @param {Object} nextProps
         * @param {number} mixins
         * @param {?} deepDataAndEvents
         * @param {?} transaction
         * @return {undefined}
         */
        _performComponentUpdate : function(value, nextProps, mixins, deepDataAndEvents, transaction) {
          var prevProps = this._currentElement;
          var which = this.props;
          var prevState = this.state;
          var prevContext = this.context;
          if (this.componentWillUpdate) {
            this.componentWillUpdate(nextProps, mixins, deepDataAndEvents);
          }
          /** @type {Object} */
          this._currentElement = value;
          /** @type {Object} */
          this.props = nextProps;
          /** @type {number} */
          this.state = mixins;
          this.context = deepDataAndEvents;
          this._owner = value._owner;
          this.updateComponent(transaction, prevProps);
          if (this.componentDidUpdate) {
            transaction.getReactMountReady().enqueue(this.componentDidUpdate.bind(this, which, prevState, prevContext), this);
          }
        },
        /**
         * @param {Object} nextComponent
         * @param {?} transaction
         * @return {undefined}
         */
        receiveComponent : function(nextComponent, transaction) {
          if (nextComponent !== this._currentElement || null == nextComponent._owner) {
            exports.Mixin.receiveComponent.call(this, nextComponent, transaction);
          }
        },
        updateComponent : Element.measure("ReactCompositeComponent", "updateComponent", function(data, graphics) {
          exports.Mixin.updateComponent.call(this, data, graphics);
          var prevComponent = this._renderedComponent;
          var dontCloseTags = prevComponent._currentElement;
          var nextComponent = this._renderValidatedComponent();
          if (indexOf(dontCloseTags, nextComponent)) {
            prevComponent.receiveComponent(nextComponent, data);
          } else {
            var transaction = this._rootNodeID;
            var prevComponentID = prevComponent._rootNodeID;
            prevComponent.unmountComponent();
            this._renderedComponent = getActual(nextComponent, this._currentElement.type);
            var error = this._renderedComponent.mountComponent(transaction, data, this._mountDepth + 1);
            exports.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(prevComponentID, error);
          }
        }),
        /**
         * @param {string} callback
         * @return {undefined}
         */
        forceUpdate : function(callback) {
          var compositeLifeCycleState = this._compositeLifeCycleState;
          isFunction(this.isMounted() || compositeLifeCycleState === CompositeLifeCycle.MOUNTING, "forceUpdate(...): Can only force an update on mounted or mounting components.");
          isFunction(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING && null == stream.current, "forceUpdate(...): Cannot force an update while unmounting component or within a `render` function.");
          /** @type {boolean} */
          this._pendingForceUpdate = true;
          jQuery.enqueueUpdate(this, callback);
        },
        _renderValidatedComponent : Element.measure("ReactCompositeComponent", "_renderValidatedComponent", function() {
          var msgs;
          var current = event.current;
          event.current = this._processChildContext(this._currentElement._context);
          stream.current = this;
          try {
            msgs = this.render();
            if (null === msgs || msgs === false) {
              msgs = Block.getEmptyComponent();
              Block.registerNullComponentID(this._rootNodeID);
            } else {
              Block.deregisterNullComponentID(this._rootNodeID);
            }
          } finally {
            event.current = current;
            /** @type {null} */
            stream.current = null;
          }
          return isFunction(client.isValidElement(msgs), "%s.render(): A valid ReactComponent must be returned. You may have returned undefined, an array or some other invalid object.", this.constructor.displayName || "ReactCompositeComponent"), msgs;
        }),
        /**
         * @return {undefined}
         */
        _bindAutoBindMethods : function() {
          var autoBindKey;
          for (autoBindKey in this.__reactAutoBindMap) {
            if (this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
              var method = this.__reactAutoBindMap[autoBindKey];
              this[autoBindKey] = this._bindAutoBindMethod(ch.guard(method, this.constructor.displayName + "." + autoBindKey));
            }
          }
        },
        /**
         * @param {?} method
         * @return {?}
         */
        _bindAutoBindMethod : function(method) {
          var component = this;
          var boundMethod = method.bind(component);
          boundMethod.__reactBoundContext = component;
          boundMethod.__reactBoundMethod = method;
          /** @type {null} */
          boundMethod.__reactBoundArguments = null;
          var cmptId = component.constructor.displayName;
          /** @type {function (string): ?} */
          var _bind = boundMethod.bind;
          return boundMethod.bind = function(type) {
            /** @type {Array} */
            var ta = [];
            /** @type {number} */
            var x = 1;
            /** @type {number} */
            var len = arguments.length;
            for (;len > x;x++) {
              ta.push(arguments[x]);
            }
            if (type !== component && null !== type) {
              has("react_bind_warning", {
                component : cmptId
              });
              console.warn("bind(): React component methods may only be bound to the component instance. See " + cmptId);
            } else {
              if (!ta.length) {
                return has("react_bind_warning", {
                  component : cmptId
                }), console.warn("bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See " + cmptId), boundMethod;
              }
            }
            var reboundMethod = _bind.apply(boundMethod, arguments);
            return reboundMethod.__reactBoundContext = component, reboundMethod.__reactBoundMethod = method, reboundMethod.__reactBoundArguments = ta, reboundMethod;
          }, boundMethod;
        }
      };
      /**
       * @return {undefined}
       */
      var Subclass = function() {
      };
      Mixin(Subclass.prototype, exports.Mixin, extend.Mixin, Tree.Mixin, constants);
      var JsDiff = {
        LifeCycle : CompositeLifeCycle,
        /** @type {function (): undefined} */
        Base : Subclass,
        /**
         * @param {?} opt_attributes
         * @return {?}
         */
        createClass : function(opt_attributes) {
          /**
           * @param {string} name
           * @return {undefined}
           */
          var type = function(name) {
          };
          type.prototype = new Subclass;
          /** @type {function (string): undefined} */
          type.prototype.constructor = type;
          values.forEach(mixin.bind(null, type));
          mixin(type, opt_attributes);
          if (type.getDefaultProps) {
            type.defaultProps = type.getDefaultProps();
          }
          isFunction(type.prototype.render, "createClass(...): Class specification must implement a `render` method.");
          if (type.prototype.componentShouldUpdate) {
            has("react_component_should_update_warning", {
              component : opt_attributes.displayName
            });
            console.warn((opt_attributes.displayName || "A component") + " has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.");
          }
          var i;
          for (i in names) {
            if (!type.prototype[i]) {
              /** @type {null} */
              type.prototype[i] = null;
            }
          }
          return assert.wrapFactory(filter.createFactory(type));
        },
        injection : {
          /**
           * @param {string} value
           * @return {undefined}
           */
          injectMixin : function(value) {
            values.push(value);
          }
        }
      };
      module.exports = JsDiff;
    }, {
      "./Object.assign" : 29,
      "./ReactComponent" : 37,
      "./ReactContext" : 41,
      "./ReactCurrentOwner" : 42,
      "./ReactElement" : 58,
      "./ReactElementValidator" : 59,
      "./ReactEmptyComponent" : 60,
      "./ReactErrorUtils" : 61,
      "./ReactLegacyElement" : 67,
      "./ReactOwner" : 74,
      "./ReactPerf" : 75,
      "./ReactPropTransferer" : 76,
      "./ReactPropTypeLocationNames" : 77,
      "./ReactPropTypeLocations" : 78,
      "./ReactUpdates" : 91,
      "./instantiateReactComponent" : 139,
      "./invariant" : 140,
      "./keyMirror" : 146,
      "./keyOf" : 147,
      "./mapObject" : 148,
      "./monitorCodeUse" : 150,
      "./shouldUpdateReactComponent" : 156,
      "./warning" : 160
    }],
    41 : [function($sanitize, context, dataAndEvents) {
      var getPage = $sanitize("./Object.assign");
      var self = {
        current : {},
        /**
         * @param {?} newOptions
         * @param {?} scopedCallback
         * @return {?}
         */
        withContext : function(newOptions, scopedCallback) {
          var result;
          var current = self.current;
          self.current = getPage({}, current, newOptions);
          try {
            result = scopedCallback();
          } finally {
            self.current = current;
          }
          return result;
        }
      };
      context.exports = self;
    }, {
      "./Object.assign" : 29
    }],
    42 : [function(dataAndEvents, module, deepDataAndEvents) {
      var JsDiff = {
        current : null
      };
      module.exports = JsDiff;
    }, {}],
    43 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} event
       * @return {?}
       */
      function fn(event) {
        return assert.markNonLegacyFactory(fixHook.createFactory(event));
      }
      var fixHook = (require("./ReactElement"), require("./ReactElementValidator"));
      var assert = require("./ReactLegacyElement");
      var a = require("./mapObject");
      var ret = a({
        a : "a",
        abbr : "abbr",
        address : "address",
        area : "area",
        article : "article",
        aside : "aside",
        audio : "audio",
        b : "b",
        base : "base",
        bdi : "bdi",
        bdo : "bdo",
        big : "big",
        blockquote : "blockquote",
        body : "body",
        br : "br",
        button : "button",
        canvas : "canvas",
        caption : "caption",
        cite : "cite",
        code : "code",
        col : "col",
        colgroup : "colgroup",
        data : "data",
        datalist : "datalist",
        dd : "dd",
        del : "del",
        details : "details",
        dfn : "dfn",
        dialog : "dialog",
        div : "div",
        dl : "dl",
        dt : "dt",
        em : "em",
        embed : "embed",
        fieldset : "fieldset",
        figcaption : "figcaption",
        figure : "figure",
        footer : "footer",
        form : "form",
        h1 : "h1",
        h2 : "h2",
        h3 : "h3",
        h4 : "h4",
        h5 : "h5",
        h6 : "h6",
        head : "head",
        header : "header",
        hr : "hr",
        html : "html",
        i : "i",
        iframe : "iframe",
        img : "img",
        input : "input",
        ins : "ins",
        kbd : "kbd",
        keygen : "keygen",
        label : "label",
        legend : "legend",
        li : "li",
        link : "link",
        main : "main",
        map : "map",
        mark : "mark",
        menu : "menu",
        menuitem : "menuitem",
        meta : "meta",
        meter : "meter",
        nav : "nav",
        noscript : "noscript",
        object : "object",
        ol : "ol",
        optgroup : "optgroup",
        option : "option",
        output : "output",
        p : "p",
        param : "param",
        picture : "picture",
        pre : "pre",
        progress : "progress",
        q : "q",
        rp : "rp",
        rt : "rt",
        ruby : "ruby",
        s : "s",
        samp : "samp",
        script : "script",
        section : "section",
        select : "select",
        small : "small",
        source : "source",
        span : "span",
        strong : "strong",
        style : "style",
        sub : "sub",
        summary : "summary",
        sup : "sup",
        table : "table",
        tbody : "tbody",
        td : "td",
        textarea : "textarea",
        tfoot : "tfoot",
        th : "th",
        thead : "thead",
        time : "time",
        title : "title",
        tr : "tr",
        track : "track",
        u : "u",
        ul : "ul",
        "var" : "var",
        video : "video",
        wbr : "wbr",
        circle : "circle",
        defs : "defs",
        ellipse : "ellipse",
        g : "g",
        line : "line",
        linearGradient : "linearGradient",
        mask : "mask",
        path : "path",
        pattern : "pattern",
        polygon : "polygon",
        polyline : "polyline",
        radialGradient : "radialGradient",
        rect : "rect",
        stop : "stop",
        svg : "svg",
        text : "text",
        tspan : "tspan"
      }, fn);
      module.exports = ret;
    }, {
      "./ReactElement" : 58,
      "./ReactElementValidator" : 59,
      "./ReactLegacyElement" : 67,
      "./mapObject" : 148
    }],
    44 : [function(require, module, dataAndEvents) {
      var Block = require("./AutoFocusMixin");
      var nodes = require("./ReactBrowserComponentMixin");
      var Person = require("./ReactCompositeComponent");
      var filter = require("./ReactElement");
      var event = require("./ReactDOM");
      var getActual = require("./keyMirror");
      var template = filter.createFactory(event.button.type);
      var actual = getActual({
        onClick : true,
        onDoubleClick : true,
        onMouseDown : true,
        onMouseMove : true,
        onMouseUp : true,
        onClickCapture : true,
        onDoubleClickCapture : true,
        onMouseDownCapture : true,
        onMouseMoveCapture : true,
        onMouseUpCapture : true
      });
      var JsDiff = Person.createClass({
        displayName : "ReactDOMButton",
        mixins : [Block, nodes],
        /**
         * @return {?}
         */
        render : function() {
          var props = {};
          var thisKey;
          for (thisKey in this.props) {
            if (!!this.props.hasOwnProperty(thisKey)) {
              if (!(this.props.disabled && actual[thisKey])) {
                props[thisKey] = this.props[thisKey];
              }
            }
          }
          return template(props, this.props.children);
        }
      });
      module.exports = JsDiff;
    }, {
      "./AutoFocusMixin" : 2,
      "./ReactBrowserComponentMixin" : 32,
      "./ReactCompositeComponent" : 40,
      "./ReactDOM" : 43,
      "./ReactElement" : 58,
      "./keyMirror" : 146
    }],
    45 : [function(require, f, dataAndEvents) {
      /**
       * @param {Element} element
       * @return {undefined}
       */
      function init(element) {
        if (element) {
          jQuery(null == element.children || null == element.dangerouslySetInnerHTML, "Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (element.contentEditable) {
            if (null != element.children) {
              console.warn("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          jQuery(null == element.style || "object" == typeof element.style, "The `style` prop expects a mapping from style properties to values, not a string.");
        }
      }
      /**
       * @param {?} node
       * @param {string} name
       * @param {?} deepDataAndEvents
       * @param {?} data
       * @return {undefined}
       */
      function setup(node, name, deepDataAndEvents, data) {
        if (!("onScroll" !== name)) {
          if (!bind("scroll", true)) {
            newBindings("react_no_scroll_event");
            console.warn("This browser doesn't support the `onScroll` event");
          }
        }
        var options = nodes.findReactContainerForID(node);
        if (options) {
          var url = options.nodeType === object ? options.ownerDocument : options;
          next(name, url);
        }
        data.getPutListenerQueue().enqueuePutListener(node, name, deepDataAndEvents);
      }
      /**
       * @param {string} name
       * @return {undefined}
       */
      function fn(name) {
        if (!__hasProp.call(matchers, name)) {
          jQuery(rparentsprev.test(name), "Invalid tag: %s", name);
          /** @type {boolean} */
          matchers[name] = true;
        }
      }
      /**
       * @param {string} name
       * @return {undefined}
       */
      function func(name) {
        fn(name);
        /** @type {string} */
        this._tag = name;
        this.tagName = name.toUpperCase();
      }
      var toString = require("./CSSPropertyOperations");
      var DOMProperty = require("./DOMProperty");
      var jasmine = require("./DOMPropertyOperations");
      var Block = require("./ReactBrowserComponentMixin");
      var Test = require("./ReactComponent");
      var e = require("./ReactBrowserEventEmitter");
      var nodes = require("./ReactMount");
      var Tree = require("./ReactMultiChild");
      var Element = require("./ReactPerf");
      var merge = require("./Object.assign");
      var indexOf = require("./escapeTextForBrowser");
      var jQuery = require("./invariant");
      var bind = require("./isEventSupported");
      var getName = require("./keyOf");
      var newBindings = require("./monitorCodeUse");
      var button = e.deleteListener;
      var next = e.listenTo;
      var changes = e.registrationNameModules;
      var factory = {
        string : true,
        number : true
      };
      var name = getName({
        style : null
      });
      /** @type {number} */
      var object = 1;
      var selfClosing = {
        area : true,
        base : true,
        br : true,
        col : true,
        embed : true,
        hr : true,
        img : true,
        input : true,
        keygen : true,
        link : true,
        meta : true,
        param : true,
        source : true,
        track : true,
        wbr : true
      };
      /** @type {RegExp} */
      var rparentsprev = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
      var matchers = {};
      /** @type {function (this:Object, *): boolean} */
      var __hasProp = {}.hasOwnProperty;
      /** @type {string} */
      func.displayName = "ReactDOMComponent";
      func.Mixin = {
        mountComponent : Element.measure("ReactDOMComponent", "mountComponent", function(mapper, transaction, capture) {
          Test.Mixin.mountComponent.call(this, mapper, transaction, capture);
          init(this.props);
          /** @type {string} */
          var transClass = selfClosing[this._tag] ? "" : "</" + this._tag + ">";
          return this._createOpenTagMarkupAndPutListeners(transaction) + this._createContentMarkup(transaction) + transClass;
        }),
        /**
         * @param {?} transaction
         * @return {?}
         */
        _createOpenTagMarkupAndPutListeners : function(transaction) {
          var props = this.props;
          /** @type {string} */
          var type = "<" + this._tag;
          var key;
          for (key in props) {
            if (props.hasOwnProperty(key)) {
              var value = props[key];
              if (null != value) {
                if (changes.hasOwnProperty(key)) {
                  setup(this._rootNodeID, key, value, transaction);
                } else {
                  if (key === name) {
                    if (value) {
                      value = props.style = merge({}, props.style);
                    }
                    value = toString.createMarkupForStyles(value);
                  }
                  var child = jasmine.createMarkupForProperty(key, value);
                  if (child) {
                    type += " " + child;
                  }
                }
              }
            }
          }
          if (transaction.renderToStaticMarkup) {
            return type + ">";
          }
          var pageX = jasmine.createMarkupForID(this._rootNodeID);
          return type + " " + pageX + ">";
        },
        /**
         * @param {?} transaction
         * @return {?}
         */
        _createContentMarkup : function(transaction) {
          var innerHTML = this.props.dangerouslySetInnerHTML;
          if (null != innerHTML) {
            if (null != innerHTML.__html) {
              return innerHTML.__html;
            }
          } else {
            var dontCloseTags = factory[typeof this.props.children] ? this.props.children : null;
            var expectationResult = null != dontCloseTags ? null : this.props.children;
            if (null != dontCloseTags) {
              return indexOf(dontCloseTags);
            }
            if (null != expectationResult) {
              var mountImages = this.mountChildren(expectationResult, transaction);
              return mountImages.join("");
            }
          }
          return "";
        },
        /**
         * @param {Object} nextComponent
         * @param {?} transaction
         * @return {undefined}
         */
        receiveComponent : function(nextComponent, transaction) {
          if (nextComponent !== this._currentElement || null == nextComponent._owner) {
            Test.Mixin.receiveComponent.call(this, nextComponent, transaction);
          }
        },
        updateComponent : Element.measure("ReactDOMComponent", "updateComponent", function(transaction, me) {
          init(this._currentElement.props);
          Test.Mixin.updateComponent.call(this, transaction, me);
          this._updateDOMProperties(me.props, transaction);
          this._updateDOMChildren(me.props, transaction);
        }),
        /**
         * @param {Object} lastProps
         * @param {?} transaction
         * @return {undefined}
         */
        _updateDOMProperties : function(lastProps, transaction) {
          var propKey;
          var styleName;
          var styleUpdates;
          var nextProps = this.props;
          for (propKey in lastProps) {
            if (!nextProps.hasOwnProperty(propKey) && lastProps.hasOwnProperty(propKey)) {
              if (propKey === name) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    styleUpdates = styleUpdates || {};
                    /** @type {string} */
                    styleUpdates[styleName] = "";
                  }
                }
              } else {
                if (changes.hasOwnProperty(propKey)) {
                  button(this._rootNodeID, propKey);
                } else {
                  if (DOMProperty.isStandardName[propKey] || DOMProperty.isCustomAttribute(propKey)) {
                    Test.BackendIDOperations.deletePropertyByID(this._rootNodeID, propKey);
                  }
                }
              }
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps[propKey];
            if (nextProps.hasOwnProperty(propKey) && nextProp !== lastProp) {
              if (propKey === name) {
                if (nextProp && (nextProp = nextProps.style = merge({}, nextProp)), lastProp) {
                  for (styleName in lastProp) {
                    if (!!lastProp.hasOwnProperty(styleName)) {
                      if (!(nextProp && nextProp.hasOwnProperty(styleName))) {
                        styleUpdates = styleUpdates || {};
                        /** @type {string} */
                        styleUpdates[styleName] = "";
                      }
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName)) {
                      if (lastProp[styleName] !== nextProp[styleName]) {
                        styleUpdates = styleUpdates || {};
                        styleUpdates[styleName] = nextProp[styleName];
                      }
                    }
                  }
                } else {
                  styleUpdates = nextProp;
                }
              } else {
                if (changes.hasOwnProperty(propKey)) {
                  setup(this._rootNodeID, propKey, nextProp, transaction);
                } else {
                  if (DOMProperty.isStandardName[propKey] || DOMProperty.isCustomAttribute(propKey)) {
                    Test.BackendIDOperations.updatePropertyByID(this._rootNodeID, propKey, nextProp);
                  }
                }
              }
            }
          }
          if (styleUpdates) {
            Test.BackendIDOperations.updateStylesByID(this._rootNodeID, styleUpdates);
          }
        },
        /**
         * @param {Object} lastProps
         * @param {?} transaction
         * @return {undefined}
         */
        _updateDOMChildren : function(lastProps, transaction) {
          var nextProps = this.props;
          var name = factory[typeof lastProps.children] ? lastProps.children : null;
          var children = factory[typeof nextProps.children] ? nextProps.children : null;
          var index = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
          var pdataOld = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
          var h = null != name ? null : lastProps.children;
          var tmpSet = null != children ? null : nextProps.children;
          /** @type {boolean} */
          var j = null != name || null != index;
          /** @type {boolean} */
          var k = null != children || null != pdataOld;
          if (null != h && null == tmpSet) {
            this.updateChildren(null, transaction);
          } else {
            if (j) {
              if (!k) {
                this.updateTextContent("");
              }
            }
          }
          if (null != children) {
            if (name !== children) {
              this.updateTextContent("" + children);
            }
          } else {
            if (null != pdataOld) {
              if (index !== pdataOld) {
                Test.BackendIDOperations.updateInnerHTMLByID(this._rootNodeID, pdataOld);
              }
            } else {
              if (null != tmpSet) {
                this.updateChildren(tmpSet, transaction);
              }
            }
          }
        },
        /**
         * @return {undefined}
         */
        unmountComponent : function() {
          this.unmountChildren();
          e.deleteAllListeners(this._rootNodeID);
          Test.Mixin.unmountComponent.call(this);
        }
      };
      merge(func.prototype, Test.Mixin, func.Mixin, Tree.Mixin, Block);
      /** @type {function (string): undefined} */
      f.exports = func;
    }, {
      "./CSSPropertyOperations" : 6,
      "./DOMProperty" : 12,
      "./DOMPropertyOperations" : 13,
      "./Object.assign" : 29,
      "./ReactBrowserComponentMixin" : 32,
      "./ReactBrowserEventEmitter" : 33,
      "./ReactComponent" : 37,
      "./ReactMount" : 70,
      "./ReactMultiChild" : 71,
      "./ReactPerf" : 75,
      "./escapeTextForBrowser" : 123,
      "./invariant" : 140,
      "./isEventSupported" : 141,
      "./keyOf" : 147,
      "./monitorCodeUse" : 150
    }],
    46 : [function(require, module, dataAndEvents) {
      var Block = require("./EventConstants");
      var nodes = require("./LocalEventTrapMixin");
      var helper = require("./ReactBrowserComponentMixin");
      var Person = require("./ReactCompositeComponent");
      var filter = require("./ReactElement");
      var v = require("./ReactDOM");
      var templateFunc = filter.createFactory(v.form.type);
      var JsDiff = Person.createClass({
        displayName : "ReactDOMForm",
        mixins : [helper, nodes],
        /**
         * @return {?}
         */
        render : function() {
          return templateFunc(this.props);
        },
        /**
         * @return {undefined}
         */
        componentDidMount : function() {
          this.trapBubbledEvent(Block.topLevelTypes.topReset, "reset");
          this.trapBubbledEvent(Block.topLevelTypes.topSubmit, "submit");
        }
      });
      module.exports = JsDiff;
    }, {
      "./EventConstants" : 17,
      "./LocalEventTrapMixin" : 27,
      "./ReactBrowserComponentMixin" : 32,
      "./ReactCompositeComponent" : 40,
      "./ReactDOM" : 43,
      "./ReactElement" : 58
    }],
    47 : [function(require, module, dataAndEvents) {
      var nodes = require("./CSSPropertyOperations");
      var assert = require("./DOMChildrenOperations");
      var jQuery = require("./DOMPropertyOperations");
      var ids = require("./ReactMount");
      var Block = require("./ReactPerf");
      var merge = require("./invariant");
      var getActual = require("./setInnerHTML");
      var obj = {
        dangerouslySetInnerHTML : "`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.",
        style : "`style` must be set using `updateStylesByID()`."
      };
      var JsDiff = {
        updatePropertyByID : Block.measure("ReactDOMIDOperations", "updatePropertyByID", function(id, name, value) {
          var node = ids.getNode(id);
          merge(!obj.hasOwnProperty(name), "updatePropertyByID(...): %s", obj[name]);
          if (null != value) {
            jQuery.setValueForProperty(node, name, value);
          } else {
            jQuery.deleteValueForProperty(node, name);
          }
        }),
        deletePropertyByID : Block.measure("ReactDOMIDOperations", "deletePropertyByID", function(id, name, deepDataAndEvents) {
          var node = ids.getNode(id);
          merge(!obj.hasOwnProperty(name), "updatePropertyByID(...): %s", obj[name]);
          jQuery.deleteValueForProperty(node, name, deepDataAndEvents);
        }),
        updateStylesByID : Block.measure("ReactDOMIDOperations", "updateStylesByID", function(id, walkers) {
          var node = ids.getNode(id);
          nodes.setValueForStyles(node, walkers);
        }),
        updateInnerHTMLByID : Block.measure("ReactDOMIDOperations", "updateInnerHTMLByID", function(id, args) {
          var obj = ids.getNode(id);
          getActual(obj, args);
        }),
        updateTextContentByID : Block.measure("ReactDOMIDOperations", "updateTextContentByID", function(id, v) {
          var body = ids.getNode(id);
          assert.updateTextContent(body, v);
        }),
        dangerouslyReplaceNodeWithMarkupByID : Block.measure("ReactDOMIDOperations", "dangerouslyReplaceNodeWithMarkupByID", function(id, markup) {
          var section = ids.getNode(id);
          assert.dangerouslyReplaceNodeWithMarkup(section, markup);
        }),
        dangerouslyProcessChildrenUpdates : Block.measure("ReactDOMIDOperations", "dangerouslyProcessChildrenUpdates", function(updates, isXML) {
          /** @type {number} */
          var i = 0;
          for (;i < updates.length;i++) {
            updates[i].parentNode = ids.getNode(updates[i].parentID);
          }
          assert.processUpdates(updates, isXML);
        })
      };
      module.exports = JsDiff;
    }, {
      "./CSSPropertyOperations" : 6,
      "./DOMChildrenOperations" : 11,
      "./DOMPropertyOperations" : 13,
      "./ReactMount" : 70,
      "./ReactPerf" : 75,
      "./invariant" : 140,
      "./setInnerHTML" : 154
    }],
    48 : [function(format, module, dataAndEvents) {
      var query = format("./EventConstants");
      var cohortString = format("./LocalEventTrapMixin");
      var f = format("./ReactBrowserComponentMixin");
      var BasicView = format("./ReactCompositeComponent");
      var obj = format("./ReactElement");
      var msg = format("./ReactDOM");
      var templateFunc = obj.createFactory(msg.img.type);
      var JsDiff = BasicView.createClass({
        displayName : "ReactDOMImg",
        tagName : "IMG",
        mixins : [f, cohortString],
        /**
         * @return {?}
         */
        render : function() {
          return templateFunc(this.props);
        },
        /**
         * @return {undefined}
         */
        componentDidMount : function() {
          this.trapBubbledEvent(query.topLevelTypes.topLoad, "load");
          this.trapBubbledEvent(query.topLevelTypes.topError, "error");
        }
      });
      module.exports = JsDiff;
    }, {
      "./EventConstants" : 17,
      "./LocalEventTrapMixin" : 27,
      "./ReactBrowserComponentMixin" : 32,
      "./ReactCompositeComponent" : 40,
      "./ReactDOM" : 43,
      "./ReactElement" : 58
    }],
    49 : [function(require, module, dataAndEvents) {
      /**
       * @return {undefined}
       */
      function rvar() {
        if (this.isMounted()) {
          this.forceUpdate();
        }
      }
      var Block = require("./AutoFocusMixin");
      var dom = require("./DOMPropertyOperations");
      var node = require("./LinkedValueUtils");
      var nodes = require("./ReactBrowserComponentMixin");
      var BaseView = require("./ReactCompositeComponent");
      var filter = require("./ReactElement");
      var config = require("./ReactDOM");
      var evt = require("./ReactMount");
      var body = require("./ReactUpdates");
      var extend = require("./Object.assign");
      var assert = require("./invariant");
      var template = filter.createFactory(config.input.type);
      var done = {};
      var JsDiff = BaseView.createClass({
        displayName : "ReactDOMInput",
        mixins : [Block, node.Mixin, nodes],
        /**
         * @return {?}
         */
        getInitialState : function() {
          var defaultValue = this.props.defaultValue;
          return{
            initialChecked : this.props.defaultChecked || false,
            initialValue : null != defaultValue ? defaultValue : null
          };
        },
        /**
         * @return {?}
         */
        render : function() {
          var props = extend({}, this.props);
          /** @type {null} */
          props.defaultChecked = null;
          /** @type {null} */
          props.defaultValue = null;
          var value = node.getValue(this);
          props.value = null != value ? value : this.state.initialValue;
          var sx = node.getChecked(this);
          return props.checked = null != sx ? sx : this.state.initialChecked, props.onChange = this._handleChange, template(props, this.props.children);
        },
        /**
         * @return {undefined}
         */
        componentDidMount : function() {
          var id = evt.getID(this.getDOMNode());
          done[id] = this;
        },
        /**
         * @return {undefined}
         */
        componentWillUnmount : function() {
          var node = this.getDOMNode();
          var id = evt.getID(node);
          delete done[id];
        },
        /**
         * @param {Function} Constructor
         * @param {number} mixins
         * @param {?} deepDataAndEvents
         * @return {undefined}
         */
        componentDidUpdate : function(Constructor, mixins, deepDataAndEvents) {
          var rootNode = this.getDOMNode();
          if (null != this.props.checked) {
            dom.setValueForProperty(rootNode, "checked", this.props.checked || false);
          }
          var backgroundColor = node.getValue(this);
          if (null != backgroundColor) {
            dom.setValueForProperty(rootNode, "value", "" + backgroundColor);
          }
        },
        /**
         * @param {Function} event
         * @return {?}
         */
        _handleChange : function(event) {
          var returnValue;
          var eventTrigger = node.getOnChange(this);
          if (eventTrigger) {
            returnValue = eventTrigger.call(this, event);
          }
          body.asap(rvar, this);
          var text = this.props.name;
          if ("radio" === this.props.type && null != text) {
            var el = this.getDOMNode();
            var context = el;
            for (;context.parentNode;) {
              context = context.parentNode;
            }
            var slides = context.querySelectorAll("input[name=" + JSON.stringify("" + text) + '][type="radio"]');
            /** @type {number} */
            var i = 0;
            var len = slides.length;
            for (;len > i;i++) {
              var element = slides[i];
              if (element !== el && element.form === el.form) {
                var id = evt.getID(element);
                assert(id, "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                var index = done[id];
                assert(index, "ReactDOMInput: Unknown radio button ID %s.", id);
                body.asap(rvar, index);
              }
            }
          }
          return returnValue;
        }
      });
      module.exports = JsDiff;
    }, {
      "./AutoFocusMixin" : 2,
      "./DOMPropertyOperations" : 13,
      "./LinkedValueUtils" : 26,
      "./Object.assign" : 29,
      "./ReactBrowserComponentMixin" : 32,
      "./ReactCompositeComponent" : 40,
      "./ReactDOM" : 43,
      "./ReactElement" : 58,
      "./ReactMount" : 70,
      "./ReactUpdates" : 91,
      "./invariant" : 140
    }],
    50 : [function(require, module, dataAndEvents) {
      var Block = require("./ReactBrowserComponentMixin");
      var BaseView = require("./ReactCompositeComponent");
      var filter = require("./ReactElement");
      var info = require("./ReactDOM");
      var getActual = require("./warning");
      var templateFunc = filter.createFactory(info.option.type);
      var JsDiff = BaseView.createClass({
        displayName : "ReactDOMOption",
        mixins : [Block],
        /**
         * @return {undefined}
         */
        componentWillMount : function() {
          getActual(null == this.props.selected, "Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
        },
        /**
         * @return {?}
         */
        render : function() {
          return templateFunc(this.props, this.props.children);
        }
      });
      module.exports = JsDiff;
    }, {
      "./ReactBrowserComponentMixin" : 32,
      "./ReactCompositeComponent" : 40,
      "./ReactDOM" : 43,
      "./ReactElement" : 58,
      "./warning" : 160
    }],
    51 : [function($resource, module, dataAndEvents) {
      /**
       * @return {undefined}
       */
      function rvar() {
        if (this.isMounted()) {
          this.setState({
            value : this._pendingValue
          });
          /** @type {number} */
          this._pendingValue = 0;
        }
      }
      /**
       * @param {string} name
       * @param {Object} value
       * @param {boolean} type
       * @return {?}
       */
      function attr(name, value, type) {
        if (null != name[value]) {
          if (name.multiple) {
            if (!Array.isArray(name[value])) {
              return new Error("The `" + value + "` prop supplied to <select> must be an array if `multiple` is true.");
            }
          } else {
            if (Array.isArray(name[value])) {
              return new Error("The `" + value + "` prop supplied to <select> must be a scalar value if `multiple` is false.");
            }
          }
        }
      }
      /**
       * @param {Object} self
       * @param {Object} value
       * @return {undefined}
       */
      function init(self, value) {
        var a;
        var j;
        var len;
        var name = self.props.multiple;
        var c = null != value ? value : self.state.value;
        var options = self.getDOMNode().options;
        if (name) {
          a = {};
          /** @type {number} */
          j = 0;
          len = c.length;
          for (;len > j;++j) {
            /** @type {boolean} */
            a["" + c[j]] = true;
          }
        } else {
          /** @type {string} */
          a = "" + c;
        }
        /** @type {number} */
        j = 0;
        len = options.length;
        for (;len > j;j++) {
          /** @type {boolean} */
          var index = name ? a.hasOwnProperty(options[j].value) : options[j].value === a;
          if (index !== options[j].selected) {
            /** @type {boolean} */
            options[j].selected = index;
          }
        }
      }
      var R = $resource("./AutoFocusMixin");
      var r = $resource("./LinkedValueUtils");
      var service = $resource("./ReactBrowserComponentMixin");
      var Person = $resource("./ReactCompositeComponent");
      var resource = $resource("./ReactElement");
      var collection = $resource("./ReactDOM");
      var Push = $resource("./ReactUpdates");
      var drawArc = $resource("./Object.assign");
      var template = resource.createFactory(collection.select.type);
      var JsDiff = Person.createClass({
        displayName : "ReactDOMSelect",
        mixins : [R, r.Mixin, service],
        propTypes : {
          /** @type {function (string, Object, boolean): ?} */
          defaultValue : attr,
          /** @type {function (string, Object, boolean): ?} */
          value : attr
        },
        /**
         * @return {?}
         */
        getInitialState : function() {
          return{
            value : this.props.defaultValue || (this.props.multiple ? [] : "")
          };
        },
        /**
         * @return {undefined}
         */
        componentWillMount : function() {
          /** @type {null} */
          this._pendingValue = null;
        },
        /**
         * @param {Object} nextProps
         * @return {undefined}
         */
        componentWillReceiveProps : function(nextProps) {
          if (!this.props.multiple && nextProps.multiple) {
            this.setState({
              value : [this.state.value]
            });
          } else {
            if (this.props.multiple) {
              if (!nextProps.multiple) {
                this.setState({
                  value : this.state.value[0]
                });
              }
            }
          }
        },
        /**
         * @return {?}
         */
        render : function() {
          var props = drawArc({}, this.props);
          return props.onChange = this._handleChange, props.value = null, template(props, this.props.children);
        },
        /**
         * @return {undefined}
         */
        componentDidMount : function() {
          init(this, r.getValue(this));
        },
        /**
         * @param {Object} nextProps
         * @return {undefined}
         */
        componentDidUpdate : function(nextProps) {
          var udataCur = r.getValue(this);
          /** @type {boolean} */
          var val = !!nextProps.multiple;
          /** @type {boolean} */
          var skip = !!this.props.multiple;
          if (null != udataCur || val !== skip) {
            init(this, udataCur);
          }
        },
        /**
         * @param {Function} event
         * @return {?}
         */
        _handleChange : function(event) {
          var handlerQueue;
          var eventTrigger = r.getOnChange(this);
          if (eventTrigger) {
            handlerQueue = eventTrigger.call(this, event);
          }
          var code;
          if (this.props.multiple) {
            /** @type {Array} */
            code = [];
            var options = event.target.options;
            /** @type {number} */
            var j = 0;
            var spaces = options.length;
            for (;spaces > j;j++) {
              if (options[j].selected) {
                code.push(options[j].value);
              }
            }
          } else {
            code = event.target.value;
          }
          return this._pendingValue = code, Push.asap(rvar, this), handlerQueue;
        }
      });
      module.exports = JsDiff;
    }, {
      "./AutoFocusMixin" : 2,
      "./LinkedValueUtils" : 26,
      "./Object.assign" : 29,
      "./ReactBrowserComponentMixin" : 32,
      "./ReactCompositeComponent" : 40,
      "./ReactDOM" : 43,
      "./ReactElement" : 58,
      "./ReactUpdates" : 91
    }],
    52 : [function(require, module, dataAndEvents) {
      /**
       * @param {(Node|string)} element
       * @param {number} depth
       * @param {(Node|string)} container
       * @param {number} lastDepth
       * @return {?}
       */
      function fixBoundaryPoint(element, depth, container, lastDepth) {
        return element === container && depth === lastDepth;
      }
      /**
       * @param {Object} el
       * @return {?}
       */
      function makeSelection(el) {
        /** @type {(Selection|null)} */
        var selection = document.selection;
        /** @type {(ControlRange|TextRange|null)} */
        var selectedRange = selection.createRange();
        var curr = selectedRange.text.length;
        var fromStart = selectedRange.duplicate();
        fromStart.moveToElementText(el);
        fromStart.setEndPoint("EndToStart", selectedRange);
        var prev = fromStart.text.length;
        var max = prev + curr;
        return{
          start : prev,
          end : max
        };
      }
      /**
       * @param {Object} text
       * @return {?}
       */
      function saveSelection(text) {
        /** @type {(Selection|null)} */
        var selection = window.getSelection && window.getSelection();
        if (!selection || 0 === selection.rangeCount) {
          return null;
        }
        /** @type {(Node|null)} */
        var anchorNode = selection.anchorNode;
        /** @type {number} */
        var anchorOffset = selection.anchorOffset;
        /** @type {(Node|null)} */
        var focusNode = selection.focusNode;
        /** @type {number} */
        var focusOffset = selection.focusOffset;
        /** @type {(Range|null)} */
        var ref = selection.getRangeAt(0);
        var keys = fixBoundaryPoint(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
        /** @type {number} */
        var length = keys ? 0 : ref.toString().length;
        /** @type {(Range|null)} */
        var range = ref.cloneRange();
        range.selectNodeContents(text);
        range.setEnd(ref.startContainer, ref.startOffset);
        var hasIndex = fixBoundaryPoint(range.startContainer, range.startOffset, range.endContainer, range.endOffset);
        /** @type {number} */
        var start = hasIndex ? 0 : range.toString().length;
        /** @type {number} */
        var end = start + length;
        /** @type {(Range|null)} */
        var detectionRange = document.createRange();
        detectionRange.setStart(anchorNode, anchorOffset);
        detectionRange.setEnd(focusNode, focusOffset);
        /** @type {boolean} */
        var isBackward = detectionRange.collapsed;
        return{
          start : isBackward ? end : start,
          end : isBackward ? start : end
        };
      }
      /**
       * @param {Element} el
       * @param {?} range
       * @return {undefined}
       */
      function getSelection(el, range) {
        var start;
        var end;
        var r = document.selection.createRange().duplicate();
        if ("undefined" == typeof range.end) {
          start = range.start;
          end = start;
        } else {
          if (range.start > range.end) {
            start = range.end;
            end = range.start;
          } else {
            start = range.start;
            end = range.end;
          }
        }
        r.moveToElementText(el);
        r.moveStart("character", start);
        r.setEndPoint("EndToStart", r);
        r.moveEnd("character", end - start);
        r.select();
      }
      /**
       * @param {Element} node
       * @param {?} range
       * @return {undefined}
       */
      function init(node, range) {
        if (window.getSelection) {
          /** @type {(Selection|null)} */
          var selection = window.getSelection();
          var olen = node[path()].length;
          /** @type {number} */
          var selector = Math.min(range.start, olen);
          /** @type {number} */
          var fn = "undefined" == typeof range.end ? selector : Math.min(range.end, olen);
          if (!selection.extend && selector > fn) {
            /** @type {number} */
            var select = fn;
            /** @type {number} */
            fn = selector;
            /** @type {number} */
            selector = select;
          }
          var startMarker = reduce(node, selector);
          var endMarker = reduce(node, fn);
          if (startMarker && endMarker) {
            /** @type {(Range|null)} */
            var nativeRange = document.createRange();
            nativeRange.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (selector > fn) {
              selection.addRange(nativeRange);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              nativeRange.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(nativeRange);
            }
          }
        }
      }
      var Block = require("./ExecutionEnvironment");
      var reduce = require("./getNodeForCharacterOffset");
      var path = require("./getTextContentAccessor");
      var skip = Block.canUseDOM && document.selection;
      var JsDiff = {
        /** @type {function (Object): ?} */
        getOffsets : skip ? makeSelection : saveSelection,
        /** @type {function (Element, ?): undefined} */
        setOffsets : skip ? getSelection : init
      };
      module.exports = JsDiff;
    }, {
      "./ExecutionEnvironment" : 23,
      "./getNodeForCharacterOffset" : 133,
      "./getTextContentAccessor" : 135
    }],
    53 : [function(require, module, dataAndEvents) {
      /**
       * @return {undefined}
       */
      function optgroup() {
        if (this.isMounted()) {
          this.forceUpdate();
        }
      }
      var Block = require("./AutoFocusMixin");
      var dom = require("./DOMPropertyOperations");
      var nodes = require("./LinkedValueUtils");
      var helper = require("./ReactBrowserComponentMixin");
      var BaseView = require("./ReactCompositeComponent");
      var filter = require("./ReactElement");
      var config = require("./ReactDOM");
      var $ = require("./ReactUpdates");
      var extend = require("./Object.assign");
      var each = require("./invariant");
      var getActual = require("./warning");
      var template = filter.createFactory(config.textarea.type);
      var JsDiff = BaseView.createClass({
        displayName : "ReactDOMTextarea",
        mixins : [Block, nodes.Mixin, helper],
        /**
         * @return {?}
         */
        getInitialState : function() {
          var defaultValue = this.props.defaultValue;
          var children = this.props.children;
          if (null != children) {
            getActual(false, "Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            each(null == defaultValue, "If you supply `defaultValue` on a <textarea>, do not pass children.");
            if (Array.isArray(children)) {
              each(children.length <= 1, "<textarea> can only have at most one child.");
              children = children[0];
            }
            /** @type {string} */
            defaultValue = "" + children;
          }
          if (null == defaultValue) {
            /** @type {string} */
            defaultValue = "";
          }
          var instance = nodes.getValue(this);
          return{
            initialValue : "" + (null != instance ? instance : defaultValue)
          };
        },
        /**
         * @return {?}
         */
        render : function() {
          var props = extend({}, this.props);
          return each(null == props.dangerouslySetInnerHTML, "`dangerouslySetInnerHTML` does not make sense on <textarea>."), props.defaultValue = null, props.value = null, props.onChange = this._handleChange, template(props, this.state.initialValue);
        },
        /**
         * @param {Function} Constructor
         * @param {number} mixins
         * @param {?} deepDataAndEvents
         * @return {undefined}
         */
        componentDidUpdate : function(Constructor, mixins, deepDataAndEvents) {
          var backgroundColor = nodes.getValue(this);
          if (null != backgroundColor) {
            var rootNode = this.getDOMNode();
            dom.setValueForProperty(rootNode, "value", "" + backgroundColor);
          }
        },
        /**
         * @param {Function} event
         * @return {?}
         */
        _handleChange : function(event) {
          var handlerQueue;
          var eventTrigger = nodes.getOnChange(this);
          return eventTrigger && (handlerQueue = eventTrigger.call(this, event)), $.asap(optgroup, this), handlerQueue;
        }
      });
      module.exports = JsDiff;
    }, {
      "./AutoFocusMixin" : 2,
      "./DOMPropertyOperations" : 13,
      "./LinkedValueUtils" : 26,
      "./Object.assign" : 29,
      "./ReactBrowserComponentMixin" : 32,
      "./ReactCompositeComponent" : 40,
      "./ReactDOM" : 43,
      "./ReactElement" : 58,
      "./ReactUpdates" : 91,
      "./invariant" : 140,
      "./warning" : 160
    }],
    54 : [function(require, module, dataAndEvents) {
      /**
       * @return {undefined}
       */
      function exception() {
        this.reinitializeTransaction();
      }
      var header = require("./ReactUpdates");
      var nodes = require("./Transaction");
      var expect = require("./Object.assign");
      var initialize = require("./emptyFunction");
      var methods = {
        initialize : initialize,
        /**
         * @return {undefined}
         */
        close : function() {
          /** @type {boolean} */
          input.isBatchingUpdates = false;
        }
      };
      var offsetLeft = {
        initialize : initialize,
        close : header.flushBatchedUpdates.bind(header)
      };
      /** @type {Array} */
      var start = [offsetLeft, methods];
      expect(exception.prototype, nodes.Mixin, {
        /**
         * @return {?}
         */
        getTransactionWrappers : function() {
          return start;
        }
      });
      var jQuery = new exception;
      var input = {
        isBatchingUpdates : false,
        /**
         * @param {Function} callback
         * @param {string} name
         * @param {string} value
         * @return {undefined}
         */
        batchedUpdates : function(callback, name, value) {
          /** @type {boolean} */
          var il = input.isBatchingUpdates;
          /** @type {boolean} */
          input.isBatchingUpdates = true;
          if (il) {
            callback(name, value);
          } else {
            jQuery.perform(callback, null, name, value);
          }
        }
      };
      module.exports = input;
    }, {
      "./Object.assign" : 29,
      "./ReactUpdates" : 91,
      "./Transaction" : 107,
      "./emptyFunction" : 121
    }],
    55 : [function(require, module, dataAndEvents) {
      /**
       * @return {undefined}
       */
      function result() {
        events.EventEmitter.injectReactEventListener(core);
        events.EventPluginHub.injectEventPluginOrder(tmp);
        events.EventPluginHub.injectInstanceHandle(nodes);
        events.EventPluginHub.injectMount(assert);
        events.EventPluginHub.injectEventPluginsByName({
          SimpleEventPlugin : Block,
          EnterLeaveEventPlugin : helper,
          ChangeEventPlugin : inspect,
          CompositionEventPlugin : selfClosing,
          MobileSafariClickEventPlugin : getActual,
          SelectEventPlugin : should,
          BeforeInputEventPlugin : expect
        });
        events.NativeComponent.injectGenericComponentClass(pdataOld);
        events.NativeComponent.injectComponentClasses({
          button : button,
          form : form,
          img : img,
          input : input,
          option : i,
          select : select,
          textarea : textarea,
          html : $("html"),
          head : $("head"),
          body : $("body")
        });
        events.CompositeComponent.injectMixin(udataCur);
        events.DOMProperty.injectDOMPropertyConfig(which);
        events.DOMProperty.injectDOMPropertyConfig(base64);
        events.EmptyComponent.injectEmptyComponent("noscript");
        events.Updates.injectReconcileTransaction(matcher.ReactReconcileTransaction);
        events.Updates.injectBatchingStrategy(suiteView);
        events.RootIndex.injectCreateReactRootIndex(data.canUseDOM ? getName.createReactRootIndex : item.createReactRootIndex);
        events.Component.injectEnvironment(matcher);
        var accept = data.canUseDOM && window.location.href || "";
        if (/[?&]react_perf\b/.test(accept)) {
          var dom = require("./ReactDefaultPerf");
          dom.start();
        }
      }
      var expect = require("./BeforeInputEventPlugin");
      var inspect = require("./ChangeEventPlugin");
      var getName = require("./ClientReactRootIndex");
      var selfClosing = require("./CompositionEventPlugin");
      var tmp = require("./DefaultEventPluginOrder");
      var helper = require("./EnterLeaveEventPlugin");
      var data = require("./ExecutionEnvironment");
      var which = require("./HTMLDOMPropertyConfig");
      var getActual = require("./MobileSafariClickEventPlugin");
      var udataCur = require("./ReactBrowserComponentMixin");
      var matcher = require("./ReactComponentBrowserEnvironment");
      var suiteView = require("./ReactDefaultBatchingStrategy");
      var pdataOld = require("./ReactDOMComponent");
      var button = require("./ReactDOMButton");
      var form = require("./ReactDOMForm");
      var img = require("./ReactDOMImg");
      var input = require("./ReactDOMInput");
      var i = require("./ReactDOMOption");
      var select = require("./ReactDOMSelect");
      var textarea = require("./ReactDOMTextarea");
      var core = require("./ReactEventListener");
      var events = require("./ReactInjection");
      var nodes = require("./ReactInstanceHandles");
      var assert = require("./ReactMount");
      var should = require("./SelectEventPlugin");
      var item = require("./ServerReactRootIndex");
      var Block = require("./SimpleEventPlugin");
      var base64 = require("./SVGDOMPropertyConfig");
      var $ = require("./createFullPageComponent");
      module.exports = {
        /** @type {function (): undefined} */
        inject : result
      };
    }, {
      "./BeforeInputEventPlugin" : 3,
      "./ChangeEventPlugin" : 8,
      "./ClientReactRootIndex" : 9,
      "./CompositionEventPlugin" : 10,
      "./DefaultEventPluginOrder" : 15,
      "./EnterLeaveEventPlugin" : 16,
      "./ExecutionEnvironment" : 23,
      "./HTMLDOMPropertyConfig" : 24,
      "./MobileSafariClickEventPlugin" : 28,
      "./ReactBrowserComponentMixin" : 32,
      "./ReactComponentBrowserEnvironment" : 38,
      "./ReactDOMButton" : 44,
      "./ReactDOMComponent" : 45,
      "./ReactDOMForm" : 46,
      "./ReactDOMImg" : 48,
      "./ReactDOMInput" : 49,
      "./ReactDOMOption" : 50,
      "./ReactDOMSelect" : 51,
      "./ReactDOMTextarea" : 53,
      "./ReactDefaultBatchingStrategy" : 54,
      "./ReactDefaultPerf" : 56,
      "./ReactEventListener" : 63,
      "./ReactInjection" : 64,
      "./ReactInstanceHandles" : 66,
      "./ReactMount" : 70,
      "./SVGDOMPropertyConfig" : 92,
      "./SelectEventPlugin" : 93,
      "./ServerReactRootIndex" : 94,
      "./SimpleEventPlugin" : 95,
      "./createFullPageComponent" : 116
    }],
    56 : [function(require, module, dataAndEvents) {
      /**
       * @param {number} n
       * @return {?}
       */
      function toDate(n) {
        return Math.floor(100 * n) / 100;
      }
      /**
       * @param {?} bench
       * @param {?} key
       * @param {number} dataAndEvents
       * @return {undefined}
       */
      function callback(bench, key, dataAndEvents) {
        bench[key] = (bench[key] || 0) + dataAndEvents;
      }
      var nodes = require("./DOMProperty");
      var rchecked = require("./ReactDefaultPerfAnalysis");
      var a = require("./ReactMount");
      var Block = require("./ReactPerf");
      var getName = require("./performanceNow");
      var data = {
        _allMeasurements : [],
        _mountStack : [0],
        _injected : false,
        /**
         * @return {undefined}
         */
        start : function() {
          if (!data._injected) {
            Block.injection.injectMeasure(data.measure);
          }
          /** @type {number} */
          data._allMeasurements.length = 0;
          /** @type {boolean} */
          Block.enableMeasure = true;
        },
        /**
         * @return {undefined}
         */
        stop : function() {
          /** @type {boolean} */
          Block.enableMeasure = false;
        },
        /**
         * @return {?}
         */
        getLastMeasurements : function() {
          return data._allMeasurements;
        },
        /**
         * @param {Array} value
         * @return {undefined}
         */
        printExclusive : function(value) {
          value = value || data._allMeasurements;
          var values = rchecked.getExclusiveSummary(value);
          console.table(values.map(function(data) {
            return{
              "Component class name" : data.componentName,
              "Total inclusive time (ms)" : toDate(data.inclusive),
              "Exclusive mount time (ms)" : toDate(data.exclusive),
              "Exclusive render time (ms)" : toDate(data.render),
              "Mount time per instance (ms)" : toDate(data.exclusive / data.count),
              "Render time per instance (ms)" : toDate(data.render / data.count),
              Instances : data.count
            };
          }));
        },
        /**
         * @param {Array} value
         * @return {undefined}
         */
        printInclusive : function(value) {
          value = value || data._allMeasurements;
          var values = rchecked.getInclusiveSummary(value);
          console.table(values.map(function(data) {
            return{
              "Owner > component" : data.componentName,
              "Inclusive time (ms)" : toDate(data.time),
              Instances : data.count
            };
          }));
          console.log("Total time:", rchecked.getTotalTime(value).toFixed(2) + " ms");
        },
        /**
         * @param {Array} value
         * @return {?}
         */
        getMeasurementsSummaryMap : function(value) {
          var values = rchecked.getInclusiveSummary(value, true);
          return values.map(function(data) {
            return{
              "Owner > component" : data.componentName,
              "Wasted time (ms)" : data.time,
              Instances : data.count
            };
          });
        },
        /**
         * @param {Array} value
         * @return {undefined}
         */
        printWasted : function(value) {
          value = value || data._allMeasurements;
          console.table(data.getMeasurementsSummaryMap(value));
          console.log("Total time:", rchecked.getTotalTime(value).toFixed(2) + " ms");
        },
        /**
         * @param {Array} value
         * @return {undefined}
         */
        printDOM : function(value) {
          value = value || data._allMeasurements;
          var values = rchecked.getDOMSummary(value);
          console.table(values.map(function(o) {
            var self = {};
            return self[nodes.ID_ATTRIBUTE_NAME] = o.id, self.type = o.type, self.args = JSON.stringify(o.args), self;
          }));
          console.log("Total time:", rchecked.getTotalTime(value).toFixed(2) + " ms");
        },
        /**
         * @param {?} eventName
         * @param {string} keepData
         * @param {number} dataAndEvents
         * @param {Array} args
         * @return {undefined}
         */
        _recordWrite : function(eventName, keepData, dataAndEvents, args) {
          var c = data._allMeasurements[data._allMeasurements.length - 1].writes;
          c[eventName] = c[eventName] || [];
          c[eventName].push({
            type : keepData,
            time : dataAndEvents,
            args : args
          });
        },
        /**
         * @param {string} eventType
         * @param {string} type
         * @param {Function} fn
         * @return {?}
         */
        measure : function(eventType, type, fn) {
          return function() {
            /** @type {Array} */
            var args = [];
            /** @type {number} */
            var j = 0;
            /** @type {number} */
            var len = arguments.length;
            for (;len > j;j++) {
              args.push(arguments[j]);
            }
            var node;
            var result;
            var name;
            if ("_renderNewRootComponent" === type || "flushBatchedUpdates" === type) {
              return data._allMeasurements.push({
                exclusive : {},
                inclusive : {},
                render : {},
                counts : {},
                writes : {},
                displayNames : {},
                totalTime : 0
              }), name = getName(), result = fn.apply(this, args), data._allMeasurements[data._allMeasurements.length - 1].totalTime = getName() - name, result;
            }
            if ("ReactDOMIDOperations" === eventType || "ReactComponentBrowserEnvironment" === eventType) {
              if (name = getName(), result = fn.apply(this, args), node = getName() - name, "mountImageIntoNode" === type) {
                var v = a.getID(args[1]);
                data._recordWrite(v, type, node, args[0]);
              } else {
                if ("dangerouslyProcessChildrenUpdates" === type) {
                  args[0].forEach(function(update) {
                    var options = {};
                    if (null !== update.fromIndex) {
                      options.fromIndex = update.fromIndex;
                    }
                    if (null !== update.toIndex) {
                      options.toIndex = update.toIndex;
                    }
                    if (null !== update.textContent) {
                      options.textContent = update.textContent;
                    }
                    if (null !== update.markupIndex) {
                      options.markup = args[1][update.markupIndex];
                    }
                    data._recordWrite(update.parentID, update.type, node, options);
                  });
                } else {
                  data._recordWrite(args[0], type, node, Array.prototype.slice.call(args, 1));
                }
              }
              return result;
            }
            if ("ReactCompositeComponent" !== eventType || "mountComponent" !== type && ("updateComponent" !== type && "_renderValidatedComponent" !== type)) {
              return fn.apply(this, args);
            }
            var key = "mountComponent" === type ? args[0] : this._rootNodeID;
            /** @type {boolean} */
            var length = "_renderValidatedComponent" === type;
            /** @type {boolean} */
            var constructing = "mountComponent" === type;
            /** @type {Array} */
            var arr = data._mountStack;
            var options = data._allMeasurements[data._allMeasurements.length - 1];
            if (length ? callback(options.counts, key, 1) : constructing && arr.push(0), name = getName(), result = fn.apply(this, args), node = getName() - name, length) {
              callback(options.render, key, node);
            } else {
              if (constructing) {
                var d = arr.pop();
                arr[arr.length - 1] += node;
                callback(options.exclusive, key, node - d);
                callback(options.inclusive, key, node);
              } else {
                callback(options.inclusive, key, node);
              }
            }
            return options.displayNames[key] = {
              current : this.constructor.displayName,
              owner : this._owner ? this._owner.constructor.displayName : "<root>"
            }, result;
          };
        }
      };
      module.exports = data;
    }, {
      "./DOMProperty" : 12,
      "./ReactDefaultPerfAnalysis" : 57,
      "./ReactMount" : 70,
      "./ReactPerf" : 75,
      "./performanceNow" : 153
    }],
    57 : [function(renderer, module, dataAndEvents) {
      /**
       * @param {Array} segments
       * @return {?}
       */
      function get(segments) {
        /** @type {number} */
        var pos = 0;
        /** @type {number} */
        var i = 0;
        for (;i < segments.length;i++) {
          var result = segments[i];
          pos += result.totalTime;
        }
        return pos;
      }
      /**
       * @param {Array} codeSegments
       * @return {?}
       */
      function resolveFile(codeSegments) {
        /** @type {Array} */
        var worker = [];
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          var index;
          var self = codeSegments[i];
          for (index in self.writes) {
            self.writes[index].forEach(function(msg) {
              worker.push({
                id : index,
                type : type[msg.type] || msg.type,
                args : msg.args
              });
            });
          }
        }
        return worker;
      }
      /**
       * @param {Array} obj
       * @return {?}
       */
      function loop(obj) {
        var key;
        var data = {};
        /** @type {number} */
        var i = 0;
        for (;i < obj.length;i++) {
          var options = obj[i];
          var actual = render({}, options.exclusive, options.inclusive);
          var p;
          for (p in actual) {
            key = options.displayNames[p].current;
            data[key] = data[key] || {
              componentName : key,
              inclusive : 0,
              exclusive : 0,
              render : 0,
              count : 0
            };
            if (options.render[p]) {
              data[key].render += options.render[p];
            }
            if (options.exclusive[p]) {
              data[key].exclusive += options.exclusive[p];
            }
            if (options.inclusive[p]) {
              data[key].inclusive += options.inclusive[p];
            }
            if (options.counts[p]) {
              data[key].count += options.counts[p];
            }
          }
        }
        /** @type {Array} */
        var keys = [];
        for (key in data) {
          if (data[key].exclusive >= time) {
            keys.push(data[key]);
          }
        }
        return keys.sort(function(options, event) {
          return event.exclusive - options.exclusive;
        }), keys;
      }
      /**
       * @param {Array} index
       * @param {boolean} dataAndEvents
       * @return {?}
       */
      function init(index, dataAndEvents) {
        var id;
        var results = {};
        /** @type {number} */
        var l = 0;
        for (;l < index.length;l++) {
          var template;
          var options = index[l];
          var mak = render({}, options.exclusive, options.inclusive);
          if (dataAndEvents) {
            template = toString(options);
          }
          var i;
          for (i in mak) {
            if (!dataAndEvents || template[i]) {
              var b = options.displayNames[i];
              /** @type {string} */
              id = b.owner + " > " + b.current;
              results[id] = results[id] || {
                componentName : id,
                time : 0,
                count : 0
              };
              if (options.inclusive[i]) {
                results[id].time += options.inclusive[i];
              }
              if (options.counts[i]) {
                results[id].count += options.counts[i];
              }
            }
          }
        }
        /** @type {Array} */
        var list = [];
        for (id in results) {
          if (results[id].time >= time) {
            list.push(results[id]);
          }
        }
        return list.sort(function(b, a) {
          return a.time - b.time;
        }), list;
      }
      /**
       * @param {Object} options
       * @return {?}
       */
      function toString(options) {
        var prop = {};
        /** @type {Array.<string>} */
        var codeSegments = Object.keys(options.writes);
        var context = render({}, options.exclusive, options.inclusive);
        var match;
        for (match in context) {
          /** @type {boolean} */
          var f = false;
          /** @type {number} */
          var i = 0;
          for (;i < codeSegments.length;i++) {
            if (0 === codeSegments[i].indexOf(match)) {
              /** @type {boolean} */
              f = true;
              break;
            }
          }
          if (!f) {
            if (options.counts[match] > 0) {
              /** @type {boolean} */
              prop[match] = true;
            }
          }
        }
        return prop;
      }
      var render = renderer("./Object.assign");
      /** @type {number} */
      var time = 1.2;
      var type = {
        mountImageIntoNode : "set innerHTML",
        INSERT_MARKUP : "set innerHTML",
        MOVE_EXISTING : "move",
        REMOVE_NODE : "remove",
        TEXT_CONTENT : "set textContent",
        updatePropertyByID : "update attribute",
        deletePropertyByID : "delete attribute",
        updateStylesByID : "update styles",
        updateInnerHTMLByID : "set innerHTML",
        dangerouslyReplaceNodeWithMarkupByID : "replace"
      };
      var JsDiff = {
        /** @type {function (Array): ?} */
        getExclusiveSummary : loop,
        /** @type {function (Array, boolean): ?} */
        getInclusiveSummary : init,
        /** @type {function (Array): ?} */
        getDOMSummary : resolveFile,
        /** @type {function (Array): ?} */
        getTotalTime : get
      };
      module.exports = JsDiff;
    }, {
      "./Object.assign" : 29
    }],
    58 : [function(require, module, dataAndEvents) {
      /**
       * @param {?} obj
       * @param {string} name
       * @return {undefined}
       */
      function get(obj, name) {
        Object.defineProperty(obj, name, {
          configurable : false,
          enumerable : true,
          /**
           * @return {?}
           */
          get : function() {
            return this._store ? this._store[name] : null;
          },
          /**
           * @param {?} elem
           * @return {undefined}
           */
          set : function(elem) {
            exec(false, "Don't set the " + name + " property of the component. Mutate the existing props object instead.");
            this._store[name] = elem;
          }
        });
      }
      /**
       * @param {?} foo
       * @return {undefined}
       */
      function fn(foo) {
        try {
          var list = {
            props : true
          };
          var name;
          for (name in list) {
            get(foo, name);
          }
          /** @type {boolean} */
          j = true;
        } catch (e) {
        }
      }
      var request = require("./ReactContext");
      var stream = require("./ReactCurrentOwner");
      var exec = require("./warning");
      var options = {
        key : true,
        ref : true
      };
      /** @type {boolean} */
      var j = false;
      /**
       * @param {string} name
       * @param {Object} value
       * @param {boolean} type
       * @param {string} e
       * @param {?} context
       * @param {Object} props
       * @return {?}
       */
      var Element = function(name, value, type, e, context, props) {
        return this.type = name, this.key = value, this.ref = type, this._owner = e, this._context = context, this._store = {
          validated : false,
          props : props
        }, j ? void Object.freeze(this) : void(this.props = props);
      };
      Element.prototype = {
        _isReactElement : true
      };
      fn(Element.prototype);
      /**
       * @param {string} name
       * @param {?} opt_attributes
       * @param {?} children
       * @return {?}
       */
      Element.createElement = function(name, opt_attributes, children) {
        var key;
        var object = {};
        /** @type {null} */
        var svg = null;
        /** @type {null} */
        var priority = null;
        if (null != opt_attributes) {
          priority = void 0 === opt_attributes.ref ? null : opt_attributes.ref;
          exec(null !== opt_attributes.key, "createElement(...): Encountered component with a `key` of null. In a future version, this will be treated as equivalent to the string 'null'; instead, provide an explicit key or use undefined.");
          /** @type {(null|string)} */
          svg = null == opt_attributes.key ? null : "" + opt_attributes.key;
          for (key in opt_attributes) {
            if (opt_attributes.hasOwnProperty(key)) {
              if (!options.hasOwnProperty(key)) {
                object[key] = opt_attributes[key];
              }
            }
          }
        }
        /** @type {number} */
        var l = arguments.length - 2;
        if (1 === l) {
          object.children = children;
        } else {
          if (l > 1) {
            /** @type {Array} */
            var args = Array(l);
            /** @type {number} */
            var i = 0;
            for (;l > i;i++) {
              args[i] = arguments[i + 2];
            }
            /** @type {Array} */
            object.children = args;
          }
        }
        if (name && name.defaultProps) {
          var iterable = name.defaultProps;
          for (key in iterable) {
            if ("undefined" == typeof object[key]) {
              object[key] = iterable[key];
            }
          }
        }
        return new Element(name, svg, priority, stream.current, request.current, object);
      };
      /**
       * @param {string} type
       * @return {?}
       */
      Element.createFactory = function(type) {
        var node = Element.createElement.bind(null, type);
        return node.type = type, node;
      };
      /**
       * @param {Object} self
       * @param {Function} a
       * @return {?}
       */
      Element.cloneAndReplaceProps = function(self, a) {
        var node = new Element(self.type, self.key, self.ref, self._owner, self._context, a);
        return node._store.validated = self._store.validated, node;
      };
      /**
       * @param {Object} s
       * @return {?}
       */
      Element.isValidElement = function(s) {
        /** @type {boolean} */
        var isValidElement = !(!s || !s._isReactElement);
        return isValidElement;
      };
      /** @type {function (string, Object, boolean, string, ?, Object): ?} */
      module.exports = Element;
    }, {
      "./ReactContext" : 41,
      "./ReactCurrentOwner" : 42,
      "./warning" : 160
    }],
    59 : [function(require, module, dataAndEvents) {
      /**
       * @return {?}
       */
      function test() {
        var doc = self.current;
        return doc && doc.constructor.displayName || void 0;
      }
      /**
       * @param {Object} method
       * @param {string} name
       * @return {undefined}
       */
      function fetch(method, name) {
        if (!method._store.validated) {
          if (!(null != method.key)) {
            /** @type {boolean} */
            method._store.validated = true;
            mixin("react_key_warning", 'Each child in an array should have a unique "key" prop.', method, name);
          }
        }
      }
      /**
       * @param {string} value
       * @param {Object} stats
       * @param {string} name
       * @return {undefined}
       */
      function cb(value, stats, name) {
        if (rchecked.test(value)) {
          mixin("react_numeric_key_warning", "Child objects should have non-numeric keys so ordering is preserved.", stats, name);
        }
      }
      /**
       * @param {string} source
       * @param {string} obj
       * @param {Object} target
       * @param {Object} props
       * @return {undefined}
       */
      function mixin(source, obj, target, props) {
        var param = test();
        var common = props.displayName;
        var ret = param || common;
        var expected = args[source];
        if (!expected.hasOwnProperty(ret)) {
          /** @type {boolean} */
          expected[ret] = true;
          obj += param ? " Check the render method of " + param + "." : " Check the renderComponent call using <" + common + ">.";
          /** @type {null} */
          var displayName = null;
          if (target._owner) {
            if (target._owner !== self.current) {
              displayName = target._owner.constructor.displayName;
              obj += " It was passed a child from " + displayName + ".";
            }
          }
          obj += " See http://fb.me/react-warning-keys for more information.";
          hasOwnProperty(source, {
            component : ret,
            componentOwner : displayName
          });
          console.warn(obj);
        }
      }
      /**
       * @return {undefined}
       */
      function register() {
        var tagName = test() || "";
        if (!opt_tagWhitelist.hasOwnProperty(tagName)) {
          /** @type {boolean} */
          opt_tagWhitelist[tagName] = true;
          hasOwnProperty("react_object_map_children");
        }
      }
      /**
       * @param {Object} node
       * @param {string} opt_key
       * @return {undefined}
       */
      function get(node, opt_key) {
        if (Array.isArray(node)) {
          /** @type {number} */
          var t = 0;
          for (;t < node.length;t++) {
            var key = node[t];
            if (nodes.isValidElement(key)) {
              fetch(key, opt_key);
            }
          }
        } else {
          if (nodes.isValidElement(node)) {
            /** @type {boolean} */
            node._store.validated = true;
          } else {
            if (node && "object" == typeof node) {
              register();
              var prop;
              for (prop in node) {
                cb(prop, node[prop], opt_key);
              }
            }
          }
        }
      }
      /**
       * @param {?} args
       * @param {Object} list
       * @param {?} context
       * @param {?} params
       * @return {undefined}
       */
      function exec(args, list, context, params) {
        var name;
        for (name in list) {
          if (list.hasOwnProperty(name)) {
            var result;
            try {
              result = list[name](context, name, args, params);
            } catch (subKey) {
              result = subKey;
            }
            if (result instanceof Error) {
              if (!(result.message in files)) {
                /** @type {boolean} */
                files[result.message] = true;
                hasOwnProperty("react_failed_descriptor_type_check", {
                  message : result.message
                });
              }
            }
          }
        }
      }
      var nodes = require("./ReactElement");
      var clone = require("./ReactPropTypeLocations");
      var self = require("./ReactCurrentOwner");
      var hasOwnProperty = require("./monitorCodeUse");
      var getActual = require("./warning");
      var args = {
        react_key_warning : {},
        react_numeric_key_warning : {}
      };
      var opt_tagWhitelist = {};
      var files = {};
      /** @type {RegExp} */
      var rchecked = /^\d+$/;
      var dom = {
        /**
         * @param {string} name
         * @param {?} opt_attributes
         * @param {?} c
         * @return {?}
         */
        createElement : function(name, opt_attributes, c) {
          getActual(null != name, "React.createElement: type should not be null or undefined. It should be a string (for DOM elements) or a ReactClass (for composite components).");
          var options = nodes.createElement.apply(this, arguments);
          if (null == options) {
            return options;
          }
          /** @type {number} */
          var i = 2;
          for (;i < arguments.length;i++) {
            get(arguments[i], name);
          }
          if (name) {
            var typePattern = name.displayName;
            if (name.propTypes) {
              exec(typePattern, name.propTypes, options.props, clone.prop);
            }
            if (name.contextTypes) {
              exec(typePattern, name.contextTypes, options._context, clone.context);
            }
          }
          return options;
        },
        /**
         * @param {string} type
         * @return {?}
         */
        createFactory : function(type) {
          var node = dom.createElement.bind(null, type);
          return node.type = type, node;
        }
      };
      module.exports = dom;
    }, {
      "./ReactCurrentOwner" : 42,
      "./ReactElement" : 58,
      "./ReactPropTypeLocations" : 78,
      "./monitorCodeUse" : 150,
      "./warning" : 160
    }],
    60 : [function(require, module, dataAndEvents) {
      /**
       * @return {?}
       */
      function promise() {
        return rs(resolve, "Trying to return null from a render, but no null placeholder component was injected."), resolve();
      }
      /**
       * @param {?} timeoutKey
       * @return {undefined}
       */
      function scheduleFunction(timeoutKey) {
        /** @type {boolean} */
        scheduledFunctions[timeoutKey] = true;
      }
      /**
       * @param {?} timeoutKey
       * @return {undefined}
       */
      function clearTimeout_(timeoutKey) {
        delete scheduledFunctions[timeoutKey];
      }
      /**
       * @param {?} timeoutKey
       * @return {?}
       */
      function removeFunctionWithId(timeoutKey) {
        return scheduledFunctions[timeoutKey];
      }
      var resolve;
      var selector = require("./ReactElement");
      var rs = require("./invariant");
      var scheduledFunctions = {};
      var injection = {
        /**
         * @param {string} elem
         * @return {undefined}
         */
        injectEmptyComponent : function(elem) {
          resolve = selector.createFactory(elem);
        }
      };
      var JsDiff = {
        /** @type {function (?): undefined} */
        deregisterNullComponentID : clearTimeout_,
        /** @type {function (): ?} */
        getEmptyComponent : promise,
        injection : injection,
        /** @type {function (?): ?} */
        isNullComponentID : removeFunctionWithId,
        /** @type {function (?): undefined} */
        registerNullComponentID : scheduleFunction
      };
      module.exports = JsDiff;
    }, {
      "./ReactElement" : 58,
      "./invariant" : 140
    }],
    61 : [function(dataAndEvents, module, deepDataAndEvents) {
      var JsDiff = {
        /**
         * @param {?} func
         * @param {string} isOut
         * @return {?}
         */
        guard : function(func, isOut) {
          return func;
        }
      };
      module.exports = JsDiff;
    }, {}],
    62 : [function($sanitize, module, dataAndEvents) {
      /**
       * @param {?} events
       * @return {undefined}
       */
      function eachEvent(events) {
        EventPluginHub.enqueueEvents(events);
        EventPluginHub.processEventQueue();
      }
      var EventPluginHub = $sanitize("./EventPluginHub");
      var JsDiff = {
        /**
         * @param {string} topLevelType
         * @param {string} topLevelTarget
         * @param {Error} topLevelTargetID
         * @param {Event} nativeEvent
         * @return {undefined}
         */
        handleTopLevel : function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {
          var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent);
          eachEvent(events);
        }
      };
      module.exports = JsDiff;
    }, {
      "./EventPluginHub" : 19
    }],
    63 : [function(require, module, dataAndEvents) {
      /**
       * @param {?} child
       * @return {?}
       */
      function inherit(child) {
        var c = node.getID(child);
        var id = nodes.getReactRootIDFromNodeID(c);
        var container = node.findReactContainerForID(id);
        var result = node.getFirstReactDOM(container);
        return result;
      }
      /**
       * @param {?} doAnimate
       * @param {Object} id
       * @return {undefined}
       */
      function renderer(doAnimate, id) {
        this.topLevelType = doAnimate;
        /** @type {Object} */
        this.nativeEvent = id;
        /** @type {Array} */
        this.ancestors = [];
      }
      /**
       * @param {?} value
       * @return {undefined}
       */
      function copy(value) {
        var scope = node.getFirstReactDOM(isFunction(value.nativeEvent)) || window;
        var options = scope;
        for (;options;) {
          value.ancestors.push(options);
          options = inherit(options);
        }
        /** @type {number} */
        var i = 0;
        var l = value.ancestors.length;
        for (;l > i;i++) {
          scope = value.ancestors[i];
          var last = node.getID(scope) || "";
          obj._handleTopLevel(value.topLevelType, scope, last, value.nativeEvent);
        }
      }
      /**
       * @param {?} callback
       * @return {undefined}
       */
      function exports(callback) {
        var actual = getActual(window);
        callback(actual);
      }
      var event = require("./EventListener");
      var Block = require("./ExecutionEnvironment");
      var assert = require("./PooledClass");
      var nodes = require("./ReactInstanceHandles");
      var node = require("./ReactMount");
      var jQuery = require("./ReactUpdates");
      var createObject = require("./Object.assign");
      var isFunction = require("./getEventTarget");
      var getActual = require("./getUnboundedScrollPosition");
      createObject(renderer.prototype, {
        /**
         * @return {undefined}
         */
        destructor : function() {
          /** @type {null} */
          this.topLevelType = null;
          /** @type {null} */
          this.nativeEvent = null;
          /** @type {number} */
          this.ancestors.length = 0;
        }
      });
      assert.addPoolingTo(renderer, assert.twoArgumentPooler);
      var obj = {
        _enabled : true,
        _handleTopLevel : null,
        WINDOW_HANDLE : Block.canUseDOM ? window : null,
        /**
         * @param {?} id
         * @return {undefined}
         */
        setHandleTopLevel : function(id) {
          obj._handleTopLevel = id;
        },
        /**
         * @param {boolean} enabled
         * @return {undefined}
         */
        setEnabled : function(enabled) {
          /** @type {boolean} */
          obj._enabled = !!enabled;
        },
        /**
         * @return {?}
         */
        isEnabled : function() {
          return obj._enabled;
        },
        /**
         * @param {?} element
         * @param {string} type
         * @param {?} arg
         * @return {?}
         */
        trapBubbledEvent : function(element, type, arg) {
          var src = arg;
          if (src) {
            return event.listen(src, type, obj.dispatchEvent.bind(null, element));
          }
        },
        /**
         * @param {Object} me
         * @param {string} func
         * @param {?} o
         * @return {?}
         */
        trapCapturedEvent : function(me, func, o) {
          var s = o;
          if (s) {
            return event.capture(s, func, obj.dispatchEvent.bind(null, me));
          }
        },
        /**
         * @param {Object} object
         * @return {undefined}
         */
        monitorScrollValue : function(object) {
          var obj = exports.bind(null, object);
          event.listen(window, "scroll", obj);
          event.listen(window, "resize", obj);
        },
        /**
         * @param {Event} event
         * @param {Event} src
         * @return {undefined}
         */
        dispatchEvent : function(event, src) {
          if (obj._enabled) {
            var name = renderer.getPooled(event, src);
            try {
              jQuery.batchedUpdates(copy, name);
            } finally {
              renderer.release(name);
            }
          }
        }
      };
      module.exports = obj;
    }, {
      "./EventListener" : 18,
      "./ExecutionEnvironment" : 23,
      "./Object.assign" : 29,
      "./PooledClass" : 30,
      "./ReactInstanceHandles" : 66,
      "./ReactMount" : 70,
      "./ReactUpdates" : 91,
      "./getEventTarget" : 131,
      "./getUnboundedScrollPosition" : 136
    }],
    64 : [function(require, module, dataAndEvents) {
      var Block = require("./DOMProperty");
      var nodes = require("./EventPluginHub");
      var helper = require("./ReactComponent");
      var inspect = require("./ReactCompositeComponent");
      var selfClosing = require("./ReactEmptyComponent");
      var getActual = require("./ReactBrowserEventEmitter");
      var assert = require("./ReactNativeComponent");
      var should = require("./ReactPerf");
      var expect = require("./ReactRootIndex");
      var getName = require("./ReactUpdates");
      var EventEmitter = {
        Component : helper.injection,
        CompositeComponent : inspect.injection,
        DOMProperty : Block.injection,
        EmptyComponent : selfClosing.injection,
        EventPluginHub : nodes.injection,
        EventEmitter : getActual.injection,
        NativeComponent : assert.injection,
        Perf : should.injection,
        RootIndex : expect.injection,
        Updates : getName.injection
      };
      module.exports = EventEmitter;
    }, {
      "./DOMProperty" : 12,
      "./EventPluginHub" : 19,
      "./ReactBrowserEventEmitter" : 33,
      "./ReactComponent" : 37,
      "./ReactCompositeComponent" : 40,
      "./ReactEmptyComponent" : 60,
      "./ReactNativeComponent" : 73,
      "./ReactPerf" : 75,
      "./ReactRootIndex" : 82,
      "./ReactUpdates" : 91
    }],
    65 : [function(require, module, dataAndEvents) {
      /**
       * @param {?} objects
       * @return {?}
       */
      function addRange(objects) {
        return include(document.documentElement, objects);
      }
      var assert = require("./ReactDOMSelection");
      var include = require("./containsNode");
      var nodes = require("./focusNode");
      var getActual = require("./getActiveElement");
      var me = {
        /**
         * @param {Element} elem
         * @return {?}
         */
        hasSelectionCapabilities : function(elem) {
          return elem && ("INPUT" === elem.nodeName && "text" === elem.type || ("TEXTAREA" === elem.nodeName || "true" === elem.contentEditable));
        },
        /**
         * @return {?}
         */
        getSelectionInformation : function() {
          var focusedElem = getActual();
          return{
            focusedElem : focusedElem,
            selectionRange : me.hasSelectionCapabilities(focusedElem) ? me.getSelection(focusedElem) : null
          };
        },
        /**
         * @param {?} priorSelectionInformation
         * @return {undefined}
         */
        restoreSelection : function(priorSelectionInformation) {
          var actual = getActual();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (actual !== priorFocusedElem) {
            if (addRange(priorFocusedElem)) {
              if (me.hasSelectionCapabilities(priorFocusedElem)) {
                me.setSelection(priorFocusedElem, priorSelectionRange);
              }
              nodes(priorFocusedElem);
            }
          }
        },
        /**
         * @param {Object} input
         * @return {?}
         */
        getSelection : function(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start : input.selectionStart,
              end : input.selectionEnd
            };
          } else {
            if (document.selection && "INPUT" === input.nodeName) {
              /** @type {(ControlRange|TextRange|null)} */
              var range2 = document.selection.createRange();
              if (range2.parentElement() === input) {
                selection = {
                  start : -range2.moveStart("character", -input.value.length),
                  end : -range2.moveEnd("character", -input.value.length)
                };
              }
            } else {
              selection = assert.getOffsets(input);
            }
          }
          return selection || {
            start : 0,
            end : 0
          };
        },
        /**
         * @param {Element} input
         * @param {?} selection
         * @return {undefined}
         */
        setSelection : function(input, selection) {
          var start = selection.start;
          var end = selection.end;
          if ("undefined" == typeof end && (end = start), "selectionStart" in input) {
            input.selectionStart = start;
            /** @type {number} */
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            if (document.selection && "INPUT" === input.nodeName) {
              var r = input.createTextRange();
              r.collapse(true);
              r.moveStart("character", start);
              r.moveEnd("character", end - start);
              r.select();
            } else {
              assert.setOffsets(input, selection);
            }
          }
        }
      };
      module.exports = me;
    }, {
      "./ReactDOMSelection" : 52,
      "./containsNode" : 114,
      "./focusNode" : 125,
      "./getActiveElement" : 127
    }],
    66 : [function(require, module, dataAndEvents) {
      /**
       * @param {?} obj
       * @return {?}
       */
      function isArray(obj) {
        return name + obj.toString(36);
      }
      /**
       * @param {string} object
       * @param {string} x
       * @return {?}
       */
      function debug(object, x) {
        return object.charAt(x) === name || x === object.length;
      }
      /**
       * @param {string} value
       * @return {?}
       */
      function isPlainObject(value) {
        return "" === value || value.charAt(0) === name && value.charAt(value.length - 1) !== name;
      }
      /**
       * @param {string} methodName
       * @param {string} arg
       * @return {?}
       */
      function fn(methodName, arg) {
        return 0 === arg.indexOf(methodName) && debug(arg, methodName.length);
      }
      /**
       * @param {string} t
       * @return {?}
       */
      function add(t) {
        return t ? t.substr(0, t.lastIndexOf(name)) : "";
      }
      /**
       * @param {string} val
       * @param {string} value
       * @return {?}
       */
      function attr(val, value) {
        if (test(isPlainObject(val) && isPlainObject(value), "getNextDescendantID(%s, %s): Received an invalid React DOM ID.", val, value), test(fn(val, value), "getNextDescendantID(...): React has made an invalid assumption about the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.", val, value), val === value) {
          return val;
        }
        var el = val.length + i;
        var d = el;
        for (;d < value.length && !debug(value, d);d++) {
        }
        return value.substr(0, d);
      }
      /**
       * @param {string} data
       * @param {string} result
       * @return {?}
       */
      function success(data, result) {
        /** @type {number} */
        var ijv = Math.min(data.length, result.length);
        if (0 === ijv) {
          return "";
        }
        /** @type {number} */
        var c = 0;
        /** @type {number} */
        var i = 0;
        for (;ijv >= i;i++) {
          if (debug(data, i) && debug(result, i)) {
            /** @type {number} */
            c = i;
          } else {
            if (data.charAt(i) !== result.charAt(i)) {
              break;
            }
          }
        }
        var value = data.substr(0, c);
        return test(isPlainObject(value), "getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s", data, result, value), value;
      }
      /**
       * @param {string} count
       * @param {string} item
       * @param {Function} callback
       * @param {?} data
       * @param {boolean} recurring
       * @param {boolean} commas
       * @return {undefined}
       */
      function cb(count, item, callback, data, recurring, commas) {
        count = count || "";
        item = item || "";
        test(count !== item, "traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.", count);
        var value = fn(item, count);
        test(value || fn(count, item), "traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do not have a parent path.", count, item);
        /** @type {number} */
        var index = 0;
        /** @type {Function} */
        var next = value ? add : attr;
        /** @type {string} */
        var i = count;
        for (;;i = next(i, item)) {
          var ret;
          if (recurring && i === count || (commas && i === item || (ret = callback(i, value, data))), ret === false || i === item) {
            break;
          }
          test(index++ < length, "traverseParentPath(%s, %s, ...): Detected an infinite loop while traversing the React DOM ID tree. This may be due to malformed IDs: %s", count, item);
        }
      }
      var Block = require("./ReactRootIndex");
      var test = require("./invariant");
      /** @type {string} */
      var name = ".";
      /** @type {number} */
      var i = name.length;
      /** @type {number} */
      var length = 100;
      var JsDiff = {
        /**
         * @return {?}
         */
        createReactRootID : function() {
          return isArray(Block.createReactRootIndex());
        },
        /**
         * @param {number} far
         * @param {number} near
         * @return {?}
         */
        createReactID : function(far, near) {
          return far + near;
        },
        /**
         * @param {string} cookie
         * @return {?}
         */
        getReactRootIDFromNodeID : function(cookie) {
          if (cookie && (cookie.charAt(0) === name && cookie.length > 1)) {
            var eqPos = cookie.indexOf(name, 1);
            return eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
          }
          return null;
        },
        /**
         * @param {string} value
         * @param {string} attr
         * @param {Function} arr
         * @param {?} inplace
         * @param {?} x
         * @return {undefined}
         */
        traverseEnterLeave : function(value, attr, arr, inplace, x) {
          var val = success(value, attr);
          if (val !== value) {
            cb(value, val, arr, inplace, false, true);
          }
          if (val !== attr) {
            cb(val, attr, arr, x, true, false);
          }
        },
        /**
         * @param {string} d
         * @param {Function} act
         * @param {?} x
         * @return {undefined}
         */
        traverseTwoPhase : function(d, act, x) {
          if (d) {
            cb("", d, act, x, true, false);
            cb(d, "", act, x, false, true);
          }
        },
        /**
         * @param {string} store
         * @param {Function} callback
         * @param {?} inplace
         * @return {undefined}
         */
        traverseAncestors : function(store, callback, inplace) {
          cb("", store, callback, inplace, true, false);
        },
        /** @type {function (string, string): ?} */
        _getFirstCommonAncestorID : success,
        /** @type {function (string, string): ?} */
        _getNextDescendantID : attr,
        /** @type {function (string, string): ?} */
        isAncestorIDOf : fn,
        SEPARATOR : name
      };
      module.exports = JsDiff;
    }, {
      "./ReactRootIndex" : 82,
      "./invariant" : 140
    }],
    67 : [function(require, module, dataAndEvents) {
      /**
       * @return {undefined}
       */
      function fn() {
        if (utils._isLegacyCallWarningEnabled) {
          var message = request.current;
          var tagName = message && message.constructor ? message.constructor.displayName : "";
          if (!tagName) {
            /** @type {string} */
            tagName = "Something";
          }
          if (!opt_tagWhitelist.hasOwnProperty(tagName)) {
            /** @type {boolean} */
            opt_tagWhitelist[tagName] = true;
            isArray(false, tagName + " is calling a React component directly. Use a factory or JSX instead. See: http://fb.me/react-legacyfactory");
            apply("react_legacy_factory_call", {
              version : 3,
              name : tagName
            });
          }
        }
      }
      /**
       * @param {Function} arg
       * @return {undefined}
       */
      function exec(arg) {
        var b = arg.prototype && ("function" == typeof arg.prototype.mountComponent && "function" == typeof arg.prototype.receiveComponent);
        if (b) {
          isArray(false, "Did not expect to get a React class here. Use `Component` instead of `Component.type` or `this.constructor`.");
        } else {
          if (!arg._reactWarnedForThisType) {
            try {
              /** @type {boolean} */
              arg._reactWarnedForThisType = true;
            } catch (c) {
            }
            apply("react_non_component_in_jsx", {
              version : 3,
              name : arg.name
            });
          }
          isArray(false, "This JSX uses a plain function. Only React components are valid in React's JSX transform.");
        }
      }
      /**
       * @param {Object} el
       * @return {undefined}
       */
      function func(el) {
        isArray(false, "Do not pass React.DOM." + el.type + ' to JSX or createFactory. Use the string "' + el.type + '" instead.');
      }
      /**
       * @param {Object} t
       * @param {Object} actual
       * @return {undefined}
       */
      function callback(t, actual) {
        if ("function" == typeof actual) {
          var key;
          for (key in actual) {
            if (actual.hasOwnProperty(key)) {
              var a = actual[key];
              if ("function" == typeof a) {
                var target = a.bind(actual);
                var name;
                for (name in a) {
                  if (a.hasOwnProperty(name)) {
                    target[name] = a[name];
                  }
                }
                t[key] = target;
              } else {
                t[key] = a;
              }
            }
          }
        }
      }
      var request = require("./ReactCurrentOwner");
      var getActual = require("./invariant");
      var apply = require("./monitorCodeUse");
      var isArray = require("./warning");
      var opt_tagWhitelist = {};
      var fragment = {};
      var acceptable = {};
      var utils = {};
      /**
       * @param {?} expect
       * @return {?}
       */
      utils.wrapCreateFactory = function(expect) {
        /**
         * @param {Object} fn
         * @return {?}
         */
        var call = function(fn) {
          return "function" != typeof fn ? expect(fn) : fn.isReactNonLegacyFactory ? (func(fn), expect(fn.type)) : fn.isReactLegacyFactory ? expect(fn.type) : (exec(fn), fn);
        };
        return call;
      };
      /**
       * @param {Function} matcherFunction
       * @return {?}
       */
      utils.wrapCreateElement = function(matcherFunction) {
        /**
         * @param {Function} fn
         * @param {?} thisValue
         * @param {?} obj
         * @return {?}
         */
        var invoke = function(fn, thisValue, obj) {
          if ("function" != typeof fn) {
            return matcherFunction.apply(this, arguments);
          }
          var args;
          return fn.isReactNonLegacyFactory ? (func(fn), args = Array.prototype.slice.call(arguments, 0), args[0] = fn.type, matcherFunction.apply(this, args)) : fn.isReactLegacyFactory ? (fn._isMockFunction && (fn.type._mockedReactClassConstructor = fn), args = Array.prototype.slice.call(arguments, 0), args[0] = fn.type, matcherFunction.apply(this, args)) : (exec(fn), fn.apply(null, Array.prototype.slice.call(arguments, 1)));
        };
        return invoke;
      };
      /**
       * @param {Function} f
       * @return {?}
       */
      utils.wrapFactory = function(f) {
        getActual("function" == typeof f, "This is suppose to accept a element factory");
        /**
         * @param {?} a
         * @param {?} off
         * @return {?}
         */
        var t = function(a, off) {
          return fn(), f.apply(this, arguments);
        };
        return callback(t, f.type), t.isReactLegacyFactory = fragment, t.type = f.type, t;
      };
      /**
       * @param {?} err
       * @return {?}
       */
      utils.markNonLegacyFactory = function(err) {
        return err.isReactNonLegacyFactory = acceptable, err;
      };
      /**
       * @param {?} fmt
       * @return {?}
       */
      utils.isValidFactory = function(fmt) {
        return "function" == typeof fmt && fmt.isReactLegacyFactory === fragment;
      };
      /**
       * @param {?} fmt
       * @return {?}
       */
      utils.isValidClass = function(fmt) {
        return isArray(false, "isValidClass is deprecated and will be removed in a future release. Use a more specific validator instead."), utils.isValidFactory(fmt);
      };
      /** @type {boolean} */
      utils._isLegacyCallWarningEnabled = true;
      module.exports = utils;
    }, {
      "./ReactCurrentOwner" : 42,
      "./invariant" : 140,
      "./monitorCodeUse" : 150,
      "./warning" : 160
    }],
    68 : [function(Event, module, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @return {undefined}
       */
      function prop(name, value) {
        /** @type {string} */
        this.value = name;
        /** @type {Object} */
        this.requestChange = value;
      }
      /**
       * @param {string} name
       * @return {?}
       */
      function id(name) {
        var typePattern = {
          value : "undefined" == typeof name ? self.PropTypes.any.isRequired : name.isRequired,
          requestChange : self.PropTypes.func.isRequired
        };
        return self.PropTypes.shape(typePattern);
      }
      var self = Event("./React");
      prop.PropTypes = {
        /** @type {function (string): ?} */
        link : id
      };
      /** @type {function (string, Object): undefined} */
      module.exports = prop;
    }, {
      "./React" : 31
    }],
    69 : [function($sanitize, module, dataAndEvents) {
      var parseMarkupCore = $sanitize("./adler32");
      var attr = {
        CHECKSUM_ATTR_NAME : "data-react-checksum",
        /**
         * @param {string} markup
         * @return {?}
         */
        addChecksumToMarkup : function(markup) {
          var allElements = parseMarkupCore(markup);
          return markup.replace(">", " " + attr.CHECKSUM_ATTR_NAME + '="' + allElements + '">');
        },
        /**
         * @param {?} markup
         * @param {Element} element
         * @return {?}
         */
        canReuseMarkup : function(markup, element) {
          var existingChecksum = element.getAttribute(attr.CHECKSUM_ATTR_NAME);
          existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
          var allElements = parseMarkupCore(markup);
          return allElements === existingChecksum;
        }
      };
      module.exports = attr;
    }, {
      "./adler32" : 110
    }],
    70 : [function($, module, dataAndEvents) {
      /**
       * @param {?} element
       * @return {?}
       */
      function animate(element) {
        var child = jQuery(element);
        return child && _.getID(child);
      }
      /**
       * @param {?} element
       * @return {?}
       */
      function add(element) {
        var id = getId(element);
        if (id) {
          if (ids.hasOwnProperty(id)) {
            var match = ids[id];
            if (match !== element) {
              log(!callback(match, id), "ReactMount: Two valid but unequal nodes with the same `%s`: %s", optgroup, id);
              ids[id] = element;
            }
          } else {
            ids[id] = element;
          }
        }
        return id;
      }
      /**
       * @param {Object} element
       * @return {?}
       */
      function getId(element) {
        return element && (element.getAttribute && element.getAttribute(optgroup)) || "";
      }
      /**
       * @param {HTMLElement} element
       * @param {?} id
       * @return {undefined}
       */
      function find(element, id) {
        var key = getId(element);
        if (key !== id) {
          delete ids[key];
        }
        element.setAttribute(optgroup, id);
        /** @type {HTMLElement} */
        ids[id] = element;
      }
      /**
       * @param {?} id
       * @return {?}
       */
      function map(id) {
        return ids.hasOwnProperty(id) && callback(ids[id], id) || (ids[id] = _.findReactNodeByID(id)), ids[id];
      }
      /**
       * @param {Object} elem
       * @param {?} id
       * @return {?}
       */
      function callback(elem, id) {
        if (elem) {
          log(getId(elem) === id, "ReactMount: Unexpected modification of `%s`", optgroup);
          var el = _.findReactContainerForID(id);
          if (el && contains(el, elem)) {
            return true;
          }
        }
        return false;
      }
      /**
       * @param {?} key
       * @return {undefined}
       */
      function getKeyAsNumber_(key) {
        delete ids[key];
      }
      /**
       * @param {?} key
       * @return {?}
       */
      function once(key) {
        var index = ids[key];
        return index && callback(index, key) ? void(lineStart = index) : false;
      }
      /**
       * @param {string} id
       * @return {?}
       */
      function cancelAnimationFrame(id) {
        /** @type {null} */
        lineStart = null;
        self.traverseAncestors(id, once);
        /** @type {null} */
        var j = lineStart;
        return lineStart = null, j;
      }
      var emptyJ = $("./DOMProperty");
      var $spy = $("./ReactBrowserEventEmitter");
      var $pages = $("./ReactCurrentOwner");
      var d = $("./ReactElement");
      var q = $("./ReactLegacyElement");
      var self = $("./ReactInstanceHandles");
      var inp = $("./ReactPerf");
      var contains = $("./containsNode");
      var group = $("./deprecated");
      var jQuery = $("./getReactRootElementInContainer");
      var cb = $("./instantiateReactComponent");
      var log = $("./invariant");
      var tmpl = $("./shouldUpdateReactComponent");
      var hidden = $("./warning");
      var mixIn = q.wrapCreateElement(d.createElement);
      var key = self.SEPARATOR;
      var optgroup = emptyJ.ID_ATTRIBUTE_NAME;
      var ids = {};
      /** @type {number} */
      var num = 1;
      /** @type {number} */
      var ELEMENT_NODE_TYPE = 9;
      var paramNames = {};
      var elements = {};
      var viewItems = {};
      /** @type {Array} */
      var SplitSolver_solve_nodes = [];
      /** @type {null} */
      var lineStart = null;
      var _ = {
        _instancesByReactRootID : paramNames,
        /**
         * @param {?} container
         * @param {Function} renderCallback
         * @return {undefined}
         */
        scrollMonitor : function(container, renderCallback) {
          renderCallback();
        },
        /**
         * @param {?} prevComponent
         * @param {Object} nextComponent
         * @param {?} container
         * @param {Function} callback
         * @return {?}
         */
        _updateRootComponent : function(prevComponent, nextComponent, container, callback) {
          var nextProps = nextComponent.props;
          return _.scrollMonitor(container, function() {
            prevComponent.replaceProps(nextProps, callback);
          }), viewItems[animate(container)] = jQuery(container), prevComponent;
        },
        /**
         * @param {?} nextComponent
         * @param {Node} container
         * @return {?}
         */
        _registerComponent : function(nextComponent, container) {
          log(container && (container.nodeType === num || container.nodeType === ELEMENT_NODE_TYPE), "_registerComponent(...): Target container is not a DOM element.");
          $spy.ensureScrollValueMonitoring();
          var p = _.registerContainer(container);
          return paramNames[p] = nextComponent, p;
        },
        _renderNewRootComponent : inp.measure("ReactMount", "_renderNewRootComponent", function(outErr, container, shouldReuseMarkup) {
          hidden(null == $pages.current, "_renderNewRootComponent(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.");
          var nextComponent = cb(outErr, null);
          var reactRootID = _._registerComponent(nextComponent, container);
          return nextComponent.mountComponentIntoNode(reactRootID, container, shouldReuseMarkup), viewItems[reactRootID] = jQuery(container), nextComponent;
        }),
        /**
         * @param {Object} data
         * @param {?} container
         * @param {Function} callback
         * @return {?}
         */
        render : function(data, container, callback) {
          log(d.isValidElement(data), "renderComponent(): Invalid component element.%s", "string" == typeof data ? " Instead of passing an element string, make sure to instantiate it by passing it to React.createElement." : q.isValidFactory(data) ? " Instead of passing a component class, make sure to instantiate it by passing it to React.createElement." : "undefined" != typeof data.props ? " This may be caused by unintentionally loading two independent copies of React." : "");
          var prevComponent = paramNames[animate(container)];
          if (prevComponent) {
            var labelTemplateString = prevComponent._currentElement;
            if (tmpl(labelTemplateString, data)) {
              return _._updateRootComponent(prevComponent, data, container, callback);
            }
            _.unmountComponentAtNode(container);
          }
          var body = jQuery(container);
          var scroll = body && _.isRenderedByReact(body);
          var context = scroll && !prevComponent;
          var e = _._renderNewRootComponent(data, container, context);
          return callback && callback.call(e), e;
        },
        /**
         * @param {?} constructor
         * @param {?} props
         * @param {Object} value
         * @return {?}
         */
        constructAndRenderComponent : function(constructor, props, value) {
          var nextProps = mixIn(constructor, props);
          return _.render(nextProps, value);
        },
        /**
         * @param {?} constructor
         * @param {?} props
         * @param {?} id
         * @return {?}
         */
        constructAndRenderComponentByID : function(constructor, props, id) {
          /** @type {(HTMLElement|null)} */
          var data = document.getElementById(id);
          return log(data, 'Tried to get element with id of "%s" but it is not present on the page.', id), _.constructAndRenderComponent(constructor, props, data);
        },
        /**
         * @param {(Node|string)} element
         * @return {?}
         */
        registerContainer : function(element) {
          var id = animate(element);
          return id && (id = self.getReactRootIDFromNodeID(id)), id || (id = self.createReactRootID()), elements[id] = element, id;
        },
        /**
         * @param {?} container
         * @return {?}
         */
        unmountComponentAtNode : function(container) {
          hidden(null == $pages.current, "unmountComponentAtNode(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.");
          var index = animate(container);
          var name = paramNames[index];
          return name ? (_.unmountComponentFromNode(name, container), delete paramNames[index], delete elements[index], delete viewItems[index], true) : false;
        },
        /**
         * @param {?} instance
         * @param {Object} container
         * @return {undefined}
         */
        unmountComponentFromNode : function(instance, container) {
          instance.unmountComponent();
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            container = container.documentElement;
          }
          for (;container.lastChild;) {
            container.removeChild(container.lastChild);
          }
        },
        /**
         * @param {?} id
         * @return {?}
         */
        findReactContainerForID : function(id) {
          var index = self.getReactRootIDFromNodeID(id);
          var el = elements[index];
          var item = viewItems[index];
          if (item && item.parentNode !== el) {
            log(getId(item) === index, "ReactMount: Root element ID differed from reactRootID.");
            var first = el.firstChild;
            if (first && index === getId(first)) {
              viewItems[index] = first;
            } else {
              console.warn("ReactMount: Root element has been removed from its original container. New container:", item.parentNode);
            }
          }
          return el;
        },
        /**
         * @param {?} id
         * @return {?}
         */
        findReactNodeByID : function(id) {
          var related = _.findReactContainerForID(id);
          return _.findComponentRoot(related, id);
        },
        /**
         * @param {?} node
         * @return {?}
         */
        isRenderedByReact : function(node) {
          if (1 !== node.nodeType) {
            return false;
          }
          var h = _.getID(node);
          return h ? h.charAt(0) === key : false;
        },
        /**
         * @param {?} node
         * @return {?}
         */
        getFirstReactDOM : function(node) {
          var current = node;
          for (;current && current.parentNode !== current;) {
            if (_.isRenderedByReact(current)) {
              return current;
            }
            current = current.parentNode;
          }
          return null;
        },
        /**
         * @param {?} child
         * @param {string} id
         * @return {?}
         */
        findComponentRoot : function(child, id) {
          /** @type {Array} */
          var nodes = SplitSolver_solve_nodes;
          /** @type {number} */
          var i = 0;
          var div = cancelAnimationFrame(id) || child;
          nodes[0] = div.firstChild;
          /** @type {number} */
          nodes.length = 1;
          for (;i < nodes.length;) {
            var activeElement;
            var el = nodes[i++];
            for (;el;) {
              var type = _.getID(el);
              if (type) {
                if (id === type) {
                  activeElement = el;
                } else {
                  if (self.isAncestorIDOf(type, id)) {
                    /** @type {number} */
                    nodes.length = i = 0;
                    nodes.push(el.firstChild);
                  }
                }
              } else {
                nodes.push(el.firstChild);
              }
              el = el.nextSibling;
            }
            if (activeElement) {
              return nodes.length = 0, activeElement;
            }
          }
          /** @type {number} */
          nodes.length = 0;
          log(false, "findComponentRoot(..., %s): Unable to find element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID `%s`.", id, _.getID(child));
        },
        /** @type {function (?): ?} */
        getReactRootID : animate,
        /** @type {function (?): ?} */
        getID : add,
        /** @type {function (HTMLElement, ?): undefined} */
        setID : find,
        /** @type {function (?): ?} */
        getNode : map,
        /** @type {function (?): undefined} */
        purgeID : getKeyAsNumber_
      };
      _.renderComponent = group("ReactMount", "renderComponent", "render", this, _.render);
      module.exports = _;
    }, {
      "./DOMProperty" : 12,
      "./ReactBrowserEventEmitter" : 33,
      "./ReactCurrentOwner" : 42,
      "./ReactElement" : 58,
      "./ReactInstanceHandles" : 66,
      "./ReactLegacyElement" : 67,
      "./ReactPerf" : 75,
      "./containsNode" : 114,
      "./deprecated" : 120,
      "./getReactRootElementInContainer" : 134,
      "./instantiateReactComponent" : 139,
      "./invariant" : 140,
      "./shouldUpdateReactComponent" : 156,
      "./warning" : 160
    }],
    71 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} insertBefore
       * @param {string} options
       * @param {?} returnDom
       * @return {undefined}
       */
      function createChild(insertBefore, options, returnDom) {
        configList.push({
          parentID : insertBefore,
          parentNode : null,
          type : env.INSERT_MARKUP,
          markupIndex : validators.push(options) - 1,
          textContent : null,
          fromIndex : null,
          toIndex : returnDom
        });
      }
      /**
       * @param {string} details
       * @param {?} failing_message
       * @param {number} toIndex
       * @return {undefined}
       */
      function report(details, failing_message, toIndex) {
        configList.push({
          parentID : details,
          parentNode : null,
          type : env.MOVE_EXISTING,
          markupIndex : null,
          textContent : null,
          fromIndex : failing_message,
          toIndex : toIndex
        });
      }
      /**
       * @param {string} object
       * @param {?} fromIndex
       * @return {undefined}
       */
      function getEnumerableProperties(object, fromIndex) {
        configList.push({
          parentID : object,
          parentNode : null,
          type : env.REMOVE_NODE,
          markupIndex : null,
          textContent : null,
          fromIndex : fromIndex,
          toIndex : null
        });
      }
      /**
       * @param {string} state
       * @param {string} v
       * @return {undefined}
       */
      function token(state, v) {
        configList.push({
          parentID : state,
          parentNode : null,
          type : env.TEXT_CONTENT,
          markupIndex : null,
          textContent : v,
          fromIndex : null,
          toIndex : null
        });
      }
      /**
       * @return {undefined}
       */
      function getPosition() {
        if (configList.length) {
          Block.BackendIDOperations.dangerouslyProcessChildrenUpdates(configList, validators);
          first();
        }
      }
      /**
       * @return {undefined}
       */
      function first() {
        /** @type {number} */
        configList.length = 0;
        /** @type {number} */
        validators.length = 0;
      }
      var Block = require("./ReactComponent");
      var env = require("./ReactMultiChildUpdateTypes");
      var flag = require("./flattenChildren");
      var inspect = require("./instantiateReactComponent");
      var indexOf = require("./shouldUpdateReactComponent");
      /** @type {number} */
      var o = 0;
      /** @type {Array} */
      var configList = [];
      /** @type {Array} */
      var validators = [];
      var JsDiff = {
        Mixin : {
          /**
           * @param {?} result
           * @param {?} transaction
           * @return {?}
           */
          mountChildren : function(result, transaction) {
            var obj = flag(result);
            /** @type {Array} */
            var params = [];
            /** @type {number} */
            var index = 0;
            this._renderedChildren = obj;
            var name;
            for (name in obj) {
              var item = obj[name];
              if (obj.hasOwnProperty(name)) {
                var child = inspect(item, null);
                obj[name] = child;
                /** @type {string} */
                var error = this._rootNodeID + name;
                var options = child.mountComponent(error, transaction, this._mountDepth + 1);
                /** @type {number} */
                child._mountIndex = index;
                params.push(options);
                index++;
              }
            }
            return params;
          },
          /**
           * @param {string} el
           * @return {undefined}
           */
          updateTextContent : function(el) {
            o++;
            /** @type {boolean} */
            var b = true;
            try {
              var prevChildren = this._renderedChildren;
              var name;
              for (name in prevChildren) {
                if (prevChildren.hasOwnProperty(name)) {
                  this._unmountChildByName(prevChildren[name], name);
                }
              }
              this.setTextContent(el);
              /** @type {boolean} */
              b = false;
            } finally {
              o--;
              if (!o) {
                if (b) {
                  first();
                } else {
                  getPosition();
                }
              }
            }
          },
          /**
           * @param {?} isXML
           * @param {?} transaction
           * @return {undefined}
           */
          updateChildren : function(isXML, transaction) {
            o++;
            /** @type {boolean} */
            var c = true;
            try {
              this._updateChildren(isXML, transaction);
              /** @type {boolean} */
              c = false;
            } finally {
              o--;
              if (!o) {
                if (c) {
                  first();
                } else {
                  getPosition();
                }
              }
            }
          },
          /**
           * @param {?} isXML
           * @param {?} transaction
           * @return {undefined}
           */
          _updateChildren : function(isXML, transaction) {
            var obj = flag(isXML);
            var prevChildren = this._renderedChildren;
            if (obj || prevChildren) {
              var name;
              /** @type {number} */
              var lastIndex = 0;
              /** @type {number} */
              var nextIndex = 0;
              for (name in obj) {
                if (obj.hasOwnProperty(name)) {
                  var prevChild = prevChildren && prevChildren[name];
                  var dontCloseTags = prevChild && prevChild._currentElement;
                  var nextComponent = obj[name];
                  if (indexOf(dontCloseTags, nextComponent)) {
                    this.moveChild(prevChild, nextIndex, lastIndex);
                    /** @type {number} */
                    lastIndex = Math.max(prevChild._mountIndex, lastIndex);
                    prevChild.receiveComponent(nextComponent, transaction);
                    /** @type {number} */
                    prevChild._mountIndex = nextIndex;
                  } else {
                    if (prevChild) {
                      /** @type {number} */
                      lastIndex = Math.max(prevChild._mountIndex, lastIndex);
                      this._unmountChildByName(prevChild, name);
                    }
                    var str = inspect(nextComponent, null);
                    this._mountChildByNameAtIndex(str, name, nextIndex, transaction);
                  }
                  nextIndex++;
                }
              }
              for (name in prevChildren) {
                if (!!prevChildren.hasOwnProperty(name)) {
                  if (!(obj && obj[name])) {
                    this._unmountChildByName(prevChildren[name], name);
                  }
                }
              }
            }
          },
          /**
           * @return {undefined}
           */
          unmountChildren : function() {
            var testSource = this._renderedChildren;
            var name;
            for (name in testSource) {
              var ref = testSource[name];
              if (ref.unmountComponent) {
                ref.unmountComponent();
              }
            }
            /** @type {null} */
            this._renderedChildren = null;
          },
          /**
           * @param {?} child
           * @param {number} toIndex
           * @param {number} lastIndex
           * @return {undefined}
           */
          moveChild : function(child, toIndex, lastIndex) {
            if (child._mountIndex < lastIndex) {
              report(this._rootNodeID, child._mountIndex, toIndex);
            }
          },
          /**
           * @param {?} child
           * @param {string} callback
           * @return {undefined}
           */
          createChild : function(child, callback) {
            createChild(this._rootNodeID, callback, child._mountIndex);
          },
          /**
           * @param {Node} child
           * @return {undefined}
           */
          removeChild : function(child) {
            getEnumerableProperties(this._rootNodeID, child._mountIndex);
          },
          /**
           * @param {string} text
           * @return {undefined}
           */
          setTextContent : function(text) {
            token(this._rootNodeID, text);
          },
          /**
           * @param {?} child
           * @param {?} name
           * @param {number} index
           * @param {?} item
           * @return {undefined}
           */
          _mountChildByNameAtIndex : function(child, name, index, item) {
            var transaction = this._rootNodeID + name;
            var restoreScript = child.mountComponent(transaction, item, this._mountDepth + 1);
            /** @type {number} */
            child._mountIndex = index;
            this.createChild(child, restoreScript);
            this._renderedChildren = this._renderedChildren || {};
            this._renderedChildren[name] = child;
          },
          /**
           * @param {Node} child
           * @param {string} name
           * @return {undefined}
           */
          _unmountChildByName : function(child, name) {
            this.removeChild(child);
            /** @type {null} */
            child._mountIndex = null;
            child.unmountComponent();
            delete this._renderedChildren[name];
          }
        }
      };
      module.exports = JsDiff;
    }, {
      "./ReactComponent" : 37,
      "./ReactMultiChildUpdateTypes" : 72,
      "./flattenChildren" : 124,
      "./instantiateReactComponent" : 139,
      "./shouldUpdateReactComponent" : 156
    }],
    72 : [function(require, module, dataAndEvents) {
      var flag = require("./keyMirror");
      var obj = flag({
        INSERT_MARKUP : null,
        MOVE_EXISTING : null,
        REMOVE_NODE : null,
        TEXT_CONTENT : null
      });
      module.exports = obj;
    }, {
      "./keyMirror" : 146
    }],
    73 : [function(require, module, dataAndEvents) {
      /**
       * @param {?} key
       * @param {?} value
       * @param {?} state
       * @return {?}
       */
      function set(key, value, state) {
        var token = tokens[key];
        return null == token ? (equal(type, "There is no registered component for the tag %s", key), new type(key, value)) : state === key ? (equal(type, "There is no registered component for the tag %s", key), new type(key, value)) : new token.type(value);
      }
      var getActual = require("./Object.assign");
      var equal = require("./invariant");
      /** @type {null} */
      var type = null;
      var tokens = {};
      var injection = {
        /**
         * @param {null} value
         * @return {undefined}
         */
        injectGenericComponentClass : function(value) {
          /** @type {null} */
          type = value;
        },
        /**
         * @param {?} opt_attributes
         * @return {undefined}
         */
        injectComponentClasses : function(opt_attributes) {
          getActual(tokens, opt_attributes);
        }
      };
      var JsDiff = {
        /** @type {function (?, ?, ?): ?} */
        createInstanceForTag : set,
        injection : injection
      };
      module.exports = JsDiff;
    }, {
      "./Object.assign" : 29,
      "./invariant" : 140
    }],
    74 : [function(require, module, dataAndEvents) {
      var Block = require("./emptyObject");
      var getActual = require("./invariant");
      var Data = {
        /**
         * @param {Object} owner
         * @return {?}
         */
        isValidOwner : function(owner) {
          return!(!owner || ("function" != typeof owner.attachRef || "function" != typeof owner.detachRef));
        },
        /**
         * @param {?} component
         * @param {?} ref
         * @param {Object} owner
         * @return {undefined}
         */
        addComponentAsRefTo : function(component, ref, owner) {
          getActual(Data.isValidOwner(owner), "addComponentAsRefTo(...): Only a ReactOwner can have refs. This usually means that you're trying to add a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref.");
          owner.attachRef(ref, component);
        },
        /**
         * @param {?} component
         * @param {?} ref
         * @param {Object} owner
         * @return {undefined}
         */
        removeComponentAsRefFrom : function(component, ref, owner) {
          getActual(Data.isValidOwner(owner), "removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This usually means that you're trying to remove a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref.");
          if (owner.refs[ref] === component) {
            owner.detachRef(ref);
          }
        },
        Mixin : {
          /**
           * @return {undefined}
           */
          construct : function() {
            this.refs = Block;
          },
          /**
           * @param {?} ref
           * @param {?} component
           * @return {undefined}
           */
          attachRef : function(ref, component) {
            getActual(component.isOwnedBy(this), "attachRef(%s, ...): Only a component's owner can store a ref to it.", ref);
            var refs = this.refs === Block ? this.refs = {} : this.refs;
            refs[ref] = component;
          },
          /**
           * @param {?} ref
           * @return {undefined}
           */
          detachRef : function(ref) {
            delete this.refs[ref];
          }
        }
      };
      module.exports = Data;
    }, {
      "./emptyObject" : 122,
      "./invariant" : 140
    }],
    75 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} ns
       * @param {string} keepData
       * @param {Function} array
       * @return {?}
       */
      function remove(ns, keepData, array) {
        return array;
      }
      var $ = {
        enableMeasure : false,
        /** @type {function (string, string, Function): ?} */
        storedMeasure : remove,
        /**
         * @param {string} ns
         * @param {string} name
         * @param {Function} func
         * @return {?}
         */
        measure : function(ns, name, func) {
          /** @type {null} */
          var matcherFunction = null;
          /**
           * @return {?}
           */
          var b = function() {
            return $.enableMeasure ? (matcherFunction || (matcherFunction = $.storedMeasure(ns, name, func)), matcherFunction.apply(this, arguments)) : func.apply(this, arguments);
          };
          return b.displayName = ns + "_" + name, b;
        },
        injection : {
          /**
           * @param {Function} measure
           * @return {undefined}
           */
          injectMeasure : function(measure) {
            /** @type {Function} */
            $.storedMeasure = measure;
          }
        }
      };
      module.exports = $;
    }, {}],
    76 : [function(require, module, dataAndEvents) {
      /**
       * @param {Function} callback
       * @return {?}
       */
      function ajax(callback) {
        return function(results, index, value) {
          if (results.hasOwnProperty(index)) {
            results[index] = callback(results[index], value);
          } else {
            results[index] = value;
          }
        };
      }
      /**
       * @param {Object} object
       * @param {Object} iterable
       * @return {?}
       */
      function each(object, iterable) {
        var key;
        for (key in iterable) {
          if (iterable.hasOwnProperty(key)) {
            var fn = config[key];
            if (fn && config.hasOwnProperty(key)) {
              fn(object, key, iterable[key]);
            } else {
              if (!object.hasOwnProperty(key)) {
                object[key] = iterable[key];
              }
            }
          }
        }
        return object;
      }
      var flatten = require("./Object.assign");
      var nodes = require("./emptyFunction");
      var getActual = require("./invariant");
      var which = require("./joinClasses");
      var helper = require("./warning");
      /** @type {boolean} */
      var k = false;
      var gstyle = ajax(function(output, shallow) {
        return flatten({}, shallow, output);
      });
      var config = {
        children : nodes,
        className : ajax(which),
        style : gstyle
      };
      var JsDiff = {
        TransferStrategies : config,
        /**
         * @param {Object} element
         * @param {Object} object
         * @return {?}
         */
        mergeProps : function(element, object) {
          return each(flatten({}, element), object);
        },
        Mixin : {
          /**
           * @param {Object} component
           * @return {?}
           */
          transferPropsTo : function(component) {
            return getActual(component._owner === this, "%s: You can't call transferPropsTo() on a component that you don't own, %s. This usually means you are calling transferPropsTo() on a component passed in as props or children.", this.constructor.displayName, "string" == typeof component.type ? component.type : component.type.displayName), k || (k = true, helper(false, "transferPropsTo is deprecated. See http://fb.me/react-transferpropsto for more information.")), each(component.props, this.props), 
            component;
          }
        }
      };
      module.exports = JsDiff;
    }, {
      "./Object.assign" : 29,
      "./emptyFunction" : 121,
      "./invariant" : 140,
      "./joinClasses" : 145,
      "./warning" : 160
    }],
    77 : [function(dataAndEvents, module, deepDataAndEvents) {
      var obj = {};
      obj = {
        prop : "prop",
        context : "context",
        childContext : "child context"
      };
      module.exports = obj;
    }, {}],
    78 : [function(require, module, dataAndEvents) {
      var flag = require("./keyMirror");
      var obj = flag({
        prop : null,
        context : null,
        childContext : null
      });
      module.exports = obj;
    }, {
      "./keyMirror" : 146
    }],
    79 : [function(require, s, dataAndEvents) {
      /**
       * @param {Function} error
       * @return {?}
       */
      function callback(error) {
        /**
         * @param {Object} status
         * @param {Array} resp
         * @param {number} message
         * @param {(Function|string)} altName
         * @param {?} pos
         * @return {?}
         */
        function success(status, resp, message, altName, pos) {
          if (altName = altName || name, null != resp[message]) {
            return error(resp, message, altName, pos);
          }
          var current = stack[pos];
          return status ? new Error("Required " + current + " `" + message + "` was not specified in " + ("`" + altName + "`.")) : void 0;
        }
        var path = success.bind(null, false);
        return path.isRequired = success.bind(null, true), path;
      }
      /**
       * @param {string} type
       * @return {?}
       */
      function typeParser(type) {
        /**
         * @param {Array} response
         * @param {number} status
         * @param {string} textStatus
         * @param {?} offset
         * @return {?}
         */
        function error(response, status, textStatus, offset) {
          var a = response[status];
          var string = isArray(a);
          if (string !== type) {
            var item = stack[offset];
            var ap = hoozit(a);
            return new Error("Invalid " + item + " `" + status + "` of type `" + ap + "` " + ("supplied to `" + textStatus + "`, expected `" + type + "`."));
          }
        }
        return callback(error);
      }
      /**
       * @return {?}
       */
      function internalCallback() {
        return callback(Block.thatReturns());
      }
      /**
       * @param {?} func
       * @return {?}
       */
      function call(func) {
        /**
         * @param {Array} res
         * @param {number} status
         * @param {string} msg
         * @param {?} offset
         * @return {?}
         */
        function error(res, status, msg, offset) {
          var name = res[status];
          if (!Array.isArray(name)) {
            var item = stack[offset];
            var quoteNeeded = isArray(name);
            return new Error("Invalid " + item + " `" + status + "` of type " + ("`" + quoteNeeded + "` supplied to `" + msg + "`, expected an array."));
          }
          /** @type {number} */
          var i = 0;
          for (;i < name.length;i++) {
            var ret = func(name, i, msg, offset);
            if (ret instanceof Error) {
              return ret;
            }
          }
        }
        return callback(error);
      }
      /**
       * @return {?}
       */
      function compile() {
        /**
         * @param {Array} errors
         * @param {number} status
         * @param {string} textStatus
         * @param {?} offset
         * @return {?}
         */
        function error(errors, status, textStatus, offset) {
          if (!assert.isValidElement(errors[status])) {
            var item = stack[offset];
            return new Error("Invalid " + item + " `" + status + "` supplied to " + ("`" + textStatus + "`, expected a ReactElement."));
          }
        }
        return callback(error);
      }
      /**
       * @param {Function} obj
       * @return {?}
       */
      function log(obj) {
        /**
         * @param {Array} result
         * @param {number} status
         * @param {string} textStatus
         * @param {?} offset
         * @return {?}
         */
        function error(result, status, textStatus, offset) {
          if (!(result[status] instanceof obj)) {
            var item = stack[offset];
            var type = obj.name || name;
            return new Error("Invalid " + item + " `" + status + "` supplied to " + ("`" + textStatus + "`, expected instance of `" + type + "`."));
          }
        }
        return callback(error);
      }
      /**
       * @param {Array} data
       * @return {?}
       */
      function send(data) {
        /**
         * @param {Array} $cookies
         * @param {number} key
         * @param {string} textStatus
         * @param {?} offset
         * @return {?}
         */
        function error($cookies, key, textStatus, offset) {
          var value = $cookies[key];
          /** @type {number} */
          var i = 0;
          for (;i < data.length;i++) {
            if (value === data[i]) {
              return;
            }
          }
          var item = stack[offset];
          /** @type {string} */
          var newState = JSON.stringify(data);
          return new Error("Invalid " + item + " `" + key + "` of value `" + value + "` " + ("supplied to `" + textStatus + "`, expected one of " + newState + "."));
        }
        return callback(error);
      }
      /**
       * @param {?} start
       * @return {?}
       */
      function init(start) {
        /**
         * @param {Array} buf
         * @param {number} off
         * @param {string} opts
         * @param {?} offset
         * @return {?}
         */
        function parse(buf, off, opts, offset) {
          var b = buf[off];
          var bIsArray = isArray(b);
          if ("object" !== bIsArray) {
            var item = stack[offset];
            return new Error("Invalid " + item + " `" + off + "` of type " + ("`" + bIsArray + "` supplied to `" + opts + "`, expected an object."));
          }
          var name;
          for (name in b) {
            if (b.hasOwnProperty(name)) {
              var result = start(b, name, opts, offset);
              if (result instanceof Error) {
                return result;
              }
            }
          }
        }
        return callback(parse);
      }
      /**
       * @param {Array} codeSegments
       * @return {?}
       */
      function connect(codeSegments) {
        /**
         * @param {?} jqXHR
         * @param {string} xhr
         * @param {string} errorThrown
         * @param {?} offset
         * @return {?}
         */
        function error(jqXHR, xhr, errorThrown, offset) {
          /** @type {number} */
          var i = 0;
          for (;i < codeSegments.length;i++) {
            var error = codeSegments[i];
            if (null == error(jqXHR, xhr, errorThrown, offset)) {
              return;
            }
          }
          var item = stack[offset];
          return new Error("Invalid " + item + " `" + xhr + "` supplied to " + ("`" + errorThrown + "`."));
        }
        return callback(error);
      }
      /**
       * @return {?}
       */
      function request() {
        /**
         * @param {Array} object
         * @param {number} prop
         * @param {string} textStatus
         * @param {?} offset
         * @return {?}
         */
        function error(object, prop, textStatus, offset) {
          if (!match(object[prop])) {
            var item = stack[offset];
            return new Error("Invalid " + item + " `" + prop + "` supplied to " + ("`" + textStatus + "`, expected a ReactNode."));
          }
        }
        return callback(error);
      }
      /**
       * @param {Object} args
       * @return {?}
       */
      function start(args) {
        /**
         * @param {Array} data
         * @param {number} status
         * @param {string} event
         * @param {?} offset
         * @return {?}
         */
        function error(data, status, event, offset) {
          var msg = data[status];
          var t = isArray(msg);
          if ("object" !== t) {
            var item = stack[offset];
            return new Error("Invalid " + item + " `" + status + "` of type `" + t + "` " + ("supplied to `" + event + "`, expected `object`."));
          }
          var index;
          for (index in args) {
            var callback = args[index];
            if (callback) {
              var ret = callback(msg, index, event, offset);
              if (ret) {
                return ret;
              }
            }
          }
        }
        return callback(error, "expected `object`");
      }
      /**
       * @param {Object} obj
       * @return {?}
       */
      function match(obj) {
        switch(typeof obj) {
          case "number":
          ;
          case "string":
            return true;
          case "boolean":
            return!obj;
          case "object":
            if (Array.isArray(obj)) {
              return obj.every(match);
            }
            if (assert.isValidElement(obj)) {
              return true;
            }
            var prop;
            for (prop in obj) {
              if (!match(obj[prop])) {
                return false;
              }
            }
            return true;
          default:
            return false;
        }
      }
      /**
       * @param {?} o
       * @return {?}
       */
      function isArray(o) {
        /** @type {string} */
        var t = typeof o;
        return Array.isArray(o) ? "array" : o instanceof RegExp ? "object" : t;
      }
      /**
       * @param {?} o
       * @return {?}
       */
      function hoozit(o) {
        var wasArray = isArray(o);
        if ("object" === wasArray) {
          if (o instanceof Date) {
            return "date";
          }
          if (o instanceof RegExp) {
            return "regexp";
          }
        }
        return wasArray;
      }
      var assert = require("./ReactElement");
      var stack = require("./ReactPropTypeLocationNames");
      var getActual = require("./deprecated");
      var Block = require("./emptyFunction");
      /** @type {string} */
      var name = "<<anonymous>>";
      var element = compile();
      var x = request();
      var json = {
        array : typeParser("array"),
        bool : typeParser("boolean"),
        func : typeParser("function"),
        number : typeParser("number"),
        object : typeParser("object"),
        string : typeParser("string"),
        any : internalCallback(),
        /** @type {function (?): ?} */
        arrayOf : call,
        element : element,
        /** @type {function (Function): ?} */
        instanceOf : log,
        node : x,
        /** @type {function (?): ?} */
        objectOf : init,
        /** @type {function (Array): ?} */
        oneOf : send,
        /** @type {function (Array): ?} */
        oneOfType : connect,
        /** @type {function (Object): ?} */
        shape : start,
        component : getActual("React.PropTypes", "component", "element", this, element),
        renderable : getActual("React.PropTypes", "renderable", "node", this, x)
      };
      s.exports = json;
    }, {
      "./ReactElement" : 58,
      "./ReactPropTypeLocationNames" : 77,
      "./deprecated" : 120,
      "./emptyFunction" : 121
    }],
    80 : [function(require, module, dataAndEvents) {
      /**
       * @return {undefined}
       */
      function Class() {
        /** @type {Array} */
        this.listenersToPut = [];
      }
      var util = require("./PooledClass");
      var promise = require("./ReactBrowserEventEmitter");
      var Emitter = require("./Object.assign");
      Emitter(Class.prototype, {
        /**
         * @param {?} dataAndEvents
         * @param {string} keepData
         * @param {?} deepDataAndEvents
         * @return {undefined}
         */
        enqueuePutListener : function(dataAndEvents, keepData, deepDataAndEvents) {
          this.listenersToPut.push({
            rootNodeID : dataAndEvents,
            propKey : keepData,
            propValue : deepDataAndEvents
          });
        },
        /**
         * @return {undefined}
         */
        putListeners : function() {
          /** @type {number} */
          var i = 0;
          for (;i < this.listenersToPut.length;i++) {
            var deferred = this.listenersToPut[i];
            promise.putListener(deferred.rootNodeID, deferred.propKey, deferred.propValue);
          }
        },
        /**
         * @return {undefined}
         */
        reset : function() {
          /** @type {number} */
          this.listenersToPut.length = 0;
        },
        /**
         * @return {undefined}
         */
        destructor : function() {
          this.reset();
        }
      });
      util.addPoolingTo(Class);
      /** @type {function (): undefined} */
      module.exports = Class;
    }, {
      "./Object.assign" : 29,
      "./PooledClass" : 30,
      "./ReactBrowserEventEmitter" : 33
    }],
    81 : [function(require, module, dataAndEvents) {
      /**
       * @return {undefined}
       */
      function Class() {
        this.reinitializeTransaction();
        /** @type {boolean} */
        this.renderToStaticMarkup = false;
        this.reactMountReady = utils.getPooled(null);
        this.putListenerQueue = streamer.getPooled();
      }
      var utils = require("./CallbackQueue");
      var util = require("./PooledClass");
      var child = require("./ReactBrowserEventEmitter");
      var Block = require("./ReactInputSelection");
      var streamer = require("./ReactPutListenerQueue");
      var nodes = require("./Transaction");
      var Emitter = require("./Object.assign");
      var methods = {
        initialize : Block.getSelectionInformation,
        close : Block.restoreSelection
      };
      var el = {
        /**
         * @return {?}
         */
        initialize : function() {
          var a = child.isEnabled();
          return child.setEnabled(false), a;
        },
        /**
         * @param {boolean} enabled
         * @return {undefined}
         */
        close : function(enabled) {
          child.setEnabled(enabled);
        }
      };
      var response = {
        /**
         * @return {undefined}
         */
        initialize : function() {
          this.reactMountReady.reset();
        },
        /**
         * @return {undefined}
         */
        close : function() {
          this.reactMountReady.notifyAll();
        }
      };
      var obj = {
        /**
         * @return {undefined}
         */
        initialize : function() {
          this.putListenerQueue.reset();
        },
        /**
         * @return {undefined}
         */
        close : function() {
          this.putListenerQueue.putListeners();
        }
      };
      /** @type {Array} */
      var args = [obj, methods, el, response];
      var r20 = {
        /**
         * @return {?}
         */
        getTransactionWrappers : function() {
          return args;
        },
        /**
         * @return {?}
         */
        getReactMountReady : function() {
          return this.reactMountReady;
        },
        /**
         * @return {?}
         */
        getPutListenerQueue : function() {
          return this.putListenerQueue;
        },
        /**
         * @return {undefined}
         */
        destructor : function() {
          utils.release(this.reactMountReady);
          /** @type {null} */
          this.reactMountReady = null;
          streamer.release(this.putListenerQueue);
          /** @type {null} */
          this.putListenerQueue = null;
        }
      };
      Emitter(Class.prototype, nodes.Mixin, r20);
      util.addPoolingTo(Class);
      /** @type {function (): undefined} */
      module.exports = Class;
    }, {
      "./CallbackQueue" : 7,
      "./Object.assign" : 29,
      "./PooledClass" : 30,
      "./ReactBrowserEventEmitter" : 33,
      "./ReactInputSelection" : 65,
      "./ReactPutListenerQueue" : 80,
      "./Transaction" : 107
    }],
    82 : [function(dataAndEvents, module, deepDataAndEvents) {
      var injection = {
        /**
         * @param {?} prototype
         * @return {undefined}
         */
        injectCreateReactRootIndex : function(prototype) {
          Type.createReactRootIndex = prototype;
        }
      };
      var Type = {
        createReactRootIndex : null,
        injection : injection
      };
      module.exports = Type;
    }, {}],
    83 : [function($, module, dataAndEvents) {
      /**
       * @param {Object} e
       * @return {?}
       */
      function close(e) {
        closest(entities.isValidElement(e), "renderToString(): You must pass a valid ReactElement.");
        var transaction;
        try {
          var data = emptyJ.createReactRootID();
          return transaction = me.getPooled(false), transaction.perform(function() {
            var component = cb(e, null);
            var markup = component.mountComponent(data, transaction, 0);
            return container.addChecksumToMarkup(markup);
          }, null);
        } finally {
          me.release(transaction);
        }
      }
      /**
       * @param {Object} e
       * @return {?}
       */
      function start(e) {
        closest(entities.isValidElement(e), "renderToStaticMarkup(): You must pass a valid ReactElement.");
        var transaction;
        try {
          var t = emptyJ.createReactRootID();
          return transaction = me.getPooled(true), transaction.perform(function() {
            var ret = cb(e, null);
            return ret.mountComponent(t, transaction, 0);
          }, null);
        } finally {
          me.release(transaction);
        }
      }
      var entities = $("./ReactElement");
      var emptyJ = $("./ReactInstanceHandles");
      var container = $("./ReactMarkupChecksum");
      var me = $("./ReactServerRenderingTransaction");
      var cb = $("./instantiateReactComponent");
      var closest = $("./invariant");
      module.exports = {
        /** @type {function (Object): ?} */
        renderToString : close,
        /** @type {function (Object): ?} */
        renderToStaticMarkup : start
      };
    }, {
      "./ReactElement" : 58,
      "./ReactInstanceHandles" : 66,
      "./ReactMarkupChecksum" : 69,
      "./ReactServerRenderingTransaction" : 84,
      "./instantiateReactComponent" : 139,
      "./invariant" : 140
    }],
    84 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} name
       * @return {undefined}
       */
      function Class(name) {
        this.reinitializeTransaction();
        /** @type {string} */
        this.renderToStaticMarkup = name;
        this.reactMountReady = utils.getPooled(null);
        this.putListenerQueue = streamer.getPooled();
      }
      var util = require("./PooledClass");
      var utils = require("./CallbackQueue");
      var streamer = require("./ReactPutListenerQueue");
      var nodes = require("./Transaction");
      var Emitter = require("./Object.assign");
      var Block = require("./emptyFunction");
      var methods = {
        /**
         * @return {undefined}
         */
        initialize : function() {
          this.reactMountReady.reset();
        },
        close : Block
      };
      var offsetLeft = {
        /**
         * @return {undefined}
         */
        initialize : function() {
          this.putListenerQueue.reset();
        },
        close : Block
      };
      /** @type {Array} */
      var start = [offsetLeft, methods];
      var r20 = {
        /**
         * @return {?}
         */
        getTransactionWrappers : function() {
          return start;
        },
        /**
         * @return {?}
         */
        getReactMountReady : function() {
          return this.reactMountReady;
        },
        /**
         * @return {?}
         */
        getPutListenerQueue : function() {
          return this.putListenerQueue;
        },
        /**
         * @return {undefined}
         */
        destructor : function() {
          utils.release(this.reactMountReady);
          /** @type {null} */
          this.reactMountReady = null;
          streamer.release(this.putListenerQueue);
          /** @type {null} */
          this.putListenerQueue = null;
        }
      };
      Emitter(Class.prototype, nodes.Mixin, r20);
      util.addPoolingTo(Class);
      /** @type {function (string): undefined} */
      module.exports = Class;
    }, {
      "./CallbackQueue" : 7,
      "./Object.assign" : 29,
      "./PooledClass" : 30,
      "./ReactPutListenerQueue" : 80,
      "./Transaction" : 107,
      "./emptyFunction" : 121
    }],
    85 : [function(dataAndEvents, mod, deepDataAndEvents) {
      /**
       * @param {Object} node
       * @param {string} key
       * @return {?}
       */
      function fn(node, key) {
        var child = {};
        return function(value) {
          child[key] = value;
          node.setState(child);
        };
      }
      var exports = {
        /**
         * @param {Object} component
         * @param {Function} funcReturningState
         * @return {?}
         */
        createStateSetter : function(component, funcReturningState) {
          return function(protoProps, classProps, capture, d, e, f) {
            var child = funcReturningState.call(component, protoProps, classProps, capture, d, e, f);
            if (child) {
              component.setState(child);
            }
          };
        },
        /**
         * @param {Object} value
         * @param {string} key
         * @return {?}
         */
        createStateKeySetter : function(value, key) {
          var result = value.__keySetters || (value.__keySetters = {});
          return result[key] || (result[key] = fn(value, key));
        }
      };
      exports.Mixin = {
        /**
         * @param {Function} funcReturningState
         * @return {?}
         */
        createStateSetter : function(funcReturningState) {
          return exports.createStateSetter(this, funcReturningState);
        },
        /**
         * @param {string} key
         * @return {?}
         */
        createStateKeySetter : function(key) {
          return exports.createStateKeySetter(this, key);
        }
      };
      mod.exports = exports;
    }, {}],
    86 : [function($, module, dataAndEvents) {
      /**
       * @param {?} reference
       * @return {undefined}
       */
      function RegExp(reference) {
      }
      /**
       * @param {?} prefix
       * @return {?}
       */
      function add(prefix) {
        return function(inst, sMessage) {
          var elem;
          if (_.isDOMComponent(inst)) {
            elem = inst.getDOMNode();
          } else {
            if (inst.tagName) {
              /** @type {Node} */
              elem = inst;
            }
          }
          var evt = new RegExp;
          evt.target = elem;
          var event = new emptyJ(doc.eventNameDispatchConfigs[prefix], target.getID(elem), evt);
          log(event, sMessage);
          dispatcher.accumulateTwoPhaseDispatches(event);
          $spy.batchedUpdates(function() {
            container.enqueueEvents(event);
            container.processEventQueue();
          });
        };
      }
      /**
       * @return {undefined}
       */
      function buildParams() {
        _.Simulate = {};
        var prefix;
        for (prefix in doc.eventNameDispatchConfigs) {
          _.Simulate[prefix] = add(prefix);
        }
      }
      /**
       * @param {string} cname
       * @return {?}
       */
      function callback(cname) {
        return function(self, sMessage) {
          var e = new RegExp(cname);
          log(e, sMessage);
          if (_.isDOMComponent(self)) {
            _.simulateNativeEventOnDOMComponent(cname, self, e);
          } else {
            if (self.tagName) {
              _.simulateNativeEventOnNode(cname, self, e);
            }
          }
        };
      }
      var collection = $("./EventConstants");
      var container = $("./EventPluginHub");
      var dispatcher = $("./EventPropagators");
      var self = $("./React");
      var d = $("./ReactElement");
      var doc = $("./ReactBrowserEventEmitter");
      var target = $("./ReactMount");
      var w = $("./ReactTextComponent");
      var $spy = $("./ReactUpdates");
      var emptyJ = $("./SyntheticEvent");
      var log = $("./Object.assign");
      var e = collection.topLevelTypes;
      var _ = {
        /**
         * @param {Error} nextProps
         * @return {?}
         */
        renderIntoDocument : function(nextProps) {
          /** @type {Element} */
          var foo = document.createElement("div");
          return self.render(nextProps, foo);
        },
        /**
         * @param {Object} value
         * @return {?}
         */
        isElement : function(value) {
          return d.isValidElement(value);
        },
        /**
         * @param {Object} a
         * @param {Event} b
         * @return {?}
         */
        isElementOfType : function(a, b) {
          return d.isValidElement(a) && a.type === b.type;
        },
        /**
         * @param {Function} inst
         * @return {?}
         */
        isDOMComponent : function(inst) {
          return!!(inst && (inst.mountComponent && inst.tagName));
        },
        /**
         * @param {Object} v
         * @return {?}
         */
        isDOMComponentElement : function(v) {
          return!!(v && (d.isValidElement(v) && v.tagName));
        },
        /**
         * @param {Object} inst
         * @return {?}
         */
        isCompositeComponent : function(inst) {
          return "function" == typeof inst.render && "function" == typeof inst.setState;
        },
        /**
         * @param {?} protoProps
         * @param {Event} b
         * @return {?}
         */
        isCompositeComponentWithType : function(protoProps, b) {
          return!(!_.isCompositeComponent(protoProps) || protoProps.constructor !== b.type);
        },
        /**
         * @param {Object} attr
         * @return {?}
         */
        isCompositeComponentElement : function(attr) {
          if (!d.isValidElement(attr)) {
            return false;
          }
          var that = attr.type.prototype;
          return "function" == typeof that.render && "function" == typeof that.setState;
        },
        /**
         * @param {Object} protoProps
         * @param {?} DataSource
         * @return {?}
         */
        isCompositeComponentElementWithType : function(protoProps, DataSource) {
          return!(!_.isCompositeComponentElement(protoProps) || protoProps.constructor !== DataSource);
        },
        /**
         * @param {?} value
         * @return {?}
         */
        isTextComponent : function(value) {
          return value instanceof w.type;
        },
        /**
         * @param {?} inst
         * @param {Function} test
         * @return {?}
         */
        findAllInRenderedTree : function(inst, test) {
          if (!inst) {
            return[];
          }
          /** @type {Array} */
          var ret = test(inst) ? [inst] : [];
          if (_.isDOMComponent(inst)) {
            var key;
            var renderedChildren = inst._renderedChildren;
            for (key in renderedChildren) {
              if (renderedChildren.hasOwnProperty(key)) {
                /** @type {Array} */
                ret = ret.concat(_.findAllInRenderedTree(renderedChildren[key], test));
              }
            }
          } else {
            if (_.isCompositeComponent(inst)) {
              /** @type {Array} */
              ret = ret.concat(_.findAllInRenderedTree(inst._renderedComponent, test));
            }
          }
          return ret;
        },
        /**
         * @param {?} root
         * @param {string} className
         * @return {?}
         */
        scryRenderedDOMComponentsWithClass : function(root, className) {
          return _.findAllInRenderedTree(root, function(inst) {
            var instClassName = inst.props.className;
            return _.isDOMComponent(inst) && (instClassName && -1 !== (" " + instClassName + " ").indexOf(" " + className + " "));
          });
        },
        /**
         * @param {?} root
         * @param {string} className
         * @return {?}
         */
        findRenderedDOMComponentWithClass : function(root, className) {
          var all = _.scryRenderedDOMComponentsWithClass(root, className);
          if (1 !== all.length) {
            throw new Error("Did not find exactly one match for class:" + className);
          }
          return all[0];
        },
        /**
         * @param {?} root
         * @param {string} tagName
         * @return {?}
         */
        scryRenderedDOMComponentsWithTag : function(root, tagName) {
          return _.findAllInRenderedTree(root, function(inst) {
            return _.isDOMComponent(inst) && inst.tagName === tagName.toUpperCase();
          });
        },
        /**
         * @param {?} root
         * @param {string} tagName
         * @return {?}
         */
        findRenderedDOMComponentWithTag : function(root, tagName) {
          var all = _.scryRenderedDOMComponentsWithTag(root, tagName);
          if (1 !== all.length) {
            throw new Error("Did not find exactly one match for tag:" + tagName);
          }
          return all[0];
        },
        /**
         * @param {?} root
         * @param {string} componentType
         * @return {?}
         */
        scryRenderedComponentsWithType : function(root, componentType) {
          return _.findAllInRenderedTree(root, function(protoProps) {
            return _.isCompositeComponentWithType(protoProps, componentType);
          });
        },
        /**
         * @param {?} root
         * @param {string} componentType
         * @return {?}
         */
        findRenderedComponentWithType : function(root, componentType) {
          var all = _.scryRenderedComponentsWithType(root, componentType);
          if (1 !== all.length) {
            throw new Error("Did not find exactly one match for componentType:" + componentType);
          }
          return all[0];
        },
        /**
         * @param {Event} f
         * @param {string} tmpl
         * @return {?}
         */
        mockComponent : function(f, tmpl) {
          tmpl = tmpl || (f.mockTagName || "div");
          var o = self.createClass({
            displayName : "ConvenienceConstructor",
            /**
             * @return {?}
             */
            render : function() {
              return self.createElement(tmpl, null, this.props.children);
            }
          });
          return f.mockImplementation(o), f.type = o.type, f.isReactLegacyFactory = true, this;
        },
        /**
         * @param {string} name
         * @param {Object} elem
         * @param {Event} event
         * @return {undefined}
         */
        simulateNativeEventOnNode : function(name, elem, event) {
          /** @type {Object} */
          event.target = elem;
          doc.ReactEventListener.dispatchEvent(name, event);
        },
        /**
         * @param {string} cname
         * @param {Object} item
         * @param {Event} arg
         * @return {undefined}
         */
        simulateNativeEventOnDOMComponent : function(cname, item, arg) {
          _.simulateNativeEventOnNode(cname, item.getDOMNode(), arg);
        },
        /**
         * @param {number} x
         * @param {number} y
         * @return {?}
         */
        nativeTouchData : function(x, y) {
          return{
            touches : [{
              pageX : x,
              pageY : y
            }]
          };
        },
        Simulate : null,
        SimulateNative : {}
      };
      /** @type {function (): undefined} */
      var matcherFunction = container.injection.injectEventPluginOrder;
      /**
       * @return {undefined}
       */
      container.injection.injectEventPluginOrder = function() {
        matcherFunction.apply(this, arguments);
        buildParams();
      };
      /** @type {function (): undefined} */
      var __method = container.injection.injectEventPluginsByName;
      /**
       * @return {undefined}
       */
      container.injection.injectEventPluginsByName = function() {
        __method.apply(this, arguments);
        buildParams();
      };
      buildParams();
      var cookie;
      for (cookie in e) {
        /** @type {string} */
        var name = 0 === cookie.indexOf("top") ? cookie.charAt(3).toLowerCase() + cookie.substr(4) : cookie;
        _.SimulateNative[name] = callback(cookie);
      }
      module.exports = _;
    }, {
      "./EventConstants" : 17,
      "./EventPluginHub" : 19,
      "./EventPropagators" : 22,
      "./Object.assign" : 29,
      "./React" : 31,
      "./ReactBrowserEventEmitter" : 33,
      "./ReactElement" : 58,
      "./ReactMount" : 70,
      "./ReactTextComponent" : 87,
      "./ReactUpdates" : 91,
      "./SyntheticEvent" : 99
    }],
    87 : [function(require, module, dataAndEvents) {
      var should = require("./DOMPropertyOperations");
      var nodes = require("./ReactComponent");
      var Node = require("./ReactElement");
      var expect = require("./Object.assign");
      var getActual = require("./escapeTextForBrowser");
      /**
       * @param {string} name
       * @return {undefined}
       */
      var type = function(name) {
      };
      expect(type.prototype, nodes.Mixin, {
        /**
         * @param {string} transaction
         * @param {?} data
         * @param {number} recurring
         * @return {?}
         */
        mountComponent : function(transaction, data, recurring) {
          nodes.Mixin.mountComponent.call(this, transaction, data, recurring);
          var actual = getActual(this.props);
          return data.renderToStaticMarkup ? actual : "<span " + should.createMarkupForID(transaction) + ">" + actual + "</span>";
        },
        /**
         * @param {?} nextComponent
         * @param {?} transaction
         * @return {undefined}
         */
        receiveComponent : function(nextComponent, transaction) {
          var nextProps = nextComponent.props;
          if (nextProps !== this.props) {
            this.props = nextProps;
            nodes.BackendIDOperations.updateTextContentByID(this._rootNodeID, nextProps);
          }
        }
      });
      /**
       * @param {string} name
       * @return {?}
       */
      var data = function(name) {
        return new Node(type, null, null, null, null, name);
      };
      /** @type {function (string): undefined} */
      data.type = type;
      /** @type {function (string): ?} */
      module.exports = data;
    }, {
      "./DOMPropertyOperations" : 13,
      "./Object.assign" : 29,
      "./ReactComponent" : 37,
      "./ReactElement" : 58,
      "./escapeTextForBrowser" : 123
    }],
    88 : [function(iterator, module, dataAndEvents) {
      var key = iterator("./ReactChildren");
      var JsDiff = {
        /**
         * @param {Function} val
         * @return {?}
         */
        getChildMapping : function(val) {
          return key.map(val, function(child) {
            return child;
          });
        },
        /**
         * @param {Object} items
         * @param {Object} set
         * @return {?}
         */
        mergeChildMappings : function(items, set) {
          /**
           * @param {string} index
           * @return {?}
           */
          function merge(index) {
            return set.hasOwnProperty(index) ? set[index] : items[index];
          }
          items = items || {};
          set = set || {};
          var keys = {};
          /** @type {Array} */
          var key = [];
          var value;
          for (value in items) {
            if (set.hasOwnProperty(value)) {
              if (key.length) {
                /** @type {Array} */
                keys[value] = key;
                /** @type {Array} */
                key = [];
              }
            } else {
              key.push(value);
            }
          }
          var type;
          var obj = {};
          var i;
          for (i in set) {
            if (keys.hasOwnProperty(i)) {
              /** @type {number} */
              type = 0;
              for (;type < keys[i].length;type++) {
                var node = keys[i][type];
                obj[keys[i][type]] = merge(node);
              }
            }
            obj[i] = merge(i);
          }
          /** @type {number} */
          type = 0;
          for (;type < key.length;type++) {
            obj[key[type]] = merge(key[type]);
          }
          return obj;
        }
      };
      module.exports = JsDiff;
    }, {
      "./ReactChildren" : 36
    }],
    89 : [function(require, module, dataAndEvents) {
      /**
       * @return {undefined}
       */
      function callback() {
        /** @type {Element} */
        var testElement = document.createElement("div");
        /** @type {(CSSStyleDeclaration|null)} */
        var style = testElement.style;
        if (!("AnimationEvent" in window)) {
          delete map.animationend.animation;
        }
        if (!("TransitionEvent" in window)) {
          delete map.transitionend.transition;
        }
        var letter;
        for (letter in map) {
          var hash = map[letter];
          var prop;
          for (prop in hash) {
            if (prop in style) {
              values.push(hash[prop]);
              break;
            }
          }
        }
      }
      /**
       * @param {?} event
       * @param {string} fn
       * @param {string} callback
       * @return {undefined}
       */
      function addEventListener(event, fn, callback) {
        event.addEventListener(fn, callback, false);
      }
      /**
       * @param {?} node
       * @param {string} event
       * @param {string} listener
       * @return {undefined}
       */
      function fn(node, event, listener) {
        node.removeEventListener(event, listener, false);
      }
      var Block = require("./ExecutionEnvironment");
      var map = {
        transitionend : {
          transition : "transitionend",
          WebkitTransition : "webkitTransitionEnd",
          MozTransition : "mozTransitionEnd",
          OTransition : "oTransitionEnd",
          msTransition : "MSTransitionEnd"
        },
        animationend : {
          animation : "animationend",
          WebkitAnimation : "webkitAnimationEnd",
          MozAnimation : "mozAnimationEnd",
          OAnimation : "oAnimationEnd",
          msAnimation : "MSAnimationEnd"
        }
      };
      /** @type {Array} */
      var values = [];
      if (Block.canUseDOM) {
        callback();
      }
      var JsDiff = {
        /**
         * @param {?} node
         * @param {Function} eventListener
         * @return {?}
         */
        addEndEventListener : function(node, eventListener) {
          return 0 === values.length ? void window.setTimeout(eventListener, 0) : void values.forEach(function(sqlt) {
            addEventListener(node, sqlt, eventListener);
          });
        },
        /**
         * @param {?} node
         * @param {Function} eventListener
         * @return {undefined}
         */
        removeEndEventListener : function(node, eventListener) {
          if (0 !== values.length) {
            values.forEach(function(key) {
              fn(node, key, eventListener);
            });
          }
        }
      };
      module.exports = JsDiff;
    }, {
      "./ExecutionEnvironment" : 23
    }],
    90 : [function(require, module, dataAndEvents) {
      var self = require("./React");
      var $ = require("./ReactTransitionChildMapping");
      var getActual = require("./Object.assign");
      var exec = require("./cloneWithProps");
      var Block = require("./emptyFunction");
      var JsDiff = self.createClass({
        displayName : "ReactTransitionGroup",
        propTypes : {
          component : self.PropTypes.any,
          childFactory : self.PropTypes.func
        },
        /**
         * @return {?}
         */
        getDefaultProps : function() {
          return{
            component : "span",
            childFactory : Block.thatReturnsArgument
          };
        },
        /**
         * @return {?}
         */
        getInitialState : function() {
          return{
            children : $.getChildMapping(this.props.children)
          };
        },
        /**
         * @param {Object} nextProps
         * @return {undefined}
         */
        componentWillReceiveProps : function(nextProps) {
          var keywords = $.getChildMapping(nextProps.children);
          var items = this.state.children;
          this.setState({
            children : $.mergeChildMappings(items, keywords)
          });
          var value;
          for (value in keywords) {
            var item = items && items.hasOwnProperty(value);
            if (!!keywords[value]) {
              if (!item) {
                if (!this.currentlyTransitioningKeys[value]) {
                  this.keysToEnter.push(value);
                }
              }
            }
          }
          for (value in items) {
            var g = keywords && keywords.hasOwnProperty(value);
            if (!!items[value]) {
              if (!g) {
                if (!this.currentlyTransitioningKeys[value]) {
                  this.keysToLeave.push(value);
                }
              }
            }
          }
        },
        /**
         * @return {undefined}
         */
        componentWillMount : function() {
          this.currentlyTransitioningKeys = {};
          /** @type {Array} */
          this.keysToEnter = [];
          /** @type {Array} */
          this.keysToLeave = [];
        },
        /**
         * @return {undefined}
         */
        componentDidUpdate : function() {
          var asserterNames = this.keysToEnter;
          /** @type {Array} */
          this.keysToEnter = [];
          asserterNames.forEach(this.performEnter);
          var failures = this.keysToLeave;
          /** @type {Array} */
          this.keysToLeave = [];
          failures.forEach(this.performLeave);
        },
        /**
         * @param {Object} method
         * @return {undefined}
         */
        performEnter : function(method) {
          /** @type {boolean} */
          this.currentlyTransitioningKeys[method] = true;
          var original = this.refs[method];
          if (original.componentWillEnter) {
            original.componentWillEnter(this._handleDoneEntering.bind(this, method));
          } else {
            this._handleDoneEntering(method);
          }
        },
        /**
         * @param {Object} m
         * @return {undefined}
         */
        _handleDoneEntering : function(m) {
          var other = this.refs[m];
          if (other.componentDidEnter) {
            other.componentDidEnter();
          }
          delete this.currentlyTransitioningKeys[m];
          var self = $.getChildMapping(this.props.children);
          if (!(self && self.hasOwnProperty(m))) {
            this.performLeave(m);
          }
        },
        /**
         * @param {Object} method
         * @return {undefined}
         */
        performLeave : function(method) {
          /** @type {boolean} */
          this.currentlyTransitioningKeys[method] = true;
          var original = this.refs[method];
          if (original.componentWillLeave) {
            original.componentWillLeave(this._handleDoneLeaving.bind(this, method));
          } else {
            this._handleDoneLeaving(method);
          }
        },
        /**
         * @param {Object} m
         * @return {undefined}
         */
        _handleDoneLeaving : function(m) {
          var other = this.refs[m];
          if (other.componentDidLeave) {
            other.componentDidLeave();
          }
          delete this.currentlyTransitioningKeys[m];
          var self = $.getChildMapping(this.props.children);
          if (self && self.hasOwnProperty(m)) {
            this.performEnter(m);
          } else {
            var items = getActual({}, this.state.children);
            delete items[m];
            this.setState({
              children : items
            });
          }
        },
        /**
         * @return {?}
         */
        render : function() {
          var args = {};
          var i;
          for (i in this.state.children) {
            var qualifier = this.state.children[i];
            if (qualifier) {
              args[i] = exec(this.props.childFactory(qualifier), {
                ref : i
              });
            }
          }
          return self.createElement(this.props.component, this.props, args);
        }
      });
      module.exports = JsDiff;
    }, {
      "./Object.assign" : 29,
      "./React" : 31,
      "./ReactTransitionChildMapping" : 88,
      "./cloneWithProps" : 113,
      "./emptyFunction" : 121
    }],
    91 : [function(declare, module, dataAndEvents) {
      /**
       * @return {undefined}
       */
      function every() {
        fn(node.ReactReconcileTransaction && self, "ReactUpdates: must inject a reconcile transaction class and batching strategy");
      }
      /**
       * @return {undefined}
       */
      function child() {
        this.reinitializeTransaction();
        /** @type {null} */
        this.dirtyComponentsLength = null;
        this.callbackQueue = NewKlass.getPooled();
        this.reconcileTransaction = node.ReactReconcileTransaction.getPooled();
      }
      /**
       * @param {Function} callback
       * @param {string} options
       * @param {string} allowIntersection
       * @return {undefined}
       */
      function domManip(callback, options, allowIntersection) {
        every();
        self.batchedUpdates(callback, options, allowIntersection);
      }
      /**
       * @param {?} c1
       * @param {?} c2
       * @return {?}
       */
      function param(c1, c2) {
        return c1._mountDepth - c2._mountDepth;
      }
      /**
       * @param {?} to
       * @return {undefined}
       */
      function compute(to) {
        var len = to.dirtyComponentsLength;
        fn(len === params.length, "Expected flush transaction's stored dirty-components length (%s) to match dirty-components array length (%s).", len, params.length);
        params.sort(param);
        /** @type {number} */
        var i = 0;
        for (;len > i;i++) {
          var component = params[i];
          if (component.isMounted()) {
            var callbacks = component._pendingCallbacks;
            if (component._pendingCallbacks = null, component.performUpdateIfNecessary(to.reconcileTransaction), callbacks) {
              /** @type {number} */
              var cbIdx = 0;
              for (;cbIdx < callbacks.length;cbIdx++) {
                to.callbackQueue.enqueue(callbacks[cbIdx], component);
              }
            }
          }
        }
      }
      /**
       * @param {string} options
       * @param {string} value
       * @return {?}
       */
      function callback(options, value) {
        return fn(!value || "function" == typeof value, "enqueueUpdate(...): You called `setProps`, `replaceProps`, `setState`, `replaceState`, or `forceUpdate` with a callback that isn't callable."), every(), removeNode(null == control.current, "enqueueUpdate(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate."), self.isBatchingUpdates ? (params.push(options), void(value && 
        (options._pendingCallbacks ? options._pendingCallbacks.push(value) : options._pendingCallbacks = [value]))) : void self.batchedUpdates(callback, options, value);
      }
      /**
       * @param {Function} name
       * @param {string} condition
       * @return {undefined}
       */
      function assert(name, condition) {
        fn(self.isBatchingUpdates, "ReactUpdates.asap: Can't enqueue an asap callback in a context whereupdates are not being batched.");
        me.enqueue(name, condition);
        /** @type {boolean} */
        hash = true;
      }
      var NewKlass = declare("./CallbackQueue");
      var sc = declare("./PooledClass");
      var control = declare("./ReactCurrentOwner");
      var ScrollingTabController = declare("./ReactPerf");
      var NumberTextBox = declare("./Transaction");
      var copyProps = declare("./Object.assign");
      var fn = declare("./invariant");
      var removeNode = declare("./warning");
      /** @type {Array} */
      var params = [];
      var me = NewKlass.getPooled();
      /** @type {boolean} */
      var hash = false;
      /** @type {null} */
      var self = null;
      var methods = {
        /**
         * @return {undefined}
         */
        initialize : function() {
          /** @type {number} */
          this.dirtyComponentsLength = params.length;
        },
        /**
         * @return {undefined}
         */
        close : function() {
          if (this.dirtyComponentsLength !== params.length) {
            params.splice(0, this.dirtyComponentsLength);
            removeChild();
          } else {
            /** @type {number} */
            params.length = 0;
          }
        }
      };
      var CSHARP_KEYWORDS = {
        /**
         * @return {undefined}
         */
        initialize : function() {
          this.callbackQueue.reset();
        },
        /**
         * @return {undefined}
         */
        close : function() {
          this.callbackQueue.notifyAll();
        }
      };
      /** @type {Array} */
      var ALL_KEYWORDS = [methods, CSHARP_KEYWORDS];
      copyProps(child.prototype, NumberTextBox.Mixin, {
        /**
         * @return {?}
         */
        getTransactionWrappers : function() {
          return ALL_KEYWORDS;
        },
        /**
         * @return {undefined}
         */
        destructor : function() {
          /** @type {null} */
          this.dirtyComponentsLength = null;
          NewKlass.release(this.callbackQueue);
          /** @type {null} */
          this.callbackQueue = null;
          node.ReactReconcileTransaction.release(this.reconcileTransaction);
          /** @type {null} */
          this.reconcileTransaction = null;
        },
        /**
         * @param {Function} fn
         * @param {Array} recurring
         * @param {string} value
         * @return {?}
         */
        perform : function(fn, recurring, value) {
          return NumberTextBox.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, fn, recurring, value);
        }
      });
      sc.addPoolingTo(child);
      var removeChild = ScrollingTabController.measure("ReactUpdates", "flushBatchedUpdates", function() {
        for (;params.length || hash;) {
          if (params.length) {
            var pdataOld = child.getPooled();
            pdataOld.perform(compute, null, pdataOld);
            child.release(pdataOld);
          }
          if (hash) {
            /** @type {boolean} */
            hash = false;
            var udataCur = me;
            me = NewKlass.getPooled();
            udataCur.notifyAll();
            NewKlass.release(udataCur);
          }
        }
      });
      var injection = {
        /**
         * @param {Function} context
         * @return {undefined}
         */
        injectReconcileTransaction : function(context) {
          fn(context, "ReactUpdates: must provide a reconcile transaction class");
          /** @type {Function} */
          node.ReactReconcileTransaction = context;
        },
        /**
         * @param {Function} obj
         * @return {undefined}
         */
        injectBatchingStrategy : function(obj) {
          fn(obj, "ReactUpdates: must provide a batching strategy");
          fn("function" == typeof obj.batchedUpdates, "ReactUpdates: must provide a batchedUpdates() function");
          fn("boolean" == typeof obj.isBatchingUpdates, "ReactUpdates: must provide an isBatchingUpdates boolean attribute");
          /** @type {Function} */
          self = obj;
        }
      };
      var node = {
        ReactReconcileTransaction : null,
        /** @type {function (Function, string, string): undefined} */
        batchedUpdates : domManip,
        /** @type {function (string, string): ?} */
        enqueueUpdate : callback,
        flushBatchedUpdates : removeChild,
        injection : injection,
        /** @type {function (Function, string): undefined} */
        asap : assert
      };
      module.exports = node;
    }, {
      "./CallbackQueue" : 7,
      "./Object.assign" : 29,
      "./PooledClass" : 30,
      "./ReactCurrentOwner" : 42,
      "./ReactPerf" : 75,
      "./Transaction" : 107,
      "./invariant" : 140,
      "./warning" : 160
    }],
    92 : [function(require, module, dataAndEvents) {
      var Block = require("./DOMProperty");
      var pos = Block.injection.MUST_USE_ATTRIBUTE;
      var JsDiff = {
        Properties : {
          cx : pos,
          cy : pos,
          d : pos,
          dx : pos,
          dy : pos,
          fill : pos,
          fillOpacity : pos,
          fontFamily : pos,
          fontSize : pos,
          fx : pos,
          fy : pos,
          gradientTransform : pos,
          gradientUnits : pos,
          markerEnd : pos,
          markerMid : pos,
          markerStart : pos,
          offset : pos,
          opacity : pos,
          patternContentUnits : pos,
          patternUnits : pos,
          points : pos,
          preserveAspectRatio : pos,
          r : pos,
          rx : pos,
          ry : pos,
          spreadMethod : pos,
          stopColor : pos,
          stopOpacity : pos,
          stroke : pos,
          strokeDasharray : pos,
          strokeLinecap : pos,
          strokeOpacity : pos,
          strokeWidth : pos,
          textAnchor : pos,
          transform : pos,
          version : pos,
          viewBox : pos,
          x1 : pos,
          x2 : pos,
          x : pos,
          y1 : pos,
          y2 : pos,
          y : pos
        },
        DOMAttributeNames : {
          fillOpacity : "fill-opacity",
          fontFamily : "font-family",
          fontSize : "font-size",
          gradientTransform : "gradientTransform",
          gradientUnits : "gradientUnits",
          markerEnd : "marker-end",
          markerMid : "marker-mid",
          markerStart : "marker-start",
          patternContentUnits : "patternContentUnits",
          patternUnits : "patternUnits",
          preserveAspectRatio : "preserveAspectRatio",
          spreadMethod : "spreadMethod",
          stopColor : "stop-color",
          stopOpacity : "stop-opacity",
          strokeDasharray : "stroke-dasharray",
          strokeLinecap : "stroke-linecap",
          strokeOpacity : "stroke-opacity",
          strokeWidth : "stroke-width",
          textAnchor : "text-anchor",
          viewBox : "viewBox"
        }
      };
      module.exports = JsDiff;
    }, {
      "./DOMProperty" : 12
    }],
    93 : [function(require, module, dataAndEvents) {
      /**
       * @param {Element} node
       * @return {?}
       */
      function getSelection(node) {
        if ("selectionStart" in node && nodes.hasSelectionCapabilities(node)) {
          return{
            start : node.selectionStart,
            end : node.selectionEnd
          };
        }
        if (window.getSelection) {
          /** @type {(Selection|null)} */
          var selection = window.getSelection();
          return{
            anchorNode : selection.anchorNode,
            anchorOffset : selection.anchorOffset,
            focusNode : selection.focusNode,
            focusOffset : selection.focusOffset
          };
        }
        if (document.selection) {
          /** @type {(ControlRange|TextRange|null)} */
          var range = document.selection.createRange();
          return{
            parentElement : range.parentElement(),
            text : range.text,
            top : range.boundingTop,
            left : range.boundingLeft
          };
        }
      }
      /**
       * @param {Event} nativeEvent
       * @return {?}
       */
      function select(nativeEvent) {
        if (!s && (null != elem && elem == isHTML())) {
          var lowerTagName = getSelection(elem);
          if (!dontCloseTags || !indexOf(dontCloseTags, lowerTagName)) {
            dontCloseTags = lowerTagName;
            var event = test.getPooled(options.select, topLevelTargetID, nativeEvent);
            return event.type = "select", event.target = elem, assert.accumulateTwoPhaseDispatches(event), event;
          }
        }
      }
      var Block = require("./EventConstants");
      var assert = require("./EventPropagators");
      var nodes = require("./ReactInputSelection");
      var test = require("./SyntheticEvent");
      var isHTML = require("./getActiveElement");
      var forIn = require("./isTextInputElement");
      var getActual = require("./keyOf");
      var indexOf = require("./shallowEqual");
      var topLevelTypes = Block.topLevelTypes;
      var options = {
        select : {
          phasedRegistrationNames : {
            bubbled : getActual({
              onSelect : null
            }),
            captured : getActual({
              onSelectCapture : null
            })
          },
          dependencies : [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
        }
      };
      /** @type {null} */
      var elem = null;
      /** @type {null} */
      var topLevelTargetID = null;
      /** @type {null} */
      var dontCloseTags = null;
      /** @type {boolean} */
      var s = false;
      var JsDiff = {
        eventTypes : options,
        /**
         * @param {string} topLevelType
         * @param {Element} topLevelTarget
         * @param {Error} targetID
         * @param {Event} nativeEvent
         * @return {?}
         */
        extractEvents : function(topLevelType, topLevelTarget, targetID, nativeEvent) {
          switch(topLevelType) {
            case topLevelTypes.topFocus:
              if (forIn(topLevelTarget) || "true" === topLevelTarget.contentEditable) {
                /** @type {Element} */
                elem = topLevelTarget;
                /** @type {Error} */
                topLevelTargetID = targetID;
                /** @type {null} */
                dontCloseTags = null;
              }
              break;
            case topLevelTypes.topBlur:
              /** @type {null} */
              elem = null;
              /** @type {null} */
              topLevelTargetID = null;
              /** @type {null} */
              dontCloseTags = null;
              break;
            case topLevelTypes.topMouseDown:
              /** @type {boolean} */
              s = true;
              break;
            case topLevelTypes.topContextMenu:
            ;
            case topLevelTypes.topMouseUp:
              return s = false, select(nativeEvent);
            case topLevelTypes.topSelectionChange:
            ;
            case topLevelTypes.topKeyDown:
            ;
            case topLevelTypes.topKeyUp:
              return select(nativeEvent);
          }
        }
      };
      module.exports = JsDiff;
    }, {
      "./EventConstants" : 17,
      "./EventPropagators" : 22,
      "./ReactInputSelection" : 65,
      "./SyntheticEvent" : 99,
      "./getActiveElement" : 127,
      "./isTextInputElement" : 143,
      "./keyOf" : 147,
      "./shallowEqual" : 155
    }],
    94 : [function(dataAndEvents, module, deepDataAndEvents) {
      /** @type {number} */
      var scaleX = Math.pow(2, 53);
      var JsDiff = {
        /**
         * @return {?}
         */
        createReactRootIndex : function() {
          return Math.ceil(Math.random() * scaleX);
        }
      };
      module.exports = JsDiff;
    }, {}],
    95 : [function(require, module, dataAndEvents) {
      var Block = require("./EventConstants");
      var jQuery = require("./EventPluginUtils");
      var assert = require("./EventPropagators");
      var nodes = require("./SyntheticClipboardEvent");
      var helper = require("./SyntheticEvent");
      var inspect = require("./SyntheticFocusEvent");
      var selfClosing = require("./SyntheticKeyboardEvent");
      var getActual = require("./SyntheticMouseEvent");
      var should = require("./SyntheticDragEvent");
      var expect = require("./SyntheticTouchEvent");
      var getName = require("./SyntheticUIEvent");
      var base64 = require("./SyntheticWheelEvent");
      var forIn = require("./getEventCharCode");
      var transferFlags = require("./invariant");
      var transport = require("./keyOf");
      var forOwn = require("./warning");
      var topLevelTypes = Block.topLevelTypes;
      var self = {
        blur : {
          phasedRegistrationNames : {
            bubbled : transport({
              onBlur : true
            }),
            captured : transport({
              onBlurCapture : true
            })
          }
        },
        click : {
          phasedRegistrationNames : {
            bubbled : transport({
              onClick : true
            }),
            captured : transport({
              onClickCapture : true
            })
          }
        },
        contextMenu : {
          phasedRegistrationNames : {
            bubbled : transport({
              onContextMenu : true
            }),
            captured : transport({
              onContextMenuCapture : true
            })
          }
        },
        copy : {
          phasedRegistrationNames : {
            bubbled : transport({
              onCopy : true
            }),
            captured : transport({
              onCopyCapture : true
            })
          }
        },
        cut : {
          phasedRegistrationNames : {
            bubbled : transport({
              onCut : true
            }),
            captured : transport({
              onCutCapture : true
            })
          }
        },
        doubleClick : {
          phasedRegistrationNames : {
            bubbled : transport({
              onDoubleClick : true
            }),
            captured : transport({
              onDoubleClickCapture : true
            })
          }
        },
        drag : {
          phasedRegistrationNames : {
            bubbled : transport({
              onDrag : true
            }),
            captured : transport({
              onDragCapture : true
            })
          }
        },
        dragEnd : {
          phasedRegistrationNames : {
            bubbled : transport({
              onDragEnd : true
            }),
            captured : transport({
              onDragEndCapture : true
            })
          }
        },
        dragEnter : {
          phasedRegistrationNames : {
            bubbled : transport({
              onDragEnter : true
            }),
            captured : transport({
              onDragEnterCapture : true
            })
          }
        },
        dragExit : {
          phasedRegistrationNames : {
            bubbled : transport({
              onDragExit : true
            }),
            captured : transport({
              onDragExitCapture : true
            })
          }
        },
        dragLeave : {
          phasedRegistrationNames : {
            bubbled : transport({
              onDragLeave : true
            }),
            captured : transport({
              onDragLeaveCapture : true
            })
          }
        },
        dragOver : {
          phasedRegistrationNames : {
            bubbled : transport({
              onDragOver : true
            }),
            captured : transport({
              onDragOverCapture : true
            })
          }
        },
        dragStart : {
          phasedRegistrationNames : {
            bubbled : transport({
              onDragStart : true
            }),
            captured : transport({
              onDragStartCapture : true
            })
          }
        },
        drop : {
          phasedRegistrationNames : {
            bubbled : transport({
              onDrop : true
            }),
            captured : transport({
              onDropCapture : true
            })
          }
        },
        focus : {
          phasedRegistrationNames : {
            bubbled : transport({
              onFocus : true
            }),
            captured : transport({
              onFocusCapture : true
            })
          }
        },
        input : {
          phasedRegistrationNames : {
            bubbled : transport({
              onInput : true
            }),
            captured : transport({
              onInputCapture : true
            })
          }
        },
        keyDown : {
          phasedRegistrationNames : {
            bubbled : transport({
              onKeyDown : true
            }),
            captured : transport({
              onKeyDownCapture : true
            })
          }
        },
        keyPress : {
          phasedRegistrationNames : {
            bubbled : transport({
              onKeyPress : true
            }),
            captured : transport({
              onKeyPressCapture : true
            })
          }
        },
        keyUp : {
          phasedRegistrationNames : {
            bubbled : transport({
              onKeyUp : true
            }),
            captured : transport({
              onKeyUpCapture : true
            })
          }
        },
        load : {
          phasedRegistrationNames : {
            bubbled : transport({
              onLoad : true
            }),
            captured : transport({
              onLoadCapture : true
            })
          }
        },
        error : {
          phasedRegistrationNames : {
            bubbled : transport({
              onError : true
            }),
            captured : transport({
              onErrorCapture : true
            })
          }
        },
        mouseDown : {
          phasedRegistrationNames : {
            bubbled : transport({
              onMouseDown : true
            }),
            captured : transport({
              onMouseDownCapture : true
            })
          }
        },
        mouseMove : {
          phasedRegistrationNames : {
            bubbled : transport({
              onMouseMove : true
            }),
            captured : transport({
              onMouseMoveCapture : true
            })
          }
        },
        mouseOut : {
          phasedRegistrationNames : {
            bubbled : transport({
              onMouseOut : true
            }),
            captured : transport({
              onMouseOutCapture : true
            })
          }
        },
        mouseOver : {
          phasedRegistrationNames : {
            bubbled : transport({
              onMouseOver : true
            }),
            captured : transport({
              onMouseOverCapture : true
            })
          }
        },
        mouseUp : {
          phasedRegistrationNames : {
            bubbled : transport({
              onMouseUp : true
            }),
            captured : transport({
              onMouseUpCapture : true
            })
          }
        },
        paste : {
          phasedRegistrationNames : {
            bubbled : transport({
              onPaste : true
            }),
            captured : transport({
              onPasteCapture : true
            })
          }
        },
        reset : {
          phasedRegistrationNames : {
            bubbled : transport({
              onReset : true
            }),
            captured : transport({
              onResetCapture : true
            })
          }
        },
        scroll : {
          phasedRegistrationNames : {
            bubbled : transport({
              onScroll : true
            }),
            captured : transport({
              onScrollCapture : true
            })
          }
        },
        submit : {
          phasedRegistrationNames : {
            bubbled : transport({
              onSubmit : true
            }),
            captured : transport({
              onSubmitCapture : true
            })
          }
        },
        touchCancel : {
          phasedRegistrationNames : {
            bubbled : transport({
              onTouchCancel : true
            }),
            captured : transport({
              onTouchCancelCapture : true
            })
          }
        },
        touchEnd : {
          phasedRegistrationNames : {
            bubbled : transport({
              onTouchEnd : true
            }),
            captured : transport({
              onTouchEndCapture : true
            })
          }
        },
        touchMove : {
          phasedRegistrationNames : {
            bubbled : transport({
              onTouchMove : true
            }),
            captured : transport({
              onTouchMoveCapture : true
            })
          }
        },
        touchStart : {
          phasedRegistrationNames : {
            bubbled : transport({
              onTouchStart : true
            }),
            captured : transport({
              onTouchStartCapture : true
            })
          }
        },
        wheel : {
          phasedRegistrationNames : {
            bubbled : transport({
              onWheel : true
            }),
            captured : transport({
              onWheelCapture : true
            })
          }
        }
      };
      var unpreparedModules = {
        topBlur : self.blur,
        topClick : self.click,
        topContextMenu : self.contextMenu,
        topCopy : self.copy,
        topCut : self.cut,
        topDoubleClick : self.doubleClick,
        topDrag : self.drag,
        topDragEnd : self.dragEnd,
        topDragEnter : self.dragEnter,
        topDragExit : self.dragExit,
        topDragLeave : self.dragLeave,
        topDragOver : self.dragOver,
        topDragStart : self.dragStart,
        topDrop : self.drop,
        topError : self.error,
        topFocus : self.focus,
        topInput : self.input,
        topKeyDown : self.keyDown,
        topKeyPress : self.keyPress,
        topKeyUp : self.keyUp,
        topLoad : self.load,
        topMouseDown : self.mouseDown,
        topMouseMove : self.mouseMove,
        topMouseOut : self.mouseOut,
        topMouseOver : self.mouseOver,
        topMouseUp : self.mouseUp,
        topPaste : self.paste,
        topReset : self.reset,
        topScroll : self.scroll,
        topSubmit : self.submit,
        topTouchCancel : self.touchCancel,
        topTouchEnd : self.touchEnd,
        topTouchMove : self.touchMove,
        topTouchStart : self.touchStart,
        topWheel : self.wheel
      };
      var normalizedName;
      for (normalizedName in unpreparedModules) {
        /** @type {Array} */
        unpreparedModules[normalizedName].dependencies = [normalizedName];
      }
      var JsDiff = {
        eventTypes : self,
        /**
         * @param {Object} event
         * @param {?} prop
         * @param {?} deepDataAndEvents
         * @return {undefined}
         */
        executeDispatch : function(event, prop, deepDataAndEvents) {
          var desc = jQuery.executeDispatch(event, prop, deepDataAndEvents);
          forOwn("boolean" != typeof desc, "Returning `false` from an event handler is deprecated and will be ignored in a future release. Instead, manually call e.stopPropagation() or e.preventDefault(), as appropriate.");
          if (desc === false) {
            event.stopPropagation();
            event.preventDefault();
          }
        },
        /**
         * @param {string} topLevelType
         * @param {string} topLevelTarget
         * @param {Error} topLevelTargetID
         * @param {Event} nativeEvent
         * @return {?}
         */
        extractEvents : function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {
          var dispatchConfig = unpreparedModules[topLevelType];
          if (!dispatchConfig) {
            return null;
          }
          var EventConstructor;
          switch(topLevelType) {
            case topLevelTypes.topInput:
            ;
            case topLevelTypes.topLoad:
            ;
            case topLevelTypes.topError:
            ;
            case topLevelTypes.topReset:
            ;
            case topLevelTypes.topSubmit:
              EventConstructor = helper;
              break;
            case topLevelTypes.topKeyPress:
              if (0 === forIn(nativeEvent)) {
                return null;
              }
            ;
            case topLevelTypes.topKeyDown:
            ;
            case topLevelTypes.topKeyUp:
              EventConstructor = selfClosing;
              break;
            case topLevelTypes.topBlur:
            ;
            case topLevelTypes.topFocus:
              EventConstructor = inspect;
              break;
            case topLevelTypes.topClick:
              if (2 === nativeEvent.button) {
                return null;
              }
            ;
            case topLevelTypes.topContextMenu:
            ;
            case topLevelTypes.topDoubleClick:
            ;
            case topLevelTypes.topMouseDown:
            ;
            case topLevelTypes.topMouseMove:
            ;
            case topLevelTypes.topMouseOut:
            ;
            case topLevelTypes.topMouseOver:
            ;
            case topLevelTypes.topMouseUp:
              EventConstructor = getActual;
              break;
            case topLevelTypes.topDrag:
            ;
            case topLevelTypes.topDragEnd:
            ;
            case topLevelTypes.topDragEnter:
            ;
            case topLevelTypes.topDragExit:
            ;
            case topLevelTypes.topDragLeave:
            ;
            case topLevelTypes.topDragOver:
            ;
            case topLevelTypes.topDragStart:
            ;
            case topLevelTypes.topDrop:
              EventConstructor = should;
              break;
            case topLevelTypes.topTouchCancel:
            ;
            case topLevelTypes.topTouchEnd:
            ;
            case topLevelTypes.topTouchMove:
            ;
            case topLevelTypes.topTouchStart:
              EventConstructor = expect;
              break;
            case topLevelTypes.topScroll:
              EventConstructor = getName;
              break;
            case topLevelTypes.topWheel:
              EventConstructor = base64;
              break;
            case topLevelTypes.topCopy:
            ;
            case topLevelTypes.topCut:
            ;
            case topLevelTypes.topPaste:
              EventConstructor = nodes;
          }
          transferFlags(EventConstructor, "SimpleEventPlugin: Unhandled event type, `%s`.", topLevelType);
          var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent);
          return assert.accumulateTwoPhaseDispatches(event), event;
        }
      };
      module.exports = JsDiff;
    }, {
      "./EventConstants" : 17,
      "./EventPluginUtils" : 21,
      "./EventPropagators" : 22,
      "./SyntheticClipboardEvent" : 96,
      "./SyntheticDragEvent" : 98,
      "./SyntheticEvent" : 99,
      "./SyntheticFocusEvent" : 100,
      "./SyntheticKeyboardEvent" : 102,
      "./SyntheticMouseEvent" : 103,
      "./SyntheticTouchEvent" : 104,
      "./SyntheticUIEvent" : 105,
      "./SyntheticWheelEvent" : 106,
      "./getEventCharCode" : 128,
      "./invariant" : 140,
      "./keyOf" : 147,
      "./warning" : 160
    }],
    96 : [function($sanitize, module, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @param {boolean} type
       * @return {undefined}
       */
      function prop(name, value, type) {
        jQuery.call(this, name, value, type);
      }
      var jQuery = $sanitize("./SyntheticEvent");
      var clone = {
        /**
         * @param {Window} e
         * @return {?}
         */
        clipboardData : function(e) {
          return "clipboardData" in e ? e.clipboardData : window.clipboardData;
        }
      };
      jQuery.augmentClass(prop, clone);
      /** @type {function (string, Object, boolean): undefined} */
      module.exports = prop;
    }, {
      "./SyntheticEvent" : 99
    }],
    97 : [function($sanitize, module, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @param {boolean} type
       * @return {undefined}
       */
      function prop(name, value, type) {
        jQuery.call(this, name, value, type);
      }
      var jQuery = $sanitize("./SyntheticEvent");
      var clone = {
        data : null
      };
      jQuery.augmentClass(prop, clone);
      /** @type {function (string, Object, boolean): undefined} */
      module.exports = prop;
    }, {
      "./SyntheticEvent" : 99
    }],
    98 : [function($sanitize, module, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @param {boolean} type
       * @return {undefined}
       */
      function prop(name, value, type) {
        jQuery.call(this, name, value, type);
      }
      var jQuery = $sanitize("./SyntheticMouseEvent");
      var clone = {
        dataTransfer : null
      };
      jQuery.augmentClass(prop, clone);
      /** @type {function (string, Object, boolean): undefined} */
      module.exports = prop;
    }, {
      "./SyntheticMouseEvent" : 103
    }],
    99 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @param {Object} type
       * @return {undefined}
       */
      function Class(name, value, type) {
        /** @type {string} */
        this.dispatchConfig = name;
        /** @type {Object} */
        this.dispatchMarker = value;
        /** @type {Object} */
        this.nativeEvent = type;
        var attrs = this.constructor.Interface;
        var key;
        for (key in attrs) {
          if (attrs.hasOwnProperty(key)) {
            var handler = attrs[key];
            if (handler) {
              this[key] = handler(type);
            } else {
              this[key] = type[key];
            }
          }
        }
        var h = null != type.defaultPrevented ? type.defaultPrevented : type.returnValue === false;
        if (h) {
          this.isDefaultPrevented = evt.thatReturnsTrue;
        } else {
          this.isDefaultPrevented = evt.thatReturnsFalse;
        }
        this.isPropagationStopped = evt.thatReturnsFalse;
      }
      var Q = require("./PooledClass");
      var extend = require("./Object.assign");
      var evt = require("./emptyFunction");
      var dom = require("./getEventTarget");
      var oEventPseudo = {
        type : null,
        target : dom,
        currentTarget : evt.thatReturnsNull,
        eventPhase : null,
        bubbles : null,
        cancelable : null,
        /**
         * @param {string} name
         * @return {?}
         */
        timeStamp : function(name) {
          return name.timeStamp || Date.now();
        },
        defaultPrevented : null,
        isTrusted : null
      };
      extend(Class.prototype, {
        /**
         * @return {undefined}
         */
        preventDefault : function() {
          /** @type {boolean} */
          this.defaultPrevented = true;
          var event = this.nativeEvent;
          if (event.preventDefault) {
            event.preventDefault();
          } else {
            /** @type {boolean} */
            event.returnValue = false;
          }
          this.isDefaultPrevented = evt.thatReturnsTrue;
        },
        /**
         * @return {undefined}
         */
        stopPropagation : function() {
          var event = this.nativeEvent;
          if (event.stopPropagation) {
            event.stopPropagation();
          } else {
            /** @type {boolean} */
            event.cancelBubble = true;
          }
          this.isPropagationStopped = evt.thatReturnsTrue;
        },
        /**
         * @return {undefined}
         */
        persist : function() {
          this.isPersistent = evt.thatReturnsTrue;
        },
        isPersistent : evt.thatReturnsFalse,
        /**
         * @return {undefined}
         */
        destructor : function() {
          var Interface = this.constructor.Interface;
          var propName;
          for (propName in Interface) {
            /** @type {null} */
            this[propName] = null;
          }
          /** @type {null} */
          this.dispatchConfig = null;
          /** @type {null} */
          this.dispatchMarker = null;
          /** @type {null} */
          this.nativeEvent = null;
        }
      });
      Class.Interface = oEventPseudo;
      /**
       * @param {string} object
       * @param {?} dest
       * @return {undefined}
       */
      Class.augmentClass = function(object, dest) {
        var Super = this;
        /** @type {Object} */
        var empty = Object.create(Super.prototype);
        extend(empty, object.prototype);
        /** @type {Object} */
        object.prototype = empty;
        /** @type {string} */
        object.prototype.constructor = object;
        object.Interface = extend({}, Super.Interface, dest);
        object.augmentClass = Super.augmentClass;
        Q.addPoolingTo(object, Q.threeArgumentPooler);
      };
      Q.addPoolingTo(Class, Q.threeArgumentPooler);
      /** @type {function (string, Object, Object): undefined} */
      module.exports = Class;
    }, {
      "./Object.assign" : 29,
      "./PooledClass" : 30,
      "./emptyFunction" : 121,
      "./getEventTarget" : 131
    }],
    100 : [function($sanitize, module, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @param {boolean} type
       * @return {undefined}
       */
      function prop(name, value, type) {
        jQuery.call(this, name, value, type);
      }
      var jQuery = $sanitize("./SyntheticUIEvent");
      var clone = {
        relatedTarget : null
      };
      jQuery.augmentClass(prop, clone);
      /** @type {function (string, Object, boolean): undefined} */
      module.exports = prop;
    }, {
      "./SyntheticUIEvent" : 105
    }],
    101 : [function($sanitize, module, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @param {boolean} type
       * @return {undefined}
       */
      function prop(name, value, type) {
        jQuery.call(this, name, value, type);
      }
      var jQuery = $sanitize("./SyntheticEvent");
      var clone = {
        data : null
      };
      jQuery.augmentClass(prop, clone);
      /** @type {function (string, Object, boolean): undefined} */
      module.exports = prop;
    }, {
      "./SyntheticEvent" : 99
    }],
    102 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @param {boolean} type
       * @return {undefined}
       */
      function prop(name, value, type) {
        jQuery.call(this, name, value, type);
      }
      var jQuery = require("./SyntheticUIEvent");
      var assert = require("./getEventCharCode");
      var i = require("./getEventKey");
      var Block = require("./getEventModifierState");
      var data = {
        key : i,
        location : null,
        ctrlKey : null,
        shiftKey : null,
        altKey : null,
        metaKey : null,
        repeat : null,
        locale : null,
        getModifierState : Block,
        /**
         * @param {Event} e
         * @return {?}
         */
        charCode : function(e) {
          return "keypress" === e.type ? assert(e) : 0;
        },
        /**
         * @param {Object} e
         * @return {?}
         */
        keyCode : function(e) {
          return "keydown" === e.type || "keyup" === e.type ? e.keyCode : 0;
        },
        /**
         * @param {Object} e
         * @return {?}
         */
        which : function(e) {
          return "keypress" === e.type ? assert(e) : "keydown" === e.type || "keyup" === e.type ? e.keyCode : 0;
        }
      };
      jQuery.augmentClass(prop, data);
      /** @type {function (string, Object, boolean): undefined} */
      module.exports = prop;
    }, {
      "./SyntheticUIEvent" : 105,
      "./getEventCharCode" : 128,
      "./getEventKey" : 129,
      "./getEventModifierState" : 130
    }],
    103 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @param {boolean} type
       * @return {undefined}
       */
      function prop(name, value, type) {
        jQuery.call(this, name, value, type);
      }
      var jQuery = require("./SyntheticUIEvent");
      var b = require("./ViewportMetrics");
      var Block = require("./getEventModifierState");
      var ev = {
        screenX : null,
        screenY : null,
        clientX : null,
        clientY : null,
        ctrlKey : null,
        shiftKey : null,
        altKey : null,
        metaKey : null,
        getModifierState : Block,
        /**
         * @param {string} name
         * @return {?}
         */
        button : function(name) {
          var old = name.button;
          return "which" in name ? old : 2 === old ? 2 : 4 === old ? 1 : 0;
        },
        buttons : null,
        /**
         * @param {string} name
         * @return {?}
         */
        relatedTarget : function(name) {
          return name.relatedTarget || (name.fromElement === name.srcElement ? name.toElement : name.fromElement);
        },
        /**
         * @param {string} name
         * @return {?}
         */
        pageX : function(name) {
          return "pageX" in name ? name.pageX : name.clientX + b.currentScrollLeft;
        },
        /**
         * @param {string} name
         * @return {?}
         */
        pageY : function(name) {
          return "pageY" in name ? name.pageY : name.clientY + b.currentScrollTop;
        }
      };
      jQuery.augmentClass(prop, ev);
      /** @type {function (string, Object, boolean): undefined} */
      module.exports = prop;
    }, {
      "./SyntheticUIEvent" : 105,
      "./ViewportMetrics" : 108,
      "./getEventModifierState" : 130
    }],
    104 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @param {boolean} type
       * @return {undefined}
       */
      function prop(name, value, type) {
        jQuery.call(this, name, value, type);
      }
      var jQuery = require("./SyntheticUIEvent");
      var Block = require("./getEventModifierState");
      var clone = {
        touches : null,
        targetTouches : null,
        changedTouches : null,
        altKey : null,
        metaKey : null,
        ctrlKey : null,
        shiftKey : null,
        getModifierState : Block
      };
      jQuery.augmentClass(prop, clone);
      /** @type {function (string, Object, boolean): undefined} */
      module.exports = prop;
    }, {
      "./SyntheticUIEvent" : 105,
      "./getEventModifierState" : 130
    }],
    105 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @param {boolean} type
       * @return {undefined}
       */
      function prop(name, value, type) {
        jQuery.call(this, name, value, type);
      }
      var jQuery = require("./SyntheticEvent");
      var getActual = require("./getEventTarget");
      var clone = {
        /**
         * @param {Event} obj
         * @return {?}
         */
        view : function(obj) {
          if (obj.view) {
            return obj.view;
          }
          var that = getActual(obj);
          if (null != that && that.window === that) {
            return that;
          }
          var elem = that.ownerDocument;
          return elem ? elem.defaultView || elem.parentWindow : window;
        },
        /**
         * @param {Event} params
         * @return {?}
         */
        detail : function(params) {
          return params.detail || 0;
        }
      };
      jQuery.augmentClass(prop, clone);
      /** @type {function (string, Object, boolean): undefined} */
      module.exports = prop;
    }, {
      "./SyntheticEvent" : 99,
      "./getEventTarget" : 131
    }],
    106 : [function($sanitize, module, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @param {boolean} type
       * @return {undefined}
       */
      function prop(name, value, type) {
        jQuery.call(this, name, value, type);
      }
      var jQuery = $sanitize("./SyntheticMouseEvent");
      var clone = {
        /**
         * @param {string} name
         * @return {?}
         */
        deltaX : function(name) {
          return "deltaX" in name ? name.deltaX : "wheelDeltaX" in name ? -name.wheelDeltaX : 0;
        },
        /**
         * @param {string} name
         * @return {?}
         */
        deltaY : function(name) {
          return "deltaY" in name ? name.deltaY : "wheelDeltaY" in name ? -name.wheelDeltaY : "wheelDelta" in name ? -name.wheelDelta : 0;
        },
        deltaZ : null,
        deltaMode : null
      };
      jQuery.augmentClass(prop, clone);
      /** @type {function (string, Object, boolean): undefined} */
      module.exports = prop;
    }, {
      "./SyntheticMouseEvent" : 103
    }],
    107 : [function(require, module, dataAndEvents) {
      var sync = require("./invariant");
      var result = {
        /**
         * @return {undefined}
         */
        reinitializeTransaction : function() {
          this.transactionWrappers = this.getTransactionWrappers();
          if (this.wrapperInitData) {
            /** @type {number} */
            this.wrapperInitData.length = 0;
          } else {
            /** @type {Array} */
            this.wrapperInitData = [];
          }
          /** @type {boolean} */
          this._isInTransaction = false;
        },
        _isInTransaction : false,
        getTransactionWrappers : null,
        /**
         * @return {?}
         */
        isInTransaction : function() {
          return!!this._isInTransaction;
        },
        /**
         * @param {Function} fn
         * @param {Array} elems
         * @param {string} value
         * @param {(Node|string)} b
         * @param {?} data
         * @param {?} callback
         * @param {?} e
         * @param {?} f
         * @return {?}
         */
        perform : function(fn, elems, value, b, data, callback, e, f) {
          sync(!this.isInTransaction(), "Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.");
          var j;
          var ret;
          try {
            /** @type {boolean} */
            this._isInTransaction = true;
            /** @type {boolean} */
            j = true;
            this.initializeAll(0);
            ret = fn.call(elems, value, b, data, callback, e, f);
            /** @type {boolean} */
            j = false;
          } finally {
            try {
              if (j) {
                try {
                  this.closeAll(0);
                } catch (l) {
                }
              } else {
                this.closeAll(0);
              }
            } finally {
              /** @type {boolean} */
              this._isInTransaction = false;
            }
          }
          return ret;
        },
        /**
         * @param {number} fromIndex
         * @return {undefined}
         */
        initializeAll : function(fromIndex) {
          var resultItems = this.transactionWrappers;
          /** @type {number} */
          var i = fromIndex;
          for (;i < resultItems.length;i++) {
            var result = resultItems[i];
            try {
              this.wrapperInitData[i] = node.OBSERVED_ERROR;
              this.wrapperInitData[i] = result.initialize ? result.initialize.call(this) : null;
            } finally {
              if (this.wrapperInitData[i] === node.OBSERVED_ERROR) {
                try {
                  this.initializeAll(i + 1);
                } catch (e) {
                }
              }
            }
          }
        },
        /**
         * @param {number} recurring
         * @return {undefined}
         */
        closeAll : function(recurring) {
          sync(this.isInTransaction(), "Transaction.closeAll(): Cannot close transaction when none are open.");
          var branchDataJSON = this.transactionWrappers;
          /** @type {number} */
          var conditionIndex = recurring;
          for (;conditionIndex < branchDataJSON.length;conditionIndex++) {
            var e;
            var condition = branchDataJSON[conditionIndex];
            var initData = this.wrapperInitData[conditionIndex];
            try {
              /** @type {boolean} */
              e = true;
              if (initData !== node.OBSERVED_ERROR) {
                if (condition.close) {
                  condition.close.call(this, initData);
                }
              }
              /** @type {boolean} */
              e = false;
            } finally {
              if (e) {
                try {
                  this.closeAll(conditionIndex + 1);
                } catch (i) {
                }
              }
            }
          }
          /** @type {number} */
          this.wrapperInitData.length = 0;
        }
      };
      var node = {
        Mixin : result,
        OBSERVED_ERROR : {}
      };
      module.exports = node;
    }, {
      "./invariant" : 140
    }],
    108 : [function(require, module, dataAndEvents) {
      var getActual = require("./getUnboundedScrollPosition");
      var ret = {
        currentScrollLeft : 0,
        currentScrollTop : 0,
        /**
         * @return {undefined}
         */
        refreshScrollValues : function() {
          var scrollPosition = getActual(window);
          ret.currentScrollLeft = scrollPosition.x;
          ret.currentScrollTop = scrollPosition.y;
        }
      };
      module.exports = ret;
    }, {
      "./getUnboundedScrollPosition" : 136
    }],
    109 : [function(require, context, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @return {?}
       */
      function self(name, value) {
        if (assert(null != value, "accumulateInto(...): Accumulated items must not be null or undefined."), null == name) {
          return value;
        }
        /** @type {boolean} */
        var start = Array.isArray(name);
        /** @type {boolean} */
        var end = Array.isArray(value);
        return start && end ? (name.push.apply(name, value), name) : start ? (name.push(value), name) : end ? [name].concat(value) : [name, value];
      }
      var assert = require("./invariant");
      /** @type {function (string, Object): ?} */
      context.exports = self;
    }, {
      "./invariant" : 140
    }],
    110 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function attr(name) {
        /** @type {number} */
        var a = 1;
        /** @type {number} */
        var b = 0;
        /** @type {number} */
        var i = 0;
        for (;i < name.length;i++) {
          /** @type {number} */
          a = (a + name.charCodeAt(i)) % MOD;
          /** @type {number} */
          b = (b + a) % MOD;
        }
        return a | b << 16;
      }
      /** @type {number} */
      var MOD = 65521;
      /** @type {function (string): ?} */
      module.exports = attr;
    }, {}],
    111 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function toCamelCase(name) {
        return name.replace(r20, function(dataAndEvents, letter) {
          return letter.toUpperCase();
        });
      }
      /** @type {RegExp} */
      var r20 = /-(.)/g;
      /** @type {function (string): ?} */
      module.exports = toCamelCase;
    }, {}],
    112 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function data(name) {
        return getActual(name.replace(r20, "ms-"));
      }
      var getActual = require("./camelize");
      /** @type {RegExp} */
      var r20 = /^-ms-/;
      /** @type {function (string): ?} */
      module.exports = data;
    }, {
      "./camelize" : 111
    }],
    113 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @return {?}
       */
      function Element(name, value) {
        getActual(!name.ref, "You are calling cloneWithProps() on a child with a ref. This is dangerous because you're creating a new child which will not be added as a ref to its parent.");
        var attributes = lang.mergeProps(value, name.props);
        return!attributes.hasOwnProperty($1) && (name.props.hasOwnProperty($1) && (attributes.children = name.props.children)), t.createElement(name.type, attributes);
      }
      var t = require("./ReactElement");
      var lang = require("./ReactPropTransferer");
      var nodes = require("./keyOf");
      var getActual = require("./warning");
      var $1 = nodes({
        children : null
      });
      /** @type {function (string, Object): ?} */
      module.exports = Element;
    }, {
      "./ReactElement" : 58,
      "./ReactPropTransferer" : 76,
      "./keyOf" : 147,
      "./warning" : 160
    }],
    114 : [function($sanitize, module, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @return {?}
       */
      function contains(name, value) {
        return name && value ? name === value ? true : isString(name) ? false : isString(value) ? contains(name, value.parentNode) : name.contains ? name.contains(value) : name.compareDocumentPosition ? !!(16 & name.compareDocumentPosition(value)) : false : false;
      }
      var isString = $sanitize("./isTextNode");
      /** @type {function (string, Object): ?} */
      module.exports = contains;
    }, {
      "./isTextNode" : 144
    }],
    115 : [function(prim, module, dataAndEvents) {
      /**
       * @param {?} obj
       * @return {?}
       */
      function isArrayLike(obj) {
        return!!obj && (("object" == typeof obj || "function" == typeof obj) && ("length" in obj && (!("setInterval" in obj) && ("number" != typeof obj.nodeType && (Array.isArray(obj) || ("callee" in obj || "item" in obj))))));
      }
      /**
       * @param {string} name
       * @return {?}
       */
      function resolve(name) {
        return isArrayLike(name) ? Array.isArray(name) ? name.slice() : next(name) : [name];
      }
      var next = prim("./toArray");
      /** @type {function (string): ?} */
      module.exports = resolve;
    }, {
      "./toArray" : 157
    }],
    116 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function init(name) {
        var tmpl = selfClosing.createFactory(name);
        var enabled = Person.createClass({
          displayName : "ReactFullPageComponent" + name,
          /**
           * @return {undefined}
           */
          componentWillUnmount : function() {
            getActual(false, "%s tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.", this.constructor.displayName);
          },
          /**
           * @return {?}
           */
          render : function() {
            return tmpl(this.props);
          }
        });
        return enabled;
      }
      var Person = require("./ReactCompositeComponent");
      var selfClosing = require("./ReactElement");
      var getActual = require("./invariant");
      /** @type {function (string): ?} */
      module.exports = init;
    }, {
      "./ReactCompositeComponent" : 40,
      "./ReactElement" : 58,
      "./invariant" : 140
    }],
    117 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} elem
       * @return {?}
       */
      function next(elem) {
        var tokens = elem.match(optgroup);
        return tokens && tokens[1].toLowerCase();
      }
      /**
       * @param {string} name
       * @param {Object} value
       * @return {?}
       */
      function init(name, value) {
        /** @type {(Element|null)} */
        var el = startTouchEl;
        post(!!startTouchEl, "createNodesFromMarkup dummy not initialized");
        var src = next(name);
        var args = src && isObject(src);
        if (args) {
          el.innerHTML = args[1] + name + args[2];
          var pageY = args[0];
          for (;pageY--;) {
            /** @type {(Node|null)} */
            el = el.lastChild;
          }
        } else {
          /** @type {string} */
          el.innerHTML = name;
        }
        var scripts = el.getElementsByTagName("script");
        if (scripts.length) {
          post(value, "createNodesFromMarkup(...): Unexpected <script> element rendered.");
          makeArray(scripts).forEach(value);
        }
        var arr = makeArray(el.childNodes);
        for (;el.lastChild;) {
          el.removeChild(el.lastChild);
        }
        return arr;
      }
      var ua = require("./ExecutionEnvironment");
      var makeArray = require("./createArrayFrom");
      var isObject = require("./getMarkupWrap");
      var post = require("./invariant");
      /** @type {(Element|null)} */
      var startTouchEl = ua.canUseDOM ? document.createElement("div") : null;
      /** @type {RegExp} */
      var optgroup = /^\s*<(\w+)/;
      /** @type {function (string, Object): ?} */
      module.exports = init;
    }, {
      "./ExecutionEnvironment" : 23,
      "./createArrayFrom" : 115,
      "./getMarkupWrap" : 132,
      "./invariant" : 140
    }],
    118 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function resolve(name) {
        return "object" == typeof name ? Object.keys(name).filter(function(timeoutKey) {
          return name[timeoutKey];
        }).join(" ") : Array.prototype.join.call(arguments, " ");
      }
      /** @type {function (string): ?} */
      module.exports = resolve;
    }, {}],
    119 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @return {?}
       */
      function parse(name, value) {
        /** @type {boolean} */
        var c = null == value || ("boolean" == typeof value || "" === value);
        if (c) {
          return "";
        }
        /** @type {boolean} */
        var isNonNumeric = isNaN(value);
        return isNonNumeric || (0 === value || prevChildren.hasOwnProperty(name) && prevChildren[name]) ? "" + value : ("string" == typeof value && (value = value.trim()), value + "px");
      }
      var Block = require("./CSSProperty");
      var prevChildren = Block.isUnitlessNumber;
      /** @type {function (string, Object): ?} */
      module.exports = parse;
    }, {
      "./CSSProperty" : 5
    }],
    120 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @param {Object} type
       * @param {?} obj
       * @param {Function} condition
       * @return {?}
       */
      function extend(name, value, type, obj, condition) {
        /** @type {boolean} */
        var dontCloseTags = false;
        /**
         * @return {?}
         */
        var g = function() {
          return indexOf(dontCloseTags, name + "." + value + " will be deprecated in a future version. " + ("Use " + name + "." + type + " instead.")), dontCloseTags = true, condition.apply(obj, arguments);
        };
        return g.displayName = name + "_" + value, expect(g, condition);
      }
      var expect = require("./Object.assign");
      var indexOf = require("./warning");
      /** @type {function (string, Object, Object, ?, Function): ?} */
      module.exports = extend;
    }, {
      "./Object.assign" : 29,
      "./warning" : 160
    }],
    121 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {Object} recurring
       * @return {?}
       */
      function tokenString(recurring) {
        return function() {
          return recurring;
        };
      }
      /**
       * @return {undefined}
       */
      function state() {
      }
      /** @type {function (Object): ?} */
      state.thatReturns = tokenString;
      state.thatReturnsFalse = tokenString(false);
      state.thatReturnsTrue = tokenString(true);
      state.thatReturnsNull = tokenString(null);
      /**
       * @return {?}
       */
      state.thatReturnsThis = function() {
        return this;
      };
      /**
       * @param {Function} event
       * @return {?}
       */
      state.thatReturnsArgument = function(event) {
        return event;
      };
      /** @type {function (): undefined} */
      module.exports = state;
    }, {}],
    122 : [function(dataAndEvents, module, deepDataAndEvents) {
      var tests = {};
      Object.freeze(tests);
      module.exports = tests;
    }, {}],
    123 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {?} off
       * @return {?}
       */
      function boundary(off) {
        return buf[off];
      }
      /**
       * @param {string} name
       * @return {?}
       */
      function constructor(name) {
        return("" + name).replace(r20, boundary);
      }
      var buf = {
        "&" : "&amp;",
        ">" : "&gt;",
        "<" : "&lt;",
        '"' : "&quot;",
        "'" : "&#x27;"
      };
      /** @type {RegExp} */
      var r20 = /[&><"']/g;
      /** @type {function (string): ?} */
      module.exports = constructor;
    }, {}],
    124 : [function(require, mod, dataAndEvents) {
      /**
       * @param {Object} id
       * @param {string} val
       * @param {?} name
       * @return {undefined}
       */
      function toString(id, val, name) {
        /** @type {Object} */
        var files = id;
        /** @type {boolean} */
        var dontCloseTags = !files.hasOwnProperty(name);
        if (indexOf(dontCloseTags, "flattenChildren(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.", name), dontCloseTags && null != val) {
          var file;
          /** @type {string} */
          var string = typeof val;
          file = "string" === string ? $(val) : "number" === string ? $("" + val) : val;
          files[name] = file;
        }
      }
      /**
       * @param {string} name
       * @return {?}
       */
      function exports(name) {
        if (null == name) {
          return name;
        }
        var r20 = {};
        return inspect(name, toString, r20), r20;
      }
      var $ = require("./ReactTextComponent");
      var inspect = require("./traverseAllChildren");
      var indexOf = require("./warning");
      /** @type {function (string): ?} */
      mod.exports = exports;
    }, {
      "./ReactTextComponent" : 87,
      "./traverseAllChildren" : 158,
      "./warning" : 160
    }],
    125 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @return {undefined}
       */
      function prop(name) {
        try {
          name.focus();
        } catch (b) {
        }
      }
      /** @type {function (string): undefined} */
      module.exports = prop;
    }, {}],
    126 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @param {Object} type
       * @return {undefined}
       */
      var attr = function(name, value, type) {
        if (Array.isArray(name)) {
          name.forEach(value, type);
        } else {
          if (name) {
            value.call(type, name);
          }
        }
      };
      /** @type {function (string, Object, Object): undefined} */
      module.exports = attr;
    }, {}],
    127 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @return {?}
       */
      function setup() {
        try {
          return document.activeElement || document.body;
        } catch (a) {
          return document.body;
        }
      }
      /** @type {function (): ?} */
      module.exports = setup;
    }, {}],
    128 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function send(name) {
        var ret;
        var defaultValue = name.keyCode;
        return "charCode" in name ? (ret = name.charCode, 0 === ret && (13 === defaultValue && (ret = 13))) : ret = defaultValue, ret >= 32 || 13 === ret ? ret : 0;
      }
      /** @type {function (string): ?} */
      module.exports = send;
    }, {}],
    129 : [function(get_func, module, dataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function listener(name) {
        if (name.key) {
          var block = key[name.key] || name.key;
          if ("Unidentified" !== block) {
            return block;
          }
        }
        if ("keypress" === name.type) {
          var b = func(name);
          return 13 === b ? "Enter" : String.fromCharCode(b);
        }
        return "keydown" === name.type || "keyup" === name.type ? keytable[name.keyCode] || "Unidentified" : "";
      }
      var func = get_func("./getEventCharCode");
      var key = {
        Esc : "Escape",
        Spacebar : " ",
        Left : "ArrowLeft",
        Up : "ArrowUp",
        Right : "ArrowRight",
        Down : "ArrowDown",
        Del : "Delete",
        Win : "OS",
        Menu : "ContextMenu",
        Apps : "ContextMenu",
        Scroll : "ScrollLock",
        MozPrintableKey : "Unidentified"
      };
      var keytable = {
        8 : "Backspace",
        9 : "Tab",
        12 : "Clear",
        13 : "Enter",
        16 : "Shift",
        17 : "Control",
        18 : "Alt",
        19 : "Pause",
        20 : "CapsLock",
        27 : "Escape",
        32 : " ",
        33 : "PageUp",
        34 : "PageDown",
        35 : "End",
        36 : "Home",
        37 : "ArrowLeft",
        38 : "ArrowUp",
        39 : "ArrowRight",
        40 : "ArrowDown",
        45 : "Insert",
        46 : "Delete",
        112 : "F1",
        113 : "F2",
        114 : "F3",
        115 : "F4",
        116 : "F5",
        117 : "F6",
        118 : "F7",
        119 : "F8",
        120 : "F9",
        121 : "F10",
        122 : "F11",
        123 : "F12",
        144 : "NumLock",
        145 : "ScrollLock",
        224 : "Meta"
      };
      /** @type {function (string): ?} */
      module.exports = listener;
    }, {
      "./getEventCharCode" : 128
    }],
    130 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {?} x
       * @return {?}
       */
      function newCoord(x) {
        var event = this;
        var type = event.nativeEvent;
        if (type.getModifierState) {
          return type.getModifierState(x);
        }
        var id = ids[x];
        return id ? !!type[id] : false;
      }
      /**
       * @param {string} name
       * @return {?}
       */
      function prop(name) {
        return newCoord;
      }
      var ids = {
        Alt : "altKey",
        Control : "ctrlKey",
        Meta : "metaKey",
        Shift : "shiftKey"
      };
      /** @type {function (string): ?} */
      module.exports = prop;
    }, {}],
    131 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function listener(name) {
        var tapElement = name.target || (name.srcElement || window);
        return 3 === tapElement.nodeType ? tapElement.parentNode : tapElement;
      }
      /** @type {function (string): ?} */
      module.exports = listener;
    }, {}],
    132 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function setup(name) {
        return newBindings(!!content, "Markup wrapping node not initialized"), cfg.hasOwnProperty(name) || (name = "*"), types.hasOwnProperty(name) || ("*" === name ? content.innerHTML = "<link />" : content.innerHTML = "<" + name + "></" + name + ">", types[name] = !content.firstChild), types[name] ? cfg[name] : null;
      }
      var ua = require("./ExecutionEnvironment");
      var newBindings = require("./invariant");
      /** @type {(Element|null)} */
      var content = ua.canUseDOM ? document.createElement("div") : null;
      var types = {
        circle : true,
        defs : true,
        ellipse : true,
        g : true,
        line : true,
        linearGradient : true,
        path : true,
        polygon : true,
        polyline : true,
        radialGradient : true,
        rect : true,
        stop : true,
        text : true
      };
      /** @type {Array} */
      var option = [1, '<select multiple="true">', "</select>"];
      /** @type {Array} */
      var table = [1, "<table>", "</table>"];
      /** @type {Array} */
      var td = [3, "<table><tbody><tr>", "</tr></tbody></table>"];
      /** @type {Array} */
      var m = [1, "<svg>", "</svg>"];
      var cfg = {
        "*" : [1, "?<div>", "</div>"],
        area : [1, "<map>", "</map>"],
        col : [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
        legend : [1, "<fieldset>", "</fieldset>"],
        param : [1, "<object>", "</object>"],
        tr : [2, "<table><tbody>", "</tbody></table>"],
        optgroup : option,
        option : option,
        caption : table,
        colgroup : table,
        tbody : table,
        tfoot : table,
        thead : table,
        td : td,
        th : td,
        circle : m,
        defs : m,
        ellipse : m,
        g : m,
        line : m,
        linearGradient : m,
        path : m,
        polygon : m,
        polyline : m,
        radialGradient : m,
        rect : m,
        stop : m,
        text : m
      };
      /** @type {function (string): ?} */
      module.exports = setup;
    }, {
      "./ExecutionEnvironment" : 23,
      "./invariant" : 140
    }],
    133 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {Object} f
       * @return {?}
       */
      function func(f) {
        for (;f && f.firstChild;) {
          f = f.firstChild;
        }
        return f;
      }
      /**
       * @param {Object} node
       * @return {?}
       */
      function insert(node) {
        for (;node;) {
          if (node.nextSibling) {
            return node.nextSibling;
          }
          node = node.parentNode;
        }
      }
      /**
       * @param {string} name
       * @param {Object} value
       * @return {?}
       */
      function create(name, value) {
        var n = func(name);
        /** @type {number} */
        var start = 0;
        /** @type {number} */
        var offset = 0;
        for (;n;) {
          if (3 == n.nodeType) {
            if (offset = start + n.textContent.length, value >= start && offset >= value) {
              return{
                node : n,
                offset : value - start
              };
            }
            start = offset;
          }
          n = func(insert(n));
        }
      }
      /** @type {function (string, Object): ?} */
      module.exports = create;
    }, {}],
    134 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function listener(name) {
        return name ? name.nodeType === num ? name.documentElement : name.firstChild : null;
      }
      /** @type {number} */
      var num = 9;
      /** @type {function (string): ?} */
      module.exports = listener;
    }, {}],
    135 : [function(require, module, dataAndEvents) {
      /**
       * @return {?}
       */
      function updateRemainingCount() {
        return!textProp && (Block.canUseDOM && (textProp = "textContent" in document.documentElement ? "textContent" : "innerText")), textProp;
      }
      var Block = require("./ExecutionEnvironment");
      /** @type {null} */
      var textProp = null;
      /** @type {function (): ?} */
      module.exports = updateRemainingCount;
    }, {
      "./ExecutionEnvironment" : 23
    }],
    136 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function listener(name) {
        return name === window ? {
          x : window.pageXOffset || document.documentElement.scrollLeft,
          y : window.pageYOffset || document.documentElement.scrollTop
        } : {
          x : name.scrollLeft,
          y : name.scrollTop
        };
      }
      /** @type {function (string): ?} */
      module.exports = listener;
    }, {}],
    137 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function data(name) {
        return name.replace(r20, "-$1").toLowerCase();
      }
      /** @type {RegExp} */
      var r20 = /([A-Z])/g;
      /** @type {function (string): ?} */
      module.exports = data;
    }, {}],
    138 : [function($sanitize, module, dataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function prop(name) {
        return ondata(name).replace(r20, "-ms-");
      }
      var ondata = $sanitize("./hyphenate");
      /** @type {RegExp} */
      var r20 = /^ms-/;
      /** @type {function (string): ?} */
      module.exports = prop;
    }, {
      "./hyphenate" : 137
    }],
    139 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @return {?}
       */
      function init(name, value) {
        var self;
        if (path(name && ("function" == typeof name.type || "string" == typeof name.type), "Only functions or strings can be mounted as React components."), name.type._mockedReactClassConstructor) {
          /** @type {boolean} */
          Block._isLegacyCallWarningEnabled = false;
          try {
            self = new name.type._mockedReactClassConstructor(name.props);
          } finally {
            /** @type {boolean} */
            Block._isLegacyCallWarningEnabled = true;
          }
          if (assert.isValidElement(self)) {
            self = new self.type(self.props);
          }
          var f = self.render;
          if (f) {
            return f._isMockFunction && (!f._getMockImplementation() && f.mockImplementation(ast.getEmptyComponent)), self.construct(name), self;
          }
          name = ast.getEmptyComponent();
        }
        return self = "string" == typeof name.type ? $.createInstanceForTag(name.type, name.props, value) : new name.type(name.props), path("function" == typeof self.construct && ("function" == typeof self.mountComponent && "function" == typeof self.receiveComponent), "Only React Components can be mounted."), self.construct(name), self;
      }
      var path = require("./warning");
      var assert = require("./ReactElement");
      var Block = require("./ReactLegacyElement");
      var $ = require("./ReactNativeComponent");
      var ast = require("./ReactEmptyComponent");
      /** @type {function (string, Object): ?} */
      module.exports = init;
    }, {
      "./ReactElement" : 58,
      "./ReactEmptyComponent" : 60,
      "./ReactLegacyElement" : 67,
      "./ReactNativeComponent" : 73,
      "./warning" : 160
    }],
    140 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @param {boolean} type
       * @param {string} b
       * @param {?} var_args
       * @param {?} o
       * @param {?} merge
       * @param {?} properties
       * @return {undefined}
       */
      var extend = function(name, value, type, b, var_args, o, merge, properties) {
        if (void 0 === value) {
          throw new Error("invariant requires an error message argument");
        }
        if (!name) {
          var err;
          if (void 0 === value) {
            /** @type {Error} */
            err = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
          } else {
            /** @type {Array} */
            var a = [type, b, var_args, o, merge, properties];
            /** @type {number} */
            var ia = 0;
            /** @type {Error} */
            err = new Error("Invariant Violation: " + value.replace(/%s/g, function() {
              return a[ia++];
            }));
          }
          throw err.framesToPop = 1, err;
        }
      };
      /** @type {function (string, Object, boolean, string, ?, ?, ?, ?): undefined} */
      module.exports = extend;
    }, {}],
    141 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @return {?}
       */
      function listener(name, value) {
        if (!Block.canUseDOM || value && !("addEventListener" in document)) {
          return false;
        }
        /** @type {string} */
        var eventName = "on" + name;
        /** @type {boolean} */
        var isSupported = eventName in document;
        if (!isSupported) {
          /** @type {Element} */
          var el = document.createElement("div");
          el.setAttribute(eventName, "return;");
          /** @type {boolean} */
          isSupported = "function" == typeof el[eventName];
        }
        return!isSupported && (useHasFeature && ("wheel" === name && (isSupported = document.implementation.hasFeature("Events.wheel", "3.0")))), isSupported;
      }
      var useHasFeature;
      var Block = require("./ExecutionEnvironment");
      if (Block.canUseDOM) {
        /** @type {(boolean|null)} */
        useHasFeature = document.implementation && (document.implementation.hasFeature && document.implementation.hasFeature("", "") !== true);
      }
      /** @type {function (string, Object): ?} */
      module.exports = listener;
    }, {
      "./ExecutionEnvironment" : 23
    }],
    142 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function select(name) {
        return!(!name || !("function" == typeof Node ? name instanceof Node : "object" == typeof name && ("number" == typeof name.nodeType && "string" == typeof name.nodeName)));
      }
      /** @type {function (string): ?} */
      module.exports = select;
    }, {}],
    143 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function filter(name) {
        return name && ("INPUT" === name.nodeName && defaults[name.type] || "TEXTAREA" === name.nodeName);
      }
      var defaults = {
        color : true,
        date : true,
        datetime : true,
        "datetime-local" : true,
        email : true,
        month : true,
        number : true,
        password : true,
        range : true,
        search : true,
        tel : true,
        text : true,
        time : true,
        url : true,
        week : true
      };
      /** @type {function (string): ?} */
      module.exports = filter;
    }, {}],
    144 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function constructor(name) {
        return assert(name) && 3 == name.nodeType;
      }
      var assert = require("./isNode");
      /** @type {function (string): ?} */
      module.exports = constructor;
    }, {
      "./isNode" : 142
    }],
    145 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function getName(name) {
        if (!name) {
          /** @type {string} */
          name = "";
        }
        var x;
        /** @type {number} */
        var l = arguments.length;
        if (l > 1) {
          /** @type {number} */
          var i = 1;
          for (;l > i;i++) {
            x = arguments[i];
            if (x) {
              /** @type {string} */
              name = (name ? name + " " : "") + x;
            }
          }
        }
        return name;
      }
      /** @type {function (string): ?} */
      module.exports = getName;
    }, {}],
    146 : [function(iterator, module, dataAndEvents) {
      var key = iterator("./invariant");
      /**
       * @param {string} name
       * @return {?}
       */
      var map = function(name) {
        var i;
        var m = {};
        key(name instanceof Object && !Array.isArray(name), "keyMirror(...): Argument must be an object.");
        for (i in name) {
          if (name.hasOwnProperty(i)) {
            /** @type {string} */
            m[i] = i;
          }
        }
        return m;
      };
      /** @type {function (string): ?} */
      module.exports = map;
    }, {
      "./invariant" : 140
    }],
    147 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      var resolve = function(name) {
        var a;
        for (a in name) {
          if (name.hasOwnProperty(a)) {
            return a;
          }
        }
        return null;
      };
      /** @type {function (string): ?} */
      module.exports = resolve;
    }, {}],
    148 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @param {boolean} type
       * @return {?}
       */
      function attr(name, value, type) {
        if (!name) {
          return null;
        }
        var results = {};
        var key;
        for (key in name) {
          if (has.call(name, key)) {
            results[key] = value.call(type, name[key], key, name);
          }
        }
        return results;
      }
      /** @type {function (this:Object, *): boolean} */
      var has = Object.prototype.hasOwnProperty;
      /** @type {function (string, Object, boolean): ?} */
      module.exports = attr;
    }, {}],
    149 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function prop(name) {
        var args = {};
        return function(index) {
          return args.hasOwnProperty(index) ? args[index] : args[index] = name.call(this, index);
        };
      }
      /** @type {function (string): ?} */
      module.exports = prop;
    }, {}],
    150 : [function(require, mod, dataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @return {undefined}
       */
      function exports(name, value) {
        getActual(name && !/[^a-z0-9_]/.test(name), "You must provide an eventName using only the characters [a-z0-9_]");
      }
      var getActual = require("./invariant");
      /** @type {function (string, Object): undefined} */
      mod.exports = exports;
    }, {
      "./invariant" : 140
    }],
    151 : [function(require, module, dataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function constructor(name) {
        return assert(selfClosing.isValidElement(name), "onlyChild must be passed a children with exactly one child."), name;
      }
      var selfClosing = require("./ReactElement");
      var assert = require("./invariant");
      /** @type {function (string): ?} */
      module.exports = constructor;
    }, {
      "./ReactElement" : 58,
      "./invariant" : 140
    }],
    152 : [function(require, module, dataAndEvents) {
      var exports;
      var Block = require("./ExecutionEnvironment");
      if (Block.canUseDOM) {
        exports = window.performance || (window.msPerformance || window.webkitPerformance);
      }
      module.exports = exports || {};
    }, {
      "./ExecutionEnvironment" : 23
    }],
    153 : [function(layer, module, dataAndEvents) {
      var t = layer("./performance");
      if (!(t && t.now)) {
        /** @type {function (new:Date, ?=, ?=, ?=, ?=, ?=, ?=, ?=): string} */
        t = Date;
      }
      var keys = t.now.bind(t);
      module.exports = keys;
    }, {
      "./performance" : 152
    }],
    154 : [function(require, module, dataAndEvents) {
      var Block = require("./ExecutionEnvironment");
      /** @type {RegExp} */
      var rchecked = /^[ \r\n\t\f]/;
      /** @type {RegExp} */
      var spaceRe = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
      /**
       * @param {string} name
       * @param {Object} value
       * @return {undefined}
       */
      var highlight = function(name, value) {
        /** @type {Object} */
        name.innerHTML = value;
      };
      if (Block.canUseDOM) {
        /** @type {Element} */
        var elem = document.createElement("div");
        /** @type {string} */
        elem.innerHTML = " ";
        if ("" === elem.innerHTML) {
          /**
           * @param {string} name
           * @param {Object} value
           * @return {undefined}
           */
          highlight = function(name, value) {
            if (name.parentNode && name.parentNode.replaceChild(name, name), rchecked.test(value) || "<" === value[0] && spaceRe.test(value)) {
              /** @type {string} */
              name.innerHTML = "\ufeff" + value;
              var label = name.firstChild;
              if (1 === label.data.length) {
                name.removeChild(label);
              } else {
                label.deleteData(0, 1);
              }
            } else {
              /** @type {Object} */
              name.innerHTML = value;
            }
          };
        }
      }
      /** @type {function (string, Object): undefined} */
      module.exports = highlight;
    }, {
      "./ExecutionEnvironment" : 23
    }],
    155 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @return {?}
       */
      function ok(name, value) {
        if (name === value) {
          return true;
        }
        var key;
        for (key in name) {
          if (name.hasOwnProperty(key) && (!value.hasOwnProperty(key) || name[key] !== value[key])) {
            return false;
          }
        }
        for (key in value) {
          if (value.hasOwnProperty(key) && !name.hasOwnProperty(key)) {
            return false;
          }
        }
        return true;
      }
      /** @type {function (string, Object): ?} */
      module.exports = ok;
    }, {}],
    156 : [function(dataAndEvents, module, deepDataAndEvents) {
      /**
       * @param {string} name
       * @param {Object} value
       * @return {?}
       */
      function Test(name, value) {
        return name && (value && (name.type === value.type && (name.key === value.key && name._owner === value._owner))) ? true : false;
      }
      /** @type {function (string, Object): ?} */
      module.exports = Test;
    }, {}],
    157 : [function(format, module, dataAndEvents) {
      /**
       * @param {string} name
       * @return {?}
       */
      function array(name) {
        var indents = name.length;
        if (f(!Array.isArray(name) && ("object" == typeof name || "function" == typeof name), "toArray: Array-like object expected"), f("number" == typeof indents, "toArray: Object needs a length property"), f(0 === indents || indents - 1 in name, "toArray: Object should have keys for indices"), name.hasOwnProperty) {
          try {
            return Array.prototype.slice.call(name);
          } catch (c) {
          }
        }
        /** @type {Array} */
        var array = Array(indents);
        /** @type {number} */
        var ix = 0;
        for (;indents > ix;ix++) {
          array[ix] = name[ix];
        }
        return array;
      }
      var f = format("./invariant");
      /** @type {function (string): ?} */
      module.exports = array;
    }, {
      "./invariant" : 140
    }],
    158 : [function(require, module, dataAndEvents) {
      /**
       * @param {?} name
       * @return {?}
       */
      function label(name) {
        return old[name];
      }
      /**
       * @param {Object} event
       * @param {(number|string)} style
       * @return {?}
       */
      function callback(event, style) {
        return event && null != event.key ? $(event.key) : style.toString(36);
      }
      /**
       * @param {string} str
       * @return {?}
       */
      function trim(str) {
        return("" + str).replace(r20, label);
      }
      /**
       * @param {string} value
       * @return {?}
       */
      function $(value) {
        return "$" + trim(value);
      }
      /**
       * @param {string} name
       * @param {Object} value
       * @param {boolean} type
       * @return {?}
       */
      function prop(name, value, type) {
        return null == name ? 0 : parse(name, "", 0, value, type);
      }
      var nodes = require("./ReactElement");
      var util = require("./ReactInstanceHandles");
      var inspect = require("./invariant");
      var _ = util.SEPARATOR;
      /** @type {string} */
      var s = ":";
      var old = {
        "=" : "=0",
        "." : "=1",
        ":" : "=2"
      };
      /** @type {RegExp} */
      var r20 = /[=.:]/g;
      /**
       * @param {Object} node
       * @param {string} str
       * @param {number} xhr
       * @param {boolean} cb
       * @param {boolean} args
       * @return {?}
       */
      var parse = function(node, str, xhr, cb, args) {
        var namespace;
        var options;
        /** @type {number} */
        var result = 0;
        if (Array.isArray(node)) {
          /** @type {number} */
          var key = 0;
          for (;key < node.length;key++) {
            var val = node[key];
            namespace = str + (str ? s : _) + callback(val, key);
            options = xhr + result;
            result += parse(val, namespace, options, cb, args);
          }
        } else {
          /** @type {string} */
          var kind = typeof node;
          /** @type {boolean} */
          var caseInsensitive = "" === str;
          var isDefault = caseInsensitive ? _ + callback(node, 0) : str;
          if (null == node || "boolean" === kind) {
            cb(args, null, isDefault, xhr);
            /** @type {number} */
            result = 1;
          } else {
            if ("string" === kind || ("number" === kind || nodes.isValidElement(node))) {
              cb(args, node, isDefault, xhr);
              /** @type {number} */
              result = 1;
            } else {
              if ("object" === kind) {
                inspect(!node || 1 !== node.nodeType, "traverseAllChildren(...): Encountered an invalid child; DOM elements are not valid children of React components.");
                var property;
                for (property in node) {
                  if (node.hasOwnProperty(property)) {
                    /** @type {string} */
                    namespace = str + (str ? s : _) + $(property) + s + callback(node[property], 0);
                    options = xhr + result;
                    result += parse(node[property], namespace, options, cb, args);
                  }
                }
              }
            }
          }
        }
        return result;
      };
      /** @type {function (string, Object, boolean): ?} */
      module.exports = prop;
    }, {
      "./ReactElement" : 58,
      "./ReactInstanceHandles" : 66,
      "./invariant" : 140
    }],
    159 : [function(require, module, dataAndEvents) {
      /**
       * @param {Object} node
       * @return {?}
       */
      function clone(node) {
        return Array.isArray(node) ? node.concat() : node && "object" == typeof node ? forEach(new node.constructor, node) : node;
      }
      /**
       * @param {string} name
       * @param {Object} data
       * @param {string} url
       * @return {undefined}
       */
      function callback(name, data, url) {
        expect(Array.isArray(name), "update(): expected target of %s to be an array; got %s.", url, name);
        var res = data[url];
        expect(Array.isArray(res), "update(): expected spec of %s to be an array; got %s. Did you forget to wrap your parameter in an array?", url, res);
      }
      /**
       * @param {string} name
       * @param {Object} data
       * @return {?}
       */
      function filter(name, data) {
        if (expect("object" == typeof data, "update(): You provided a key path to update() that did not contain one of %s. Did you forget to include {%s: ...}?", attrs.join(", "), element), data.hasOwnProperty(element)) {
          return expect(1 === Object.keys(data).length, "Cannot have more than one key in an object with %s", element), data[element];
        }
        var params = clone(name);
        if (data.hasOwnProperty(i)) {
          var b = data[i];
          expect(b && "object" == typeof b, "update(): %s expects a spec of type 'object'; got %s", i, b);
          expect(params && "object" == typeof params, "update(): %s expects a target of type 'object'; got %s", i, params);
          forEach(params, data[i]);
        }
        if (data.hasOwnProperty(option)) {
          callback(name, data, option);
          data[option].forEach(function(options) {
            params.push(options);
          });
        }
        if (data.hasOwnProperty(url)) {
          callback(name, data, url);
          data[url].forEach(function(source) {
            params.unshift(source);
          });
        }
        if (data.hasOwnProperty(title)) {
          expect(Array.isArray(name), "Expected %s target to be an array; got %s", title, name);
          expect(Array.isArray(data[title]), "update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?", title, data[title]);
          data[title].forEach(function(paths) {
            expect(Array.isArray(paths), "update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?", title, data[title]);
            params.splice.apply(params, paths);
          });
        }
        if (data.hasOwnProperty(type)) {
          expect("function" == typeof data[type], "update(): expected spec of %s to be a function; got %s.", type, data[type]);
          params = data[type](params);
        }
        var key;
        for (key in data) {
          if (!(urlParams.hasOwnProperty(key) && urlParams[key])) {
            params[key] = filter(name[key], data[key]);
          }
        }
        return params;
      }
      var forEach = require("./Object.assign");
      var $ = require("./keyOf");
      var expect = require("./invariant");
      var option = $({
        $push : null
      });
      var url = $({
        $unshift : null
      });
      var title = $({
        $splice : null
      });
      var element = $({
        $set : null
      });
      var i = $({
        $merge : null
      });
      var type = $({
        $apply : null
      });
      /** @type {Array} */
      var attrs = [option, url, title, element, i, type];
      var urlParams = {};
      attrs.forEach(function(param) {
        /** @type {boolean} */
        urlParams[param] = true;
      });
      /** @type {function (string, Object): ?} */
      module.exports = filter;
    }, {
      "./Object.assign" : 29,
      "./invariant" : 140,
      "./keyOf" : 147
    }],
    160 : [function(require, module, dataAndEvents) {
      var array = require("./emptyFunction");
      var filter = array;
      /**
       * @param {string} name
       * @param {Object} value
       * @return {undefined}
       */
      filter = function(name, value) {
        /** @type {Array} */
        var args = [];
        /** @type {number} */
        var j = 2;
        /** @type {number} */
        var len = arguments.length;
        for (;len > j;j++) {
          args.push(arguments[j]);
        }
        if (void 0 === value) {
          throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
        }
        if (!name) {
          /** @type {number} */
          var i = 0;
          console.warn("Warning: " + value.replace(/%s/g, function() {
            return args[i++];
          }));
        }
      };
      /** @type {function (string, Object): undefined} */
      module.exports = filter;
    }, {
      "./emptyFunction" : 121
    }]
  }, {}, [1])(1);
});
/**
 * @param {string} name
 * @param {Object} params
 * @return {undefined}
 */
var Swiper = function(name, params) {
  /**
   * @param {string} optgroup
   * @param {Node} context
   * @return {?}
   */
  function $$(optgroup, context) {
    return document.querySelectorAll ? (context || document).querySelectorAll(optgroup) : jQuery(optgroup, context);
  }
  /**
   * @param {?} object
   * @return {?}
   */
  function isArray(object) {
    return "[object Array]" === Object.prototype.toString.apply(object) ? true : false;
  }
  /**
   * @return {?}
   */
  function maxWrapperPosition() {
    /** @type {number} */
    var a = wrapperSize - containerSize;
    return params.freeMode && (a = wrapperSize - containerSize), params.slidesPerView > _this.slides.length && (!params.centeredSlides && (a = 0)), 0 > a && (a = 0), a;
  }
  /**
   * @return {undefined}
   */
  function initEvents() {
    /**
     * @param {Element} el
     * @return {undefined}
     */
    function load(el) {
      var image;
      var path;
      /**
       * @return {undefined}
       */
      var onLoad = function() {
        if ("undefined" != typeof _this) {
          if (null !== _this) {
            if (void 0 !== _this.imagesLoaded) {
              _this.imagesLoaded++;
            }
            if (_this.imagesLoaded === _this.imagesToLoad.length) {
              _this.reInit();
              if (params.onImagesReady) {
                _this.fireCallback(params.onImagesReady, _this);
              }
            }
          }
        }
      };
      if (el.complete) {
        onLoad();
      } else {
        path = el.currentSrc || el.getAttribute("src");
        if (path) {
          /** @type {Image} */
          image = new Image;
          /** @type {function (): undefined} */
          image.onload = onLoad;
          /** @type {function (): undefined} */
          image.onerror = onLoad;
          image.src = path;
        } else {
          onLoad();
        }
      }
    }
    var bind = _this.h.addEventListener;
    var touchmove = "wrapper" === params.eventTarget ? _this.wrapper : _this.container;
    if (_this.browser.ie10 || _this.browser.ie11 ? (bind(touchmove, _this.touchEvents.touchStart, onTouchStart), bind(document, _this.touchEvents.touchMove, onTouchMove), bind(document, _this.touchEvents.touchEnd, onTouchEnd)) : (_this.support.touch && (bind(touchmove, "touchstart", onTouchStart), bind(touchmove, "touchmove", onTouchMove), bind(touchmove, "touchend", onTouchEnd)), params.simulateTouch && (bind(touchmove, "mousedown", onTouchStart), bind(document, "mousemove", onTouchMove), bind(document, 
    "mouseup", onTouchEnd))), params.autoResize && bind(window, "resize", _this.resizeFix), addSlideEvents(), _this._wheelEvent = false, params.mousewheelControl) {
      if (void 0 !== document.onmousewheel && (_this._wheelEvent = "mousewheel"), !_this._wheelEvent) {
        try {
          new WheelEvent("wheel");
          /** @type {string} */
          _this._wheelEvent = "wheel";
        } catch (f) {
        }
      }
      if (!_this._wheelEvent) {
        /** @type {string} */
        _this._wheelEvent = "DOMMouseScroll";
      }
      if (_this._wheelEvent) {
        bind(_this.container, _this._wheelEvent, handleMousewheel);
      }
    }
    if (params.keyboardControl && bind(document, "keydown", handleKeyboardKeys), params.updateOnImagesReady) {
      _this.imagesToLoad = $$("img", _this.container);
      /** @type {number} */
      var i = 0;
      for (;i < _this.imagesToLoad.length;i++) {
        load(_this.imagesToLoad[i]);
      }
    }
  }
  /**
   * @return {undefined}
   */
  function addSlideEvents() {
    var i;
    var bind = _this.h.addEventListener;
    if (params.preventLinks) {
      var links = $$("a", _this.container);
      /** @type {number} */
      i = 0;
      for (;i < links.length;i++) {
        bind(links[i], "click", preventClick);
      }
    }
    if (params.releaseFormElements) {
      var codeSegments = $$("input, textarea, select", _this.container);
      /** @type {number} */
      i = 0;
      for (;i < codeSegments.length;i++) {
        bind(codeSegments[i], _this.touchEvents.touchStart, releaseForms, true);
        if (_this.support.touch) {
          if (params.simulateTouch) {
            bind(codeSegments[i], "mousedown", releaseForms, true);
          }
        }
      }
    }
    if (params.onSlideClick) {
      /** @type {number} */
      i = 0;
      for (;i < _this.slides.length;i++) {
        bind(_this.slides[i], "click", slideClick);
      }
    }
    if (params.onSlideTouch) {
      /** @type {number} */
      i = 0;
      for (;i < _this.slides.length;i++) {
        bind(_this.slides[i], _this.touchEvents.touchStart, slideTouch);
      }
    }
  }
  /**
   * @return {undefined}
   */
  function removeSlideEvents() {
    var i;
    var unbind = _this.h.removeEventListener;
    if (params.onSlideClick) {
      /** @type {number} */
      i = 0;
      for (;i < _this.slides.length;i++) {
        unbind(_this.slides[i], "click", slideClick);
      }
    }
    if (params.onSlideTouch) {
      /** @type {number} */
      i = 0;
      for (;i < _this.slides.length;i++) {
        unbind(_this.slides[i], _this.touchEvents.touchStart, slideTouch);
      }
    }
    if (params.releaseFormElements) {
      var codeSegments = $$("input, textarea, select", _this.container);
      /** @type {number} */
      i = 0;
      for (;i < codeSegments.length;i++) {
        unbind(codeSegments[i], _this.touchEvents.touchStart, releaseForms, true);
        if (_this.support.touch) {
          if (params.simulateTouch) {
            unbind(codeSegments[i], "mousedown", releaseForms, true);
          }
        }
      }
    }
    if (params.preventLinks) {
      var links = $$("a", _this.container);
      /** @type {number} */
      i = 0;
      for (;i < links.length;i++) {
        unbind(links[i], "click", preventClick);
      }
    }
  }
  /**
   * @param {Event} e
   * @return {undefined}
   */
  function handleKeyboardKeys(e) {
    var preceding = e.keyCode || e.charCode;
    if (!(e.shiftKey || (e.altKey || (e.ctrlKey || e.metaKey)))) {
      if (37 === preceding || (39 === preceding || (38 === preceding || 40 === preceding))) {
        /** @type {boolean} */
        var c = false;
        var swiperOffset = _this.h.getOffset(_this.container);
        var scrollLeft = _this.h.windowScroll().left;
        var base = _this.h.windowScroll().top;
        var windowWidth = _this.h.windowWidth();
        var post = _this.h.windowHeight();
        /** @type {Array} */
        var codeSegments = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + _this.width, swiperOffset.top], [swiperOffset.left, swiperOffset.top + _this.height], [swiperOffset.left + _this.width, swiperOffset.top + _this.height]];
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          var point = codeSegments[i];
          if (point[0] >= scrollLeft) {
            if (point[0] <= scrollLeft + windowWidth) {
              if (point[1] >= base) {
                if (point[1] <= base + post) {
                  /** @type {boolean} */
                  c = true;
                }
              }
            }
          }
        }
        if (!c) {
          return;
        }
      }
      if (isH) {
        if (37 === preceding || 39 === preceding) {
          if (e.preventDefault) {
            e.preventDefault();
          } else {
            /** @type {boolean} */
            e.returnValue = false;
          }
        }
        if (39 === preceding) {
          _this.swipeNext();
        }
        if (37 === preceding) {
          _this.swipePrev();
        }
      } else {
        if (38 === preceding || 40 === preceding) {
          if (e.preventDefault) {
            e.preventDefault();
          } else {
            /** @type {boolean} */
            e.returnValue = false;
          }
        }
        if (40 === preceding) {
          _this.swipeNext();
        }
        if (38 === preceding) {
          _this.swipePrev();
        }
      }
    }
  }
  /**
   * @param {Function} e
   * @return {?}
   */
  function handleMousewheel(e) {
    var we = _this._wheelEvent;
    /** @type {number} */
    var deltaY = 0;
    if (e.detail) {
      /** @type {number} */
      deltaY = -e.detail;
    } else {
      if ("mousewheel" === we) {
        if (params.mousewheelControlForceToAxis) {
          if (isH) {
            if (!(Math.abs(e.wheelDeltaX) > Math.abs(e.wheelDeltaY))) {
              return;
            }
            deltaY = e.wheelDeltaX;
          } else {
            if (!(Math.abs(e.wheelDeltaY) > Math.abs(e.wheelDeltaX))) {
              return;
            }
            deltaY = e.wheelDeltaY;
          }
        } else {
          deltaY = e.wheelDelta;
        }
      } else {
        if ("DOMMouseScroll" === we) {
          /** @type {number} */
          deltaY = -e.detail;
        } else {
          if ("wheel" === we) {
            if (params.mousewheelControlForceToAxis) {
              if (isH) {
                if (!(Math.abs(e.deltaX) > Math.abs(e.deltaY))) {
                  return;
                }
                /** @type {number} */
                deltaY = -e.deltaX;
              } else {
                if (!(Math.abs(e.deltaY) > Math.abs(e.deltaX))) {
                  return;
                }
                /** @type {number} */
                deltaY = -e.deltaY;
              }
            } else {
              /** @type {number} */
              deltaY = Math.abs(e.deltaX) > Math.abs(e.deltaY) ? -e.deltaX : -e.deltaY;
            }
          }
        }
      }
    }
    if (params.freeMode) {
      var newPosition = _this.getWrapperTranslate() + deltaY;
      if (newPosition > 0 && (newPosition = 0), newPosition < -maxWrapperPosition() && (newPosition = -maxWrapperPosition()), _this.setWrapperTransition(0), _this.setWrapperTranslate(newPosition), _this.updateActiveSlide(newPosition), 0 === newPosition || newPosition === -maxWrapperPosition()) {
        return;
      }
    } else {
      if ((new Date).getTime() - V > 60) {
        if (0 > deltaY) {
          _this.swipeNext();
        } else {
          _this.swipePrev();
        }
      }
      /** @type {number} */
      V = (new Date).getTime();
    }
    return params.autoplay && _this.stopAutoplay(true), e.preventDefault ? e.preventDefault() : e.returnValue = false, false;
  }
  /**
   * @param {Event} event
   * @return {undefined}
   */
  function slideClick(event) {
    if (_this.allowSlideClick) {
      setClickedSlide(event);
      _this.fireCallback(params.onSlideClick, _this, event);
    }
  }
  /**
   * @param {Event} event
   * @return {undefined}
   */
  function slideTouch(event) {
    setClickedSlide(event);
    _this.fireCallback(params.onSlideTouch, _this, event);
  }
  /**
   * @param {Event} event
   * @return {undefined}
   */
  function setClickedSlide(event) {
    if (event.currentTarget) {
      _this.clickedSlide = event.currentTarget;
    } else {
      var element = event.srcElement;
      do {
        if (element.className.indexOf(params.slideClass) > -1) {
          break;
        }
        element = element.parentNode;
      } while (element);
      _this.clickedSlide = element;
    }
    _this.clickedSlideIndex = _this.slides.indexOf(_this.clickedSlide);
    /** @type {number} */
    _this.clickedSlideLoopIndex = _this.clickedSlideIndex - (_this.loopedSlides || 0);
  }
  /**
   * @param {Object} event
   * @return {?}
   */
  function preventClick(event) {
    return _this.allowLinks ? void 0 : (event.preventDefault ? event.preventDefault() : event.returnValue = false, params.preventLinksPropagation && ("stopPropagation" in event && event.stopPropagation()), false);
  }
  /**
   * @param {Event} e
   * @return {?}
   */
  function releaseForms(e) {
    return e.stopPropagation ? e.stopPropagation() : e.returnValue = false, false;
  }
  /**
   * @param {Event} e
   * @return {?}
   */
  function onTouchStart(e) {
    if (params.preventLinks && (_this.allowLinks = true), _this.isTouched || params.onlyExternal) {
      return false;
    }
    var input = e.target || e.srcElement;
    if (document.activeElement) {
      if (document.activeElement !== document.body) {
        if (document.activeElement !== input) {
          document.activeElement.blur();
        }
      }
    }
    /** @type {Array.<string>} */
    var excludes = "input select textarea".split(" ");
    if (params.noSwiping && (input && noSwipingSlide(input))) {
      return false;
    }
    if (_ = false, _this.isTouched = true, last = "touchstart" === e.type, !last && ("which" in e && 3 === e.which)) {
      return _this.isTouched = false, false;
    }
    if (!last || 1 === e.targetTouches.length) {
      _this.callPlugins("onTouchStartBegin");
      if (!last) {
        if (!_this.isAndroid) {
          if (excludes.indexOf(input.tagName.toLowerCase()) < 0) {
            if (e.preventDefault) {
              e.preventDefault();
            } else {
              /** @type {boolean} */
              e.returnValue = false;
            }
          }
        }
      }
      var pageX = last ? e.targetTouches[0].pageX : e.pageX || e.clientX;
      var pageY = last ? e.targetTouches[0].pageY : e.pageY || e.clientY;
      _this.touches.startX = _this.touches.currentX = pageX;
      _this.touches.startY = _this.touches.currentY = pageY;
      _this.touches.start = _this.touches.current = isH ? pageX : pageY;
      _this.setWrapperTransition(0);
      _this.positions.start = _this.positions.current = _this.getWrapperTranslate();
      _this.setWrapperTranslate(_this.positions.start);
      /** @type {number} */
      _this.times.start = (new Date).getTime();
      io = void 0;
      if (params.moveStartThreshold > 0) {
        /** @type {boolean} */
        X = false;
      }
      if (params.onTouchStart) {
        _this.fireCallback(params.onTouchStart, _this, e);
      }
      _this.callPlugins("onTouchStartEnd");
    }
  }
  /**
   * @param {Event} event
   * @return {?}
   */
  function onTouchMove(event) {
    if (_this.isTouched && (!params.onlyExternal && (!last || "mousemove" !== event.type))) {
      var pageX = last ? event.targetTouches[0].pageX : event.pageX || event.clientX;
      var pageY = last ? event.targetTouches[0].pageY : event.pageY || event.clientY;
      if ("undefined" == typeof io && (isH && (io = !!(io || Math.abs(pageY - _this.touches.startY) > Math.abs(pageX - _this.touches.startX)))), "undefined" != typeof io || (isH || (io = !!(io || Math.abs(pageY - _this.touches.startY) < Math.abs(pageX - _this.touches.startX)))), io) {
        return void(_this.isTouched = false);
      }
      if (isH) {
        if (!params.swipeToNext && pageX < _this.touches.startX || !params.swipeToPrev && pageX > _this.touches.startX) {
          return;
        }
      } else {
        if (!params.swipeToNext && pageY < _this.touches.startY || !params.swipeToPrev && pageY > _this.touches.startY) {
          return;
        }
      }
      if (event.assignedToSwiper) {
        return void(_this.isTouched = false);
      }
      if (event.assignedToSwiper = true, params.preventLinks && (_this.allowLinks = false), params.onSlideClick && (_this.allowSlideClick = false), params.autoplay && _this.stopAutoplay(true), !last || 1 === event.touches.length) {
        if (_this.isMoved || (_this.callPlugins("onTouchMoveStart"), params.loop && (_this.fixLoop(), _this.positions.start = _this.getWrapperTranslate()), params.onTouchMoveStart && _this.fireCallback(params.onTouchMoveStart, _this)), _this.isMoved = true, event.preventDefault ? event.preventDefault() : event.returnValue = false, _this.touches.current = isH ? pageX : pageY, _this.positions.current = (_this.touches.current - _this.touches.start) * params.touchRatio + _this.positions.start, _this.positions.current > 
        0 && (params.onResistanceBefore && _this.fireCallback(params.onResistanceBefore, _this, _this.positions.current)), _this.positions.current < -maxWrapperPosition() && (params.onResistanceAfter && _this.fireCallback(params.onResistanceAfter, _this, Math.abs(_this.positions.current + maxWrapperPosition()))), params.resistance && "100%" !== params.resistance) {
          var resistance;
          if (_this.positions.current > 0 && (resistance = 1 - _this.positions.current / containerSize / 2, 0.5 > resistance ? _this.positions.current = containerSize / 2 : _this.positions.current = _this.positions.current * resistance), _this.positions.current < -maxWrapperPosition()) {
            var diff = (_this.touches.current - _this.touches.start) * params.touchRatio + (maxWrapperPosition() + _this.positions.start);
            /** @type {number} */
            resistance = (containerSize + diff) / containerSize;
            /** @type {number} */
            var current = _this.positions.current - diff * (1 - resistance) / 2;
            /** @type {number} */
            var i = -maxWrapperPosition() - containerSize / 2;
            if (i > current || 0 >= resistance) {
              /** @type {number} */
              _this.positions.current = i;
            } else {
              /** @type {number} */
              _this.positions.current = current;
            }
          }
        }
        if (params.resistance && ("100%" === params.resistance && (_this.positions.current > 0 && ((!params.freeMode || params.freeModeFluid) && (_this.positions.current = 0)), _this.positions.current < -maxWrapperPosition() && ((!params.freeMode || params.freeModeFluid) && (_this.positions.current = -maxWrapperPosition())))), !params.followFinger) {
          return;
        }
        if (params.moveStartThreshold) {
          if (Math.abs(_this.touches.current - _this.touches.start) > params.moveStartThreshold || X) {
            if (!X) {
              return X = true, void(_this.touches.start = _this.touches.current);
            }
            _this.setWrapperTranslate(_this.positions.current);
          } else {
            _this.positions.current = _this.positions.start;
          }
        } else {
          _this.setWrapperTranslate(_this.positions.current);
        }
        return(params.freeMode || params.watchActiveIndex) && _this.updateActiveSlide(_this.positions.current), params.grabCursor && (_this.container.style.cursor = "move", _this.container.style.cursor = "grabbing", _this.container.style.cursor = "-moz-grabbin", _this.container.style.cursor = "-webkit-grabbing"), velocityPrevPosition || (velocityPrevPosition = _this.touches.current), velocityPrevTime || (velocityPrevTime = (new Date).getTime()), _this.velocity = (_this.touches.current - velocityPrevPosition) / 
        ((new Date).getTime() - velocityPrevTime) / 2, Math.abs(_this.touches.current - velocityPrevPosition) < 2 && (_this.velocity = 0), velocityPrevPosition = _this.touches.current, velocityPrevTime = (new Date).getTime(), _this.callPlugins("onTouchMoveEnd"), params.onTouchMove && _this.fireCallback(params.onTouchMove, _this, event), false;
      }
    }
  }
  /**
   * @param {?} e
   * @return {?}
   */
  function onTouchEnd(e) {
    if (io && _this.swipeReset(), !params.onlyExternal && _this.isTouched) {
      /** @type {boolean} */
      _this.isTouched = false;
      if (params.grabCursor) {
        /** @type {string} */
        _this.container.style.cursor = "move";
        /** @type {string} */
        _this.container.style.cursor = "grab";
        /** @type {string} */
        _this.container.style.cursor = "-moz-grab";
        /** @type {string} */
        _this.container.style.cursor = "-webkit-grab";
      }
      if (!_this.positions.current) {
        if (!(0 === _this.positions.current)) {
          _this.positions.current = _this.positions.start;
        }
      }
      if (params.followFinger) {
        _this.setWrapperTranslate(_this.positions.current);
      }
      /** @type {number} */
      _this.times.end = (new Date).getTime();
      /** @type {number} */
      _this.touches.diff = _this.touches.current - _this.touches.start;
      /** @type {number} */
      _this.touches.abs = Math.abs(_this.touches.diff);
      /** @type {number} */
      _this.positions.diff = _this.positions.current - _this.positions.start;
      /** @type {number} */
      _this.positions.abs = Math.abs(_this.positions.diff);
      /** @type {number} */
      var diff = _this.positions.diff;
      /** @type {number} */
      var diffAbs = _this.positions.abs;
      /** @type {number} */
      var f = _this.times.end - _this.times.start;
      if (5 > diffAbs) {
        if (300 > f) {
          if (_this.allowLinks === false) {
            if (!params.freeMode) {
              if (!(0 === diffAbs)) {
                _this.swipeReset();
              }
            }
            if (params.preventLinks) {
              /** @type {boolean} */
              _this.allowLinks = true;
            }
            if (params.onSlideClick) {
              /** @type {boolean} */
              _this.allowSlideClick = true;
            }
          }
        }
      }
      setTimeout(function() {
        if ("undefined" != typeof _this) {
          if (null !== _this) {
            if (params.preventLinks) {
              /** @type {boolean} */
              _this.allowLinks = true;
            }
            if (params.onSlideClick) {
              /** @type {boolean} */
              _this.allowSlideClick = true;
            }
          }
        }
      }, 100);
      var maxPosition = maxWrapperPosition();
      if (!_this.isMoved && params.freeMode) {
        return _this.isMoved = false, params.onTouchEnd && _this.fireCallback(params.onTouchEnd, _this, e), void _this.callPlugins("onTouchEnd");
      }
      if (!_this.isMoved || (_this.positions.current > 0 || _this.positions.current < -maxPosition)) {
        return _this.swipeReset(), params.onTouchEnd && _this.fireCallback(params.onTouchEnd, _this, e), void _this.callPlugins("onTouchEnd");
      }
      if (_this.isMoved = false, params.freeMode) {
        if (params.freeModeFluid) {
          var afterBouncePosition;
          /** @type {number} */
          var momentumDuration = 1E3 * params.momentumRatio;
          /** @type {number} */
          var momentumDistance = _this.velocity * momentumDuration;
          var newPosition = _this.positions.current + momentumDistance;
          /** @type {boolean} */
          var l = false;
          /** @type {number} */
          var bounceAmount = 20 * Math.abs(_this.velocity) * params.momentumBounceRatio;
          if (-maxPosition > newPosition) {
            if (params.momentumBounce && _this.support.transitions) {
              if (-bounceAmount > newPosition + maxPosition) {
                /** @type {number} */
                newPosition = -maxPosition - bounceAmount;
              }
              /** @type {number} */
              afterBouncePosition = -maxPosition;
              /** @type {boolean} */
              l = true;
              /** @type {boolean} */
              _ = true;
            } else {
              /** @type {number} */
              newPosition = -maxPosition;
            }
          }
          if (newPosition > 0) {
            if (params.momentumBounce && _this.support.transitions) {
              if (newPosition > bounceAmount) {
                /** @type {number} */
                newPosition = bounceAmount;
              }
              /** @type {number} */
              afterBouncePosition = 0;
              /** @type {boolean} */
              l = true;
              /** @type {boolean} */
              _ = true;
            } else {
              /** @type {number} */
              newPosition = 0;
            }
          }
          if (0 !== _this.velocity) {
            /** @type {number} */
            momentumDuration = Math.abs((newPosition - _this.positions.current) / _this.velocity);
          }
          _this.setWrapperTranslate(newPosition);
          _this.setWrapperTransition(momentumDuration);
          if (params.momentumBounce) {
            if (l) {
              _this.wrapperTransitionEnd(function() {
                if (_) {
                  if (params.onMomentumBounce) {
                    _this.fireCallback(params.onMomentumBounce, _this);
                  }
                  _this.callPlugins("onMomentumBounce");
                  _this.setWrapperTranslate(afterBouncePosition);
                  _this.setWrapperTransition(300);
                }
              });
            }
          }
          _this.updateActiveSlide(newPosition);
        }
        return(!params.freeModeFluid || f >= 300) && _this.updateActiveSlide(_this.positions.current), params.onTouchEnd && _this.fireCallback(params.onTouchEnd, _this, e), void _this.callPlugins("onTouchEnd");
      }
      /** @type {string} */
      direction = 0 > diff ? "toNext" : "toPrev";
      if ("toNext" === direction) {
        if (300 >= f) {
          if (30 > diffAbs || !params.shortSwipes) {
            _this.swipeReset();
          } else {
            _this.swipeNext(true, true);
          }
        }
      }
      if ("toPrev" === direction) {
        if (300 >= f) {
          if (30 > diffAbs || !params.shortSwipes) {
            _this.swipeReset();
          } else {
            _this.swipePrev(true, true);
          }
        }
      }
      /** @type {number} */
      var targetSlideSize = 0;
      if ("auto" === params.slidesPerView) {
        var _slideSize;
        /** @type {number} */
        var b = Math.abs(_this.getWrapperTranslate());
        /** @type {number} */
        var a = 0;
        /** @type {number} */
        var i = 0;
        for (;i < _this.slides.length;i++) {
          if (_slideSize = isH ? _this.slides[i].getWidth(true, params.roundLengths) : _this.slides[i].getHeight(true, params.roundLengths), a += _slideSize, a > b) {
            targetSlideSize = _slideSize;
            break;
          }
        }
        if (targetSlideSize > containerSize) {
          targetSlideSize = containerSize;
        }
      } else {
        /** @type {number} */
        targetSlideSize = slideSize * params.slidesPerView;
      }
      if ("toNext" === direction) {
        if (f > 300) {
          if (diffAbs >= targetSlideSize * params.longSwipesRatio) {
            _this.swipeNext(true, true);
          } else {
            _this.swipeReset();
          }
        }
      }
      if ("toPrev" === direction) {
        if (f > 300) {
          if (diffAbs >= targetSlideSize * params.longSwipesRatio) {
            _this.swipePrev(true, true);
          } else {
            _this.swipeReset();
          }
        }
      }
      if (params.onTouchEnd) {
        _this.fireCallback(params.onTouchEnd, _this, e);
      }
      _this.callPlugins("onTouchEnd");
    }
  }
  /**
   * @param {HTMLElement} obj
   * @param {string} klass
   * @return {?}
   */
  function bind(obj, klass) {
    return obj && (obj.getAttribute("class") && obj.getAttribute("class").indexOf(klass) > -1);
  }
  /**
   * @param {EventTarget} el
   * @return {?}
   */
  function noSwipingSlide(el) {
    /** @type {boolean} */
    var c = false;
    do {
      if (bind(el, params.noSwipingClass)) {
        /** @type {boolean} */
        c = true;
      }
      el = el.parentElement;
    } while (!c && (el.parentElement && !bind(el, params.wrapperClass)));
    return!c && (bind(el, params.wrapperClass) && (bind(el, params.noSwipingClass) && (c = true))), c;
  }
  /**
   * @param {string} name
   * @param {?} node
   * @return {?}
   */
  function load(name, node) {
    var elem;
    /** @type {Element} */
    var el = document.createElement("div");
    return el.innerHTML = node, elem = el.firstChild, elem.className += " " + name, elem.outerHTML;
  }
  /**
   * @param {number} newPosition
   * @param {string} state
   * @param {?} opt_attributes
   * @return {undefined}
   */
  function swipeToPosition(newPosition, state, opt_attributes) {
    /**
     * @return {undefined}
     */
    function anim() {
      /** @type {number} */
      var a = +new Date;
      /** @type {number} */
      var b4 = a - b;
      currentPosition += a1 * b4 / (1E3 / 60);
      /** @type {boolean} */
      k = "toNext" === direction ? currentPosition > newPosition : newPosition > currentPosition;
      if (k) {
        _this.setWrapperTranslate(Math.ceil(currentPosition));
        /** @type {boolean} */
        _this._DOMAnimating = true;
        window.setTimeout(function() {
          anim();
        }, 1E3 / 60);
      } else {
        if (params.onSlideChangeEnd) {
          if ("to" === state) {
            if (opt_attributes.runCallbacks === true) {
              _this.fireCallback(params.onSlideChangeEnd, _this, direction);
            }
          } else {
            _this.fireCallback(params.onSlideChangeEnd, _this, direction);
          }
        }
        _this.setWrapperTranslate(newPosition);
        /** @type {boolean} */
        _this._DOMAnimating = false;
      }
    }
    var speed = "to" === state && opt_attributes.speed >= 0 ? opt_attributes.speed : params.speed;
    /** @type {number} */
    var b = +new Date;
    if (_this.support.transitions || !params.DOMAnimation) {
      _this.setWrapperTransition(speed);
      _this.setWrapperTranslate(newPosition);
    } else {
      var currentPosition = _this.getWrapperTranslate();
      /** @type {number} */
      var a1 = Math.ceil((newPosition - currentPosition) / speed * (1E3 / 60));
      /** @type {string} */
      var direction = currentPosition > newPosition ? "toNext" : "toPrev";
      /** @type {boolean} */
      var k = "toNext" === direction ? currentPosition > newPosition : newPosition > currentPosition;
      if (_this._DOMAnimating) {
        return;
      }
      anim();
    }
    _this.updateActiveSlide(newPosition);
    if (params.onSlideNext) {
      if ("next" === state) {
        if (opt_attributes.runCallbacks === true) {
          _this.fireCallback(params.onSlideNext, _this, newPosition);
        }
      }
    }
    if (params.onSlidePrev) {
      if ("prev" === state) {
        if (opt_attributes.runCallbacks === true) {
          _this.fireCallback(params.onSlidePrev, _this, newPosition);
        }
      }
    }
    if (params.onSlideReset) {
      if ("reset" === state) {
        if (opt_attributes.runCallbacks === true) {
          _this.fireCallback(params.onSlideReset, _this, newPosition);
        }
      }
    }
    if (!("next" !== state && ("prev" !== state && "to" !== state))) {
      if (!(opt_attributes.runCallbacks !== true)) {
        slideChangeCallbacks(state);
      }
    }
  }
  /**
   * @param {string} index
   * @return {undefined}
   */
  function slideChangeCallbacks(index) {
    if (_this.callPlugins("onSlideChangeStart"), params.onSlideChangeStart) {
      if (params.queueStartCallbacks && _this.support.transitions) {
        if (_this._queueStartCallbacks) {
          return;
        }
        /** @type {boolean} */
        _this._queueStartCallbacks = true;
        _this.fireCallback(params.onSlideChangeStart, _this, index);
        _this.wrapperTransitionEnd(function() {
          /** @type {boolean} */
          _this._queueStartCallbacks = false;
        });
      } else {
        _this.fireCallback(params.onSlideChangeStart, _this, index);
      }
    }
    if (params.onSlideChangeEnd) {
      if (_this.support.transitions) {
        if (params.queueEndCallbacks) {
          if (_this._queueEndCallbacks) {
            return;
          }
          /** @type {boolean} */
          _this._queueEndCallbacks = true;
          _this.wrapperTransitionEnd(function(err) {
            _this.fireCallback(params.onSlideChangeEnd, err, index);
          });
        } else {
          _this.wrapperTransitionEnd(function(err) {
            _this.fireCallback(params.onSlideChangeEnd, err, index);
          });
        }
      } else {
        if (!params.DOMAnimation) {
          setTimeout(function() {
            _this.fireCallback(params.onSlideChangeEnd, _this, index);
          }, 10);
        }
      }
    }
  }
  /**
   * @return {undefined}
   */
  function removePaginationEvents() {
    var pagers = _this.paginationButtons;
    if (pagers) {
      /** @type {number} */
      var i = 0;
      for (;i < pagers.length;i++) {
        _this.h.removeEventListener(pagers[i], "click", paginationClick);
      }
    }
  }
  /**
   * @return {undefined}
   */
  function addPaginationEvents() {
    var pagers = _this.paginationButtons;
    if (pagers) {
      /** @type {number} */
      var i = 0;
      for (;i < pagers.length;i++) {
        _this.h.addEventListener(pagers[i], "click", paginationClick);
      }
    }
  }
  /**
   * @param {Event} e
   * @return {undefined}
   */
  function paginationClick(e) {
    var newIndex;
    var elem = e.target || e.srcElement;
    var codeSegments = _this.paginationButtons;
    /** @type {number} */
    var i = 0;
    for (;i < codeSegments.length;i++) {
      if (elem === codeSegments[i]) {
        /** @type {number} */
        newIndex = i;
      }
    }
    if (params.autoplay) {
      _this.stopAutoplay(true);
    }
    _this.swipeTo(newIndex);
  }
  /**
   * @return {undefined}
   */
  function playSound() {
    /** @type {number} */
    tref = setTimeout(function() {
      if (params.loop) {
        _this.fixLoop();
        _this.swipeNext(true, true);
      } else {
        if (!_this.swipeNext(true, true)) {
          if (params.autoplayStopOnLast) {
            clearTimeout(tref);
            tref = void 0;
          } else {
            _this.swipeTo(0);
          }
        }
      }
      _this.wrapperTransitionEnd(function() {
        if ("undefined" != typeof tref) {
          playSound();
        }
      });
    }, params.autoplay);
  }
  /**
   * @return {undefined}
   */
  function makeSwiper() {
    _this.calcSlides();
    if (params.loader.slides.length > 0) {
      if (0 === _this.slides.length) {
        _this.loadSlides();
      }
    }
    if (params.loop) {
      _this.createLoop();
    }
    _this.init();
    initEvents();
    if (params.pagination) {
      _this.createPagination(true);
    }
    if (params.loop || params.initialSlide > 0) {
      _this.swipeTo(params.initialSlide, 0, false);
    } else {
      _this.updateActiveSlide(0);
    }
    if (params.autoplay) {
      _this.startAutoplay();
    }
    _this.centerIndex = _this.activeIndex;
    if (params.onSwiperCreated) {
      _this.fireCallback(params.onSwiperCreated, _this);
    }
    _this.callPlugins("onSwiperCreated");
  }
  if (!document.body.outerHTML && (document.body.__defineGetter__ && HTMLElement)) {
    var element = HTMLElement.prototype;
    if (element.__defineGetter__) {
      element.__defineGetter__("outerHTML", function() {
        return(new XMLSerializer).serializeToString(this);
      });
    }
  }
  if (window.getComputedStyle || (window.getComputedStyle = function(element, mayParseLabeledStatementInstead) {
    return this.el = element, this.getPropertyValue = function(prop) {
      /** @type {RegExp} */
      var rclass = /(\-([a-z]){1})/g;
      return "float" === prop && (prop = "styleFloat"), rclass.test(prop) && (prop = prop.replace(rclass, function() {
        return arguments[2].toUpperCase();
      })), element.currentStyle[prop] ? element.currentStyle[prop] : null;
    }, this;
  }), Array.prototype.indexOf || (Array.prototype.indexOf = function(name, recurring) {
    /** @type {number} */
    var i = recurring || 0;
    /** @type {number} */
    var l = this.length;
    for (;l > i;i++) {
      if (this[i] === name) {
        return i;
      }
    }
    return-1;
  }), (document.querySelectorAll || window.jQuery) && ("undefined" != typeof name && (name.nodeType || 0 !== $$(name).length))) {
    var _this = this;
    _this.touches = {
      start : 0,
      startX : 0,
      startY : 0,
      current : 0,
      currentX : 0,
      currentY : 0,
      diff : 0,
      abs : 0
    };
    _this.positions = {
      start : 0,
      abs : 0,
      diff : 0,
      current : 0
    };
    _this.times = {
      start : 0,
      end : 0
    };
    /** @type {number} */
    _this.id = (new Date).getTime();
    _this.container = name.nodeType ? name : $$(name)[0];
    /** @type {boolean} */
    _this.isTouched = false;
    /** @type {boolean} */
    _this.isMoved = false;
    /** @type {number} */
    _this.activeIndex = 0;
    /** @type {number} */
    _this.centerIndex = 0;
    /** @type {number} */
    _this.activeLoaderIndex = 0;
    /** @type {number} */
    _this.activeLoopIndex = 0;
    /** @type {null} */
    _this.previousIndex = null;
    /** @type {number} */
    _this.velocity = 0;
    /** @type {Array} */
    _this.snapGrid = [];
    /** @type {Array} */
    _this.slidesGrid = [];
    /** @type {Array} */
    _this.imagesToLoad = [];
    /** @type {number} */
    _this.imagesLoaded = 0;
    /** @type {number} */
    _this.wrapperLeft = 0;
    /** @type {number} */
    _this.wrapperRight = 0;
    /** @type {number} */
    _this.wrapperTop = 0;
    /** @type {number} */
    _this.wrapperBottom = 0;
    /** @type {boolean} */
    _this.isAndroid = navigator.userAgent.toLowerCase().indexOf("android") >= 0;
    var wrapper;
    var slideSize;
    var wrapperSize;
    var direction;
    var io;
    var containerSize;
    var defaults = {
      eventTarget : "wrapper",
      mode : "horizontal",
      touchRatio : 1,
      speed : 300,
      freeMode : false,
      freeModeFluid : false,
      momentumRatio : 1,
      momentumBounce : true,
      momentumBounceRatio : 1,
      slidesPerView : 1,
      slidesPerGroup : 1,
      slidesPerViewFit : true,
      simulateTouch : true,
      followFinger : true,
      shortSwipes : true,
      longSwipesRatio : 0.5,
      moveStartThreshold : false,
      onlyExternal : false,
      createPagination : true,
      pagination : false,
      paginationElement : "span",
      paginationClickable : false,
      paginationAsRange : true,
      resistance : true,
      scrollContainer : false,
      preventLinks : true,
      preventLinksPropagation : false,
      noSwiping : false,
      noSwipingClass : "swiper-no-swiping",
      initialSlide : 0,
      keyboardControl : false,
      mousewheelControl : false,
      mousewheelControlForceToAxis : false,
      useCSS3Transforms : true,
      autoplay : false,
      autoplayDisableOnInteraction : true,
      autoplayStopOnLast : false,
      loop : false,
      loopAdditionalSlides : 0,
      roundLengths : false,
      calculateHeight : false,
      cssWidthAndHeight : false,
      updateOnImagesReady : true,
      releaseFormElements : true,
      watchActiveIndex : false,
      visibilityFullFit : false,
      offsetPxBefore : 0,
      offsetPxAfter : 0,
      offsetSlidesBefore : 0,
      offsetSlidesAfter : 0,
      centeredSlides : false,
      queueStartCallbacks : false,
      queueEndCallbacks : false,
      autoResize : true,
      resizeReInit : false,
      DOMAnimation : true,
      loader : {
        slides : [],
        slidesHTMLType : "inner",
        surroundGroups : 1,
        logic : "reload",
        loadAllSlides : false
      },
      swipeToPrev : true,
      swipeToNext : true,
      slideElement : "div",
      slideClass : "swiper-slide",
      slideActiveClass : "swiper-slide-active",
      slideVisibleClass : "swiper-slide-visible",
      slideDuplicateClass : "swiper-slide-duplicate",
      wrapperClass : "swiper-wrapper",
      paginationElementClass : "swiper-pagination-switch",
      paginationActiveClass : "swiper-active-switch",
      paginationVisibleClass : "swiper-visible-switch"
    };
    params = params || {};
    var prop;
    for (prop in defaults) {
      if (prop in params && "object" == typeof params[prop]) {
        var subProp;
        for (subProp in defaults[prop]) {
          if (!(subProp in params[prop])) {
            params[prop][subProp] = defaults[prop][subProp];
          }
        }
      } else {
        if (!(prop in params)) {
          params[prop] = defaults[prop];
        }
      }
    }
    /** @type {Object} */
    _this.params = params;
    if (params.scrollContainer) {
      /** @type {boolean} */
      params.freeMode = true;
      /** @type {boolean} */
      params.freeModeFluid = true;
    }
    if (params.loop) {
      /** @type {string} */
      params.resistance = "100%";
    }
    /** @type {boolean} */
    var isH = "horizontal" === params.mode;
    /** @type {Array} */
    var types = ["mousedown", "mousemove", "mouseup"];
    if (_this.browser.ie10) {
      /** @type {Array} */
      types = ["MSPointerDown", "MSPointerMove", "MSPointerUp"];
    }
    if (_this.browser.ie11) {
      /** @type {Array} */
      types = ["pointerdown", "pointermove", "pointerup"];
    }
    _this.touchEvents = {
      touchStart : _this.support.touch || !params.simulateTouch ? "touchstart" : types[0],
      touchMove : _this.support.touch || !params.simulateTouch ? "touchmove" : types[1],
      touchEnd : _this.support.touch || !params.simulateTouch ? "touchend" : types[2]
    };
    /** @type {number} */
    var i = _this.container.childNodes.length - 1;
    for (;i >= 0;i--) {
      if (_this.container.childNodes[i].className) {
        var _wrapperClasses = _this.container.childNodes[i].className.split(/\s+/);
        /** @type {number} */
        var j = 0;
        for (;j < _wrapperClasses.length;j++) {
          if (_wrapperClasses[j] === params.wrapperClass) {
            wrapper = _this.container.childNodes[i];
          }
        }
      }
    }
    _this.wrapper = wrapper;
    /**
     * @param {Object} el
     * @return {?}
     */
    _this._extendSwiperSlide = function(el) {
      return el.append = function() {
        return params.loop ? el.insertAfter(_this.slides.length - _this.loopedSlides) : (_this.wrapper.appendChild(el), _this.reInit()), el;
      }, el.prepend = function() {
        return params.loop ? (_this.wrapper.insertBefore(el, _this.slides[_this.loopedSlides]), _this.removeLoopedSlides(), _this.calcSlides(), _this.createLoop()) : _this.wrapper.insertBefore(el, _this.wrapper.firstChild), _this.reInit(), el;
      }, el.insertAfter = function(index) {
        if ("undefined" == typeof index) {
          return false;
        }
        var selector;
        return params.loop ? (selector = _this.slides[index + 1 + _this.loopedSlides], selector ? _this.wrapper.insertBefore(el, selector) : _this.wrapper.appendChild(el), _this.removeLoopedSlides(), _this.calcSlides(), _this.createLoop()) : (selector = _this.slides[index + 1], _this.wrapper.insertBefore(el, selector)), _this.reInit(), el;
      }, el.clone = function() {
        return _this._extendSwiperSlide(el.cloneNode(true));
      }, el.remove = function() {
        _this.wrapper.removeChild(el);
        _this.reInit();
      }, el.html = function(html) {
        return "undefined" == typeof html ? el.innerHTML : (el.innerHTML = html, el);
      }, el.index = function() {
        var ret;
        /** @type {number} */
        var i = _this.slides.length - 1;
        for (;i >= 0;i--) {
          if (el === _this.slides[i]) {
            /** @type {number} */
            ret = i;
          }
        }
        return ret;
      }, el.isActive = function() {
        return el.index() === _this.activeIndex ? true : false;
      }, el.swiperSlideDataStorage || (el.swiperSlideDataStorage = {}), el.getData = function(name) {
        return el.swiperSlideDataStorage[name];
      }, el.setData = function(name, value) {
        return el.swiperSlideDataStorage[name] = value, el;
      }, el.data = function(name, value) {
        return "undefined" == typeof value ? el.getAttribute("data-" + name) : (el.setAttribute("data-" + name, value), el);
      }, el.getWidth = function(deepDataAndEvents, recurring) {
        return _this.h.getWidth(el, deepDataAndEvents, recurring);
      }, el.getHeight = function(deepDataAndEvents, recurring) {
        return _this.h.getHeight(el, deepDataAndEvents, recurring);
      }, el.getOffset = function() {
        return _this.h.getOffset(el);
      }, el;
    };
    /**
     * @param {boolean} dataAndEvents
     * @return {undefined}
     */
    _this.calcSlides = function(dataAndEvents) {
      var len = _this.slides ? _this.slides.length : false;
      /** @type {Array} */
      _this.slides = [];
      /** @type {Array} */
      _this.displaySlides = [];
      /** @type {number} */
      var i = 0;
      for (;i < _this.wrapper.childNodes.length;i++) {
        if (_this.wrapper.childNodes[i].className) {
          var _className = _this.wrapper.childNodes[i].className;
          var _slideClasses = _className.split(/\s+/);
          /** @type {number} */
          var j = 0;
          for (;j < _slideClasses.length;j++) {
            if (_slideClasses[j] === params.slideClass) {
              _this.slides.push(_this.wrapper.childNodes[i]);
            }
          }
        }
      }
      /** @type {number} */
      i = _this.slides.length - 1;
      for (;i >= 0;i--) {
        _this._extendSwiperSlide(_this.slides[i]);
      }
      if (len !== false) {
        if (len !== _this.slides.length || dataAndEvents) {
          removeSlideEvents();
          addSlideEvents();
          _this.updateActiveSlide();
          if (_this.params.pagination) {
            _this.createPagination();
          }
          _this.callPlugins("numberOfSlidesChanged");
        }
      }
    };
    /**
     * @param {string} html
     * @param {Node} slideClassList
     * @param {string} el
     * @return {?}
     */
    _this.createSlide = function(html, slideClassList, el) {
      slideClassList = slideClassList || _this.params.slideClass;
      el = el || params.slideElement;
      /** @type {Element} */
      var newSlide = document.createElement(el);
      return newSlide.innerHTML = html || "", newSlide.className = slideClassList, _this._extendSwiperSlide(newSlide);
    };
    /**
     * @param {Object} html
     * @param {Node} slideClassList
     * @param {string} el
     * @return {?}
     */
    _this.appendSlide = function(html, slideClassList, el) {
      return html ? html.nodeType ? _this._extendSwiperSlide(html).append() : _this.createSlide(html, slideClassList, el).append() : void 0;
    };
    /**
     * @param {Object} html
     * @param {Node} slideClassList
     * @param {string} el
     * @return {?}
     */
    _this.prependSlide = function(html, slideClassList, el) {
      return html ? html.nodeType ? _this._extendSwiperSlide(html).prepend() : _this.createSlide(html, slideClassList, el).prepend() : void 0;
    };
    /**
     * @param {number} index
     * @param {Object} html
     * @param {Node} slideClassList
     * @param {string} el
     * @return {?}
     */
    _this.insertSlideAfter = function(index, html, slideClassList, el) {
      return "undefined" == typeof index ? false : html.nodeType ? _this._extendSwiperSlide(html).insertAfter(index) : _this.createSlide(html, slideClassList, el).insertAfter(index);
    };
    /**
     * @param {(number|string)} index
     * @return {?}
     */
    _this.removeSlide = function(index) {
      if (_this.slides[index]) {
        if (params.loop) {
          if (!_this.slides[index + _this.loopedSlides]) {
            return false;
          }
          _this.slides[index + _this.loopedSlides].remove();
          _this.removeLoopedSlides();
          _this.calcSlides();
          _this.createLoop();
        } else {
          _this.slides[index].remove();
        }
        return true;
      }
      return false;
    };
    /**
     * @return {?}
     */
    _this.removeLastSlide = function() {
      return _this.slides.length > 0 ? (params.loop ? (_this.slides[_this.slides.length - 1 - _this.loopedSlides].remove(), _this.removeLoopedSlides(), _this.calcSlides(), _this.createLoop()) : _this.slides[_this.slides.length - 1].remove(), true) : false;
    };
    /**
     * @return {undefined}
     */
    _this.removeAllSlides = function() {
      var pl = _this.slides.length;
      /** @type {number} */
      var i = _this.slides.length - 1;
      for (;i >= 0;i--) {
        _this.slides[i].remove();
        if (i === pl - 1) {
          _this.setWrapperTranslate(0);
        }
      }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    _this.getSlide = function(index) {
      return _this.slides[index];
    };
    /**
     * @return {?}
     */
    _this.getLastSlide = function() {
      return _this.slides[_this.slides.length - 1];
    };
    /**
     * @return {?}
     */
    _this.getFirstSlide = function() {
      return _this.slides[0];
    };
    /**
     * @return {?}
     */
    _this.activeSlide = function() {
      return _this.slides[_this.activeIndex];
    };
    /**
     * @return {undefined}
     */
    _this.fireCallback = function() {
      var listeners = arguments[0];
      if ("[object Array]" === Object.prototype.toString.call(listeners)) {
        /** @type {number} */
        var key = 0;
        for (;key < listeners.length;key++) {
          if ("function" == typeof listeners[key]) {
            listeners[key](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
          }
        }
      } else {
        if ("[object String]" === Object.prototype.toString.call(listeners)) {
          if (params["on" + listeners]) {
            _this.fireCallback(params["on" + listeners], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
          }
        } else {
          listeners(arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
        }
      }
    };
    /**
     * @param {string} ev
     * @param {string} value
     * @return {?}
     */
    _this.addCallback = function(ev, value) {
      var options;
      var me = this;
      return me.params["on" + ev] ? isArray(this.params["on" + ev]) ? this.params["on" + ev].push(value) : "function" == typeof this.params["on" + ev] ? (options = this.params["on" + ev], this.params["on" + ev] = [], this.params["on" + ev].push(options), this.params["on" + ev].push(value)) : void 0 : (this.params["on" + ev] = [], this.params["on" + ev].push(value));
    };
    /**
     * @param {string} evtName
     * @return {undefined}
     */
    _this.removeCallbacks = function(evtName) {
      if (_this.params["on" + evtName]) {
        /** @type {null} */
        _this.params["on" + evtName] = null;
      }
    };
    /** @type {Array} */
    var bucket = [];
    var plugin;
    for (plugin in _this.plugins) {
      if (params[plugin]) {
        var value = _this.plugins[plugin](_this, params[plugin]);
        if (value) {
          bucket.push(value);
        }
      }
    }
    /**
     * @param {string} method
     * @param {Object} args
     * @return {undefined}
     */
    _this.callPlugins = function(method, args) {
      if (!args) {
        args = {};
      }
      /** @type {number} */
      var i = 0;
      for (;i < bucket.length;i++) {
        if (method in bucket[i]) {
          bucket[i][method](args);
        }
      }
    };
    if (!(!_this.browser.ie10 && !_this.browser.ie11)) {
      if (!params.onlyExternal) {
        _this.wrapper.classList.add("swiper-wp8-" + (isH ? "horizontal" : "vertical"));
      }
    }
    if (params.freeMode) {
      _this.container.className += " swiper-free-mode";
    }
    /** @type {boolean} */
    _this.initialized = false;
    /**
     * @param {Object} expectedNumberOfNonCommentArgs
     * @param {boolean} node
     * @return {undefined}
     */
    _this.init = function(expectedNumberOfNonCommentArgs, node) {
      var _width = _this.h.getWidth(_this.container, false, params.roundLengths);
      var _height = _this.h.getHeight(_this.container, false, params.roundLengths);
      if (_width !== _this.width || (_height !== _this.height || expectedNumberOfNonCommentArgs)) {
        _this.width = _width;
        _this.height = _height;
        var slideWidth;
        var slideHeight;
        var slideMaxHeight;
        var wrapperWidth;
        var wrapperHeight;
        var slideLeft;
        var i;
        containerSize = isH ? _width : _height;
        var wrapper = _this.wrapper;
        if (expectedNumberOfNonCommentArgs && _this.calcSlides(node), "auto" === params.slidesPerView) {
          /** @type {number} */
          var slidesWidth = 0;
          /** @type {number} */
          var slidesHeight = 0;
          if (params.slidesOffset > 0) {
            /** @type {string} */
            wrapper.style.paddingLeft = "";
            /** @type {string} */
            wrapper.style.paddingRight = "";
            /** @type {string} */
            wrapper.style.paddingTop = "";
            /** @type {string} */
            wrapper.style.paddingBottom = "";
          }
          /** @type {string} */
          wrapper.style.width = "";
          /** @type {string} */
          wrapper.style.height = "";
          if (params.offsetPxBefore > 0) {
            if (isH) {
              _this.wrapperLeft = params.offsetPxBefore;
            } else {
              _this.wrapperTop = params.offsetPxBefore;
            }
          }
          if (params.offsetPxAfter > 0) {
            if (isH) {
              _this.wrapperRight = params.offsetPxAfter;
            } else {
              _this.wrapperBottom = params.offsetPxAfter;
            }
          }
          if (params.centeredSlides) {
            if (isH) {
              /** @type {number} */
              _this.wrapperLeft = (containerSize - this.slides[0].getWidth(true, params.roundLengths)) / 2;
              /** @type {number} */
              _this.wrapperRight = (containerSize - _this.slides[_this.slides.length - 1].getWidth(true, params.roundLengths)) / 2;
            } else {
              /** @type {number} */
              _this.wrapperTop = (containerSize - _this.slides[0].getHeight(true, params.roundLengths)) / 2;
              /** @type {number} */
              _this.wrapperBottom = (containerSize - _this.slides[_this.slides.length - 1].getHeight(true, params.roundLengths)) / 2;
            }
          }
          if (isH) {
            if (_this.wrapperLeft >= 0) {
              /** @type {string} */
              wrapper.style.paddingLeft = _this.wrapperLeft + "px";
            }
            if (_this.wrapperRight >= 0) {
              /** @type {string} */
              wrapper.style.paddingRight = _this.wrapperRight + "px";
            }
          } else {
            if (_this.wrapperTop >= 0) {
              /** @type {string} */
              wrapper.style.paddingTop = _this.wrapperTop + "px";
            }
            if (_this.wrapperBottom >= 0) {
              /** @type {string} */
              wrapper.style.paddingBottom = _this.wrapperBottom + "px";
            }
          }
          /** @type {number} */
          slideLeft = 0;
          /** @type {number} */
          var value = 0;
          /** @type {Array} */
          _this.snapGrid = [];
          /** @type {Array} */
          _this.slidesGrid = [];
          /** @type {number} */
          slideMaxHeight = 0;
          /** @type {number} */
          i = 0;
          for (;i < _this.slides.length;i++) {
            slideWidth = _this.slides[i].getWidth(true, params.roundLengths);
            slideHeight = _this.slides[i].getHeight(true, params.roundLengths);
            if (params.calculateHeight) {
              /** @type {number} */
              slideMaxHeight = Math.max(slideMaxHeight, slideHeight);
            }
            var _slideSize = isH ? slideWidth : slideHeight;
            if (params.centeredSlides) {
              var nextSlideWidth = i === _this.slides.length - 1 ? 0 : _this.slides[i + 1].getWidth(true, params.roundLengths);
              var nextSlideHeight = i === _this.slides.length - 1 ? 0 : _this.slides[i + 1].getHeight(true, params.roundLengths);
              var nextSlideSize = isH ? nextSlideWidth : nextSlideHeight;
              if (_slideSize > containerSize) {
                if (params.slidesPerViewFit) {
                  _this.snapGrid.push(slideLeft + _this.wrapperLeft);
                  _this.snapGrid.push(slideLeft + _slideSize - containerSize + _this.wrapperLeft);
                } else {
                  /** @type {number} */
                  var j = 0;
                  for (;j <= Math.floor(_slideSize / (containerSize + _this.wrapperLeft));j++) {
                    if (0 === j) {
                      _this.snapGrid.push(slideLeft + _this.wrapperLeft);
                    } else {
                      _this.snapGrid.push(slideLeft + _this.wrapperLeft + containerSize * j);
                    }
                  }
                }
                _this.slidesGrid.push(slideLeft + _this.wrapperLeft);
              } else {
                _this.snapGrid.push(value);
                _this.slidesGrid.push(value);
              }
              value += _slideSize / 2 + nextSlideSize / 2;
            } else {
              if (_slideSize > containerSize) {
                if (params.slidesPerViewFit) {
                  _this.snapGrid.push(slideLeft);
                  _this.snapGrid.push(slideLeft + _slideSize - containerSize);
                } else {
                  if (0 !== containerSize) {
                    /** @type {number} */
                    var ratio = 0;
                    for (;ratio <= Math.floor(_slideSize / containerSize);ratio++) {
                      _this.snapGrid.push(slideLeft + containerSize * ratio);
                    }
                  } else {
                    _this.snapGrid.push(slideLeft);
                  }
                }
              } else {
                _this.snapGrid.push(slideLeft);
              }
              _this.slidesGrid.push(slideLeft);
            }
            slideLeft += _slideSize;
            slidesWidth += slideWidth;
            slidesHeight += slideHeight;
          }
          if (params.calculateHeight) {
            /** @type {number} */
            _this.height = slideMaxHeight;
          }
          if (isH) {
            wrapperSize = slidesWidth + _this.wrapperRight + _this.wrapperLeft;
            if (!(params.cssWidthAndHeight && "height" !== params.cssWidthAndHeight)) {
              /** @type {string} */
              wrapper.style.width = slidesWidth + "px";
            }
            if (!(params.cssWidthAndHeight && "width" !== params.cssWidthAndHeight)) {
              /** @type {string} */
              wrapper.style.height = _this.height + "px";
            }
          } else {
            if (!(params.cssWidthAndHeight && "height" !== params.cssWidthAndHeight)) {
              /** @type {string} */
              wrapper.style.width = _this.width + "px";
            }
            if (!(params.cssWidthAndHeight && "width" !== params.cssWidthAndHeight)) {
              /** @type {string} */
              wrapper.style.height = slidesHeight + "px";
            }
            wrapperSize = slidesHeight + _this.wrapperTop + _this.wrapperBottom;
          }
        } else {
          if (params.scrollContainer) {
            /** @type {string} */
            wrapper.style.width = "";
            /** @type {string} */
            wrapper.style.height = "";
            wrapperWidth = _this.slides[0].getWidth(true, params.roundLengths);
            wrapperHeight = _this.slides[0].getHeight(true, params.roundLengths);
            wrapperSize = isH ? wrapperWidth : wrapperHeight;
            /** @type {string} */
            wrapper.style.width = wrapperWidth + "px";
            /** @type {string} */
            wrapper.style.height = wrapperHeight + "px";
            slideSize = isH ? wrapperWidth : wrapperHeight;
          } else {
            if (params.calculateHeight) {
              /** @type {number} */
              slideMaxHeight = 0;
              /** @type {number} */
              wrapperHeight = 0;
              if (!isH) {
                /** @type {string} */
                _this.container.style.height = "";
              }
              /** @type {string} */
              wrapper.style.height = "";
              /** @type {number} */
              i = 0;
              for (;i < _this.slides.length;i++) {
                /** @type {string} */
                _this.slides[i].style.height = "";
                /** @type {number} */
                slideMaxHeight = Math.max(_this.slides[i].getHeight(true), slideMaxHeight);
                if (!isH) {
                  wrapperHeight += _this.slides[i].getHeight(true);
                }
              }
              /** @type {number} */
              slideHeight = slideMaxHeight;
              /** @type {number} */
              _this.height = slideHeight;
              if (isH) {
                /** @type {number} */
                wrapperHeight = slideHeight;
              } else {
                /** @type {number} */
                containerSize = slideHeight;
                /** @type {string} */
                _this.container.style.height = containerSize + "px";
              }
            } else {
              slideHeight = isH ? _this.height : _this.height / params.slidesPerView;
              if (params.roundLengths) {
                /** @type {number} */
                slideHeight = Math.ceil(slideHeight);
              }
              wrapperHeight = isH ? _this.height : _this.slides.length * slideHeight;
            }
            slideWidth = isH ? _this.width / params.slidesPerView : _this.width;
            if (params.roundLengths) {
              /** @type {number} */
              slideWidth = Math.ceil(slideWidth);
            }
            wrapperWidth = isH ? _this.slides.length * slideWidth : _this.width;
            slideSize = isH ? slideWidth : slideHeight;
            if (params.offsetSlidesBefore > 0) {
              if (isH) {
                /** @type {number} */
                _this.wrapperLeft = slideSize * params.offsetSlidesBefore;
              } else {
                /** @type {number} */
                _this.wrapperTop = slideSize * params.offsetSlidesBefore;
              }
            }
            if (params.offsetSlidesAfter > 0) {
              if (isH) {
                /** @type {number} */
                _this.wrapperRight = slideSize * params.offsetSlidesAfter;
              } else {
                /** @type {number} */
                _this.wrapperBottom = slideSize * params.offsetSlidesAfter;
              }
            }
            if (params.offsetPxBefore > 0) {
              if (isH) {
                _this.wrapperLeft = params.offsetPxBefore;
              } else {
                _this.wrapperTop = params.offsetPxBefore;
              }
            }
            if (params.offsetPxAfter > 0) {
              if (isH) {
                _this.wrapperRight = params.offsetPxAfter;
              } else {
                _this.wrapperBottom = params.offsetPxAfter;
              }
            }
            if (params.centeredSlides) {
              if (isH) {
                /** @type {number} */
                _this.wrapperLeft = (containerSize - slideSize) / 2;
                /** @type {number} */
                _this.wrapperRight = (containerSize - slideSize) / 2;
              } else {
                /** @type {number} */
                _this.wrapperTop = (containerSize - slideSize) / 2;
                /** @type {number} */
                _this.wrapperBottom = (containerSize - slideSize) / 2;
              }
            }
            if (isH) {
              if (_this.wrapperLeft > 0) {
                /** @type {string} */
                wrapper.style.paddingLeft = _this.wrapperLeft + "px";
              }
              if (_this.wrapperRight > 0) {
                /** @type {string} */
                wrapper.style.paddingRight = _this.wrapperRight + "px";
              }
            } else {
              if (_this.wrapperTop > 0) {
                /** @type {string} */
                wrapper.style.paddingTop = _this.wrapperTop + "px";
              }
              if (_this.wrapperBottom > 0) {
                /** @type {string} */
                wrapper.style.paddingBottom = _this.wrapperBottom + "px";
              }
            }
            wrapperSize = isH ? wrapperWidth + _this.wrapperRight + _this.wrapperLeft : wrapperHeight + _this.wrapperTop + _this.wrapperBottom;
            if (parseFloat(wrapperWidth) > 0) {
              if (!params.cssWidthAndHeight || "height" === params.cssWidthAndHeight) {
                /** @type {string} */
                wrapper.style.width = wrapperWidth + "px";
              }
            }
            if (parseFloat(wrapperHeight) > 0) {
              if (!params.cssWidthAndHeight || "width" === params.cssWidthAndHeight) {
                /** @type {string} */
                wrapper.style.height = wrapperHeight + "px";
              }
            }
            /** @type {number} */
            slideLeft = 0;
            /** @type {Array} */
            _this.snapGrid = [];
            /** @type {Array} */
            _this.slidesGrid = [];
            /** @type {number} */
            i = 0;
            for (;i < _this.slides.length;i++) {
              _this.snapGrid.push(slideLeft);
              _this.slidesGrid.push(slideLeft);
              slideLeft += slideSize;
              if (parseFloat(slideWidth) > 0) {
                if (!params.cssWidthAndHeight || "height" === params.cssWidthAndHeight) {
                  /** @type {string} */
                  _this.slides[i].style.width = slideWidth + "px";
                }
              }
              if (parseFloat(slideHeight) > 0) {
                if (!params.cssWidthAndHeight || "width" === params.cssWidthAndHeight) {
                  /** @type {string} */
                  _this.slides[i].style.height = slideHeight + "px";
                }
              }
            }
          }
        }
        if (_this.initialized) {
          _this.callPlugins("onInit");
          if (params.onInit) {
            _this.fireCallback(params.onInit, _this);
          }
        } else {
          _this.callPlugins("onFirstInit");
          if (params.onFirstInit) {
            _this.fireCallback(params.onFirstInit, _this);
          }
        }
        /** @type {boolean} */
        _this.initialized = true;
      }
    };
    /**
     * @param {Object} value
     * @return {undefined}
     */
    _this.reInit = function(value) {
      _this.init(true, value);
    };
    /**
     * @param {?} reInit
     * @return {undefined}
     */
    _this.resizeFix = function(reInit) {
      _this.callPlugins("beforeResizeFix");
      _this.init(params.resizeReInit || reInit);
      if (params.freeMode) {
        if (_this.getWrapperTranslate() < -maxWrapperPosition()) {
          _this.setWrapperTransition(0);
          _this.setWrapperTranslate(-maxWrapperPosition());
        }
      } else {
        _this.swipeTo(params.loop ? _this.activeLoopIndex : _this.activeIndex, 0, false);
        if (params.autoplay) {
          if (_this.support.transitions && "undefined" != typeof tref) {
            if ("undefined" != typeof tref) {
              clearTimeout(tref);
              tref = void 0;
              _this.startAutoplay();
            }
          } else {
            if ("undefined" != typeof scrollIntervalId) {
              clearInterval(scrollIntervalId);
              scrollIntervalId = void 0;
              _this.startAutoplay();
            }
          }
        }
      }
      _this.callPlugins("afterResizeFix");
    };
    /**
     * @param {string} keepData
     * @return {undefined}
     */
    _this.destroy = function(keepData) {
      var unbind = _this.h.removeEventListener;
      var touchmove = "wrapper" === params.eventTarget ? _this.wrapper : _this.container;
      if (_this.browser.ie10 || _this.browser.ie11 ? (unbind(touchmove, _this.touchEvents.touchStart, onTouchStart), unbind(document, _this.touchEvents.touchMove, onTouchMove), unbind(document, _this.touchEvents.touchEnd, onTouchEnd)) : (_this.support.touch && (unbind(touchmove, "touchstart", onTouchStart), unbind(touchmove, "touchmove", onTouchMove), unbind(touchmove, "touchend", onTouchEnd)), params.simulateTouch && (unbind(touchmove, "mousedown", onTouchStart), unbind(document, "mousemove", onTouchMove), 
      unbind(document, "mouseup", onTouchEnd))), params.autoResize && unbind(window, "resize", _this.resizeFix), removeSlideEvents(), params.paginationClickable && removePaginationEvents(), params.mousewheelControl && (_this._wheelEvent && unbind(_this.container, _this._wheelEvent, handleMousewheel)), params.keyboardControl && unbind(document, "keydown", handleKeyboardKeys), params.autoplay && _this.stopAutoplay(), keepData) {
        _this.wrapper.removeAttribute("style");
        /** @type {number} */
        var i = 0;
        for (;i < _this.slides.length;i++) {
          _this.slides[i].removeAttribute("style");
        }
      }
      _this.callPlugins("onDestroy");
      if (window.jQuery) {
        if (window.jQuery(_this.container).data("swiper")) {
          window.jQuery(_this.container).removeData("swiper");
        }
      }
      if (window.Zepto) {
        if (window.Zepto(_this.container).data("swiper")) {
          window.Zepto(_this.container).removeData("swiper");
        }
      }
      /** @type {null} */
      _this = null;
    };
    /**
     * @return {undefined}
     */
    _this.disableKeyboardControl = function() {
      /** @type {boolean} */
      params.keyboardControl = false;
      _this.h.removeEventListener(document, "keydown", handleKeyboardKeys);
    };
    /**
     * @return {undefined}
     */
    _this.enableKeyboardControl = function() {
      /** @type {boolean} */
      params.keyboardControl = true;
      _this.h.addEventListener(document, "keydown", handleKeyboardKeys);
    };
    /** @type {number} */
    var V = (new Date).getTime();
    if (_this.disableMousewheelControl = function() {
      return _this._wheelEvent ? (params.mousewheelControl = false, _this.h.removeEventListener(_this.container, _this._wheelEvent, handleMousewheel), true) : false;
    }, _this.enableMousewheelControl = function() {
      return _this._wheelEvent ? (params.mousewheelControl = true, _this.h.addEventListener(_this.container, _this._wheelEvent, handleMousewheel), true) : false;
    }, params.grabCursor) {
      var containerStyle = _this.container.style;
      /** @type {string} */
      containerStyle.cursor = "move";
      /** @type {string} */
      containerStyle.cursor = "grab";
      /** @type {string} */
      containerStyle.cursor = "-moz-grab";
      /** @type {string} */
      containerStyle.cursor = "-webkit-grab";
    }
    /** @type {boolean} */
    _this.allowSlideClick = true;
    /** @type {boolean} */
    _this.allowLinks = true;
    var X;
    var velocityPrevPosition;
    var velocityPrevTime;
    /** @type {boolean} */
    var last = false;
    /** @type {boolean} */
    var _ = true;
    /**
     * @param {boolean} dataAndEvents
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    _this.swipeNext = function(dataAndEvents, deepDataAndEvents) {
      if ("undefined" == typeof dataAndEvents) {
        /** @type {boolean} */
        dataAndEvents = true;
      }
      if (!deepDataAndEvents) {
        if (params.loop) {
          _this.fixLoop();
        }
      }
      if (!deepDataAndEvents) {
        if (params.autoplay) {
          _this.stopAutoplay(true);
        }
      }
      _this.callPlugins("onSwipeNext");
      var currentPosition = _this.getWrapperTranslate().toFixed(2);
      var newPosition = currentPosition;
      if ("auto" === params.slidesPerView) {
        /** @type {number} */
        var i = 0;
        for (;i < _this.snapGrid.length;i++) {
          if (-currentPosition >= _this.snapGrid[i].toFixed(2) && -currentPosition < _this.snapGrid[i + 1].toFixed(2)) {
            /** @type {number} */
            newPosition = -_this.snapGrid[i + 1];
            break;
          }
        }
      } else {
        /** @type {number} */
        var groupSize = slideSize * params.slidesPerGroup;
        /** @type {number} */
        newPosition = -(Math.floor(Math.abs(currentPosition) / Math.floor(groupSize)) * groupSize + groupSize);
      }
      return newPosition < -maxWrapperPosition() && (newPosition = -maxWrapperPosition()), newPosition === currentPosition ? false : (swipeToPosition(newPosition, "next", {
        runCallbacks : dataAndEvents
      }), true);
    };
    /**
     * @param {boolean} dataAndEvents
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    _this.swipePrev = function(dataAndEvents, deepDataAndEvents) {
      if ("undefined" == typeof dataAndEvents) {
        /** @type {boolean} */
        dataAndEvents = true;
      }
      if (!deepDataAndEvents) {
        if (params.loop) {
          _this.fixLoop();
        }
      }
      if (!deepDataAndEvents) {
        if (params.autoplay) {
          _this.stopAutoplay(true);
        }
      }
      _this.callPlugins("onSwipePrev");
      var newPosition;
      /** @type {number} */
      var currentPosition = Math.ceil(_this.getWrapperTranslate());
      if ("auto" === params.slidesPerView) {
        /** @type {number} */
        newPosition = 0;
        /** @type {number} */
        var i = 1;
        for (;i < _this.snapGrid.length;i++) {
          if (-currentPosition === _this.snapGrid[i]) {
            /** @type {number} */
            newPosition = -_this.snapGrid[i - 1];
            break;
          }
          if (-currentPosition > _this.snapGrid[i] && -currentPosition < _this.snapGrid[i + 1]) {
            /** @type {number} */
            newPosition = -_this.snapGrid[i];
            break;
          }
        }
      } else {
        /** @type {number} */
        var groupSize = slideSize * params.slidesPerGroup;
        /** @type {number} */
        newPosition = -(Math.ceil(-currentPosition / groupSize) - 1) * groupSize;
      }
      return newPosition > 0 && (newPosition = 0), newPosition === currentPosition ? false : (swipeToPosition(newPosition, "prev", {
        runCallbacks : dataAndEvents
      }), true);
    };
    /**
     * @param {boolean} runCallbacks
     * @return {?}
     */
    _this.swipeReset = function(runCallbacks) {
      if ("undefined" == typeof runCallbacks) {
        /** @type {boolean} */
        runCallbacks = true;
      }
      _this.callPlugins("onSwipeReset");
      var newPosition;
      var currentPosition = _this.getWrapperTranslate();
      /** @type {number} */
      var groupSize = slideSize * params.slidesPerGroup;
      -maxWrapperPosition();
      if ("auto" === params.slidesPerView) {
        /** @type {number} */
        newPosition = 0;
        /** @type {number} */
        var i = 0;
        for (;i < _this.snapGrid.length;i++) {
          if (-currentPosition === _this.snapGrid[i]) {
            return;
          }
          if (-currentPosition >= _this.snapGrid[i] && -currentPosition < _this.snapGrid[i + 1]) {
            /** @type {number} */
            newPosition = _this.positions.diff > 0 ? -_this.snapGrid[i + 1] : -_this.snapGrid[i];
            break;
          }
        }
        if (-currentPosition >= _this.snapGrid[_this.snapGrid.length - 1]) {
          /** @type {number} */
          newPosition = -_this.snapGrid[_this.snapGrid.length - 1];
        }
        if (currentPosition <= -maxWrapperPosition()) {
          /** @type {number} */
          newPosition = -maxWrapperPosition();
        }
      } else {
        /** @type {number} */
        newPosition = 0 > currentPosition ? Math.round(currentPosition / groupSize) * groupSize : 0;
        if (currentPosition <= -maxWrapperPosition()) {
          /** @type {number} */
          newPosition = -maxWrapperPosition();
        }
      }
      return params.scrollContainer && (newPosition = 0 > currentPosition ? currentPosition : 0), newPosition < -maxWrapperPosition() && (newPosition = -maxWrapperPosition()), params.scrollContainer && (containerSize > slideSize && (newPosition = 0)), newPosition === currentPosition ? false : (swipeToPosition(newPosition, "reset", {
        runCallbacks : runCallbacks
      }), true);
    };
    /**
     * @param {number} index
     * @param {number} recurring
     * @param {boolean} mayParseLabeledStatementInstead
     * @return {?}
     */
    _this.swipeTo = function(index, recurring, mayParseLabeledStatementInstead) {
      /** @type {number} */
      index = parseInt(index, 10);
      _this.callPlugins("onSwipeTo", {
        index : index,
        speed : recurring
      });
      if (params.loop) {
        index += _this.loopedSlides;
      }
      var radio = _this.getWrapperTranslate();
      if (!(!isFinite(index) || (index > _this.slides.length - 1 || 0 > index))) {
        var value;
        return value = "auto" === params.slidesPerView ? -_this.slidesGrid[index] : -index * slideSize, value < -maxWrapperPosition() && (value = -maxWrapperPosition()), value === radio ? false : ("undefined" == typeof mayParseLabeledStatementInstead && (mayParseLabeledStatementInstead = true), swipeToPosition(value, "to", {
          index : index,
          speed : recurring,
          runCallbacks : mayParseLabeledStatementInstead
        }), true);
      }
    };
    /** @type {boolean} */
    _this._queueStartCallbacks = false;
    /** @type {boolean} */
    _this._queueEndCallbacks = false;
    /**
     * @param {number} position
     * @return {undefined}
     */
    _this.updateActiveSlide = function(position) {
      if (_this.initialized && 0 !== _this.slides.length) {
        _this.previousIndex = _this.activeIndex;
        if ("undefined" == typeof position) {
          position = _this.getWrapperTranslate();
        }
        if (position > 0) {
          /** @type {number} */
          position = 0;
        }
        var i;
        if ("auto" === params.slidesPerView) {
          if (_this.activeIndex = _this.slidesGrid.indexOf(-position), _this.activeIndex < 0) {
            /** @type {number} */
            i = 0;
            for (;i < _this.slidesGrid.length - 1 && !(-position > _this.slidesGrid[i] && -position < _this.slidesGrid[i + 1]);i++) {
            }
            /** @type {number} */
            var yDelta = Math.abs(_this.slidesGrid[i] + position);
            /** @type {number} */
            var xDelta = Math.abs(_this.slidesGrid[i + 1] + position);
            if (xDelta >= yDelta) {
              /** @type {number} */
              _this.activeIndex = i;
            } else {
              /** @type {number} */
              _this.activeIndex = i + 1;
            }
          }
        } else {
          _this.activeIndex = Math[params.visibilityFullFit ? "ceil" : "round"](-position / slideSize);
        }
        if (_this.activeIndex === _this.slides.length && (_this.activeIndex = _this.slides.length - 1), _this.activeIndex < 0 && (_this.activeIndex = 0), _this.slides[_this.activeIndex]) {
          if (_this.calcVisibleSlides(position), _this.support.classList) {
            var label;
            /** @type {number} */
            i = 0;
            for (;i < _this.slides.length;i++) {
              label = _this.slides[i];
              label.classList.remove(params.slideActiveClass);
              if (_this.visibleSlides.indexOf(label) >= 0) {
                label.classList.add(params.slideVisibleClass);
              } else {
                label.classList.remove(params.slideVisibleClass);
              }
            }
            _this.slides[_this.activeIndex].classList.add(params.slideActiveClass);
          } else {
            /** @type {RegExp} */
            var rclass = new RegExp("\\s*" + params.slideActiveClass);
            /** @type {RegExp} */
            var inViewClassRegexp = new RegExp("\\s*" + params.slideVisibleClass);
            /** @type {number} */
            i = 0;
            for (;i < _this.slides.length;i++) {
              _this.slides[i].className = _this.slides[i].className.replace(rclass, "").replace(inViewClassRegexp, "");
              if (_this.visibleSlides.indexOf(_this.slides[i]) >= 0) {
                _this.slides[i].className += " " + params.slideVisibleClass;
              }
            }
            _this.slides[_this.activeIndex].className += " " + params.slideActiveClass;
          }
          if (params.loop) {
            var ls = _this.loopedSlides;
            /** @type {number} */
            _this.activeLoopIndex = _this.activeIndex - ls;
            if (_this.activeLoopIndex >= _this.slides.length - 2 * ls) {
              /** @type {number} */
              _this.activeLoopIndex = _this.slides.length - 2 * ls - _this.activeLoopIndex;
            }
            if (_this.activeLoopIndex < 0) {
              /** @type {number} */
              _this.activeLoopIndex = _this.slides.length - 2 * ls + _this.activeLoopIndex;
            }
            if (_this.activeLoopIndex < 0) {
              /** @type {number} */
              _this.activeLoopIndex = 0;
            }
          } else {
            _this.activeLoopIndex = _this.activeIndex;
          }
          if (params.pagination) {
            _this.updatePagination(position);
          }
        }
      }
    };
    /**
     * @param {boolean} dataAndEvents
     * @return {undefined}
     */
    _this.createPagination = function(dataAndEvents) {
      if (params.paginationClickable && (_this.paginationButtons && removePaginationEvents()), _this.paginationContainer = params.pagination.nodeType ? params.pagination : $$(params.pagination)[0], params.createPagination) {
        /** @type {string} */
        var urlConfigHtml = "";
        var cnl = _this.slides.length;
        var a = cnl;
        if (params.loop) {
          a -= 2 * _this.loopedSlides;
        }
        /** @type {number} */
        var b = 0;
        for (;a > b;b++) {
          urlConfigHtml += "<" + params.paginationElement + ' class="' + params.paginationElementClass + '"></' + params.paginationElement + ">";
        }
        /** @type {string} */
        _this.paginationContainer.innerHTML = urlConfigHtml;
      }
      _this.paginationButtons = $$("." + params.paginationElementClass, _this.paginationContainer);
      if (!dataAndEvents) {
        _this.updatePagination();
      }
      _this.callPlugins("onCreatePagination");
      if (params.paginationClickable) {
        addPaginationEvents();
      }
    };
    /**
     * @param {number} position
     * @return {undefined}
     */
    _this.updatePagination = function(position) {
      if (params.pagination && !(_this.slides.length < 1)) {
        var activePagers = $$("." + params.paginationActiveClass, _this.paginationContainer);
        if (activePagers) {
          var pagers = _this.paginationButtons;
          if (0 !== pagers.length) {
            /** @type {number} */
            var i = 0;
            for (;i < pagers.length;i++) {
              pagers[i].className = params.paginationElementClass;
            }
            var stepBase = params.loop ? _this.loopedSlides : 0;
            if (params.paginationAsRange) {
              if (!_this.visibleSlides) {
                _this.calcVisibleSlides(position);
              }
              var x;
              /** @type {Array} */
              var proc = [];
              /** @type {number} */
              x = 0;
              for (;x < _this.visibleSlides.length;x++) {
                /** @type {number} */
                var value = _this.slides.indexOf(_this.visibleSlides[x]) - stepBase;
                if (params.loop) {
                  if (0 > value) {
                    /** @type {number} */
                    value = _this.slides.length - 2 * _this.loopedSlides + value;
                  }
                }
                if (params.loop) {
                  if (value >= _this.slides.length - 2 * _this.loopedSlides) {
                    /** @type {number} */
                    value = _this.slides.length - 2 * _this.loopedSlides - value;
                    /** @type {number} */
                    value = Math.abs(value);
                  }
                }
                proc.push(value);
              }
              /** @type {number} */
              x = 0;
              for (;x < proc.length;x++) {
                if (pagers[proc[x]]) {
                  pagers[proc[x]].className += " " + params.paginationVisibleClass;
                }
              }
              if (params.loop) {
                if (void 0 !== pagers[_this.activeLoopIndex]) {
                  pagers[_this.activeLoopIndex].className += " " + params.paginationActiveClass;
                }
              } else {
                if (pagers[_this.activeIndex]) {
                  pagers[_this.activeIndex].className += " " + params.paginationActiveClass;
                }
              }
            } else {
              if (params.loop) {
                if (pagers[_this.activeLoopIndex]) {
                  pagers[_this.activeLoopIndex].className += " " + params.paginationActiveClass + " " + params.paginationVisibleClass;
                }
              } else {
                if (pagers[_this.activeIndex]) {
                  pagers[_this.activeIndex].className += " " + params.paginationActiveClass + " " + params.paginationVisibleClass;
                }
              }
            }
          }
        }
      }
    };
    /**
     * @param {number} position
     * @return {undefined}
     */
    _this.calcVisibleSlides = function(position) {
      /** @type {Array} */
      var visibleSlides = [];
      /** @type {number} */
      var _slideLeft = 0;
      /** @type {number} */
      var _slideSize = 0;
      /** @type {number} */
      var _slideRight = 0;
      if (isH) {
        if (_this.wrapperLeft > 0) {
          position += _this.wrapperLeft;
        }
      }
      if (!isH) {
        if (_this.wrapperTop > 0) {
          position += _this.wrapperTop;
        }
      }
      /** @type {number} */
      var i = 0;
      for (;i < _this.slides.length;i++) {
        _slideLeft += _slideSize;
        _slideSize = "auto" === params.slidesPerView ? isH ? _this.h.getWidth(_this.slides[i], true, params.roundLengths) : _this.h.getHeight(_this.slides[i], true, params.roundLengths) : slideSize;
        _slideRight = _slideLeft + _slideSize;
        /** @type {boolean} */
        var h = false;
        if (params.visibilityFullFit) {
          if (_slideLeft >= -position) {
            if (-position + containerSize >= _slideRight) {
              /** @type {boolean} */
              h = true;
            }
          }
          if (-position >= _slideLeft) {
            if (_slideRight >= -position + containerSize) {
              /** @type {boolean} */
              h = true;
            }
          }
        } else {
          if (_slideRight > -position) {
            if (-position + containerSize >= _slideRight) {
              /** @type {boolean} */
              h = true;
            }
          }
          if (_slideLeft >= -position) {
            if (-position + containerSize > _slideLeft) {
              /** @type {boolean} */
              h = true;
            }
          }
          if (-position > _slideLeft) {
            if (_slideRight > -position + containerSize) {
              /** @type {boolean} */
              h = true;
            }
          }
        }
        if (h) {
          visibleSlides.push(_this.slides[i]);
        }
      }
      if (0 === visibleSlides.length) {
        /** @type {Array} */
        visibleSlides = [_this.slides[_this.activeIndex]];
      }
      /** @type {Array} */
      _this.visibleSlides = visibleSlides;
    };
    var tref;
    var scrollIntervalId;
    /**
     * @return {?}
     */
    _this.startAutoplay = function() {
      if (_this.support.transitions) {
        if ("undefined" != typeof tref) {
          return false;
        }
        if (!params.autoplay) {
          return;
        }
        _this.callPlugins("onAutoplayStart");
        if (params.onAutoplayStart) {
          _this.fireCallback(params.onAutoplayStart, _this);
        }
        playSound();
      } else {
        if ("undefined" != typeof scrollIntervalId) {
          return false;
        }
        if (!params.autoplay) {
          return;
        }
        _this.callPlugins("onAutoplayStart");
        if (params.onAutoplayStart) {
          _this.fireCallback(params.onAutoplayStart, _this);
        }
        /** @type {number} */
        scrollIntervalId = setInterval(function() {
          if (params.loop) {
            _this.fixLoop();
            _this.swipeNext(true, true);
          } else {
            if (!_this.swipeNext(true, true)) {
              if (params.autoplayStopOnLast) {
                clearInterval(scrollIntervalId);
                scrollIntervalId = void 0;
              } else {
                _this.swipeTo(0);
              }
            }
          }
        }, params.autoplay);
      }
    };
    /**
     * @param {boolean} dataAndEvents
     * @return {undefined}
     */
    _this.stopAutoplay = function(dataAndEvents) {
      if (_this.support.transitions) {
        if (!tref) {
          return;
        }
        if (tref) {
          clearTimeout(tref);
        }
        tref = void 0;
        if (dataAndEvents) {
          if (!params.autoplayDisableOnInteraction) {
            _this.wrapperTransitionEnd(function() {
              playSound();
            });
          }
        }
        _this.callPlugins("onAutoplayStop");
        if (params.onAutoplayStop) {
          _this.fireCallback(params.onAutoplayStop, _this);
        }
      } else {
        if (scrollIntervalId) {
          clearInterval(scrollIntervalId);
        }
        scrollIntervalId = void 0;
        _this.callPlugins("onAutoplayStop");
        if (params.onAutoplayStop) {
          _this.fireCallback(params.onAutoplayStop, _this);
        }
      }
    };
    /** @type {boolean} */
    _this.loopCreated = false;
    /**
     * @return {undefined}
     */
    _this.removeLoopedSlides = function() {
      if (_this.loopCreated) {
        /** @type {number} */
        var i = 0;
        for (;i < _this.slides.length;i++) {
          if (_this.slides[i].getData("looped") === true) {
            _this.wrapper.removeChild(_this.slides[i]);
          }
        }
      }
    };
    /**
     * @return {undefined}
     */
    _this.createLoop = function() {
      if (0 !== _this.slides.length) {
        if ("auto" === params.slidesPerView) {
          _this.loopedSlides = params.loopedSlides || 1;
        } else {
          _this.loopedSlides = Math.floor(params.slidesPerView) + params.loopAdditionalSlides;
        }
        if (_this.loopedSlides > _this.slides.length) {
          _this.loopedSlides = _this.slides.length;
        }
        var i;
        /** @type {string} */
        var slideFirstHTML = "";
        /** @type {string} */
        var slideLastHTML = "";
        /** @type {string} */
        var slidesSetFullHTML = "";
        var numSlides = _this.slides.length;
        /** @type {number} */
        var fullSlideSets = Math.floor(_this.loopedSlides / numSlides);
        /** @type {number} */
        var remainderSlides = _this.loopedSlides % numSlides;
        /** @type {number} */
        i = 0;
        for (;fullSlideSets * numSlides > i;i++) {
          /** @type {number} */
          var j = i;
          if (i >= numSlides) {
            /** @type {number} */
            var over = Math.floor(i / numSlides);
            /** @type {number} */
            j = i - numSlides * over;
          }
          slidesSetFullHTML += _this.slides[j].outerHTML;
        }
        /** @type {number} */
        i = 0;
        for (;remainderSlides > i;i++) {
          slideLastHTML += load(params.slideDuplicateClass, _this.slides[i].outerHTML);
        }
        /** @type {number} */
        i = numSlides - remainderSlides;
        for (;numSlides > i;i++) {
          slideFirstHTML += load(params.slideDuplicateClass, _this.slides[i].outerHTML);
        }
        /** @type {string} */
        var slides = slideFirstHTML + slidesSetFullHTML + wrapper.innerHTML + slidesSetFullHTML + slideLastHTML;
        /** @type {string} */
        wrapper.innerHTML = slides;
        /** @type {boolean} */
        _this.loopCreated = true;
        _this.calcSlides();
        /** @type {number} */
        i = 0;
        for (;i < _this.slides.length;i++) {
          if (i < _this.loopedSlides || i >= _this.slides.length - _this.loopedSlides) {
            _this.slides[i].setData("looped", true);
          }
        }
        _this.callPlugins("onCreateLoop");
      }
    };
    /**
     * @return {undefined}
     */
    _this.fixLoop = function() {
      var newIndex;
      if (_this.activeIndex < _this.loopedSlides) {
        newIndex = _this.slides.length - 3 * _this.loopedSlides + _this.activeIndex;
        _this.swipeTo(newIndex, 0, false);
      } else {
        if ("auto" === params.slidesPerView && _this.activeIndex >= 2 * _this.loopedSlides || _this.activeIndex > _this.slides.length - 2 * params.slidesPerView) {
          newIndex = -_this.slides.length + _this.activeIndex + _this.loopedSlides;
          _this.swipeTo(newIndex, 0, false);
        }
      }
    };
    /**
     * @return {undefined}
     */
    _this.loadSlides = function() {
      /** @type {string} */
      var urlConfigHtml = "";
      /** @type {number} */
      _this.activeLoaderIndex = 0;
      var slides = params.loader.slides;
      var ms = params.loader.loadAllSlides ? slides.length : params.slidesPerView * (1 + params.loader.surroundGroups);
      /** @type {number} */
      var s = 0;
      for (;ms > s;s++) {
        urlConfigHtml += "outer" === params.loader.slidesHTMLType ? slides[s] : "<" + params.slideElement + ' class="' + params.slideClass + '" data-swiperindex="' + s + '">' + slides[s] + "</" + params.slideElement + ">";
      }
      _this.wrapper.innerHTML = urlConfigHtml;
      _this.calcSlides(true);
      if (!params.loader.loadAllSlides) {
        _this.wrapperTransitionEnd(_this.reloadSlides, true);
      }
    };
    /**
     * @return {undefined}
     */
    _this.reloadSlides = function() {
      var slides = params.loader.slides;
      /** @type {number} */
      var newActiveIndex = parseInt(_this.activeSlide().data("swiperindex"), 10);
      if (!(0 > newActiveIndex || newActiveIndex > slides.length - 1)) {
        /** @type {number} */
        _this.activeLoaderIndex = newActiveIndex;
        /** @type {number} */
        var x = Math.max(0, newActiveIndex - params.slidesPerView * params.loader.surroundGroups);
        /** @type {number} */
        var yMax = Math.min(newActiveIndex + params.slidesPerView * (1 + params.loader.surroundGroups) - 1, slides.length - 1);
        if (newActiveIndex > 0) {
          /** @type {number} */
          var newTransform = -slideSize * (newActiveIndex - x);
          _this.setWrapperTranslate(newTransform);
          _this.setWrapperTransition(0);
        }
        var i;
        if ("reload" === params.loader.logic) {
          /** @type {string} */
          _this.wrapper.innerHTML = "";
          /** @type {string} */
          var urlConfigHtml = "";
          /** @type {number} */
          i = x;
          for (;yMax >= i;i++) {
            urlConfigHtml += "outer" === params.loader.slidesHTMLType ? slides[i] : "<" + params.slideElement + ' class="' + params.slideClass + '" data-swiperindex="' + i + '">' + slides[i] + "</" + params.slideElement + ">";
          }
          _this.wrapper.innerHTML = urlConfigHtml;
        } else {
          /** @type {number} */
          var offsetY = 1E3;
          /** @type {number} */
          var maxExistIndex = 0;
          /** @type {number} */
          i = 0;
          for (;i < _this.slides.length;i++) {
            var y = _this.slides[i].data("swiperindex");
            if (x > y || y > yMax) {
              _this.wrapper.removeChild(_this.slides[i]);
            } else {
              /** @type {number} */
              offsetY = Math.min(y, offsetY);
              /** @type {number} */
              maxExistIndex = Math.max(y, maxExistIndex);
            }
          }
          /** @type {number} */
          i = x;
          for (;yMax >= i;i++) {
            var newSlide;
            if (offsetY > i) {
              /** @type {Element} */
              newSlide = document.createElement(params.slideElement);
              newSlide.className = params.slideClass;
              newSlide.setAttribute("data-swiperindex", i);
              newSlide.innerHTML = slides[i];
              _this.wrapper.insertBefore(newSlide, _this.wrapper.firstChild);
            }
            if (i > maxExistIndex) {
              /** @type {Element} */
              newSlide = document.createElement(params.slideElement);
              newSlide.className = params.slideClass;
              newSlide.setAttribute("data-swiperindex", i);
              newSlide.innerHTML = slides[i];
              _this.wrapper.appendChild(newSlide);
            }
          }
        }
        _this.reInit(true);
      }
    };
    makeSwiper();
  }
};
Swiper.prototype = {
  plugins : {},
  /**
   * @param {Function} callback
   * @param {boolean} dataAndEvents
   * @return {undefined}
   */
  wrapperTransitionEnd : function(callback, dataAndEvents) {
    /**
     * @param {Event} ev
     * @return {undefined}
     */
    function fireCallBack(ev) {
      if (ev.target === el && (callback(a), a.params.queueEndCallbacks && (a._queueEndCallbacks = false), !dataAndEvents)) {
        /** @type {number} */
        i = 0;
        for (;i < events.length;i++) {
          a.h.removeEventListener(el, events[i], fireCallBack);
        }
      }
    }
    var i;
    var a = this;
    var el = a.wrapper;
    /** @type {Array} */
    var events = ["webkitTransitionEnd", "transitionend", "oTransitionEnd", "MSTransitionEnd", "msTransitionEnd"];
    if (callback) {
      /** @type {number} */
      i = 0;
      for (;i < events.length;i++) {
        a.h.addEventListener(el, events[i], fireCallBack);
      }
    }
  },
  /**
   * @param {string} y
   * @return {?}
   */
  getWrapperTranslate : function(y) {
    var components;
    var x;
    var curStyle;
    var transformMatrix;
    var el = this.wrapper;
    return "undefined" == typeof y && (y = "horizontal" === this.params.mode ? "x" : "y"), this.support.transforms && this.params.useCSS3Transforms ? (curStyle = window.getComputedStyle(el, null), window.WebKitCSSMatrix ? transformMatrix = new WebKitCSSMatrix("none" === curStyle.webkitTransform ? "" : curStyle.webkitTransform) : (transformMatrix = curStyle.MozTransform || (curStyle.OTransform || (curStyle.MsTransform || (curStyle.msTransform || (curStyle.transform || curStyle.getPropertyValue("transform").replace("translate(", 
    "matrix(1, 0, 0, 1,"))))), components = transformMatrix.toString().split(",")), "x" === y && (x = window.WebKitCSSMatrix ? transformMatrix.m41 : 16 === components.length ? parseFloat(components[12]) : parseFloat(components[4])), "y" === y && (x = window.WebKitCSSMatrix ? transformMatrix.m42 : 16 === components.length ? parseFloat(components[13]) : parseFloat(components[5]))) : ("x" === y && (x = parseFloat(el.style.left, 10) || 0), "y" === y && (x = parseFloat(el.style.top, 10) || 0)), x || 0;
  },
  /**
   * @param {number} x
   * @param {(Function|string)} y
   * @param {number} z
   * @return {undefined}
   */
  setWrapperTranslate : function(x, y, z) {
    var transformString;
    var es = this.wrapper.style;
    var coords = {
      x : 0,
      y : 0,
      z : 0
    };
    if (3 === arguments.length) {
      /** @type {number} */
      coords.x = x;
      /** @type {(Function|string)} */
      coords.y = y;
      /** @type {number} */
      coords.z = z;
    } else {
      if ("undefined" == typeof y) {
        /** @type {string} */
        y = "horizontal" === this.params.mode ? "x" : "y";
      }
      /** @type {number} */
      coords[y] = x;
    }
    if (this.support.transforms && this.params.useCSS3Transforms) {
      /** @type {string} */
      transformString = this.support.transforms3d ? "translate3d(" + coords.x + "px, " + coords.y + "px, " + coords.z + "px)" : "translate(" + coords.x + "px, " + coords.y + "px)";
      /** @type {string} */
      es.webkitTransform = es.MsTransform = es.msTransform = es.MozTransform = es.OTransform = es.transform = transformString;
    } else {
      /** @type {string} */
      es.left = coords.x + "px";
      /** @type {string} */
      es.top = coords.y + "px";
    }
    this.callPlugins("onSetWrapperTransform", coords);
    if (this.params.onSetWrapperTransform) {
      this.fireCallback(this.params.onSetWrapperTransform, this, coords);
    }
  },
  /**
   * @param {number} duration
   * @return {undefined}
   */
  setWrapperTransition : function(duration) {
    var es = this.wrapper.style;
    /** @type {string} */
    es.webkitTransitionDuration = es.MsTransitionDuration = es.msTransitionDuration = es.MozTransitionDuration = es.OTransitionDuration = es.transitionDuration = duration / 1E3 + "s";
    this.callPlugins("onSetWrapperTransition", {
      duration : duration
    });
    if (this.params.onSetWrapperTransition) {
      this.fireCallback(this.params.onSetWrapperTransition, this, duration);
    }
  },
  h : {
    /**
     * @param {boolean} el
     * @param {boolean} deepDataAndEvents
     * @param {boolean} recurring
     * @return {?}
     */
    getWidth : function(el, deepDataAndEvents, recurring) {
      /** @type {string} */
      var w = window.getComputedStyle(el, null).getPropertyValue("width");
      /** @type {number} */
      var value = parseFloat(w);
      return(isNaN(value) || (w.indexOf("%") > 0 || 0 > value)) && (value = el.offsetWidth - parseFloat(window.getComputedStyle(el, null).getPropertyValue("padding-left")) - parseFloat(window.getComputedStyle(el, null).getPropertyValue("padding-right"))), deepDataAndEvents && (value += parseFloat(window.getComputedStyle(el, null).getPropertyValue("padding-left")) + parseFloat(window.getComputedStyle(el, null).getPropertyValue("padding-right"))), recurring ? Math.ceil(value) : value;
    },
    /**
     * @param {boolean} deepDataAndEvents
     * @param {boolean} recurring
     * @param {boolean} asNumber
     * @return {?}
     */
    getHeight : function(deepDataAndEvents, recurring, asNumber) {
      if (recurring) {
        return deepDataAndEvents.offsetHeight;
      }
      /** @type {string} */
      var h = window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("height");
      /** @type {number} */
      var value = parseFloat(h);
      return(isNaN(value) || (h.indexOf("%") > 0 || 0 > value)) && (value = deepDataAndEvents.offsetHeight - parseFloat(window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("padding-top")) - parseFloat(window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("padding-bottom"))), recurring && (value += parseFloat(window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("padding-top")) + parseFloat(window.getComputedStyle(deepDataAndEvents, null).getPropertyValue("padding-bottom"))), 
      asNumber ? Math.ceil(value) : value;
    },
    /**
     * @param {HTMLElement} el
     * @return {?}
     */
    getOffset : function(el) {
      var box = el.getBoundingClientRect();
      /** @type {(HTMLElement|null)} */
      var body = document.body;
      var clientTop = el.clientTop || (body.clientTop || 0);
      var clientLeft = el.clientLeft || (body.clientLeft || 0);
      var scrollTop = window.pageYOffset || el.scrollTop;
      var scrollLeft = window.pageXOffset || el.scrollLeft;
      return document.documentElement && (!window.pageYOffset && (scrollTop = document.documentElement.scrollTop, scrollLeft = document.documentElement.scrollLeft)), {
        top : box.top + scrollTop - clientTop,
        left : box.left + scrollLeft - clientLeft
      };
    },
    /**
     * @return {?}
     */
    windowWidth : function() {
      return window.innerWidth ? window.innerWidth : document.documentElement && document.documentElement.clientWidth ? document.documentElement.clientWidth : void 0;
    },
    /**
     * @return {?}
     */
    windowHeight : function() {
      return window.innerHeight ? window.innerHeight : document.documentElement && document.documentElement.clientHeight ? document.documentElement.clientHeight : void 0;
    },
    /**
     * @return {?}
     */
    windowScroll : function() {
      return "undefined" != typeof pageYOffset ? {
        left : window.pageXOffset,
        top : window.pageYOffset
      } : document.documentElement ? {
        left : document.documentElement.scrollLeft,
        top : document.documentElement.scrollTop
      } : void 0;
    },
    /**
     * @param {string} elem
     * @param {string} event
     * @param {Object} pdataOld
     * @param {boolean} recurring
     * @return {undefined}
     */
    addEventListener : function(elem, event, pdataOld, recurring) {
      if ("undefined" == typeof recurring) {
        /** @type {boolean} */
        recurring = false;
      }
      if (elem.addEventListener) {
        elem.addEventListener(event, pdataOld, recurring);
      } else {
        if (elem.attachEvent) {
          elem.attachEvent("on" + event, pdataOld);
        }
      }
    },
    /**
     * @param {string} elem
     * @param {string} type
     * @param {boolean} listener
     * @param {boolean} useCapture
     * @return {undefined}
     */
    removeEventListener : function(elem, type, listener, useCapture) {
      if ("undefined" == typeof useCapture) {
        /** @type {boolean} */
        useCapture = false;
      }
      if (elem.removeEventListener) {
        elem.removeEventListener(type, listener, useCapture);
      } else {
        if (elem.detachEvent) {
          elem.detachEvent("on" + type, listener);
        }
      }
    }
  },
  /**
   * @param {Element} el
   * @param {?} transform
   * @return {undefined}
   */
  setTransform : function(el, transform) {
    var es = el.style;
    es.webkitTransform = es.MsTransform = es.msTransform = es.MozTransform = es.OTransform = es.transform = transform;
  },
  /**
   * @param {Element} el
   * @param {?} translate
   * @return {undefined}
   */
  setTranslate : function(el, translate) {
    var es = el.style;
    var pos = {
      x : translate.x || 0,
      y : translate.y || 0,
      z : translate.z || 0
    };
    /** @type {string} */
    var transformString = this.support.transforms3d ? "translate3d(" + pos.x + "px," + pos.y + "px," + pos.z + "px)" : "translate(" + pos.x + "px," + pos.y + "px)";
    /** @type {string} */
    es.webkitTransform = es.MsTransform = es.msTransform = es.MozTransform = es.OTransform = es.transform = transformString;
    if (!this.support.transforms) {
      /** @type {string} */
      es.left = pos.x + "px";
      /** @type {string} */
      es.top = pos.y + "px";
    }
  },
  /**
   * @param {Element} el
   * @param {number} duration
   * @return {undefined}
   */
  setTransition : function(el, duration) {
    var es = el.style;
    /** @type {string} */
    es.webkitTransitionDuration = es.MsTransitionDuration = es.msTransitionDuration = es.MozTransitionDuration = es.OTransitionDuration = es.transitionDuration = duration + "ms";
  },
  support : {
    touch : window.Modernizr && Modernizr.touch === true || function() {
      return!!("ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch);
    }(),
    transforms3d : window.Modernizr && Modernizr.csstransforms3d === true || function() {
      /** @type {(CSSStyleDeclaration|null)} */
      var div = document.createElement("div").style;
      return "webkitPerspective" in div || ("MozPerspective" in div || ("OPerspective" in div || ("MsPerspective" in div || "perspective" in div)));
    }(),
    transforms : window.Modernizr && Modernizr.csstransforms === true || function() {
      /** @type {(CSSStyleDeclaration|null)} */
      var div = document.createElement("div").style;
      return "transform" in div || ("WebkitTransform" in div || ("MozTransform" in div || ("msTransform" in div || ("MsTransform" in div || "OTransform" in div))));
    }(),
    transitions : window.Modernizr && Modernizr.csstransitions === true || function() {
      /** @type {(CSSStyleDeclaration|null)} */
      var div = document.createElement("div").style;
      return "transition" in div || ("WebkitTransition" in div || ("MozTransition" in div || ("msTransition" in div || ("MsTransition" in div || "OTransition" in div))));
    }(),
    classList : function() {
      /** @type {Element} */
      var div = document.createElement("div");
      return "classList" in div;
    }()
  },
  browser : {
    ie8 : function() {
      /** @type {number} */
      var q = -1;
      if ("Microsoft Internet Explorer" === navigator.appName) {
        /** @type {string} */
        var ua = navigator.userAgent;
        /** @type {RegExp} */
        var re = new RegExp(/MSIE ([0-9]{1,}[\.0-9]{0,})/);
        if (null !== re.exec(ua)) {
          /** @type {number} */
          q = parseFloat(RegExp.$1);
        }
      }
      return-1 !== q && 9 > q;
    }(),
    ie10 : window.navigator.msPointerEnabled,
    ie11 : window.navigator.pointerEnabled
  }
}, (window.jQuery || window.Zepto) && !function($) {
  /**
   * @param {EventTarget} params
   * @return {?}
   */
  $.fn.swiper = function(params) {
    var c;
    return this.each(function(dataAndEvents) {
      var $spy = $(this);
      var pdataOld = new Swiper($spy[0], params);
      if (!dataAndEvents) {
        c = pdataOld;
      }
      $spy.data("swiper", pdataOld);
    }), c;
  };
}(window.jQuery || window.Zepto), "undefined" != typeof module ? module.exports = Swiper : "function" == typeof define && (define.amd && define([], function() {
  return Swiper;
})), function() {
  /**
   * @param {Object} object
   * @param {string} filename
   * @return {?}
   */
  function map(object, filename) {
    return object.href = filename;
  }
  /**
   * @param {number} check
   * @return {undefined}
   */
  function call(check) {
    self.set(check);
  }
  /**
   * @param {Object} obj
   * @return {undefined}
   */
  function after(obj) {
    if (100 != obj.get(optgroup) && $(equal(obj, match)) % 1E4 >= 100 * has(obj, optgroup)) {
      throw "abort";
    }
  }
  /**
   * @param {Object} walkers
   * @return {undefined}
   */
  function unpause(walkers) {
    if (containsMatch(equal(walkers, vvarText))) {
      throw "abort";
    }
  }
  /**
   * @return {undefined}
   */
  function now() {
    var method = doc[str_location][property];
    if ("http:" != method && "https:" != method) {
      throw "abort";
    }
  }
  /**
   * @param {Object} obj
   * @return {undefined}
   */
  function init(obj) {
    try {
      if (global[i][action]) {
        call(42);
      } else {
        if (global.XMLHttpRequest) {
          if ("withCredentials" in new global.XMLHttpRequest) {
            call(40);
          }
        }
      }
    } catch (c) {
    }
    obj.set(ol, remove(obj), true);
    obj.set(dest, has(obj, dest) + 1);
    /** @type {Array} */
    var target = [];
    data_priv.map(function(optgroup, fn) {
      if (fn.F) {
        var val = obj.get(optgroup);
        if (void 0 != val) {
          if (val != fn[context]) {
            if ("boolean" == typeof val) {
              val *= 1;
            }
            target[method](fn.F + "=" + cb("" + val));
          }
        }
      }
    });
    target[method]("z=" + split());
    obj.set(selector, target[level]("&"), true);
  }
  /**
   * @param {Object} e
   * @return {undefined}
   */
  function load(e) {
    var url = equal(e, c) || apply() + "/collect";
    var coord = equal(e, removed);
    if (!coord && (e.get(modId) && (coord = "beacon")), coord) {
      var callback = equal(e, selector);
      var camelKey = e.get(key);
      camelKey = camelKey || pdataCur;
      if ("image" == coord) {
        indexOf(url, callback, camelKey);
      } else {
        if (!("xhr" == coord && request(url, callback, camelKey))) {
          if (!("beacon" == coord && ajax(url, callback, camelKey))) {
            _request(url, callback, camelKey);
          }
        }
      }
    } else {
      _request(url, equal(e, selector), e.get(key));
    }
    e.set(key, pdataCur, true);
  }
  /**
   * @param {(Node|string)} n
   * @return {undefined}
   */
  function attr(n) {
    var o = global.gaData;
    if (o) {
      if (o.expId) {
        n.set(fn, o.expId);
      }
      if (o.expVar) {
        n.set(src, o.expVar);
      }
    }
  }
  /**
   * @return {undefined}
   */
  function restoreScript() {
    if (global[i] && "preview" == global[i].loadPurpose) {
      throw "abort";
    }
  }
  /**
   * @param {(Node|string)} img
   * @return {undefined}
   */
  function which(img) {
    var actual = global.gaDevIds;
    if (isObject(actual)) {
      if (0 != actual[index]) {
        img.set("&did", actual[level](","), true);
      }
    }
  }
  /**
   * @param {Node} jar
   * @return {undefined}
   */
  function install(jar) {
    if (!jar.get(vvarText)) {
      throw "abort";
    }
  }
  /**
   * @param {Object} element
   * @return {undefined}
   */
  function set(element) {
    var binding = has(element, filter);
    if (binding >= 500) {
      call(15);
    }
    var start = equal(element, rvar);
    if ("transaction" != start && "item" != start) {
      start = has(element, existingFn);
      var pdataCur = (new Date)[unlock]();
      var index = has(element, later);
      if (0 == index && element.set(later, pdataCur), index = math.round(2 * (pdataCur - index) / 1E3), index > 0 && (start = math.min(start + index, 20), element.set(later, pdataCur)), 0 >= start) {
        throw "abort";
      }
      element.set(existingFn, --start);
    }
    element.set(filter, ++binding);
  }
  /**
   * @param {string} name
   * @param {Object} actual
   * @param {Function} c
   * @param {number} opt_attributes
   * @return {undefined}
   */
  function expect(name, actual, c, opt_attributes) {
    /**
     * @return {?}
     */
    actual[name] = function() {
      try {
        return opt_attributes && call(opt_attributes), c[eventName](this, arguments);
      } catch (cache) {
        throw transform("exc", name, cache && cache[k]), cache;
      }
    };
  }
  /**
   * @return {?}
   */
  function getFlashVersion() {
    var axo;
    var v;
    var o;
    if ((o = (o = global[i]) ? o.plugins : null) && o[index]) {
      /** @type {number} */
      var m = 0;
      for (;m < o[index] && !v;m++) {
        var s = o[m];
        if (-1 < s[k][mod]("Shockwave Flash")) {
          v = s.description;
        }
      }
    }
    if (!v) {
      try {
        axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");
        v = axo.GetVariable("$version");
      } catch (f) {
      }
    }
    if (!v) {
      try {
        axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");
        /** @type {string} */
        v = "WIN 6,0,21,0";
        /** @type {string} */
        axo.AllowScriptAccess = "always";
        v = axo.GetVariable("$version");
      } catch (g) {
      }
    }
    if (!v) {
      try {
        axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
        v = axo.GetVariable("$version");
      } catch (h) {
      }
    }
    return v && ((axo = v[rp](/[\d]+/g)) && (3 <= axo[index] && (v = axo[0] + "." + axo[1] + " r" + axo[2]))), v || void 0;
  }
  /**
   * @param {Object} source
   * @param {(Function|string)} val
   * @param {Error} value
   * @return {?}
   */
  function update(source, val, value) {
    if ("none" == val) {
      /** @type {string} */
      val = "";
    }
    /** @type {Array} */
    var routes = [];
    var keys = write(source);
    /** @type {number} */
    source = "__utma" == source ? 6 : 2;
    /** @type {number} */
    var key = 0;
    for (;key < keys[index];key++) {
      var viewItems = ("" + keys[key])[prop](".");
      if (viewItems[index] >= source) {
        routes[method]({
          hash : viewItems[0],
          R : keys[key],
          O : viewItems
        });
      }
    }
    return 0 == routes[index] ? void 0 : 1 == routes[index] ? routes[0] : last(val, routes) || (last(value, routes) || (last(null, routes) || routes[0]));
  }
  /**
   * @param {Object} arg
   * @param {Object} obj
   * @return {?}
   */
  function last(arg, obj) {
    var result;
    var container;
    if (null == arg) {
      /** @type {number} */
      result = container = 1;
    } else {
      result = $(arg);
      container = $(next(arg, ".") ? arg[field](1) : "." + arg);
    }
    /** @type {number} */
    var i = 0;
    for (;i < obj[index];i++) {
      if (obj[i][type] == result || obj[i][type] == container) {
        return obj[i];
      }
    }
  }
  /**
   * @param {Object} value
   * @return {?}
   */
  function draw(value) {
    value = value.get(match);
    var key = getDate(value, 0);
    return "_ga=1." + cb(key + "." + value);
  }
  /**
   * @param {Object} data
   * @param {number} outstandingDataSize
   * @return {?}
   */
  function getDate(data, outstandingDataSize) {
    /** @type {Date} */
    var value = new Date;
    var config = global[i];
    var templates = config.plugins || [];
    /** @type {Array} */
    value = [data, config.userAgent, value.getTimezoneOffset(), value.getYear(), value.getDate(), value.getHours(), value.getMinutes() + outstandingDataSize];
    /** @type {number} */
    config = 0;
    for (;config < templates[index];++config) {
      value[method](templates[config].description);
    }
    return $(value[level]("."));
  }
  /**
   * @param {Object} obj
   * @param {Object} e
   * @return {?}
   */
  function invoke(obj, e) {
    if (e == doc[str_location][n]) {
      return false;
    }
    /** @type {number} */
    var i = 0;
    for (;i < obj[index];i++) {
      if (obj[i] instanceof RegExp) {
        if (obj[i][event](e)) {
          return true;
        }
      } else {
        if (0 <= e[mod](obj[i])) {
          return true;
        }
      }
    }
    return false;
  }
  /**
   * @param {Object} event
   * @return {?}
   */
  function fix(event) {
    return 0 <= event[mod](".") || 0 <= event[mod](":");
  }
  /**
   * @param {Object} args
   * @return {?}
   */
  function $(args) {
    var offset;
    /** @type {number} */
    var match = 1;
    /** @type {number} */
    var chunk = 0;
    if (args) {
      /** @type {number} */
      match = 0;
      /** @type {number} */
      offset = args[index] - 1;
      for (;offset >= 0;offset--) {
        chunk = args.charCodeAt(offset);
        match = (match << 6 & 268435455) + chunk + (chunk << 14);
        /** @type {number} */
        chunk = 266338304 & match;
        match = 0 != chunk ? match ^ chunk >> 21 : match;
      }
    }
    return match;
  }
  var math = Math;
  /** @type {Window} */
  var err = window;
  /** @type {function (string): string} */
  var success = encodeURIComponent;
  /** @type {string} */
  var rp = "match";
  /** @type {string} */
  var y = "href";
  /** @type {string} */
  var action = "sendBeacon";
  /** @type {string} */
  var prop = "split";
  /** @type {string} */
  var level = "join";
  /** @type {string} */
  var x = "slice";
  /** @type {string} */
  var targetS = "target";
  /** @type {string} */
  var k = "name";
  /** @type {string} */
  var CALL = "call";
  /** @type {string} */
  var s = "clientHeight";
  /** @type {string} */
  var idx = "prototype";
  /** @type {string} */
  var option = "port";
  /** @type {string} */
  var mod = "indexOf";
  /** @type {string} */
  var methodName = "action";
  /** @type {string} */
  var replace = "replace";
  /** @type {string} */
  var context = "defaultValue";
  /** @type {string} */
  var n = "hostname";
  /** @type {string} */
  var field = "substring";
  /** @type {string} */
  var p = "data";
  /** @type {string} */
  var method = "push";
  /** @type {string} */
  var str_location = "location";
  /** @type {string} */
  var part = "search";
  /** @type {string} */
  var property = "protocol";
  /** @type {string} */
  var key2 = "hasOwnProperty";
  /** @type {string} */
  var eventName = "apply";
  /** @type {string} */
  var i = "navigator";
  /** @type {string} */
  var o = "clientWidth";
  /** @type {string} */
  var id = "cookie";
  /** @type {string} */
  var index = "length";
  /** @type {string} */
  var event = "test";
  /** @type {string} */
  var j = "toLowerCase";
  /** @type {string} */
  var type = "hash";
  /** @type {string} */
  var messageId = "setAttribute";
  /** @type {string} */
  var unlock = "getTime";
  /** @type {string} */
  var byTag = "createElement";
  /**
   * @param {Array} w
   * @return {undefined}
   */
  var Buffer = function(w) {
    this.w = w || [];
  };
  /**
   * @param {?} elem
   * @return {undefined}
   */
  Buffer[idx].set = function(elem) {
    /** @type {boolean} */
    this.w[elem] = true;
  };
  /**
   * @return {?}
   */
  Buffer[idx].encode = function() {
    /** @type {Array} */
    var current = [];
    /** @type {number} */
    var i = 0;
    for (;i < this.w[index];i++) {
      if (this.w[i]) {
        /** @type {number} */
        current[math.floor(i / 6)] = current[math.floor(i / 6)] ^ 1 << i % 6;
      }
    }
    /** @type {number} */
    i = 0;
    for (;i < current[index];i++) {
      /** @type {string} */
      current[i] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".charAt(current[i] || 0);
    }
    return current[level]("") + "~";
  };
  var self = new Buffer;
  /**
   * @param {Object} obj
   * @param {?} dest
   * @return {undefined}
   */
  var extend = function(obj, dest) {
    var t = new Buffer(removeListener(obj));
    t.set(dest);
    obj.set(name, t.w);
  };
  /**
   * @param {Object} c
   * @return {?}
   */
  var remove = function(c) {
    c = removeListener(c);
    c = new Buffer(c);
    var s = self.w[x]();
    /** @type {number} */
    var name = 0;
    for (;name < c.w[index];name++) {
      s[name] = s[name] || c.w[name];
    }
    return(new Buffer(s)).encode();
  };
  /**
   * @param {Array} prop
   * @return {?}
   */
  var removeListener = function(prop) {
    return prop = prop.get(name), isObject(prop) || (prop = []), prop;
  };
  /**
   * @param {Array} val
   * @return {?}
   */
  var isFunction = function(val) {
    return "function" == typeof val;
  };
  /**
   * @param {Array} value
   * @return {?}
   */
  var isObject = function(value) {
    return "[object Array]" == Object[idx].toString[CALL](Object(value));
  };
  /**
   * @param {(Array|string)} object
   * @return {?}
   */
  var inspect = function(object) {
    return void 0 != object && -1 < (object.constructor + "")[mod]("String");
  };
  /**
   * @param {Object} event
   * @param {string} base
   * @return {?}
   */
  var next = function(event, base) {
    return 0 == event[mod](base);
  };
  /**
   * @param {boolean} data
   * @return {?}
   */
  var escape = function(data) {
    return data ? data[replace](/^[\s\xa0]+|[\s\xa0]+$/g, "") : "";
  };
  /**
   * @param {string} path
   * @return {?}
   */
  var loadImage = function(path) {
    var image = doc[byTag]("img");
    return image.width = 1, image.height = 1, image.src = path, image;
  };
  /**
   * @return {undefined}
   */
  var pdataCur = function() {
  };
  /**
   * @param {string} r
   * @return {?}
   */
  var cb = function(r) {
    return success instanceof Function ? success(r) : (call(28), r);
  };
  /**
   * @param {HTMLElement} element
   * @param {string} event
   * @param {Object} pdataOld
   * @param {boolean} recurring
   * @return {undefined}
   */
  var addEvent = function(element, event, pdataOld, recurring) {
    try {
      if (element.addEventListener) {
        element.addEventListener(event, pdataOld, !!recurring);
      } else {
        if (element.attachEvent) {
          element.attachEvent("on" + event, pdataOld);
        }
      }
    } catch (f) {
      call(27);
    }
  };
  /**
   * @param {string} s
   * @param {string} path
   * @return {undefined}
   */
  var loadScript = function(s, path) {
    if (s) {
      var el = doc[byTag]("script");
      /** @type {string} */
      el.type = "text/javascript";
      /** @type {boolean} */
      el.async = true;
      /** @type {string} */
      el.src = s;
      if (path) {
        /** @type {string} */
        el.id = path;
      }
      var insertAt = doc.getElementsByTagName("script")[0];
      insertAt.parentNode.insertBefore(el, insertAt);
    }
  };
  /**
   * @return {?}
   */
  var charAt = function() {
    return "https:" == doc[str_location][property];
  };
  /**
   * @return {?}
   */
  var done = function() {
    var key = "" + doc[str_location][n];
    return 0 == key[mod]("www.") ? key[field](4) : key;
  };
  /**
   * @param {string} key
   * @return {?}
   */
  var serialize = function(key) {
    /** @type {string} */
    var e = doc.referrer;
    if (/^https?:\/\//i[event](e)) {
      if (key) {
        return e;
      }
      key = "//" + doc[str_location][n];
      var c = e[mod](key);
      if ((5 == c || 6 == c) && (key = e.charAt(c + key[index]), "/" == key || ("?" == key || ("" == key || ":" == key)))) {
        return;
      }
      return e;
    }
  };
  /**
   * @param {Object} b
   * @param {Array} result
   * @return {?}
   */
  var log = function(b, result) {
    if (1 == result[index] && (null != result[0] && "object" == typeof result[0])) {
      return result[0];
    }
    var ret = {};
    /** @type {number} */
    var id = math.min(b[index] + 1, result[index]);
    /** @type {number} */
    var key = 0;
    for (;id > key;key++) {
      if ("object" == typeof result[key]) {
        var i;
        for (i in result[key]) {
          if (result[key][key2](i)) {
            ret[i] = result[key][i];
          }
        }
        break;
      }
      if (key < b[index]) {
        ret[b[key]] = result[key];
      }
    }
    return ret;
  };
  /**
   * @return {undefined}
   */
  var data = function() {
    /** @type {Array} */
    this.keys = [];
    this.values = {};
    this.m = {};
  };
  /**
   * @param {?} elem
   * @param {string} value
   * @param {boolean} keepData
   * @return {undefined}
   */
  data[idx].set = function(elem, value, keepData) {
    this.keys[method](elem);
    if (keepData) {
      /** @type {string} */
      this.m[":" + elem] = value;
    } else {
      /** @type {string} */
      this.values[":" + elem] = value;
    }
  };
  /**
   * @param {string} name
   * @return {?}
   */
  data[idx].get = function(name) {
    return this.m[key2](":" + name) ? this.m[":" + name] : this.values[":" + name];
  };
  /**
   * @param {Function} elems
   * @return {undefined}
   */
  data[idx].map = function(elems) {
    /** @type {number} */
    var n = 0;
    for (;n < this.keys[index];n++) {
      var optgroup = this.keys[n];
      var reversed = this.get(optgroup);
      if (reversed) {
        elems(optgroup, reversed);
      }
    }
  };
  /** @type {Window} */
  var global = err;
  /** @type {HTMLDocument} */
  var doc = document;
  /**
   * @return {?}
   */
  var onDeviceReady = function() {
    /** @type {string} */
    var next = global[i].userAgent + (doc[id] ? doc[id] : "") + (doc.referrer ? doc.referrer : "");
    var fn = next[index];
    var prop = global.history[index];
    for (;prop > 0;) {
      next += prop-- ^ fn++;
    }
    return $(next);
  };
  /**
   * @param {Function} array
   * @return {?}
   */
  var containsMatch = function(array) {
    var previousDefine = global._gaUserPrefs;
    if (previousDefine && (previousDefine.ioo && previousDefine.ioo()) || array && true === global["ga-disable-" + array]) {
      return true;
    }
    try {
      var previousKey = global.external;
      if (previousKey && (previousKey._gaUserPrefs && "oo" == previousKey._gaUserPrefs)) {
        return true;
      }
    } catch (d) {
    }
    return false;
  };
  /**
   * @param {string} val
   * @return {?}
   */
  var write = function(val) {
    /** @type {Array} */
    var data = [];
    var sorted = doc[id][prop](";");
    /** @type {RegExp} */
    val = new RegExp("^\\s*" + val + "=\\s*(.*?)\\s*$");
    /** @type {number} */
    var key = 0;
    for (;key < sorted[index];key++) {
      var args = sorted[key][rp](val);
      if (args) {
        data[method](args[1]);
      }
    }
    return data;
  };
  /**
   * @param {Object} value
   * @param {Object} object
   * @param {string} key
   * @param {boolean} data
   * @param {boolean} target
   * @param {Object} offset
   * @return {?}
   */
  var emit = function(value, object, key, data, target, offset) {
    if (target = containsMatch(target) ? false : events[event](doc[str_location][n]) || "/" == key && listeners[event](data) ? false : true, !target) {
      return false;
    }
    if (object && (1200 < object[index] && (object = object[field](0, 1200), call(24))), key = value + "=" + object + "; path=" + key + "; ", offset && (key += "expires=" + (new Date((new Date)[unlock]() + offset)).toGMTString() + "; "), data && ("none" != data && (key += "domain=" + data + ";")), data = doc[id], doc.cookie = key, !(data = data != doc[id])) {
      a: {
        value = write(value);
        /** @type {number} */
        data = 0;
        for (;data < value[index];data++) {
          if (object == value[data]) {
            /** @type {boolean} */
            data = true;
            break a;
          }
        }
        /** @type {boolean} */
        data = false;
      }
    }
    return data;
  };
  /**
   * @param {string} xml
   * @return {?}
   */
  var handle = function(xml) {
    return cb(xml)[replace](/\(/g, "%28")[replace](/\)/g, "%29");
  };
  /** @type {RegExp} */
  var listeners = /^(www\.)?google(\.com?)?(\.[a-z]{2})?$/;
  /** @type {RegExp} */
  var events = /(^|\.)doubleclick\.net$/i;
  /**
   * @return {?}
   */
  var apply = function() {
    return(fb || charAt() ? "https:" : "http:") + "//www.google-analytics.com";
  };
  /**
   * @param {string} message
   * @return {undefined}
   */
  var debug = function(message) {
    /** @type {string} */
    this.name = "len";
    /** @type {string} */
    this.message = message + "-8192";
  };
  /**
   * @param {string} url
   * @param {Object} callback
   * @param {Function} data
   * @return {undefined}
   */
  var _request = function(url, callback, data) {
    if (data = data || pdataCur, 2036 >= callback[index]) {
      indexOf(url, callback, data);
    } else {
      if (!(8192 >= callback[index])) {
        throw transform("len", callback[index]), new debug(callback[index]);
      }
      if (!ajax(url, callback, data)) {
        if (!request(url, callback, data)) {
          indexOf(url, callback, data);
        }
      }
    }
  };
  /**
   * @param {string} url
   * @param {string} callback
   * @param {Function} value
   * @return {undefined}
   */
  var indexOf = function(url, callback, value) {
    var img = loadImage(url + "?" + callback);
    /** @type {function (): undefined} */
    img.onload = img.onerror = function() {
      /** @type {null} */
      img.onload = null;
      /** @type {null} */
      img.onerror = null;
      value();
    };
  };
  /**
   * @param {string} url
   * @param {string} callback
   * @param {Function} data
   * @return {?}
   */
  var request = function(url, callback, data) {
    var XHR = global.XMLHttpRequest;
    if (!XHR) {
      return false;
    }
    /** @type {XMLHttpRequest} */
    var xhr = new XHR;
    return "withCredentials" in xhr ? (xhr.open("POST", url, true), xhr.withCredentials = true, xhr.setRequestHeader("Content-Type", "text/plain"), xhr.onreadystatechange = function() {
      if (4 == xhr.readyState) {
        data();
        /** @type {null} */
        xhr = null;
      }
    }, xhr.send(callback), true) : false;
  };
  /**
   * @param {string} options
   * @param {Object} callback
   * @param {Function} data
   * @return {?}
   */
  var ajax = function(options, callback, data) {
    return global[i][action] && global[i][action](options, callback) ? (data(), true) : false;
  };
  /**
   * @param {Object} value
   * @param {string} path
   * @param {Object} dest
   * @return {undefined}
   */
  var transform = function(value, path, dest) {
    if (!(1 <= 100 * math.random())) {
      if (!containsMatch("?")) {
        /** @type {Array} */
        value = ["t=error", "_e=" + value, "_v=j38", "sr=1"];
        if (path) {
          value[method]("_f=" + path);
        }
        if (dest) {
          value[method]("_m=" + cb(dest[field](0, 100)));
        }
        value[method]("aip=1");
        value[method]("z=" + isArray());
        indexOf(apply() + "/collect", value[level]("&"), pdataCur);
      }
    }
  };
  /**
   * @return {undefined}
   */
  var objects = function() {
    /** @type {Array} */
    this.M = [];
  };
  /**
   * @param {string} selector
   * @return {undefined}
   */
  objects[idx].add = function(selector) {
    this.M[method](selector);
  };
  /**
   * @param {HTMLElement} c
   * @return {undefined}
   */
  objects[idx].D = function(c) {
    try {
      /** @type {number} */
      var t = 0;
      for (;t < this.M[index];t++) {
        var fieldValue = c.get(this.M[t]);
        if (fieldValue) {
          if (isFunction(fieldValue)) {
            fieldValue[CALL](global, c);
          }
        }
      }
    } catch (d) {
    }
    t = c.get(key);
    if (t != pdataCur) {
      if (isFunction(t)) {
        c.set(key, pdataCur, true);
        setTimeout(t, 10);
      }
    }
  };
  /**
   * @return {?}
   */
  var randInt = function() {
    return math.round(2147483647 * math.random());
  };
  /**
   * @return {?}
   */
  var split = function() {
    try {
      /** @type {Uint32Array} */
      var _rnds = new Uint32Array(1);
      return global.crypto.getRandomValues(_rnds), 2147483647 & _rnds[0];
    } catch (b) {
      return randInt();
    }
  };
  /** @type {function (): ?} */
  var isArray = randInt;
  /**
   * @return {undefined}
   */
  var m = function() {
    this.data = new data;
  };
  var data_priv = new data;
  /** @type {Array} */
  var collection = [];
  /**
   * @param {string} name
   * @return {?}
   */
  m[idx].get = function(name) {
    var fn = test(name);
    var b = this[p].get(name);
    return fn && (void 0 == b && (b = isFunction(fn[context]) ? fn[context]() : fn[context])), fn && fn.Z ? fn.Z(this, name, b) : b;
  };
  /**
   * @param {Object} obj
   * @param {string} name
   * @return {?}
   */
  var equal = function(obj, name) {
    var t = obj.get(name);
    return void 0 == t ? "" : "" + t;
  };
  /**
   * @param {Object} obj
   * @param {string} name
   * @return {?}
   */
  var has = function(obj, name) {
    var data = obj.get(name);
    return void 0 == data || "" === data ? 0 : 1 * data;
  };
  /**
   * @param {?} elem
   * @param {string} value
   * @param {boolean} keepData
   * @return {undefined}
   */
  m[idx].set = function(elem, value, keepData) {
    if (elem) {
      if ("object" == typeof elem) {
        var name;
        for (name in elem) {
          if (elem[key2](name)) {
            dataAttr(this, name, elem[name], keepData);
          }
        }
      } else {
        dataAttr(this, elem, value, keepData);
      }
    }
  };
  /**
   * @param {Object} data
   * @param {?} elem
   * @param {string} pdataOld
   * @param {boolean} key
   * @return {undefined}
   */
  var dataAttr = function(data, elem, pdataOld, key) {
    if (void 0 != pdataOld) {
      switch(elem) {
        case vvarText:
          select[event](pdataOld);
      }
    }
    var hash = test(elem);
    if (hash && hash.o) {
      hash.o(data, elem, pdataOld, key);
    } else {
      data[p].set(elem, pdataOld, key);
    }
  };
  /**
   * @param {string} name
   * @param {Function} opt_parent
   * @param {?} val
   * @param {?} $0
   * @param {string} o
   * @return {undefined}
   */
  var Node = function(name, opt_parent, val, $0, o) {
    /** @type {string} */
    this.name = name;
    /** @type {Function} */
    this.F = opt_parent;
    this.Z = $0;
    /** @type {string} */
    this.o = o;
    this.defaultValue = val;
  };
  /**
   * @param {string} name
   * @return {?}
   */
  var test = function(name) {
    var pdataCur = data_priv.get(name);
    if (!pdataCur) {
      /** @type {number} */
      var method = 0;
      for (;method < collection[index];method++) {
        var type = collection[method];
        var dest = type[0].exec(name);
        if (dest) {
          pdataCur = type[1](dest);
          data_priv.set(pdataCur[k], pdataCur);
          break;
        }
      }
    }
    return pdataCur;
  };
  /**
   * @param {?} name
   * @return {?}
   */
  var go = function(name) {
    var spec;
    return data_priv.map(function(dataAndEvents, n) {
      if (n.F == name) {
        spec = n;
      }
    }), spec && spec[k];
  };
  /**
   * @param {string} name
   * @param {string} obj
   * @param {Object} aValue
   * @param {Object} event
   * @param {Object} value
   * @return {?}
   */
  var callback = function(name, obj, aValue, event, value) {
    return name = new Node(name, obj, aValue, event, value), data_priv.set(name[k], name), name[k];
  };
  /**
   * @param {string} ele
   * @param {Function} sRegexp
   * @return {undefined}
   */
  var buildRegexp = function(ele, sRegexp) {
    collection[method]([new RegExp("^" + ele + "$"), sRegexp]);
  };
  /**
   * @param {string} name
   * @param {string} opt_attributes
   * @param {Object} value
   * @return {?}
   */
  var require = function(name, opt_attributes, value) {
    return callback(name, opt_attributes, value, void 0, pdataOld);
  };
  /**
   * @return {undefined}
   */
  var pdataOld = function() {
  };
  var animation = inspect(err.GoogleAnalyticsObject) && escape(err.GoogleAnalyticsObject) || "ga";
  /** @type {boolean} */
  var fb = false;
  var model = callback("_br");
  var item = require("apiVersion", "v");
  var dep = require("clientVersion", "_v");
  callback("anonymizeIp", "aip");
  var chunk = callback("adSenseId", "a");
  var rvar = callback("hitType", "t");
  var key = callback("hitCallback");
  var selector = callback("hitPayload");
  callback("nonInteraction", "ni");
  callback("currencyCode", "cu");
  callback("dataSource", "ds");
  var modId = callback("useBeacon", void 0, false);
  var removed = callback("transport");
  callback("sessionControl", "sc", "");
  callback("sessionGroup", "sg");
  callback("queueTime", "qt");
  var dest = callback("_s", "_s");
  callback("screenName", "cd");
  var elem = callback("location", "dl", "");
  var body = callback("referrer", "dr");
  var result = callback("page", "dp", "");
  callback("hostname", "dh");
  var banner = callback("language", "ul");
  var classNames = callback("encoding", "de");
  callback("title", "dt", function() {
    return doc.title || void 0;
  });
  buildRegexp("contentGroup([0-9]+)", function(a) {
    return new Node(a[0], "cg" + a[1]);
  });
  var pattern = callback("screenColors", "sd");
  var cur = callback("screenResolution", "sr");
  var parent = callback("viewportSize", "vp");
  var offsetParent = callback("javaEnabled", "je");
  var arg = callback("flashVersion", "fl");
  callback("campaignId", "ci");
  callback("campaignName", "cn");
  callback("campaignSource", "cs");
  callback("campaignMedium", "cm");
  callback("campaignKeyword", "ck");
  callback("campaignContent", "cc");
  var hosts = callback("eventCategory", "ec");
  var new_value = callback("eventAction", "ea");
  var initted = callback("eventLabel", "el");
  var ret = callback("eventValue", "ev");
  var socialNetwork = callback("socialNetwork", "sn");
  var social = callback("socialAction", "sa");
  var perc_ind = callback("socialTarget", "st");
  var length = callback("l1", "plt");
  var current = callback("l2", "pdt");
  var r = callback("l3", "dns");
  var def = callback("l4", "rrt");
  var datum = callback("l5", "srt");
  var q = callback("l6", "tcp");
  var w = callback("l7", "dit");
  var token = callback("l8", "clt");
  var range = callback("timingCategory", "utc");
  var timing = callback("timingVar", "utv");
  var val = callback("timingLabel", "utl");
  var timingValue = callback("timingValue", "utt");
  callback("appName", "an");
  callback("appVersion", "av", "");
  callback("appId", "aid", "");
  callback("appInstallerId", "aiid", "");
  callback("exDescription", "exd");
  callback("exFatal", "exf");
  var fn = callback("expId", "xid");
  var src = callback("expVar", "xvar");
  var regex = callback("_utma", "_utma");
  var parentNode = callback("_utmz", "_utmz");
  var owner = callback("_utmht", "_utmht");
  var filter = callback("_hc", void 0, 0);
  var later = callback("_ti", void 0, 0);
  var existingFn = callback("_to", void 0, 20);
  buildRegexp("dimension([0-9]+)", function(a) {
    return new Node(a[0], "cd" + a[1]);
  });
  buildRegexp("metric([0-9]+)", function(a) {
    return new Node(a[0], "cm" + a[1]);
  });
  callback("linkerParam", void 0, void 0, draw, pdataOld);
  var ol = callback("usage", "_u");
  var name = callback("_um");
  callback("forceSSL", void 0, void 0, function() {
    return fb;
  }, function(dataAndEvents, deepDataAndEvents, ignoreMethodDoesntExist) {
    call(34);
    /** @type {boolean} */
    fb = !!ignoreMethodDoesntExist;
  });
  var U = callback("_j1", "jid");
  buildRegexp("\\&(.*)", function(a) {
    var node = new Node(a[0], a[1]);
    var elem = go(a[0][field](1));
    return elem && (node.Z = function(m) {
      return m.get(elem);
    }, node.o = function(fn, options, pdataOld, key) {
      fn.set(elem, pdataOld, key);
    }, node.F = void 0), node;
  });
  var path = require("_oot");
  var value = callback("previewTask");
  var propname = callback("checkProtocolTask");
  var child = callback("validationTask");
  var res = callback("checkStorageTask");
  var parentName = callback("historyImportTask");
  var pos = callback("samplerTask");
  var array = callback("_rlt");
  var source = callback("buildHitTask");
  var obj = callback("sendHitTask");
  var copies = callback("ceTask");
  var stringOptions = callback("devIdTask");
  var nonStripName = callback("timingTask");
  var toPush = callback("displayFeaturesTask");
  var vvar = require("name");
  var match = require("clientId", "cid");
  var size = callback("userId", "uid");
  var vvarText = require("trackingId", "tid");
  var a = require("cookieName", void 0, "_ga");
  var tag = require("cookieDomain");
  var b = require("cookiePath", void 0, "/");
  var url = require("cookieExpires", void 0, 63072E3);
  var foo = require("legacyCookieDomain");
  var pkg = require("legacyHistoryImport", void 0, true);
  var cookieName = require("storage", void 0, "cookie");
  var newName = require("allowLinker", void 0, false);
  var header = require("allowAnchor", void 0, true);
  var optgroup = require("sampleRate", "sf", 100);
  var klass = require("siteSpeedSampleRate", void 0, 1);
  var tmpl = require("alwaysSendReferrer", void 0, false);
  var c = callback("transportUrl");
  var text = callback("_r", "_r");
  /**
   * @param {?} name
   * @param {?} b
   * @param {number} showFull
   * @return {undefined}
   */
  var standard = function(name, b, showFull) {
    /** @type {number} */
    this.V = 1E4;
    this.fa = name;
    /** @type {boolean} */
    this.$ = false;
    this.B = b;
    this.ea = showFull || 1;
  };
  /**
   * @param {Object} self
   * @param {Object} el
   * @return {?}
   */
  var listen = function(self, el) {
    var height;
    if (self.fa && self.$) {
      return 0;
    }
    if (self.$ = true, el) {
      if (self.B && has(el, self.B)) {
        return has(el, self.B);
      }
      if (0 == el.get(klass)) {
        return 0;
      }
    }
    return 0 == self.V ? 0 : (void 0 === height && (height = split()), 0 == height % self.V ? math.floor(height / self.V) % self.ea + 1 : 0);
  };
  var form = new standard(true, model, 7);
  /**
   * @param {string} file
   * @return {undefined}
   */
  var formatDate = function(file) {
    if (!charAt() && !fb) {
      var data = listen(form, file);
      if (data && !(!global[i][action] && (data >= 4 && 6 >= data))) {
        /** @type {number} */
        var leftPad = (new Date).getHours();
        var G = [split(), split(), split()][level](".");
        /** @type {string} */
        file = (3 == data || 5 == data ? "https:" : "http:") + "//www.google-analytics.com/collect?z=br.";
        file += [data, "A", leftPad, G][level](".");
        /** @type {string} */
        var base = 1 != data % 3 ? "https:" : "http:";
        /** @type {string} */
        base = base + "//www.google-analytics.com/collect?z=br.";
        base = base + [data, "B", leftPad, G][level](".");
        if (7 == data) {
          base = base[replace]("//www.", "//ssl.");
        }
        /**
         * @return {undefined}
         */
        leftPad = function() {
          if (data >= 4 && 6 >= data) {
            global[i][action](base, "");
          } else {
            loadImage(base);
          }
        };
        if (split() % 2) {
          loadImage(file);
          leftPad();
        } else {
          leftPad();
          loadImage(file);
        }
      }
    }
  };
  /**
   * @param {Object} a
   * @param {Function} add
   * @return {undefined}
   */
  var refresh = function(a, add) {
    /** @type {number} */
    var arg = math.min(has(a, klass), 100);
    if (!($(equal(a, match)) % 100 >= arg) && (arg = {}, dispatch(arg) || getData(arg))) {
      var chr2 = arg[length];
      if (!(void 0 == chr2)) {
        if (!(1 / 0 == chr2)) {
          if (!isNaN(chr2)) {
            if (chr2 > 0) {
              focus(arg, r);
              focus(arg, q);
              focus(arg, datum);
              focus(arg, current);
              focus(arg, def);
              focus(arg, w);
              focus(arg, token);
              add(arg);
            } else {
              addEvent(global, "load", function() {
                refresh(a, add);
              }, false);
            }
          }
        }
      }
    }
  };
  /**
   * @param {number} params
   * @return {?}
   */
  var dispatch = function(params) {
    var t = global.performance || global.webkitPerformance;
    t = t && t.timing;
    if (!t) {
      return false;
    }
    var c = t.navigationStart;
    return 0 == c ? false : (params[length] = t.loadEventStart - c, params[r] = t.domainLookupEnd - t.domainLookupStart, params[q] = t.connectEnd - t.connectStart, params[datum] = t.responseStart - t.requestStart, params[current] = t.responseEnd - t.responseStart, params[def] = t.fetchStart - c, params[w] = t.domInteractive - c, params[token] = t.domContentLoadedEventStart - c, true);
  };
  /**
   * @param {number} params
   * @return {?}
   */
  var getData = function(params) {
    if (global.top != global) {
      return false;
    }
    var store = global.external;
    var record = store && store.onloadT;
    return store && (!store.isValidLoadTime && (record = void 0)), record > 2147483648 && (record = void 0), record > 0 && store.setPageReadyTime(), void 0 == record ? false : (params[length] = record, true);
  };
  /**
   * @param {number} event
   * @param {?} e
   * @return {undefined}
   */
  var focus = function(event, e) {
    var chr2 = event[e];
    if (isNaN(chr2) || (1 / 0 == chr2 || 0 > chr2)) {
      event[e] = void 0;
    }
  };
  /**
   * @param {Object} obj
   * @return {?}
   */
  var bind = function(obj) {
    return function(body) {
      if (!("pageview" != body.get(rvar))) {
        if (!obj.I) {
          /** @type {boolean} */
          obj.I = true;
          refresh(body, function(context) {
            obj.send("timing", context);
          });
        }
      }
    };
  };
  /** @type {boolean} */
  var Rc = false;
  /**
   * @param {Object} key
   * @return {?}
   */
  var end = function(key) {
    if ("cookie" == equal(key, cookieName)) {
      var camelKey = equal(key, a);
      var m = check(key);
      var later = toString(equal(key, b));
      var pdataCur = ok(equal(key, tag));
      /** @type {number} */
      var pos0 = 1E3 * has(key, url);
      var paths = equal(key, vvarText);
      if ("auto" != pdataCur) {
        if (emit(camelKey, m, later, pdataCur, paths, pos0)) {
          /** @type {boolean} */
          Rc = true;
        }
      } else {
        call(32);
        var c;
        if (m = [], pdataCur = done()[prop]("."), 4 != pdataCur[index] || (c = pdataCur[pdataCur[index] - 1], parseInt(c, 10) != c)) {
          /** @type {number} */
          c = pdataCur[index] - 2;
          for (;c >= 0;c--) {
            m[method](pdataCur[x](c)[level]("."));
          }
          m[method]("none");
          /** @type {Array} */
          c = m;
        } else {
          /** @type {Array} */
          c = ["none"];
        }
        /** @type {number} */
        var eventName = 0;
        for (;eventName < c[index];eventName++) {
          if (pdataCur = c[eventName], key[p].set(tag, pdataCur), m = check(key), emit(camelKey, m, later, pdataCur, paths, pos0)) {
            return void(Rc = true);
          }
        }
        key[p].set(tag, "auto");
      }
    }
  };
  /**
   * @param {Object} b
   * @return {undefined}
   */
  var error = function(b) {
    if ("cookie" == equal(b, cookieName) && (!Rc && (end(b), !Rc))) {
      throw "abort";
    }
  };
  /**
   * @param {Object} self
   * @return {undefined}
   */
  var listener = function(self) {
    if (self.get(pkg)) {
      var data = equal(self, tag);
      var args = equal(self, foo) || done();
      var result = update("__utma", args, data);
      if (result) {
        call(19);
        self.set(owner, (new Date)[unlock](), true);
        self.set(regex, result.R);
        if (data = update("__utmz", args, data)) {
          if (result[type] == data[type]) {
            self.set(parentNode, data.R);
          }
        }
      }
    }
  };
  /**
   * @param {number} name
   * @return {?}
   */
  var check = function(name) {
    var M = handle(equal(name, match));
    var s = f(equal(name, tag));
    return name = assert(equal(name, b)), name > 1 && (s += "-" + name), ["GA1", s, M][level](".");
  };
  /**
   * @param {Object} value
   * @param {?} el
   * @param {number} i
   * @return {?}
   */
  var splice = function(value, el, i) {
    var level;
    /** @type {Array} */
    var rules = [];
    /** @type {Array} */
    var args = [];
    /** @type {number} */
    var methodName = 0;
    for (;methodName < value[index];methodName++) {
      var val = value[methodName];
      if (val.H[i] == el) {
        rules[method](val);
      } else {
        if (void 0 == level || val.H[i] < level) {
          /** @type {Array} */
          args = [val];
          level = val.H[i];
        } else {
          if (val.H[i] == level) {
            args[method](val);
          }
        }
      }
    }
    return 0 < rules[index] ? rules : args;
  };
  /**
   * @param {string} msg
   * @return {?}
   */
  var ok = function(msg) {
    return 0 == msg[mod](".") ? msg.substr(1) : msg;
  };
  /**
   * @param {string} success
   * @return {?}
   */
  var f = function(success) {
    return ok(success)[prop](".")[index];
  };
  /**
   * @param {string} val
   * @return {?}
   */
  var toString = function(val) {
    return val ? (1 < val[index] && (val.lastIndexOf("/") == val[index] - 1 && (val = val.substr(0, val[index] - 1))), 0 != val[mod]("/") && (val = "/" + val), val) : "/";
  };
  /**
   * @param {string} str
   * @return {?}
   */
  var assert = function(str) {
    return str = toString(str), "/" == str ? 1 : str[prop]("/")[index];
  };
  /** @type {RegExp} */
  var rg = new RegExp(/^https?:\/\/([^\/:]+)/);
  /** @type {RegExp} */
  var rsingleTag = /(.*)([?&#])(?:_ga=[^&#]*)(?:&?)(.*)/;
  /**
   * @param {Object} opt_target
   * @return {undefined}
   */
  var camelKey = function(opt_target) {
    call(48);
    /** @type {Object} */
    this.target = opt_target;
    /** @type {boolean} */
    this.T = false;
  };
  /**
   * @param {Object} obj
   * @param {string} config
   * @return {?}
   */
  camelKey[idx].ca = function(obj, config) {
    if (obj.tagName) {
      if ("a" == obj.tagName[j]()) {
        return void(obj[y] && map(obj, copy(this, obj[y], config)));
      }
      if ("form" == obj.tagName[j]()) {
        return parse(this, obj);
      }
    }
    return "string" == typeof obj ? copy(this, obj, config) : void 0;
  };
  /**
   * @param {Object} value
   * @param {string} data
   * @param {string} from_instance
   * @return {?}
   */
  var copy = function(value, data, from_instance) {
    /** @type {(Array.<string>|null)} */
    var result = rsingleTag.exec(data);
    if (result) {
      if (3 <= result[index]) {
        /** @type {string} */
        data = result[1] + (result[3] ? result[2] + result[3] : "");
      }
    }
    value = value[targetS].get("linkerParam");
    var e = data[mod]("?");
    result = data[mod]("#");
    return from_instance ? data += (-1 == result ? "#" : "&") + value : (from_instance = -1 == e ? "?" : "&", data = -1 == result ? data + (from_instance + value) : data[field](0, result) + from_instance + value + data[field](result)), data;
  };
  /**
   * @param {Object} data
   * @param {Object} target
   * @return {?}
   */
  var parse = function(data, target) {
    if (target && target[methodName]) {
      var debug = data[targetS].get("linkerParam")[prop]("=")[1];
      if ("get" == target.method[j]()) {
        var self = target.childNodes || [];
        /** @type {number} */
        var propertyName = 0;
        for (;propertyName < self[index];propertyName++) {
          if ("_ga" == self[propertyName][k]) {
            return void self[propertyName][messageId]("value", debug);
          }
        }
        self = doc[byTag]("input");
        self[messageId]("type", "hidden");
        self[messageId]("name", "_ga");
        self[messageId]("value", debug);
        target.appendChild(self);
      } else {
        if ("post" == target.method[j]()) {
          target.action = copy(data, target[methodName]);
        }
      }
    }
  };
  /**
   * @param {Object} walkers
   * @param {string} config
   * @param {(Object|string)} fn
   * @return {undefined}
   */
  camelKey[idx].S = function(walkers, config, fn) {
    /**
     * @param {Object} event
     * @return {undefined}
     */
    function handler(event) {
      try {
        event = event || global.event;
        var row;
        a: {
          var p = event[targetS] || event.srcElement;
          /** @type {number} */
          event = 100;
          for (;p && event > 0;) {
            if (p[y] && p.nodeName[rp](/^a(?:rea)?$/i)) {
              row = p;
              break a;
            }
            p = p.parentNode;
            event--;
          }
          row = {};
        }
        if ("http:" == row[property] || "https:" == row[property]) {
          if (invoke(walkers, row[n] || "")) {
            if (row[y]) {
              map(row, copy(pdataCur, row[y], config));
            }
          }
        }
      } catch (i) {
        call(26);
      }
    }
    var pdataCur = this;
    if (this.T || (this.T = true, addEvent(doc, "mousedown", handler, false), addEvent(doc, "keyup", handler, false)), fn) {
      /**
       * @param {Object} event
       * @return {undefined}
       */
      fn = function(event) {
        if (event = event || global.event, (event = event[targetS] || event.srcElement) && event[methodName]) {
          var match = event[methodName][rp](rg);
          if (match) {
            if (invoke(walkers, match[1])) {
              parse(pdataCur, event);
            }
          }
        }
      };
      /** @type {number} */
      var i = 0;
      for (;i < doc.forms[index];i++) {
        addEvent(doc.forms[i], "submit", fn);
      }
    }
  };
  var ed;
  /**
   * @param {Object} name
   * @param {string} error
   * @param {string} err
   * @return {undefined}
   */
  var get = function(name, error, err) {
    this.U = U;
    /** @type {string} */
    this.aa = error;
    if (!(error = err)) {
      /** @type {string} */
      error = (error = equal(name, vvar)) && "t0" != error ? callbacks[event](error) ? "_gat_" + handle(equal(name, vvarText)) : "_gat_" + handle(error) : "_gat";
    }
    /** @type {string} */
    this.Y = error;
  };
  /**
   * @param {Object} el
   * @param {HTMLElement} node
   * @return {undefined}
   */
  var run = function(el, node) {
    var readFile = node.get(source);
    node.set(source, function(url) {
      trigger(el, url);
      var input = readFile(url);
      return resolve(el, url), input;
    });
    var fn = node.get(obj);
    node.set(obj, function(item) {
      var cont = fn(item);
      return setup(el, item), cont;
    });
  };
  /**
   * @param {Object} evt
   * @param {Object} obj
   * @return {undefined}
   */
  var trigger = function(evt, obj) {
    if (!obj.get(evt.U)) {
      if ("1" == write(evt.Y)[0]) {
        obj.set(evt.U, "", true);
      } else {
        obj.set(evt.U, "" + isArray(), true);
      }
    }
  };
  /**
   * @param {Object} s
   * @param {Object} res
   * @return {undefined}
   */
  var resolve = function(s, res) {
    if (res.get(s.U)) {
      emit(s.Y, "1", res.get(b), res.get(tag), res.get(vvarText), 6E5);
    }
  };
  /**
   * @param {Object} p
   * @param {Object} self
   * @return {undefined}
   */
  var setup = function(p, self) {
    if (self.get(p.U)) {
      var stream = new data;
      /**
       * @param {string} name
       * @return {undefined}
       */
      var callback = function(name) {
        if (test(name).F) {
          stream.set(test(name).F, self.get(name));
        }
      };
      callback(item);
      callback(dep);
      callback(vvarText);
      callback(match);
      callback(p.U);
      stream.set(test(ol).F, remove(self));
      var i = p.aa;
      stream.map(function(r, error) {
        i += cb(r) + "=";
        i += cb("" + error) + "&";
      });
      i += "z=" + isArray();
      loadImage(i);
      self.set(p.U, "", true);
    }
  };
  /** @type {RegExp} */
  var callbacks = /^gtm\d+$/;
  /**
   * @param {Node} end
   * @param {Object} meta
   * @return {undefined}
   */
  var udataCur = function(end, meta) {
    var line = end.b;
    if (!line.get("dcLoaded")) {
      extend(line, 29);
      meta = meta || {};
      var failuresLink;
      if (meta[a]) {
        failuresLink = handle(meta[a]);
      }
      failuresLink = new get(line, "https://stats.g.doubleclick.net/r/collect?t=dc&aip=1&_r=3&", failuresLink);
      run(failuresLink, line);
      line.set("dcLoaded", true);
    }
  };
  /**
   * @param {Object} res
   * @return {undefined}
   */
  var close = function(res) {
    var next;
    /** @type {boolean} */
    next = res.get("dcLoaded") ? false : "cookie" != res.get(cookieName) ? false : true;
    if (next) {
      extend(res, 51);
      next = new get(res);
      trigger(next, res);
      resolve(next, res);
      if (res.get(next.U)) {
        res.set(text, 1, true);
        res.set(c, apply() + "/r/collect", true);
      }
    }
  };
  /**
   * @return {?}
   */
  var convert = function() {
    var selector = global.gaGlobal = global.gaGlobal || {};
    return selector.hid = selector.hid || isArray();
  };
  /**
   * @param {boolean} name
   * @param {?} buf
   * @param {?} data
   * @return {undefined}
   */
  var ondata = function(name, buf, data) {
    if (!ed) {
      var token;
      token = doc[str_location][type];
      var r = global[k];
      /** @type {RegExp} */
      var rg = /^#?gaso=([^&]*)/;
      if (r = (token = (token = token && token[rp](rg) || r && r[rp](rg)) ? token[1] : write("GASO")[0] || "") && token[rp](/^(?:!([-0-9a-z.]{1,40})!)?([-.\w]{10,1200})$/i)) {
        emit("GASO", "" + token, data, buf, name, 0);
        if (!err._udo) {
          err._udo = buf;
        }
        if (!err._utcp) {
          err._utcp = data;
        }
        name = r[1];
        loadScript("https://www.google.com/analytics/web/inpage/pub/inpage.js?" + (name ? "prefix=" + name + "&" : "") + isArray(), "_gasojs");
      }
      /** @type {boolean} */
      ed = true;
    }
  };
  /** @type {RegExp} */
  var select = /^(UA|YT|MO|GP)-(\d+)-(\d+)$/;
  /**
   * @param {?} result
   * @return {undefined}
   */
  var add = function(result) {
    /**
     * @param {?} name
     * @param {string} pdataCur
     * @return {undefined}
     */
    function get(name, pdataCur) {
      el.b[p].set(name, pdataCur);
    }
    /**
     * @param {?} name
     * @param {Function} callback
     * @return {undefined}
     */
    function func(name, callback) {
      get(name, callback);
      el.filters.add(name);
    }
    var el = this;
    this.b = new m;
    this.filters = new objects;
    get(vvar, result[vvar]);
    get(vvarText, escape(result[vvarText]));
    get(a, result[a]);
    get(tag, result[tag] || done());
    get(b, result[b]);
    get(url, result[url]);
    get(foo, result[foo]);
    get(pkg, result[pkg]);
    get(newName, result[newName]);
    get(header, result[header]);
    get(optgroup, result[optgroup]);
    get(klass, result[klass]);
    get(tmpl, result[tmpl]);
    get(cookieName, result[cookieName]);
    get(size, result[size]);
    get(item, 1);
    get(dep, "j38");
    func(path, unpause);
    func(value, restoreScript);
    func(propname, now);
    func(child, install);
    func(res, error);
    func(parentName, listener);
    func(pos, after);
    func(array, set);
    func(copies, attr);
    func(stringOptions, which);
    func(toPush, close);
    func(source, init);
    func(obj, load);
    func(nonStripName, bind(this));
    process(this.b, result[match]);
    loaded(this.b);
    this.b.set(chunk, convert());
    ondata(this.b.get(vvarText), this.b.get(tag), this.b.get(b));
  };
  /**
   * @param {Object} res
   * @param {string} data
   * @return {undefined}
   */
  var process = function(res, data) {
    if ("cookie" == equal(res, cookieName)) {
      /** @type {boolean} */
      Rc = false;
      var pdataCur;
      a: {
        var root = write(equal(res, a));
        if (root && !(1 > root[index])) {
          /** @type {Array} */
          pdataCur = [];
          /** @type {number} */
          var key = 0;
          for (;key < root[index];key++) {
            var args;
            args = root[key][prop](".");
            var state = args.shift();
            if (("GA1" == state || "1" == state) && 1 < args[index]) {
              state = args.shift()[prop]("-");
              if (1 == state[index]) {
                /** @type {string} */
                state[1] = "1";
              }
              state[0] *= 1;
              state[1] *= 1;
              args = {
                H : state,
                s : args[level](".")
              };
            } else {
              args = void 0;
            }
            if (args) {
              pdataCur[method](args);
            }
          }
          if (1 == pdataCur[index]) {
            call(13);
            pdataCur = pdataCur[0].s;
            break a;
          }
          if (0 != pdataCur[index]) {
            if (call(14), root = f(equal(res, tag)), pdataCur = splice(pdataCur, root, 0), 1 == pdataCur[index]) {
              pdataCur = pdataCur[0].s;
              break a;
            }
            root = assert(equal(res, b));
            pdataCur = splice(pdataCur, root, 1);
            pdataCur = pdataCur[0] && pdataCur[0].s;
            break a;
          }
          call(12);
        }
        pdataCur = void 0;
      }
      if (!pdataCur) {
        pdataCur = equal(res, tag);
        root = equal(res, foo) || done();
        pdataCur = update("__utma", root, pdataCur);
        if (void 0 != pdataCur) {
          call(10);
          pdataCur = pdataCur.O[1] + "." + pdataCur.O[2];
        } else {
          pdataCur = void 0;
        }
      }
      if (pdataCur) {
        res[p].set(match, pdataCur);
        /** @type {boolean} */
        Rc = true;
      }
    }
    pdataCur = res.get(header);
    if (key = (pdataCur = doc[str_location][pdataCur ? "href" : "search"][rp]("(?:&|#|\\?)" + cb("_ga")[replace](/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1") + "=([^&#]*)")) && 2 == pdataCur[index] ? pdataCur[1] : "") {
      if (res.get(newName)) {
        pdataCur = key[mod](".");
        if (-1 == pdataCur) {
          call(22);
        } else {
          root = key[field](pdataCur + 1);
          if ("1" != key[field](0, pdataCur)) {
            call(22);
          } else {
            pdataCur = root[mod](".");
            if (-1 == pdataCur) {
              call(22);
            } else {
              key = root[field](0, pdataCur);
              pdataCur = root[field](pdataCur + 1);
              if (key != getDate(pdataCur, 0) && (key != getDate(pdataCur, -1) && key != getDate(pdataCur, -2))) {
                call(23);
              } else {
                call(11);
                res[p].set(match, pdataCur);
              }
            }
          }
        }
      } else {
        call(21);
      }
    }
    if (data) {
      call(9);
      res[p].set(match, cb(data));
    }
    if (!res.get(match)) {
      if (pdataCur = (pdataCur = global.gaGlobal && global.gaGlobal.vid) && -1 != pdataCur[part](/^(?:utma\.)?\d+\.\d+$/) ? pdataCur : void 0) {
        call(17);
        res[p].set(match, pdataCur);
      } else {
        call(8);
        res[p].set(match, [isArray() ^ 2147483647 & onDeviceReady(), math.round((new Date)[unlock]() / 1E3)][level]("."));
      }
    }
    end(res);
  };
  /**
   * @param {HTMLElement} self
   * @return {undefined}
   */
  var loaded = function(self) {
    var result = global[i];
    /** @type {(Screen|null)} */
    var pdataCur = global.screen;
    var value = doc[str_location];
    if (self.set(body, serialize(self.get(tmpl))), value) {
      var b = value.pathname || "";
      if ("/" != b.charAt(0)) {
        call(31);
        /** @type {string} */
        b = "/" + b;
      }
      self.set(elem, value[property] + "//" + value[n] + b + value[part]);
    }
    if (pdataCur) {
      self.set(cur, pdataCur.width + "x" + pdataCur.height);
    }
    if (pdataCur) {
      self.set(pattern, pdataCur.colorDepth + "-bit");
    }
    /** @type {Element} */
    pdataCur = doc.documentElement;
    var CSS1Compat = (b = doc.body) && (b[o] && b[s]);
    /** @type {Array} */
    var console = [];
    if (pdataCur && (pdataCur[o] && (pdataCur[s] && ("CSS1Compat" === doc.compatMode || !CSS1Compat))) ? console = [pdataCur[o], pdataCur[s]] : CSS1Compat && (console = [b[o], b[s]]), pdataCur = 0 >= console[0] || 0 >= console[1] ? "" : console[level]("x"), self.set(parent, pdataCur), self.set(arg, getFlashVersion()), self.set(classNames, doc.characterSet || doc.charset), self.set(offsetParent, result && ("function" == typeof result.javaEnabled && result.javaEnabled()) || false), self.set(banner, 
    (result && (result.language || result.browserLanguage) || "")[j]()), value && (self.get(header) && (result = doc[str_location][type]))) {
      result = result[prop](/[?&#]+/);
      /** @type {Array} */
      value = [];
      /** @type {number} */
      pdataCur = 0;
      for (;pdataCur < result[index];++pdataCur) {
        if (next(result[pdataCur], "utm_id") || (next(result[pdataCur], "utm_campaign") || (next(result[pdataCur], "utm_source") || (next(result[pdataCur], "utm_medium") || (next(result[pdataCur], "utm_term") || (next(result[pdataCur], "utm_content") || (next(result[pdataCur], "gclid") || (next(result[pdataCur], "dclid") || next(result[pdataCur], "gclsrc"))))))))) {
          value[method](result[pdataCur]);
        }
      }
      if (0 < value[index]) {
        result = "#" + value[level]("&");
        self.set(elem, self.get(elem) + result);
      }
    }
  };
  /**
   * @param {string} name
   * @return {?}
   */
  add[idx].get = function(name) {
    return this.b.get(name);
  };
  /**
   * @param {?} elem
   * @param {string} value
   * @return {undefined}
   */
  add[idx].set = function(elem, value) {
    this.b.set(elem, value);
  };
  var maxBits = {
    pageview : [result],
    event : [hosts, new_value, initted, ret],
    social : [socialNetwork, social, perc_ind],
    timing : [range, timing, timingValue, val]
  };
  /**
   * @param {string} data
   * @return {undefined}
   */
  add[idx].send = function(data) {
    if (!(1 > arguments[index])) {
      var bits;
      var ol;
      if ("string" == typeof arguments[0]) {
        bits = arguments[0];
        ol = [][x][CALL](arguments, 1);
      } else {
        bits = arguments[0] && arguments[0][rvar];
        /** @type {Arguments} */
        ol = arguments;
      }
      if (bits) {
        ol = log(maxBits[bits] || [], ol);
        ol[rvar] = bits;
        this.b.set(ol, void 0, true);
        this.filters.D(this.b);
        this.b[p].m = {};
        formatDate(this.b);
      }
    }
  };
  var data_user;
  var elementEndParser;
  var matches;
  /**
   * @param {Function} fun
   * @return {?}
   */
  var traverseNode = function(fun) {
    return "prerender" == doc.visibilityState ? false : (fun(), true);
  };
  /** @type {RegExp} */
  var rquickExpr = /^(?:(\w+)\.)?(?:(\w+):)?(\w+)$/;
  /**
   * @param {Array} a
   * @return {undefined}
   */
  var handler = function(a) {
    if (isFunction(a[0])) {
      this.u = a[0];
    } else {
      /** @type {(Array.<string>|null)} */
      var row = rquickExpr.exec(a[0]);
      if (null != row && (4 == row[index] && (this.c = row[1] || "t0", this.K = row[2] || "", this.C = row[3], this.a = [][x][CALL](a, 1), this.K || (this.A = "create" == this.C, this.i = "require" == this.C, this.g = "provide" == this.C, this.ba = "remove" == this.C), this.i && (3 <= this.a[index] ? (this.X = this.a[1], this.W = this.a[2]) : this.a[1] && (inspect(this.a[1]) ? this.X = this.a[1] : this.W = this.a[1])))), row = a[1], a = a[2], !this.C) {
        throw "abort";
      }
      if (this.i && (!inspect(row) || "" == row)) {
        throw "abort";
      }
      if (this.g && (!inspect(row) || ("" == row || !isFunction(a)))) {
        throw "abort";
      }
      if (fix(this.c) || fix(this.K)) {
        throw "abort";
      }
      if (this.g && "t0" != this.c) {
        throw "abort";
      }
    }
  };
  data_user = new data;
  matches = new data;
  elementEndParser = {
    ec : 45,
    ecommerce : 46,
    linkid : 47
  };
  /**
   * @param {string} data
   * @return {?}
   */
  var parseString = function(data) {
    /**
     * @param {(Object|string)} data
     * @return {?}
     */
    function match(data) {
      var b = (data[n] || "")[prop](":")[0][j]();
      var val = (data[property] || "")[j]();
      /** @type {(number|string)} */
      val = 1 * data[option] || ("http:" == val ? 80 : "https:" == val ? 443 : "");
      return data = data.pathname || "", next(data, "/") || (data = "/" + data), [b, "" + val, data];
    }
    var item = doc[byTag]("a");
    map(item, doc[str_location][y]);
    var url = (item[property] || "")[j]();
    var m = match(item);
    var params = item[part] || "";
    var docType = url + "//" + m[0] + (m[1] ? ":" + m[1] : "");
    return next(data, "//") ? data = url + data : next(data, "/") ? data = docType + data : !data || next(data, "?") ? data = docType + m[2] + (data || params) : 0 > data[prop]("/")[0][mod](":") && (data = docType + m[2][field](0, m[2].lastIndexOf("/")) + "/" + data), map(item, data), url = match(item), {
      protocol : (item[property] || "")[j](),
      host : url[0],
      port : url[1],
      path : url[2],
      G : item[part] || "",
      url : data || ""
    };
  };
  var e = {
    /**
     * @return {undefined}
     */
    ga : function() {
      /** @type {Array} */
      e.f = [];
    }
  };
  e.ga();
  /**
   * @param {?} data
   * @return {undefined}
   */
  e.D = function(data) {
    var m = e.J[eventName](e, arguments);
    /** @type {Array} */
    m = e.f.concat(m);
    /** @type {Array} */
    e.f = [];
    for (;0 < m[index] && (!e.v(m[0]) && (m.shift(), !(0 < e.f[index])));) {
    }
    /** @type {Array} */
    e.f = e.f.concat(m);
  };
  /**
   * @param {?} a
   * @return {?}
   */
  e.J = function(a) {
    /** @type {Array} */
    var _ = [];
    /** @type {number} */
    var elementArgumentPos = 0;
    for (;elementArgumentPos < arguments[index];elementArgumentPos++) {
      try {
        var obj = new handler(arguments[elementArgumentPos]);
        if (obj.g) {
          data_user.set(obj.a[0], obj.a[1]);
        } else {
          if (obj.i) {
            var self = obj;
            var elem = self.a[0];
            if (!isFunction(data_user.get(elem)) && !matches.get(elem)) {
              if (elementEndParser[key2](elem)) {
                call(elementEndParser[elem]);
              }
              var info = self.X;
              if (!info && elementEndParser[key2](elem) ? (call(39), info = elem + ".js") : call(43), info) {
                if (!(info && 0 <= info[mod]("/"))) {
                  /** @type {string} */
                  info = (fb || charAt() ? "https:" : "http:") + "//www.google-analytics.com/plugins/ua/" + info;
                }
                var currentGame;
                var value = parseString(info);
                self = void 0;
                var startNode = value[property];
                var endNode = doc[str_location][property];
                /** @type {boolean} */
                self = "https:" == startNode || startNode == endNode ? true : "http:" != startNode ? false : "http:" == endNode;
                if (currentGame = self) {
                  self = value;
                  var data = parseString(doc[str_location][y]);
                  if (self.G || (0 <= self.url[mod]("?") || 0 <= self.path[mod]("://"))) {
                    /** @type {boolean} */
                    currentGame = false;
                  } else {
                    if (self.host == data.host && self[option] == data[option]) {
                      /** @type {boolean} */
                      currentGame = true;
                    } else {
                      /** @type {number} */
                      var validateOther = "http:" == self[property] ? 80 : 443;
                      /** @type {boolean} */
                      currentGame = "www.google-analytics.com" == self.host && ((self[option] || validateOther) == validateOther && next(self.path, "/plugins/")) ? true : false;
                    }
                  }
                }
                if (currentGame) {
                  loadScript(value.url);
                  matches.set(elem, true);
                }
              }
            }
          }
          _[method](obj);
        }
      } catch (o) {
      }
    }
    return _;
  };
  /**
   * @param {Object} options
   * @return {?}
   */
  e.v = function(options) {
    try {
      if (options.u) {
        options.u[CALL](global, that.j("t0"));
      } else {
        var cache = options.c == animation ? that : that.j(options.c);
        if (options.A) {
          if ("t0" == options.c) {
            that.create[eventName](that, options.a);
          }
        } else {
          if (options.ba) {
            that.remove(options.c);
          } else {
            if (cache) {
              if (options.i) {
                var c;
                var elem = options.a[0];
                var w = options.W;
                if (!(cache == that)) {
                  cache.get(vvar);
                }
                var v = data_user.get(elem);
                if (isFunction(v) ? (cache.plugins_ = cache.plugins_ || new data, cache.plugins_.get(elem) || cache.plugins_.set(elem, new v(cache, w || {})), c = true) : c = false, !c) {
                  return true;
                }
              } else {
                if (options.K) {
                  var id = options.C;
                  var which = options.a;
                  var eventData = cache.plugins_.get(options.K);
                  eventData[id][eventName](eventData, which);
                } else {
                  cache[options.C][eventName](cache, options.a);
                }
              }
            }
          }
        }
      }
    } catch (j) {
    }
  };
  /**
   * @param {?} dataAndEvents
   * @return {undefined}
   */
  var that = function(dataAndEvents) {
    call(1);
    e.D[eventName](e, [arguments]);
  };
  that.h = {};
  /** @type {Array} */
  that.P = [];
  /** @type {number} */
  that.L = 0;
  /** @type {number} */
  that.answer = 42;
  /** @type {Array} */
  var html = [vvarText, tag, vvar];
  /**
   * @param {Array} parent
   * @return {?}
   */
  that.create = function(parent) {
    var e = log(html, [][x][CALL](arguments));
    if (!e[vvar]) {
      /** @type {string} */
      e[vvar] = "t0";
    }
    var n = "" + e[vvar];
    return that.h[n] ? that.h[n] : (e = new add(e), that.h[n] = e, that.P[method](e), e);
  };
  /**
   * @param {string} name
   * @return {undefined}
   */
  that.remove = function(name) {
    /** @type {number} */
    var idx = 0;
    for (;idx < that.P[index];idx++) {
      if (that.P[idx].get(vvar) == name) {
        that.P.splice(idx, 1);
        /** @type {null} */
        that.h[name] = null;
        break;
      }
    }
  };
  /**
   * @param {string} t
   * @return {?}
   */
  that.j = function(t) {
    return that.h[t];
  };
  /**
   * @return {?}
   */
  that.getAll = function() {
    return that.P[x](0);
  };
  /**
   * @return {undefined}
   */
  that.N = function() {
    if ("ga" != animation) {
      call(49);
    }
    var data = global[animation];
    if (!data || 42 != data.answer) {
      that.L = data && data.l;
      /** @type {boolean} */
      that.loaded = true;
      /** @type {function (?): undefined} */
      var result = global[animation] = that;
      if (expect("create", result, result.create), expect("remove", result, result.remove), expect("getByName", result, result.j, 5), expect("getAll", result, result.getAll, 6), result = add[idx], expect("get", result, result.get, 7), expect("set", result, result.set, 4), expect("send", result, result.send), result = m[idx], expect("get", result, result.get), expect("set", result, result.set), !charAt() && !fb) {
        a: {
          /** @type {NodeList} */
          result = doc.getElementsByTagName("script");
          /** @type {number} */
          var length = 0;
          for (;length < result[index] && 100 > length;length++) {
            var src = result[length].src;
            if (src && 0 == src[mod]("https://www.google-analytics.com/analytics")) {
              call(33);
              /** @type {boolean} */
              result = true;
              break a;
            }
          }
          /** @type {boolean} */
          result = false;
        }
        if (result) {
          /** @type {boolean} */
          fb = true;
        }
      }
      if (!charAt()) {
        if (!fb) {
          if (!!listen(new standard)) {
            call(36);
            /** @type {boolean} */
            fb = true;
          }
        }
      }
      /** @type {function (Object): undefined} */
      (global.gaplugins = global.gaplugins || {}).Linker = camelKey;
      result = camelKey[idx];
      data_user.set("linker", camelKey);
      expect("decorate", result, result.ca, 20);
      expect("autoLink", result, result.S, 25);
      data_user.set("displayfeatures", udataCur);
      data_user.set("adfeatures", udataCur);
      data = data && data.q;
      if (isObject(data)) {
        e.D[eventName](that, data);
      } else {
        call(50);
      }
    }
  };
  /**
   * @return {undefined}
   */
  that.da = function() {
    var data = that.getAll();
    /** @type {number} */
    var i = 0;
    for (;i < data[index];i++) {
      data[i].get(vvar);
    }
  };
  (function() {
    /** @type {function (): undefined} */
    var values = that.N;
    if (!traverseNode(values)) {
      call(16);
      /** @type {boolean} */
      var primaryKey = false;
      /**
       * @return {undefined}
       */
      var unbind = function() {
        if (!primaryKey && traverseNode(values)) {
          /** @type {boolean} */
          primaryKey = true;
          /** @type {function (): undefined} */
          var ready = unbind;
          /** @type {HTMLDocument} */
          var obj = doc;
          if (obj.removeEventListener) {
            obj.removeEventListener("visibilitychange", ready, false);
          } else {
            if (obj.detachEvent) {
              obj.detachEvent("onvisibilitychange", ready);
            }
          }
        }
      };
      addEvent(doc, "visibilitychange", unbind);
    }
  })();
}(window);
var define;
var requireModule;
var require;
var requirejs;
!function() {
  /**
   * @param {Function} func
   * @param {Function} next
   * @return {?}
   */
  function after(func, next) {
    try {
      return func();
    } finally {
      next();
    }
  }
  /**
   * @param {number} guard
   * @return {?}
   */
  function assert(guard) {
    throw new Error("an unsupported module was defined, expected `define(name, deps, module)` instead got: `" + guard + "` arguments to define`");
  }
  /**
   * @param {string} name
   * @param {Array} deps
   * @param {Function} callback
   * @param {(Document|string)} methods
   * @return {undefined}
   */
  function Module(name, deps, callback, methods) {
    /** @type {number} */
    this.id = _id++;
    /** @type {string} */
    this.name = name;
    this.deps = !deps.length && callback.length ? rem : deps;
    this.exports = methods || {};
    /** @type {Function} */
    this.callback = callback;
    this.state = void 0;
    this._require = void 0;
  }
  /**
   * @param {Object} ctx
   * @param {string} path
   * @param {?} value
   * @return {?}
   */
  function main(ctx, path, value) {
    var message;
    var d = ctx.deps;
    var length = d.length;
    /** @type {Array} */
    var results = new Array(length);
    var module = {};
    /** @type {number} */
    var i = 0;
    var l = length;
    for (;l > i;i++) {
      message = d[i];
      if ("exports" === message) {
        module.exports = results[i] = value;
      } else {
        if ("require" === message) {
          results[i] = ctx.makeRequire();
        } else {
          if ("module" === message) {
            ctx.exports = value;
            module = results[i] = ctx;
          } else {
            results[i] = callback(log(message, path), path);
          }
        }
      }
    }
    return{
      deps : results,
      module : module
    };
  }
  /**
   * @param {string} id
   * @param {string} setting
   * @return {?}
   */
  function callback(id, setting) {
    var mod = registry[id];
    if (!mod) {
      throw new Error("Could not find module `" + id + "` imported from `" + setting + "`");
    }
    return require(id);
  }
  /**
   * @param {string} str
   * @param {string} arg
   * @return {?}
   */
  function log(str, arg) {
    if ("." !== str.charAt(0)) {
      return str;
    }
    var values = str.split("/");
    var segs = arg.split("/");
    var pieces = segs.slice(0, -1);
    /** @type {number} */
    var css = 0;
    var valuesLen = values.length;
    for (;valuesLen > css;css++) {
      var value = values[css];
      if (".." === value) {
        if (0 === pieces.length) {
          throw new Error("Cannot access parent module of root");
        }
        pieces.pop();
      } else {
        if ("." === value) {
          continue;
        }
        pieces.push(value);
      }
    }
    return pieces.join("/");
  }
  var namespacedName;
  /** @type {Function} */
  namespacedName = Array.isArray ? Array.isArray : function(name) {
    return "[object Array]" === Object.prototype.toString.call(name);
  };
  var registry = {};
  var cache = {};
  /** @type {boolean} */
  var state = false;
  /** @type {number} */
  var _id = 0;
  /** @type {Array} */
  var rem = ["require", "exports", "module"];
  /**
   * @return {?}
   */
  Module.prototype.makeRequire = function() {
    var name = this.name;
    return this._require || (this._require = function(path) {
      return require(log(path, name));
    });
  };
  /**
   * @param {string} id
   * @param {(Function|string)} opt_attributes
   * @param {Function} deps
   * @return {undefined}
   */
  define = function(id, opt_attributes, deps) {
    if (arguments.length < 2) {
      assert(arguments.length);
    }
    if (!namespacedName(opt_attributes)) {
      /** @type {(Function|string)} */
      deps = opt_attributes;
      /** @type {Array} */
      opt_attributes = [];
    }
    registry[id] = new Module(id, opt_attributes, deps);
  };
  define.petal = {};
  /** @type {function (string): ?} */
  requirejs = require = requireModule = function(name) {
    var self = registry[name];
    if (!self) {
      throw new Error("Could not find module " + name);
    }
    if (self.state !== state && cache.hasOwnProperty(name)) {
      return cache[name];
    }
    var def;
    var value;
    /** @type {boolean} */
    var g = false;
    cache[name] = {};
    after(function() {
      def = main(self, name, cache[name]);
      value = self.callback.apply(this, def.deps);
      /** @type {boolean} */
      g = true;
    }, function() {
      if (!g) {
        /** @type {boolean} */
        self.state = state;
      }
    });
    var prop;
    return prop = void 0 === value && def.module.exports ? def.module.exports : cache[name] = value, null === prop || ("object" != typeof prop && "function" != typeof prop || (void 0 !== prop["default"] || (prop["default"] = prop))), cache[name] = prop;
  };
  requirejs.entries = requirejs._eak_seen = registry;
  /**
   * @return {undefined}
   */
  requirejs.clear = function() {
    requirejs.entries = requirejs._eak_seen = registry = {};
    cache = state = {};
  };
}(), define("framework/LocalStorageQueue", ["exports"], function(eventHandle) {
  var elem;
  elem = function() {
    /**
     * @param {?} $injector
     * @param {Object} params
     * @return {undefined}
     */
    function dialog($injector, params) {
      this.lsKey = $injector;
      this.maxLength = null != params ? params : 250;
    }
    return dialog.prototype.add = function(selector) {
      if (!this.contains(selector)) {
        if (this.queue.length >= this.maxLength) {
          this.queue.shift();
        }
        this.queue.push(selector);
        try {
          return localStorage.setItem(this.lsKey, JSON.stringify(this.queue));
        } catch (b) {
        }
      }
    }, dialog.prototype.contains = function(obj) {
      return this.queue = this.getQueue(this.lsKey), this.queue.indexOf(obj) > -1;
    }, dialog.prototype.getQueue = function() {
      var source;
      var sourceKeys;
      /** @type {Array} */
      sourceKeys = [];
      try {
        if (source = localStorage.getItem(this.lsKey)) {
          /** @type {*} */
          sourceKeys = JSON.parse(source);
        }
      } catch (c) {
      }
      return sourceKeys;
    }, dialog;
  }();
  eventHandle.LocalStorageQueue = elem;
}), define("framework/ads/ad", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<div class="caption">{{caption}}</div>\n<div class="contentContainer"><div class="content"></div></div>');
}), define("framework/ads/ads", ["exports", "framework/jquery", "framework/uuid"], function(v, dataAndEvents, p) {
  var state_READY;
  var PRELOADED;
  var state;
  var changes;
  var module;
  var callback;
  var bind;
  var load;
  var add;
  var get;
  var extend;
  var options;
  var parse;
  var run;
  var setup;
  options = {
    config : {
      isEnabled : true,
      /**
       * @param {?} dataAndEvents
       * @param {?} deepDataAndEvents
       * @return {undefined}
       */
      afterRenderAd : function(dataAndEvents, deepDataAndEvents) {
      },
      /**
       * @param {?} dataAndEvents
       * @param {?} deepDataAndEvents
       * @return {undefined}
       */
      afterDestroyAd : function(dataAndEvents, deepDataAndEvents) {
      },
      /**
       * @param {string} cb
       * @param {string} oid
       * @return {?}
       */
      generateDomId : function(cb, oid) {
        return "adbanner-" + cb + "-" + oid;
      }
    }
  };
  changes = {};
  /** @type {number} */
  state_READY = 0;
  /** @type {number} */
  PRELOADED = 1;
  /** @type {number} */
  state = 2;
  /**
   * @param {string} req
   * @param {string} arg1
   * @param {string} num
   * @param {Object} url
   * @return {?}
   */
  get = function(req, arg1, num, url) {
    var msg;
    var mid;
    /** @type {string} */
    window.sas_master = null != window.sas_master ? "s" : "m";
    try {
      if (null != localStorage.getItem("smartadserverUid")) {
        mid = localStorage.getItem("smartadserverUid");
      } else {
        localStorage.setItem("smartadserverUid", mid = p.UUID.create());
      }
    } catch (type) {
      msg = type;
      console.log(msg, msg.stack);
      mid = p.UUID.create();
    }
    return null == window.sas_master && (null == window.sas_tmstp && module.resetSas()), "http://www6.smartadserver.com/ac?" + ["siteid=" + req, "pgname=" + arg1, "fmtid=" + num, "visit=" + window.sas_master, "tmstp=" + window.sas_tmstp, "tgt=" + escape(url), "uid=" + mid].join("&");
  };
  /**
   * @param {string} element
   * @param {string} data
   * @param {string} mode
   * @param {Object} type
   * @return {?}
   */
  setup = function(element, data, mode, type) {
    return null == type && (type = ""), $.get(get(element, data, mode, type));
  };
  /**
   * @param {?} o
   * @return {?}
   */
  extend = function(o) {
    var height;
    var width;
    return null != o.creativeWidth && (null != o.creativeHeight && ("%" === o.creativeWidth.charAt(o.creativeWidth.length - 1) && (width = o.creativeWidth), "%" === o.creativeHeight.charAt(o.creativeHeight.length - 1) && (height = o.creativeHeight), o.creativeWidth <= $(window).width() && o.creativeHeight <= $(window).height() ? (null == width && (width = parseInt(o.creativeWidth, 10)), null == height && (height = parseInt(o.creativeHeight, 10))) : o.creativeWidth / 2 <= $(window).width() && o.creativeHeight / 
    2 <= $(window).height() ? (null == width && (width = o.creativeWidth / 2), null == height && (height = o.creativeHeight / 2)) : null == width && (null == height && (width = $(window).width(), height = width / o.creativeWidth * o.creativeHeight)))), {
      width : null != width ? width : "",
      height : null != height ? height : ""
    };
  };
  /**
   * @param {string} name
   * @param {string} data
   * @param {string} cur
   * @param {?} opts
   * @return {?}
   */
  parse = function(name, data, cur, opts) {
    var rule;
    var contents;
    var height;
    var insets;
    var ev;
    var width;
    return ev = extend(opts), width = ev.width, height = ev.height, (0 !== width || 0 !== height) && (contents = (rule = $("#" + name).html(require("framework/ads/ad")["default"]({
      caption : options.config.caption || ""
    })).addClass($.merge(["adBanner"], options.config.formats[cur].classNames).join(" "))).find(".content"), null != opts.bgcolor && (opts.bgcolor && rule.find(".contentContainer").css("background-color", "#" + opts.bgcolor)), insets = contents.padding(), contents.css({
      width : width + insets.left + insets.right + "px",
      height : height + insets.top + insets.bottom + "px"
    })), changes[name].state = PRELOADED;
  };
  /**
   * @param {string} options
   * @return {?}
   */
  callback = function(options) {
    var cssHeight;
    var params;
    var w;
    if (params = extend(options), w = params.width, cssHeight = params.height, null != options.creativetype) {
      switch(parseInt(options.creativetype, 10)) {
        case 0:
          return bind(options.creativeurl, {
            clickUrl : options.clickurl,
            impressionPixelUrls : [options.impressionpixel, options.agencyPortraitImpressionPixels],
            clickPixelUrl : options.countclickurl,
            width : w,
            height : cssHeight
          });
        case 3:
          if (options.creativeurl) {
            return add(options.creativeurl, {
              impressionPixelUrls : [options.impressionpixel, options.agencyPortraitImpressionPixels],
              width : w,
              height : cssHeight
            });
          }
          if (options.creativescript) {
            return load(options.creativescript, {
              impressionPixelUrls : [options.impressionpixel, options.agencyPortraitImpressionPixels],
              width : w,
              height : cssHeight
            });
          }
        ;
      }
    } else {
      if (options.newsnetImageUrl) {
        return bind(options.newsnetImageUrl, {
          clickUrl : options.clickUrl,
          impressionPixelUrls : options.impUrls.split(","),
          clickPixelUrl : options.countClickUrl,
          width : w,
          height : cssHeight
        });
      }
      if (options.scriptUrl) {
        return add(options.scriptUrl, {
          impressionPixelUrls : options.impUrls.split(","),
          width : w,
          height : cssHeight
        });
      }
      if (options.html) {
        return load(options.html, {
          impressionPixelUrls : options.impUrls.split(","),
          width : w,
          height : cssHeight
        });
      }
    }
  };
  /**
   * @param {?} selfObj
   * @param {?} options
   * @return {?}
   */
  bind = function(selfObj, options) {
    var div;
    var image;
    var requestUrl;
    var f;
    var height;
    var events;
    var w;
    return requestUrl = options.clickUrl, events = options.impressionPixelUrls, image = options.clickPixelUrl, w = options.width, height = options.height, f = (div = $(require("framework/ads/imageAd")["default"]({
      url : requestUrl,
      imageSrc : selfObj,
      width : w,
      height : height
    })).bind("click", function(dataAndEvents) {
      var objNext;
      return objNext = new Image, objNext.src = image + "&timestamp=" + (new Date).getTime();
    }))[0], div.find("img").bind("load", function() {
      var i;
      var objNext;
      var oldName;
      var k;
      var _results;
      if (events && events.length) {
        /** @type {Array} */
        _results = [];
        /** @type {number} */
        i = 0;
        k = events.length;
        for (;k > i;i++) {
          oldName = events[i];
          if (oldName) {
            /** @type {Image} */
            objNext = new Image;
            _results.push(objNext.src = oldName + "&timestamp=" + (new Date).getTime());
          }
        }
        return _results;
      }
    }), f;
  };
  /**
   * @param {string} file
   * @param {?} args
   * @return {?}
   */
  add = function(file, args) {
    var ifr;
    var height;
    var list;
    var width;
    return list = args.impressionPixelUrls, width = args.width, height = args.height, $(ifr = document.createElement("iframe")).on("load", function() {
      var p;
      var objNext;
      var item;
      var i;
      var a;
      if (list && list.length) {
        /** @type {Array} */
        a = [];
        /** @type {number} */
        p = 0;
        i = list.length;
        for (;i > p;p++) {
          item = list[p];
          if (item) {
            /** @type {Image} */
            objNext = new Image;
            a.push(objNext.src = item + "&timestamp=" + (new Date).getTime());
          }
        }
        return a;
      }
    }).attr({
      src : file,
      scrolling : "no"
    }).css({
      width : width + "px",
      height : height + "px"
    }), ifr;
  };
  /**
   * @param {string} loadingLang
   * @param {?} config
   * @return {?}
   */
  load = function(loadingLang, config) {
    var ifr;
    var finalHeight;
    var groups;
    var width;
    return groups = config.impressionPixelUrls, width = config.width, finalHeight = config.height, $(ifr = document.createElement("iframe")).one("load", function() {
      var iframeDocument;
      var i;
      var objNext;
      var group;
      var len;
      var _results;
      if (iframeDocument = $(this).contents().get(0), iframeDocument.open("text/html", "replace"), iframeDocument.write('<html><head></head><body style="margin: 0; padding: 0;">' + loadingLang + "</body></html>"), iframeDocument.close(), groups && groups.length) {
        /** @type {Array} */
        _results = [];
        /** @type {number} */
        i = 0;
        len = groups.length;
        for (;len > i;i++) {
          group = groups[i];
          if (group) {
            /** @type {Image} */
            objNext = new Image;
            _results.push(objNext.src = group + "&timestamp=" + (new Date).getTime());
          }
        }
        return _results;
      }
    }).attr({
      src : "about:blank",
      scrolling : "no"
    }).css({
      width : width + "px",
      height : finalHeight + "px"
    }), ifr;
  };
  /**
   * @param {string} id
   * @param {string} key
   * @param {string} fn
   * @param {(Object|string)} o
   * @return {?}
   */
  run = function(id, key, fn, o) {
    return $("#" + id + " .content").append(callback(o)), o.duration && (changes[id].timeout = setTimeout(function() {
      return module.destroy(key, fn);
    }, 1E3 * parseInt(o.duration, 10))), changes[id].state = state, options.config.afterRenderAd.call(this, key, fn);
  };
  module = {
    /**
     * @param {?} replacementHash
     * @return {?}
     */
    configure : function(replacementHash) {
      return $.extend(options.config, replacementHash);
    },
    /**
     * @return {?}
     */
    resetSas : function() {
      return window.sas_tmstp = (new Date).getTime(), window.sas_master = null;
    },
    /**
     * @param {Object} page
     * @param {string} callback
     * @param {string} name
     * @return {?}
     */
    show : function(page, callback, name) {
      var $col;
      var i;
      var tag;
      var index;
      var _len1;
      var promises;
      var _ref1;
      if (promises = [], options.config.isEnabled && null != (null != page ? page.formats : void 0)) {
        _ref1 = page.formats;
        /** @type {number} */
        index = 0;
        _len1 = _ref1.length;
        for (;_len1 > index;index++) {
          tag = _ref1[index];
          if (tag.name in options.config.formats) {
            if (null == name || tag.name === name) {
              i = options.config.generateDomId(callback, tag.name);
              $col = $("#" + i);
              if (null == changes[i]) {
                if ($col.length > 0) {
                  changes[i] = {
                    state : state_READY,
                    timeout : null,
                    interval : null
                  };
                  promises.push(new RSVP.Promise(function(dataAndEvents) {
                    return function($sanitize, Application) {
                      return changes[i].interval = setInterval(function(name, k, done, dir, part, event) {
                        return function() {
                          var parent;
                          var node;
                          return $("#" + name).isInViewport() && (node = $("#" + name)[0].getBoundingClientRect(), parent = $.map(node, function(dataAndEvents, deepDataAndEvents) {
                            return 0 !== dataAndEvents ? dataAndEvents : void 0;
                          }), parent.length) ? (clearInterval(changes[name].interval), changes[name].interval = null, setup(options.config.siteId, done, dir, event).then(function($scope) {
                            return null != changes[name] ? (parse(name, k, part, $scope.ad), $sanitize(), run(name, k, part, $scope.ad)) : void 0;
                          }, function(err) {
                            return console.warn && console.warn(err), null != changes[name] && delete changes[name], Application();
                          })) : void 0;
                        };
                      }(i, callback, page.page_id, tag.id, tag.name, tag.target), 100);
                    };
                  }(this)));
                }
              }
            }
          }
        }
      }
      return RSVP.allSettled(promises);
    },
    /**
     * @param {string} event
     * @param {string} callback
     * @return {?}
     */
    destroy : function(event, callback) {
      var storeKey;
      var id;
      var list;
      var regex;
      var _results;
      /** @type {RegExp} */
      regex = new RegExp("^" + options.config.generateDomId("(" + (null != event ? event : ".*") + ")", "(" + (null != callback ? callback : ".*") + ")") + "$");
      /** @type {Array} */
      _results = [];
      for (id in changes) {
        storeKey = changes[id];
        if (list = regex.exec(id)) {
          /** @type {string} */
          callback = list[1];
          if (changes[id].timeout) {
            clearTimeout(changes[id].timeout);
          }
          if (changes[id].interval) {
            clearInterval(changes[id].interval);
          }
          $("#" + id).removeClass().empty().find(".content").css({
            width : "",
            height : ""
          });
          delete changes[id];
          _results.push(options.config.afterDestroyAd.call(this, event, callback));
        }
      }
      return _results;
    }
  };
  v.ads = module;
}), define("framework/ads/imageAd", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<a href="{{url}}" target="_blank">\n    <img src="{{imageSrc}}" style="width: {{width}}px; height:{{height}}px;">\n</a>');
}), define("framework/array", function() {
  if (!("indexOf" in Array.prototype)) {
    /**
     * @param {string} name
     * @param {number=} recurring
     * @return {number}
     * @template T
     */
    Array.prototype.indexOf = function(name, recurring) {
      var _len;
      if (void 0 === recurring) {
        /** @type {number} */
        recurring = 0;
      }
      if (0 > recurring) {
        recurring += this.length;
      }
      if (0 > recurring) {
        /** @type {number} */
        recurring = 0;
      }
      /** @type {number} */
      _len = this.length;
      for (;_len > recurring;) {
        if (recurring in this && this[recurring] === name) {
          return recurring;
        }
        recurring++;
      }
      return-1;
    };
  }
  if (!Array.prototype.filter) {
    /**
     * @param {(function (this:S, T, number, Array.<T>): ?|null)} name
     * @return {Array.<T>}
     * @template T,S
     */
    Array.prototype.filter = function(name) {
      var index;
      var tagSeparatorIndex;
      var values;
      var arr;
      var self;
      var value;
      if (void 0 === this || null === this) {
        throw new TypeError;
      }
      if (arr = Object(this), tagSeparatorIndex = arr.length >>> 0, "function" != typeof name) {
        throw new TypeError;
      }
      /** @type {Array} */
      values = [];
      self = arguments[1];
      /** @type {number} */
      index = 0;
      for (;tagSeparatorIndex > index;) {
        if (index in arr) {
          value = arr[index];
          if (name.call(self, value, index, arr)) {
            values.push(value);
          }
        }
        index++;
      }
      return values;
    };
  }
}), define("framework/browser", ["exports"], function(b) {
  var browser;
  browser = {
    browserName : null,
    browserVersion : null,
    /**
     * @return {?}
     */
    isTouchScreen : function() {
      return "ontouchstart" in window || (navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);
    },
    /**
     * @return {?}
     */
    isiPhone : function() {
      return navigator.userAgent.indexOf("iPhone") > -1;
    },
    /**
     * @return {?}
     */
    supportsCors : function() {
      return window.XMLHttpRequest && "withCredentials" in new XMLHttpRequest;
    },
    /**
     * @return {?}
     */
    isDefaultAndroid : function() {
      return this.isAndroid() && (this.isWebKit() && !this.isChrome());
    },
    /**
     * @return {?}
     */
    isAndroid : function() {
      return navigator.userAgent.indexOf("Android") > -1;
    },
    /**
     * @return {?}
     */
    isWebKit : function() {
      return navigator.userAgent.indexOf("WebKit") > -1;
    },
    /**
     * @return {?}
     */
    isChrome : function() {
      return navigator.userAgent.indexOf("Chrome") > -1;
    },
    /**
     * @return {?}
     */
    isWP : function() {
      return navigator.userAgent.indexOf("Windows Phone") > -1;
    },
    /**
     * @return {?}
     */
    isIE8 : function() {
      return navigator.userAgent.indexOf("MSIE 8") > -1;
    },
    /**
     * @return {?}
     */
    isIE9 : function() {
      return navigator.userAgent.indexOf("MSIE 9") > -1;
    },
    /**
     * @return {?}
     */
    isIE10 : function() {
      return navigator.userAgent.indexOf("MSIE 10") > -1;
    },
    /**
     * @return {?}
     */
    isFirefox : function() {
      return navigator.userAgent.indexOf("Firefox") > -1;
    },
    /**
     * @return {?}
     */
    isLocalhost : function() {
      return location.hostname.indexOf("localhost") > -1;
    },
    /**
     * @param {Object} map
     * @return {?}
     */
    supportsRequirements : function(map) {
      var octalLiteral;
      var key;
      var dstUri;
      var optgroup;
      var val;
      for (key in map) {
        if (val = map[key], optgroup = new RegExp(key + " [^;]*"), dstUri = navigator.userAgent.match(optgroup), null != dstUri && (octalLiteral = dstUri.toString().split(" "), this.browserName = octalLiteral[0], this.browserVersion = parseInt(octalLiteral[1], 10), this.browserName === key && this.browserVersion < val)) {
          return alert("Ihre " + key + "-Version (v" + this.browserVersion + ") wird leider nicht mehr unterst\u00fctzt, bitte aktualisieren Sie auf die Version v" + val + " oder h\u00f6her"), false;
        }
      }
      return true;
    },
    /**
     * @param {string} name
     * @return {?}
     */
    scrollTop : function(name) {
      return setTimeout(function() {
        return name.css("overflow", "hidden"), setTimeout(function() {
          return name.scrollTop(0), setTimeout(function() {
            return name.css("overflow", "auto");
          }, 0);
        }, 0);
      }, 0);
    },
    /**
     * @return {?}
     */
    getPathname : function() {
      var base;
      var match;
      var path;
      var url;
      return url = location.pathname, path = location.hash, "/" === url && (path && (match = "?#", (base = path.indexOf(match)) > -1 && (path = path.substr(0, base)), url = path.replace("#", ""))), url;
    },
    /**
     * @param {Object} name
     * @return {?}
     */
    addAndroidScrollFix : function(name) {
      return this.isDefaultAndroid() ? (name.addClass("androidScrollFix"), setTimeout(function() {
        return name.removeClass("androidScrollFix"), setTimeout(function() {
          return name.addClass("androidScrollFix", 100);
        });
      }, 5E3)) : void 0;
    }
  };
  b.browser = browser;
}), define("framework/comments/Comment/component", ["exports", "framework/LocalStorageQueue", "framework/translations", "framework/utils", "framework/facebook"], function(tree, dataAndEvents, a, dd, req) {
  var Comment;
  var params;
  var previous;
  previous = new dataAndEvents.LocalStorageQueue("Comments.uprated");
  params = new dataAndEvents.LocalStorageQueue("Comments.shared");
  Comment = React.createClass({
    mixins : [React.addons.LinkedStateMixin],
    maxLength : 800,
    /**
     * @return {?}
     */
    getTimestamp : function() {
      return a.translations.translate("vor") + " " + dd.utils.date.formatRelative(this.props.comment.created_at);
    },
    /**
     * @return {?}
     */
    updateTimestampInterval : function() {
      return this.isMounted() ? this.setState({
        createdAt : this.getTimestamp()
      }) : void 0;
    },
    /**
     * @return {?}
     */
    getInitialState : function() {
      return{
        isCommentFormDisplayed : false,
        isBlameFormDisplayed : false,
        charsLeft : this.maxLength,
        uprates : this.props.comment.uprates,
        message : this.props.comment.message,
        isUprated : previous.contains(this.props.comment.id),
        isShared : params.contains(this.props.comment.id),
        createdAt : this.getTimestamp()
      };
    },
    /**
     * @return {?}
     */
    focus : function() {
      var first;
      return first = $(this.getDOMNode()), first.hasClass("expanded") ? void 0 : (first.addClass("expanded"), this.props.defaults.hitWemf());
    },
    /**
     * @param {string} key
     * @return {?}
     */
    getFromLocalStorage : function(key) {
      try {
        return localStorage.getItem("Comments." + key);
      } catch (b) {
      }
    },
    /**
     * @return {?}
     */
    componentDidMount : function() {
      return setInterval(this.updateTimestampInterval, 6E4), this.props.comment.id ? void 0 : this.toggleCommentForm();
    },
    /**
     * @return {?}
     */
    componentWillUnmount : function() {
      return clearInterval(this.updateTimestampInterval);
    },
    /**
     * @param {Function} Constructor
     * @param {Object} spec
     * @return {?}
     */
    componentDidUpdate : function(Constructor, spec) {
      return spec.text !== this.state.text ? this.setState({
        charsLeft : this.maxLength - this.state.text.length
      }) : void 0;
    },
    /**
     * @param {Event} deepDataAndEvents
     * @return {?}
     */
    submitCommentForm : function(deepDataAndEvents) {
      var doc;
      var data;
      if (deepDataAndEvents.preventDefault(), doc = $(this.refs.commentForm.getDOMNode()), doc.validate()) {
        if (this.props.defaults.showLoader(), data = {
          message : doc.find("[name=text]").val(),
          article_id : this.props.defaults.commentsId,
          parent_id : this.props.comment.id,
          city : null,
          zip_code : null,
          created_at : new Date
        }, this.props.defaults.facebookUser) {
          data.first_name = this.props.defaults.facebookUser.first_name;
          data.last_name = this.props.defaults.facebookUser.last_name;
          /** @type {string} */
          data.email = this.props.defaults.facebookUser.name + "@facebook.com";
        } else {
          data.first_name = doc.find("[name=firstName]").val();
          data.last_name = doc.find("[name=lastName]").val();
          data.email = doc.find("[name=email]").val();
          data.zip_code = doc.find("[name=zipCode]").val();
          data.city = doc.find("[name=city]").val();
          try {
            localStorage.setItem("Comments.firstName", data.first_name);
            localStorage.setItem("Comments.lastName", data.last_name);
            localStorage.setItem("Comments.email", data.email);
            localStorage.setItem("Comments.zipCode", data.zip_code);
            localStorage.setItem("Comments.city", data.city);
          } catch (e) {
          }
        }
        return $.ajax({
          url : this.props.defaults.apiUrl + "/articles/" + this.props.defaults.commentsId + "/comments",
          type : "POST",
          contentType : "application/json; charset=UTF-8",
          data : JSON.stringify({
            comment : data
          }),
          success : function(self) {
            return function() {
              return self.toggleCommentForm(), doc.find("[name=share]").prop("checked") && self.postOnMyWall(data.message), self.setState({
                text : ""
              }), doc.find("[type=checkbox]").prop("checked", false), self.props.defaults.showDialog(a.translations.translate("Kommentar versandt"), a.translations.translate("Vielen Dank f\u00fcr Ihren Beitrag. Ihr Kommentar wurde versandt. Bis er von der Redaktion freigeschaltet wird, kann es eine gewisse Zeit dauern.")), self.props.defaults.hitWemf();
            };
          }(this),
          error : function(me) {
            return function() {
              return me.props.defaults.showDialog(a.translations.translate("Senden fehlgeschlagen"), a.translations.translate("Ihr Kommentar konnte aus technischen Gr\u00fcnden nicht \u00fcbermittelt werden."));
            };
          }(this),
          complete : function(me) {
            return function() {
              return me.props.defaults.hideLoader();
            };
          }(this)
        });
      }
      return this.props.defaults.showDialog(a.translations.translate("Senden fehlgeschlagen"), a.translations.translate("Bitte f\u00fcllen Sie alle Felder korrekt aus und akzeptieren Sie die Regeln."));
    },
    /**
     * @param {Event} deepDataAndEvents
     * @return {?}
     */
    submitBlameForm : function(deepDataAndEvents) {
      var doc;
      var result;
      if (deepDataAndEvents.preventDefault(), doc = $(this.refs.blameForm.getDOMNode()), doc.validate()) {
        this.props.defaults.showLoader();
        result = {
          name : doc.find("[name=senderName]").val(),
          email : doc.find("[name=senderEmail]").val(),
          text : doc.find("[name=blameMessage]").val()
        };
        try {
          localStorage.setItem("Comments.senderName", result.name);
          localStorage.setItem("Comments.senderEmail", result.email);
        } catch (e) {
        }
        return $.ajax({
          url : this.props.defaults.apiUrl + "/articles/" + this.props.defaults.commentsId + "/comments/" + this.props.comment.id + "/blames",
          type : "POST",
          contentType : "application/json; charset=UTF-8",
          data : JSON.stringify({
            blame : result
          }),
          success : function(me) {
            return function() {
              return me.toggleBlameForm(), doc.find("[name=blameMessage]").val(""), me.props.defaults.showDialog(a.translations.translate("Kommentar gemeldet"), a.translations.translate("Danke. Unsere Moderatoren pr\u00fcfen Ihren Hinweis so schnell wie m\u00f6glich.")), me.props.defaults.hitWemf();
            };
          }(this),
          error : function(me) {
            return function() {
              return me.props.defaults.showDialog(a.translations.translate("Senden fehlgeschlagen"), a.translations.translate("Ihre Meldung konnte aus technischen Gr\u00fcnden nicht \u00fcbermittelt werden."));
            };
          }(this),
          complete : function(me) {
            return function() {
              return me.props.defaults.hideLoader();
            };
          }(this)
        });
      }
      return this.props.defaults.showDialog(a.translations.translate("Senden fehlgeschlagen"), a.translations.translate("Bitte f\u00fcllen Sie alle Felder korrekt aus."));
    },
    /**
     * @return {?}
     */
    uprate : function() {
      return this.state.isUprated ? void 0 : ($.ajax({
        url : this.props.defaults.apiUrl + "/articles/" + this.props.defaults.commentsId + "/comments/" + this.props.comment.id + "/rates",
        type : "POST",
        contentType : "application/json; charset=UTF-8",
        data : JSON.stringify({
          rate : {
            action : "up"
          }
        })
      }), this.setState({
        isUprated : true,
        uprates : this.state.uprates + 1
      }), previous.add(this.props.comment.id));
    },
    /**
     * @param {string} name
     * @return {?}
     */
    toggleForm : function(name) {
      switch(name) {
        case "comment":
          this.toggleCommentForm();
          break;
        case "blame":
          this.toggleBlameForm();
      }
      return this.props.defaults.hitWemf();
    },
    /**
     * @return {?}
     */
    toggleCommentForm : function() {
      return this.state.isBlameFormDisplayed && (this.refs.blameForm.getDOMNode().style.display = "none"), this.state.isCommentFormDisplayed ? this.props.comment.id ? $(this.refs.commentForm.getDOMNode()).toggle() : void 0 : this.setState({
        isCommentFormDisplayed : true
      }, function(dataAndEvents) {
        return function() {
          var $document;
          return $document = $(dataAndEvents.refs.commentForm.getDOMNode()), $document.find("[placeholder]").simplePlaceholder({
            placeholderClass : "placeholderForLegacyBrowsers"
          });
        };
      }(this));
    },
    /**
     * @return {?}
     */
    toggleBlameForm : function() {
      return this.state.isCommentFormDisplayed && (this.refs.commentForm.getDOMNode().style.display = "none"), this.state.isBlameFormDisplayed ? $(this.refs.blameForm.getDOMNode()).toggle() : this.setState({
        isBlameFormDisplayed : true
      }, function(dataAndEvents) {
        return function() {
          var $document;
          return $document = $(dataAndEvents.refs.blameForm.getDOMNode()), $document.find("[placeholder]").simplePlaceholder();
        };
      }(this));
    },
    /**
     * @return {?}
     */
    toggleRules : function() {
      return $(this.getDOMNode()).find(".rules").toggle(), this.props.defaults.hitWemf();
    },
    /**
     * @return {?}
     */
    share : function() {
      return this.state.isShared ? void 0 : this.postOnMyWall('"' + this.props.comment.message.replaceNewLine() + '"\n\n' + a.translations.translate("Kommentar") + " " + a.translations.translate("von") + " " + this.props.comment.first_name + " " + this.props.comment.last_name).then(function(self) {
        return function() {
          return self.setState({
            isShared : true
          }), params.add(self.props.comment.id);
        };
      }(this));
    },
    /**
     * @param {string} opt_attributes
     * @return {?}
     */
    postOnMyWall : function(opt_attributes) {
      return req.facebook.postOnMyWall({
        message : opt_attributes,
        link : location.href
      });
    },
    /**
     * @return {?}
     */
    render : function() {
      return require("framework/comments/Comment/template")["default"].apply(this);
    }
  });
  tree.Comment = Comment;
}), define("framework/comments/Comment/template", ["exports", "framework/translations", "framework/comments/Comment/component"], function(__exports__, self, item) {
  /**
   * @param {?} __
   * @return {undefined}
   */
  function callback(__) {
    this.uprate();
  }
  /**
   * @param {?} dataObj
   * @return {undefined}
   */
  function func(dataObj) {
    this.toggleForm("blame");
  }
  /**
   * @param {?} pluginName
   * @return {undefined}
   */
  function write(pluginName) {
    this.share();
  }
  /**
   * @param {?} signal_eof
   * @return {undefined}
   */
  function next(signal_eof) {
    this.toggleForm("comment");
  }
  /**
   * @param {?} node
   * @param {Event} deepDataAndEvents
   * @return {undefined}
   */
  function $$(node, deepDataAndEvents) {
    this.submitCommentForm(deepDataAndEvents);
  }
  /**
   * @param {?} component
   * @return {undefined}
   */
  function test(component) {
    this.focus();
  }
  /**
   * @param {?} srcFile
   * @return {undefined}
   */
  function handle(srcFile) {
    this.props.defaults.logout();
  }
  /**
   * @param {?} token
   * @return {undefined}
   */
  function handler(token) {
    this.props.defaults.login();
  }
  /**
   * @param {?} settings
   * @return {undefined}
   */
  function element(settings) {
    this.toggleRules();
  }
  /**
   * @param {?} dataAndEvents
   * @param {Event} deepDataAndEvents
   * @return {undefined}
   */
  function clone(dataAndEvents, deepDataAndEvents) {
    this.submitBlameForm(deepDataAndEvents);
  }
  /**
   * @param {Object} value
   * @param {?} var_args
   * @return {?}
   */
  function extend(value, var_args) {
    return React.createElement(item.Comment, {
      comment : value,
      key : value.id,
      defaults : this.props.defaults
    });
  }
  /**
   * @param {Object} data
   * @return {?}
   */
  function init(data) {
    return data.released || data.children.length ? React.createElement("li", {
      className : "comment " + (data.id ? "expanded" : "")
    }, data.id ? React.createElement("p", {
      className : "author"
    }, React.createElement("span", {}, "\n            ", data.released ? data.first_name + " " + data.last_name : self.translations.translate("Unbekannter Autor"), "\n        "), React.createElement("time", {}, this.state.createdAt)) : null, React.createElement("p", {
      className : "message",
      dangerouslySetInnerHTML : {
        __html : data.released ? data.message : self.translations.translate("Dieser Kommentar wurde wegen Regelverletzung gel\u00f6scht")
      }
    }), data.id ? React.createElement("p", {
      className : "menu"
    }, React.createElement("a", {
      href : "javascript:void(0);",
      className : this.state.isUprated ? "inactive" : "",
      onClick : callback.bind(this, data),
      name : "uprate"
    }, React.createElement("span", {
      className : "NnIcon upIcon"
    }), "\n            ", self.translations.translate("Empfehlen"), " (", this.state.uprates, ")\n        "), React.createElement("a", {
      href : "javascript:void(0);",
      onClick : func.bind(this, data),
      name : "blame"
    }, self.translations.translate("Melden")), React.createElement("a", {
      href : "javascript:void(0);",
      className : this.state.isShared ? "inactive" : "",
      onClick : write.bind(this, data)
    }, self.translations.translate("Teilen")), this.props.defaults.isCommentingAllowed && data.depth < 3 ? React.createElement("a", {
      href : "javascript:void(0);",
      onClick : next.bind(this, data),
      name : "create"
    }, self.translations.translate("Antworten")) : null) : null, this.state.isCommentFormDisplayed ? React.createElement("form", {
      ref : "commentForm",
      onSubmit : $$.bind(this, data),
      className : "commentForm"
    }, React.createElement("table", {}, React.createElement("tr", {}, React.createElement("td", {
      colSpan : "4"
    }, React.createElement("div", {}, React.createElement("textarea", {
      name : "text",
      type : "text",
      "max-length" : this.maxLength,
      onFocus : test.bind(this, data),
      valueLink : this.linkState("text"),
      placeholder : self.translations.translate("Schreiben Sie einen Kommentar...")
    }), React.createElement("div", {
      className : "textareaFooter"
    }, React.createElement("p", {
      className : "charsLeft"
    }, self.translations.translate("Verbleibende Anzahl Zeichen"), ": ", this.state.charsLeft))), React.createElement("p", {
      className : "error",
      "data-label" : "text"
    }, self.translations.translate("Kommentar"), "  ", self.translations.translate("fehlt"))))), React.createElement("table", {
      className : "commentDetails"
    }, this.props.defaults.facebookUser ? React.createElement("tbody", {}, React.createElement("tr", {}, React.createElement("td", {
      colSpan : "4",
      className : "facebookUser"
    }, React.createElement("span", {}, this.props.defaults.facebookUser.name, " "), React.createElement("a", {
      href : "javascript:void(0);",
      onClick : handle.bind(this, data)
    }, "(", self.translations.translate("Abmelden"), ")"))), React.createElement("tr", {}, React.createElement("td", {
      colSpan : "4"
    }, React.createElement("label", {}, React.createElement("p", {}, React.createElement("input", {
      type : "checkbox",
      name : "share"
    })), React.createElement("p", {}, "\n                                ", self.translations.translate("Kommentar auf Facebook teilen"), "\n                            "))))) : null, this.props.defaults.facebookUser ? null : React.createElement("tbody", {}, React.createElement("tr", {}, React.createElement("td", {
      colSpan : "4",
      className : "facebookUser"
    }, React.createElement("a", {
      href : "javascript:void(0);",
      onClick : handler.bind(this, data)
    }, React.createElement("span", {
      className : "NnIcon facebookIcon"
    }), self.translations.translate("Mit Facebook anmelden"), "\n                        "))), React.createElement("tr", {}, React.createElement("td", {
      colSpan : "2",
      className : "spaceRight"
    }, React.createElement("input", {
      name : "firstName",
      type : "text",
      "data-validation" : "nodigits",
      placeholder : self.translations.translate("Vorname"),
      defaultValue : this.getFromLocalStorage("firstName")
    }), React.createElement("p", {
      className : "error",
      "data-label" : "firstName"
    }, self.translations.translate("Vorname"), " ", self.translations.translate("fehlt"))), React.createElement("td", {
      colSpan : "2",
      className : "spaceLeft"
    }, React.createElement("input", {
      name : "lastName",
      type : "text",
      "data-validation" : "nodigits",
      placeholder : self.translations.translate("Name"),
      defaultValue : this.getFromLocalStorage("lastName")
    }), React.createElement("p", {
      className : "error",
      "data-label" : "lastName"
    }, self.translations.translate("Name"), " ", self.translations.translate("fehlt")))), React.createElement("tr", {}, React.createElement("td", {
      className : "spaceRight"
    }, React.createElement("input", {
      name : "zipCode",
      type : "text",
      "data-validation" : "digits",
      placeholder : self.translations.translate("PLZ"),
      defaultValue : this.getFromLocalStorage("zipCode")
    }), React.createElement("p", {
      className : "error",
      "data-label" : "zipCode"
    }, self.translations.translate("PLZ"), " ", self.translations.translate("fehlt"))), React.createElement("td", {
      colSpan : "3",
      className : "spaceLeft"
    }, React.createElement("input", {
      name : "city",
      type : "text",
      "," : true,
      "data-validation" : "nodigits",
      placeholder : self.translations.translate("Wohnort"),
      defaultValue : this.getFromLocalStorage("city")
    }), React.createElement("p", {
      className : "error",
      "data-label" : "city"
    }, self.translations.translate("Wohnort"), " ", self.translations.translate("fehlt")))), React.createElement("tr", {}, React.createElement("td", {
      colSpan : "4"
    }, React.createElement("input", {
      name : "email",
      type : "text",
      "data-validation" : "email",
      placeholder : self.translations.translate("E-Mail-Adresse"),
      defaultValue : this.getFromLocalStorage("email")
    }), React.createElement("p", {
      className : "error",
      "data-label" : "email"
    }, self.translations.translate("Bitte geben Sie eine korrekte E-Mail-Adresse ein"))))), React.createElement("tbody", {}, React.createElement("tr", {}, React.createElement("td", {
      colSpan : "4"
    }, React.createElement("label", {
      className : "acceptRules"
    }, React.createElement("p", {}, React.createElement("input", {
      type : "checkbox",
      "data-validation" : "on",
      name : "rules"
    })), React.createElement("p", {}, "\n                                ", self.translations.translate("Ich habe die"), " ", React.createElement("a", {
      href : "javascript:void(0);",
      onClick : element.bind(this, data)
    }, self.translations.translate("Regeln")), " ", self.translations.translate("gelesen und erkl\u00e4re mich einverstanden"), "\n                            ")), React.createElement("p", {
      className : "error",
      "data-label" : "rules"
    }, self.translations.translate("Bitte lesen und akzeptieren Sie die Regeln")))), React.createElement("tr", {}, React.createElement("td", {
      colSpan : "4"
    }, React.createElement("input", {
      type : "submit",
      className : "button",
      value : self.translations.translate("Senden")
    }))))), React.createElement("p", {
      className : "rules",
      dangerouslySetInnerHTML : {
        __html : this.props.defaults.rules
      }
    })) : null, this.state.isBlameFormDisplayed ? React.createElement("form", {
      ref : "blameForm",
      onSubmit : clone.bind(this, data),
      className : "blameForm"
    }, React.createElement("table", {}, React.createElement("tr", {}, React.createElement("td", {}, React.createElement("p", {}, self.translations.translate("Regelverstoss melden")))), React.createElement("tr", {}, React.createElement("td", {}, React.createElement("p", {}, self.translations.translate("Sie sind der Meinung, dass dieser Kommentar gel\u00f6scht werden sollte? Dann f\u00fcllen Sie bitte dieses Formular aus"), ":"))), React.createElement("tr", {}, React.createElement("td", {}, React.createElement("textarea", 
    {
      type : "text",
      name : "blameMessage",
      maxLength : "400",
      placeholder : self.translations.translate("Grund")
    }), React.createElement("p", {
      className : "error",
      "data-label" : "blameMessage"
    }, self.translations.translate("Grund"), " ", self.translations.translate("fehlt")))), React.createElement("tr", {}, React.createElement("td", {}, React.createElement("input", {
      type : "text",
      name : "senderName",
      placeholder : self.translations.translate("Name"),
      "data-validation" : "nodigits",
      defaultValue : this.getFromLocalStorage("senderName")
    }), React.createElement("p", {
      className : "error",
      "data-label" : "senderName"
    }, self.translations.translate("Name"), " ", self.translations.translate("fehlt")))), React.createElement("tr", {}, React.createElement("td", {}, React.createElement("input", {
      type : "text",
      name : "senderEmail",
      placeholder : self.translations.translate("E-Mail-Adresse"),
      "data-validation" : "email",
      defaultValue : this.getFromLocalStorage("senderEmail")
    }), React.createElement("p", {
      className : "error",
      "data-label" : "senderEmail"
    }, self.translations.translate("Bitte geben Sie eine korrekte E-Mail-Adresse ein")))), React.createElement("tr", {}, React.createElement("td", {}, React.createElement("input", {
      type : "submit",
      className : "button",
      value : self.translations.translate("Melden")
    }))))) : null, React.createElement.apply(this, _.flatten(["ul", {}, _.map(data.children, extend.bind(this))]))) : null;
  }
  /**
   * @return {?}
   */
  __exports__["default"] = function() {
    return init.apply(this, [this.props.comment]);
  };
}), define("framework/comments/CommentsList/component", ["exports", "framework/store", "framework/utils", "framework/browser", "framework/facebook", "framework/statistics"], function(__exports__, c, gma, dataAndEvents, $scope, opt_user) {
  var handlebars;
  handlebars = React.createClass({
    mixins : [React.addons.LinkedStateMixin],
    allComments : [],
    filteredComments : [],
    defaultSortBy : "dateDesc",
    /**
     * @return {?}
     */
    getInitialState : function() {
      return{
        comments : [],
        community : [],
        isCommentingAllowed : false,
        facebookUser : null
      };
    },
    /**
     * @return {?}
     */
    getDefaultCommentProps : function() {
      return{
        isCommentingAllowed : this.state.isCommentingAllowed,
        facebookUser : this.state.facebookUser,
        commentsId : this.props.commentsId,
        apiUrl : this.props.apiUrl,
        showDialog : this.showDialog,
        login : this.login,
        logout : this.logout,
        showLoader : this.showLoader,
        hideLoader : this.hideLoader,
        hitWemf : this.hitWemf,
        rules : this.props.rules
      };
    },
    /**
     * @return {?}
     */
    getLoader : function() {
      var $col;
      return $col = $(this.getDOMNode()).find(".fullscreenLoader"), this.props.globalFullscreenLoaderSelector && ($col = $("" + this.props.globalFullscreenLoaderSelector)), $col;
    },
    /**
     * @return {?}
     */
    showLoader : function() {
      return this.getLoader().addClass("NnTransparency").show();
    },
    /**
     * @return {?}
     */
    hideLoader : function() {
      return this.getLoader().removeClass("NnTransparency").hide();
    },
    /**
     * @return {?}
     */
    componentDidMount : function() {
      var $col;
      return $col = $(this.getDOMNode()), this.props.globalFullscreenLoaderSelector || $col.append(require("framework/loader/fullscreenLoader")["default"]()), this.props.globalDialogSelector || ($col.append(require("framework/dialog/templates/dialog")["default"]()), $col.find(".NnDialog").on("click", function(event) {
        return event.delegateTarget.style.display = "none";
      })), RSVP.all([c.store.load("articles", {
        id : this.props.commentsId,
        subkey : "comments"
      }), c.store.load("articles", {
        id : this.props.commentsId,
        subkey : "communities"
      })]).then(function(_this) {
        return function(isSorted) {
          var isCommentingAllowed;
          var contextElem;
          var children;
          var flatten;
          return _this.allComments = isSorted[0].payload.comments, contextElem = isSorted[1].payload.communities, (children = function(elem, element) {
            return null == element && (element = 0), element++, elem.forEach(function(obj) {
              return obj.depth = element, obj.children ? children(obj.children, element) : void 0;
            });
          })(_this.allComments), _this.filteredComments = (flatten = function(target, shallow) {
            return null == shallow && (shallow = []), target.forEach(function(value) {
              return shallow.push(value), value.children ? (flatten(value.children, shallow), value.children = []) : void 0;
            }), shallow;
          })($.extend(true, [], _this.allComments)).filter(function(pane) {
            return pane.selected === true;
          }), _this.filteredComments.sort(function(obj, a) {
            return new Date(a.created_at) - new Date(obj.created_at);
          }), isCommentingAllowed = contextElem.filter(function(statement) {
            return "comment" === statement.type;
          })[0], _this.setState({
            comments : _this.allComments,
            community : isCommentingAllowed,
            isCommentingAllowed : gma.utils.isCommentingAllowed(isCommentingAllowed.allow_comments_weekdays, isCommentingAllowed.allow_comments_weekends)
          }, function() {
            return this.setState({
              sortBy : this.filteredComments.length ? "selected" : this.defaultSortBy
            }, function() {
              var options;
              var _i;
              var i;
              var _j;
              var fire;
              var codeSegments;
              var params;
              if (this.props.showTeaserComments && ("selected" !== this.state.sortBy && this.allComments.length)) {
                /** @type {Array} */
                params = [];
                codeSegments = this.allComments.slice(0, 2);
                /** @type {number} */
                i = _i = 0;
                _j = codeSegments.length;
                for (;_j > _i;i = ++_i) {
                  if (options = codeSegments[i], options = $.extend(true, {}, options), 0 !== options.children.length) {
                    if (1 === i) {
                      /** @type {Array} */
                      options.children = [];
                    } else {
                      this.spliceChildArray(options.children, 1);
                    }
                    params.push(options);
                    break;
                  }
                  /** @type {Array} */
                  options.children = [];
                  params.push(options);
                }
                this.setState({
                  comments : params
                });
              }
              return fire = this.sort, this.sort = function(args) {
                return function(memory) {
                  return fire(memory), args.props.showTeaserComments && $(args.refs.showAllComments.getDOMNode()).hide(), args.hitWemf();
                };
              }(this);
            }), $scope.facebook.init().then(function(dataAndEvents) {
              return function() {
                return dataAndEvents.setState({
                  facebookUser : $scope.facebook.getUser()
                }), $($scope.facebook).on("login logout", function(ignoreMethodDoesntExist, deepDataAndEvents) {
                  return dataAndEvents.setState({
                    facebookUser : deepDataAndEvents
                  });
                });
              };
            }(this)), this.props.callback && this.props.callback(isSorted), this.props.globalFullscreenLoaderSelector ? void 0 : this.hideLoader();
          });
        };
      }(this));
    },
    /**
     * @return {?}
     */
    componentWillUnmount : function() {
      return $($scope.facebook).off("login logout");
    },
    /**
     * @param {Array} arr
     * @param {number} index
     * @return {?}
     */
    spliceChildArray : function(arr, index) {
      return arr.splice(index, arr.length), null != arr[0] ? this.spliceChildArray(arr[0].children, 0) : void 0;
    },
    /**
     * @param {Function} data
     * @return {?}
     */
    sort : function(data) {
      switch(data) {
        case "popularity":
          return this.setState({
            comments : this.allComments.sort(function(b, a) {
              return a.uprates - b.uprates;
            })
          });
        case "dateDesc":
          return this.setState({
            comments : this.allComments.sort(function(obj, a) {
              return new Date(a.created_at) - new Date(obj.created_at);
            })
          });
        case "dateAsc":
          return this.setState({
            comments : this.allComments.sort(function(obj, a) {
              return new Date(obj.created_at) - new Date(a.created_at);
            })
          });
        case "selected":
          return this.setState({
            comments : this.filteredComments
          });
      }
    },
    /**
     * @return {?}
     */
    login : function() {
      return $scope.facebook.login(), this.hitWemf();
    },
    /**
     * @return {?}
     */
    logout : function() {
      return $scope.facebook.logout(), this.hitWemf();
    },
    /**
     * @return {?}
     */
    hitWemf : function() {
      return opt_user.statistics.trackPageView(null, this.props.wemfUrls.map(function(requestUrl) {
        return{
          provider : "wemf",
          url : requestUrl,
          desktop_url : requestUrl
        };
      }));
    },
    /**
     * @return {?}
     */
    showAllComments : function() {
      return $(this.refs.showAllComments.getDOMNode()).hide(), this.setState({
        comments : this.allComments
      }), this.props.showTeaserComments && "selected" === this.state.sortBy ? this.setState({
        sortBy : this.defaultSortBy
      }) : this.hitWemf();
    },
    /**
     * @param {string} args
     * @param {string} callback
     * @return {?}
     */
    showDialog : function(args, callback) {
      return gma.utils.showDialog(this.props.globalDialogSelector ? "" + this.props.globalDialogSelector : $(this.getDOMNode()).find(".NnDialog")[0], args, callback);
    },
    /**
     * @return {?}
     */
    render : function() {
      return require("framework/comments/CommentsList/template")["default"].apply(this);
    },
    /**
     * @param {Function} Constructor
     * @param {Object} mixins
     * @return {?}
     */
    componentDidUpdate : function(Constructor, mixins) {
      return mixins.sortBy !== this.state.sortBy ? this.sort(this.state.sortBy) : void 0;
    }
  });
  __exports__["default"] = handlebars;
}), define("framework/comments/CommentsList/template", ["exports", "framework/translations", "framework/comments/Comment/component"], function(__exports__, self, item) {
  /**
   * @param {Object} c
   * @param {?} var_args
   * @return {?}
   */
  function create(c, var_args) {
    return React.createElement(item.Comment, {
      comment : c,
      key : c.id,
      defaults : this.getDefaultCommentProps()
    });
  }
  /**
   * @return {undefined}
   */
  function func() {
    this.showAllComments();
  }
  /**
   * @return {?}
   */
  __exports__["default"] = function() {
    return React.createElement("div", {}, this.props.showCommentsCount ? React.createElement("h2", {}, "\n        ", this.state.community.count, " ", this.state.community.comment_count_text, "\n    ") : null, React.createElement("ul", {}, this.state.isCommentingAllowed ? React.createElement(item.Comment, {
      comment : {
        released : true
      },
      defaults : this.getDefaultCommentProps()
    }) : null), this.state.comments.length ? React.createElement("div", {
      className : "separator"
    }) : null, this.state.comments.length ? React.createElement("table", {
      className : "NnSelect"
    }, React.createElement("tr", {}, React.createElement("td", {}, React.createElement("span", {
      className : "NnIcon downIcon"
    })), React.createElement("td", {}, React.createElement("select", {
      valueLink : this.linkState("sortBy")
    }, React.createElement("option", {
      value : "dateDesc"
    }, self.translations.translate("Neuste")), React.createElement("option", {
      value : "popularity"
    }, self.translations.translate("Beliebteste")), this.filteredComments.length ? React.createElement("option", {
      value : "selected"
    }, self.translations.translate("Wahl der Redaktion")) : null, React.createElement("option", {
      value : "dateAsc"
    }, self.translations.translate("\u00c4lteste")))))) : null, React.createElement.apply(this, _.flatten(["ul", {
      ref : "commentsList"
    }, _.map(this.state.comments, create.bind(this))])), this.props.showTeaserComments && this.state.comments.length ? React.createElement("a", {
      href : "javascript:void(0);",
      className : "showAllComments",
      ref : "showAllComments",
      onClick : func.bind(this)
    }, "\n        ", self.translations.translate("Alle Kommentare anzeigen"), "\n        ", React.createElement("span", {
      className : "NnIcon downIcon"
    })) : null);
  };
}), define("framework/comments/comments", ["exports", "framework/string", "framework/jquery", "framework/utils", "framework/store", "framework/translations"], function(post, dataAndEvents, deepDataAndEvents, Backbone, i18n, gyp) {
  var comments;
  var parents;
  var self;
  var isEmpty;
  self = {};
  self.config = {
    globalDialogSelector : "",
    globalFullscreenLoaderSelector : "",
    showTeaserComments : false,
    showCommentsCount : true,
    commentRules : "Ehrverletzende, rassistische, unsachliche, themenfremde Kommentare werden gel\u00f6scht.",
    env : ""
  };
  /** @type {Array} */
  parents = [];
  /**
   * @param {string} str
   * @return {?}
   */
  isEmpty = function(str) {
    throw "Comments error: " + str;
  };
  comments = {
    /**
     * @param {Object} container
     * @param {Object} pdataOld
     * @param {Object} options
     * @return {?}
     */
    insert : function(container, pdataOld, options) {
      var next;
      var callback;
      return this.configure = function() {
        return isEmpty("configure() must not be called after insert()");
      }, arguments.length <= 1 && isEmpty("Parameters missing, pass '<element id>, <comments id>, <callback>|<options>'"), parents.indexOf(pdataOld) > -1 && isEmpty("The provided comments id is already in use"), "function" == typeof options && (callback = options), options = $.extend({}, options), options.callback = options.callback || (callback || function() {
      }), next = $(container), next.data("commentsId", pdataOld), parents.push(pdataOld), next.addClass("NnComments"), React.render(React.createElement(require("framework/comments/CommentsList/component")["default"], {
        commentsId : pdataOld,
        callback : options.callback,
        globalDialogSelector : self.config.globalDialogSelector,
        globalFullscreenLoaderSelector : self.config.globalFullscreenLoaderSelector,
        apiUrl : self.config.apiUrl,
        wemfUrls : options.wemfUrls || [],
        showTeaserComments : self.config.showTeaserComments,
        showCommentsCount : self.config.showCommentsCount,
        rules : function() {
          return "mobile" === self.config.env ? self.config.commentRules.replace("%rulesLink%", "/articles/19367311") : self.config.commentRules.replace("%rulesLink%", "/19367311");
        }()
      }), container);
    },
    /**
     * @param {?} replacementHash
     * @return {?}
     */
    configure : function(replacementHash) {
      return $.extend(self.config, replacementHash), gyp.translations.configure(self.config.language), Backbone.utils.configure({
        language : self.config.language
      }), i18n.store.configure({
        apiUrl : self.config.apiUrl
      });
    },
    /**
     * @param {string} name
     * @return {?}
     */
    remove : function(name) {
      var toDelete;
      return toDelete = $(name).data("commentsId"), parents = _.without(parents, toDelete), React.unmountComponentAtNode(name);
    }
  };
  post.comments = comments;
}), define("framework/config", ["exports"], function(model) {
  var directives;
  var parts;
  var attributes;
  var i;
  var self;
  self = {
    rules : {
      dch : 'Wir freuen uns, dass Sie bei uns einen Kommentar abgeben wollen. Ihr Onlinekommentar kann auch auf der Leserbriefseite der gedruckten Zeitung erscheinen. Bitte machen Sie sich vorab mit <a href="%rulesLink%">unseren Kommentarregeln</a> vertraut. Die Redaktion beh\u00e4lt sich vor, Beitr\u00e4ge nicht zu publizieren. Dies gilt ganz allgemein, aber insbesondere f\u00fcr ehrverletzende, rassistische, unsachliche, themenfremde Kommentare oder solche in Mundart oder Fremdsprachen. Kommentare mit Fantasienamen oder offensichtlich falschen Namen werden ebenfalls nicht ver\u00f6ffentlicht. \u00dcber die Entscheide der Redaktion wird weder Rechenschaft abgelegt, noch Korrespondenz gef\u00fchrt. Die Redaktion beh\u00e4lt sich ausserdem vor, Leserkommentare zu k\u00fcrzen. Bitte nehmen Sie zur Kenntnis, dass Ihre Beitr\u00e4ge auch von Google und anderen Suchmaschinen gefunden werden k\u00f6nnen und dass die Redaktion nichts unternehmen kann, um einen Kommentar aus dem Suchmaschinenindex zu l\u00f6schen.',
      wch : "Nous nous r\u00e9jouissons de votre contribution. Veuillez prendre connaissance des conditions d'utilisation suivantes: La r\u00e9daction se r\u00e9serve le droit de ne pas publier un commentaire, et plus particuli\u00e8rement pour les termes insultants, racistes, subjectifs ou inappropri\u00e9s, ainsi que ceux r\u00e9dig\u00e9s en langues \u00e9trang\u00e8res. Les commentaires avec des pseudonymes ou des fausses identit\u00e9s ne seront pas non plus publi\u00e9s. La r\u00e9daction n'a pas \u00e0 rendre de compte ou \u00e0 communiquer au sujet de ses d\u00e9cisions. Aucune explication ne sera donn\u00e9e par t\u00e9l\u00e9phone. La r\u00e9daction se r\u00e9serve \u00e9galement le droit de raccourcir les commentaires des lecteurs. Veuillez \u00e9galement noter que votre commentaire pourra \u00eatre index\u00e9 par Google et tout autre moteur de recherche. La r\u00e9daction ne pourra \u00eatre tenue pour responsable, tout comme elle ne pourra supprimer un commentaire index\u00e9 par un moteur de recherche."
    },
    newest : {
      dch : "Live-Ansicht",
      wch : "En direct"
    },
    newestDescription : {
      dch : "Das Neuste zuerst in der <strong>Live-Ansicht</strong>",
      wch : "<strong>En direct</strong> toute l'actu minute par minute"
    }
  };
  attributes = {
    /**
     * @param {?} replacementHash
     * @return {?}
     */
    configure : function(replacementHash) {
      return $.extend(this, replacementHash);
    },
    version : window.version = "1.153.0-0",
    api : window.api,
    apiUrl : "/api",
    defaultPathname : "/fronts/mobile",
    requestTimeout : 5E3,
    requestRetries : 10,
    timeoutBetweenRetries : 1E3,
    internalConsole : false,
    noNavigation : false,
    initialTransition : true,
    isDebugMode : false,
    isNativeApp : false,
    language : "de",
    commentRules : self.rules.dch,
    newest : self.newest.dch,
    newestDescription : self.newestDescription.dch,
    customers : {
      "24heures" : {
        shortName : "VQH",
        alternativeName : "24heures",
        language : "fr",
        locale : "fr_FR",
        wemf : {
          survey : {
            szmvars : "24heures//CP//",
            url : "http://24heures.wemfbox.ch/2004/01/survey.js"
          },
          nn1 : ["http://newsnetz.wemfbox.ch/cgi-bin/ivw/CP/24heures/", "http://24heures.wemfbox.ch/cgi-bin/ivw/CP/"]
        },
        twitter : {
          accountName : "24heuresch"
        },
        facebook : {
          pageId : 0x240f767ee8ed3c,
          pageUrl : "https://facebook.com/24heures.ch",
          init : {
            appId : 0xe48ae959be71,
            version : "v2.0",
            channelUrl : "http://www.24heures.ch/channel.html",
            status : true,
            cookie : true,
            xfbml : true
          },
          login : {
            scope : "publish_actions,user_likes"
          }
        },
        commentRules : self.rules.wch,
        newest : self.newest.wch,
        newestDescription : self.newestDescription.wch
      },
      bazonline : {
        fullName : "Baslerzeitung",
        shortName : "BaZ",
        alternativeName : "bazonline",
        locale : "de_DE",
        wemf : {
          survey : {
            szmvars : "baz//CP//",
            url : "http://baz.wemfbox.ch/2004/01/survey.js"
          },
          nn1 : ["http://newsnetz.wemfbox.ch/cgi-bin/ivw/CP/baz/", "http://baz.wemfbox.ch/cgi-bin/ivw/CP/"]
        },
        twitter : {
          accountName : "bazonline"
        },
        facebook : {
          pageId : 111236060676,
          pageUrl : "http://www.facebook.com/pages/Basler-Zeitung/111236060676",
          init : {
            appId : 0xa8f52ff12d4b,
            version : "v2.0",
            channelUrl : "http://www.bazonline.ch/channel.html",
            status : true,
            cookie : true,
            xfbml : true
          },
          login : {
            scope : "publish_actions,user_likes"
          }
        },
        commentRules : "Wir freuen uns, dass Sie bei uns einen Kommentar abgeben wollen. Ihr Onlinekommentar kann auch auf der Leserbriefseite der gedruckten Zeitung (mit Angabe Wohnort) erscheinen. Bitte nehmen Sie vorab folgende Regeln zur Kenntnis: Die Redaktion beh\u00e4lt sich vor, Kommentare nicht zu publizieren. Dies gilt ganz allgemein, aber insbesondere f\u00fcr ehrverletzende, rassistische, unsachliche, themenfremde Kommentare oder solche in Mundart oder Fremdsprachen. Kommentare mit Fantasienamen oder mit ganz offensichtlich falschen Namen werden ebenfalls nicht ver\u00f6ffentlicht. \u00dcber die Entscheide der Redaktion wird weder Rechenschaft abgelegt, noch Korrespondenz gef\u00fchrt. Telefonische Ausk\u00fcnfte werden keine erteilt. Die Redaktion beh\u00e4lt sich ausserdem vor, Leserkommentare online wie in der Printausgabe zu k\u00fcrzen. Bitte nehmen Sie zur Kenntnis, dass Ihr Kommentar auch von Google und anderen Suchmaschinen gefunden werden kann und dass die Redaktion nichts unternehmen kann und wird, um einen einmal abgegebenen Kommentar aus dem Suchmaschinenindex zu l\u00f6schen."
      },
      bernerzeitung : {
        fullName : "Bernerzeitung",
        shortName : "BZ",
        alternativeName : "bernerzeitung",
        locale : "de_DE",
        wemf : {
          survey : {
            szmvars : "bernerz//CP//",
            url : "http://bernerz.wemfbox.ch/2004/01/survey.js"
          },
          nn1 : ["http://newsnetz.wemfbox.ch/cgi-bin/ivw/CP/bernerz/", "http://bernerz.wemfbox.ch/cgi-bin/ivw/CP/"]
        },
        twitter : {
          accountName : "BernerZeitung"
        },
        facebook : {
          pageId : 69474637264,
          pageUrl : "http://www.facebook.com/pages/wwwbernerzeitungch/69474637264",
          init : {
            appId : 0x89e8c640dab4,
            version : "v2.0",
            channelUrl : "http://www.bernerzeitung.ch/channel.html",
            status : true,
            cookie : true,
            xfbml : true
          },
          login : {
            scope : "publish_actions,user_likes"
          }
        },
        newest : "Newsticker",
        newestDescription : "Das Neuste zuerst im <strong>Newsticker</strong>"
      },
      derbund : {
        fullName : "Der Bund",
        shortName : "B",
        alternativeName : "derbund",
        locale : "de_DE",
        wemf : {
          survey : {
            szmvars : "derbund//CP//",
            url : "http://derbund.wemfbox.ch/2004/01/survey.js"
          },
          nn1 : ["http://newsnetz.wemfbox.ch/cgi-bin/ivw/CP/derbund/", "http://derbund.wemfbox.ch/cgi-bin/ivw/CP/"]
        },
        twitter : {
          accountName : "derbund"
        },
        facebook : {
          pageId : 0xa2b88c55e7a5,
          pageUrl : "https://facebook.com/derbundch",
          init : {
            appId : 0x91e1137db9d7,
            version : "v2.0",
            channelUrl : "http://www.derbund.ch/channel.html",
            status : true,
            cookie : true,
            xfbml : true
          },
          login : {
            scope : "publish_actions,user_likes"
          }
        }
      },
      lematin : {
        shortName : "LM",
        alternativeName : "lematin",
        language : "fr",
        locale : "fr_FR",
        wemf : {
          survey : {
            url : "http://lematin.wemfbox.ch/2004/01/survey.js",
            szmvars : "lematin//CP//"
          },
          nn1 : ["http://newsnetz.wemfbox.ch/cgi-bin/ivw/CP/lematin/", "http://lematin.wemfbox.ch/cgi-bin/ivw/CP/"]
        },
        facebook : {
          pageId : 0x622626671623,
          pageUrl : "https://www.facebook.com/lematin.ch",
          init : {
            appId : 0xaba71f315271,
            version : "v2.0",
            channelUrl : "http://www.tagesanzeiger.ch/channel.html",
            status : true,
            cookie : true,
            xfbml : true
          },
          login : {
            scope : "publish_actions,user_likes"
          }
        },
        commentRules : self.rules.wch,
        newest : self.newest.wch,
        newestDescription : self.newestDescription.wch
      },
      tagesanzeiger : {
        fullName : "Tages-Anzeiger",
        shortName : "TA",
        alternativeName : "tagi",
        locale : "de_DE",
        wemf : {
          survey : {
            url : "http://tagesanz.wemfbox.ch/2004/01/survey.js",
            szmvars : "tagesanz//CP//"
          },
          nn1 : ["http://newsnetz.wemfbox.ch/cgi-bin/ivw/CP/tagesanz/", "http://tagesanz.wemfbox.ch/cgi-bin/ivw/CP/"]
        },
        twitter : {
          accountName : "tagesanzeiger"
        },
        facebook : {
          pageId : 177194474660,
          pageUrl : "https://facebook.com/Tagesanzeiger",
          init : {
            appId : 0x85cf003bc7a8,
            version : "v2.0",
            channelUrl : "http://www.tagesanzeiger.ch/channel.html",
            status : true,
            cookie : true,
            xfbml : true
          },
          login : {
            scope : "publish_actions,user_likes"
          }
        }
      },
      tdg : {
        shortName : "TDG",
        alternativeName : "tdg",
        language : "fr",
        locale : "fr_FR",
        twitter : {
          accountName : "tdggeneve"
        },
        wemf : {
          survey : {
            url : "http://tdg.wemfbox.ch/2004/01/survey.js",
            szmvars : "tdg//CP//"
          },
          nn1 : ["http://newsnetz.wemfbox.ch/cgi-bin/ivw/CP/tdg/", "http://tdg.wemfbox.ch/cgi-bin/ivw/CP/"]
        },
        facebook : {
          pageId : 0x5fab172cbbe0,
          pageUrl : "https://facebook.com/tdg.ch",
          init : {
            appId : 0xca328161bb05,
            version : "v2.0",
            channelUrl : "http://www.derbund.ch/channel.html",
            status : true,
            cookie : true,
            xfbml : true
          },
          login : {
            scope : "publish_actions,user_likes"
          }
        },
        commentRules : self.rules.wch,
        newest : self.newest.wch,
        newestDescription : self.newestDescription.wch
      },
      zsz : {
        shortName : "ZSZ",
        locale : "de_DE",
        twitter : {
          accountName : "ZSZonline"
        },
        FB : {
          pageId : 385968291506847,
          pageUrl : "https://www.facebook.com/pages/Z%C3%BCrichsee-Zeitung/385968291506847",
          init : {
            appId : 0x5771af8280f98,
            version : "v2.0",
            channelUrl : "http://www.zsz.ch/channel.html",
            status : true,
            cookie : true,
            xfbml : true
          },
          login : {
            scope : "publish_actions,user_likes"
          }
        },
        wemf : {
          nn1 : ["http://newsnetz.wemfbox.ch/cgi-bin/ivw/CP/zsz/", "http://zsz.wemfbox.ch/cgi-bin/ivw/CP/"]
        }
      },
      landbote : {
        shortName : "LB",
        locale : "de_DE",
        twitter : {
          accountName : "landbote"
        },
        FB : {
          pageId : 0x847f82b7cf17,
          pageUrl : "https://www.facebook.com/landbote",
          init : {
            appId : 738531732909881,
            version : "v2.0",
            channelUrl : "http://www.landbote.ch/channel.html",
            status : true,
            cookie : true,
            xfbml : true
          },
          login : {
            scope : "publish_actions,user_likes"
          }
        },
        wemf : {
          nn1 : ["http://newsnetz.wemfbox.ch/cgi-bin/ivw/CP/winti/", "http://winti.wemfbox.ch/cgi-bin/ivw/CP/"]
        }
      },
      zuonline : {
        shortName : "ZU",
        locale : "de_DE",
        twitter : {
          accountName : "ZUnterland"
        },
        FB : {
          pageId : 588623241193743,
          pageUrl : "https://www.facebook.com/pages/Z%C3%BCrcher-Unterl%C3%A4nder/588623241193743",
          init : {
            appId : 900877159943131,
            version : "v2.0",
            channelUrl : "http://www.zuonline.ch/channel.html",
            status : true,
            cookie : true,
            xfbml : true
          },
          login : {
            scope : "publish_actions,user_likes"
          }
        },
        wemf : {
          nn1 : ["http://newsnetz.wemfbox.ch/cgi-bin/ivw/CP/zuonline/", "http://zuonline.wemfbox.ch/cgi-bin/ivw/CP/"]
        }
      },
      berneroberlaender : {
        fullName : "Berner Oberl\u00e4nder",
        shortName : "BO",
        alternativeName : "berneroberlaender",
        locale : "de_DE",
        wemf : {
          survey : {
            szmvars : "bernerz//CP//",
            url : "http://bernerz.wemfbox.ch/2004/01/survey.js"
          },
          nn1 : ["http://newsnetz.wemfbox.ch/cgi-bin/ivw/CP/bernerz/", "http://bernerz.wemfbox.ch/cgi-bin/ivw/CP/"]
        },
        twitter : {
          accountName : "BernerZeitung"
        },
        facebook : {
          pageId : 69474637264,
          pageUrl : "http://www.facebook.com/pages/wwwbernerzeitungch/69474637264",
          init : {
            appId : 0x89e8c640dab4,
            version : "v2.0",
            channelUrl : "http://www.bernerzeitung.ch/channel.html",
            status : true,
            cookie : true,
            xfbml : true
          },
          login : {
            scope : "publish_actions,user_likes"
          }
        },
        newest : "Newsticker",
        newestDescription : "Das Neuste zuerst im <strong>Newsticker</strong>"
      },
      thunertagblatt : {
        fullName : "Thuner Tagblatt",
        shortName : "TT",
        alternativeName : "thunertagblatt",
        locale : "de_DE",
        wemf : {
          survey : {
            szmvars : "bernerz//CP//",
            url : "http://bernerz.wemfbox.ch/2004/01/survey.js"
          },
          nn1 : ["http://newsnetz.wemfbox.ch/cgi-bin/ivw/CP/bernerz/", "http://bernerz.wemfbox.ch/cgi-bin/ivw/CP/"]
        },
        twitter : {
          accountName : "BernerZeitung"
        },
        facebook : {
          pageId : 69474637264,
          pageUrl : "http://www.facebook.com/pages/wwwbernerzeitungch/69474637264",
          init : {
            appId : 0x89e8c640dab4,
            version : "v2.0",
            channelUrl : "http://www.bernerzeitung.ch/channel.html",
            status : true,
            cookie : true,
            xfbml : true
          },
          login : {
            scope : "publish_actions,user_likes"
          }
        },
        newest : "Newsticker",
        newestDescription : "Das Neuste zuerst im <strong>Newsticker</strong>"
      },
      langenthalertagblatt : {
        fullName : "Langenthaler Tagblatt",
        shortName : "LT",
        alternativeName : "langenthalertagblatt",
        locale : "de_DE",
        wemf : {
          survey : {
            szmvars : "bernerz//CP//",
            url : "http://bernerz.wemfbox.ch/2004/01/survey.js"
          },
          nn1 : ["http://newsnetz.wemfbox.ch/cgi-bin/ivw/CP/bernerz/", "http://bernerz.wemfbox.ch/cgi-bin/ivw/CP/"]
        },
        twitter : {
          accountName : "BernerZeitung"
        },
        facebook : {
          pageId : 69474637264,
          pageUrl : "http://www.facebook.com/pages/wwwbernerzeitungch/69474637264",
          init : {
            appId : 0x89e8c640dab4,
            version : "v2.0",
            channelUrl : "http://www.bernerzeitung.ch/channel.html",
            status : true,
            cookie : true,
            xfbml : true
          },
          login : {
            scope : "publish_actions,user_likes"
          }
        },
        newest : "Newsticker",
        newestDescription : "Das Neuste zuerst im <strong>Newsticker</strong>"
      },
      "12app" : {
        shortName : "BOA",
        alternativeName : "12app",
        language : "de",
        locale : "de_DE",
        twitter : {
          accountName : null
        },
        facebook : {
          init : false
        },
        commentRules : self.rules.dch,
        newest : self.newest.dch,
        newestDescription : self.newestDescription.dch
      }
    },
    paywall : {
      enabled : true,
      status : {
        enabled : 2,
        trackOnly : 1,
        disabled : 0
      },
      templateSets : "http://%subdomain%.%currentCustomer%.ch/cre-1.0/cockpit/platform/tamedia/shop/%alternativeName%/api/templatesets.js",
      templateClient : "http://%subdomain%.%currentCustomer%.ch/cre-1.0/static/tracking/1.0/templateclient.js",
      tracking : "http://%subdomain%.%currentCustomer%.ch/cre-1.0/tracking/tracking.js",
      login : "https://%subdomain%.tamedia.ch/tamstorefront/sso/login?callerUri=http://" + window.location.host + "&shopId=%currentCustomer%&iframe=false&formPath=/loginAjax&clear=true",
      logout : "https://%subdomain%.tamedia.ch/tamstorefront/logoutOnLead?callerUri=http://" + window.location.host,
      abo : "http://%subdomain%.%currentCustomer%.ch",
      myAccount : "https://%subdomain%.%currentCustomer%.ch/tamstorefront/my-account"
    }
  };
  $.extend(attributes, window.configOverrides);
  if (directives = decodeURI(window.location.search.replace(/%3B/g, ";").replace(/\+/g, " ")).match(/[?&]appId=([a-zA-Z;= ]+)/)) {
    /** @type {Array.<string>} */
    parts = directives[1].split(";");
    if (parts.length >= 2) {
      if ("iAgentur" === parts[0].trim()) {
        if ("Newsnet" === parts[1].trim()) {
          if (parts.length >= 3) {
            if (["iPhone App", "Android App", "iPad App"].indexOf(parts[2].trim()) >= 0) {
              /** @type {boolean} */
              attributes.isNativeApp = true;
            }
          }
        }
      }
    }
  }
  attributes.currentCustomer = i = window.location.hostname.split(".").reverse()[1];
  if (!attributes.customers[i]) {
    i = attributes.currentCustomer = window.defaultCustomer;
  }
  $.extend(attributes, attributes.customers[i]);
  model.config = attributes;
}), define("framework/dialog/dialog", ["exports"], function(context) {
  var dialog;
  dialog = {
    /**
     * @return {?}
     */
    init : function() {
      return $("#dialog").on("click", function(event) {
        return event.delegateTarget.style.display = "none";
      });
    }
  };
  context.dialog = dialog;
}), define("framework/dialog/templates/dialog", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<div {{#if id}}id="{{id}}"{{/if}} class="NnDialog" name="close">\n    <div>\n        <a class="iconClose"><span class="NnIcon closeIcon"></span></a>\n\n        <h1></h1>\n        <h2></h2>\n        <div>\n            {{> loader}}\n        </div>\n    </div>\n</div>');
}), define("framework/eventsMixin", ["exports"], function(dataAndEvents) {
  var pager;
  /**
   * @return {?}
   */
  pager = function() {
    var self;
    return self = {}, this.registerEvent = function(evt) {
      return null == self[evt] && (self[evt] = []), this;
    }, this.registerEvents = function(xs) {
      var x;
      var _i;
      var _len;
      /** @type {number} */
      _i = 0;
      _len = xs.length;
      for (;_len > _i;_i++) {
        x = xs[_i];
        this.registerEvent(x);
      }
      return this;
    }, this.on = function(type, value) {
      var types;
      var index;
      var i;
      types = type.split(" ");
      /** @type {number} */
      index = 0;
      i = types.length;
      for (;i > index;index++) {
        type = types[index];
        if (null != self[type]) {
          self[type].push(value);
        }
      }
      return this;
    }, this.off = function(type, fn) {
      var events;
      var i;
      var j;
      var _i;
      var _len;
      var _ref;
      events = type.split(" ");
      /** @type {number} */
      j = 0;
      _len = events.length;
      for (;_len > j;j++) {
        if (type = events[j], null != self[type]) {
          if (null != fn) {
            /** @type {number} */
            i = _i = _ref = self[type].length - 1;
            for (;_i >= 0;i = _i += -1) {
              if (self[type][i] === fn) {
                self[type].splice(i, 1);
              }
            }
          } else {
            /** @type {number} */
            self[type].length = 0;
          }
        }
      }
      return this;
    }, this.trigger = function(type, data) {
      var extra;
      var i;
      var k;
      var m;
      if (null != self[type]) {
        m = self[type];
        /** @type {number} */
        i = 0;
        k = m.length;
        for (;k > i;i++) {
          extra = m[i];
          if (null != data) {
            extra.apply(this, null != data.length ? data : [data]);
          } else {
            extra.call(this);
          }
        }
      }
      return this;
    }, this;
  };
  /** @type {function (): ?} */
  dataAndEvents.eventsMixin = pager;
}), define("framework/facebook", ["exports", "framework/config", "framework/browser"], function(req, data, b) {
  var i18n;
  var res;
  var f;
  var defer;
  defer = RSVP.defer();
  /** @type {boolean} */
  f = false;
  /** @type {null} */
  res = null;
  i18n = {
    /**
     * @return {?}
     */
    init : function() {
      return f || (f = true, $.loadExternalScript("//connect.facebook.net/" + data.config.locale + "/sdk.js#xfbml=1&version=v2.3&appId=" + data.config.facebook.init.appId).then(function(dataAndEvents) {
        return function() {
          return FB.init(data.config.facebook.init), FB.getLoginStatus(function(jqXHR) {
            return "connected" === jqXHR.status ? FB.api("/me", function(Data) {
              return res = Data, defer.resolve();
            }) : defer.resolve();
          });
        };
      }(this))), defer.promise;
    },
    /**
     * @return {?}
     */
    getUser : function() {
      return res;
    },
    /**
     * @return {?}
     */
    login : function() {
      return res ? defer.promise : (b.browser.isWP() || data.config.isNativeApp ? location.href = "https://www.facebook.com/dialog/oauth?client_id=" + data.config.facebook.init.appId + "&response_type=token&redirect_uri=" + location.href : window.FB && (defer = RSVP.defer(), FB.login(function(elem) {
        return function(response) {
          return response.authResponse ? FB.api("/me", function(Data) {
            return res = Data, $(elem).triggerHandler("login", res), defer.resolve(res);
          }) : void 0;
        };
      }(this), data.config.facebook.login), res = {}), defer.promise);
    },
    /**
     * @return {?}
     */
    logout : function() {
      return window.FB ? (res = null, $(this).triggerHandler("logout", res), FB.logout()) : void 0;
    },
    /**
     * @param {string} eventData
     * @return {?}
     */
    postOnMyWall : function(eventData) {
      return this.login().then(function() {
        return FB.api("/me/feed/", "post", eventData, function() {
        });
      });
    }
  };
  req.facebook = i18n;
}), define("framework/handlebars/module", ["exports", "framework/utils", "framework/translations"], function(opts, dd, a) {
  var app;
  var self;
  self = {};
  /** @type {null} */
  self.config = null;
  app = {
    /**
     * @param {(Object|string)} opt_attributes
     * @return {?}
     */
    configure : function(opt_attributes) {
      return self.config = opt_attributes;
    },
    /**
     * @return {?}
     */
    init : function() {
      return Handlebars.registerHelper("tamediaIcon", function(dataAndEvents, deepDataAndEvents) {
        return new Handlebars.SafeString('<span class="NnIcon ' + dataAndEvents + 'Icon"></span>');
      }), Handlebars.registerHelper("generatePictureCaption", function(opts, dataAndEvents) {
        var val;
        var p1;
        return val = "", (opts.photographer || opts.provider) && (p1 = function() {
          switch(opts.annotation_type) {
            case "picture":
              return a.translations.translate("Bild");
            case "video":
              return a.translations.translate("Video");
            default:
              return "";
          }
        }(), val += " ", opts.annotation_type && (val += p1 + ": "), opts.photographer && (val += opts.photographer), opts.photographer && (opts.provider && (val += "/")), opts.provider && (val += opts.provider)), (opts.title ? "<b>" + opts.title + "</b>" : "") + opts.caption + (val ? '<span class="annotation">' + val + "</span>" : "");
      }), Handlebars.registerHelper("isCategoryLink", function(options) {
        return "category" === this.linked_object_type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isWeatherLink", function(options) {
        return "weather" === this.linked_object_type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isCommunityTypeComment", function(options) {
        return "comment" === this.type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isCommunityTypeFacebook", function(options) {
        return "facebook" === this.type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isCommunityTypeTwitter", function(options) {
        return "twitter" === this.type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isCommentingAllowed", function(dataAndEvents, options) {
        return dd.utils.isCommentingAllowed(dataAndEvents.allow_comments_weekdays, dataAndEvents.allow_comments_weekends) ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("unlessMaxDepth", function(options) {
        return this.depth < 3 ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("stripAndTrimHtml", function(n) {
        var requestUrl;
        var expr;
        return null == n && (n = ""), expr = n.replace(/<[^>]+>/g, ""), requestUrl = expr.substr(0, 85), /^\S/.test(expr.substr(85)) && (requestUrl = requestUrl.replace(/\s+\S*$/, "")), requestUrl + "...";
      }), Handlebars.registerHelper("linkTo", function(uri, options) {
        var tagNameArr;
        var name;
        var _ref3;
        var value;
        /** @type {Array} */
        tagNameArr = [];
        _ref3 = options.hash;
        for (name in _ref3) {
          value = _ref3[name];
          if (uri.indexOf(name) < 0 && ["href", "data-isLinkTo"].indexOf(name) < 0) {
            tagNameArr.push(name + '="' + value + '"');
          } else {
            uri = uri.replace(new RegExp("%" + name + "%"), value);
          }
        }
        return history.pushState || (uri = "#" + uri), '<a href="' + uri + '" data-isLinkTo="true" ' + tagNameArr.join(" ") + ">" + options.fn(this) + "</a>";
      }), Handlebars.registerHelper("stripHtml", function(v) {
        return dd.utils.stripHtml(v);
      }), Handlebars.registerHelper("isSupportedBoxtype", function(options) {
        return["articles", "slideshow", "picture", "video", "youtube", "info", "link", "chartMap", "chart", "livevideo", "picturevoting", "quiz", "iframe", "stock_exchange_chart", "poll"].indexOf(this.boxtype) >= 0 ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("displayMediaType", function(options) {
        return["slideshow", "video"].indexOf(this.mediatype) > -1 ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isBreakingNewsArticlesBox", function(options) {
        return "articles" === this.boxtype && "breaking-news" === this.layout_type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isArticlesBox", function(options) {
        return "articles" === this.boxtype && "breaking-news" !== this.layout_type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isSlideshowOverviewBox", function(options) {
        return "slideshowoverview" === this.boxtype ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isMeteonewsBox", function(options) {
        return "meteonews" === this.boxtype ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isSlideshowElement", function(options) {
        return "element_slideshow" === this.type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isSlideshowBox", function(options) {
        var elem;
        var ret;
        return "slideshow" === this.boxtype && (null != (null != (elem = this.slideshow) && null != (ret = elem.pictures) ? ret.length : void 0) && this.slideshow.pictures.length > 0) ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isPictureElement", function(options) {
        return "element_picture" === this.type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isPictureBox", function(options) {
        return "picture" === this.boxtype ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isVideoElement", function(options) {
        return "element_video" === this.type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isVideoBox", function(options) {
        return "video" === this.boxtype ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isAudioBox", function(options) {
        return "audio" === this.boxtype ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isYouTubeBox", function(options) {
        return "youtube" === this.boxtype ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isInfoBox", function(options) {
        return "info" === this.boxtype ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isLinkBox", function(options) {
        return "link" === this.boxtype ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isHtmlElement", function(options) {
        return "element_html" === this.type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isChartMap", function(options) {
        return "element_chart_map" === this.type || "element_chart" === this.type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isChartMapBox", function(options) {
        return "chartMap" === this.boxtype ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isChartBox", function(options) {
        return "chart" === this.boxtype ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isStockExchangeChartBox", function(options) {
        return "stock_exchange_chart" === this.boxtype ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isLiveStreamBox", function(options) {
        return "livevideo" === this.boxtype ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isLiveticker", function(options) {
        return this.liveticker_id ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isPictureVotingBox", function(options) {
        return "picturevoting" === this.boxtype ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isQuizBox", function(options) {
        return "quiz" === this.boxtype ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isIframeElement", function(options) {
        return "element_iframe" === this.type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isIframeBox", function(options) {
        return "iframe" === this.boxtype ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isIframeBoxMap", function(options) {
        return "iframe" !== this.boxtype || "chart" !== this.iframe_class_name && "map" !== this.iframe_class_name ? options.inverse(this) : options.fn(this);
      }), Handlebars.registerHelper("isPollElement", function(options) {
        return "element_poll" === this.type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isPollBox", function(options) {
        return "poll" === this.boxtype ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isTagsBox", function(options) {
        return "tags" === this.boxtype ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isBlogsBox", function(options) {
        return "blogs" === this.boxtype ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("hasIframeHeight", function(options) {
        return "chart" === this.iframe_class_name || "fixed_height" === this.iframe_class_name ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isNavigationTypeTitle", function(options) {
        return "title" === this.navigation_type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isNavigationTypeCategory", function(options) {
        return "category" === this.navigation_type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isString", function(err, options) {
        return "string" == typeof err ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isWertend", function(options) {
        return "undefined" != typeof this && null !== this ? "analyse" === this.layout_type || "analyse_wide" === this.layout_type ? options.fn(this) : options.inverse(this) : void 0;
      }), Handlebars.registerHelper("isLeadDecoration", function(options) {
        return "undefined" != typeof this && (null !== this && (null != this.decoration && "lead" === this.decoration.position)) ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isTopDecoration", function(options) {
        return "undefined" != typeof this && (null !== this && (null != this.decoration && "top" === this.decoration.position)) ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isBottomDecoration", function(options) {
        return "undefined" != typeof this && (null !== this && (null != this.decoration && "bottom" === this.decoration.position)) ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("translate", function(x) {
        return a.translations.translate(x);
      }), Handlebars.registerHelper("appifyUrl", function(password, year) {
        return null != password ? (password += (password.indexOf("?") >= 0 ? "&" : "?") + "appId=" + self.config.appId, password + (null != year ? "&" + year : "")) : "";
      }), Handlebars.registerHelper("isPublireportage", function(options) {
        return "undefined" != typeof this && null !== this ? "publireportage" === this.layout_type ? options.fn(this) : options.inverse(this) : void 0;
      }), Handlebars.registerHelper("isExternalArticle", function(options) {
        return "undefined" != typeof this && null !== this ? "link" === this.layout_type ? options.fn(this) : options.inverse(this) : void 0;
      }), Handlebars.registerHelper("isTeaser", function(options) {
        switch(this.layout_type) {
          case "link_wide":
          ;
          case "link_wide_extended":
          ;
          case "category":
          ;
          case "quote":
          ;
          case "html_teaser":
            return options.inverse(this);
          default:
            return options.fn(this);
        }
      }), Handlebars.registerHelper("isTeaserWide", function(options) {
        return "link_wide" === this.layout_type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isTeaserWideExtended", function(options) {
        return "link_wide_extended" === this.layout_type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isTeaserCollection", function(options) {
        return "category" === this.layout_type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isTeaserQuote", function(options) {
        return "quote" === this.layout_type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isTeaserHtml", function(options) {
        return "html_teaser" === this.layout_type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isLayoutTypeCategory", function(options) {
        return "category" === this.layout_type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isLayoutTypeSlideshow", function(options) {
        return "slideshow" === this.layout_type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isLayoutTypeStoryBundle", function(options) {
        return "storybundle" === this.pageElementLayoutType ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isLayoutTypeCollection", function(options) {
        return "collection" === this.pageElementLayoutType ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("toTwoDecimals", function(a) {
        return null != a ? a.toFixed(2) : void 0;
      }), Handlebars.registerHelper("getPageElementLink", function() {
        switch(this.linked_object_type) {
          case "category":
            return "/categories/" + this.linked_object_id;
          case "weather":
            return "/weather";
          default:
            return "javascript:void(0);";
        }
      }), Handlebars.registerHelper("getStockPerformanceColor", function(fps) {
        return fps > 0 ? "green" : 0 > fps ? "red" : "gray";
      }), Handlebars.registerHelper("join", function(mod, off) {
        return mod.map(function(buf) {
          return buf[off];
        }).join(", ");
      }), Handlebars.registerHelper("getCustomerShortName", function() {
        return self.config.shortName;
      }), Handlebars.registerHelper("getFromLocalStorage", function(storageKey) {
        try {
          return localStorage.getItem(storageKey);
        } catch (b) {
        }
      }), Handlebars.registerHelper("getTime", function() {
        var dt;
        var code;
        return dt = new Date, code = dt.getMinutes(), 1 === code.toString().length && (code = "0" + code), dt.getHours() + ":" + code;
      }), Handlebars.registerHelper("getTimestamp", function() {
        return Math.round((new Date).getTime() / 1E3);
      }), Handlebars.registerHelper("isInternalUrl", function(options) {
        return "internal_url" === this.navigation_type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isWeatherPath", function(options) {
        return "weather" === this.path ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isFrontPath", function(options) {
        return "" === this.path ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("formatMeteonewsDay", function(year) {
        var scaled;
        return scaled = ["Sa", "So", "Mo", "Di", "Mi", "Do", "Fr"], a.translations.translate(scaled[(new Date(year)).getDay()]);
      }), Handlebars.registerHelper("formatDate", function(date) {
        return dd.utils.date.format(date);
      }), Handlebars.registerHelper("formatDateShort", function(date) {
        return dd.utils.date.formatShort(date);
      }), Handlebars.registerHelper("formatTime", function(duration) {
        return dd.utils.date.formatTime(duration);
      }), Handlebars.registerHelper("isPaywallEnabled", function(options) {
        return this.site.paywall_status === self.config.paywall.status.enabled && self.config.paywall.enabled ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isDch", function(options) {
        return dd.utils.isDch() ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isDebugMode", function(options) {
        return self.config.isDebugMode ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("unlessReleasedAndHasNoChildren", function(options) {
        return("function" == typeof this ? this("undefined" != typeof released && (null !== released && (this.released === false && 0 === this.children.length))) : void 0) ? options.inverse(this) : options.fn(this);
      }), Handlebars.registerHelper("calculatePercent", function(a, b) {
        var change;
        return change = a / b * 10, Math.round(100 * change) / 10;
      }), Handlebars.registerHelper("isSVGSupported", function(options) {
        return document.createElement("svg").getAttributeNS ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isFirst", function(dataAndEvents, options) {
        return 0 === dataAndEvents ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isEmptyArticle", function(options) {
        return 0 !== this.timestamp_updated_at || null !== this.title ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("getArticlesCount", function() {
        return this.articles.filter(function(dataAndEvents) {
          return "article" === dataAndEvents.layout_type;
        }).length;
      }), Handlebars.registerHelper("getChannel", function() {
        return null != this.video.channel ? this.video.channel.toLowerCase() : "mobile";
      }), Handlebars.registerHelper("isFooter", function(options) {
        return "footer" === this.type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("isDropdownMenu", function(options) {
        return "Mehr" === this.name ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerHelper("limit", function(a, attributes) {
        return null != a ? a.slice(0, attributes) : void 0;
      }), Handlebars.registerHelper("getMediaIcon", function() {
        return "picture" === this.mediatype || "iframe" === this.mediatype ? "arrowRight" : "zattoo" === this.mediatype ? "video" : this.mediatype;
      }), Handlebars.registerHelper("isShareElement", function(options) {
        return "element_share" === this.type ? options.fn(this) : options.inverse(this);
      }), Handlebars.registerPartial("socialMediaBox", function(channel) {
        return require("framework/socialMedia/box")["default"](channel);
      }), Handlebars.registerPartial("commentsLink", function(channel) {
        return require("framework/socialMedia/commentsLink")["default"](channel);
      }), Handlebars.registerPartial("loader", function(channel) {
        return require("framework/loader/loader")["default"](channel);
      }), Handlebars.registerPartial("dialog", function(channel) {
        return require("framework/dialog/templates/dialog")["default"](channel);
      }), Handlebars.registerPartial("fullscreenLoader", function(channel) {
        return require("framework/loader/fullscreenLoader")["default"](channel);
      }), Handlebars.registerPartial("elements", function(channel) {
        return require("framework/listicles/templates/elements")["default"](channel);
      }), Handlebars.registerPartial("navigation", function(channel) {
        return require("framework/listicles/templates/navigation")["default"](channel);
      });
    }
  };
  opts.handlebars = app;
}), define("framework/jquery", ["framework/utils", "framework/browser"], function(gma, b) {
  var success;
  /**
   * @param {string} type
   * @param {string} val
   * @param {string} v
   * @param {?} pageX
   * @param {?} easing
   * @param {Function} yes
   * @return {?}
   */
  $.fn.NnTransit = function(type, val, v, pageX, easing, yes) {
    var others;
    return others = [], this.each(function() {
      return others.push(new RSVP.Promise(function(canvas) {
        return function(jQuery, dataAndEvents) {
          var el;
          return el = $(canvas), el.css(type, val), function(el) {
            return setTimeout(function() {
              var eventName;
              return eventName = "transitionend", b.browser.isWebKit() && (eventName = "webkitTransitionEnd"), el.css("transition", type + " " + pageX + " " + easing), el.css("transition"), el.one(eventName, function(types) {
                return yes && yes(), el.css("transition", ""), jQuery(types.delegateTarget);
              }).css(type, v);
            }, 0);
          }(el);
        };
      }(this)));
    }), RSVP.all(others);
  };
  /**
   * @return {?}
   */
  $.fn.NnFadeIn = function() {
    return this.css("visibility", "visible").NnTransit("opacity", 0, 1, "0.1s", "ease-in-out");
  };
  /**
   * @return {?}
   */
  $.fn.NnFadeOut = function() {
    return this.NnTransit("opacity", 1, 0, "0.1s", "ease-in-out").then(function(parent) {
      return function() {
        return parent.css("visibility", "hidden");
      };
    }(this));
  };
  /**
   * @param {string} name
   * @return {?}
   */
  $.fn.applyTargetToLinks = function(name) {
    return this.find("a").attr("target", name), this;
  };
  /**
   * @param {boolean} dataAndEvents
   * @return {?}
   */
  $.fn.isInViewport = function(dataAndEvents) {
    var paddingBox;
    if (null == dataAndEvents && (dataAndEvents = false), 0 === this.length) {
      return false;
    }
    if (1 === this.length) {
      return paddingBox = this[0].getBoundingClientRect(), dataAndEvents ? paddingBox.top >= 0 && (paddingBox.left >= 0 && (paddingBox.bottom <= $(window).height() && paddingBox.right <= $(window).width())) : paddingBox.bottom >= 0 && (paddingBox.right >= 0 && (paddingBox.top <= $(window).height() && paddingBox.left <= $(window).width()));
    }
    throw "Cannot use 'isInViewport' for collections";
  };
  /**
   * @return {?}
   */
  $.fn.padding = function() {
    var style;
    if (1 === this.length) {
      return style = window.getComputedStyle(this[0]), {
        top : parseFloat(style.paddingTop),
        right : parseFloat(style.paddingRight),
        bottom : parseFloat(style.paddingBottom),
        left : parseFloat(style.paddingLeft)
      };
    }
    throw "Cannot get paddings over collections";
  };
  /**
   * @return {?}
   */
  $.fn.margin = function() {
    var computedStyle;
    if (1 === this.length) {
      return computedStyle = window.getComputedStyle(this[0]), {
        top : parseFloat(computedStyle.marginTop),
        bottom : parseFloat(computedStyle.marginBottom)
      };
    }
    throw "Selector cannot get margins over collections";
  };
  /**
   * @return {?}
   */
  $.fn.validate = function() {
    var input;
    var x;
    var loading;
    var isLengthProperty;
    var value;
    var excludes;
    return excludes = function() {
      var _i;
      var _len;
      var xs;
      var bucket;
      xs = this.find("input, textarea");
      /** @type {Array} */
      bucket = [];
      /** @type {number} */
      _i = 0;
      _len = xs.length;
      for (;_len > _i;_i++) {
        x = xs[_i];
        input = $(x);
        input.removeClass("invalid");
        value = function() {
          switch(input.attr("data-validation")) {
            case "nodigits":
              return/^[A-Za-z\u00C0-\u00FF\/. -]+$/.test(input.val());
            case "digits":
              return/^[0-9]+$/.test(input.val());
            case "email":
              return/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(input.val());
            case "on":
              return input[0].checked === true;
            default:
              return "" !== input.val();
          }
        }();
        isLengthProperty = input.attr("name");
        loading = this.find("[data-label='" + isLengthProperty + "']");
        if (value) {
          loading.hide();
        } else {
          loading.show();
        }
        bucket.push(value);
      }
      return bucket;
    }.call(this), -1 === excludes.indexOf(false);
  };
  $.ajaxSettings = {
    timeout : null,
    contentType : null
  };
  /**
   * @param {?} settings
   * @return {?}
   */
  $.ajaxSetup = function(settings) {
    return $.extend($.ajaxSettings, settings);
  };
  /**
   * @param {string} response
   * @param {Object} s
   * @param {string} textStatus
   * @param {string} result
   * @param {?} fn
   * @return {?}
   */
  success = function(response, s, textStatus, result, fn) {
    return null != s.error && s.error.call(this), fn(textStatus), s.global ? $(document).trigger("ajaxError", [{}, {
      statusText : result,
      url : s.url,
      type : s.type,
      timeout : response.timeout
    }]) : void 0;
  };
  /**
   * @param {?} opt_attributes
   * @param {Object} options
   * @return {?}
   */
  $.ajax = function(opt_attributes, options) {
    var value;
    var attrs;
    var rurl;
    return 1 === arguments.length && "object" == typeof opt_attributes ? (options = opt_attributes, options = $.extend({}, $.ajaxSettings, options)) : (options = $.extend({}, $.ajaxSettings, options), options.url = opt_attributes), null == options.type && (options.type = "GET"), null == options.global && (options.global = true), null == options.data && (options.data = ""), null == options.contentType && (options.contentType = "application/x-www-form-urlencoded; charset=UTF-8"), rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, 
    attrs = rurl.exec(window.location.href) || [], value = rurl.exec(options.url.toLowerCase()) || [], options.crossDomain = value.length > 0 && (attrs && (attrs[1] !== value[1] || (attrs[2] !== value[2] || (attrs[3] || ("http:" === attrs[1] ? "80" : "443")) !== (value[3] || ("http:" === value[1] ? "80" : "443"))))), options.cache === false && (options.url = gma.utils.addRnd(options.url)), new RSVP.Promise(function(cb, sqlt) {
      var json;
      var request;
      var xhr;
      return "json" === options.dataType && options.url.indexOf("callback=?") > -1 ? (json = options.url.replace("callback=?", "callback=jsonpCallback"), window.jsonpCallback = function(er) {
        return null != options.success && options.success.call(this, er), cb(er);
      }, $.loadExternalScript(json).then(function() {
        return delete window.jsonpCallback;
      })) : options.crossDomain && (!b.browser.supportsCors() && (window.XDomainRequest && "GET" === options.type)) ? (request = new XDomainRequest, null != options.timeout && (request.timeout = options.timeout), request.open(options.type, options.url), request.onprogress = function() {
      }, request.onload = function() {
        var er;
        var attributes;
        if (!("json" === options.dataType || "text" !== options.dataType && /\/json/i.test(request.contentType))) {
          throw "$.ajax: XDomainRequest only supports json requests until now";
        }
        if (request.responseText) {
          try {
            /** @type {*} */
            er = JSON.parse(request.responseText);
            if (null != options.success) {
              options.success.call(this, er);
            }
            cb(er);
          } catch (name) {
            attributes = name;
            success(request, options, $.extend(attributes, {
              message : "$.ajax() " + options.type + ": Error parsing: " + options.url
            }), "parsererror", sqlt);
          }
        } else {
          if (null != options.success) {
            options.success.call(this, "");
          }
          cb("");
        }
        return null != options.complete ? options.complete.call(this) : void 0;
      }, request.onerror = function() {
        return success(request, options, "$.ajax() " + options.type + ": Unknown error on: " + options.url + "\n " + request.responseText, "Error in XDomainRequest", sqlt);
      }, request.ontimeout = function() {
        return success(request, options, "$.ajax() " + options.type + ": " + options.url, "timeout", sqlt);
      }, null != options.beforeSend && options.beforeSend(request), request.send("")) : (xhr = new XMLHttpRequest, xhr.open(options.type, options.url, true), null != options.timeout && (xhr.timeout = options.timeout), xhr.onreadystatechange = function() {
        var er;
        var attributes;
        var expectationResult;
        if (4 === xhr.readyState) {
          if (200 === xhr.status) {
            if (xhr.responseText) {
              try {
                /** @type {*} */
                er = JSON.parse(xhr.responseText);
                if (null != options.success) {
                  options.success.call(this, er);
                }
                cb(er);
              } catch (name) {
                attributes = name;
                success(xhr, options, $.extend(attributes, {
                  message : "$.ajax() " + options.type + ": Error parsing: " + options.url
                }), "parsererror", sqlt);
              }
            } else {
              if (null != options.success) {
                options.success.call(this, "");
              }
              cb("");
            }
          } else {
            expectationResult = 0 === xhr.status ? "Unknown error (might be CORS or a timeout)" : xhr.statusText;
            success(xhr, options, "$.ajax() " + options.type + ": Status " + xhr.status + ' "' + expectationResult + '" on: ' + options.url, expectationResult, sqlt);
          }
          if (null != options.complete) {
            return options.complete.call(this);
          }
        }
      }, xhr.setRequestHeader("Content-Type", options.contentType), null != options.beforeSend && options.beforeSend(xhr), xhr.send(options.data));
    });
  };
  /**
   * @param {string} name
   * @return {?}
   */
  $.get = function(name) {
    return $.ajax(name);
  };
  /**
   * @param {string} url
   * @param {Object} optgroup
   * @param {Object} success
   * @return {?}
   */
  $.getJSON = function(url, optgroup, success) {
    return $.isFunction(optgroup) && (success = optgroup, optgroup = void 0), $.ajax({
      dataType : "json",
      url : url,
      data : optgroup,
      success : success
    });
  };
  /**
   * @param {?} attributes
   * @param {Object} msg
   * @return {?}
   */
  $.post = function(attributes, msg) {
    return $.ajax(attributes, {
      type : "POST",
      data : msg
    });
  };
  /**
   * @param {string} path
   * @return {?}
   */
  $.loadExternalScript = function(path) {
    return new RSVP.Promise(function(fetchOnlyFunction, $sanitize) {
      var insertAt;
      var script;
      return script = document.createElement("script"), script.type = "text/javascript", script.async = true, script.src = path, "object" == typeof document.attachEvent ? script.onreadystatechange = function() {
        return "loaded" === script.readyState || "complete" === script.readyState ? fetchOnlyFunction() : void 0;
      } : ($(script).on("load", function() {
        return fetchOnlyFunction();
      }), $(script).on("error", function(attributes) {
        return $sanitize($.extend(attributes, {
          message : "$.loadExternalScript(): Cannot load " + path
        }));
      })), insertAt = document.getElementsByTagName("script")[0], insertAt.parentNode.insertBefore(script, insertAt);
    });
  };
  $.event.special.contentResize = {
    /**
     * @param {?} opt_attributes
     * @param {?} namespaces
     * @return {?}
     */
    setup : function(opt_attributes, namespaces) {
      if ("IFRAME" !== this.nodeName.toUpperCase()) {
        throw "$.event.special.contentResize: This event works with iframes only, and they must have a src specified!";
      }
      return this.__contentResizeId = Math.random().toString().split(".").pop(), $(window).on("message." + this.__contentResizeId, function($image, event) {
        return this.contentWindow === event.originalEvent.source && (!$image.attr("src") || ($image.attr("src").search(/^[a-z]+:\/\//g) < 0 || event.originalEvent.origin === $image.attr("src").match(/[a-z]+:\/\/[^\/]+/g)[0])) ? $image.trigger("contentResize", [event.originalEvent.data.width, event.originalEvent.data.height, $image.width(), $image.height()]) : void 0;
      }.bind(this, $(this)));
    },
    /**
     * @param {?} namespaces
     * @return {?}
     */
    teardown : function(namespaces) {
      return $(window).off("message." + this.__contentResizeId);
    }
  };
}), define("framework/listicles/module", ["exports", "framework/jquery", "framework/config", "framework/store", "framework/handlebars/module", "framework/poll/module", "framework/slideshow/slideshow"], function(args, deepDataAndEvents, data, amplify, $window, Client, dataAndEvents) {
  var set;
  var doSelect;
  var self;
  var callback;
  var $rootScope;
  var notify;
  var show;
  var all;
  var resolver;
  var init;
  var constructPanel;
  $rootScope = {};
  $rootScope.config = {};
  /** @type {null} */
  $rootScope.config.apiUrl = null;
  Client.poll.configure($rootScope.config.apiUrl);
  resolver = RSVP.defer();
  /**
   * @return {?}
   */
  all = function() {
    return RSVP.all([$.loadExternalScript("http://platform.twitter.com/widgets.js"), $.loadExternalScript("http://platform.instagram.com/" + data.config.locale + "/embeds.js")]).then(function() {
      return resolver.resolve();
    });
  };
  /**
   * @param {?} elem
   * @return {?}
   */
  show = function(elem) {
    var x;
    var j;
    return j = self.container.find(".slideshowContainer"), x = (new dataAndEvents.Slideshow(j.get(0), elem.pictures, $.extend({
      fullyResponsive : true
    }))).show();
  };
  /**
   * @param {string} msg
   * @return {?}
   */
  notify = function(msg) {
    return Client.poll.init({
      payload : msg
    }, msg.wrapped_id);
  };
  /**
   * @param {Object} panel
   * @return {?}
   */
  constructPanel = function(panel) {
    return panel.find(".NnIcon").click(function() {
      return $(this).parent().toggleClass("open"), doSelect(panel);
    });
  };
  /**
   * @param {?} obj
   * @return {?}
   */
  set = function(obj) {
    var self;
    var x;
    return x = require("framework/listicles/templates/navigation")["default"](obj), self = $("<div class='floatingNav'></div>").append(x), self.insertAfter(".article"), init(), constructPanel(self.find("nav"));
  };
  /**
   * @param {Object} panel
   * @return {?}
   */
  doSelect = function(panel) {
    var base;
    return base = $("header").outerHeight(true), panel.find("ul li").click(function() {
      var inner;
      var t;
      var arr;
      var cx;
      return panel.removeClass("open"), cx = $(this).index(), t = $(".NnListicle .card").eq(cx), arr = t.offset().top - base, inner = $(".article").scrollTop(), $(".article").scrollTop(inner + arr - 14);
    });
  };
  /**
   * @return {?}
   */
  init = function() {
    var x;
    var windowScrollTop;
    return windowScrollTop = self.container.offset().top + $(".article").scrollTop() - $("header").outerHeight(true) + self.container.find("nav").outerHeight(true) + 14, x = self.container.offset().top + $(".article").scrollTop() + self.container.outerHeight(true), $(".article").off().scroll(function() {
      var lastDestinationTop;
      return lastDestinationTop = $(this).scrollTop(), lastDestinationTop > windowScrollTop && lastDestinationTop < x - $(".article").outerHeight(true) ? $("#article .floatingNav").show() : $("#article .floatingNav").hide();
    });
  };
  /**
   * @param {?} root
   * @return {?}
   */
  callback = function(root) {
    var b;
    return b = new RSVP.Promise(function($sanitize, dataAndEvents) {
      return $(root).on("load", function() {
        return $sanitize();
      });
    });
  };
  self = {
    container : null,
    promises : [],
    /**
     * @param {string} opt_attributes
     * @return {?}
     */
    configure : function(opt_attributes) {
      return $rootScope.config.apiUrl = opt_attributes;
    },
    /**
     * @param {string} expectedNumberOfNonCommentArgs
     * @param {string} left
     * @param {?} fn
     * @return {?}
     */
    init : function(expectedNumberOfNonCommentArgs, left, fn) {
      return $window.handlebars.init(), all(), this.container = $(expectedNumberOfNonCommentArgs), new RSVP.Promise(function(self) {
        return function($timeout) {
          return amplify.store.materialize({
            rootKey : "listicle",
            key : "element",
            id : left,
            /**
             * @param {?} obj
             * @return {?}
             */
            callback : function(obj) {
              var v;
              var msg;
              var k;
              var i;
              var _len;
              var len;
              var val;
              var _ref;
              var rawParams;
              val = require("framework/listicles/templates/listicles")["default"](obj);
              self.container.html(val);
              _ref = obj.elements;
              /** @type {number} */
              k = 0;
              _len = _ref.length;
              for (;_len > k;k++) {
                v = _ref[k];
                rawParams = v.elements;
                /** @type {number} */
                i = 0;
                len = rawParams.length;
                for (;len > i;i++) {
                  switch(msg = rawParams[i], msg.type) {
                    case "element_slideshow":
                      show(msg);
                      break;
                    case "element_poll":
                      notify(msg);
                  }
                }
              }
              return resolver.promise.then(function() {
                return twttr.widgets.load(), instgrm.Embeds.process();
              }), self.container.find("img").each(function() {
                return self.promises.push(callback(this));
              }), self.container.find("iframe").each(function() {
                return self.promises.push(callback(this));
              }), RSVP.all(self.promises).then(function() {
                return "mobile" === data.config.env && (constructPanel($(".NnListicle nav")), set(obj)), fn && fn(self.container), $timeout();
              });
            }
          });
        };
      }(this));
    }
  };
  args.listicles = self;
}), define("framework/listicles/templates/elements", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('{{#isHtmlElement}}\n    {{{value}}}\n{{/isHtmlElement}}\n\n{{#isPictureElement}}\n    <img src="{{url}}"/>\n    <span>Quelle: {{source}}</span>\n{{/isPictureElement}}\n\n{{#isIframeElement}}\n    <div class="iframeContainer {{iframe_type}}">\n        <iframe src="{{url}}" scrolling="no"></iframe>\n    </div>\n{{/isIframeElement}}\n\n{{#isSlideshowElement}}\n    <div class="slideshowContainer" data-id="{{id}}"></div>\n{{/isSlideshowElement}}\n\n{{#isPollElement}}\n    <div data-pollId="{{wrapped_id}}">\n        {{!-- will be dynamically added in the article --}}\n    </div>\n{{/isPollElement}}\n\n{{#isVideoElement}}\n    <div class="iframeContainer video">\n        <iframe src="http://player.newsnetz.tv/player/iframe.php?vid={{id}}&frame=16&adurl={{show_ad}}&video_title={{title}}&video_lead={{lead}}&poster={{poster_picture_url}}&language={{#isDch}}de{{else}}fr{{/isDch}}"></iframe>\n    </div>\n{{/isVideoElement}}\n\n{{#isShareElement}}\n    <ul>\n        <li><a href="whatsapp://send?text=The text to share!" class="NnIcon whatsappIcon"></a></li>\n        <li><a href="" class="NnIcon facebookIcon"></a></li>\n        <li><a href="" class="NnIcon emailIcon"></a></li>\n        <li><a href="" class="NnIcon twitterIcon"></a></li>\n    </ul>\n    <div class="clear"></div>\n{{/isShareElement}}');
}), define("framework/listicles/templates/listicles", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<div class="NnListicle">\n    {{> navigation}}\n    {{#each elements}}\n        <div class="card">\n            <h3>{{title}}</h3>\n            <div class="elements">\n                {{#each elements}}\n                    <div class="element {{type}} {{#isPollElement}}NnPollBox{{/isPollElement}}">\n                        {{> elements}}\n                    </div>\n                {{/each}}\n            </div>\n        </div>\n    {{/each}}\n</div>');
}), define("framework/listicles/templates/navigation", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<nav>\n    <span class="NnIcon listIcon"></span>\n    <h3>{{title}}</h3>\n    <ul>\n        {{#each elements}}\n            <li><a href="javascript:void(0);">{{title}}</a></li>\n        {{/each}}\n    </ul>\n</nav>');
}), define("framework/liveticker/Liveticker/component", ["exports", "framework/string", "framework/translations", "framework/utils"], function(eventHandle, dataAndEvents, self, gma) {
  var elem;
  var lang;
  elem = React.createClass({
    /**
     * @return {?}
     */
    getInitialState : function() {
      return this._messagesIndex = {}, this._inlineElementsIndex = {}, this._visibleMessages = [], this._updateTimestampInterval = null, this._lastUpdatedAt = null, {
        isActive : false,
        isLoading : true,
        messages : [],
        limit : this.props.config.initialLimit,
        orderBy : "desc",
        lastUpdatedAtText : "",
        hasQuestionForm : false,
        questionListId : null
      };
    },
    /**
     * @return {?}
     */
    componentDidMount : function() {
      return lang.lang(this.props.config.lang);
    },
    /**
     * @param {Error} nextProps
     * @param {Object} parts
     * @return {?}
     */
    shouldComponentUpdate : function(nextProps, parts) {
      var i;
      var part;
      if (parts.messages.length > 0) {
        for (i in parts) {
          if (part = parts[i], part !== this.state[i]) {
            return true;
          }
        }
      }
      return false;
    },
    /**
     * @param {Function} Constructor
     * @param {Object} obj
     * @return {?}
     */
    componentWillUpdate : function(Constructor, obj) {
      if (this.state.orderBy !== obj.orderBy && this._sortMessageArray(obj.messages, obj.orderBy), this._visibleMessages = obj.messages.slice(0, obj.limit), obj.isActive) {
        if (null != this.props.config.lastUpdatedAtText && null == this._updateTimestampInterval) {
          return obj.lastUpdatedAtText = this.props.config.lastUpdatedAtText.replace("%s", lang.fromNow(this._lastUpdatedAt)), this._updateTimestampInterval = setInterval(function(self) {
            return function() {
              return self.setState({
                lastUpdatedAtText : self.props.config.lastUpdatedAtText.replace("%s", lang.fromNow(self._lastUpdatedAt))
              });
            };
          }(this), 1E3);
        }
      } else {
        if (null != this._updateTimestampInterval) {
          return clearInterval(this._updateTimestampInterval), this._updateTimestampInterval = null;
        }
      }
    },
    /**
     * @return {?}
     */
    render : function() {
      return require("framework/liveticker/Liveticker/template")["default"].apply(this);
    },
    /**
     * @param {Function} Constructor
     * @param {number} mixins
     * @return {?}
     */
    componentDidUpdate : function(Constructor, mixins) {
      var $window;
      return this._hasSimplePlaceholder() || this._addSimplePlaceholder(), this.refs.questionForm && ($window = $(this.refs.questionForm.getDOMNode()), $window.off("submit.sendQuestion").on("submit.sendQuestion", this.sendQuestion)), this.props.config.afterRender.call(this);
    },
    /**
     * @return {?}
     */
    componentWillUnmount : function() {
      return null != this._updateTimestampInterval ? (clearInterval(this._updateTimestampInterval), this._updateTimestampInterval = null) : void 0;
    },
    /**
     * @return {?}
     */
    useButton : function() {
      return "button" === this.props.config.limitStyle;
    },
    /**
     * @return {?}
     */
    useLoader : function() {
      return "scroller" === this.props.config.limitStyle;
    },
    /**
     * @return {?}
     */
    isLimitReached : function() {
      return this.state.limit >= this.state.messages.length;
    },
    /**
     * @return {?}
     */
    increaseLimit : function() {
      return this.setState({
        limit : Math.min(this.state.limit + this.props.config.limitIncreaseValue, this.state.messages.length)
      });
    },
    /**
     * @param {?} event
     * @return {?}
     */
    sendQuestion : function(event) {
      var doc;
      var $scope;
      return doc = $($scope = this.refs.questionForm.getDOMNode()), doc.validate() ? ($(this.getDOMNode()).find(".fullscreenLoader").addClass("NnTransparency").show(), $.ajax({
        url : this.props.config.http.baseUrl + "/questions/" + this.state.questionListId,
        type : "PUT",
        contentType : "application/json; charset=UTF-8",
        data : JSON.stringify({
          question : {
            question : $scope.question.value,
            firstname : $scope.firstName.value,
            lastname : $scope.lastName.value,
            city : $scope.city.value
          }
        }),
        success : function(dataAndEvents) {
          return function() {
            return gma.utils.showDialog($(dataAndEvents.getDOMNode()).find(".NnDialog"), self.translations.translate("Nachricht versandt"), self.translations.translate("Vielen Dank f\u00fcr Ihren Beitrag. Ihre Nachricht wurde versandt. Die Redaktion wird ausgew\u00e4hlte Einsendungen ver\u00f6ffentlichen.")), dataAndEvents._resetQuestionForm();
          };
        }(this),
        error : function(dataAndEvents) {
          return function() {
            return gma.utils.showDialog($(dataAndEvents.getDOMNode()).find(".NnDialog"), self.translations.translate("Senden fehlgeschlagen"), self.translations.translate("Ihre Nachricht konnte aus technischen Gr\u00fcnden nicht \u00fcbermittelt werden."));
          };
        }(this),
        complete : function(dataAndEvents) {
          return function() {
            return $(dataAndEvents.getDOMNode()).find(".fullscreenLoader").hide().removeClass("NnTransparency");
          };
        }(this)
      })) : this._removeSimplePlaceholderClasses(), event.preventDefault();
    },
    /**
     * @param {Array} opt_attributes
     * @return {?}
     */
    handleMessages : function(opt_attributes) {
      var b;
      var a;
      var pdataCur;
      var messages;
      if (opt_attributes.length) {
        messages = this.state.messages;
        /** @type {number} */
        b = 0;
        a = opt_attributes.length;
        for (;a > b;b++) {
          pdataCur = opt_attributes[b];
          messages = this._handleMessage(pdataCur, messages);
        }
        return this._sortMessageArray(messages), this.props.config.afterHandleMessages.call(this, messages), messages;
      }
    },
    /**
     * @param {Object} data
     * @param {Node} message
     * @return {?}
     */
    _handleMessage : function(data, message) {
      var dataText;
      return data.released && (data.updated_at > this._lastUpdatedAt && (this._lastUpdatedAt = data.updated_at), data.icon_class_name = this.props.config["iconClass" + (null != (dataText = data.icon_name) ? dataText : "").camelCase(true)], data.hasScore = null != data.score_home && null != data.score_visitor, data.hasMinuteOfPlay = null != data.minute_of_play, "5399d0ae87da8bbf5e0524b6" === data.id && (data.picture_medium_url = "http://fw010226-flywheel.netdna-ssl.com/wp-content/uploads/2013/11/REIGNWOLF-256x256.jpg", 
      data.text = '<iframe width="560" height="315" src="https://www.youtube.com/embed/cYNQfqrX_ns" frameborder="0" allowfullscreen></iframe>')), data.id in this._messagesIndex ? data.released ? this._updateMessage(data, message) : this._deleteMessage(data, message) : data.released ? this._createMessage(data, message) : message;
    },
    /**
     * @param {Object} data
     * @param {(Node|string)} message
     * @return {?}
     */
    _createMessage : function(data, message) {
      var percent;
      var filter;
      var _ref;
      return percent = {}, percent.$push = [data], _ref = React.addons.update(message, percent), filter = _ref[_ref.length - 1], this._messagesIndex[filter.id] = filter, this._handleInlineElements(filter), _ref;
    },
    /**
     * @param {Object} handle
     * @param {HTMLElement} string
     * @return {?}
     */
    _updateMessage : function(handle, string) {
      var name;
      var clone;
      var result;
      var src;
      var data;
      return name = this._getMessageIndexById(handle.id, string), result = {}, result[name] = {
        $merge : handle
      }, data = React.addons.update(string, result), src = data[name], clone = this._messagesIndex[src.id], clone.text !== src.text && this._deleteInlineElementsIndex(clone), this._messagesIndex[src.id] = src, this._handleInlineElements(src), data;
    },
    /**
     * @param {Object} head
     * @param {HTMLElement} bytes
     * @return {?}
     */
    _deleteMessage : function(head, bytes) {
      var camelKey;
      var msg;
      var data;
      return msg = this._getMessageIndexById(head.id, bytes), camelKey = {}, camelKey.$splice = [[msg, 1]], data = React.addons.update(bytes, camelKey), delete this._messagesIndex[head.id], this._deleteInlineElementsIndex(head), data;
    },
    /**
     * @param {string} values
     * @param {(number|string)} delta_y
     * @return {?}
     */
    _sortMessageArray : function(values, delta_y) {
      return null == delta_y && (delta_y = this.state.orderBy), values.sort(function(dataAndEvents) {
        return function(a, b) {
          return a.sort > b.sort ? "desc" === delta_y ? -1 : 1 : a.sort < b.sort ? "desc" === delta_y ? 1 : -1 : 0;
        };
      }(this));
    },
    /**
     * @param {?} name
     * @param {Object} value
     * @return {?}
     */
    _getMessageIndexById : function(name, value) {
      var ix;
      var _j;
      var ln;
      var v;
      if (null == value) {
        value = this.state.messages;
      }
      /** @type {number} */
      ix = _j = 0;
      ln = value.length;
      for (;ln > _j;ix = ++_j) {
        if (v = value[ix], v.id === name) {
          return ix;
        }
      }
    },
    /**
     * @param {Object} elem
     * @return {?}
     */
    _handleInlineElements : function(elem) {
      var world;
      var i;
      var max;
      var worlds;
      worlds = elem.inline_elements;
      /** @type {number} */
      i = 0;
      max = worlds.length;
      for (;max > i;i++) {
        world = worlds[i];
        this._inlineElementsIndex[world.id] = world;
      }
      return elem.text_parts = this._extractInlineElements(elem.text, elem.inline_elements);
    },
    /**
     * @param {Object} dest
     * @return {?}
     */
    _deleteInlineElementsIndex : function(dest) {
      var group;
      var i;
      var len;
      var groups;
      var eventPath;
      groups = dest.inline_elements;
      /** @type {Array} */
      eventPath = [];
      /** @type {number} */
      i = 0;
      len = groups.length;
      for (;len > i;i++) {
        group = groups[i];
        eventPath.push(delete this._inlineElementsIndex[group.id]);
      }
      return eventPath;
    },
    /**
     * @param {string} line
     * @param {?} dataAndEvents
     * @return {?}
     */
    _extractInlineElements : function(line, dataAndEvents) {
      var i;
      var data;
      var colNames;
      var re;
      if (colNames = [], re = /\x3c!--{{inline_element\(['"]?([a-fA-F0-9]+)['"]?\)}}--\x3e/g, i = 0, "string" == typeof line) {
        for (;data = re.exec(line);) {
          if (data.index > i) {
            colNames.push(data.input.substring(i, data.index));
          }
          if (data[1] in this._inlineElementsIndex) {
            colNames.push(this._inlineElementsIndex[data[1]]);
          }
          /** @type {number} */
          i = data.index + data[0].length;
        }
        if (i < line.length) {
          colNames.push(line.substring(i, line.length));
        }
      }
      return colNames;
    },
    /**
     * @return {?}
     */
    _hasSimplePlaceholder : function() {
      var $document;
      return this.refs.questionForm ? ($document = $(this.refs.questionForm.getDOMNode()), $document.find(".simple-placeholder").length > 0) : false;
    },
    /**
     * @return {?}
     */
    _addSimplePlaceholder : function() {
      var $document;
      return this.refs.questionForm ? ($document = $(this.refs.questionForm.getDOMNode()), $document.find("[placeholder]:not(.placeholderForLegacyBrowsers)").simplePlaceholder({
        placeholderClass : "placeholderForLegacyBrowsers"
      })) : void 0;
    },
    /**
     * @return {?}
     */
    _removeSimplePlaceholderClasses : function() {
      var $document;
      return this.refs.questionForm ? ($document = $(this.refs.questionForm.getDOMNode()), $document.find(".placeholderForLegacyBrowsers").removeClass("placeholderForLegacyBrowsers")) : void 0;
    },
    /**
     * @return {?}
     */
    _resetQuestionForm : function() {
      var options;
      return this.refs.questionForm && (options = this.refs.questionForm.getDOMNode(), options.question.value = "", void 0 === document.createElement("input").placeholder) ? $.simplePlaceholder.showPlaceholder.call(options.question) : void 0;
    }
  });
  lang = {
    _lang : "de",
    de : {
      relativeTime : {
        future : "in %s",
        past : "vor %s",
        s : "wenigen Sek.",
        ss : "wenigen Sek.",
        m : "1 Min.",
        mm : "%d Min.",
        h : "1 Std.",
        hh : "%d Std.",
        d : "1 Tag",
        dd : "%d Tg.",
        M : "1 Monat",
        MM : "%d Mnt.",
        y : "1 Jahr",
        yy : "%d Jhr."
      }
    },
    fr : {
      relativeTime : {
        future : "dans %s",
        past : "il y a %s",
        s : "quelques secondes",
        ss : "quelques secondes",
        m : "une minute",
        mm : "%d minutes",
        h : "une heure",
        hh : "%d heures",
        d : "un jour",
        dd : "%d jours",
        M : "un mois",
        MM : "%d mois",
        y : "un an",
        yy : "%d ans"
      }
    },
    /**
     * @param {string} name
     * @param {Object} value
     * @return {?}
     */
    lang : function(name, value) {
      return this._lang = name, null != value ? $.extend(this[name], value) : void 0;
    },
    /**
     * @param {(number|string)} x2
     * @param {Object} test
     * @return {?}
     */
    fromNow : function(x2, test) {
      var configList;
      var part;
      var pattern;
      var x1;
      return null == test && (test = this._lang), x1 = (new Date).getTime(), x1 >= x2 ? (pattern = this[test].relativeTime.past, x2 = x1 - x2) : (pattern = this[test].relativeTime.future, x2 -= x1), configList = ["ms", "s", "m", "h", "d", "M", "y"], part = function(dataAndEvents) {
        return function() {
          var i;
          var _i;
          var ln;
          /** @type {number} */
          i = _i = 0;
          ln = configList.length;
          for (;ln > _i;i = ++_i) {
            switch(part = configList[i]) {
              case "ms":
                x2 /= 1E3;
                break;
              case "s":
              ;
              case "m":
                if (!(x2 / 60 >= 1)) {
                  return part;
                }
                x2 /= 60;
                break;
              case "h":
                if (!(x2 / 24 >= 1)) {
                  return part;
                }
                x2 /= 24;
                break;
              case "d":
                if (!(x2 / 30 >= 1)) {
                  return part;
                }
                x2 /= 30;
                break;
              case "M":
                if (!(x2 / 365 >= 1)) {
                  return part;
                }
                x2 /= 365;
                break;
              default:
                return part;
            }
          }
        };
      }(this)(), x2 >= 2 ? pattern.replace("%s", this[test].relativeTime[part + part].replace("%d", Math.floor(x2))) : pattern.replace("%s", this[test].relativeTime[part].replace("%d", Math.floor(x2)));
    }
  };
  eventHandle.Liveticker = elem;
}), define("framework/liveticker/Liveticker/template", ["exports", "framework/translations", "framework/liveticker/LivetickerMessage/component", "framework/loader/loader", "framework/loader/snakeLoader", "framework/loader/fullscreenLoader", "framework/dialog/templates/dialog"], function(deepDataAndEvents, self, item, __exports__, dataAndEvents, ignoreMethodDoesntExist, textAlt) {
  /**
   * @param {(Object|string)} result
   * @param {Object} message
   * @param {?} _value
   * @return {?}
   */
  function resolve(result, message, _value) {
    return React.createElement(item.LivetickerMessage, {
      key : message.id,
      message : message,
      config : result,
      parentState : this.state
    });
  }
  /**
   * @param {Object} options
   * @return {?}
   */
  function create(options) {
    return React.createElement("div", {
      className : "NnLiveticker" + (this.state.isLoading ? " loading" : "") + (this.state.isActive ? " active" : "")
    }, this.state.hasQuestionForm ? React.createElement("div", {
      className : "questionForm"
    }, React.createElement("h2", {}, "Live-Chat"), React.createElement("form", {
      ref : "questionForm"
    }, React.createElement("div", {
      dangerouslySetInnerHTML : {
        __html : ignoreMethodDoesntExist["default"]()
      }
    }), React.createElement("div", {
      dangerouslySetInnerHTML : {
        __html : textAlt["default"]()
      }
    }), React.createElement("table", {}, React.createElement("tr", {}, React.createElement("td", {
      colSpan : "3"
    }, React.createElement("textarea", {
      name : "question",
      placeholder : self.translations.translate("Ihre Frage...")
    }), React.createElement("p", {
      className : "error",
      "data-label" : "question"
    }, self.translations.translate("Frage"), " ", self.translations.translate("fehlt")))), React.createElement("tr", {}, React.createElement("td", {}, React.createElement("input", {
      type : "text",
      name : "firstName",
      placeholder : self.translations.translate("Vorname"),
      "data-validation" : "nodigits"
    }), React.createElement("p", {
      className : "error",
      "data-label" : "firstName"
    }, self.translations.translate("Vorname"), " ", self.translations.translate("fehlt"))), React.createElement("td", {}, React.createElement("input", {
      type : "text",
      name : "lastName",
      placeholder : self.translations.translate("Name"),
      "data-validation" : "nodigits"
    }), React.createElement("p", {
      className : "error",
      "data-label" : "lastName"
    }, self.translations.translate("Name"), " ", self.translations.translate("fehlt"))), React.createElement("td", {}, React.createElement("input", {
      type : "text",
      name : "city",
      placeholder : self.translations.translate("Wohnort"),
      "data-validation" : "nodigits"
    }), React.createElement("p", {
      className : "error",
      "data-label" : "city"
    }, self.translations.translate("Wohnort"), " ", self.translations.translate("fehlt"))))), "\n\n            ", self.translations.translate("Der Live-Chat wird moderiert. Die Redaktion wird ausgew\u00e4hlte Einsendungen ver\u00f6ffentlichen."), "\n            ", React.createElement("br", {}), React.createElement("button", {
      type : "submit"
    }, self.translations.translate("Senden")))) : null, React.createElement("div", {
      className : "header"
    }, this.state.isLoading ? React.createElement("h2", {
      className : "loadingCaption"
    }, self.translations.translate("Liveticker wird geladen...")) : null, !this.state.isLoading && this.state.isActive ? React.createElement("h2", {
      className : "activeCaption"
    }, React.createElement("div", {
      className : "waiter",
      dangerouslySetInnerHTML : {
        __html : dataAndEvents["default"]({
          visible : true
        })
      }
    }), "\n            ", self.translations.translate("Liveticker aktualisiert automatisch"), "\n            ", React.createElement("span", {
      className : "lastUpdatedAt"
    }, this.state.lastUpdatedAtText)) : null, this.state.isLoading || this.state.isActive ? null : React.createElement("h2", {
      className : "inactiveCaption"
    })), React.createElement.apply(this, _.flatten(["ul", {
      className : "messages"
    }, _.map(this._visibleMessages, resolve.bind(this, options))])), React.createElement("div", {
      className : "footer"
    }, !this.isLimitReached() && this.useLoader() || this.state.isLoading ? React.createElement("div", {
      dangerouslySetInnerHTML : {
        __html : __exports__["default"]({
          visible : true
        })
      }
    }) : null, !this.isLimitReached() && this.useButton() ? React.createElement("button", {
      onClick : this.increaseLimit
    }, self.translations.translate("Mehr anzeigen...")) : null));
  }
  /**
   * @return {?}
   */
  deepDataAndEvents["default"] = function() {
    return create.apply(this, [this.props.config]);
  };
}), define("framework/liveticker/LivetickerMessage/component", ["exports"], function(eventHandle) {
  var elem;
  elem = React.createClass({
    /**
     * @return {?}
     */
    getInitialState : function() {
      return this._markedAsChangedTimeout = null, this._renderInlineElementsCallbacks = [], this._ignoreChangedsInProperties = ["sort", "updated_at", "received_at", "inline_elements", "text_parts", "refresh", "cache"], {
        markedAsChanged : false
      };
    },
    /**
     * @return {?}
     */
    componentWillMount : function() {
      return this._renderInlineElements(this.props.message);
    },
    /**
     * @return {?}
     */
    componentDidMount : function() {
      return this.props.parentState.isLoading || this._markAsChanged(), this._callInlineElementCallbacks(), this.props.config.afterRenderMessage.call(this, this.props.message, this.getDOMNode(), "create");
    },
    /**
     * @param {Error} nextProps
     * @param {?} var_args
     * @return {?}
     */
    shouldComponentUpdate : function(nextProps, var_args) {
      var name;
      var _ref;
      var val;
      if (var_args.markedAsChanged !== this.state.markedAsChanged) {
        return true;
      }
      _ref = nextProps.message;
      for (name in _ref) {
        if (val = _ref[name], this._ignoreChangedsInProperties.indexOf(name) < 0 && val !== this.props.message[name]) {
          return true;
        }
      }
      return false;
    },
    /**
     * @param {Object} Constructor
     * @param {number} mixins
     * @return {?}
     */
    componentWillUpdate : function(Constructor, mixins) {
      return this.props.message.text !== Constructor.message.text ? (this._destroyInlineElements(), this._renderInlineElements(Constructor.message)) : void 0;
    },
    /**
     * @return {?}
     */
    render : function() {
      return require("framework/liveticker/LivetickerMessage/template")["default"].apply(this);
    },
    /**
     * @param {Function} Constructor
     * @param {number} mixins
     * @return {?}
     */
    componentDidUpdate : function(Constructor, mixins) {
      return mixins.markedAsChanged === this.state.markedAsChanged && this._markAsChanged(), this._callInlineElementCallbacks(), this.props.config.afterRenderMessage.call(this, this.props.message, this.getDOMNode(), "update", true);
    },
    /**
     * @return {?}
     */
    componentWillUnmount : function() {
      return clearTimeout(this._markedAsChangedTimeout), this._markedAsChangedTimeout = null, this._destroyInlineElements(), this.props.config.beforeDestroyMessage.call(this, this.props.message, this.getDOMNode());
    },
    /**
     * @return {?}
     */
    _isDesktopScreen : function() {
      return screen.width > 640;
    },
    /**
     * @return {?}
     */
    _markAsChanged : function() {
      return null != this.props.config.markMessageChangedTimespan && (new Date).getTime() - this.props.message.received_at < 2E3 ? (this.setState({
        markedAsChanged : true
      }), this._markedAsChangedTimeout && clearTimeout(this._markedAsChangedTimeout), this._markedAsChangedTimeout = setTimeout(function(instance) {
        return function() {
          return instance.isMounted() ? instance.setState({
            markedAsChanged : false
          }) : void 0;
        };
      }(this), this.props.config.markMessageChangedTimespan)) : void 0;
    },
    /**
     * @return {?}
     */
    _destroyInlineElements : function() {
      var item;
      var p;
      var i;
      var items;
      var elements;
      items = this.props.message.inline_elements;
      /** @type {Array} */
      elements = [];
      /** @type {number} */
      p = 0;
      i = items.length;
      for (;i > p;p++) {
        item = items[p];
        elements.push(this.props.config.beforeDestroyInlineElement.call(this, this.props.message, item, this.getDOMNode()));
      }
      return elements;
    },
    /**
     * @param {?} token
     * @return {?}
     */
    _renderInlineElements : function(token) {
      var index;
      var _i;
      var _len;
      var _ref2;
      var rulesets;
      var paths;
      /** @type {string} */
      token.text_parts_rendered = "";
      _ref2 = token.text_parts;
      /** @type {Array} */
      rulesets = [];
      /** @type {number} */
      index = _i = 0;
      _len = _ref2.length;
      for (;_len > _i;index = ++_i) {
        paths = _ref2[index];
        if ("string" == typeof paths) {
          rulesets.push(token.text_parts_rendered += paths);
        } else {
          rulesets.push(function(self) {
            return function(arg) {
              var value;
              return value = self.props.config.renderInlineElement.call(self, token, arg, function(val) {
                return null != val ? $("#inlineElement_" + arg.id).html(val) : void 0;
              }), "string" == typeof value ? token.text_parts_rendered += value : null != value && (token.text_parts_rendered += '<div id="inlineElement_' + arg.id + '"></div>', $.isFunction(value)) ? self._renderInlineElementsCallbacks.push(value) : void 0;
            };
          }(this)(paths));
        }
      }
      return rulesets;
    },
    /**
     * @return {?}
     */
    _callInlineElementCallbacks : function() {
      var world;
      var i;
      var max;
      var worlds;
      worlds = this._renderInlineElementsCallbacks;
      /** @type {number} */
      i = 0;
      max = worlds.length;
      for (;max > i;i++) {
        (world = worlds[i])();
      }
      return this._renderInlineElementsCallbacks.length = 0;
    }
  });
  eventHandle.LivetickerMessage = elem;
}), define("framework/liveticker/LivetickerMessage/template", ["exports"], function(__exports__) {
  /**
   * @param {Element} data
   * @return {?}
   */
  function create(data) {
    return React.createElement("li", {
      className : "message" + (this.state.markedAsChanged ? " changed" : ""),
      id : "message_" + data.id
    }, React.createElement("div", {
      className : "header"
    }, data.title && !data.icon_class_name ? React.createElement("span", {
      className : "title"
    }, data.title) : null, data.hasMinuteOfPlay ? React.createElement("span", {
      className : "time"
    }, data.minute_of_play, "'") : null, data.icon_class_name ? React.createElement("span", {
      className : "spriteIcon " + data.icon_class_name
    }) : null, data.icon_class_name ? React.createElement("span", {
      className : "title"
    }, data.title) : null, data.hasScore ? React.createElement("span", {
      className : "score"
    }, data.score_home, ":", data.score_visitor) : null), React.createElement("div", {
      className : "text"
    }, this._isDesktopScreen() && data.picture_medium_url ? React.createElement("img", {
      src : data.picture_medium_url,
      className : "picture"
    }) : null, !this._isDesktopScreen() && data.picture_small_url ? React.createElement("img", {
      src : data.picture_small_url,
      className : "picture"
    }) : null, React.createElement("div", {
      dangerouslySetInnerHTML : {
        __html : data.text_parts_rendered
      }
    })), React.createElement("div", {
      className : "clear"
    }));
  }
  /**
   * @return {?}
   */
  __exports__["default"] = function() {
    return create.apply(this, [this.props.message]);
  };
}), define("framework/liveticker/liveticker", ["exports", "framework/translations"], function(eventHandle, self) {
  var elem;
  elem = function() {
    /**
     * @param {Object} inplace
     * @param {Object} deepDataAndEvents
     * @return {undefined}
     */
    function $(inplace, deepDataAndEvents) {
      this._initialize();
      this._setup(inplace, deepDataAndEvents);
      this._fetchWholeFeed(function(dataAndEvents) {
        return function() {
          return dataAndEvents._fetchMessageUpdates(function() {
            return dataAndEvents._listenForMessageUpdates();
          });
        };
      }(this));
    }
    return $.prototype.isLimitReached = function() {
      return this._reactComponent ? this._reactComponent.isLimitReached() : void 0;
    }, $.prototype.increaseLimit = function() {
      return this._reactComponent.increaseLimit();
    }, $.prototype.destroy = function() {
      return this._teardown();
    }, $.prototype.isLoading = function() {
      return this._reactComponent.state.isLoading;
    }, $.prototype.pause = function() {
      return this._isPaused = true;
    }, $.prototype.resume = function() {
      return this._isPaused = false, this._listenForMessageUpdates();
    }, $.prototype._initialize = function() {
      return this._el = null, this._$el = null, clearTimeout(this._fetchMessageUpdatesTimeout), clearTimeout(this._listenForMessageUpdatesTimeout), clearTimeout(this._fetchWholeFeedTimeout), this._config = null, this._refetchIntervalInMs = null, this._fetchMessageUpdatesTimeout = null, this._listenForMessageUpdatesTimeout = null, this._fetchWholeFeedTimeout = null, this._lastRequestedAt = null, this._isFetchingWholeFeed = false, this._isFetchingMessageUpdates = false, this._isPaused = false, this._reactComponent = 
      null;
    }, $.prototype._setup = function(data, deepDataAndEvents) {
      var afterFetchMessageUpdates;
      var renderInlineElement;
      var limitIncreaseValue;
      var config;
      var startData;
      var iconClassRedCard;
      var iconClassYellowRedCard;
      var iconClassGoal;
      var iconClassStart;
      var iconClassEnd;
      var iconClassHockeyEnd;
      var iconClassHockeyGoal;
      var beforeDestroyInlineElement;
      var iconClassHockeyThirdEnd;
      var iconClassMatchpoint;
      var iconClassSetpoint;
      var iconClassBreakpoint;
      var iconClassSubstitution;
      var lang;
      var lastUpdatedAtText;
      var afterRenderMessage;
      var view_model;
      var beforeDestroyMessage;
      var afterHandleMessages;
      var element;
      var ret;
      var markMessageChangedTimespan;
      return this._config = deepDataAndEvents, null == (afterFetchMessageUpdates = this._config).afterFetchMessageUpdates && (afterFetchMessageUpdates.afterFetchMessageUpdates = function() {
        return "";
      }), null == (renderInlineElement = this._config).renderInlineElement && (renderInlineElement.renderInlineElement = function() {
        return "";
      }), null == (beforeDestroyInlineElement = this._config).beforeDestroyInlineElement && (beforeDestroyInlineElement.beforeDestroyInlineElement = function() {
      }), null == (afterRenderMessage = this._config).afterRenderMessage && (afterRenderMessage.afterRenderMessage = function() {
      }), null == (view_model = this._config).afterRender && (view_model.afterRender = function() {
      }), null == (beforeDestroyMessage = this._config).beforeDestroyMessage && (beforeDestroyMessage.beforeDestroyMessage = function() {
      }), null == (afterHandleMessages = this._config).afterHandleMessages && (afterHandleMessages.afterHandleMessages = function() {
      }), null == (element = this._config).technology && (element.technology = "html5"), null != this._config.initialLimit && (null == (ret = this._config).limitStyle && (ret.limitStyle = "button")), null == (markMessageChangedTimespan = this._config).markMessageChangedTimespan && (markMessageChangedTimespan.markMessageChangedTimespan = 5E3), null == (limitIncreaseValue = this._config).limitIncreaseValue && (limitIncreaseValue.limitIncreaseValue = 5), null == (config = this._config).iconClassPenalty && 
      (config.iconClassPenalty = "sprite-liveticker-penalty"), null == (startData = this._config).iconClassYellowCard && (startData.iconClassYellowCard = "sprite-liveticker-yellowCard"), null == (iconClassRedCard = this._config).iconClassRedCard && (iconClassRedCard.iconClassRedCard = "sprite-liveticker-redCard"), null == (iconClassYellowRedCard = this._config).iconClassYellowRedCard && (iconClassYellowRedCard.iconClassYellowRedCard = "sprite-liveticker-yellowRedCard"), null == (iconClassGoal = this._config).iconClassGoal && 
      (iconClassGoal.iconClassGoal = "sprite-liveticker-goal"), null == (iconClassStart = this._config).iconClassStart && (iconClassStart.iconClassStart = "sprite-liveticker-startEnd"), null == (iconClassEnd = this._config).iconClassEnd && (iconClassEnd.iconClassEnd = "sprite-liveticker-startEnd"), null == (iconClassHockeyEnd = this._config).iconClassHockeyEnd && (iconClassHockeyEnd.iconClassHockeyEnd = "sprite-liveticker-hockeyEnd"), null == (iconClassHockeyGoal = this._config).iconClassHockeyGoal && 
      (iconClassHockeyGoal.iconClassHockeyGoal = "sprite-liveticker-hockeyGoal"), null == (iconClassHockeyThirdEnd = this._config).iconClassHockeyThirdEnd && (iconClassHockeyThirdEnd.iconClassHockeyThirdEnd = "sprite-liveticker-hockeyThirdEnd"), null == (iconClassMatchpoint = this._config).iconClassMatchpoint && (iconClassMatchpoint.iconClassMatchpoint = "sprite-liveticker-matchpoint"), null == (iconClassSetpoint = this._config).iconClassSetpoint && (iconClassSetpoint.iconClassSetpoint = "sprite-liveticker-setpoint"), 
      null == (iconClassBreakpoint = this._config).iconClassBreakpoint && (iconClassBreakpoint.iconClassBreakpoint = "sprite-liveticker-breakpoint"), null == (iconClassSubstitution = this._config).iconClassSubstitution && (iconClassSubstitution.iconClassSubstitution = "sprite-liveticker-substitution"), null == (lang = this._config).lang && (lang.lang = "de"), null == (lastUpdatedAtText = this._config).lastUpdatedAtText && (lastUpdatedAtText.lastUpdatedAtText = "letzte Meldung %s"), self.translations.configure(this._config.lang), 
      this._id = this._config.id, this._el = (this._$el = $(data))[0], this._reactComponent = React.render(React.createElement(require("framework/liveticker/Liveticker/component").Liveticker, {
        config : this._config
      }), this._el);
    }, $.prototype._teardown = function() {
      return React.unmountComponentAtNode(this._el), this._initialize();
    }, $.prototype._fetchWholeFeed = function($sanitize) {
      var args;
      if (!this._isFetchingWholeFeed && !this._isPaused) {
        return this._isFetchingWholeFeed = true, args = arguments, $.ajax({
          url : this._config.http.baseUrl + "/livetickers/" + this._id + "?type=preview",
          complete : function(dataAndEvents) {
            return function() {
              return dataAndEvents._isFetchingWholeFeed = false;
            };
          }(this),
          success : function(tree) {
            return function(evt) {
              return tree._reactComponent && (tree._reactComponent.setState({
                isActive : evt.liveticker.active,
                orderBy : evt.liveticker.order_by,
                hasQuestionForm : null != evt.liveticker.question_list && evt.liveticker.question_list.active,
                questionListId : null != evt.liveticker.question_list ? evt.liveticker.question_list.id : null
              }), tree._id = evt.liveticker.id, tree._refetchIntervalInMs = evt.liveticker.interval_ms, null != $sanitize) ? $sanitize() : void 0;
            };
          }(this),
          error : function(me) {
            return function() {
              return me._fetchWholeFeedTimeout = setTimeout(function() {
                return me._fetchWholeFeed.apply(me, args);
              }, 5E3);
            };
          }(this)
        });
      }
    }, $.prototype._listenForMessageUpdates = function() {
      return this._reactComponent.state.isActive && !this._isPaused ? this._listenForMessageUpdatesTimeout = setTimeout(function(dataAndEvents) {
        return function() {
          return dataAndEvents._fetchMessageUpdates(function() {
            return dataAndEvents._fetchWholeFeed(), dataAndEvents._listenForMessageUpdates();
          });
        };
      }(this), this._refetchIntervalInMs) : void 0;
    }, $.prototype._fetchMessageUpdates = function($sanitize) {
      var args;
      var uid;
      if (!this._isFetchingMessageUpdates && !this._isPaused) {
        return this._isFetchingMessageUpdates = true, args = arguments, uid = this._lastRequestedAt || 0, $.ajax({
          url : this._config.http.baseUrl + "/livetickers/" + this._id + "/liveticker_message_updates/" + uid,
          complete : function(dataAndEvents) {
            return function() {
              return dataAndEvents._isFetchingMessageUpdates = false;
            };
          }(this),
          success : function(self) {
            return function(dataAndEvents) {
              var i;
              var len;
              var data;
              var rawParams;
              var px;
              if (self._reactComponent) {
                self._lastRequestedAt = dataAndEvents.liveticker_message_updates.request_time;
                /** @type {number} */
                px = (new Date).getTime() - self._lastRequestedAt;
                rawParams = dataAndEvents.liveticker_message_updates.liveticker_messages;
                /** @type {number} */
                i = 0;
                len = rawParams.length;
                for (;len > i;i++) {
                  data = rawParams[i];
                  data.updated_at = data.updated_at + px;
                  /** @type {number} */
                  data.received_at = (new Date).getTime();
                }
                if (dataAndEvents.liveticker_message_updates.liveticker_messages.length && self._reactComponent.setState({
                  messages : self._reactComponent.handleMessages(dataAndEvents.liveticker_message_updates.liveticker_messages)
                }), self._reactComponent.setState({
                  isLoading : false
                }), self._config.afterFetchMessageUpdates.call(self, dataAndEvents.liveticker_message_updates.liveticker_messages, uid), null != $sanitize) {
                  return $sanitize();
                }
              }
            };
          }(this),
          error : function(me) {
            return function() {
              return me._fetchMessageUpdatesTimeout = setTimeout(function() {
                return me._fetchMessageUpdates.apply(me, args);
              }, me._refetchIntervalInMs);
            };
          }(this)
        });
      }
    }, $.prototype._updateTest = function() {
      var i;
      var _i;
      var attributes;
      /** @type {Array} */
      attributes = [];
      /** @type {number} */
      i = _i = 0;
      for (;2 >= _i;i = ++_i) {
        attributes.push($.extend({}, this._reactComponent.state.messages[i], {
          sort : this._reactComponent.state.messages[i].sort + 1,
          updated_at : this._reactComponent.state.messages[i].updated_at + 1,
          received_at : (new Date).getTime()
        }));
      }
      return attributes.push($.extend({}, this._reactComponent._messagesIndex["54acd69787da8b3ad2000002"], {
        text : "<p>Moinsen poinsen</p><p>\x3c!--{{inline_element('5500007687da8bbd1b00302f')}}--\x3e</p>",
        updated_at : (new Date).getTime(),
        received_at : (new Date).getTime()
      })), console.log("update " + attributes.length + " messages"), this._reactComponent.setState({
        messages : this._reactComponent.handleMessages(attributes)
      });
    }, $.prototype._createTest = function() {
      return this._reactComponent.setState({
        messages : this._reactComponent.handleMessages([{
          icon_name : null,
          id : "moin",
          inline_elements : [],
          minute_of_play : null,
          picture_medium_url : null,
          picture_small_url : null,
          released : true,
          score_home : null,
          score_visitor : null,
          sort : 13,
          text : "<p>haha</p>",
          title : null,
          updated_at : (new Date).getTime(),
          received_at : (new Date).getTime()
        }])
      });
    }, $.prototype._deleteTest = function() {
      return this._reactComponent.setState({
        messages : this._reactComponent.handleMessages([{
          icon_name : null,
          id : "54acd69787da8b3ad2000002",
          inline_elements : [],
          minute_of_play : null,
          picture_medium_url : null,
          picture_small_url : null,
          released : false,
          score_home : null,
          score_visitor : null,
          sort : null,
          text : null,
          title : null,
          updated_at : (new Date).getTime(),
          received_at : (new Date).getTime()
        }])
      });
    }, $.prototype._deleteTestDouble = function() {
      return this._reactComponent.setState({
        messages : this._reactComponent.handleMessages([{
          icon_name : null,
          id : "5507eb7587da8ba2a2000002",
          inline_elements : [],
          legacy_id : 432968,
          minute_of_play : null,
          picture_medium_url : null,
          picture_small_url : null,
          released : false,
          score_home : null,
          score_visitor : null,
          sort : 40,
          text : "<p>6</p>",
          title : "6",
          updated_at : (new Date).getTime(),
          received_at : (new Date).getTime()
        }, {
          icon_name : null,
          id : "5507eb7587da8ba3d1000002",
          inline_elements : [],
          legacy_id : 432970,
          minute_of_play : null,
          picture_medium_url : null,
          picture_small_url : null,
          released : false,
          score_home : null,
          score_visitor : null,
          sort : 39,
          text : "<p>7</p>",
          title : "7",
          updated_at : (new Date).getTime(),
          received_at : (new Date).getTime()
        }])
      });
    }, $;
  }();
  eventHandle.Liveticker = elem;
}), define("framework/loader/fullscreenLoader", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<div class="fullscreenLoader {{style}} {{#if visible}}visible{{/if}}" {{#if id}}id="{{id}}"{{/if}}>\n    <div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <span></span>\n    </div>\n</div>');
}), define("framework/loader/loader", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<div class="loader {{style}} {{#if visible}}visible{{/if}}">\n    <div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n</div>');
}), define("framework/loader/snakeLoader", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('{{#if visible}}\n    <div class="snakeLoader visible {{style}}">\n{{else}}\n    <div class="snakeLoader {{style}}">\n{{/if}}\n    <div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n</div>');
}), define("framework/paywallInterface", ["exports", "framework/store", "framework/utils"], function(i18n, storage, gma) {
  var resolver;
  var app;
  var init;
  var current;
  app = {};
  /** @type {null} */
  app.config = null;
  /** @type {null} */
  app.urls = null;
  resolver = RSVP.defer();
  current = {
    abo : "abo-igr",
    tgt : "tgt-igr",
    track : "track-igr"
  };
  if (gma.utils.isProduction()) {
    /** @type {string} */
    current.abo = "abo";
    /** @type {string} */
    current.tgt = "tgt";
    /** @type {string} */
    current.track = "track";
  }
  init = {
    /**
     * @param {(Object|string)} opt_attributes
     * @return {?}
     */
    configure : function(opt_attributes) {
      return app.config = opt_attributes, app.urls = {
        login : function() {
          return app.config.paywall.login.replace("%subdomain%", current.tgt).replace("%currentCustomer%", app.config.currentCustomer);
        }(),
        logout : function() {
          return app.config.paywall.logout.replace("%subdomain%", current.tgt);
        }(),
        abo : function() {
          return app.config.paywall.abo.replace("%subdomain%", current.abo).replace("%currentCustomer%", app.config.currentCustomer);
        }(),
        myAccount : function() {
          return app.config.paywall.myAccount.replace("%subdomain%", current.abo).replace("%currentCustomer%", app.config.currentCustomer);
        }()
      };
    },
    /**
     * @return {?}
     */
    getUrls : function() {
      return app.urls;
    },
    /**
     * @param {?} context
     * @return {?}
     */
    track : function(context) {
      return resolver.promise.then(function() {
        return storage.store.get("sites", "default").paywall_status > app.config.paywall.status.disabled && app.config.paywall.enabled ? (cre_client.set_page_view(), cre_client.set_origin(app.config.env), cre_client.set_service_id(app.config.currentCustomer), cre_client.set_content_id(window.location.pathname), null != context.cms_id && cre_client.set_cms_id(context.cms_id), null != context.main_channel && cre_client.set_channel(context.main_channel), null != context.sub_channel && cre_client.set_sub_channel(context.sub_channel), 
        cre_client.set_heading(document.title), cre_client.set_doc_type(context.doc_type), cre_client.request()) : void 0;
      });
    },
    /**
     * @return {?}
     */
    init : function() {
      return storage.store.get("sites", "default").paywall_status > app.config.paywall.status.disabled && app.config.paywall.enabled ? RSVP.all([$.loadExternalScript(app.config.paywall.templateSets.replace("%subdomain%", current.track).replace("%currentCustomer%", app.config.currentCustomer).replace("%alternativeName%", app.config.alternativeName)), $.loadExternalScript(app.config.paywall.templateClient.replace("%subdomain%", current.track).replace("%currentCustomer%", app.config.currentCustomer)), 
      $.loadExternalScript(app.config.paywall.tracking.replace("%subdomain%", current.track).replace("%currentCustomer%", app.config.currentCustomer)), $.ajax({
        type : "HEAD",
        cache : false,
        url : window.location.pathname,
        /**
         * @param {Object} xhr
         * @return {?}
         */
        beforeSend : function(xhr) {
          return xhr.setRequestHeader("X-Cache-Control", "no-cache");
        },
        /**
         * @return {?}
         */
        success : function() {
          var data;
          var userId;
          return(data = JSON.parse(this.getResponseHeader("C1-User-Info"))) && (userId = this.getResponseHeader("C1-User-ID")) ? (data.id = 1, data.userId = userId, storage.store.save({
            paywall : data
          })) : void 0;
        }
      })]).then(function() {
        return storage.store.get("sites", "default").paywall_status === app.config.paywall.status.enabled && (app.config.paywall.enabled && cre_templateclient.setup()), resolver.resolve();
      }) : resolver.resolve(), resolver.promise;
    }
  };
  i18n.paywallInterface = init;
}), define("framework/poll/box", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<h3>{{title}}</h3>\n\n<p>{{question}}</p>\n\n<div class="response"></div>\n\n{{> loader}}\n\n<div class="votes">\n    {{#each votes}}\n        <a data-pollVoteId="{{id}}" href="javascript:void(0);" >{{description}}</a>\n    {{/each}}\n</div>\n\n<div class="poll">\n    {{#each votes}}\n        <p>{{description}}</p>\n\n        <div class="bars">\n            <div class="bar" style="width: {{calculatePercent count ../total_count}}%"></div>\n        </div>\n\n        <div class="percents">\n            <span>{{calculatePercent count ../total_count}}%</span>\n        </div>\n\n        <div class="clear"></div>\n    {{/each}}\n\n    <div class="clear"></div>\n\n    <p class="total">{{total_count}} Stimmen</p>\n</div>');
}), define("framework/poll/module", ["exports", "framework/statistics", "framework/translations", "framework/LocalStorageQueue"], function(me, opt_user, self, dataAndEvents) {
  var $rootScope;
  var init;
  var queue;
  var done;
  var create;
  $rootScope = {};
  $rootScope.config = {};
  /** @type {null} */
  $rootScope.config.apiUrl = null;
  /**
   * @param {Object} msg
   * @return {?}
   */
  done = function(msg) {
    return msg.find(".poll").show(), msg.find(".total").show(), msg.find(".votes").hide();
  };
  /**
   * @param {Object} error
   * @param {string} widget
   * @param {?} deepDataAndEvents
   * @param {?} recurring
   * @param {string} var_args
   * @return {?}
   */
  create = function(error, widget, deepDataAndEvents, recurring, var_args) {
    var dest;
    return dest = error.attr("data-pollId"), error.find(".votes").hide(), $.ajax({
      url : $rootScope.config.apiUrl + "/polls/" + var_args + "/votes/" + widget,
      type : "PUT",
      /**
       * @param {string} name
       * @return {?}
       */
      success : function(name) {
        var self;
        return error.find(".loader").hide(), self = error.find(".response"), self.html(name.message), name.success && self.css("color", "#008800"), done(error), queue.add(dest), opt_user.statistics.trackPageView(recurring, deepDataAndEvents, "polls");
      },
      /**
       * @return {?}
       */
      error : function() {
        var yearCont;
        return error.find(".loader").hide(), error.find(".votes").show(), yearCont = error.find(".response"), yearCont.html(self.translations.translate("Verbindung fehlgeschlagen, bitte versuchen Sie es sp\u00e4ter erneut."));
      }
    });
  };
  queue = new dataAndEvents.LocalStorageQueue("Polls.sent");
  init = {
    /**
     * @param {string} opt_attributes
     * @return {?}
     */
    configure : function(opt_attributes) {
      return $rootScope.config.apiUrl = opt_attributes;
    },
    /**
     * @param {Object} expectedNumberOfNonCommentArgs
     * @param {string} position
     * @param {?} deepDataAndEvents
     * @param {?} recurring
     * @return {?}
     */
    init : function(expectedNumberOfNonCommentArgs, position, deepDataAndEvents, recurring) {
      var e;
      var f;
      return e = $("div[data-pollId='" + position + "']"), f = e.html(require("framework/poll/box")["default"](expectedNumberOfNonCommentArgs.payload)), e.find(".loader").hide(), expectedNumberOfNonCommentArgs.payload.active ? f.find(".votes a").bind("click", function(dataAndEvents) {
        return e.find(".loader").show(), create(e, this.getAttribute("data-pollVoteId"), deepDataAndEvents, recurring, expectedNumberOfNonCommentArgs.payload.legacy_id);
      }) : done(e), queue.getQueue().forEach(function(id) {
        return e.length && e.attr("data-pollId") === id ? done(e) : void 0;
      });
    }
  };
  me.poll = init;
}), define("framework/router", ["exports", "framework/store", "framework/viewManager", "framework/browser", "framework/translations", "framework/config"], function(App, args, api, row, self, app) {
  var next;
  var h;
  var module;
  var attributes;
  var router;
  var state;
  module = {};
  /** @type {null} */
  module.config = null;
  state = {};
  /** @type {boolean} */
  h = true;
  attributes = {
    routeName : null,
    id : null
  };
  /**
   * @param {string} val
   * @return {?}
   */
  next = function(val) {
    var path;
    var id;
    var item;
    var match;
    return "/" === val && (val = module.config.defaultPathname), val = val.substr(1), match = val.split("/"), item = {
      path : null != (path = match[2]) ? path : match[0],
      id : null != (id = match[3]) ? id : match[1]
    }, match[2] && (item.parentPath = match[0], item.parentId = match[1]), item;
  };
  router = {
    /**
     * @param {?} opt_attributes
     * @return {?}
     */
    configure : function(opt_attributes) {
      return module.config = opt_attributes;
    },
    /**
     * @param {string} key
     * @param {Function} value
     * @return {?}
     */
    register : function(key, value) {
      return value.name = key, state[key] = value, state[key].router = this, state[key].store = args.store, state[key].applicationRoute = state.application;
    },
    /**
     * @return {?}
     */
    back : function() {
      return history.back();
    },
    /**
     * @return {?}
     */
    init : function() {
      return module.config.initialTransition ? this.transitionTo(row.browser.getPathname()) : void 0;
    },
    /**
     * @param {string} name
     * @param {boolean} index
     * @return {?}
     */
    transitionTo : function(name, index) {
      var cursor;
      var getter;
      var handler;
      var callback;
      var done;
      var render;
      var item;
      var self;
      var options;
      var path;
      return null == index && (index = true), item = next(name), options = {
        from : $.extend(attributes),
        to : {
          routeName : item.path.singularize(),
          id : item.id,
          pathname : name
        }
      }, item.parentPath && (options.to.parentRouteName = item.parentPath.singularize()), item.parentId && (options.to.parentId = item.parentId), handler = state[options.from.routeName], self = state[options.to.routeName], path = self.urlPattern, options.to.id && (path = path.replace("[id]", options.to.id)), cursor = !(null != self.currentRenderedId && self.currentRenderedId === options.to.id), self.currentRenderedId = options.to.id, done = function() {
        return cursor ? null != self.renderTemplate ? self.renderTemplate(options) : api.viewManager.renderTemplate(options.to.routeName, {
          config : app.config
        }) : void 0;
      }, callback = function() {
        var tests;
        return tests = [], null != self.loadData ? tests = tests.concat($.makeArray(self.loadData(options))) : tests.push(args.store.load(options.to.routeName.pluralize(), {
          id : options.to.id
        })), null != state.application.loadData && (tests = tests.concat($.makeArray(state.application.loadData(options)))), RSVP.all(tests);
      }, render = function(data, model, node) {
        return null != state.application.rerenderTemplate && state.application.rerenderTemplate(options, data), model ? (model.node(node, function(part, xy) {
          return self.streamNode(part, xy[xy.length - 1], options);
        }), null != state.application.afterStream && (model.isDone ? state.application.afterStream.call(model, options) : model.done(state.application.afterStream.bind(this, options))), null != self.afterStream ? model.isDone ? self.afterStream.call(model, options) : model.done(self.afterStream.bind(this, options)) : void 0) : null != self.rerenderTemplate ? self.rerenderTemplate(options, data) : api.viewManager.renderTemplate(options.to.routeName, data);
      }, getter = function(dataAndEvents) {
        return function(body) {
          var e;
          return e = null != self.getTitle ? document.title = self.getTitle(options) : document.title = body.title + " - " + args.store.get("sites", "default").title, null != state.application.enter && state.application.enter(options, body, cursor, index), null != self.enter && self.enter(options, body, cursor, index), h ? ($(window).on("popstate hashchange", function() {
            return row.browser.isWP() || history.replaceState && history.replaceState(null, null, row.browser.getPathname()), dataAndEvents.transitionTo(row.browser.getPathname(), false);
          }), h = false) : void 0;
        };
      }(this), new RSVP.Promise(function(dataAndEvents) {
        return function(next) {
          var $e;
          return options.from.routeName === options.to.routeName && options.from.id === options.to.id ? next(options) : (index && (history.pushState && (h || history.pushState(null, null, path))), null != (null != self ? self.beforeTransition : void 0) && self.beforeTransition(options), null != state.application.beforeTransition && state.application.beforeTransition(options), null != (null != handler ? handler.exit : void 0) && handler.exit(options), null != state.application.exit && state.application.exit(options), 
          cursor && (null != state.application.beforeRender && state.application.beforeRender(options), null != self.beforeRender && self.beforeRender(options), done()), $e = $("#" + options.to.routeName + " .fullscreenLoader"), cursor && (!app.config.isNativeApp && $e.show()), api.viewManager.show(options.to.routeName, options.from.routeName, self.animationDirection).then(function() {
            var finish;
            var requestRetries;
            var init;
            return init = function(events) {
              var ast;
              var data;
              var value;
              var model;
              return value = [], data = events[0].payload, model = events[0].stream, ast = events[0].node, cursor && (null != state.application.beforeRerender && state.application.beforeRerender(options, data), null != self.beforeRerender && self.beforeRerender(options, data), render(data, model, ast), null != state.application.afterRerender && (value = value.concat($.makeArray(state.application.afterRerender(options, data)))), null != self.afterRerender && (value = value.concat($.makeArray(self.afterRerender(options, 
              data)))), model || (null == state.application.afterStream || state.application.afterStream(options)), model || (null == self.afterStream || self.afterStream(options))), getter(data), $e.find("span").empty(), $e.hide(), RSVP.all(value).then(function() {
                return next(options);
              });
            }, finish = function(er) {
              return requestRetries ? (requestRetries <= module.config.requestRetries - 2 && $e.find("span").text(self.translations.translate("Verbindung fehlgeschlagen, erneuter Versuch...")), requestRetries--, setTimeout(function() {
                return callback().then(init, finish);
              }, module.config.timeoutBetweenRetries)) : ($e.find(">div>div").hide(), $e.find("span").text(self.translations.translate("Verbindung fehlgeschlagen, bitte versuchen Sie es sp\u00e4ter erneut."))), console.log(er.stack);
            }, requestRetries = module.config.requestRetries, callback().then(init, finish);
          }), attributes.routeName = options.to.routeName, attributes.id = options.to.id, options.to.parentRouteName && (attributes.parentRouteName = options.to.parentRouteName), options.to.parentId ? attributes.parentId = options.to.parentId : void 0);
        };
      }(this));
    }
  };
  App.router = router;
}), define("framework/scoreboard/Scoreboard/20min-template", ["exports", "framework/loader/loader"], function(dataAndEvents, __exports__) {
  /**
   * @param {?} signal_eof
   * @param {?} event
   * @param {?} token
   * @param {?} doPost
   * @return {?}
   */
  function next(signal_eof, event, token, doPost) {
    return React.createElement("span", {}, void 0 !== token.score_left && void 0 !== token.score_right ? React.createElement("span", {}, token.score_left, ":", token.score_right) : null);
  }
  /**
   * @param {Object} options
   * @param {Function} data
   * @return {?}
   */
  function init(options, data) {
    return this.isTennisResult() ? React.createElement("div", {
      className : "tennis"
    }, React.createElement("div", {
      className : "overview"
    }, React.createElement("div", {
      className : "score min20"
    }, React.createElement.apply(this, _.flatten(["span", {
      className : "numbers"
    }, _.map(data.sets, next.bind(this, options, data))])), React.createElement("div", {
      className : "serve"
    }, React.createElement("div", {
      className : this.isLeftPlayersTurn() ? "active" : ""
    }), React.createElement("div", {
      className : this.isRightPlayersTurn() ? "active" : ""
    }))), React.createElement("div", {
      className : "name home"
    }, data.player_left), React.createElement("div", {
      className : "name guest"
    }, data.player_right), data.icon_home ? React.createElement("img", {
      className : "avatar",
      src : data.icon_home
    }) : null, data.icon_visitor ? React.createElement("img", {
      className : "avatar",
      src : data.icon_visitor
    }) : null)) : null;
  }
  /**
   * @param {?} __
   * @param {?} success
   * @param {Object} o
   * @param {?} _
   * @return {?}
   */
  function callback(__, success, o, _) {
    return React.createElement("span", {}, React.createElement("span", {
      className : "sprite-scoreboard-goal"
    }), " ", o.minute, ". ", o.event, "\n                    ", React.createElement("br", {}));
  }
  /**
   * @param {?} text
   * @param {?} span
   * @param {Object} value
   * @param {?} att_name
   * @return {?}
   */
  function span(text, span, value, att_name) {
    return React.createElement("span", {}, React.createElement("span", {
      className : "sprite-scoreboard-goal"
    }), " ", value.minute, ". ", value.event, "\n                    ", React.createElement("br", {}));
  }
  /**
   * @param {?} blockHolder
   * @param {?} attr
   * @param {?} state
   * @param {?} blockDefinition
   * @return {?}
   */
  function $(blockHolder, attr, state, blockDefinition) {
    return React.createElement("tr", {}, React.createElement("td", {}, state.name_home), React.createElement("td", {}, "-"), React.createElement("td", {}, state.name_visitor), React.createElement("td", {}, state.score_home, ":", state.score_visitor));
  }
  /**
   * @param {Object} model
   * @param {Function} data
   * @return {?}
   */
  function update(model, data) {
    return this.isTeamsportResult() ? React.createElement("div", {
      className : "teamsport"
    }, React.createElement("table", {}, React.createElement("tr", {}, React.createElement("td", {}, data.icon_home ? React.createElement("img", {
      src : data.icon_home
    }) : null, React.createElement("br", {}, "\n                    ", data.name_home, "\n                ")), React.createElement("td", {}, data.score_home, " : ", data.score_visitor), React.createElement("td", {}, data.icon_visitor ? React.createElement("img", {
      src : data.icon_visitor
    }) : null, React.createElement("br", {}, "\n                    ", data.name_visitor, "\n                ")))), React.createElement("div", {
      className : "events"
    }, React.createElement.apply(this, _.flatten(["div", {
      className : "eventsHome"
    }, _.map(data.events_home, callback.bind(this, model, data))])), React.createElement.apply(this, _.flatten(["div", {
      className : "eventsVisitor"
    }, _.map(data.events_visitor, span.bind(this, model, data))])), React.createElement("div", {
      className : "clear"
    })), this.hasAdditionalResults() ? React.createElement("div", {
      className : "additionalResults"
    }, React.createElement("span", {}, this.props.config.otherGamesCaption), React.createElement.apply(this, _.flatten(["table", {}, _.map(model.additional_results, $.bind(this, model, data))]))) : null) : null;
  }
  /**
   * @param {?} node
   * @return {?}
   */
  function create(node) {
    return React.createElement("div", {
      className : "NnScoreboard"
    }, node.isLoading ? React.createElement("div", {
      dangerouslySetInnerHTML : {
        __html : __exports__["default"]({
          visible : true
        })
      }
    }) : null, init.apply(this, [node, node.tennis_result]), update.apply(this, [node, node.teamsport_result]));
  }
  /**
   * @return {?}
   */
  dataAndEvents["default"] = function() {
    return create.apply(this, [this.state]);
  };
}), define("framework/scoreboard/Scoreboard/component", ["exports"], function(eventHandle) {
  var elem;
  elem = React.createClass({
    /**
     * @return {?}
     */
    getInitialState : function() {
      return{
        isLoading : true
      };
    },
    /**
     * @param {Function} Constructor
     * @param {Object} mixins
     * @return {?}
     */
    componentWillUpdate : function(Constructor, mixins) {
      var eventPath;
      var configList;
      if ("tennis" === mixins.type) {
        configList = mixins.tennis_result.sets;
        /** @type {Array} */
        eventPath = [];
        for (;configList.length < mixins.tennis_result.number_of_sets;) {
          eventPath.push(configList.push({
            set_number : configList.length + 1
          }));
        }
        return eventPath;
      }
    },
    /**
     * @return {?}
     */
    render : function() {
      return require("framework/scoreboard/Scoreboard/" + this.props.config.templateName)["default"].apply(this);
    },
    /**
     * @return {?}
     */
    isTennisResult : function() {
      return "tennis" === this.state.type;
    },
    /**
     * @return {?}
     */
    isTeamsportResult : function() {
      return "team" === this.state.type;
    },
    /**
     * @return {?}
     */
    hasAdditionalResults : function() {
      return this.state.additional_results && this.state.additional_results.length;
    },
    /**
     * @return {?}
     */
    isLeftPlayersTurn : function() {
      return "player_left" === this.state.tennis_result.initial_server && !this.state.tennis_result.winner;
    },
    /**
     * @return {?}
     */
    isRightPlayersTurn : function() {
      return "player_right" === this.state.tennis_result.initial_server && !this.state.tennis_result.winner;
    },
    /**
     * @param {?} deepDataAndEvents
     * @return {?}
     */
    hasLeftPlayerWon : function(deepDataAndEvents) {
      return "player_left" === deepDataAndEvents.winner;
    },
    /**
     * @param {?} deepDataAndEvents
     * @return {?}
     */
    hasRightPlayerWon : function(deepDataAndEvents) {
      return "player_right" === deepDataAndEvents.winner;
    }
  });
  eventHandle.Scoreboard = elem;
}), define("framework/scoreboard/Scoreboard/template", ["exports", "framework/loader/loader"], function(dataAndEvents, __exports__) {
  /**
   * @param {?} namespaces
   * @param {?} item
   * @param {?} node
   * @param {?} setter
   * @return {?}
   */
  function node(namespaces, item, node, setter) {
    return React.createElement("td", {}, node.set_number, ". S");
  }
  /**
   * @param {?} events
   * @param {?} keepData
   * @param {?} deepDataAndEvents
   * @param {?} dataAndEvents
   * @return {?}
   */
  function clone(events, keepData, deepDataAndEvents, dataAndEvents) {
    return React.createElement("td", {
      className : this.hasLeftPlayerWon(deepDataAndEvents) ? "winner" : ""
    }, deepDataAndEvents.score_left);
  }
  /**
   * @param {?} aspect
   * @param {?} _thingy
   * @param {?} deepDataAndEvents
   * @param {?} arr
   * @return {?}
   */
  function el(aspect, _thingy, deepDataAndEvents, arr) {
    return React.createElement("td", {
      className : this.hasRightPlayerWon(deepDataAndEvents) ? "winner" : ""
    }, deepDataAndEvents.score_right);
  }
  /**
   * @param {Object} options
   * @param {Function} filter
   * @return {?}
   */
  function init(options, filter) {
    return this.isTennisResult() ? React.createElement("div", {
      className : "tennis"
    }, React.createElement("table", {}, React.createElement("thead", {}, React.createElement.apply(this, _.flatten(["tr", {}, React.createElement("td", {}), _.map(filter.sets, node.bind(this, options, filter))]))), React.createElement("tbody", {}, React.createElement.apply(this, _.flatten(["tr", {}, React.createElement("td", {}, "\n                        ", filter.player_left, "\n\n                        ", this.isLeftPlayersTurn() ? React.createElement("span", {
      className : "sprite-scoreboard-tennisRacket"
    }) : null), _.map(filter.sets, clone.bind(this, options, filter))])), React.createElement.apply(this, _.flatten(["tr", {}, React.createElement("td", {}, "\n                        ", filter.player_right, "\n\n                        ", this.isRightPlayersTurn() ? React.createElement("span", {
      className : "sprite-scoreboard-tennisRacket"
    }) : null), _.map(filter.sets, el.bind(this, options, filter))]))))) : null;
  }
  /**
   * @param {?} __
   * @param {?} success
   * @param {Object} o
   * @param {?} _
   * @return {?}
   */
  function callback(__, success, o, _) {
    return React.createElement("span", {}, React.createElement("span", {
      className : "sprite-scoreboard-goal"
    }), " ", o.minute, ". ", o.event, "\n                    ", React.createElement("br", {}));
  }
  /**
   * @param {?} text
   * @param {?} span
   * @param {Object} value
   * @param {?} att_name
   * @return {?}
   */
  function span(text, span, value, att_name) {
    return React.createElement("span", {}, React.createElement("span", {
      className : "sprite-scoreboard-goal"
    }), " ", value.minute, ". ", value.event, "\n                    ", React.createElement("br", {}));
  }
  /**
   * @param {?} blockHolder
   * @param {?} attr
   * @param {?} state
   * @param {?} blockDefinition
   * @return {?}
   */
  function $(blockHolder, attr, state, blockDefinition) {
    return React.createElement("tr", {}, React.createElement("td", {}, state.name_home), React.createElement("td", {}, "-"), React.createElement("td", {}, state.name_visitor), React.createElement("td", {}, state.score_home, ":", state.score_visitor));
  }
  /**
   * @param {Object} model
   * @param {Function} data
   * @return {?}
   */
  function update(model, data) {
    return this.isTeamsportResult() ? React.createElement("div", {
      className : "teamsport"
    }, React.createElement("table", {}, React.createElement("tr", {}, React.createElement("td", {}, data.icon_home ? React.createElement("img", {
      src : data.icon_home
    }) : null, React.createElement("br", {}, "\n                    ", data.name_home, "\n                ")), React.createElement("td", {}, data.score_home, " : ", data.score_visitor), React.createElement("td", {}, data.icon_visitor ? React.createElement("img", {
      src : data.icon_visitor
    }) : null, React.createElement("br", {}, "\n                    ", data.name_visitor, "\n                ")))), React.createElement("div", {
      className : "events"
    }, React.createElement.apply(this, _.flatten(["div", {
      className : "eventsHome"
    }, _.map(data.events_home, callback.bind(this, model, data))])), React.createElement.apply(this, _.flatten(["div", {
      className : "eventsVisitor"
    }, _.map(data.events_visitor, span.bind(this, model, data))])), React.createElement("div", {
      className : "clear"
    })), this.hasAdditionalResults() ? React.createElement("div", {
      className : "additionalResults"
    }, React.createElement("span", {}, this.props.config.otherGamesCaption), React.createElement.apply(this, _.flatten(["table", {}, _.map(model.additional_results, $.bind(this, model, data))]))) : null) : null;
  }
  /**
   * @param {?} node
   * @return {?}
   */
  function create(node) {
    return React.createElement("div", {
      className : "NnScoreboard"
    }, node.isLoading ? React.createElement("div", {
      dangerouslySetInnerHTML : {
        __html : __exports__["default"]({
          visible : true
        })
      }
    }) : null, init.apply(this, [node, node.tennis_result]), update.apply(this, [node, node.teamsport_result]));
  }
  /**
   * @return {?}
   */
  dataAndEvents["default"] = function() {
    return create.apply(this, [this.state]);
  };
}), define("framework/scoreboard/scoreboard", ["exports"], function(eventHandle) {
  var elem;
  elem = function() {
    /**
     * @param {?} rows
     * @param {?} options
     * @return {undefined}
     */
    function render(rows, options) {
      this._config = $.extend({
        templateName : "template",
        otherGamesCaption : "Die anderen Spiele",
        /**
         * @return {?}
         */
        getRenderMode : function() {
          return $(window).width() < 800 || $(window).height() < 600 ? "mobile" : "desktop";
        }
      }, options);
      this._id = this._config.id;
      this._container = (this._$container = $(rows))[0];
      $(window).on("resize." + this._id + " orientationchange." + this._id, function(dataAndEvents) {
        return function(deepDataAndEvents) {
          return dataAndEvents._onResize();
        };
      }(this));
      this._reactComponent = React.render(React.createElement(require("framework/scoreboard/Scoreboard/component").Scoreboard, {
        config : this._config
      }), this._container);
      this._$scoreboard = $(this._reactComponent.getDOMNode());
      this._onResize();
      this._requestData();
    }
    return render.prototype.update = function() {
      return this._requestData();
    }, render.prototype.destroy = function() {
      return $(window).off("resize." + this._id + " orientationchange." + this._id), React.unmountComponentAtNode(this._container);
    }, render.prototype._onResize = function() {
      return "mobile" === this._config.getRenderMode() ? this._$scoreboard.removeClass("desktop").addClass("mobile") : this._$scoreboard.removeClass("mobile").addClass("desktop");
    }, render.prototype._requestData = function(callback) {
      return this._isRequestingData ? void 0 : (this._isRequestingData, $.ajax({
        url : this._config.baseUrl + "/scoreboards/" + this._id,
        complete : function(dataAndEvents) {
          return function() {
            return dataAndEvents._isRequestingData;
          };
        }(this),
        success : function(dataAndEvents) {
          return function(element) {
            return dataAndEvents._reactComponent && (dataAndEvents._reactComponent.setState($.extend(element.scoreboard, {
              isLoading : false
            })), null != callback) ? callback() : void 0;
          };
        }(this)
      }));
    }, render;
  }();
  eventHandle.Scoreboard = elem;
}), define("framework/slideshow/slideshow", ["exports", "framework/jquery", "framework/string", "framework/browser", "framework/handlebars/module", "framework/translations"], function(eventHandle, dataAndEvents, deepDataAndEvents, b, $window, self) {
  var elem;
  var TransitionEvent;
  var callback;
  var remove;
  /**
   * @param {Function} fn
   * @param {?} me
   * @return {?}
   */
  var __bind = function(fn, me) {
    return function() {
      return fn.apply(me, arguments);
    };
  };
  $window.handlebars.init();
  /**
   * @param {number} keepData
   * @return {?}
   */
  remove = function(keepData) {
    return keepData / 0.5 % 2 === 1;
  };
  /**
   * @param {number} value
   * @param {number} key
   * @param {number} arg
   * @return {?}
   */
  callback = function(value, key, arg) {
    return null == arg && (arg = 0), value > key ? value = callback(arg + (value - (key + 1)), key, arg) : arg > value && (value = callback(key + 1 + value, key, arg)), value;
  };
  elem = function() {
    /**
     * @param {?} element
     * @param {?} expected
     * @param {number} options
     * @return {undefined}
     */
    function initialize(element, expected, options) {
      this._onTapEventHandler = __bind(this._onTapEventHandler, this);
      $.extend(this, {
        _id : null,
        _$ : null,
        _$container : null,
        _$swiperContainer : null,
        _currentIndex : 0,
        _lastProcessedImageIndex : null,
        _images : [],
        _isSliding : false,
        _isSwiperCreated : false,
        _options : {
          template : require("framework/slideshow/templates/slideshow")["default"],
          pictureCaptionTemplate : require("framework/slideshow/templates/pictureCaption")["default"],
          linksTemplate : require("framework/slideshow/templates/links")["default"],
          pagingTemplate : require("framework/slideshow/templates/paging")["default"],
          paginationTemplate : require("framework/slideshow/templates/pagination")["default"],
          pagination : false,
          state : "inline",
          ads : false,
          adInterval : 4,
          prerenderedSlides : 4,
          fullscreenOnly : false,
          enableFullscreen : true,
          fullyResponsive : false,
          enableZoom : true,
          enableKeyBindings : true,
          /**
           * @return {?}
           */
          getTitle : function() {
            return "";
          },
          /**
           * @return {?}
           */
          getSubtitle : function() {
            return "";
          },
          /**
           * @param {Object} photo
           * @param {?} extent
           * @return {?}
           */
          getImageUrl : function(photo, extent) {
            return photo.url;
          },
          /**
           * @param {?} deepDataAndEvents
           * @param {number} dataAndEvents
           * @param {Array} e
           * @return {?}
           */
          getImagePaging : function(deepDataAndEvents, dataAndEvents, e) {
            return e.isAdPage ? self.translations.translate("Werbung") : e.template ? e.template({
              currentImage : dataAndEvents + 1,
              totalImages : this.getImageCount()
            }) : "";
          },
          /**
           * @param {Object} obj
           * @param {?} el
           * @return {?}
           */
          getImageCaption : function(obj, el) {
            return obj.caption;
          },
          /**
           * @return {?}
           */
          getLinks : function() {
            return "";
          },
          /**
           * @return {?}
           */
          getAdUrl : function() {
            return "";
          },
          /**
           * @return {?}
           */
          getRenderMode : function() {
            return $(window).width() < 768 || $(window).height() < 600 ? "mobile" : "desktop";
          },
          backButtonClickCallback : null
        }
      });
      $.extend(this._options, null != options ? options : {});
      /** @type {string} */
      this._id = (new Date).getTime() + "NnSlideshow";
      this._$container = $(element).empty().append(this._options.template()).find(".NnSlideshowContainer").addClass("imagesLoading");
      this._$ = this._$container.find(".NnSlideshow");
      this._$swiperContainer = this._$.find(".swiper-container");
      this._$container.addClass(b.browser.isTouchScreen() ? "touch" : "noTouch");
      this._$container.addClass(this._options.enableFullscreen ? "fullscreenEnabled" : "fullscreenDisabled");
      this._$container.addClass(this._options.pagination ? "paginationEnabled" : "paginationDisabled");
      this._bindEventListeners();
      if (expected instanceof RSVP.Promise) {
        expected.then(function(dataAndEvents) {
          return function(guesses) {
            return dataAndEvents._initImages(guesses), dataAndEvents._createSwiper();
          };
        }(this));
      } else {
        this._initImages(expected);
        this._createSwiper();
      }
    }
    return initialize.prototype.isDesktop = function() {
      return this._$container.hasClass("desktop");
    }, initialize.prototype.isMobile = function() {
      return this._$container.hasClass("mobile");
    }, initialize.prototype.isFullscreen = function() {
      return "fullscreen" === this._options.state;
    }, initialize.prototype.getImageCount = function() {
      return this._images.length;
    }, initialize.prototype.getDomNode = function() {
      return this._$[0];
    }, initialize.prototype.disableAds = function() {
      return this._options.ads = false;
    }, initialize.prototype.show = function(options) {
      var tunedIndex;
      var plugins;
      return null == options && (options = {}), options.pageIndex = null != (plugins = options.pageIndex) ? plugins : 0, options.fullscreen = this._options.fullscreenOnly ? true : options.fullscreen, this._$container.addClass("visible").removeClass("hidden"), this.transitionTo(options.fullscreen ? "fullscreen" : "inline"), tunedIndex = this._currentIndex, this._currentIndex = options.pageIndex, this._isSwiperCreated && tunedIndex !== this._currentIndex ? this._reinitSwiper(this._swiper, options.pageIndex) : 
      void 0;
    }, initialize.prototype.hide = function() {
      return this._$container.addClass("hidden").removeClass("visible");
    }, initialize.prototype.prev = function() {
      return this._isSliding ? void 0 : (this._isSliding = true, this._swiper.swipePrev());
    }, initialize.prototype.next = function() {
      return this._isSliding ? void 0 : (this._isSliding = true, this._swiper.swipeNext());
    }, initialize.prototype.transitionTo = function(name) {
      var type;
      var klass;
      if ((this._options.enableFullscreen || "fullscreen" !== name) && (!this._isSliding && (klass = this._options.state, type = $.Event("beforeTransition"), $(this).trigger(type, [this._images[this._currentIndex], this._currentIndex, name, klass]), !type.cancelTransition))) {
        return this._options.fullscreenOnly && "fullscreen" !== name ? this.destroy() : ("fullscreen" === name ? this._options.enableZoom && (this.isMobile() && (this._slideshowZoomer = new TransitionEvent(this, this._$swiperContainer[0], {
          onTap : this._onTapEventHandler,
          onDoubleTap : function(dataAndEvents) {
            return function() {
              return dataAndEvents._isSliding = false;
            };
          }(this),
          onPinchEnd : function(dataAndEvents) {
            return function() {
              return dataAndEvents._isSliding = false;
            };
          }(this),
          onPanEnd : function(dataAndEvents) {
            return function() {
              return dataAndEvents._isSliding = false;
            };
          }(this)
        }))) : this._slideshowZoomer && (this._slideshowZoomer.destroy(), this._slideshowZoomer = null), this._options.state = name, this._$container.removeClass(klass).addClass(name), this._renderPage(), this._onResize("afterTransition"), $(this).trigger("afterTransition", [this._images[this._currentIndex], this._currentIndex, name, klass]));
      }
    }, initialize.prototype.destroy = function() {
      return this.resizeTimeout && clearTimeout(this.resizeTimeout), this._isSwiperCreated && this._swiper.destroy(true), this._slideshowZoomer && (this._slideshowZoomer.destroy(), this._slideshowZoomer = null), this._unbindEventListeners(), this._$container.remove();
    }, initialize.prototype._bindEventListeners = function() {
      return $(window).on("resize." + this._id + " orientationchange." + this._id, function(instance) {
        return function(event) {
          return instance._onResize(event.type);
        };
      }(this)), this._options.enableKeyBindings && $(document).on("keydown." + this._id, function(self) {
        return function(event) {
          if (self.isFullscreen() && (27 === event.keyCode && self.transitionTo("inline")), self.isFullscreen() || self._$.filter(":visible").isInViewport(true)) {
            if (37 === event.keyCode) {
              return self.prev();
            }
            if (39 === event.keyCode) {
              return self.next();
            }
          }
        };
      }(this)), this._$container.on("click", function(dataAndEvents) {
        return function(ev) {
          return $(ev.target).hasClass("NnSlideshowContainer") ? dataAndEvents.transitionTo("inline") : void 0;
        };
      }(this)), this._$.find(".header .closeButton").on("click", function(dataAndEvents) {
        return function(deepDataAndEvents) {
          return dataAndEvents.transitionTo("inline");
        };
      }(this)), this._$.find(".header .backButton").on("click", function(self) {
        return function(mapper) {
          return $.isFunction(self._options.backButtonClickCallback) ? self._options.backButtonClickCallback.call(self, mapper) : self.transitionTo("inline");
        };
      }(this)), this._$.find(".nav .back").on("click", function(dataAndEvents) {
        return function(deepDataAndEvents) {
          return dataAndEvents.prev();
        };
      }(this)), this._$.find(".enlarge").on("click", function(self) {
        return function(dataAndEvents) {
          return self.transitionTo("fullscreen");
        };
      }(this)), this._$.find(".nav .forward").on("click", function(stream) {
        return function(dataAndEvents) {
          return stream.next();
        };
      }(this));
    }, initialize.prototype._unbindEventListeners = function() {
      return $(window).off("." + this._id), $(document).off("." + this._id);
    }, initialize.prototype._initImages = function(array) {
      var index;
      var value;
      var _len;
      /** @type {number} */
      index = 0;
      _len = array.length;
      for (;_len > index;index++) {
        value = array[index];
        this._images.push(value);
      }
      return this._$container.removeClass("imagesLoading").addClass("imagesLoaded");
    }, initialize.prototype._onResize = function(e) {
      var _naturalSize;
      var style;
      var throttledUpdate;
      var H;
      var w;
      var value;
      var l;
      var nDigit;
      var ah;
      var width;
      var optgroup;
      var h;
      var min;
      switch(min = $(window).width(), h = $(window).height(), _naturalSize = function(dataAndEvents) {
        return function() {
          return dataAndEvents._$.find(".swiper-container,.swiper-wrapper,.swiper-slide").css({
            width : "",
            height : ""
          });
        };
      }(this), this._options.getRenderMode.call(this)) {
        case "mobile":
          if (this.isDesktop() || !this.isMobile()) {
            this._$container.removeClass("desktop").addClass("mobile");
            if (this._isSwiperCreated) {
              this._destroyAd();
              this._reinitSwiper(this._swiper, Math.floor(this._currentIndex));
            }
            _naturalSize();
          }
          break;
        case "desktop":
          if (this.isMobile() || !this.isDesktop()) {
            this._$container.removeClass("mobile").addClass("desktop");
            if (this._isSwiperCreated) {
              this._reinitSwiper(this._swiper, this._currentIndex);
            }
            _naturalSize();
          }
        ;
      }
      return "afterTransition" === e && _naturalSize(), this.isDesktop() && this.isFullscreen() ? (optgroup = this._$.width(), H = this._$.height(), b.browser.isIE9() && this._$[0].currentStyle ? (nDigit = parseInt(this._$[0].currentStyle.minWidth, 10), value = parseInt(this._$[0].currentStyle.maxWidth, 10), l = parseInt(this._$[0].currentStyle.minHeight, 10), w = parseInt(this._$[0].currentStyle.maxHeight, 10)) : (nDigit = parseInt(this._$.css("min-width"), 10), value = parseInt(this._$.css("max-width"), 
      10), l = parseInt(this._$.css("min-height"), 10), w = parseInt(this._$.css("max-height"), 10)), (nDigit && (optgroup > min && min >= nDigit) || value && min > optgroup) && (width = min > value ? value : min, this._$swiperContainer.css("width", this._$swiperContainer.parent().width() - (this._$.outerWidth() - width) + "px"), this._$.css("width", width + "px")), (l && (H > h && h >= l) || w && h > H) && (ah = h > w ? w : h, this._$swiperContainer.css("height", this._$swiperContainer.parent().height() - 
      (this._$.outerHeight() - ah) + "px")), this._$.css("margin-top", -this._$.height() / 2), this._$.css("margin-left", -this._$.width() / 2)) : (style = {
        width : "",
        "margin-top" : "",
        "margin-left" : ""
      }, this._options.fullyResponsive && (optgroup = this._$container.parent().width(), this._$swiperContainer.width(optgroup), style.width = optgroup + "px"), this._$.css(style)), throttledUpdate = function(_this) {
        return function() {
          return _this._isSwiperCreated ? (_this.resizeTimeout && clearTimeout(_this.resizeTimeout), _this.resizeTimeout = setTimeout(function() {
            return _this.resizeTimeout = null, _this._swiper.resizeFix();
          }, "resize" === e ? 500 : 0)) : void 0;
        };
      }(this), this.isMobile() && (this.isFullscreen() && "orientationchange" === e) ? setTimeout(function(dataAndEvents) {
        return function() {
          return scrollTo(0, 0), throttledUpdate();
        };
      }(this), 100) : throttledUpdate();
    }, initialize.prototype._renderPage = function(key) {
      var dest;
      var render;
      var data;
      return null == key && (key = this._currentIndex), this._isSwiperCreated && (this._images.length && (this._$.find("h1").html(this._options.getTitle.call(this, this._images[key], key)), this._$.find("h2").html(this._options.getSubtitle.call(this, this._images[key], key)), dest = this._options.footerTemplate ? $(this._options.footerTemplate()) : this._$.find(".footer"), this._$.find(".header").add(dest).find(".paging").html(this._options.getImagePaging.call(this, this._images[key], key, {
        isAdPage : remove(key),
        template : this._options.pagingTemplate
      })), this.isDesktop() ? (render = function(ctxt) {
        var $next;
        return $next = $("<div>" + ctxt + "</div>"), $next.find("a").on("click", function(dataAndEvents) {
          return function() {
            return dataAndEvents.transitionTo("inline");
          };
        }(this)), $next.children();
      }, this._options.linksTemplate && (data = this._options.getLinks.call(this, this._images[key], key, this._options.linksTemplate).trim()), data ? dest.find(".links").html(render(data)).css("display", "") : dest.find(".links").hide()) : dest.find(".links").hide(), this._options.pagination && (this._options.paginationTemplate && dest.find(".pagination").html(this._options.paginationTemplate({
        images : this._images
      })).find(".bubble").removeClass("active").eq(key).addClass("active")), remove(key) ? dest.find(".caption").html("") : this._options.pictureCaptionTemplate && (dest.find(".caption").html(this._options.getImageCaption.call(this, this._images[key], key, this._options.pictureCaptionTemplate)), dest.find(".caption .pictures").on("click", function(self) {
        return function() {
          return self.transitionTo("fullscreen");
        };
      }(this))), this._options.footerTemplate)) ? this._$.find(".footer").replaceWith(dest) : void 0;
    }, initialize.prototype._renderAd = function(node) {
      var instance;
      var c;
      var el;
      return this._$container.addClass("adPage"), instance = $(node), c = this._options.getAdUrl.call(this), !node.isLoading && c ? (node.isLoading = true, el = document.createElement("div"), el.style.display = "none", document.body.appendChild(el), postscribe(el, '<script type="text/javascript" src="' + c + '">\x3c/script>', {
        /**
         * @return {?}
         */
        done : function() {
          return node.isActive() ? $(el).appendTo(node).show() : $(el).remove(), node.isLoading = false;
        }
      })) : void 0;
    }, initialize.prototype._destroyAd = function() {
      return this._$swiperContainer.find(".adContainer").empty(), this._$container.removeClass("adPage");
    }, initialize.prototype._onTapEventHandler = function() {
      return this._isSliding = false, this.isFullscreen() ? this._$container.toggleClass("inactive") : this.transitionTo("fullscreen");
    }, initialize.prototype._createSwiper = function() {
      return!this._isSwiperCreated && this._images.length ? this._swiper = new Swiper(this._$swiperContainer[0], {
        grabCursor : true,
        noSwiping : this._slideshowZoomer ? true : false,
        queueEndCallbacks : true,
        onSwiperCreated : function(el) {
          return function(node) {
            return el._swiper = node, el._isSwiperCreated = true, el._reinitSwiper(node);
          };
        }(this),
        onSlideTouch : function(dataAndEvents) {
          return function(deepDataAndEvents) {
            return dataAndEvents._isSliding = true;
          };
        }(this),
        onSlideClick : function(root) {
          return function(dataAndEvents) {
            return root._slideshowZoomer ? void 0 : root._onTapEventHandler.apply(root, arguments);
          };
        }(this),
        onSlideReset : function(dataAndEvents) {
          return function(deepDataAndEvents) {
            return dataAndEvents._isSliding = false;
          };
        }(this),
        onSlideChangeStart : function(self) {
          return function(data, index) {
            var message;
            return "toNext" === index && (index = "next"), "toPrev" === index && (index = "prev"), message = self._calculateSwiperIndices(data, self._calculateSwiperIndices(data, self._currentIndex)[index]), self._currentIndex = message.current, self._renderPage(), remove(message.current) ? self._renderAd(self._getSlideByImageIndex(data, message.current)) : remove(message.prev) || remove(message.next) ? self._$container.removeClass("adPage") : void 0;
          };
        }(this),
        onSlideChangeEnd : function(self) {
          return function(_this, value) {
            var x;
            var paginationClick;
            var data;
            if ("toNext" === value) {
              /** @type {string} */
              value = "next";
            }
            if ("toPrev" === value) {
              /** @type {string} */
              value = "prev";
            }
            x = self._lastProcessedImageIndex;
            for (;x !== self._currentIndex;) {
              data = self._calculateSwiperIndices(_this, self._calculateSwiperIndices(_this, x)[value]);
              if ("next" === value) {
                self._createSlide(_this, data.last).append();
                _this.removeSlide(0);
              } else {
                if ("prev" === value) {
                  self._createSlide(_this, data.first).prepend();
                  _this.removeLastSlide();
                }
              }
              if (remove(data.prev) || remove(data.next)) {
                self._destroyAd();
              }
              x = data.current;
            }
            return self._lastProcessedImageIndex = x, paginationClick = function() {
              return _this.swipeTo(data.positionOfCurrentIndex, 0, false), $(self).trigger("afterSlide", [self._images[x], x, value]), self._isSliding = false;
            }, b.browser.isIE8() || b.browser.isIE9() ? setTimeout(function() {
              return paginationClick();
            }) : paginationClick();
          };
        }(this)
      }) : void 0;
    }, initialize.prototype._reinitSwiper = function(_this, key) {
      var i;
      var data;
      var l;
      if (null == key) {
        key = this._currentIndex;
      }
      key = this._currentIndex = callback(key, this._images.length - 1);
      data = this._calculateSwiperIndices(_this, key);
      _this.removeAllSlides();
      /** @type {number} */
      i = 0;
      l = data.length;
      for (;l > i;i++) {
        key = data[i];
        this._createSlide(_this, key).append();
      }
      return this._lastProcessedImageIndex = data.current, b.browser.isIE8() || b.browser.isIE9() ? setTimeout(function(dataAndEvents) {
        return function() {
          return _this.swipeTo(data.positionOfCurrentIndex, 0, false), dataAndEvents._renderPage(), dataAndEvents._onResize();
        };
      }(this)) : (_this.swipeTo(data.positionOfCurrentIndex, 0, false), this._renderPage(), this._onResize());
    }, initialize.prototype._createSlide = function(_this, pdataOld) {
      var elem;
      return elem = _this.createSlide(), remove(pdataOld) ? $(elem).addClass("adContainer") : $(elem).css("background-image", "url(" + this._options.getImageUrl.call(this, this._images[pdataOld], pdataOld) + ")"), elem.getImageIndex = function() {
        return parseFloat(this.data("imageIndex"));
      }, elem.data("imageIndex", pdataOld);
    }, initialize.prototype._getSlideByImageIndex = function(_xhr, dataAndEvents) {
      return this._$swiperContainer.find(".swiper-slide[data-imageindex='" + dataAndEvents + "']")[0];
    }, initialize.prototype._calculateSwiperIndices = function(client, value, x1) {
      var start;
      var x2;
      var f;
      var current;
      var list;
      var step;
      var end;
      var offset;
      var stop;
      var last;
      if (null == x1 && (x1 = this._options.prerenderedSlides), f = this._options.ads && this.isDesktop(), x2 = this.getImageCount(), list = [], 1 === x2) {
        /** @type {number} */
        x1 = 0;
      } else {
        for (;x1 && (x1 >= x2 && x1 > 2);) {
          x1 -= 2;
        }
      }
      if (x1) {
        /** @type {number} */
        current = value;
        /** @type {number} */
        step = start = 1;
        /** @type {number} */
        stop = x1 / 2;
        for (;stop >= 1 ? stop >= start : start >= stop;step = stop >= 1 ? ++start : --start) {
          offset = callback(current - 1, x2 - 1);
          if (f && (offset + 1) % this._options.adInterval === 0) {
            list.unshift(current = offset + 0.5);
          } else {
            list.unshift(current = Math.ceil(offset));
          }
        }
      }
      if (list.positionOfCurrentIndex = list.push(value) - 1, x1) {
        /** @type {number} */
        current = value;
        /** @type {number} */
        step = end = 1;
        /** @type {number} */
        last = x1 / 2;
        for (;last >= 1 ? last >= end : end >= last;step = last >= 1 ? ++end : --end) {
          if (f && (current + 1) % this._options.adInterval === 0) {
            list.push(current += 0.5);
          } else {
            list.push(current = callback(Math.floor(current) + 1, x2 - 1));
          }
        }
      }
      return list.first = list[0], list.prev = list[Math.max(list.positionOfCurrentIndex - 1, 0)], list.current = list[list.positionOfCurrentIndex], list.next = list[Math.min(list.positionOfCurrentIndex + 1, list.length - 1)], list.last = list[list.length - 1], list;
    }, initialize;
  }();
  TransitionEvent = function() {
    /**
     * @param {?} allBindingsAccessor
     * @param {Object} element
     * @param {?} config
     * @return {undefined}
     */
    function init(allBindingsAccessor, element, config) {
      var g;
      $.extend(this, config);
      $.extend(this, {
        _container : element,
        _slideshow : allBindingsAccessor,
        _scale : 1,
        _scaleOnPinchStart : 1,
        _panStartPosition : {},
        _lastPinchEnd : 0
      });
      this._slideshow._$container.addClass("zoomer");
      this._hammertime = g = new Hammer.Manager(element);
      g.add(new Hammer.Tap({
        event : "doubletap",
        taps : 2,
        posThreshold : 100
      }));
      g.add(new Hammer.Tap({
        event : "singletap"
      }));
      g.add(new Hammer.Pinch({
        event : "pinch",
        enable : true
      }));
      g.add(new Hammer.Pan({
        event : "pan"
      }));
      g.get("doubletap").recognizeWith("singletap");
      g.get("singletap").requireFailure("doubletap");
      g.on("singletap", function(_this) {
        return function(mapper) {
          return _this.onTap.call(_this, mapper);
        };
      }(this));
      g.on("doubletap", function(me) {
        return function(e) {
          return me.onDoubleTap.call(me, e), me._slideshow.isFullscreen() ? ($(e.target).addClass("smoothRepositioning"), me._applyScale(e.target, 1 === me._scale ? 2.5 : 1, e)) : void 0;
        };
      }(this));
      g.on("pinchstart", function(scene) {
        return function(ev) {
          return scene._slideshow.isFullscreen() ? ($(ev.target).removeClass("smoothRepositioning"), scene._scaleOnPinchStart = scene._scale) : void 0;
        };
      }(this));
      g.on("pinch", function(that) {
        return function(e) {
          return that._slideshow.isFullscreen() ? that._applyScale(e.target, that._scaleOnPinchStart * e.scale, e) : void 0;
        };
      }(this));
      g.on("pinchend", function(me) {
        return function(e) {
          if (me.onPinchEnd.call(me, e), me._slideshow.isFullscreen()) {
            if ($(e.target).addClass("smoothRepositioning"), me._lastPinchEnd = (new Date).getTime(), me._scale < 1) {
              return me._applyScale(e.target, 1, e);
            }
            if (me._scale > 10) {
              return me._applyScale(e.target, 10, e);
            }
            if (me._scale > 1) {
              return me._transformImage(e.target, me._getCorrectImagePosition(e.target));
            }
          }
        };
      }(this));
      g.on("panstart", function(view) {
        return function(ev) {
          var c;
          var k;
          var v;
          var s;
          var y;
          var x;
          var height;
          return view._slideshow.isFullscreen() && (view._lastPinchEnd < (new Date).getTime() - 300 && ($(ev.target).removeClass("smoothRepositioning"), view._lastPinchEnd = 0, view._scale > 1)) ? (c = view._getTransformMatrix(ev.target), s = c[0], k = c[1], v = c[2], y = c[3], x = c[4], height = c[5], view._transformImage(ev.target, view._panStartPosition = {
            x : x / s,
            y : height / y
          })) : void 0;
        };
      }(this));
      g.on("pan", function(view) {
        return function(e) {
          return view._slideshow.isFullscreen() && (0 === view._lastPinchEnd && view._scale > 1) ? view._transformImage(e.target, {
            x : view._panStartPosition.x + e.deltaX / view._scale,
            y : view._panStartPosition.y + e.deltaY / view._scale
          }) : void 0;
        };
      }(this));
      g.on("panend", function(me) {
        return function(e) {
          return me.onPanEnd.call(me, e), me._slideshow.isFullscreen() && (0 === me._lastPinchEnd && ($(e.target).addClass("smoothRepositioning"), me._scale > 1)) ? me._transformImage(e.target, me._getCorrectImagePosition(e.target)) : void 0;
        };
      }(this));
    }
    return init.prototype.destroy = function() {
      return this._hammertime ? this._hammertime.destroy() : void 0;
    }, init.prototype.onTap = function() {
    }, init.prototype.onDoubleTap = function() {
    }, init.prototype.onPinchEnd = function() {
    }, init.prototype.onPanEnd = function() {
    }, init.prototype._applyScale = function(element, obj, this$static) {
      var name;
      var result;
      return name = $(this._container), result = $(element), obj = Math.max(obj, 0.3), 1 !== obj && 1 === this._scale ? (result.addClass(this._slideshow._swiper.params.noSwipingClass), this._slideshow._$container.addClass("hideNonActiveSlides"), 2.5 === obj && 1 === this._scale ? this._transformImage(element, $.extend(this._getCenterImagePosition(element, obj, this$static.center), {
        scale : obj
      })) : this._transformImage(element, $.extend(this._getScaledImagePosition(element, this._scale, obj, this$static.center), {
        scale : obj
      }))) : 1 === obj && 1 !== this._scale ? this._transformImage(element, {
        scale : obj,
        x : 0,
        y : 0
      }, function(dataAndEvents) {
        return function() {
          return result.removeClass(dataAndEvents._slideshow._swiper.params.noSwipingClass), dataAndEvents._slideshow._$container.removeClass("hideNonActiveSlides");
        };
      }(this)) : this._transformImage(element, $.extend(this._getScaledImagePosition(element, this._scale, obj, this$static.center), {
        scale : obj
      })), this._scale = obj;
    }, init.prototype._getCorrectImagePosition = function(el, n, value, b, index, p) {
      var c;
      var box;
      var j;
      var _ref;
      var val;
      var token;
      var elementListeners;
      var ix1;
      var x;
      var y;
      return j = {}, c = $(this._container), box = $(el), _ref = this._getTransformMatrix(el), elementListeners = _ref[0], val = _ref[1], token = _ref[2], ix1 = _ref[3], x = _ref[4], y = _ref[5], null == n && (n = this._scale), value = (null != value ? value * n : x) - this._getImageScaleOffset(el, n).x, b = (null != b ? b * n : y) - this._getImageScaleOffset(el, n).y, index = box.width() * n, p = box.height() * n, j.x = function() {
        switch(false) {
          case !(value > 0):
            return this._getImageScaleOffset(el, n).x / n;
          case !(value + index < c.width()):
            return(this._getImageScaleOffset(el, n).x + c.width() - index) / n;
        }
      }.call(this), j.y = function() {
        switch(false) {
          case !(b > 0):
            return this._getImageScaleOffset(el, n).y / n;
          case !(b + p < c.height()):
            return(this._getImageScaleOffset(el, n).y + c.height() - p) / n;
        }
      }.call(this), j;
    }, init.prototype._getScaledImagePosition = function(checkElement, dataAndEvents, activeXObj, deepDataAndEvents) {
    }, init.prototype._getCenterImagePosition = function(selector, k, mousePosition) {
      var slide;
      var $parent;
      var v;
      var g;
      var h;
      var x;
      var y;
      var udataCur;
      var oldconfig;
      return slide = $(this._container), $parent = $(selector), g = mousePosition.x - $parent.offset().left, h = mousePosition.y - $parent.offset().top, udataCur = slide.width() / 2 - $parent.width() / 2, oldconfig = slide.height() / 2 - $parent.height() / 2, udataCur -= g - $parent.width() / 2, oldconfig -= h - $parent.height() / 2, v = this._getCorrectImagePosition(selector, k, udataCur, oldconfig), {
        x : null != (x = v.x) ? x : udataCur,
        y : null != (y = v.y) ? y : oldconfig
      };
    }, init.prototype._transformImage = function(element, args, next_callback) {
      var el;
      var e;
      var s;
      var x;
      var dest;
      var tx;
      var y;
      return x = args.scale, tx = args.x, y = args.y, null == next_callback && (next_callback = function() {
      }), s = {}, el = $(element), null == x && (x = this._scale), dest = this._getTransformMatrix(element), dest[0] = dest[3] = x, dest[1] = dest[2] = 0, null != tx && (dest[4] = tx * x, s.left = -1 * this._getTransformMatrix(el.parent())[4]), null != y && (dest[5] = y * x, s.top = -1 * this._getTransformMatrix(el.parent())[5]), s.transform = s["-webkit-transform"] = "matrix(" + dest.join(", ") + ")", e = (el.css("transform") || (el.css("-webkit-transform") || "")).replace(/\s/g, "") !== s.transform.replace(/\s/g, 
      ""), e ? (el.one("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function(next_scope) {
        return function(dataAndEvents) {
          return next_callback.call(next_scope);
        };
      }(this)), setTimeout(function(dataAndEvents) {
        return function() {
          return el.css(s);
        };
      }(this))) : next_callback.call(this);
    }, init.prototype._getTransformMatrix = function(element) {
      return($(element).css("transform") || $(element).css("-webkit-transform")).split(/[,\(\)]/).slice(1, -1).map(parseFloat);
    }, init.prototype._getImageScaleOffset = function(el, operator) {
      var n;
      return n = $(el), {
        x : (n.width() * operator - n.width()) / 2,
        y : (n.height() * operator - n.height()) / 2
      };
    }, init;
  }();
  eventHandle.Slideshow = elem;
}), define("framework/slideshow/templates/links", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('{{#if articleLinkUri}}\n    <p class="relatedArticle">\n        <a href="{{{articleLinkUri}}}"><span class="NnIcon linkIcon"></span><span class="title">{{translate "Artikel zur Bildstrecke"}}</span></a> {{{articleLinkText}}}\n    </p>\n{{/if}}\n\n{{#if slideshowOverviewUri}}\n    <p class="slideshowOverview">\n        <a href="{{{slideshowOverviewUri}}}"><span class="NnIcon slideshowIcon"></span><span class="title">{{translate "Alle Bildstrecken"}}</span></a>\n    </p>\n{{/if}}');
}), define("framework/slideshow/templates/pagination", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('{{#each images}}<span class="bubble"></span>{{/each}}');
}), define("framework/slideshow/templates/paging", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<span class="index">{{currentImage}}</span> <span class="separator"></span> {{totalImages}}');
}), define("framework/slideshow/templates/pictureCaption", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<div>\n    {{#if slideshowTitle}}\n        <h4><span class="NnIcon slideshowIcon"></span> {{slideshowTitle}}</h4>\n    {{/if}}\n\n    {{#if title}}\n        <b>{{title}}</b>\n    {{/if}}\n\n    {{{caption}}} <span class="annotation">{{annotation}}</span>\n\n    {{#if isFirstPicture}}\n        <a class="pictures">({{imageCount}} {{translate "Bilder"}})</a>\n    {{/if}}\n\n    {{#if linkUrl}}\n        {{#if linkText}}\n            <a href="{{linkUrl}}" target="_blank" class="link"><span class ="NnIcon linkIcon"></span>{{linkText}}</a>\n        {{/if}}\n    {{/if}}\n\n    {{#if shareUrl}}\n        <div class="socialMedia">\n            <iframe src="//platform.twitter.com/widgets/tweet_button.html?lang={{language}}&amp;text={{shareText}}&amp;via={{shareTwitterVia}}&amp;url={{shareUrl}}" scrolling="no" frameborder="0" style="border:none; overflow:hidden; height:20px;" allowTransparency="true"></iframe>\n            <iframe src="//www.facebook.com/plugins/like.php?locale={{locale}}&amp;href={{shareUrl}}&amp;width&amp;layout=button_count&amp;action=recommend&amp;show_faces=false&amp;share=false&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; height:21px;" allowTransparency="true"></iframe>\n        </div>\n    {{/if}}\n</div>');
}), define("framework/slideshow/templates/pictureTitles", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<div>\n    <b><span class="NnIcon slideshowIcon"></span> {{title}}</b>\n</div>');
}), define("framework/slideshow/templates/slideshow", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<div class="NnSlideshowContainer">\n    <div class="NnSlideshow">\n        <div class="header">\n            <div class="backButton"><a>{{translate "Zur\u00fcck"}}</a></div>\n\n            <div class="row title">\n                <h1 class="cell"></h1>\n            </div>\n\n            <div class="row subtitle">\n                <h2 class="cell"></h2>\n            </div>\n\n            <div class="paging"></div>\n\n            <a class="closeButton"></a>\n        </div>\n\n        <div class="row body">\n            <div class="cell">\n                <div class="nav">\n                    <a class="back"></a>\n                    <a class="NnIcon enlarge"></a>\n                    <a class="forward"></a>\n                </div>\n\n                <div class="swiper-container">\n                    {{> fullscreenLoader style="transparent" visible="true"}}\n                    <div class="swiper-wrapper"></div>\n                </div>\n            </div>\n        </div>\n\n        <div class="row footerContainer">\n            <div class="footer cell">\n                <div class="pagination"></div>\n                \n                <div class="footerWrapper">\n                    <div class="paging"></div>\n                    <div class="caption"></div>\n                    <div class="links"></div>\n                    <div class="nav">\n                        <a class="back"></a>\n                        <a class="forward"></a>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class="spacer row">\n            <div class="cell"></div>\n        </div>\n    </div>\n</div>');
}), define("framework/slideshow/templates/twistedFooter", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<div class="footer cell">\n    <div class="footerWrapper">\n        <div class="paging"></div>\n        <div class="caption"></div>\n        <div class="links"></div>\n    </div>\n\n    <div class="pagination"></div>\n</div>');
}), define("framework/socialMedia/box", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('{{#if useCaptions}}\n    {{#each articleCommunities}}\n        {{#isCommunityTypeComment}}\n            {{#unless ../../hideComments}}\n                {{> commentsLink useCaptions=true}}\n            {{/unless}}\n        {{else}}\n            <a\n                class="share"\n                name="{{type}}"\n                {{#isCommunityTypeFacebook}}\n                    href="javascript:void(0);">\n                        {{tamediaIcon type}}\n                        {{translate "Facebook"}}\n                        ({{count}})\n                    </a>\n                {{else}}\n                    {{#isCommunityTypeTwitter}}\n                        href="https://twitter.com/share?text={{../../../../article.title}}&via={{via}}&url={{url}}">\n                            {{tamediaIcon type}}\n                            {{translate "Twitter"}}\n                            ({{count}})\n                        </a>\n                    {{else}}\n                        href="{{{url}}}">\n                            {{tamediaIcon type}}\n                            {{translate "Mail"}}\n                            ({{count}})\n                    {{/isCommunityTypeTwitter}}\n                {{/isCommunityTypeFacebook}}\n            </a>\n        {{/isCommunityTypeComment}}\n    {{/each}}\n{{else}}\n    {{#each articleCommunities}}\n        {{#isCommunityTypeComment}}\n            {{#unless ../../hideComments}}\n                {{> commentsLink}}\n            {{/unless}}\n        {{else}}\n            <a \n                class="share"\n                name="{{type}}"\n                {{#isCommunityTypeFacebook}}\n                    href="javascript:void(0);">\n                {{else}}\n                    {{#isCommunityTypeTwitter}}\n                        href="https://twitter.com/share?text={{../../../../article.title}}&via={{via}}&url={{url}}">\n                    {{else}}\n                        href="{{url}}">\n                    {{/isCommunityTypeTwitter}}\n                {{/isCommunityTypeFacebook}}\n\n                {{tamediaIcon type}} {{count}}\n            </a>\n        {{/isCommunityTypeComment}}\n    {{/each}}\n{{/if}}');
}), define("framework/socialMedia/commentsLink", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('{{#if useCaptions}}\n    {{#if count}}\n        <div>\n            {{#linkTo "/articles/%id%/comments" id=id class="comments"}}{{tamediaIcon "comment"}} {{comment_count_text}} ({{count}}){{/linkTo}}\n        </div>\n    {{else}}\n        {{#isCommentingAllowed this}}\n            <div>\n                {{#linkTo "/articles/%id%/comments" id=id class="comments"}}{{tamediaIcon "comment"}} {{comment_count_text}} ({{count}}){{/linkTo}}\n            </div>\n        {{/isCommentingAllowed}}\n    {{/if}}\n{{else}}\n    {{#if count}}\n        <div>\n            {{#linkTo "/articles/%id%/comments" id=id class="comments"}}{{tamediaIcon "comment"}} {{count}}{{/linkTo}}\n        </div>\n    {{else}}\n        {{#isCommentingAllowed this}}\n            <div>\n                {{#linkTo "/articles/%id%/comments" id=id class="comments"}}{{tamediaIcon "comment"}} {{count}}{{/linkTo}}\n            </div>\n        {{/isCommentingAllowed}}\n    {{/if}}\n{{/if}}');
}), define("framework/socialMedia/module", ["exports", "framework/config", "framework/browser", "framework/facebook"], function(eventHandle, data, b, $scope) {
  var module;
  var render;
  var init;
  var elem;
  module = {};
  module.config = {};
  /**
   * @param {Array} options
   * @return {?}
   */
  init = function(options) {
    var tab;
    return tab = options.filter(function(statement) {
      return "facebook" === statement.type;
    })[0], b.browser.isWP() || data.config.isNativeApp ? window.location = "https://www.facebook.com/dialog/share?app_id=" + data.config.facebook.init.appId + "&href=" + tab.url + "&redirect_uri=" + location.href : $scope.facebook.init().then(function() {
      return FB.ui({
        method : "share",
        href : tab.url
      });
    });
  };
  /**
   * @param {Object} ctxt
   * @return {?}
   */
  render = function(ctxt) {
    return require("framework/socialMedia/box")["default"](ctxt);
  };
  elem = {
    /**
     * @param {Object} data
     * @param {Object} script
     * @return {?}
     */
    init : function(data, script) {
      return data.article && data.articleCommunities ? (script.html(render(data)), $(".share[name='facebook']").off().on("click", function() {
        return init(data.articleCommunities);
      })) : void 0;
    }
  };
  eventHandle.socialMedia = elem;
}), define("framework/statistics", ["exports", "framework/utils"], function($scope, gma) {
  var map;
  var _load;
  var resolver;
  var module;
  var statistics;
  module = {
    config : null,
    providersDefaultParams : null
  };
  resolver = RSVP.defer();
  map = {
    device_characteristics : "dimension1",
    app_mode : "dimension2",
    page_type : "dimension3",
    parent_category : "dimension4",
    sub_category : "dimension5",
    version : "dimension6",
    ad_blocker : "dimension7"
  };
  /**
   * @param {string} url
   * @return {?}
   */
  _load = function(url) {
    var img;
    return img = new Image, img.src = gma.utils.addRnd(url);
  };
  statistics = {
    /**
     * @param {(Object|string)} expectedNumberOfNonCommentArgs
     * @param {?} config
     * @return {?}
     */
    init : function(expectedNumberOfNonCommentArgs, config) {
      var x;
      var xs;
      var i;
      var _j;
      var _i;
      var max;
      var _len;
      var worlds;
      var google_analytics;
      var world;
      if (module.config = expectedNumberOfNonCommentArgs, module.providersDefaultParams = config, null != module.config.ga) {
        worlds = module.config.ga.trackers;
        /** @type {number} */
        i = _j = 0;
        max = worlds.length;
        for (;max > _j;i = ++_j) {
          if (world = worlds[i], ga("create", {
            trackingId : world.id,
            cookieDomain : "auto",
            name : i + 1
          }), xs = null != (google_analytics = module.providersDefaultParams.google_analytics) ? google_analytics.customVars : void 0) {
            /** @type {number} */
            _i = 0;
            _len = xs.length;
            for (;_len > _i;_i++) {
              x = xs[_i];
              if (null != map[x.name]) {
                ga(i + 1 + ".set", map[x.name], x.value);
              }
            }
          }
        }
      }
      return null != module.config.gtm && module.config.gtm.id ? ((null != window.dataLayer ? window.dataLayer : window.dataLayer = []).push({
        "gtm.start" : (new Date).getTime(),
        event : "gtm.js"
      }), $.loadExternalScript("//www.googletagmanager.com/gtm.js?id=" + module.config.gtm.id).then(function() {
        return resolver.resolve();
      })) : resolver.resolve();
    },
    /**
     * @param {?} recurring
     * @param {?} deepDataAndEvents
     * @param {string} optgroup
     * @param {Object} target
     * @return {?}
     */
    trackPageView : function(recurring, deepDataAndEvents, optgroup, target) {
      return resolver.promise.then(function() {
        var attributes;
        var src;
        var t;
        var node;
        var j;
        var b;
        var i;
        var key;
        var a;
        var _len;
        var options;
        var defaults;
        var defaultConfig;
        var scripts;
        var path;
        var x;
        var url;
        var value;
        /** @type {Array} */
        path = [];
        /** @type {number} */
        b = 0;
        a = deepDataAndEvents.length;
        for (;a > b;b++) {
          defaults = deepDataAndEvents[b];
          attributes = $.extend({}, defaults);
          for (t in target) {
            src = target[t];
            if (t === attributes.provider) {
              $.extend(attributes, src);
            }
          }
          switch(attributes.provider) {
            case "gtm":
              options = $.extend({}, {
                event : "pageChange",
                page : recurring
              }, attributes);
              delete options.provider;
              delete options.id;
              defaultConfig = module.providersDefaultParams.gtm;
              for (key in defaultConfig) {
                value = defaultConfig[key];
                options[key] = $.isFunction(value) ? value() : value;
              }
              if (null != module.config.gtm && module.config.gtm.id) {
                path.push(window.dataLayer.push(options));
              } else {
                path.push(void 0);
              }
              break;
            case "google_analytics":
              options = {
                page : recurring
              };
              scripts = attributes.customVars;
              /** @type {number} */
              i = 0;
              _len = scripts.length;
              for (;_len > i;i++) {
                node = scripts[i];
                if (null != map[node.name]) {
                  options[map[node.name]] = node.value;
                }
              }
              if (null != module.config.ga) {
                path.push(function() {
                  var _i;
                  var _len;
                  var xs;
                  var _results;
                  xs = module.config.ga.trackers;
                  /** @type {Array} */
                  _results = [];
                  /** @type {number} */
                  j = _i = 0;
                  _len = xs.length;
                  for (;_len > _i;j = ++_i) {
                    x = xs[j];
                    _results.push(ga(j + 1 + ".send", "pageview", options));
                  }
                  return _results;
                }());
              } else {
                path.push(void 0);
              }
              break;
            case "wemf":
              url = "desktop" === module.config.env ? attributes.desktop_url : attributes.url;
              if ("string" === $.type(optgroup)) {
                if (optgroup) {
                  url = url.slice(0, url.lastIndexOf("/")).concat("/", optgroup);
                }
              }
              path.push(_load(url));
              break;
            case "webseismo":
              if ("object" !== $.type(optgroup) || ("slideshow" !== optgroup.type || 1 === optgroup.index)) {
                path.push(_load(attributes.url));
              } else {
                path.push(void 0);
              }
              break;
            default:
              path.push(void 0);
          }
        }
        return path;
      });
    },
    /**
     * @param {string} name
     * @param {string} result
     * @param {?} y
     * @param {?} platform
     * @return {?}
     */
    trackGoogleAnalyticsEvent : function(name, result, y, platform) {
      var i;
      var _i;
      var max;
      var worlds;
      var _results;
      var world;
      if (null != module.config.ga) {
        worlds = module.config.ga.trackers;
        /** @type {Array} */
        _results = [];
        /** @type {number} */
        i = _i = 0;
        max = worlds.length;
        for (;max > _i;i = ++_i) {
          world = worlds[i];
          _results.push(ga(i + 1 + ".send", "event", name, result, y, platform));
        }
        return _results;
      }
    },
    /**
     * @param {string} e
     * @param {Object} b
     * @return {?}
     */
    trackGtmEvent : function(e, b) {
      return null == b && (b = {}), null != module.config.gtm && module.config.gtm.id ? window.dataLayer.push($.extend({}, {
        event : e
      }, b)) : void 0;
    }
  };
  $scope.statistics = statistics;
}), define("framework/store", ["exports"], function(win) {
  var Stream;
  var args;
  var read;
  var self;
  var store;
  self = {};
  self.config = {
    apiUrl : "/api",
    requestTimeout : 5E3,
    stream : true
  };
  args = {
    fronts : "page_elements",
    lists : "page_elements",
    categories : "page_elements",
    page_elements : ["articles", "slideshow_overviews.slideshows"],
    articles : ["top_element.slideshow", "inline_elements.slideshow", "article_elements.slideshow"],
    articleElements : "slideshow"
  };
  /**
   * @param {string} fileName
   * @param {Object} obj
   * @param {?} callback
   * @return {?}
   */
  read = function(fileName, obj, callback) {
    var value;
    var j;
    var _i;
    var _len;
    var key;
    var keys;
    var _results;
    keys = fileName.split(".");
    /** @type {Array} */
    _results = [];
    /** @type {number} */
    j = _i = 0;
    _len = keys.length;
    for (;_len > _i;j = ++_i) {
      if (key = keys[j], null != obj) {
        if ($.isArray(obj[key])) {
          _results.push(function() {
            var level;
            var i;
            var arr;
            var _results;
            arr = obj[key];
            /** @type {Array} */
            _results = [];
            /** @type {number} */
            level = 0;
            i = arr.length;
            for (;i > level;level++) {
              value = arr[level];
              if (j < keys.length - 1) {
                _results.push(read(keys.slice(j + 1).join("."), value, callback));
              } else {
                _results.push(callback(keys[keys.length - 1], value));
              }
            }
            return _results;
          }());
        } else {
          if (null == obj[key]) {
            break;
          }
          if (j === keys.length - 1) {
            _results.push(callback(key, obj[key]));
          } else {
            _results.push(obj = obj[key]);
          }
        }
      }
    }
    return _results;
  };
  Stream = function() {
    /**
     * @param {string} stream
     * @return {undefined}
     */
    function self(stream) {
      /** @type {string} */
      this.stream = stream;
    }
    return self.prototype.stream = null, self.prototype.events = {}, self.prototype.queue = {}, self.prototype.node = function(dataAndEvents, selector) {
      return this.on("node-" + dataAndEvents, selector);
    }, self.prototype.done = function(selector) {
      return this.on("done", selector);
    }, self.prototype.on = function(type, fn) {
      var _ref1;
      var type_tracker;
      for (;(null != (type_tracker = this.queue[type]) ? type_tracker.length : void 0) > 0;) {
        fn.apply(this, $.makeArray(this.queue[type].shift().args));
      }
      return(null != (_ref1 = this.events)[type] ? _ref1[type] : _ref1[type] = []).push({
        fn : fn
      });
    }, self.prototype.trigger = function(type, data) {
      var queue;
      var listener;
      var event;
      var _len;
      var _ref;
      var _results;
      if (null != this.events[type]) {
        _ref = this.events[type];
        /** @type {Array} */
        _results = [];
        /** @type {number} */
        event = 0;
        _len = _ref.length;
        for (;_len > event;event++) {
          listener = _ref[event];
          _results.push(listener.fn.apply(this, $.makeArray(data)));
        }
        return _results;
      }
      return(null != (queue = this.queue)[type] ? queue[type] : queue[type] = []).push({
        args : data
      });
    }, self;
  }();
  store = {
    /**
     * @param {?} replacementHash
     * @return {?}
     */
    configure : function(replacementHash) {
      return $.extend(self.config, replacementHash);
    },
    /**
     * @param {string} name
     * @param {?} value
     * @return {?}
     */
    get : function(name, value) {
      var b;
      var a;
      var old;
      var s;
      if (this[name]) {
        if (!value) {
          return old = {}, old[name] = this[name], old;
        }
        s = this[name];
        /** @type {number} */
        b = 0;
        a = s.length;
        for (;a > b;b++) {
          if (old = s[b], old.id.toString() === value.toString()) {
            return old;
          }
        }
      }
    },
    /**
     * @param {Text} topic
     * @param {Element} data
     * @return {?}
     */
    reload : function(topic, data) {
      var i;
      var id;
      var _ref2;
      var exps;
      var dataText;
      var module;
      if (id = data.id, module = data.subkey, dataText = data.subid, null != module && (topic = (topic.singularize() + "_" + module).camelCase()), null != dataText) {
        throw "store.reload with subid's is not implemented yet.";
      }
      if (this[topic]) {
        /** @type {number} */
        i = _ref2 = exps = this[topic].length - 1;
        for (;0 >= exps ? 0 >= _ref2 : _ref2 >= 0;i = 0 >= exps ? ++_ref2 : --_ref2) {
          if (null == id || this[topic][i].id === id) {
            this[topic].splice(i, 1);
          }
        }
      }
      return this.load.apply(this, arguments);
    },
    /**
     * @param {string} name
     * @param {?} opt_attributes
     * @return {?}
     */
    load : function(name, opt_attributes) {
      var val;
      var node;
      var path;
      var _ref1;
      var item;
      var space;
      var id;
      var optgroup;
      return item = null != opt_attributes ? opt_attributes : {}, val = item.id, id = item.subkey, space = item.subid, _ref1 = item.query, node = item.node, path = item.nodeCallback, null == val && (val = ""), null != id ? (optgroup = self.config.apiUrl + "/" + name + "/" + val + "/" + id, null != space && (optgroup += "/" + space), name = (name.singularize() + "_" + id).camelCase()) : optgroup = val ? self.config.apiUrl + "/" + name + "/" + val : self.config.apiUrl + "/" + name, new RSVP.Promise(function(q) {
        return function($sanitize, cb) {
          var result;
          var m;
          var handler;
          var stream;
          return result = q.get(name, val), null != result && (val && null == _ref1 || null != _ref1 && !val) ? $sanitize({
            payload : result
          }) : (null != _ref1 && (optgroup += "?" + function() {
            var key;
            var value;
            return function() {
              var headers;
              /** @type {Array} */
              headers = [];
              for (key in _ref1) {
                value = _ref1[key];
                headers.push(key + "=" + value);
              }
              return headers;
            }().join("&");
          }()), null != node && self.config.stream ? (m = false, stream = new Stream(handler = oboe(optgroup).node(node, function(val, match, e) {
            var uHostName;
            var query;
            var path;
            return uHostName = match[match.length - 1], path = match[match.length - 2], 0 === uHostName ? (m = true, q.save(e[0]), $sanitize({
              payload : e[0][name.singularize()],
              stream : stream,
              node : node
            })) : (query = {}, query[path] = val, q.save(query)), stream.trigger("node-" + node, [val, match, e]);
          }).done(function(data) {
            return stream.isDone = true, q.save(data), stream.trigger("done", [data]);
          }).fail(function(attributes) {
            return cb($.extend(attributes, {
              message : 'Stream .node("' + node + '"): Status ' + attributes.statusCode + ' "' + attributes.body + '" on: ' + optgroup
            }));
          })), setTimeout(function() {
            return m ? void 0 : (handler.abort(), cb('Stream .node("' + node + '"): Timeout ' + self.config.requestTimeout + "ms reached: " + optgroup));
          }, self.config.requestTimeout)) : $.get(optgroup).then(function(result) {
            var y;
            var x;
            return null != id && (y = Object.keys(result)[0], x = name.singularize(), result[x] = {}, result[x][y] = result[y].splice(0, result[y].length), result[x].id = val, delete result[y]), q.save(result), null != _ref1 && "" === val ? $sanitize({
              payload : result
            }) : ("" !== val && (result = result[name.singularize()]), $sanitize({
              payload : result
            }));
          }, function(outErr) {
            return cb(outErr);
          }));
        };
      }(this));
    },
    /**
     * @param {Object} target
     * @return {?}
     */
    save : function(target) {
      var copy;
      var i;
      var paramName;
      var len;
      var fileName;
      var name;
      var rawParams;
      var removed;
      var paths;
      /** @type {Array} */
      removed = [];
      for (name in target) {
        if (paramName = name.pluralize(), paramName in args) {
          rawParams = $.makeArray(args[paramName]);
          /** @type {number} */
          i = 0;
          len = rawParams.length;
          for (;len > i;i++) {
            fileName = rawParams[i];
            read(fileName, target[name], function(init) {
              return function(key, res) {
                var obj;
                return obj = {}, obj[key] = res, init.save(obj);
              };
            }(this));
          }
        }
        if (null == this[paramName]) {
          /** @type {Array} */
          this[paramName] = [];
        }
        if ($.isArray(target[name])) {
          removed.push(function() {
            var _i;
            var _len;
            var src;
            var rulesets;
            src = target[name];
            /** @type {Array} */
            rulesets = [];
            /** @type {number} */
            _i = 0;
            _len = src.length;
            for (;_len > _i;_i++) {
              copy = src[_i];
              paths = {};
              paths[name] = copy;
              rulesets.push(this.save(paths));
            }
            return rulesets;
          }.call(this));
        } else {
          if (this.get(name.pluralize(), target[name].id)) {
            removed.push(void 0);
          } else {
            removed.push(this[paramName].push(target[name]));
          }
        }
      }
      return removed;
    },
    /**
     * @param {Object} o
     * @return {?}
     */
    materialize : function(o) {
      var prevChunksLen;
      var id;
      var table;
      var expectationResult;
      return id = o.id, table = o.key.pluralize(), null != o.rootKey && (table = o.rootKey.pluralize()), prevChunksLen = 0, expectationResult = {}, $.get(self.config.apiUrl + "/" + table + "/" + id).then(function(dataAndEvents) {
        var handle;
        return expectationResult = dataAndEvents[table.singularize()], null != o.rootKey && (table = o.key.pluralize()), (handle = function(result, key, next) {
          var sid;
          return result[key] && ((sid = result[key].join(",")) && (prevChunksLen += result[key].length, $.get(self.config.apiUrl + "/" + key + "/" + sid).then(function(response) {
            return response[key] || (response[key] = [response[key.singularize()]]), _.forEach(response[key], function(a, index) {
              return result[key][index] = a, prevChunksLen--, handle(a, key, next);
            });
          }))), 0 === prevChunksLen ? next(expectationResult) : void 0;
        })(expectationResult, table, o.callback);
      });
    }
  };
  win.store = store;
}), define("framework/string", function() {
  if (null == String.prototype.trim) {
    !function() {
      var r20;
      return r20 = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, String.prototype.trim = function() {
        return this.replace(r20, "");
      };
    }();
  }
  /**
   * @return {?}
   */
  String.prototype.singularize = function() {
    return "ies" === this.slice(-3) ? this.slice(0, -3).concat("y") : "s" === this.slice(-1) ? this.slice(0, -1) : this;
  };
  /**
   * @return {?}
   */
  String.prototype.pluralize = function() {
    return "y" === this.slice(-1) ? this.slice(0, -1).concat("ies") : "s" !== this.slice(-1) ? this + "s" : this;
  };
  /**
   * @param {boolean} keepData
   * @return {?}
   */
  String.prototype.camelCase = function(keepData) {
    var r20;
    return null == keepData && (keepData = false), r20 = keepData ? new RegExp("(([-_]|^)[a-z])", "g") : new RegExp("(([-_])[a-z])", "g"), this.replace(r20, function(letter) {
      return letter.toUpperCase().replace(/[-_]/, "");
    });
  };
  /**
   * @return {?}
   */
  String.prototype.replaceNewLine = function() {
    var messageFormat;
    return messageFormat = $("<div>" + this + "</div>").html(), messageFormat.replace(/<br>/g, " ");
  };
}), define("framework/translations", ["exports"], function(eventHandle) {
  var $scope;
  var elem;
  $scope = {};
  $scope.config = {
    language : "de"
  };
  elem = {
    texts : {
      Frontseite : "Au top",
      "letztes Update" : "derni\u00e8re mise \u00e0 jour",
      Kommentare : "Commentaires",
      "Zur\u00fcck" : "Retour",
      Bild : "Image",
      Bilder : "Images",
      Video : "Vid\u00e9o",
      "Artikel zur Bildstrecke" : "Un article est li\u00e9 \u00e0 cette galerie",
      "Alle Bildstrecken" : "Toutes les galeries de photos",
      von : "de",
      vor : "il y a",
      Vor : "Il y a",
      "wenigen Sek" : "quelques secondes",
      Min : "min",
      Minuten : "minutes",
      Tg : "jrs",
      Tagen : "jours",
      Std : "h",
      Stunden : "heures",
      Mnt : "mois",
      Monaten : "mois",
      Jahr : "an",
      Jahren : "ans",
      Mehr : "Plus",
      Artikel : "Articles",
      Mo : "Lu",
      Di : "Ma",
      Mi : "Me",
      Do : "Je",
      Fr : "Ve",
      Sa : "Sa",
      So : "Di",
      Montag : "Lundi",
      Dienstag : "Mardi",
      Mittwoch : "Mercredi",
      Donnerstag : "Jeudi",
      Freitag : "Vendredi",
      Samstag : "Samedi",
      Sonntag : "Dimanche",
      Januar : "Janvier",
      Februar : "F\u00e9vrier",
      "M\u00e4rz" : "Mars",
      April : "Avril",
      Mai : "Mai",
      Juni : "Juin",
      Juli : "Juillet",
      August : "Ao\u00fbt",
      September : "Septembre",
      Oktober : "Octobre",
      November : "Novembre",
      Dezember : "D\u00e9cembre",
      Kommentar : "Commentaire",
      Empfehlen : "Recommander",
      Antworten : "R\u00e9pondre",
      Melden : "Signaler",
      Senden : "Envoyer",
      "Unbekannter Autor" : "Auteur inconnu",
      "Schreiben Sie einen Kommentar..." : "Laisser un commentaire...",
      "Verbleibende Anzahl Zeichen" : "Nombre de signes disponible",
      Vorname : "Pr\u00e9nom",
      Name : "Nom",
      PLZ : "NPA",
      Wohnort : "Lieu d'habitation",
      "E-Mail-Adresse" : "Adresse E-Mail",
      Grund : "Raison",
      "Ich habe die" : "J'ai pris connaissance des",
      Regeln : "conditions d'utilisation",
      "gelesen und erkl\u00e4re mich einverstanden" : "et les accepte",
      fehlt : "manquant",
      "Bitte geben Sie eine korrekte E-Mail-Adresse ein" : "Veuillez donner une adresse e-mail valide",
      "Bitte lesen und akzeptieren Sie die Regeln" : "Pri\u00e8re de lire et d'accepter les r\u00e8gles",
      "Bitte f\u00fcllen Sie alle Felder korrekt aus." : "Veuillez Veuillez remplir tous les champs correctement.",
      "Bitte f\u00fcllen Sie alle Felder korrekt aus und akzeptieren Sie die Regeln." : "Veuillez remplir tous les champs correctement et accepter les conditions.",
      "Dieser Kommentar wurde wegen Regelverletzung gel\u00f6scht" : "Ce commentaire a \u00e9t\u00e9 supprim\u00e9 car il ne respectait pas notre charte",
      "Kommentar versandt" : "Commentaire envoy\u00e9",
      "Kommentar gemeldet" : "Commentaire pr\u00e9venu",
      "Vielen Dank f\u00fcr Ihren Beitrag. Ihr Kommentar wurde versandt. Bis er von der Redaktion freigeschaltet wird, kann es eine gewisse Zeit dauern." : "Merci pour votre contribution. Votre commentaire a \u00e9t\u00e9 envoy\u00e9. Veuillez pr\u00e9voir un d\u00e9lai avant qu'il ne soit valid\u00e9 par la r\u00e9daction.",
      "Danke. Unsere Moderatoren pr\u00fcfen Ihren Hinweis so schnell wie m\u00f6glich." : "Votre annonce va \u00eatre \u00e9tudi\u00e9e.",
      "Senden fehlgeschlagen" : "Echec de l'envoi",
      "Ihr Kommentar konnte aus technischen Gr\u00fcnden nicht \u00fcbermittelt werden." : "Votre commentaire n'a pas pu \u00eatre envoy\u00e9 pour des raisons techniques.",
      "Ihre Meldung konnte aus technischen Gr\u00fcnden nicht \u00fcbermittelt werden." : "Votre signalement n'a pas pu \u00eatre envoy\u00e9 pour des raisons techniques.",
      Neuste : "Les plus r\u00e9cents",
      Neuster : "Le plus r\u00e9cent",
      Beliebteste : "Les plus lus",
      "Wahl der Redaktion" : "Choix de la r\u00e9daction",
      "\u00c4lteste" : "Les plus anciens",
      "Regelverstoss melden" : "Signaler un abus",
      "Sie sind der Meinung, dass dieser Kommentar gel\u00f6scht werden sollte? Dann f\u00fcllen Sie bitte dieses Formular aus" : "Vous pensez que ce commentaire devrait \u00eatre supprim\u00e9? Alors SVP remplissez ce formulaire",
      "Mit Facebook anmelden" : "Se connecter via Facebook",
      Abmelden : "D\u00e9connecter",
      "Kommentar auf Facebook teilen" : "Partager commentaire sur Facebook",
      Teilen : "Partager",
      "Alle Kommentare anzeigen" : "Afficher tous les commentaires",
      "Die anderen Spiele" : "Autres matchs",
      Frage : "Question",
      "Ihre Frage..." : "Votre question...",
      "Der Live-Chat wird moderiert. Die Redaktion wird ausgew\u00e4hlte Einsendungen ver\u00f6ffentlichen." : "Le live chat est mod\u00e9r\u00e9. La r\u00e9daction s\u00e9lectionnera parmi les messages re\u00e7us.",
      "Nachricht versandt" : "Message envoy\u00e9",
      "Vielen Dank f\u00fcr Ihren Beitrag. Ihre Nachricht wurde versandt. Die Redaktion wird ausgew\u00e4hlte Einsendungen ver\u00f6ffentlichen." : "Merci pour votre commentaire. Il a bien \u00e9t\u00e9 envoy\u00e9. La r\u00e9daction s\u00e9lectionnera parmi les messages re\u00e7us.",
      "Ihre Nachricht konnte aus technischen Gr\u00fcnden nicht \u00fcbermittelt werden." : "Votre message n'a pas pu \u00eatre envoy\u00e9 pour des raisons techniques. ",
      "Liveticker aktualisiert automatisch" : "Le ticker s'actualise automatiquement",
      "letzte Meldung %s" : "derni\u00e8re nouvelle %s",
      "Liveticker wird geladen..." : "Live en cours de chargement...",
      "Mehr anzeigen..." : "Afficher plus...",
      Unterkategorien : "Sous-rubriques",
      "Verbindung fehlgeschlagen, erneuter Versuch..." : "Echec de la connexion, nouvelle tentative en cours...",
      "Verbindung fehlgeschlagen, bitte versuchen Sie es sp\u00e4ter erneut." : "Echec de la connexion, veuillez r\u00e9essayer plus tard.",
      "Artikel teilen" : "Partager l\u2019article",
      Mail : "Mail",
      Twitter : "Twitter",
      Facebook : "Facebook",
      "Zur Desktop-Ansicht wechseln" : "Afficher le site web classique",
      "\u00dcber diese Version" : "Sur cette version",
      Werbung : "Publicit\u00e9",
      "Meine Abos" : "Mon abonnement"
    },
    /**
     * @param {?} opt_attributes
     * @return {?}
     */
    configure : function(opt_attributes) {
      return $scope.config.language = opt_attributes;
    },
    /**
     * @param {string} name
     * @return {?}
     */
    translate : function(name) {
      return "de" === $scope.config.language ? name : this.texts[name];
    }
  };
  eventHandle.translations = elem;
}), define("framework/utils", ["exports", "framework/translations"], function(module, self) {
  var $scope;
  var utils;
  $scope = {};
  $scope.config = {
    language : "de"
  };
  utils = {
    /**
     * @param {?} replacementHash
     * @return {?}
     */
    configure : function(replacementHash) {
      return $.extend($scope.config, replacementHash);
    },
    /**
     * @param {string} queryStr
     * @return {?}
     */
    addRnd : function(queryStr) {
      return queryStr + "?_=" + (new Date).getTime();
    },
    /**
     * @param {?} m1
     * @return {?}
     */
    checkIfOneHourPassed : function(m1) {
      return(new Date).getTime() <= parseInt(m1) + 36E5;
    },
    /**
     * @return {?}
     */
    isProduction : function() {
      return window.location.hostname.toLowerCase().indexOf("mobile2") > -1;
    },
    /**
     * @param {boolean} dataAndEvents
     * @param {boolean} not
     * @return {?}
     */
    isCommentingAllowed : function(dataAndEvents, not) {
      var pass;
      return pass = [0, 6].indexOf((new Date).getDay()) < 0, dataAndEvents && pass || not && !pass;
    },
    /**
     * @return {?}
     */
    hideAddressBar : function() {
      return null == this.windowOuterHeight && (this.windowOuterHeight = window.outerHeight), document.body.style.height = this.windowOuterHeight + 1 + "px", window.scrollTo(0, 1);
    },
    /**
     * @param {?} html
     * @param {string} optgroup
     * @param {string} rvar
     * @return {?}
     */
    showDialog : function(html, optgroup, rvar) {
      var el;
      return el = $(html), el.one("click", function(event) {
        return event.delegateTarget.style.display = "none";
      }), el.find("h1").text(optgroup), el.find("h2").text(rvar), el.find(">div>div").empty(), el.show();
    },
    /**
     * @return {?}
     */
    isDch : function() {
      return "de" === $scope.config.language;
    },
    /**
     * @param {string} selector
     * @param {Array} contextElem
     * @return {?}
     */
    extractInlineElements : function(selector, contextElem) {
      var i;
      var match;
      var rquickExpr;
      var colNames;
      /** @type {Array} */
      colNames = [];
      /** @type {RegExp} */
      rquickExpr = /\x3c!--{{inline_element\(['"]?([a-fA-F0-9]+)['"]?\)}}--\x3e/g;
      /** @type {number} */
      i = 0;
      for (;match = rquickExpr.exec(selector);) {
        if (match.index > i) {
          colNames.push(match.input.substring(i, match.index));
        }
        colNames.push(contextElem.filter(function(m) {
          return m.id === match[1];
        })[0]);
        /** @type {number} */
        i = match.index + match[0].length;
      }
      return i < selector.length && colNames.push(selector.substring(i, selector.length)), colNames;
    },
    /**
     * @param {?} cursor
     * @return {?}
     */
    calculateAndInsertTime : function(cursor) {
      var i;
      return i = this, cursor.each(function() {
        return this.innerHTML = i.date.formatRelative(this.getAttribute("data-timestamp"));
      });
    },
    /**
     * @param {string} v
     * @return {?}
     */
    stripHtml : function(v) {
      return v ? v.replace(/<[^>]+>/g, "") : void 0;
    },
    date : {
      /**
       * @param {Date} date
       * @return {?}
       */
      format : function(date) {
        var position;
        var x;
        return position = ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"], x = ["Januar", "Februar", "M\u00e4rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"], date = new Date(1E3 * date), self.translations.translate(position[date.getDay()]) + " " + date.getDate() + function() {
          return utils.isDch() ? ". " : " ";
        }() + self.translations.translate(x[date.getMonth()]) + " " + date.getFullYear();
      },
      /**
       * @param {Date} selected
       * @return {?}
       */
      formatShort : function(selected) {
        var label;
        var str;
        return selected = new Date(1E3 * selected), label = selected.getDate(), 1 === label.toString().length && (label = "0" + label), str = selected.getMonth() + 1, 1 === str.toString().length && (str = "0" + str), label + "." + str + "." + selected.getFullYear();
      },
      /**
       * @param {number} value
       * @return {?}
       */
      formatRelative : function(value) {
        var sectionLength;
        var expires;
        return isNaN((new Date(value)).getTime()) && (value = 1E3 * value), sectionLength = Math.round(((new Date).getTime() - (new Date(value)).getTime()) / 6E4), expires = "", expires = sectionLength >= 1051200 ? Math.floor(sectionLength / 60 / 24 / 365) + " " + self.translations.translate("Jahren") + "." : sectionLength >= 525600 ? Math.floor(sectionLength / 60 / 24 / 365) + " " + self.translations.translate("Jahr") + "." : sectionLength >= 43200 ? Math.floor(sectionLength / 60 / 24 / 30) + " " + 
        self.translations.translate("Mnt") + "." : sectionLength >= 1440 ? Math.floor(sectionLength / 60 / 24) + " " + self.translations.translate("Tg") + "." : sectionLength >= 60 ? Math.floor(sectionLength / 60) + " " + self.translations.translate("Std") + "." : sectionLength >= 1 ? sectionLength + " " + self.translations.translate("Min") + "." : self.translations.translate("wenigen Sek") + ".";
      },
      /**
       * @param {Date} dt
       * @return {?}
       */
      formatTime : function(dt) {
        var label;
        var str;
        return dt = new Date(1E3 * dt), label = dt.getHours(), 1 === label.toString().length && (label = "0" + label), str = dt.getMinutes(), 1 === str.toString().length && (str = "0" + str), label + ":" + str;
      }
    }
  };
  module.utils = utils;
}), define("framework/uuid", ["exports"], function(p) {
  /**
   * @return {?}
   */
  function Mash() {
    /** @type {number} */
    var n = 4022871197;
    /**
     * @param {string} data
     * @return {?}
     */
    var mash = function(data) {
      data = data.toString();
      /** @type {number} */
      var i = 0;
      for (;i < data.length;i++) {
        n += data.charCodeAt(i);
        /** @type {number} */
        var h = 0.02519603282416938 * n;
        /** @type {number} */
        n = h >>> 0;
        h -= n;
        h *= n;
        /** @type {number} */
        n = h >>> 0;
        h -= n;
        n += 4294967296 * h;
      }
      return 2.3283064365386963E-10 * (n >>> 0);
    };
    return mash.version = "Mash 0.9", mash;
  }
  /**
   * @return {?}
   */
  function Alea() {
    return function(args) {
      /** @type {number} */
      var s0 = 0;
      /** @type {number} */
      var s1 = 0;
      /** @type {number} */
      var s2 = 0;
      /** @type {number} */
      var c = 1;
      /** @type {Array} */
      var matches = [];
      /** @type {number} */
      var pattern = 0;
      var mash = Mash();
      s0 = mash(" ");
      s1 = mash(" ");
      s2 = mash(" ");
      /** @type {number} */
      var sel = 0;
      for (;8 > sel;sel++) {
        matches[sel] = mash(" ");
      }
      if (0 == args.length) {
        /** @type {Array} */
        args = [+new Date];
      }
      /** @type {number} */
      var i = 0;
      for (;i < args.length;i++) {
        s0 -= mash(args[i]);
        if (0 > s0) {
          s0 += 1;
        }
        s1 -= mash(args[i]);
        if (0 > s1) {
          s1 += 1;
        }
        s2 -= mash(args[i]);
        if (0 > s2) {
          s2 += 1;
        }
        /** @type {number} */
        sel = 0;
        for (;8 > sel;sel++) {
          matches[sel] -= mash(args[i]);
          if (matches[sel] < 0) {
            matches[sel] += 1;
          }
        }
      }
      /**
       * @return {?}
       */
      var random = function() {
        /** @type {number} */
        var a01 = 2091639;
        /** @type {number} */
        pattern = 8 * matches[pattern] | 0;
        var id = matches[pattern];
        /** @type {number} */
        var t = a01 * s0 + 2.3283064365386963E-10 * c;
        return s0 = s1, s1 = s2, s2 = t - (c = 0 | t), matches[pattern] -= s2, matches[pattern] < 0 && (matches[pattern] += 1), id;
      };
      return random.uint32 = function() {
        return 4294967296 * random();
      }, random.fract53 = function() {
        return random() + 1.1102230246251565E-16 * (2097152 * random() | 0);
      }, random.addNoise = function() {
        /** @type {number} */
        var i = arguments.length - 1;
        for (;i >= 0;i--) {
          /** @type {number} */
          sel = 0;
          for (;8 > sel;sel++) {
            matches[sel] -= mash(arguments[i]);
            if (matches[sel] < 0) {
              matches[sel] += 1;
            }
          }
        }
      }, random.version = "Kybos 0.9", random.args = args, random;
    }(Array.prototype.slice.call(arguments));
  }
  var floor = Alea();
  var data = {
    empty : "00000000-0000-0000-0000-000000000000",
    /**
     * @param {?} string
     * @return {?}
     */
    parse : function(string) {
      var result = string.toString().trim().toLowerCase().replace(/^[\s\r\n]+|[\{\}]|[\s\r\n]+$/g, "");
      if (/[a-f0-9]{8}\-[a-f0-9]{4}\-[a-f0-9]{4}\-[a-f0-9]{4}\-[a-f0-9]{12}/.test(result)) {
        return result;
      }
      throw new Error("Unable to parse UUID");
    },
    /**
     * @return {?}
     */
    createSequential : function() {
      /** @type {string} */
      var hex = (new Date).valueOf().toString(16).replace("-", "");
      for (;hex.length < 12;hex = "0" + hex) {
      }
      /** @type {string} */
      hex = hex.substr(hex.length - 12, 12);
      for (;hex.length < 32;hex += Math.floor(4294967295 * floor()).toString(16)) {
      }
      return[hex.substr(0, 8), hex.substr(8, 4), "4" + hex.substr(12, 3), "89AB"[Math.floor(4 * Math.random())] + hex.substr(16, 3), hex.substr(20, 12)].join("-");
    },
    /**
     * @return {?}
     */
    create : function() {
      /** @type {string} */
      var headBuffer = "";
      for (;headBuffer.length < 32;headBuffer += Math.floor(4294967295 * floor()).toString(16)) {
      }
      return[headBuffer.substr(0, 8), headBuffer.substr(8, 4), "4" + headBuffer.substr(12, 3), "89AB"[Math.floor(4 * Math.random())] + headBuffer.substr(16, 3), headBuffer.substr(20, 12)].join("-");
    },
    /**
     * @return {?}
     */
    random : function() {
      return floor();
    },
    /**
     * @param {?} string
     * @return {?}
     */
    tryParse : function(string) {
      try {
        return data.parse(string);
      } catch (b) {
        return data.empty;
      }
    }
  };
  /** @type {function (): ?} */
  data["new"] = data.create;
  p.UUID = data;
}), define("framework/viewManager", ["exports"], function(eventHandle) {
  var elem;
  elem = {
    /**
     * @param {string} str
     * @param {Object} data
     * @param {string} name
     * @return {?}
     */
    renderTemplate : function(str, data, name) {
      return null == name && (name = str), $("#" + str).html(require("app/templates/" + name)["default"](data));
    },
    /**
     * @param {string} x
     * @param {string} direction
     * @return {?}
     */
    show : function(x, direction) {
      return new RSVP.Promise(function(dataAndEvents) {
        return function($sanitize) {
          return $("section").hide(), $("#" + x).css("zIndex", 3).show(), $sanitize();
        };
      }(this));
    }
  };
  eventHandle.viewManager = elem;
}), define("app/app", ["app/config", "framework/jquery", "app/viewManager", "framework/dialog/dialog", "framework/handlebars/module", "framework/string", "framework/router", "framework/store", "framework/browser", "framework/utils", "framework/translations"], function(self, dataAndEvents, deepDataAndEvents, w, Client, ignoreMethodDoesntExist, app, i18n, b, Backbone, gyp) {
  var $col;
  var children;
  var m1;
  var irm;
  if (!b.browser.supportsRequirements(self.config.browserRequirements)) {
    throw "Browser not supported";
  }
  Client.handlebars.configure(self.config);
  Client.handlebars.init();
  i18n.store.configure({
    apiUrl : self.config.apiUrl,
    requestTimeout : self.config.requestTimeout,
    stream : self.config.stream
  });
  gyp.translations.configure(self.config.language);
  Backbone.utils.configure(self.config);
  if (self.config.internalConsole) {
    /**
     * @return {?}
     */
    console.log = function() {
      var args;
      return args = [].splice.call(arguments, 0), $("#log").show().prepend("<div>" + args.join("::") + "</div>");
    };
  }
  $(document.body).on("touchstart", function() {
    return b.browser.isDefaultAndroid() ? Backbone.utils.hideAddressBar() : void 0;
  });
  Handlebars.registerPartial("contextBox", function(channel) {
    return require("app/templates/contextBox")["default"](channel);
  });
  Handlebars.registerPartial("pollBox", function(channel) {
    return require("app/templates/pollBox")["default"](channel);
  });
  Handlebars.registerPartial("iframe", function(channel) {
    return require("app/templates/iframe")["default"](channel);
  });
  Handlebars.registerPartial("pageElement", function(channel) {
    return require("app/templates/pageElement")["default"](channel);
  });
  Handlebars.registerPartial("articlePreview", function(channel) {
    return require("app/templates/articlePreview")["default"](channel);
  });
  Handlebars.registerPartial("articlePreviews/teaser", function(channel) {
    return require("app/templates/articlePreviews/teaser")["default"](channel);
  });
  Handlebars.registerPartial("articlePreviews/teaserWide", function(channel) {
    return require("app/templates/articlePreviews/teaserWide")["default"](channel);
  });
  Handlebars.registerPartial("articlePreviews/teaserWideExtended", function(channel) {
    return require("app/templates/articlePreviews/teaserWideExtended")["default"](channel);
  });
  Handlebars.registerPartial("articlePreviews/teaserCollection", function(channel) {
    return require("app/templates/articlePreviews/teaserCollection")["default"](channel);
  });
  Handlebars.registerPartial("articlePreviews/teaserQuote", function(channel) {
    return require("app/templates/articlePreviews/teaserQuote")["default"](channel);
  });
  Handlebars.registerPartial("articlePreviews/teaserHtml", function(channel) {
    return require("app/templates/articlePreviews/teaserHtml")["default"](channel);
  });
  Handlebars.registerPartial("menuItem", function(channel) {
    return require("app/templates/menuItem")["default"](channel);
  });
  if (Backbone.utils.isProduction() && window.location.search.indexOf("activateDeveloperMode") > -1 || !Backbone.utils.isProduction()) {
    /** @type {boolean} */
    self.config.isDebugMode = true;
  }
  if (window.location.search.indexOf("noNavigation") > -1) {
    /** @type {boolean} */
    self.config.noNavigation = true;
  }
  RSVP.on("error", function(e) {
    return null != ("undefined" != typeof console && null !== console ? console.error : void 0) ? null != e.stack ? console.error(e.stack) : console.error(e) : void 0;
  });
  if (self.config.isDebugMode) {
    if (!b.browser.isLocalhost()) {
      $(window).on("error", function(event) {
        return alert("Script Error in " + event.originalEvent.filename + ":" + event.originalEvent.lineno + ":" + event.originalEvent.colno + " " + event.originalEvent.message);
      });
    }
  }
  $(document.body).on("click", function(evt) {
    var $link;
    return $link = $(evt.target).closest("a[data-isLinkTo='true']"), $link.length ? (evt.preventDefault(), app.router.transitionTo($link.attr("href"))) : void 0;
  });
  if (self.config.noNavigation) {
    $("html").addClass("noNavigation");
  }
  if (self.config.isNativeApp) {
    $("html").addClass("noHeader");
  }
  $col = $("#" + self.config.shortName + "homescreen");
  if ($col.length) {
    $("head").append($col.html().replace(/\/\*|\*\/|\*|\n/g, "").trim());
  }
  children = $("meta[name=apple-mobile-web-app-title]");
  if (children.length) {
    children[0].content = self.config.customers[self.config.currentCustomer].shortName;
  }
  try {
    if (m1 = localStorage.getItem("Tweak.ads.off")) {
      if (Backbone.utils.checkIfOneHourPassed(m1)) {
        /** @type {boolean} */
        self.config.ads.enabled = false;
      }
    }
  } catch (p) {
  }
  try {
    if (irm = localStorage.getItem("Tweak.paywall.off")) {
      if (Backbone.utils.checkIfOneHourPassed(irm)) {
        /** @type {boolean} */
        self.config.paywall.enabled = false;
      }
    }
  } catch (p) {
  }
  if (!document.getElementsByTagName("body")[0]) {
    document.getElementsByTagName("html")[0].appendChild(document.createElement("body"));
  }
  FastClick.attach(document.body);
  app.router.configure(self.config);
  ["application", "front", "article", "slideshow", "category", "weather", "comment"].forEach(function(path) {
    return app.router.register(path, require("app/routes/" + path)["default"]);
  });
  $("body").append(require("app/templates/application")["default"]());
  w.dialog.init();
  app.router.init();
}), define("app/config", ["exports"], function(__exports__) {
  var config;
  config = require("framework/config").config;
  config.configure({
    env : "mobile",
    appId : "TamediaAG; Newsnet; Webapp; 1.153.0-0",
    browserRequirements : {
      MSIE : "10",
      Android : "4"
    },
    ads : {
      enabled : true,
      interstitialAutoHideTimeout : 7E3,
      supportedFormats : {
        "article-bottom-banner" : {
          classNames : ["adBannerArticleBottom"]
        },
        prestitial : {
          classNames : ["adBannerPrestitial"]
        },
        interstitial : {
          classNames : ["adBannerInterstitial"]
        },
        "top-banner" : {
          classNames : ["adBannerTop"]
        },
        rectangle : {
          classNames : ["adBannerRectangle"]
        }
      }
    }
  });
  __exports__.config = config;
}), define("app/routes/application", ["exports", "framework/browser", "framework/utils", "framework/store", "framework/statistics", "framework/ads/ads", "framework/paywallInterface", "framework/viewManager", "framework/translations", "app/config"], function(elem, b, gma, dataAndEvents, $scope, Editor, self, $z, a, cfg) {
  var k;
  var onSuccess;
  var value;
  self.paywallInterface.configure(cfg.config);
  /** @type {boolean} */
  k = true;
  /**
   * @param {Object} request
   * @return {?}
   */
  onSuccess = function(request) {
    var $document;
    return $document = $("#leftMenu"), $z.viewManager.renderTemplate("leftMenu", {
      site : this.store.get("sites", "default"),
      navigations : this.store.get("navigations").navigations,
      paywall : {
        user : this.store.get("paywalls", 1),
        urls : self.paywallInterface.getUrls()
      }
    }), $document.find("a.category").on("click", function(dataAndEvents) {
      return function(types) {
        var rvar;
        return rvar = types.delegateTarget.pathname, types.preventDefault(), $document.find("a.category").removeClass("active"), $document.find("a.category[href='" + rvar + "']").addClass("active"), dataAndEvents.router.transitionTo(rvar);
      };
    }(this)), $document.find("a.category").removeClass("active"), $document.find("a.category[href='" + request.to.pathname + "']").addClass("active"), $document.find("a[name='disableAds']").on("click", function(dataAndEvents) {
      try {
        localStorage.setItem("Tweak.ads.off", (new Date).getTime());
      } catch (b) {
      }
      return location.reload();
    }), $document.find("a[name='disablePaywall']").on("click", function(dataAndEvents) {
      try {
        localStorage.removeItem("Tweak.paywall.on");
        localStorage.setItem("Tweak.paywall.off", (new Date).getTime());
      } catch (b) {
      }
      return location.reload();
    }), $document.find("a[name='enablePaywall']").on("click", function(dataAndEvents) {
      try {
        localStorage.removeItem("Tweak.paywall.off");
        localStorage.setItem("Tweak.paywall.on", (new Date).getTime());
      } catch (b) {
      }
      return location.reload();
    });
  };
  setInterval(function() {
    return gma.utils.calculateAndInsertTime($("#viewport time[data-timestamp]"));
  }, 1E3);
  value = {
    /**
     * @return {?}
     */
    loadData : function() {
      var eventPath;
      return eventPath = [], eventPath.push(this.store.load("sites", {
        id : "default"
      }).then(function(security_context) {
        var m1;
        try {
          if ((m1 = localStorage.getItem("Tweak.paywall.on")) && gma.utils.checkIfOneHourPassed(m1)) {
            return security_context.payload.paywall_status = 2;
          }
        } catch (d) {
        }
      })), cfg.config.isDebugMode ? eventPath.push(this.store.load("navigations", {
        query : {
          client : "webapp",
          test : "true"
        }
      })) : eventPath.push(this.store.load("navigations", {
        query : {
          client : "webapp"
        }
      })), eventPath;
    },
    /**
     * @return {?}
     */
    beforeTransition : function() {
      return Editor.ads.resetSas();
    },
    /**
     * @return {?}
     */
    beforeRerender : function() {
      return k ? Editor.ads.configure({
        siteId : this.store.get("sites", "default").ads_site_id,
        isEnabled : cfg.config.ads.enabled && this.store.get("sites", "default").ads_enabled,
        formats : cfg.config.ads.supportedFormats,
        interstitialAutoHideTimeout : cfg.config.ads.interstitialAutoHideTimeout,
        caption : a.translations.translate("WERBUNG"),
        /**
         * @param {string} key
         * @param {string} header
         * @return {?}
         */
        afterRenderAd : function(key, header) {
          return["interstitial", "prestitial"].indexOf(header) >= 0 ? $("#" + key).addClass(header).find("header a.close").on("click", function(dataAndEvents) {
            return Editor.ads.destroy(key, header);
          }) : void 0;
        },
        /**
         * @param {string} vid
         * @param {string} klass
         * @return {?}
         */
        afterDestroyAd : function(vid, klass) {
          return["interstitial", "prestitial"].indexOf(klass) >= 0 ? $("#" + vid).removeClass(klass).find("header a.close").off("click") : void 0;
        }
      }) : void 0;
    },
    /**
     * @param {Object} options
     * @param {Object} data
     * @return {?}
     */
    afterRerender : function(options, data) {
      return $("#" + options.to.routeName + " .fullscreenLoader").hide(), $("#" + options.to.routeName + " header .left .back").on("click", function(self) {
        return function(types) {
          return types.preventDefault(), self.router.back();
        };
      }(this)), $("#" + options.to.routeName + " header .left .toggle").on("click", function(dataAndEvents) {
        return function(types) {
          return types.preventDefault(), $z.viewManager.toggleLeftMenu(options.to.routeName).then(function() {
            return $scope.statistics.trackPageView(options.to.pathname, data.statistics, "menu");
          });
        };
      }(this)), $("#" + options.to.routeName + " header .customerLogo").on("click", function(dataAndEvents) {
        return function(types) {
          return types.preventDefault(), dataAndEvents.router.transitionTo("/").then(function(script) {
            return b.browser.scrollTop($("#" + script.to.routeName + " article"));
          });
        };
      }(this)), $("#" + options.to.routeName + " article iframe").on("contentResize", function(deepDataAndEvents, ignoreMethodDoesntExist, optgroup, textAlt, dataAndEvents) {
        return optgroup !== dataAndEvents ? $(this).height(optgroup) : void 0;
      });
    },
    /**
     * @param {Object} options
     * @return {?}
     */
    afterStream : function(options) {
      return b.browser.addAndroidScrollFix($("#" + options.to.routeName + " article"));
    },
    /**
     * @param {Object} args
     * @param {Object} data
     * @return {?}
     */
    enter : function(args, data) {
      var dataText;
      return onSuccess.call(this, args), k && (b.browser.isDefaultAndroid() && gma.utils.hideAddressBar(), self.paywallInterface.init().then(function(that) {
        return function() {
          var survey;
          return onSuccess.call(that, args), $scope.statistics.init({
            gtm : {
              id : that.store.get("sites", "default").gtm_id
            },
            ga : {
              trackers : that.store.get("sites", "default").google_analytics_information.trackers
            }
          }, {
            google_analytics : {
              customVars : [{
                name : "device_characteristics",
                value : "smartphone"
              }, {
                name : "app_mode",
                value : "browser"
              }, {
                name : "version",
                value : cfg.config.version
              }, {
                name : "ad_blocker",
                value : null == window.adblockJsFile
              }]
            },
            gtm : {
              /**
               * @return {?}
               */
              paywall_user_id : function() {
                var p;
                return p = that.store.get("paywalls", 1), p ? p.userId : void 0;
              }
            }
          }), null != (null != (survey = cfg.config.wemf) ? survey.survey : void 0) ? (window.szmvars = cfg.config.wemf.survey.szmvars, window.szmopt = {
            mobile : true
          }, $.loadExternalScript(cfg.config.wemf.survey.url)) : void 0;
        };
      }(this))), null != (null != data && null != (dataText = data.external_services) ? dataText.paywall : void 0) && self.paywallInterface.track(data.external_services.paywall), "comment" !== args.to.routeName && (null != (null != data ? data.statistics : void 0) && $scope.statistics.trackPageView(args.to.pathname, data.statistics, "slideshow" === args.to.routeName ? {
        type : "slideshow",
        index : 0
      } : void 0)), null != (null != data ? data.ads : void 0) && Editor.ads.show(data.ads, args.to.routeName), k = false;
    },
    /**
     * @param {Object} options
     * @return {?}
     */
    exit : function(options) {
      return Editor.ads.destroy(options.to.routeName);
    }
  };
  elem["default"] = value;
}), define("app/routes/article", ["exports", "app/config", "framework/browser", "framework/utils", "framework/statistics", "framework/viewManager", "framework/translations", "framework/poll/module", "framework/socialMedia/module", "framework/slideshow/slideshow", "framework/scoreboard/scoreboard", "framework/liveticker/liveticker", "framework/listicles/module"], function(elem, $scope, b, gma, opt_user, $z, a, self, $window, nv, DreamE, lang, Client) {
  var _forEach;
  var destroy;
  var getTemplate;
  var appendHTML;
  var r;
  var feed;
  var one;
  var find;
  var init;
  var value;
  var vec;
  var run;
  var bucket;
  var resolver;
  self.poll.configure($scope.config.apiUrl);
  Client.listicles.configure($scope.config.apiUrl);
  /** @type {Array} */
  bucket = [];
  /** @type {null} */
  vec = null;
  /** @type {null} */
  feed = null;
  /** @type {boolean} */
  r = false;
  resolver = RSVP.defer();
  /**
   * @return {?}
   */
  getTemplate = function() {
    switch($scope.config.currentCustomer) {
      case "12app":
        return "articles/" + $scope.config.currentCustomer + "Article";
      default:
        return "articles/article";
    }
  };
  /**
   * @param {?} recurring
   * @param {Object} results
   * @param {?} spec
   * @return {?}
   */
  find = function(recurring, results, spec) {
    return this.store.load("polls", {
      id : spec.poll_id
    }).then(function(dataAndEvents) {
      return function(expectedNumberOfNonCommentArgs) {
        return self.poll.init(expectedNumberOfNonCommentArgs, expectedNumberOfNonCommentArgs.payload.id, results.statistics, recurring);
      };
    }(this));
  };
  /**
   * @param {string} element
   * @return {?}
   */
  init = function(element) {
    return RSVP.all([$.loadExternalScript("http://platform.twitter.com/widgets.js"), $.loadExternalScript("http://platform.instagram.com/" + $scope.config.locale + "/embeds.js"), $.loadExternalScript("http://connect.facebook.net/" + $scope.config.locale + "/sdk.js#xfbml=1&version=v2.3&appId=" + $scope.config.facebook.init.appId)]).then(function() {
      return resolver.resolve();
    }), (init = function(source) {
      return resolver.promise.then(function() {
        return null == source && (source = $("#article article").get(0)), null != source ? (twttr.widgets.load(source), instgrm.Embeds.process(), FB.XFBML.parse(source)) : void 0;
      });
    })();
  };
  /**
   * @param {Object} item
   * @return {?}
   */
  run = function(item) {
    return r ? void 0 : (r = true, $(".NnDialog .loader").show(), this.store.load("articles", {
      id : item.id,
      subkey : "communities"
    }).then(function(dataAndEvents) {
      return function(security_context) {
        var element;
        var expectedNumberOfNonCommentArgs;
        return element = $("#dialog"), element.find("h1").text(a.translations.translate("Artikel teilen") + ":"), element.find("h2").text(item.title), expectedNumberOfNonCommentArgs = {
          shortName : $scope.config.shortName,
          article : item,
          articleCommunities : security_context.payload.communities,
          hideComments : true,
          useCaptions : true
        }, $window.socialMedia.init(expectedNumberOfNonCommentArgs, element.find(">div>div")), element.show(), r = false;
      };
    }(this), function() {
      return $(".NnDialog .loader").hide(), r = false;
    }));
  };
  /**
   * @return {?}
   */
  appendHTML = function() {
    return r ? void 0 : $("#dialog").hide();
  };
  /**
   * @param {Array} arr
   * @param {Object} script
   * @return {?}
   */
  _forEach = function(arr, script) {
    var id;
    var arrCount;
    var rulesets;
    var paths;
    /** @type {Array} */
    rulesets = [];
    /** @type {number} */
    id = 0;
    arrCount = arr.length;
    for (;arrCount > id;id++) {
      paths = arr[id];
      rulesets.push(function(server) {
        return function(elem) {
          var value;
          var data;
          var camelKey;
          return camelKey = elem.getAttribute("data-id"), data = server.store.get("slideshows", camelKey), value = new nv.Slideshow(elem, data.pictures, {
            pagination : true,
            /**
             * @param {Object} photo
             * @param {?} extent
             * @return {?}
             */
            getImageUrl : function(photo, extent) {
              return photo.url;
            },
            /**
             * @param {Object} options
             * @param {number} el
             * @param {?} callback
             * @return {?}
             */
            getImageCaption : function(options, el, callback) {
              return $(callback({
                slideshowTitle : data.title,
                title : options.title,
                caption : options.caption,
                annotation : function() {
                  var image;
                  var herecomment;
                  return "picture" === options.annotation_type && (options.photographer || options.provider) ? a.translations.translate("Bild") + ": " + (null != (image = options.photographer) ? image : "") + (options.photographer && options.provider ? "/" : "") + (null != (herecomment = options.provider) ? herecomment : "") : void 0;
                }(),
                isFirstPicture : 0 === el,
                imageCount : this.getImageCount(),
                linkUrl : options.link_url,
                linkText : options.link_title
              })).applyTargetToLinks("_blank");
            },
            /**
             * @return {?}
             */
            getRenderMode : function() {
              return "mobile";
            }
          }), $(value).on("beforeTransition", function(m, deepDataAndEvents, ignoreMethodDoesntExist, dataAndEvents) {
            return "fullscreen" === dataAndEvents ? (m.cancelTransition = true, server.router.transitionTo("/slideshows/" + camelKey)) : void 0;
          }).on("afterSlide", function(dataAndEvents, deepDataAndEvents, idx, ignoreMethodDoesntExist) {
            return opt_user.statistics.trackPageView(script.to.pathname, data.statistics, {
              type : "slideshow",
              index : idx
            });
          }), value.show(), bucket.push(value);
        };
      }(this)(paths));
    }
    return rulesets;
  };
  /**
   * @param {Object} full
   * @return {?}
   */
  destroy = function(full) {
    var token;
    var i;
    var _j;
    var _len;
    var _ref;
    var _results;
    _ref = full.find(".NnSlideshow");
    /** @type {Array} */
    _results = [];
    /** @type {number} */
    _j = 0;
    _len = _ref.length;
    for (;_len > _j;_j++) {
      token = _ref[_j];
      _results.push(function() {
        var _i;
        var _ref;
        var _results2;
        /** @type {Array} */
        _results2 = [];
        /** @type {number} */
        i = _i = _ref = bucket.length - 1;
        for (;_i >= 0;i = _i += -1) {
          if (bucket[i].getDomNode() === token) {
            bucket[i].destroy();
            _results2.push(bucket.splice(i, 1));
          } else {
            _results2.push(void 0);
          }
        }
        return _results2;
      }());
    }
    return _results;
  };
  one = function(opt_attributes) {
    return function(dataAndEvents) {
      return!feed.isLimitReached() && $("#article article .livetickerContainer .footer .loader").isInViewport() ? feed.increaseLimit() : void 0;
    };
  }(void 0);
  value = {
    urlPattern : "/articles/[id]",
    animationDirection : "rightToLeft",
    /**
     * @return {?}
     */
    enter : function() {
      return null != feed && $("#article article").on("scroll", one), null != feed ? feed.resume() : void 0;
    },
    /**
     * @return {?}
     */
    exit : function() {
      var item;
      var i;
      var ilen;
      var items;
      if (null != feed) {
        feed.pause();
      }
      items = $("#article article video");
      /** @type {number} */
      i = 0;
      ilen = items.length;
      for (;ilen > i;i++) {
        item = items[i];
        item.pause();
      }
      return appendHTML();
    },
    /**
     * @param {Object} options
     * @return {?}
     */
    loadData : function(options) {
      return new RSVP.Promise(function(_this) {
        return function(cb) {
          return _this.store.load("articles", {
            id : options.to.id
          }).then(function(evt) {
            var pluginMap;
            return evt.payload.layout_type_external_url && null == evt.payload.label_type ? window.location.replace(evt.payload.layout_type_external_url) : "category" === evt.payload.layout_type && null != (null != (pluginMap = evt.payload.category_preview) ? pluginMap.id : void 0) ? window.location.replace("/categories/" + evt.payload.category_preview.id) : cb(evt);
          });
        };
      }(this));
    },
    /**
     * @param {(Object|string)} b
     * @return {?}
     */
    beforeTransition : function(b) {
      return "slideshow" === b.from.routeName || "comment" === b.from.routeName ? this.animationDirection = "leftToRight" : this.animationDirection = "rightToLeft";
    },
    /**
     * @return {?}
     */
    beforeRender : function() {
      return null != feed && (feed.destroy(), feed = null), destroy($("#article article .slideshow"));
    },
    /**
     * @param {Object} options
     * @return {?}
     */
    renderTemplate : function(options) {
      return $z.viewManager.renderTemplate(options.to.routeName, {
        config : $scope.config
      }, getTemplate());
    },
    /**
     * @param {Object} options
     * @param {Object} data
     * @return {?}
     */
    rerenderTemplate : function(options, data) {
      var $e;
      return $e = $("<div>" + data.text.trim() + "</div>"), $e.find(">*").first().after('<div id="adbanner-article-rectangle"></div>'), data.textParts = gma.utils.extractInlineElements($e.html(), data.inline_elements), $z.viewManager.renderTemplate(options.to.routeName, data, getTemplate());
    },
    /**
     * @param {Object} scope
     * @param {Object} data
     * @return {?}
     */
    afterRerender : function(scope, data) {
      var t;
      var deferred;
      var responses;
      return responses = [], init(), $("#article header .right .iconShare").on("click", function(scope) {
        return function() {
          return run.call(scope, data);
        };
      }(this)), _forEach.call(this, $("#article article .slideshow .slideshowContainer"), scope), null != data.scoreboard_id && (vec = new DreamE.Scoreboard("#article article .scoreboardContainer", {
        id : data.scoreboard_id,
        baseUrl : $scope.config.apiUrl,
        otherGamesCaption : a.translations.translate("Die anderen Spiele"),
        /**
         * @return {?}
         */
        getRenderMode : function() {
          return "mobile";
        }
      })), null != data.liveticker_id && (null != data.scribble_element && (t = $("#article article .livetickerTabs li").on("click", function(dataAndEvents) {
        var element;
        return t.removeClass("active"), $(this).addClass("active"), t.first().hasClass("active") ? ($("#article article .livetickerContainer").show(), $("#article article .scribbleContainer").hide()) : ($("#article article .livetickerContainer").hide(), $("#article article .scribbleContainer").show(), element = $("#article article .scribbleContainer iframe"), element.attr("src") !== element.attr("data-url") ? element.attr("src", element.attr("data-url")) : void 0);
      })), responses.push((deferred = RSVP.defer()).promise), feed = new lang.Liveticker("#article article .livetickerContainer", {
        id : data.liveticker_id,
        http : {
          baseUrl : $scope.config.apiUrl
        },
        lang : $scope.config.language,
        loadingCaption : a.translations.translate("Liveticker wird geladen..."),
        activeCaption : a.translations.translate("Liveticker aktualisiert automatisch"),
        lastUpdatedAtText : a.translations.translate("letzte Meldung %s"),
        initialLimit : 10,
        limitIncreaseValue : 10,
        limitStyle : "scroller",
        afterFetchMessageUpdates : function(dataAndEvents) {
          return function(dataAndEvents, deepDataAndEvents) {
            return null != data.scoreboard_id && deepDataAndEvents ? vec.update() : void 0;
          };
        }(this),
        renderInlineElement : function(_this) {
          return function(dataAndEvents, act, deepDataAndEvents) {
            return _this.store.save({
              articleElement : act
            }), function() {
              var rule;
              return rule = $("#inlineElement_" + act.id).html(require("app/templates/contextBox")["default"]($.extend({}, act, {
                renderContext : "inlineElement"
              }))), "slideshow" === act.boxtype ? _forEach.call(_this, rule.find(".slideshow .slideshowContainer"), scope) : void 0;
            };
          };
        }(this),
        beforeDestroyInlineElement : function(dataAndEvents) {
          return function(dataAndEvents, ignores, deepDataAndEvents) {
            return "slideshow" === ignores.boxtype ? destroy($("#inlineElement_" + ignores.id + " .slideshow")) : void 0;
          };
        }(this),
        afterRenderMessage : function(elems) {
          return function(filePair, element, dataAndEvents) {
            return init(element), $(element).find("iframe").on("contentResize", function(deepDataAndEvents, ignoreMethodDoesntExist, optgroup, textAlt, dataAndEvents) {
              return optgroup !== dataAndEvents ? $(this).height(optgroup) : void 0;
            }), $(element).find(".picture").on("click", function() {
              return $(this).toggleClass("zoom");
            }), filePair.inline_elements.forEach(function(capture) {
              switch(capture.boxtype) {
                case "poll":
                  return find.call(elems, scope.to.pathname, data, capture);
              }
            });
          };
        }(this),
        beforeDestroyMessage : function(dataAndEvents) {
          return function(dataAndEvents, sourceContainer) {
            return $(sourceContainer).find("iframe").off("contentResize"), $(sourceContainer).find(".picture").off("click");
          };
        }(this),
        afterRender : function(dataAndEvents) {
          return function() {
            return b.browser.addAndroidScrollFix($("#article article")), deferred ? (deferred.resolve(), deferred = null) : void 0;
          };
        }(this)
      })), responses.push(new RSVP.Promise(function(_this) {
        return function($sanitize) {
          var root;
          var space;
          var args;
          var item;
          var tests;
          if (tests = [], null != data.auto_stock_exchange_element) {
            item = data.auto_stock_exchange_element.organizations;
            /** @type {number} */
            root = 0;
            space = item.length;
            for (;space > root;root++) {
              args = item[root];
              tests.push(_this.store.load("stock_exchange_trends", {
                id : args.isin
              }).then(function(security_context) {
                return $("#stockExchangeTrends").append(require("app/templates/stockExchangeTrend")["default"](security_context.payload));
              }));
            }
          }
          return RSVP.all(tests).then(function() {
            return $sanitize();
          });
        };
      }(this))), $(".socialMedia.box .loader").show(), responses.push(new RSVP.Promise(function(_this) {
        return function($sanitize) {
          return _this.store.load(scope.to.routeName.pluralize(), {
            id : scope.to.id,
            subkey : "communities"
          }).then(function(security_context) {
            var obj;
            var expectedNumberOfNonCommentArgs;
            return obj = security_context.payload.communities.filter(function(statement) {
              return "comment" === statement.type ? true : void 0;
            })[0], obj.id = scope.to.id, expectedNumberOfNonCommentArgs = {
              useCaptions : false,
              article : data,
              articleCommunities : security_context.payload.communities
            }, $window.socialMedia.init(expectedNumberOfNonCommentArgs, $("#viewport .socialMedia.box")), $("#article article #authors #commentsLink").html(require("framework/socialMedia/commentsLink")["default"](obj)), $sanitize();
          }, function() {
            return $(".socialMedia.box .loader").hide();
          });
        };
      }(this))), responses.push(new RSVP.Promise(function(file) {
        return function($sanitize) {
          var list;
          var val;
          var key;
          var browser;
          var _len;
          var resultsLn;
          var promises;
          var _ref;
          var results;
          if (promises = [], null != data.inline_elements) {
            _ref = data.inline_elements;
            /** @type {number} */
            key = 0;
            _len = _ref.length;
            for (;_len > key;key++) {
              val = _ref[key];
              if ("poll" === val.boxtype) {
                promises.push(find.call(file, scope.to.pathname, data, val));
              }
            }
          }
          if (null != data.article_elements) {
            results = data.article_elements;
            /** @type {number} */
            browser = 0;
            resultsLn = results.length;
            for (;resultsLn > browser;browser++) {
              list = results[browser];
              if ("poll" === list.boxtype) {
                promises.push(find.call(file, scope.to.pathname, data, list));
              }
            }
          }
          return RSVP.all(promises).then(function() {
            return $sanitize();
          });
        };
      }(this))), responses.push(new RSVP.Promise(function(dataAndEvents) {
        return function($sanitize) {
          var item;
          var i;
          var ilen;
          var tests;
          var items;
          if (tests = [], null != data.inline_elements) {
            items = data.inline_elements;
            /** @type {number} */
            i = 0;
            ilen = items.length;
            for (;ilen > i;i++) {
              item = items[i];
              if ("element" === item.boxtype) {
                tests.push(Client.listicles.init(".listicle.mobile", item.element.id));
              }
            }
          }
          return RSVP.all(tests).then(function() {
            return $sanitize();
          });
        };
      }(this))), responses;
    }
  };
  elem["default"] = value;
}), define("app/routes/category", ["exports", "framework/LocalStorageQueue"], function(elem, dataAndEvents) {
  var callback;
  var parent;
  var value;
  /**
   * @param {string} dest
   * @return {?}
   */
  callback = function(dest) {
    return $("a[href*='" + dest + "']").addClass("read"), parent.add(dest);
  };
  parent = new dataAndEvents.LocalStorageQueue("Mobile.articlesRead");
  value = {
    urlPattern : "/categories/[id]",
    animationDirection : "rightToLeft",
    /**
     * @param {Object} options
     * @return {?}
     */
    exit : function(options) {
      return "article" === options.to.routeName ? callback(options.to.id) : void 0;
    },
    /**
     * @param {Object} other
     * @return {?}
     */
    beforeTransition : function(other) {
      return "95319418" === other.to.id && location.replace("http://thepredictionmarket.com/?openinbrowser"), "article" === other.from.routeName || "slideshow" === other.from.routeName ? this.animationDirection = "leftToRight" : this.animationDirection = "rightToLeft";
    },
    /**
     * @param {?} optionsString
     * @param {?} _xhr
     * @return {?}
     */
    afterRerender : function(optionsString, _xhr) {
      var $e;
      var p;
      var i;
      var max;
      var world;
      var worlds;
      var eventPath;
      $e = $("#category article");
      $e.find("a[href*='/articles']").on("click", function(dataAndEvents) {
        return function(types) {
          return types.preventDefault(), dataAndEvents.router.transitionTo(types.delegateTarget.pathname);
        };
      }(this));
      $e.find("select").on("change", function(dataAndEvents) {
        return function(event) {
          return dataAndEvents.router.transitionTo("/categories/" + event.delegateTarget.value);
        };
      }(this));
      worlds = _xhr.page_elements;
      /** @type {Array} */
      eventPath = [];
      /** @type {number} */
      i = 0;
      max = worlds.length;
      for (;max > i;i++) {
        world = worlds[i];
        if ("articles" === world.boxtype) {
          eventPath.push(function() {
            var i;
            var len;
            var rawParams;
            var eventPath;
            rawParams = world.articles;
            /** @type {Array} */
            eventPath = [];
            /** @type {number} */
            i = 0;
            len = rawParams.length;
            for (;len > i;i++) {
              p = rawParams[i];
              if (parent.contains(p.id)) {
                eventPath.push($("#category a[href*='" + p.id + "']").addClass("read"));
              } else {
                eventPath.push(void 0);
              }
            }
            return eventPath;
          }());
        } else {
          eventPath.push(void 0);
        }
      }
      return eventPath;
    }
  };
  elem["default"] = value;
}), define("app/routes/comment", ["exports", "framework/viewManager", "framework/statistics", "framework/comments/comments", "app/config"], function(elem, dataAndEvents, opt_user, self, App) {
  var value;
  self.comments.configure(App.config);
  self.comments.configure({
    globalDialogSelector : "#dialog",
    globalFullscreenLoaderSelector : "#comment .fullscreenLoader",
    env : "mobile"
  });
  value = {
    urlPattern : "/articles/[id]/comments",
    animationDirection : "rightToLeft",
    /**
     * @param {Object} options
     * @return {?}
     */
    getTitle : function(options) {
      var msg;
      var suite;
      var html;
      return html = "", (msg = null != (suite = this.store.get("articles", options.to.parentId)) ? suite.title : void 0) && (html += msg + " - "), html += this.store.get("sites", "default").title;
    },
    /**
     * @param {Object} options
     * @return {?}
     */
    loadData : function(options) {
      return this.store.load("articles", {
        id : options.to.parentId
      });
    },
    /**
     * @return {?}
     */
    beforeRender : function() {
      return self.comments.remove(document.getElementById("comments"));
    },
    /**
     * @param {Object} res
     * @param {Object} data
     * @return {?}
     */
    afterRerender : function(res, data) {
      var loading;
      return loading = $("#comment .fullscreenLoader"), App.config.isNativeApp || loading.show(), new RSVP.Promise(function(dataAndEvents) {
        return function(done) {
          return self.comments.insert(document.getElementById("comments"), res.to.parentId, {
            wemfUrls : data.statistics.filter(function($provide) {
              return "wemf" === $provide.provider;
            }).map(function($location) {
              return $location.url;
            }),
            /**
             * @return {?}
             */
            callback : function() {
              return loading.hide(), done();
            }
          });
        };
      }(this));
    },
    /**
     * @param {Object} args
     * @param {Object} data
     * @return {?}
     */
    enter : function(args, data) {
      return opt_user.statistics.trackPageView(args.to.pathname, data.statistics, "article/comments");
    }
  };
  elem["default"] = value;
}), define("app/routes/front", ["exports", "framework/browser", "framework/statistics", "framework/ads/ads", "framework/LocalStorageQueue", "framework/slideshow/slideshow", "app/config"], function(elem, b, opt_user, $scope, dataAndEvents, ymaps, module) {
  var doc;
  var show;
  var j;
  var set;
  var value;
  /** @type {boolean} */
  j = false;
  /**
   * @param {?} obj
   * @param {Object} options
   * @param {number} positions
   * @param {string} ev
   * @return {?}
   */
  show = function(obj, options, positions, ev) {
    var parent;
    var elem;
    var i;
    var dir;
    var ilen;
    var _len;
    var node;
    var items;
    var _ref;
    var res;
    var item;
    var name;
    var config;
    if (node = require("app/templates/pageElement")["default"](obj), parent = $("#front article #" + ev).find("div").first(), "meteonews" === obj.boxtype && (parent.append('<div id="adbanner-front-rectangle"></div>'), this.store.load("fronts", {
      id : "mobile"
    }).then(function(dataAndEvents) {
      return function(security_context) {
        return $scope.ads.show(security_context.payload.ads, "front", "rectangle");
      };
    }(this))), 0 === positions && "breaking-news" === obj.layout_type ? $("#front article #frontFeedSwitcher").before(node) : parent.append(node), "iframe" === obj.boxtype && parent.find(".pageElement").last().find("iframe").on("contentResize", function(deepDataAndEvents, ignoreMethodDoesntExist, optgroup, textAlt, dataAndEvents) {
      return optgroup !== dataAndEvents ? $(this).height(optgroup) : void 0;
    }), "slideshowoverview" === obj.boxtype) {
      name = $("#front article .slideshow")[0];
      config = {
        id : this.id,
        pictures : []
      };
      items = obj.slideshow_overviews.slideshows;
      /** @type {number} */
      i = 0;
      ilen = items.length;
      for (;ilen > i;i++) {
        item = items[i];
        config.pictures.push({
          id : item.id,
          url : item.picture_medium_url,
          title : item.title,
          statistics : item.statistics
        });
      }
      item = new ymaps.Slideshow(name, config.pictures, {
        footerTemplate : require("framework/slideshow/templates/twistedFooter")["default"],
        pagination : true,
        /**
         * @param {Object} photo
         * @param {?} extent
         * @return {?}
         */
        getImageUrl : function(photo, extent) {
          return photo.url;
        },
        /**
         * @param {Element} obj
         * @param {?} dataAndEvents
         * @param {?} el
         * @return {?}
         */
        getImageCaption : function(obj, dataAndEvents, el) {
          return el({
            slideshowTitle : obj.title
          });
        },
        /**
         * @return {?}
         */
        getRenderMode : function() {
          return "mobile";
        }
      });
      $(item).on("beforeTransition", function(dataAndEvents) {
        return function(m, ignores, ignoreMethodDoesntExist, deepDataAndEvents) {
          return "fullscreen" === deepDataAndEvents ? (m.cancelTransition = true, dataAndEvents.router.transitionTo("/slideshows/" + ignores.id)) : void 0;
        };
      }(this)).on("afterSlide", function(dataAndEvents) {
        return function(dataAndEvents, results, idx, deepDataAndEvents) {
          return opt_user.statistics.trackPageView(options.to.pathname, results.statistics, {
            type : "slideshow",
            index : idx
          });
        };
      }(this));
      item.show();
    }
    if (null != obj.meteonews && $("#front header .right").append(require("app/templates/weatherObservation")["default"](obj.meteonews.observation)), null != obj.articles) {
      _ref = obj.articles;
      /** @type {Array} */
      res = [];
      /** @type {number} */
      dir = 0;
      _len = _ref.length;
      for (;_len > dir;dir++) {
        elem = _ref[dir];
        if (doc.contains(elem.id)) {
          res.push($("a[href*='" + elem.id + "']").addClass("read"));
        } else {
          res.push(void 0);
        }
      }
      return res;
    }
  };
  /**
   * @param {string} dest
   * @return {?}
   */
  set = function(dest) {
    return $("a[href*='" + dest + "']").addClass("read"), doc.add(dest);
  };
  doc = new dataAndEvents.LocalStorageQueue("Mobile.articlesRead");
  value = {
    urlPattern : "/",
    animationDirection : "leftToRight",
    /**
     * @return {?}
     */
    getTitle : function() {
      return this.store.get("sites", "default").title;
    },
    /**
     * @param {Object} options
     * @return {?}
     */
    exit : function(options) {
      return "article" === options.to.routeName ? set(options.to.id) : void 0;
    },
    /**
     * @param {?} optionsString
     * @return {?}
     */
    loadData : function(optionsString) {
      return b.browser.isIE10() || "local" === window.api ? this.store.load("fronts", {
        id : "mobile"
      }) : this.store.load("fronts", {
        id : "mobile",
        node : "page_elements.*"
      });
    },
    /**
     * @param {?} options
     * @param {Object} elemData
     * @return {?}
     */
    rerenderTemplate : function(options, elemData) {
      var j;
      var _i;
      var _len;
      var ev;
      var events;
      var _results;
      events = elemData.page_elements;
      /** @type {Array} */
      _results = [];
      /** @type {number} */
      j = _i = 0;
      _len = events.length;
      for (;_len > _i;j = ++_i) {
        ev = events[j];
        _results.push(show.call(this, ev, options, j, "default"));
      }
      return _results;
    },
    /**
     * @param {?} ev
     * @param {?} capture
     * @param {?} fn
     * @return {?}
     */
    streamNode : function(ev, capture, fn) {
      var match;
      return match = $("#front article"), show.call(this, ev, fn, capture, "default"), match.find("#default .loader").show(), b.browser.addAndroidScrollFix(match);
    },
    /**
     * @param {Object} options
     * @param {Object} data
     * @return {?}
     */
    afterRerender : function(options, data) {
      var optgroup;
      var timefloat;
      var self;
      var li;
      var loading;
      var tooltip;
      var $document;
      var n;
      var onSuccess;
      var promise;
      return $document = $("#viewport"), optgroup = $("#front article"), loading = $document.find("#goToNewest"), timefloat = optgroup.find("#default"), tooltip = optgroup.find("#newest"), self = optgroup.find(".forceDesktop"), li = optgroup.find("#frontFeedSwitcher a"), n = false, promise = new RSVP.Promise(function(self) {
        return function(cb) {
          var load;
          return(load = function(end, atts) {
            return null == atts && (atts = 0), tooltip.find(".loader").show(), self.store.load("lists", {
              id : "newest",
              query : {
                to : end
              }
            }).then(function(msg) {
              var i;
              var _i;
              var _len;
              var x;
              var xs;
              var handler;
              cb(msg);
              xs = msg.payload.page_elements;
              /** @type {number} */
              i = _i = 0;
              _len = xs.length;
              for (;_len > _i;i = ++_i) {
                x = xs[i];
                show.call(self, x, options, i, "newest");
              }
              return tooltip.find(".loader").hide(), optgroup.on("scroll", handler = function(event) {
                var $window;
                return n || (n = true, loading.NnFadeIn()), $window = $(event.delegateTarget), self.isInViewport() ? loading.hide() : loading.show(), li.last().hasClass("active") && ($window.scrollTop() + $document.outerHeight() > tooltip.outerHeight() - $document.outerHeight() / 4 * 3 && (optgroup.off("scroll", handler), msg.payload.to)) ? load(msg.payload.to, atts) : void 0;
              }), b.browser.addAndroidScrollFix(optgroup), 0 !== atts && opt_user.statistics.trackGoogleAnalyticsEvent("front", "scroll", "newest." + atts), atts++;
            }, function() {
              return tooltip.find(".loader").hide();
            });
          })(9999999999);
        };
      }(this)), li.first().on("click", function() {
        var next;
        return next = li.first(), next.hasClass("active") ? void 0 : (li.removeClass("active"), next.addClass("active"), timefloat.show(), tooltip.hide(), opt_user.statistics.trackPageView(options.to.pathname, data.statistics));
      }), onSuccess = function() {
        var next;
        return next = li.last(), next.hasClass("active") ? void 0 : (li.removeClass("active"), next.addClass("active"), timefloat.hide(), tooltip.show(), loading.remove(), promise.then(function(security_context) {
          return opt_user.statistics.trackPageView(options.to.pathname, security_context.payload.statistics);
        }));
      }, li.last().on("click", onSuccess), $("#front #goToNewest").on("click", function() {
        return onSuccess(), b.browser.scrollTop(optgroup);
      }), $("#front .forceDesktop").on("click", function(dataAndEvents) {
        return window.location.replace("http://" + module.config.currentCustomer + ".ch?force_desktop=true");
      });
    },
    /**
     * @return {?}
     */
    afterStream : function() {
      var match;
      return match = $("#front article"), match.find("#default .loader").hide(), b.browser.addAndroidScrollFix(match);
    },
    /**
     * @param {(Object|string)} v
     * @return {?}
     */
    enter : function(v) {
      return "article" === v.from.routeName ? set(v.from.id) : void 0;
    }
  };
  elem["default"] = value;
}), define("app/routes/slideshow", ["exports", "framework/statistics", "framework/translations", "framework/slideshow/slideshow"], function(elem, opt_user, self, dataAndEvents) {
  var value;
  var button;
  /** @type {null} */
  button = null;
  value = {
    urlPattern : "/slideshows/[id]",
    animationDirection : "rightToLeft",
    /**
     * @return {?}
     */
    beforeRender : function() {
      return button ? (button.destroy(), button = null) : void 0;
    },
    /**
     * @param {Object} options
     * @param {Object} data
     * @return {?}
     */
    afterRerender : function(options, data) {
      var doneResults;
      var buttonConf;
      return buttonConf = $("#slideshow article .slideshow")[0], doneResults = data, button = new dataAndEvents.Slideshow(buttonConf, doneResults.pictures, {
        /**
         * @return {?}
         */
        getTitle : function() {
          return doneResults.title;
        },
        /**
         * @return {?}
         */
        getSubtitle : function() {
          return doneResults.lead;
        },
        /**
         * @param {Object} photo
         * @param {?} extent
         * @return {?}
         */
        getImageUrl : function(photo, extent) {
          return photo.url;
        },
        /**
         * @param {Object} options
         * @param {number} el
         * @param {?} template
         * @return {?}
         */
        getImageCaption : function(options, el, template) {
          return $(template({
            title : options.title,
            caption : options.caption,
            annotation : function() {
              var image;
              var herecomment;
              return "picture" === options.annotation_type && (options.photographer || options.provider) ? self.translations.translate("Bild") + ": " + (null != (image = options.photographer) ? image : "") + (options.photographer && options.provider ? "/" : "") + (null != (herecomment = options.provider) ? herecomment : "") : void 0;
            }(),
            isFirstPicture : 0 === el,
            imageCount : this.getImageCount(),
            linkUrl : options.link_url,
            linkText : options.link_title
          })).applyTargetToLinks("_blank");
        },
        /**
         * @return {?}
         */
        getRenderMode : function() {
          return "mobile";
        }
      }), $(button).on("beforeTransition", function(self) {
        return function(m, deepDataAndEvents, ignoreMethodDoesntExist, dataAndEvents) {
          return "inline" === dataAndEvents ? (m.cancelTransition = true, self.router.back()) : void 0;
        };
      }(this)).on("afterSlide", function(dataAndEvents) {
        return function(dataAndEvents, deepDataAndEvents, idx, ignoreMethodDoesntExist) {
          return opt_user.statistics.trackPageView(options.to.pathname, data.statistics, {
            type : "slideshow",
            index : idx
          });
        };
      }(this)), button.show({
        fullscreen : true
      });
    }
  };
  elem["default"] = value;
}), define("app/routes/weather", ["exports"], function(elem) {
  var value;
  value = {
    urlPattern : "/weather",
    animationDirection : "rightToLeft",
    /**
     * @return {?}
     */
    loadData : function() {
      return this.store.load("weathers", {
        id : "default"
      });
    }
  };
  elem["default"] = value;
}), define("app/templates/application", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('{{!\n    TODO: Use the more semantic HTML5 <main> tag instead of div#viewport,\n    after it is supported on WP8 (reverting the scrollstate doesn\'t work)\n}}\n<div id="viewport" class="{{getCustomerShortName}}"> \n    <section id="front"></section>\n    <section id="category"></section>\n    <section id="article"></section>\n    <section id="slideshow" class="noHeader"></section>\n    <section id="weather"></section>\n    <section id="comment"></section>\n\n    <aside id="leftMenu"></aside>\n\n    {{> dialog id="dialog"}}\n\n    <div id="blocker"></div>\n    <div id="log"></div>\n</div>');
}), define("app/templates/articlePreview", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('{{#isEmptyArticle}}\n    <li class="articlePreview\n        {{#if featured}}featured{{/if}}\n        {{#isTeaser}}\n            {{!--\n            Normal teasers within collections also get the teaserWideExtended layout\n            This is a bit ugly, but the NN1 placing tool requires it like that\n            --}}\n            {{#isLayoutTypeCollection}}\n                teaserWideExtended\n            {{else}}\n                teaser\n            {{/isLayoutTypeCollection}}\n        {{else}}\n            {{#isTeaserWide}}teaserWide{{/isTeaserWide}}\n            {{#isTeaserWideExtended}}teaserWideExtended{{/isTeaserWideExtended}}\n            {{#isTeaserCollection}}teaserCollection{{/isTeaserCollection}}\n            {{#isTeaserQuote}}teaserQuote{{/isTeaserQuote}}\n        {{/isTeaser}}\n    ">\n\n        {{!-- TODO: Can\'t use the linkTo helper here because the dynamic href, make better solution --}}\n        <a\n            data-isLinkTo="true"\n\n            {{!-- Disable links for quote teasers --}}\n            {{#isTeaserQuote}}\n                {{!--\n                Natively, this works in IE only, but in CSS we\'ll set "pointer-events: none"\n                for all links with the "disabled" attribute\n                --}}\n                disabled\n            {{/isTeaserQuote}}\n\n            {{!--\n            Article previews with the layout_type "category"\n            link to categories instead of articles\n            --}}\n            {{#isLayoutTypeCategory}}\n                {{!-- \n                Don\'t link to other categories within collections (otherwise the "title" of\n                the collection, which is just another article preview with layout type\n                "category" will link to itself)\n                --}}\n                {{#isLayoutTypeCollection}}\n                    disabled\n                {{else}}\n                    href="/categories/{{category_preview.id}}"\n                {{/isLayoutTypeCollection}}\n            {{else}}\n                {{!--\n                Article previews with the layout_type "slideshow"\n                link to slideshows instead of articles\n                --}}\n                {{#isLayoutTypeSlideshow}}\n                    href="/slideshows/{{top_element.slideshow.id}}"\n                {{else}}\n                    href="/articles/{{id}}"\n                {{/isLayoutTypeSlideshow}}\n            {{/isLayoutTypeCategory}}\n        >\n                <div>\n                    <time data-timestamp="{{timestamp_updated_at}}">...</time>\n                </div>\n\n                <div>\n                    {{#isTeaser}}\n                        {{!--\n                        Normal teasers within collections also get the teaserWideExtended layout.\n                        This is a bit ugly, but the NN1 placing tool requires it like that\n                        --}}\n                        {{#isLayoutTypeCollection}}\n                            {{> articlePreviews/teaserWideExtended}}\n                        {{else}}\n                            {{> articlePreviews/teaser}}\n                        {{/isLayoutTypeCollection}}\n                    {{else}}\n                        {{#isTeaserWide}}\n                            {{> articlePreviews/teaserWide}}\n                        {{/isTeaserWide}}\n\n                        {{#isTeaserWideExtended}}\n                            {{> articlePreviews/teaserWideExtended}}\n                        {{/isTeaserWideExtended}}\n\n                        {{#isTeaserCollection}}\n                            {{> articlePreviews/teaserCollection}}\n                        {{/isTeaserCollection}}\n\n                        {{#isTeaserQuote}}\n                            {{> articlePreviews/teaserQuote}}\n                        {{/isTeaserQuote}}\n\n                        {{#isTeaserHtml}}\n                            {{> articlePreviews/teaserHtml}}\n                        {{/isTeaserHtml}}\n                    {{/isTeaser}}\n                </div>\n        </a>\n    </li>\n{{/isEmptyArticle}}');
}), define("app/templates/articlePreviews/teaser", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('{{#isPublireportage}}\n    <span class="decoration publireportage">Sponsored Content</span>\n{{/isPublireportage}}\n\n{{#if featured}}\n    <img src="{{picture_medium_url}}">\n\n    {{#isTopDecoration}}\n        <span class="decoration" style="color: #{{decoration.color}};">{{decoration.name}}</span>\n    {{/isTopDecoration}}\n\n    {{#isLayoutTypeStoryBundle}}\n        <p class="topLine">{{keyword}}</p>\n    {{/isLayoutTypeStoryBundle}}\n\n    <h5>{{{title}}}</h5>\n{{else}}\n    {{#isTopDecoration}}\n        <span class="decoration" style="color: #{{decoration.color}};">{{decoration.name}}</span>\n    {{/isTopDecoration}}\n\n    <h5>{{{title}}}</h5>\n    <img src="{{picture_small_url}}">\n{{/if}}\n\n<h6>\n    {{#if genre}}\n        <span class="decoration" style="color: #{{genre.color}}">{{genre.name}}</span>\n    {{else}}\n        {{#isLeadDecoration}}\n            <span class="decoration" style="color: #{{decoration.color}};">{{decoration.name}}</span>\n        {{/isLeadDecoration}}\n    {{/if}}\n    \n    {{#isLayoutTypeStoryBundle}}\n        {{#if featured}}\n            {{{stripAndTrimHtml lead}}}\n        {{/if}}\n    {{else}}\n        <span class="keyword">{{keyword}}</span> {{{stripAndTrimHtml lead}}}\n    {{/isLayoutTypeStoryBundle}}\n</h6>\n\n<div class="clear"></div>\n\n<span>\n    {{#displayMediaType}}\n        {{tamediaIcon mediatype}}\n    {{/displayMediaType}}\n\n    {{#if authors.length}}\n        <span class="authors">\n                {{author_annotation_prefix}} {{{join authors "name"}}}.\n        </span>\n    {{/if}}\n\n    <span {{#isBottomDecoration}}style="color: #{{decoration.color}};"{{/isBottomDecoration}}>\n        {{translate "Vor"}} <time data-timestamp="{{timestamp_updated_at}}">...</time>\n\n        {{#isBottomDecoration}}\n            &ndash; {{decoration.name}}\n        {{/isBottomDecoration}}\n    </span>\n\n    {{#if comment_count}}\n        <span class="comments">\n            <nobr>{{comment_count}} {{comment_count_text}}</nobr>\n        </span>\n    {{/if}}\n</span>');
}), define("app/templates/articlePreviews/teaserCollection", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<img src="{{picture_square_url}}">\n<h5>{{title}}</h5>\n<h6>{{stripHtml lead}} <span>{{translate "Mehr"}}...</span></h6>\n<span class="date">{{formatDateShort timestamp_updated_at}}</span>\n<span class="count">({{getArticlesCount}} {{translate "Artikel"}})</span>');
}), define("app/templates/articlePreviews/teaserHtml", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile("{{!-- For power users, e.g. for Infografik, etc. see Der Bund /categories/92496267 --}}\n{{{text}}}");
}), define("app/templates/articlePreviews/teaserQuote", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile("{{!--\nNote that articles can also have quotes, see local feed\n/articles/53cfd8921f291db1ca000001.json for example\n--}}\n{{{text}}}");
}), define("app/templates/articlePreviews/teaserWide", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<img src="{{picture_big_url}}" class="teaser">');
}), define("app/templates/articlePreviews/teaserWideExtended", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('{{!-- This template is used for longform previews, collection articles and slideshow previews --}}\n\n<img src="{{picture_big_url}}" class="teaser">\n\n<div class="container {{#isLayoutTypeSlideshow}}slideshow{{/isLayoutTypeSlideshow}}" style="color: #{{font_color}}; background-color: #{{background_color}};">\n\n    {{#if keyword}}\n        <span class="keyword">{{keyword}}</span>\n    {{/if}}\n\n    <span class="date">{{formatDate timestamp_updated_at}}</span>\n\n    <h5>\n        {{#isLayoutTypeSlideshow}}\n            {{tamediaIcon "slideshow"}}\n        {{/isLayoutTypeSlideshow}}\n        \n        {{title}}\n    </h5>\n\n    <p>{{stripHtml lead}}</p>\n</div>');
}), define("app/templates/articles/12appArticle", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<header></header>\n\n<article class="{{layout_type}} {{#isExternalArticle}}blog{{/isExternalArticle}}">    \n    {{#isExternalArticle}}\n        {{> iframe url=layout_type_external_url className="blog" height="100%" scrolling="yes" appifiedUrl=true}}\n    {{else}}\n        <div class="logo"><span class="first">#</span>12</div>\n\n        <h1>{{{title}}}</h1>\n\n        <h2>\n            {{#if genre}}\n                <span class="decoration">{{genre.name}}</span>\n            {{else}}\n                {{#isLeadDecoration}}\n                    <span class="decoration">{{decoration.name}}</span>\n                {{/isLeadDecoration}}\n            {{/if}}\n\n            {{{stripHtml lead}}}\n        </h2>\n\n        {{! Author }}\n        <div id="authors">\n            {{#unless authors.length}}\n                <div class="clear"></div>\n            {{/unless}}\n\n            {{#isWertend}}\n                {{#each authors}}\n                    <div class="author">\n                        {{#if picture}}\n                            <div class="picture">\n                                <img src="{{picture}}">\n                            </div>\n                        {{/if}}\n\n                        {{author_annotation_prefix}} {{name}}\n\n                        {{#if twitter}}\n                            <br><a href="https://twitter.com/{{twitter}}" target="_blank">@{{twitter}}</a>\n                        {{/if}}\n                    </div>\n\n                    <div class="clear"></div>\n                {{/each}}\n            {{else}}\n                {{#each authors}}\n                    <div class="author">\n                        {{author_annotation_prefix}} {{name}}\n\n                        {{#if twitter}}\n                            <br><a href="https://twitter.com/{{twitter}}" target="_blank">@{{twitter}}</a>\n                        {{/if}}\n                    </div>\n\n                    <div class="clear"></div>\n                {{/each}}\n            {{/isWertend}}\n        </div>\n\n        {{! Top element }}\n        {{#if top_element}}\n            {{> contextBox top_element renderContext="topElement"}}\n        {{/if}}\n\n        <div class="appInfo">\n            Sie lesen einen von 12 Artikeln von \u00ab<b>12</b>\u00bb \u2013 der App mit den 12 besten Artikeln, t\u00e4glich um 12 Uhr.\n            <br>\n            <a href="" target="_blank">Mehr erfahren...</a>\n            <br>\n            <a href="" target="_blank" class="sprite-buttons-downloadOnAppStore"></a>\n        </div>\n\n        {{#if scoreboard_id}}\n            <div class="scoreboardContainer"></div>\n        {{/if}}\n\n        {{#if liveticker_id}}\n            {{#if scribble_element}}\n                <div class="livetickerTabs">\n                    <ul>\n                        <li class="active">\n                            {{!-- to do {{tamediaIcon "clock"}} --}}\n                            <span class="sprite-icons-livetickerActive"></span>\n                            <span class="sprite-icons-livetickerInactive"></span>\n                            {{translate "Liveticker"}}\n                        </li>\n\n                        <li>\n                            {{!-- to do {{tamediaIcon "socialView"}} --}}\n                            <span class="sprite-icons-socialViewActive"></span>\n                            <span class="sprite-icons-socialViewInactive"></span>\n                            {{scribble_element.title}}\n                        </li>\n                    </ul>\n                </div>\n\n                <div class="scribbleContainer">\n                    {{#with scribble_element}}\n                        {{> iframe dataUrl=iframe_url height="100%"}}\n                    {{/with}}\n                </div>\n            {{/if}}\n\n            <div class="livetickerContainer"></div>\n        {{/if}}\n\n        {{!--\n            Use this class "text" here, to be able to apply stylings in the css file to the html\n            elements withing the article text only\n        --}}\n        <div class="text">\n            {{! Inline elements }}\n            {{#each textParts}}\n                {{#isString this}}\n                    {{{this}}}\n                {{else}}\n                    {{> contextBox this renderContext="inlineElement"}}\n                {{/isString}}\n            {{/each}}\n\n            {{#if source}}\n                <p id="sourceAnnotation">{{source}}</p>\n            {{/if}}\n\n            {{#each cotext_element.article_previews}}\n                <div class="coText">\n                    <p class="keyword">{{keyword}}</p>\n                    <p class="title">{{title}}</p>\n                    {{{text}}}\n                </div>\n            {{/each}}\n        </div>\n\n        <div class="contextBoxes">\n            <div class="appInfo">\n                <div class="logo"><span class="first">#</span>12</div>\n                Die besten 12 Artikel.\n                <br>\n                T\u00e4glich um 12 Uhr.\n                <br>\n                <a href="" target="_blank">Mehr erfahren...</a>\n                <br>\n                <a href="" target="_blank" class="sprite-buttons-downloadOnAppStore"></a>\n            </div>\n        </div>\n    {{/isExternalArticle}}\n    \n    {{> fullscreenLoader}}\n</article>');
}), define("app/templates/articles/article", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<header>\n    <div class="left">\n        <a href="/" class="back">\n            {{tamediaIcon "backward"}}\n        </a>\n    </div>\n\n    <div class="center">\n        <a href="/" class="customerLogo sprite-logos-{{getCustomerShortName}}"></a>\n    </div>\n\n    <div class="right">\n        <a href="javascript:void(0);" class="iconShare">\n            {{tamediaIcon "dialog"}}\n        </a>\n\n        <a href="javascript:void(0);" class="close">\n            {{tamediaIcon "close"}}\n        </a>\n    </div>\n</header>\n\n<div id="adbanner-article-interstitial"></div>\n\n<article class="{{layout_type}} {{#isExternalArticle}}blog{{/isExternalArticle}}">    \n    {{#isExternalArticle}}\n        {{> iframe url=layout_type_external_url className="blog" height="100%" scrolling="yes" appifiedUrl=true}}\n    {{else}}\n        <div id="adbanner-article-top-banner"></div>\n\n        <div id="publireportage">Sponsored Content</div>\n\n        <div id="timestamp">\n            {{! In mobile, there\'s no difference between "top" or "bottom" decoration }}\n            {{#isTopDecoration}}\n                <span class="decoration" style="color: #{{decoration.color}};">\n                    <span>{{decoration.name}}</span>\n                    {{translate "Vor"}} <time data-timestamp="{{timestamp_updated_at}}">...</time>\n                </span>\n            {{else}}\n                {{#isBottomDecoration}}\n                    <span class="decoration" style="color: #{{decoration.color}};">\n                        {{translate "Vor"}} <time data-timestamp="{{timestamp_updated_at}}">...</time>\n                        &ndash; {{decoration.name}}\n                    </span>\n                {{else}}\n                    {{#if timestamp_updated_at}}\n                        <span>{{formatDate timestamp_updated_at}}</span>\n                        <span>{{formatTime timestamp_updated_at}}</span>\n                    {{/if}}\n                {{/isBottomDecoration}}\n            {{/isTopDecoration}}\n        </div>\n\n        <h1>{{{title}}}</h1>\n\n        <h2>\n            {{#if genre}}\n                <span class="decoration" style="color: #{{genre.color}}">{{genre.name}}</span>\n            {{else}}\n                {{#isLeadDecoration}}\n                    <span class="decoration" style="color: #{{decoration.color}};">{{decoration.name}}</span>\n                {{/isLeadDecoration}}\n            {{/if}}\n\n            {{#if keyword}}\n                <span class="keyword">{{keyword}}</span>\n            {{/if}}\n\n            {{{stripHtml lead}}}\n        </h2>\n\n        {{! Top element }}\n        {{#if top_element}}\n            {{> contextBox top_element renderContext="topElement"}}\n        {{/if}}\n\n        {{! Author }}\n        <div id="authors">\n            {{! The commentsLink partial will be dynamically appended here }}\n            <div id="commentsLink"></div>\n\n            {{#unless authors.length}}\n                <div class="clear"></div>\n            {{/unless}}\n\n            {{#isWertend}}\n                {{#each authors}}\n                    <div class="author">\n                        {{#if picture}}\n                            <div class="picture">\n                                <img src="{{picture}}">\n                            </div>\n                        {{/if}}\n\n                        {{author_annotation_prefix}} {{name}}\n\n                        {{#if twitter}}\n                            <br><a href="https://twitter.com/{{twitter}}" target="_blank">@{{twitter}}</a>\n                        {{/if}}\n                    </div>\n\n                    <div class="clear"></div>\n                {{/each}}\n            {{else}}\n                {{#each authors}}\n                    <div class="author">\n                        {{author_annotation_prefix}} {{name}}\n\n                        {{#if twitter}}\n                            <br><a href="https://twitter.com/{{twitter}}" target="_blank">@{{twitter}}</a>\n                        {{/if}}\n                    </div>\n\n                    <div class="clear"></div>\n                {{/each}}\n            {{/isWertend}}\n        </div>\n\n        {{! Stock exchange trends }}\n        <div id="stockExchangeTrends"></div>\n\n        {{#if scoreboard_id}}\n            <div class="scoreboardContainer"></div>\n        {{/if}}\n\n        {{#if liveticker_id}}\n            {{#if scribble_element}}\n                <div class="livetickerTabs">\n                    <ul>\n                        <li class="active">\n                            {{!-- to do {{tamediaIcon "clock"}} --}}\n                            <span class="sprite-icons-livetickerActive"></span>\n                            <span class="sprite-icons-livetickerInactive"></span>\n                            {{translate "Liveticker"}}\n                        </li>\n\n                        <li>\n                            {{!-- to do {{tamediaIcon "socialView"}} --}}\n                            <span class="sprite-icons-socialViewActive"></span>\n                            <span class="sprite-icons-socialViewInactive"></span>\n                            {{scribble_element.title}}\n                        </li>\n                    </ul>\n                </div>\n\n                <div class="scribbleContainer">\n                    {{#with scribble_element}}\n                        {{> iframe dataUrl=iframe_url height="100%"}}\n                    {{/with}}\n                </div>\n            {{/if}}\n\n            <div class="livetickerContainer"></div>\n        {{/if}}\n\n        {{!--\n            Use this class "text" here, to be able to apply stylings in the css file to the html\n            elements withing the article text only\n        --}}\n        <div class="text">\n            {{! Inline elements }}\n            {{#each textParts}}\n                {{#isString this}}\n                    {{{this}}}\n                {{else}}\n                    {{> contextBox this renderContext="inlineElement"}}\n                {{/isString}}\n            {{/each}}\n\n            {{#if source_annotation}}\n                <p id="sourceAnnotation">{{source_annotation}}</p>\n            {{/if}}\n\n            {{#each cotext_element.article_previews}}\n                <div class="coText">\n                    <p class="keyword">{{keyword}}</p>\n                    <p class="title">{{title}}</p>\n                    {{{text}}}\n                </div>\n            {{/each}}\n        </div>\n\n        <div class="listicle mobile">\n        </div>\n\n        <div id="adbanner-article-article-bottom-banner"></div>\n\n        <div class="socialMedia box">\n            {{> loader}}\n        </div>\n\n        <div class="contextBoxes">\n            {{! Stock exchange info }}\n            {{#if auto_stock_exchange_element}}\n                <div class="contextBox articleElement stockExchangeInfo">\n                    {{#each auto_stock_exchange_element.organizations}}\n                        <h3>{{name}}</h3>\n\n                        {{> iframe url=chart_url className="stockExchangeInfo" height=200}}\n                    {{/each}}\n                </div>\n            {{/if}}\n\n            {{! Article elements}}   \n            {{#if article_elements.length}}\n                {{#each article_elements}}\n                    {{#isSupportedBoxtype}}\n                        {{> contextBox this renderContext="articleElement"}}\n                    {{/isSupportedBoxtype}}\n                {{/each}}\n            {{/if}}\n        </div>\n    {{/isExternalArticle}}\n    \n    {{> fullscreenLoader}}\n</article>');
}), define("app/templates/category", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<header>\n    <div class="left">\n        <a href="/" class="toggle">\n            {{tamediaIcon "leftMenu"}}\n        </a>\n    </div>\n\n    <div class="center">\n        <a href="/" class="customerLogo sprite-logos-{{getCustomerShortName}}"></a>\n    </div>\n\n    <div class="right">\n        <a href="javascript:void(0);" class="close">\n            {{tamediaIcon "close"}}\n        </a>\n    </div>\n</header>\n\n<div id="adbanner-category-interstitial"></div>\n\n<article>\n    <div id="adbanner-category-top-banner"></div>\n\n    <nav>\n        {{#if title}}\n            <h1>\n                <span>{{title}}</span>,\n                {{translate "letztes Update"}} {{translate "vor"}}\n                <time data-timestamp="{{getTimestamp}}">{{translate "wenigen Sek"}}.</time>\n            </h1>\n        {{/if}}\n\n        {{#if sub_category_previews.length}}\n            <table class="NnSelect">\n                <tr>\n                    <td>\n                        {{tamediaIcon "down"}}\n                    </td>\n                    <td>\n                        <select>\n                            <option disabled selected>{{translate "Unterkategorien"}}</option>\n\n                            {{#each sub_category_previews}}\n                                <option value="{{id}}">{{title}}</option>\n                            {{/each}}\n                        </select>\n                    </td>\n                </tr>\n            </table>\n        {{/if}}\n\n        {{#each page_elements}}\n            {{> pageElement}}\n        {{/each}}\n    </nav>\n\n    {{> fullscreenLoader}}\n</article>');
}), define("app/templates/comment", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<header>\n    <div class="left">\n        <a href="/" class="back">\n            {{tamediaIcon "backward"}}\n        </a>\n    </div>\n\n    <div class="center">\n        <a href="/" class="customerLogo sprite-logos-{{getCustomerShortName}}"></a>\n    </div>\n\n    <div class="right">\n        <a href="javascript:void(0);" class="close">\n            {{tamediaIcon "close"}}\n        </a>\n    </div>\n</header>\n\n<article class="{{layout_type}}">\n    <div id="timestamp">\n        {{! In mobile, there\'s no difference between "top" or "bottom" decoration }}\n        {{#isTopOrBottomDecoration}}\n            <span class="decoration" style="color: #{{decoration.color}};">\n                {{translate "Vor"}} <time data-timestamp="{{timestamp_updated_at}}">...</time>\n                &ndash; {{decoration.name}}\n            </span>\n        {{else}}\n            {{#if timestamp_updated_at}}\n                <span>{{formatDate timestamp_updated_at}}</span>\n                <span>{{formatTime timestamp_updated_at}}</span>\n            {{/if}}\n        {{/isTopOrBottomDecoration}}\n    </div>\n\n    {{#if title}}\n        <h1>{{{title}}}</h1>\n\n        <div class="separator"></div>\n    {{/if}}\n\n    <div id="comments"></div>\n\n    {{> fullscreenLoader}}\n</article>');
}), define("app/templates/contextBox", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<div class="contextBox {{renderContext}} {{boxtype}} {{#isPollBox}}NnPollBox{{/isPollBox}}">\n    {{#if title}}\n        <h3>{{title}}</h3>\n    {{/if}}\n\n    {{#isArticlesBox}}\n        <ul>\n            {{#each article_previews}}\n                {{> articlePreview}}\n            {{/each}}\n        </ul>\n    {{/isArticlesBox}}\n\n    {{#isPictureBox}}\n        {{#if picture_zoomable_url}}\n            <a href="{{picture_zoomable_url}}" target="_blank">\n                <img src="{{picture_url}}">\n\n                <div class="enlarge">\n                    {{tamediaIcon "enlarge"}}\n                </div>\n            </a>\n        {{else}}\n            <img src="{{picture_url}}">\n        {{/if}}\n    {{/isPictureBox}}\n\n    {{#isAudioBox}}\n        <audio controls src="{{audio.url}}">\n    {{/isAudioBox}}\n\n    {{#isVideoBox}}\n        <iframe src="http://player.newsnetz.tv/player/iframe.php?vid={{video.id}}&frame=16&adurl={{video.show_ad}}&video_title={{video.title}}&video_lead={{video.lead}}&poster={{video.poster_picture_url}}&language={{#isDch}}de{{else}}fr{{/isDch}}&site={{getCustomerShortName}}&channel={{getChannel}}" height="200"></iframe>\n    {{/isVideoBox}}\n\n    {{#isLinkBox}}\n        {{#each links}}\n            <a href="{{url}}" target="_blank">{{name}}</a>\n        {{/each}}\n    {{/isLinkBox}}\n\n    {{#isInfoBox}}\n        {{{html}}}\n    {{/isInfoBox}}\n\n    {{#isYouTubeBox}}\n        {{> iframe url=url className="youtube" height=200}}\n    {{/isYouTubeBox}}\n\n    {{#isLiveStreamBox}}\n        {{> iframe url=url className="liveStream" height=300}}\n    {{/isLiveStreamBox}}\n\n    {{#isPictureVotingBox}}\n        {{> iframe url=url className="pictureVoting"}}\n    {{/isPictureVotingBox}}\n\n    {{#isQuizBox}}\n        {{> iframe url=url className="quiz" height=2000}}\n    {{/isQuizBox}}\n\n    {{#isChartBox}}\n        {{> iframe url=chart.url className="chart" height=400}}\n    {{/isChartBox}}\n\n    {{#isChartMapBox}}\n        <a href="{{chart_map.url}}" target="_blank"></a>\n    {{/isChartMapBox}}\n\n    {{#isStockExchangeChartBox}}\n        {{> iframe url=iframe_url className="stock_exchange_chart" height=200}}\n    {{/isStockExchangeChartBox}}\n\n    {{#isPollBox}}\n        <div data-pollId="{{poll_id}}">\n            {{!-- will be dynamically added in the article --}}\n        </div>\n    {{/isPollBox}}\n\n    {{#isSlideshowBox}}\n        <div class="slideshowContainer" data-id="{{slideshow.id}}"></div>\n    {{/isSlideshowBox}}\n\n    {{#isIframeBoxMap}}\n        {{> iframe url=iframe_url className=iframe_class_name urlParams="keepSize=width"}}\n    {{else}}\n        {{#isIframeBox}}\n            {{> iframe url=iframe_url className=iframe_class_name}}\n        {{/isIframeBox}}\n    {{/isIframeBoxMap}}\n\n    {{#if caption}}\n        <div class="caption">\n            {{{caption}}}\n\n            {{#if picture_source_annotation}}\n                {{picture_source_annotation}}\n            {{/if}}\n        </div>\n    {{/if}}\n</div>');
}), define("app/templates/front", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<header>\n    <div class="left">\n        <a href="/" class="toggle">\n            <div class="NnIcon leftMenuIcon"></div>\n        </a>\n    </div>\n\n    <div class="center">\n        <a href="/" class="customerLogo sprite-logos-{{getCustomerShortName}}"></a>\n    </div>\n\n    <div class="right">\n        <a href="javascript:void(0);" class="close">\n            {{tamediaIcon "close"}}\n        </a>\n    </div>\n</header>\n\n<div id="adbanner-front-prestitial"></div>\n\n<article>\n    <div id="adbanner-front-top-banner"></div>\n\n    <h1 id="frontFeedSwitcher">\n        {{!-- The front tab is active by default --}}\n        <a href="javascript:void(0);" class="active"><span>{{translate "Frontseite"}}</span></a>\n\n        <a href="javascript:void(0);">\n            <span>{{config.newest}} {{tamediaIcon "clock"}}</span>\n        </a>\n\n        <div class="clear"></div>\n    </h1>\n\n    <nav id="default">\n        <div></div>\n\n        {{> loader}}\n\n        <a href="javascript:void(0);" class="forceDesktop">\n            {{translate "Zur Desktop-Ansicht wechseln"}}\n        </a>\n    </nav>\n\n    <nav id="newest">\n        <div></div>\n        \n        {{> loader}}\n    </nav>\n\n    {{> fullscreenLoader}}\n</article>\n\n<a href="javascript:void(0);" id="goToNewest">\n    <span>\n        <nobr>\n            {{tamediaIcon "backward"}}\n            {{{config.newestDescription}}}\n        </nobr>\n    </span>\n</a>');
}), define("app/templates/iframe", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<div class="iframeContainer {{className}}">\n    <iframe\n        allowfullscreen\n\n        {{!-- If wanted, append appId (needed for blogs for hiding their header) --}}\n        {{#if appifiedUrl}}\n            src="{{appifyUrl url urlParams}}"\n        {{else}}\n            src="{{url}}"\n        {{/if}}\n\n        {{!-- The clients "scrolling" attribute should be stronger than the servers --}}\n        {{#if scrolling}}\n            scrolling="yes"\n        {{else}}\n            {{#if iframe_scrolling}}\n                scrolling="yes"\n            {{else}}\n                scrolling="no"\n\n                {{!-- This cute little chap is for Safari --}}\n                {{!-- Without this, the iframe gets as wide as its content, see 26372008 --}}\n                {{!-- http://stackoverflow.com/questions/20123960/how-to-get-iframe-width-100-in-iphone-portrait-view --}}\n                style="min-width: 100%; width: 100px; *width: 100%;"\n            {{/if}}\n        {{/if}}\n\n        {{#if dataUrl}}\n            data-url="{{appifyUrl dataUrl urlParams}}"\n        {{/if}}\n\n        {{!--\n            TODO: Refactor as soon as the API refactored their iframe logic\n            Check following articles (also on the desktop):\n            - 18810858\n            - 14216796\n        --}}\n        {{#hasIframeHeight}}\n            {{#if iframe_height}}\n                height="{{iframe_height}}"\n            {{else}}\n                height="300"\n            {{/if}}\n        {{else}}\n            {{#if height}}\n                height="{{height}}"\n            {{else}}\n                height="200"\n            {{/if}}\n        {{/hasIframeHeight}}\n    ></iframe>\n</div>');
}), define("app/templates/leftMenu", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<ul>\n    {{#isPaywallEnabled}}\n        {{#if paywall.user}}\n            <li><a href="{{paywall.urls.myAccount}}">{{translate "Meine Abos"}}</a></li>\n            <li><a href="{{paywall.urls.logout}}">Logout</a></li>\n        {{else}}\n            <li><a href="{{paywall.urls.login}}">Login</a></li>\n            <li><a href="{{paywall.urls.abo}}">Abonnement</a></li>\n        {{/if}}\n    {{/isPaywallEnabled}}\n\n    {{#each navigations}}\n        {{> menuItem}}\n    {{/each}}\n\n    <li><a href="{{site.feedback_url}}">Feedback</a></li>\n\n    {{#isDebugMode}}\n        <li><a href="javascript:void(0);" name="disableAds">Tweak: No Ads for 1h</a></li>\n        <li><a href="javascript:void(0);" name="disablePaywall">Tweak: No Paywall for 1h</a></li>\n        <li><a href="javascript:void(0);" name="enablePaywall">Tweak: Paywall on for 1h</a></li>\n        <li>\n            <a>\n                {{translate "\u00dcber diese Version"}}\n                <p id="revision">\n                    0f41942 (HEAD, tag: 1.153.0-listicles, origin/master, origin/HEAD, master), Fixed tests, Alex Ku\u0308hne, 2015-08-28\n                </p>\n            </a>\n        </li>\n    {{/isDebugMode}}\n</ul>');
}), define("app/templates/menuItem", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<li class="{{navigation_type}}">\n    {{#isNavigationTypeTitle}}\n        <h3>{{name}}</h3>\n    {{else}}\n        {{#isInternalUrl}}\n            {{#isFrontPath}}\n                {{! Front }}\n                <a class="category" href="/">{{name}}</a>\n            {{/isFrontPath}}\n\n            {{#isWeatherPath}}\n                {{! Weather }}\n                <a class="category" href="/weather">{{name}}</a>\n            {{/isWeatherPath}}\n        {{else}}\n            {{#isNavigationTypeCategory}}\n                <a class="category" href="/categories/{{category_preview.id}}">{{name}}</a>\n            {{else}}\n                <a href="{{path}}">{{name}}</a>\n            {{/isNavigationTypeCategory}}\n        {{/isInternalUrl}}\n    {{/isNavigationTypeTitle}}\n\n    {{#if sub_navigations.length}}\n        <ul>\n            {{#each sub_navigations}}\n                {{> menuItem}}\n            {{/each}}\n        </ul>\n    {{/if}}\n</li>');
}), define("app/templates/pageElement", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<ul class="pageElement {{layout_type}}">\n    <li>\n        {{#if title}}\n            {{#isCategoryLink}}\n                {{#linkTo "/categories/%id%" id=linked_object_id}}\n                    <h2>{{title}}</h2>\n                {{/linkTo}}\n            {{else}}\n                {{#isWeatherLink}}\n                    {{#linkTo "/weather"}}\n                        <h2>{{title}}</h2>\n                    {{/linkTo}}\n                {{else}}\n                    <h2>{{title}}</h2>\n                {{/isWeatherLink}}\n            {{/isCategoryLink}}\n        {{/if}}\n\n        {{#isBreakingNewsArticlesBox}}\n            {{#linkTo "/articles/%id%" id=articles.0.id}}\n                <span class="label">{{articles.0.decoration.name}}</span> {{articles.0.title}}\n            {{/linkTo}}\n        {{/isBreakingNewsArticlesBox}}\n\n        {{#isArticlesBox}}\n            <ul>\n                {{#each articles}}\n                    {{> articlePreview pageElementLayoutType=../layout_type articles=../articles}}\n                {{/each}}\n            </ul>\n        {{/isArticlesBox}}\n\n        {{#isSlideshowOverviewBox}}\n            {{#with slideshow_overviews}}\n                <ul>\n                    <li class="contextBox slideshow"></li>\n                </ul>\n            {{/with}}\n        {{/isSlideshowOverviewBox}}\n\n        {{#isIframeBox}}\n            <ul>\n                <li>\n                    {{> iframe url=iframe_url className=iframe_class_name}}\n                </li>\n            </ul>\n        {{/isIframeBox}}\n\n        {{#isMeteonewsBox}}\n            <ul>\n                <li class="forecast">\n                    {{#each meteonews.forecasts}}\n                        <div class="day">\n                            <div class="sprite-meteonews-{{symbol_code}}"></div>\n                            <div class="weekDay">{{formatMeteonewsDay end_timestamp}}</div>\n                            <div class="temperature">{{temperature_avg}}{{temperature_avg_unit}}</div>\n                        </div>\n                    {{/each}}\n                </li>\n            </ul>\n        {{/isMeteonewsBox}}\n    </li>\n</ul>');
}), define("app/templates/scoreboard", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<div class="scoreboard">\n    {{#with tennis_result}}\n        <table class="tennis">\n            <tbody>\n                <tr>\n                    <td></td>\n                    {{#forEachSet}}\n                        <td>{{set_number}}. S</td>\n                    {{/forEachSet}}\n                </tr>\n                <tr>\n                    <td>\n                        {{player_left}}\n\n                        {{#isLeftPlayersTurn}}\n                            <span class="sprite-icons-tennisRacket"></span>\n                        {{/isLeftPlayersTurn}}\n                    </td>\n\n                    {{#forEachSet}}\n                        <td {{#hasLeftPlayerWon}}class="winner"{{/hasLeftPlayerWon}}>{{score_left}}</td>\n                    {{/forEachSet}}\n                </tr>\n                <tr>\n                    <td>\n                        {{player_right}}\n\n                        {{#isRightPlayersTurn}}\n                            <span class="sprite-icons-tennisRacket"></span>\n                        {{/isRightPlayersTurn}}\n                    </td>\n\n                    {{#forEachSet}}\n                        <td {{#hasRightPlayerWon}}class="winner"{{/hasRightPlayerWon}}>{{score_right}}</td>\n                    {{/forEachSet}}\n                </tr>\n            </tbody>\n        </table>\n    {{/with}}\n\n    {{#with teamsport_result}}\n        <table class="teamsport">\n            <tr>\n                <td>\n                    {{#if icon_home}}\n                        <img src="{{icon_home}}"><br>\n                    {{/if}}\n\n                    {{name_home}}\n                </td>\n                <td>{{score_home}} : {{score_visitor}}</td>\n                <td>\n                    {{#if icon_visitor}}\n                        <img src="{{icon_visitor}}"><br>\n                    {{/if}}\n\n                    {{name_visitor}}\n                </td>\n            </tr>\n        </table>\n    {{/with}}\n</div>');
}), define("app/templates/slideshow", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<article class="noScrollbars">\n    <div class="slideshow"></div>\n\n    {{> fullscreenLoader style="black"}}\n</article>');
}), define("app/templates/stockExchangeTrend", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<a href="{{url}}" target="_blank">\n    \x3c!-- Image Tag (Tag for Images only) //TAG for network 1084: Swiss Adserver - Newsnet // Website: tagesanzeiger.ch // Page: B\u00f6rse // Placement: TA-Mobile-Tradebutton (3722085)  // created at: Mar 15, 2012 4:24:12 PM  --\x3e\n    <img src="http://ad.dc2.adtech.de/adserv/3.0/1084/3722085/0/16/ADTECH;grp=[group]" border="0" height="1" width="1" alt="[Alt-Text]" style="display: none">\n\n    <div class="sprite-stockExchange inlineBlock"></div>\n\n    <span>{{symbol}}</span>\n    <span>{{price}}</span>\n    <span class="{{getStockPerformanceColor performance_pct}}">{{toTwoDecimals performance_pct}}%</span>\n</a>');
}), define("app/templates/weather", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('<header>\n    <div class="left">\n        <a href="/" class="back">\n            {{tamediaIcon "backward"}}\n        </a>\n    </div>\n\n    <div class="center">\n        <a href="/" class="customerLogo sprite-logos-{{getCustomerShortName}}"></a>\n    </div>\n\n    <div class="right">\n        <a href="javascript:void(0);" class="close">\n            {{tamediaIcon "close"}}\n        </a>\n    </div>\n</header>\n\n<div id="adbanner-weather-interstitial"></div>\n\n<article>\n    <div id="adbanner-weather-top-banner"></div>\n\n    {{> iframe url=url height=1500}}\n\n    {{> fullscreenLoader}}\n</article>');
}), define("app/templates/weatherObservation", ["exports"], function(__exports__) {
  __exports__["default"] = Handlebars.compile('{{#linkTo "/weather" class="meteonews"}}\n    <div class="sprite-meteonews-small-{{symbol_code}}"></div>\n    <div>{{temperature}} {{temperature_unit}}</div>\n{{/linkTo}}');
}), define("app/viewManager", ["framework/viewManager", "framework/browser"], function(api, b) {
  var show;
  var activate;
  var err;
  var callback;
  var p;
  /** @type {boolean} */
  err = false;
  p = {
    property : "transform",
    duration : "0.3s",
    timingFn : "ease-in-out"
  };
  if (b.browser.isWebKit()) {
    /** @type {string} */
    p.property = "-webkit-transform";
  }
  /**
   * @param {string} id
   * @param {string} pos
   * @param {string} keepData
   * @return {?}
   */
  show = function(id, pos, keepData) {
    var element;
    var self;
    var tests;
    switch(tests = [], element = $("#" + pos).show(), self = $("#" + id).show(), $("#blocker").show(), keepData) {
      case "rightToLeft":
        element.attr("data-scrollstate", element.find("article").scrollTop());
        self.css("zIndex", 3);
        tests.push(element.NnTransit(p.property, "translateX(0)", "translateX(-50px)", p.duration, p.timingFn, function() {
          return element.hide();
        }));
        tests.push(self.NnTransit(p.property, "translateX(100%)", "translateX(0)", p.duration, p.timingFn));
        break;
      case "leftToRight":
        element.find("article").scrollTop(element.attr("data-scrollstate"));
        tests.push(element.NnTransit(p.property, "translateX(-50px)", "translateX(0)", p.duration, p.timingFn, function() {
          return element.css("zIndex", 3), self.hide();
        }));
        tests.push(self.NnTransit(p.property, "translateX(0)", "translateX(100%)", p.duration, p.timingFn));
    }
    return RSVP.all(tests).then(function() {
      return $("#blocker").hide();
    });
  };
  /**
   * @param {string} label
   * @return {?}
   */
  callback = function(label) {
    return new RSVP.Promise(function(done) {
      var self;
      return err ? done() : (err = true, $("aside").show(), self = $("#" + label), self.NnTransit(p.property, "translateX(0)", "translateX(85%)", p.duration, p.timingFn, function() {
        return done();
      }));
    });
  };
  /**
   * @param {string} container
   * @return {?}
   */
  activate = function(container) {
    return new RSVP.Promise(function(callback) {
      var self;
      return err ? (err = false, self = $("#" + container), self.NnTransit(p.property, "translateX(85%)", "translateX(0)", p.duration, p.timingFn, function() {
        return $("aside").hide(), callback();
      })) : callback();
    });
  };
  /**
   * @param {string} item
   * @return {?}
   */
  api.viewManager.toggleLeftMenu = function(item) {
    return err ? activate(item) : callback(item);
  };
  /**
   * @param {string} target
   * @param {string} node
   * @param {string} name
   * @return {?}
   */
  api.viewManager.show = function(target, node, name) {
    return new RSVP.Promise(function($sanitize) {
      return activate(node).then(function() {
        if ($("aside").hide().css("zIndex", 1), $("section").hide().css("zIndex", 2), $("#blocker").css("zIndex", 4), null == node || node === target) {
          return $("#" + target).css("zIndex", 3).show(), $sanitize();
        }
        switch(name) {
          case "rightToLeft":
            return b.browser.isAndroid() || (b.browser.isWP() || $sanitize()), show(target, node, name).then(function() {
              return $sanitize();
            });
          case "leftToRight":
            return b.browser.isAndroid() || (b.browser.isWP() || $sanitize()), show(node, target, name).then(function() {
              return $sanitize();
            });
        }
      });
    });
  };
});
